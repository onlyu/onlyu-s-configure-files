#---------------------------------------------------------------
# Makefile of QTZ-Online-Game-Server-OS

MAKE=gmake
SHELL=/bin/sh
OBJDIR=obj
SRCDIR=src
#GAME_BIN=gamed
GAME_BIN=engine
DBD_BIN=dbd
NETD_BIN=netd
INSTALL=install -c
INCLUDES = -Iinclude/ -I./ -I/usr/local/include  -Igrammar/  -Ilib/
#EXTRALIBS= -lcrypt -lm -lz -lmd -R/usr/local/lib -L/usr/local/lib -levent
EXTRALIBS= -L/usr/local/lib -L/usr/local/lib/mysql -R/usr/local/lib -lapr-1 -levent -lz -static -lssl -lcrypto -lthr -lcrypt -lm -lmd -lmysqlclient -lz -liconv -lstdc++ #yy openid 需要 lstdc++
EXTRALIBS= -L/usr/lib -L/usr/local/lib  -L/usr/local/lib/mysql -R/usr/local/lib -lapr-1 -levent -static  -lthr -lcrypt -lm -lmd -lmysqlclient  /usr/local/lib/libcurl.a -L/usr/lib/lib -lssl -lcrypto -lz -liconv
#CPP=gcc45 -E
CPP=gcc44 -E
#CFLAGS=-std=c99

ifeq ($(shell whoami), fs)
	DEFINE_MACROS = 
else
	DEFINE_MACROS = -DDIRTY_MAP_CHECK -DNOT_FS_USER #-DDIRTY_DUMP_DEBUG 
endif

CFLAGS=-g -Werror -Wall -DDBVAR_NOASSIGN ${DEFINE_MACROS}
EDIT_CFLAGS=-g -Werror
#CC=gcc45
CC=gcc44

#OPTIMIZE=-g -DFD_SETSIZE=10000 -Wall
#OPTIMIZE=-pipe -march=native -fprefetch-loop-arrays -minline-all-stringops -g -DFD_SETSIZE=10000 -Wall -O2 -D_THREAD_SAFE
#OPTIMIZE=-g -DFD_SETSIZE=10000 -Wall -fomit-frame-pointer -fstrength-reduce
#OPTIMIZE=-pipe -march=native -fprefetch-loop-arrays -minline-all-stringops -g -DFD_SETSIZE=10000 -Wall -O2 -D_THREAD_SAFE -fomit-frame-pointer -fstrength-reduce
#OPTIMIZE=-pipe -march=native -fprefetch-loop-arrays -g -DFD_SETSIZE=10000 -Wall -O2 -D_THREAD_SAFE
OPTIMIZE=-pipe -march=native -fprefetch-loop-arrays -DFD_SETSIZE=10000 -Wall -D_THREAD_SAFE -fomit-frame-pointer -fstrength-reduce -g 
#OPTIMIZE=-O2 -fomit-frame-pointer -fstrength-reduce
YACC=bison -d -y --no-lines
RANLIB=ranlib
PROOF=
STRFUNCS=

SRC=grammar.tab.c lex.c \
	main.c rc.c interpret.c simulate.c file.c \
	backend.c array.c mapping.c dirty.c comm.c regexp.c swap.c buffer.c \
	port.c class.c efuns_main.c \
	efuns_port.c otable.c dumpstat.c stralloc.c \
	hash.c reclaim.c simul_efun.c sprintf.c program.c \
	compiler.c avltree.c icode.c trees.c generate.c scratchpad.c \
	$(STRFUNCS) replace_program.c ualarm.c \
	crypt.c strstr.c disassembler.c binaries.c \
	qsort.c eoperators.c object.c \
	stack.c list.c  


OBJ=$(addprefix $(OBJDIR)/,$(subst .c,.o,$(SRC)))

#---------------------------------------------------------------

all: _game 

# 保证每次都重新执行的指令
.PHONY : update-rpc clean compile-script _game files

# rpc导表
update-rpc:
	- ./engine -r tools/makerpc
# 编译lpc脚本
compile-script:
	-./engine -b

_game: predo grammar/cc.h include/cc.h files depend game_build
	-cp -f $(GAME_BIN) $(GAME_BIN).nostrip
	strip $(GAME_BIN)
	-cp -f $(GAME_BIN) $(NETD_BIN)
	-cp -f $(GAME_BIN) $(DBD_BIN)


#系统配置文件
#
predo:
	-test -d $(OBJDIR) || mkdir $(OBJDIR)
grammar/cc.h:
	rm -f grammar/cc.h
	echo "/* this file automatically generated by the Makefile */" > grammar/cc.h
	echo '#define COMPILER "$(CC)"' >> grammar/cc.h
	echo '#define OPTIMIZE "$(OPTIMIZE)"' >> grammar/cc.h
	echo '#define CFLAGS   "$(EDIT_CFLAGS) $(INCLUDES)"' >> grammar/cc.h
	echo '#define OBJDIR   "$(OBJDIR)"' >> grammar/cc.h
	echo '#define GAME_MODULE 1' >> grammar/cc.h
include/cc.h:
	cp -f grammar/cc.h include/cc.h


#需要由edit_source自动生成的文件
#
files: grammar/edit_source grammar/sysmalloc.c grammar/smalloc.c grammar/bsdmalloc.c grammar/debugmalloc.c grammar/wrappedmalloc.c grammar/options.h grammar/op_spec.c grammar/func_spec.c grammar/configure.h grammar/grammar.y.pre
	grammar/edit_source -configure
	grammar/edit_source -options -malloc -build_func_spec '$(CPP) $(CFLAGS) $(INCLUDES)' \
	                    -process grammar/grammar.y.pre
	grammar/edit_source -build_efuns -build_applies
	rm -f comptest*
	touch $(SRCDIR)/mallocwrapper.c
	cp -f grammar/opc.h         include/
	cp -f grammar/efunctions.h  include/
	cp -f grammar/opcodes.h     include/
	cp -f grammar/efun_protos.h include/
	touch files
	rm -f $(OBJDIR)/interpret.o
#因为interpret.c中包含了对所有EFUN函数指针的引用

game_build: $(GAME_BIN)

#---------------------------------------------------------------
# 编译OS主程序
$(GAME_BIN): game_packages db_packages netd_packages $(OBJ)
	$(PROOF) $(CC) $(CFLAGS) $(OPTIMIZE) -o $(GAME_BIN) $(OBJ) packages/game_packages.a packages/db_packages.a packages/netd_packages.a $(EXTRALIBS)



-include .Dependencies
$(OBJDIR)/%.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) $(OPTIMIZE) -o $@ -c $<

$(OBJDIR)/lex.o: $(SRCDIR)/lex.c grammar/preprocess.c grammar/cc.h $(SRCDIR)/grammar.tab.c

$(OBJDIR)/grammar.tab.o: $(SRCDIR)/grammar.tab.c grammar/opcodes.h

$(SRCDIR)/grammar.tab.c: grammar/grammar.y
	$(YACC) $(YFLAGS) grammar/grammar.y
	sed "s/y.tab.c/grammar.tab.c/g" y.tab.c > grammar.tab.c
	rm -f y.tab.c
	mv -f y.tab.h include/grammar.tab.h
	mv -f grammar.tab.c $(SRCDIR)

#---------------------------------------------------------------
# 编译edit_source

grammar/edit_source: $(OBJDIR)/edit_source.o $(OBJDIR)/hash.o $(OBJDIR)/make_func.tab.o
	$(CC) $(CFLAGS) -o grammar/edit_source  $(OBJDIR)/edit_source.o \
						$(OBJDIR)/hash.o \
						$(OBJDIR)/make_func.tab.o

$(OBJDIR)/edit_source.o: grammar/edit_source.c grammar/preprocess.c grammar/cc.h

#--- Note: don't optimize the next two programs.

$(OBJDIR)/edit_source.o: grammar/edit_source.c
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ -c $<

$(OBJDIR)/make_func.tab.o: grammar/make_func.tab.c
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ -c $<

grammar/make_func.tab.c: grammar/make_func.y grammar/cc.h
	$(YACC) $(YFLAGS) grammar/make_func.y
	-rm -f grammer/make_func.tab.c
	-rm -f y.tab.h
	mv y.tab.c grammar/make_func.tab.c

#---------------------------------------------------------------

game_packages: 
	echo "In Package"
	$(MAKE) -C packages 'CC=$(CC)' \
			'CFLAGS=$(CFLAGS) $(OPTIMIZE)' \
			'RANLIB=$(RANLIB)' _game
db_packages: 
	echo "In Package"
	$(MAKE) -C packages 'CC=$(CC)' \
			'CFLAGS=$(CFLAGS) $(OPTIMIZE)' \
			'RANLIB=$(RANLIB)' _db 
netd_packages: 
	echo "In Package"
	$(MAKE) -C packages 'CC=$(CC)' \
			'CFLAGS=$(CFLAGS) $(OPTIMIZE)' \
			'RANLIB=$(RANLIB)' _netd 


#---------------------------------------------------------------

# get ready for recompile
neat:
	-rm -rf $(OBJDIR) *.o *.tab.c *.tab.h
	-mkdir $(OBJDIR)
	-(cd ./grammar; rm -f efun_defs.c option_defs.c)
	-(cd ./grammar; rm -f opcodes.h efunctions.h opc.h efun_protos.h options_incl.h)
	-(cd ./grammar; rm -f func_spec.cpp files)
	-(cd ./grammar; rm -f grammar.y comptest* a.out)
	-(cd ./grammar; rm -f make_func.tab.c)
#	-rm -f $(SRCDIR)/malloc.c $(SRCDIR)/mallocwrapper.c
	-rm -f $(SRCDIR)/malloc.c
	-(cd packages; $(MAKE) clean)
	#-rm -f packages/Makefile packages/GNUmakefile packages/packages
	-rm -f packages/GNUmakefile packages/packages

# remove everything except configuration
clean: neat
	-rm -f include/cc.h grammar/cc.h grammar/edit_source src/grammar.tab.c include/opcodes.h include/efun_protos.h include/efunctions.h include/opc.h include/configure.h packages/packages.a
	-rm -f comptest* configure.h
	-rm -rf files
	-rm -f $(GAME_BIN) $(GAME_BIN).nostrip
	-rm -f $(DBD_BIN) $(DBD_BIN).nostrip
	-rm -f $(NETD_BIN) $(NETD_BIN).nostrip
	-rm -rf obj
	-rm -f core y.output
	-find . -name "*~" -print | xargs rm -f
	-find . -name "*.orig" -print | xargs rm -f
	-find . -name "*.rej" -print | xargs rm -f
	-rm -f *.ln 
#	-rm -f $(GAME_BIN) $(GAME_BIN).old addr_server
	-rm -f .Dependencies tmpdepend
#	-touch .Dependencies

#---------------------------------------------------------------

parallel:
	$(MAKE) -k -l -j 6 cc.h files
	$(MAKE) -k -l -j 6 game_build

#利用GCC生成文件间的依赖关系(生成.Dependencies文件)
# (-MM表示输出文件不包括include的系统头文件)
#
depend: $(SRCDIR)/grammar.tab.c grammar/cc.h grammar/opcodes.h grammar/efunctions.h grammar/efun_defs.c grammar/configure.h
	-rm -f tmpdepend
	for i in $(SRCDIR)/*.c; do $(CC) $(INCLUDES) -MM -DDEPEND $$i >>tmpdepend; done
	sed -e "s!^[^ ]!$(OBJDIR)/&!" <tmpdepend >.Dependencies
	-rm -f tmpdepend

remake: neat all

#---------------------------------------------------------------

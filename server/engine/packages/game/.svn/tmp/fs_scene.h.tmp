#ifndef FS_SCENE_H
#define FS_SCENE_H

#include <sys/queue.h>
#include "fs_lpc_op.h"
#include "fs_int_array.h"
#include "fs_hlist.h"

#define MAP_FILE               "map/map.ini"
#define MAP_HSIZE              1024                    /*地图索引的hash项大小*/
#define VIRTUAL_SCENE_LEVEL    10000                   /*虚拟场景编号*/
#ifdef  NOT_FS_USER
#define MAX_SCENE_NUM          100
#else 
#define MAX_SCENE_NUM		   50000                   /*预先分配场景*/
#endif

#define MAX_CELL_NUM           (MAX_SCENE_NUM * 500)   /*预先分配cell*/


// 阵营中的团体
#define CAMP_GROUP_BIT         0xFF00
// 阵营中的每一个团体中的队伍
#define CAMP_TEAM_BIT          0x00FF

#define USER_CAMP              (0x0000) 
// 敌方和友方其实都是相对于玩家的
#define CAMP_FRIEND            (0x0001) 
#define CAMP_ENEMY             (0x0102) 
#define CAMP_NEUTRAL           (0xFFFF) 


// Addon标志
#define FIGHT_BIT              1
#define FLY_BIT                2

#define FIGHT_FLAG             (1 << FIGHT_BIT)        /*战斗标志位*/
#define FLY_FLAG               (1 << FLY_BIT)          /*飞行标志位*/



// terrain_blk 地形阻挡
// 静态阻挡位
#define NORMAL_BLOCK_BIT       (1 << 0)
// 动态阻挡位
#define DYNAMIC_BLOCK_BIT      (1 << 1)
// 地形位
#define TERRAIN_BIT            (0x00F0)
// 阻挡位
#define BLOCK_BIT              (0x000F)

// cell的阻挡信息
#define CELL_BLOCK(c)          (c->terrain_blk & BLOCK_BIT)
// cell的地形信息
#define CELL_TERRAIN(c)        ((c->terrain_blk & TERRAIN_BIT) >> 4)

#define TERRAIN_2_BIT(t)       ((t << 4) & TERRAIN_BIT)

struct fs_user_s;

// 跳转信息结构
typedef struct fs_jmp_s {
	int scene;
	short int x;
	short int y;
	short int fly_limit;
}fs_jmp_t;

typedef struct fs_cell_s {
	short int terrain_blk;       // 地形,阻挡
	short int acc_ref;           // 奇遇点引数
	short int jmp_id;            // 跳转ID
	int acc_index;               // 奇遇点
	unsigned char writed;        // 地图cell是否已经修改，如果修改需要释放
	// fs_jmp_t *jmp;
}fs_cell_t;

typedef struct fs_map_s {
	int w;
	int h;
	int id;
	fs_cell_t *pcells;           // 地图所有的cells
}fs_map_t;


// 场景相关数据结构
#define GRID_SIZE                (650) 

typedef struct fs_pos_s {
	short int x;
	short int y;
}fs_pos_t;

enum {
	T_ENTRY_NPC,
	T_ENTRY_USR,
	T_ENTRY_COUNT
};

// 走路方式
#define  T_RUN_NORMAL             0          /*普通走路*/
#define  T_RUN_FLY                1          /*飞行走路, 忽视所有地形，阻挡*/
#define  T_RUN_TERRAIN            2          /*地形走路(遁走)*/

typedef struct fs_scene_entry_s{
	TAILQ_ENTRY(fs_scene_entry_s) list;
	struct fs_grid_s * mygrid;                /*当前处在的格子*/
	unsigned int owner;                       /*entry属主id*/
	unsigned char type;                       /*entry类型*/
	int resid;                                /*资源id, Npc(iType), User(ResId)*/
	int x,y,z;
	svalue_t name;
	svalue_t title;
	int run_method;                           /*走路方式*/
	int run_terrain;                          /*行走地形*/
	int run_hook;
	int dir;
	int camp;                                 /*玩家阵营*/
	int speed;
	int flytoolid;                            /*飞行器ID*/
	int name_color;                           /*名字颜色*/
	int title_color;                          /*称谓颜色*/

	fs_int_array_t *acc_events;               /*奇遇事件*/
	fs_int_array_t *npc_aoi_evs;              /*当进入到NPC的视野内时，如果NPC有触发区域，那么需要添加*/
	
	union {
		struct fs_user_s * user_data;
		struct fs_npc_object_s *npc_data;
	};
}fs_scene_entry_t;

TAILQ_HEAD(fs_entry_head_s, fs_scene_entry_s);

typedef struct fs_entry_list_s{
	struct fs_entry_head_s *head;
	int count;
}fs_entry_list_t;

typedef struct fs_grid_s{
	fs_entry_list_t list[T_ENTRY_COUNT];
	struct fs_scene_s *scene;
	short int grid_x;
	short int grid_y;
}fs_grid_t;

typedef struct fs_scene_s {
	int w;
	int h;
	int grid_size;
	int grid_w;
	int grid_h;
	int id;
	int aoi_scope;
	struct fs_grid_s *grids;
	// struct fs_aoi_event_head_s *ev_blk_head;
	struct fs_map_s *map;
	fs_cell_t **ppcells;
	fs_obj_hash_t *jmp_table; // 跳转表
	int weather;
	int isnight;
	int synctime;             //走路同步时间
	int anlei;                //是否暗雷场景
	int warfog;
} fs_scene_t;

enum {                        // type的类型
	AOI_EV_NOR=0,
	AOI_EV_BLK,
	AOI_EV_ACC,
};

// 奇遇事件
typedef struct fs_aoi_event_s {
	short int x, y, z, w, h;
	unsigned char type;
} fs_aoi_event_t;

#define POS_NOT_VALID(sc, x, y)  (x >= sc->w || y >= sc->h || x < 0 || y < 0) 
#define SCENE_CELL(sc, x, y) (sc->ppcells[(sc->h - 1 - y) * sc->w + x])
#define MAP_CELL(map, x, y) (&map->pcells[(map->h - 1 - y) * map->w + x])

// 文件结构
typedef struct fs_fss_cell_s {
	short int x;
	short int y;
	unsigned char terrain_block;
	unsigned char space_block;
	unsigned char jump_id;
	unsigned char sound_id;
	unsigned char sound_amp;
} fs_fss_cell_t;

// blk 文件头
typedef struct fs_fss_file_head_s {
	int tag;
	int version;
	int w;
	int h;
} fs_fss_file_head_t;

typedef struct fs_follow_summon_s {
	int id;
	int icon;
	svalue_t name;
} fs_follow_summon_t;


// 名字成为颜色
#define PLAYER_NAME_COLOR 0xFF00FFFF
#define PLAYER_TITLE_COLOR 0xFFE066FF
#define NPC_NAME_COLOR 0xFFFFFF00
#define NPC_TITLE_COLOR 0xFFFF5588 
#define PLAYER_SELECT_COLOR 0xFFFF0000

void fs_init_sys_scene_module();
fs_scene_t *fs_find_scene_node(int sceneid);
fs_aoi_event_t * find_acc_event(int ev_index);
inline fs_cell_t *fs_get_cell(fs_scene_t *scene, int x, int y);
void fs_dump_scene_ob();
#endif

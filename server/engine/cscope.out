cscope 16 $HOME/work/trunk/engine -q 0000008626 0001715656
	@configure.h

1 
	#INCL_STDLIB_H


	)

2 
	#INCL_UNISTD_H


	)

3 
	#INCL_TIME_H


	)

4 
	#USE_TZSET


	)

5 
	#INCL_SYS_TIMES_H


	)

6 
	#INCL_FCNTL_H


	)

7 
	#INCL_SYS_TIME_H


	)

8 
	#INCL_LIMITS_H


	)

9 
	#INCL_NETINET_IN_H


	)

10 
	#INCL_ARPA_INET_H


	)

11 
	#INCL_SYS_IOCTL_H


	)

12 
	#INCL_SYS_SOCKET_H


	)

13 
	#INCL_NETDB_H


	)

14 
	#INCL_ARPA_TELNET_H


	)

15 
	#INCL_SYS_SEMA_H


	)

16 
	#INCL_SYS_SOCKETVAR_H


	)

17 
	#INCL_SYS_STAT_H


	)

18 
	#INCL_DIRENT_H


	)

19 
	#INCL_SYS_DIRENT_H


	)

20 
	#USE_STRUCT_DIRENT


	)

21 
	#INCL_SYS_FILIO_H


	)

22 
	#INCL_SYS_SOCKIO_H


	)

23 
	#INCL_SYS_RESOURCE_H


	)

24 
	#INCL_SYS_WAIT_H


	)

25 
	#INCL_STDARG_H


	)

26 
	#INCL_DLFCN_H


	)

27 
	#RTLD_LAZY
 1

	)

28 
	#RANDOM


	)

29 
	#USE_BSD_SIGNALS


	)

30 
	#SIGNAL_ERROR
 
SIG_ERR


	)

31 
	#INLINE
 
ölöe


	)

32 
	#CONST
 c⁄°

	)

33 
	#HAS_UALARM


	)

34 
	#HAS_STRERROR


	)

35 
	#HAS_GETCWD


	)

36 
	#RUSAGE


	)

37 
	#TIMES


	)

38 
	#HAS_GETTIMEOFDAY


	)

39 
	#HAS_FCHMOD


	)

40 
	#SIZEOF_INT
 4

	)

41 
	#SIZEOF_PTR
 8

	)

42 
	#SIZEOF_SHORT
 2

	)

43 
	#SIZEOF_FLOAT
 4

	)

44 
	#UINT32
 

	)

45 
	#CONFIGURE_VERSION
 5

	)

	@grammar/bsdmalloc.c

34 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

35 
	gsccsid
[] = "@(#)malloc.c 5.11 (Berkeley) 2/23/91";

49 
	#IN_MALLOC_WRAPPER


	)

50 
	#NO_OPCODES


	)

51 
	~"°d.h
"

53 #unde‡
NULL


54 
	#NULL
 0

	)

56 #ifde‡
_SEQUENT_


57 
	tu_ch¨
;

58 
	tu_sh‹t
;

59 
	tu_öt
;

73 
	uovîhód


75 
ovîhód
 *
	mov_√xt
;

78 
u_ch¨
 
	movu_magic
;

79 
u_ch¨
 
	movu_ödex
;

80 #ifde‡
RCHECK


81 
u_sh‹t
 
	movu_rmagic
;

82 
u_öt
 
	movu_size
;

84 } 
	movu
;

85 
	#ov_magic
 
ovu
.
ovu_magic


	)

86 
	#ov_ödex
 
ovu
.
ovu_ödex


	)

87 
	#ov_rmagic
 
ovu
.
ovu_rmagic


	)

88 
	#ov_size
 
ovu
.
ovu_size


	)

91 
	#MAGIC
 0xe‡

	)

92 
	#RMAGIC
 0x5555

	)

94 #ifde‡
RCHECK


95 
	#RSLOP
  (
u_sh‹t
)

	)

97 
	#RSLOP
 0

	)

105 
	#NBUCKETS
 30

	)

106 
ovîhód
 *
	g√xtf
[
NBUCKETS
];

108 
	g∑gesz
;

109 
	g∑gebuckë
;

111 
m‹ec‹e
();

112 
födbuckë
(
ovîhód
 *, );

114 #ifde‡
DO_MSTATS


119 
u_öt
 
	gnmÆloc
[
NBUCKETS
];

123 #i‡
deföed
(
DEBUG
Ë|| deföed(
RCHECK
)

124 #ifde‡
__STDC__


125 
	#ASSERT
(
p
Ëi‡(!’)Ë
	`bŸch
(#p)

	)

127 
	#ASSERT
(
p
Ëi‡(!’)Ë
	`bŸch
("?")

	)

129 
	$bŸch
(*
s
)

131 
	`debug_mesßge
("\r\¿bŸch As£πi⁄ : %s\r\n", 
s
);

132 ()
	`fÊush
(
°dîr
);

133 
	`ab‹t
();

135 
	}
}

137 
	#ASSERT
(
p
)

	)

140 #ifde‡
mÆloc


142 #unde‡
mÆloc


144 *
	$bsdmÆloc_mÆloc
(
size_t
 
nbyãs
)

146 
ovîhód
 *
›
;

147 
buckë
, 
n
;

148 
amt
;

154 i‡(
∑gesz
 == 0)

156 #ifde‡
MEMPAGESIZE


157 
∑gesz
 = 
n
 = 
MEMPAGESIZE
;

159 
∑gesz
 = 
n
 = 
	`gë∑gesize
();

161 
›
 = (
ovîhód
*)
	`sbrk
(0);

162 
n
 =Ç - (*
›
) - ( ()op &(n - 1) );

163 i‡(
n
 < 0)

165 
n
 +
∑gesz
;

167 i‡(
n
)

169 i‡–(*)
	`sbrk
(
n
) == (*) - 1)

171  (
NULL
);

173 } 
buckë
 = 0;

174 
amt
 = 8;

175 
∑gesz
 > 
amt
)

177 
amt
 <<= 1;

178 
buckë
++;

180 
∑gebuckë
 = 
buckë
;

187 i‡(
nbyãs
 <(
n
 = 
∑gesz
 - (*
›
Ë- 
RSLOP
) )

189 #i‚de‡
RCHECK


190 
amt
 = 8;

191 
buckë
 = 0;

193 
amt
 = 16;

194 
buckë
 = 1;

196 
n
 = - ( ()(*
›
Ë+ 
RSLOP
);

200 
amt
 = 
∑gesz
;

201 
buckë
 = 
∑gebuckë
;

203 
nbyãs
 > 
amt
 + 
n
)

205 
amt
 <<= 1;

206 i‡(
amt
 == 0)

208  (
NULL
);

210 
buckë
++;

216 i‡–(
›
 = 
√xtf
[
buckë
]Ë=
NULL
)

218 
	`m‹ec‹e
(
buckë
);

219 i‡–(
›
 = 
√xtf
[
buckë
]Ë=
NULL
)

221  (
NULL
);

225 
√xtf
[
buckë
] = 
›
->
ov_√xt
;

226 
›
->
ov_magic
 = 
MAGIC
;

227 
›
->
ov_ödex
 = 
buckë
;

228 #ifde‡
DO_MSTATS


229 
nmÆloc
[
buckë
]++;

231 #ifde‡
RCHECK


235 
›
->
ov_size
 = (
nbyãs
 + 
RSLOP
 - 1) &~(RSLOP - 1);

236 
›
->
ov_rmagic
 = 
RMAGIC
;

237 *(
u_sh‹t
*Ë–(
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë
RMAGIC
;

239  ( (*Ë(
›
 + 1) );

240 
	}
}

245 
	$m‹ec‹e
(
buckë
)

247 
ovîhód
 *
›
;

248 
sz
;

249 
amt
;

250 
nblks
;

256 
sz
 = 1 << (
buckë
 + 3);

257 #ifde‡
DEBUG


258 
	`ASSERT
(
sz
 > 0);

260 i‡(
sz
 <= 0)

265 i‡(
sz
 < 
∑gesz
)

267 
amt
 = 
∑gesz
;

268 
nblks
 = 
amt
 / 
sz
;

272 
amt
 = 
sz
 + 
∑gesz
;

273 
nblks
 = 1;

275 
›
 = (
ovîhód
*)
	`sbrk
(
amt
);

277 i‡–()
›
 == - 1)

284 
√xtf
[
buckë
] = 
›
;

285 --
nblks
 > 0)

287 
›
->
ov_√xt
 = (
ovîhód
*Ë–(
ˇddr_t
)› + 
sz
);

288 
›
 = (
ovîhód
*Ë–(
ˇddr_t
)› + 
sz
);

290 
	}
}

296 
INLINE
 
	$bsdmÆloc_‰ì
(*
˝
)

298 
size
;

299 
ovîhód
 *
›
;

301 i‡(
˝
 =
NULL
)

305 
›
 = (
ovîhód
*Ë–(
ˇddr_t
)
˝
 - (overhead) );

306 #ifde‡
DEBUG


307 
	`ASSERT
(
›
->
ov_magic
 =
MAGIC
);

309 i‡(
›
->
ov_magic
 !
MAGIC
)

315 #ifde‡
RCHECK


316 
	`ASSERT
(
›
->
ov_rmagic
 =
RMAGIC
);

317 
	`ASSERT
(*(
u_sh‹t
*Ë–(
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë=
RMAGIC
);

319 
size
 = 
›
->
ov_ödex
;

320 
	`ASSERT
(
size
 < 
NBUCKETS
);

321 
›
->
ov_√xt
 = 
√xtf
[
size
];

322 
√xtf
[
size
] = 
›
;

323 #ifde‡
DO_MSTATS


324 
nmÆloc
[
size
]--;

326 
	}
}

339 
	gªÆloc_§chÀn
 = 4;

341 *
	$bsdmÆloc_ªÆloc
(*
˝
, 
size_t
 
nbyãs
)

343 
u_öt
 
⁄b
;

344 
i
;

345 
ovîhód
 *
›
;

346 *
ªs
;

347 
was_Ælo˚d
 = 0;

349 i‡(
˝
 =
NULL
)

351  (
	`bsdmÆloc_mÆloc
(
nbyãs
) );

353 
›
 = (
ovîhód
*Ë–(
ˇddr_t
)
˝
 - (overhead) );

354 i‡(
›
->
ov_magic
 =
MAGIC
)

356 
was_Ælo˚d
++;

357 
i
 = 
›
->
ov_ödex
;

373 i‡–(
i
 = 
	`födbuckë
(
›
, 1ËË< 0 && (òfödbuckë(›, 
ªÆloc_§chÀn
) ) < 0)

375 
i
 = 
NBUCKETS
;

378 
⁄b
 = 1 << (
i
 + 3);

379 i‡(
⁄b
 < 
∑gesz
)

381 
⁄b
 -(*
›
Ë+ 
RSLOP
;

385 
⁄b
 +
∑gesz
 - (*
›
Ë- 
RSLOP
;

388 i‡(
was_Ælo˚d
)

390 i‡(
i
)

392 
i
 = 1 << (i + 2);

393 i‡(
i
 < 
∑gesz
)

395 
i
 -(*
›
Ë+ 
RSLOP
;

399 
i
 +
∑gesz
 - (*
›
Ë- 
RSLOP
;

402 i‡(
nbyãs
 <
⁄b
 &&Çbyã†> 
i
)

404 #ifde‡
RCHECK


405 
›
->
ov_size
 = (
nbyãs
 + 
RSLOP
 - 1) &~(RSLOP - 1);

406 *(
u_sh‹t
*Ë–(
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë
RMAGIC
;

408  (
˝
);

412 
	`bsdmÆloc_‰ì
(
˝
);

415 i‡–(
ªs
 = 
	`bsdmÆloc_mÆloc
(
nbyãs
ËË=
NULL
)

417  (
NULL
);

419 i‡(
˝
 !
ªs
)

422 
	`mem˝y
(
ªs
, 
˝
, (
nbyãs
 < 
⁄b
) ?Çbytes : onb);

424  (
ªs
);

425 
	}
}

432 
	$födbuckë
(
ovîhód
 *
‰ìp
, 
§chÀn
)

434 
ovîhód
 *
p
;

435 
i
, 
j
;

437 
i
 = 0; i < 
NBUCKETS
; i++)

439 
j
 = 0;

440 
p
 = 
√xtf
[
i
];Ö && 
j
 !
§chÀn
;Ö =Ö->
ov_√xt
)

442 i‡(
p
 =
‰ìp
)

444  (
i
);

446 
j
++;

450 
	}
}

456 #ifde‡
DO_MSTATS


464 
	$show_m°©s
(
outbuf„r_t
 *
ob
, *
s
)

466 
i
, 
j
;

467 
ovîhód
 *
p
;

468 
tŸ‰ì
 = 0, 
tŸu£d
 = 0;

470 
	`outbuf_addv
(
ob
, "Sèti°ic†o‡Mem‹yáŒoˇti⁄ %s\nFªe:\t", 
s
);

471 
i
 = 0; i < 
NBUCKETS
; i++)

473 
j
 = 0, 
p
 = 
√xtf
[
i
];Ö;Ö =Ö->
ov_√xt
, j++)

475 
	`outbuf_addv
(
ob
, " %d", 
j
);

476 
tŸ‰ì
 +
j
 *(1 << (
i
 + 3) );

478 
	`outbuf_add
(
ob
, "\nUsed:\t");

479 
i
 = 0; i < 
NBUCKETS
; i++)

481 
	`outbuf_addv
(
ob
, " %d", 
nmÆloc
[
i
]);

482 
tŸu£d
 +
nmÆloc
[
i
]*(1 << (i + 3) );

485 
	`outbuf_addv
(
ob
, "\n\tTŸÆ i¿u£: %d, TŸÆ fªe: %d\n", 
tŸu£d
, 
tŸ‰ì
);

486 
	}
}

490 #ifde‡
ˇŒoc


492 #unde‡
ˇŒoc


494 
INLINE
 *
	$bsdmÆloc_ˇŒoc
(
size_t
 
num
, size_à
size
)

496 *
p
;

498 
size
 *
num
;

499 i‡–(
p
 = 
	`bsdmÆloc_mÆloc
(
size
) ) )

501 
	`mem£t
(
p
, 0, 
size
);

503  (
p
);

504 
	}
}

	@grammar/cc.h

2 
	#COMPILER
 "gcc44"

	)

3 
	#OPTIMIZE
 "-pùê-m¨chÚ©ivê-Âª„tch-lo›-¨øy†-DFD_SETSIZE=10000 -WÆ»-D_THREAD_SAFE -fomô-‰ame-poöã∏-f°ªngth-ªdu˚ -g "

	)

4 
	#CFLAGS
 "-g -Wîr‹ -Iö˛ude/ -I./ -I/u§/loˇl/ö˛udê -Igømm¨/ -Ilib/"

	)

5 
	#OBJDIR
 "obj"

	)

6 
	#GAME_MODULE
 1

	)

	@grammar/configure.h

1 
	#USHRT_MAX
 (
MAXSHORT
)

	)

2 
	#USE_STRUCT_DIRENT


	)

3 
	#RTLD_LAZY
 1

	)

	@grammar/debugmalloc.c

6 
	#IN_MALLOC_WRAPPER


	)

7 
	#NO_OPCODES


	)

8 
	~"°d.h
"

9 
	~"debugmÆloc.h
"

10 
	~"mÆloc.h
"

11 
	~"md.h
"

13 #unde‡
NOISY_MALLOC


15 #ifde‡
NOISY_MALLOC


16 
	#NOISY
(
x
Ë
	`¥ötf
(x)

	)

17 
	#NOISY1
(
x
,
y
Ë
	`¥ötf
(x,y)

	)

18 
	#NOISY2
(
x
,
y
,
z
Ë
	`¥ötf
(x,y,z)

	)

19 
	#NOISY3
(
w
,
x
,
y
,
z
Ë
	`¥ötf
(w,x,y,z)

	)

21 
	#NOISY
(
x
)

	)

22 
	#NOISY1
(
x
,
y
)

	)

23 
	#NOISY2
(
x
,
y
,
z
)

	)

24 
	#NOISY3
(
w
,
x
,
y
,
z
)

	)

27 
	s°©s_s


29 
	m‰ì_ˇŒs
, 
	mÆloc_ˇŒs
, 
	mªÆloc_ˇŒs
;

30 } 
	t°©s_t
;

32 
°©s_t
 
	g°©s
;

34 
	$debugmÆloc_öô
()

36 
°©s
.
‰ì_ˇŒs
 = 0;

37 
°©s
.
Æloc_ˇŒs
 = 0;

38 
°©s
.
ªÆloc_ˇŒs
 = 0;

39 
	`MDöô
();

40 
	}
}

46 
INLINE
 *
	$debugªÆloc
(*
±r
, 
size
, 
èg
, *
desc
)

48 *
tmp
;

50 i‡(
size
 <= 0)

52 
	`Áèl
("Illegal size !");

55 
	`NOISY3
("ªÆloc: %ò(%x), %s\n", 
size
, 
±r
, 
desc
);

56 
°©s
.
ªÆloc_ˇŒs
++;

57 
tmp
 = (
md_node_t
*)
±r
 - 1;

58 i‡(
	`MD‰ì
(
tmp
) )

60 
tmp
 = (*)
	`REALLOC
—mp, 
size
 + 
MD_OVERHEAD
);

61 
	`MDmÆloc
(
tmp
, 
size
, 
èg
, 
desc
);

62  (
md_node_t
*)
tmp
 + 1;

65 
	}
}

71 
INLINE
 *
	$debugmÆloc
(
size
, 
èg
, *
desc
)

73 *
tmp
;

75 i‡(
size
 <= 0)

77 
	`Áèl
("Illegal size !");

79 
°©s
.
Æloc_ˇŒs
++;

80 
tmp
 = (*)
	`MALLOC
(
size
 + 
MD_OVERHEAD
);

81 
	`MDmÆloc
(
tmp
, 
size
, 
èg
, 
desc
);

82 
	`NOISY3
("mÆloc: %ò(%x), %s\n", 
size
, (
md_node_t
*)
tmp
 + 1, 
desc
);

83  (
md_node_t
*)
tmp
 + 1;

84 
	}
}

90 
INLINE
 *
	$debugˇŒoc
(
nôems
, 
size
, 
èg
, *
desc
)

92 *
tmp
;

94 i‡(
size
 <= 0)

96 
	`Áèl
("Illegal size!");

99 
°©s
.
Æloc_ˇŒs
++;

100 
tmp
 = (*)
	`CALLOC
(
nôems
 *
size
 + 
MD_OVERHEAD
, 1);

101 
	`MDmÆloc
(
tmp
, 
nôems
 *
size
, 
èg
, 
desc
);

102 
	`NOISY3
("ˇŒoc: %ò(%x), %s\n", 
nôems
 *
size
, (
md_node_t
*)
tmp
 + 1, 
desc
);

103  (
md_node_t
*)
tmp
 + 1;

104 
	}
}

110 
INLINE
 
	$debug‰ì
(*
±r
)

112 
md_node_t
 *
tmp
;

114 
	`NOISY1
("‰ì (%x)\n", 
±r
);

115 
°©s
.
‰ì_ˇŒs
++;

116 
tmp
 = (
md_node_t
*)
±r
 - 1;

117 i‡(
	`MD‰ì
(
tmp
) )

119 
	`mem£t
(
±r
, 'x', 
tmp
->
size
);

120 
	`FREE
(
tmp
);

122 
	}
}

128 
	$dump_mÆloc_d©a
(
outbuf„r_t
 *
ob
)

130 
√t
;

132 
√t
 = 
°©s
.
Æloc_ˇŒs
 - sèts.
‰ì_ˇŒs
;

133 
	`outbuf_add
(
ob
, "using debug malloc:\n\n");

134 
	`outbuf_addv
(
ob
, "tŸÆ mÆloc'd: %10lu\n", 
tŸÆ_mÆlo˚d
);

135 
	`outbuf_addv
(
ob
, "high w©î m¨k: %10lu\n", 
hiw©î
);

136 
	`outbuf_addv
(
ob
, "ovîhód: %10lu\n", (
TABLESIZE
 *(
md_node_t
*ËË+ (
√t
 *
MD_OVERHEAD
) );

137 
	`outbuf_addv
(
ob
, "#Ælo¯ˇŒs: %10lu\n", 
°©s
.
Æloc_ˇŒs
);

138 
	`outbuf_addv
(
ob
, "#‰ì cÆls: %10lu\n", 
°©s
.
‰ì_ˇŒs
);

139 
	`outbuf_addv
(
ob
, "#Ælo¯- #‰ì: %10lu\n", 
√t
);

140 
	`outbuf_addv
(
ob
, "#ªÆlo¯ˇŒs: %10lu\n", 
°©s
.
ªÆloc_ˇŒs
);

141 
	}
}

	@grammar/edit_source.c

1 
	#CONFIGURE_VERSION
 5

	)

3 
	#EDIT_SOURCE


	)

4 
	#NO_MALLOC


	)

5 
	#NO_SOCKETS


	)

6 
	#NO_OPCODES


	)

7 
	~"°d.h
"

8 
	~"Àx.h
"

9 
	~"¥ïro˚ss.h
"

10 
	~"make_func.h
"

11 
	~"cc.h
"

12 
	~"hash.h
"

13 
	~"edô_sour˚.h
"

14 
	~<°dlib.h
>

16 #ifde‡
WIN32


17 
	~<¥o˚ss.h
>

18 
	~<mÆloc.h
>

21 
	~<uni°d.h
>

23 #i‡
deföed
(
DEBUG
Ë|| deföed(
WIN32
)

24 
	#TO_DEV_NULL
 ""

	)

26 
	#TO_DEV_NULL
 ">/dev/nuŒ 2>&1"

	)

29 *
	gouç
;

30 
	gbuf„ªd
 = 0;

31 
	g√x∑nds
 = 0;

33 
FILE
 *
	gyyö
 = 0, *
	gyyout
 = 0;

35 
	#SYNTAX
 "edô_sour˚ [-¥o˚s†fûe] [-›ti⁄s] [-mÆloc] [-buûd_func_•e¯'comm™d'] [-buûd_efuns] [-c⁄figuª]\n"

	)

41 
	#OPTIONS_INCL
 "gømm¨/›ti⁄s_ö˛.h"

	)

42 
	#PACKAGES
 "∑ckages/∑ckages"

	)

43 
	#OPTIONS_H
 "gømm¨/›ti⁄s.h"

	)

44 
	#LOCAL_OPTIONS
 "∑ckages/loˇl_›ti⁄s.h"

	)

45 
	#OPTION_DEFINES
 "gømm¨/›ti⁄_defs.c"

	)

46 
	#FUNC_SPEC
 "gømm¨/func_•ec.c"

	)

47 
	#FUNC_SPEC_CPP
 "gømm¨/func_•ec.˝p"

	)

48 
	#EFUN_TABLE
 "gømm¨/efun˘i⁄s.h"

	)

49 
	#OPC_PROF
 "gømm¨/›c.h"

	)

50 
	#OPCODES
 "gømm¨/›codes.h"

	)

51 
	#EFUN_PROTO
 "gømm¨/efun_¥Ÿos.h"

	)

52 
	#EFUN_DEFS
 "gømm¨/efun_defs.c"

	)

54 
	#PRAGMA_NOTE_CASE_START
 1

	)

56 
	gnum_∑ckages
 = 0;

57 *
	g∑ckages
[100];

58 
	gµch¨
;

60 *
	gcuºít_fûe
 = 0;

61 
	gcuºít_löe
;

63 
	ggømm¨_mode
 = 0;

64 
	gö_c_ˇ£
, 
	gcquŸe
, 
	g¥agmas
, 
	gblock_√°
;

66 
	gyyãxt
[
MAXLINE
];

67 
	gdefbuf
[
DEFMAX
];

69 
	söc°©e_t


71 
öc°©e_t
 *
	m√xt
;

72 
FILE
 *
	myyö
;

73 
	mlöe
;

74 *
	mfûe
;

75 } 
	töc°©e
;

77 
öc°©e
 *
	gö˘›
 = 0;

79 
	#CHAR_QUOTE
 1

	)

80 
	#STRING_QUOTE
 2

	)

82 
add_deföe
 ( *, , * );

84 
	$compûe
(* 
°r
)

86  
	`sy°em
–
°r
 );

87 
	}
}

89 #i‡
deföed
(
WIN32
Ë|| deföed(
LATTICE
)

90 
	$dos_°yÀ_lök
 ( * 
x
, * 
y
 )

92 
lök_cmd
[100];

93 
	`•rötf
 ( 
lök_cmd
, "c›y %†%s", 
x
, 
y
 );

94  
	`sy°em
 ( 
lök_cmd
 );

95 
	}
}

98 
	$yyîr‹
 ( * 
°r
 )

100 
	`Ârötf
 ( 
°dîr
, "%s:%d: %s\n", 
cuºít_fûe
, 
cuºít_löe
, 
°r
 );

101 
	`exô
 ( 1 );

102 
	}
}

104 
	$mf_Áèl
 ( * 
°r
 )

106 
	`yyîr‹
 ( 
°r
 );

107 
	}
}

109 
	$yyw¨n
 ( * 
°r
 )

113 
	}
}

115 
	$yyîr‹p
 ( * 
°r
 )

117 
buff
[2048];

118 
	`•rötf
 ( 
buff
, 
°r
, 
µch¨
 );

119 
	`Ârötf
 ( 
°dîr
, "%s:%d: %s\n", 
cuºít_fûe
, 
cuºít_löe
, 
buff
 );

120 
	`exô
 ( 1 );

121 
	}
}

123 
	$add_öput
 ( * 
p
 )

125 
l
 = 
	`°æí
 ( 
p
 );

127 i‡–
ouç
 - 
l
 < 
defbuf
 )

128 
	`yyîr‹
 ( "MacroÉxpansion buffer overflow.\n" );

129 
	`°∫˝y
 ( 
ouç
 - 
l
, 
p
,Ü );

130 
ouç
 -
l
;

131 
	}
}

133 
	#SKIPW
(
foo
Ë
	`is•a˚
(*foo)Ëfoo++;

	)

135 *
	$skù_commít
 ( 
tmp
, 
Êag
 )

136 *
tmp
;

137 
Êag
;

139 
c
;

143  ( 
c
 = *++
tmp
 ) != '*' )

145 i‡–
c
 =
EOF
 )

146 
	`yyîr‹
 ( "End of file" );

147 i‡–
c
 == '\n' )

149 
√x∑nds
 = 0;

150 
cuºít_löe
++;

151 i‡–!
	`fgës
 ( 
yyãxt
, 
MAXLINE
 - 1, 
yyö
 ) ) 
	`yyîr‹
 ( "End of file iná comment" );

152 i‡–
Êag
 && 
yyout
 ) 
	`Âuts
 ( 
yyãxt
, yyout );

153 
tmp
 = 
yyãxt
 - 1;

158 i‡––
c
 = *++
tmp
 ) == '/' )

159  
tmp
 + 1;

160 i‡–
c
 == '\n' )

162 
√x∑nds
 = 0;

163 
cuºít_löe
++;

164 i‡–!
	`fgës
 ( 
yyãxt
, 
MAXLINE
 - 1, 
yyö
 ) ) 
	`yyîr‹
 ( "End of file iná comment" );

165 i‡–
Êag
 && 
yyout
 ) 
	`Âuts
 ( 
yyãxt
, yyout );

166 
tmp
 = 
yyãxt
 - 1;

169  
c
 == '*' );

171 
	}
}

173 
	$ªfûl
()

175 *
p
, *
yyp
;

176 
c
;

178 i‡–
	`fgës
 ( 
p
 = 
yyp
 = 
defbuf
 + ( 
DEFMAX
 >> 1 ), 
MAXLINE
 - 1, 
yyö
 ) )

180  ( ( 
c
 = *
yyp
++ ) !'\n' ) && ( c !
EOF
 ) )

182 i‡–
c
 == '/' )

184 i‡––
c
 = *
yyp
 ) == '*' )

186 
yyp
 = 
	`skù_commít
 ( yyp, 0 );

189 i‡–
c
 == '/' ) ;

191 *
p
++ = 
c
;

195 
	`yyîr‹
 ( "End of definition in \\" );

196 
√x∑nds
 = 0;

197 
cuºít_löe
++;

198 *
p
 = 0;

200 
	}
}

202 
	$h™dÀ_deföe
()

204 
«mebuf
[
NSIZE
];

205 
¨gs
[
NARGS
][
NSIZE
];

206 
mãxt
[
MLEN
];

207 *
íd
;

208 *
tmp
 = 
ouç
, *
q
;

210 
q
 = 
«mebuf
;

211 
íd
 = 
q
 + 
NSIZE
 - 1;

212  
	`ißlunum
 ( *
tmp
 ) )

214 i‡–
q
 < 
íd
 ) *q++ = *
tmp
++;

216 
	`yyîr‹
 ( "MacroÇame isÅooÜong.\n" );

218 i‡–
q
 =
«mebuf
 )

219 
	`yyîr‹
 ( "Invalid MacroÇame.\n" );

220 *
q
 = 0;

221 i‡–*
tmp
 == '(' )

223 
¨g
;

224 
öid
;

225 *
ids
 = ( * ) 
NULL
;

226 
tmp
++;

227 
	`SKIPW
 ( 
tmp
 );

228 i‡–*
tmp
 == ')' )

230 
¨g
 = 0;

234  
¨g
 = 0;árg < 
NARGS
; )

236 
íd
 = ( 
q
 = 
¨gs
[
¨g
] ) + 
NSIZE
 - 1;

237  
	`ißlunum
 ( *
tmp
 ) || ( *tmp == '#' ) )

239 i‡–
q
 < 
íd
 ) *q++ = *
tmp
++;

242 
	`yyîr‹
 ( "Name isÅooÜong.\n" );

244 i‡–
q
 =
¨gs
[
¨g
] )

246 
buff
[200];

247 
	`•rötf
 ( 
buff
, "Missögárgumíà%d i¿#deföê∑ømëîÜi°", 
¨g
 + 1 );

248 
	`yyîr‹
 ( 
buff
 );

250 
¨g
++;

251 
	`SKIPW
 ( 
tmp
 );

252 i‡–*
tmp
 == ')' )

254 i‡–*
tmp
++ != ',' )

257 
	`yyîr‹
 ( "Missing ',' in #defineÖarameterÜist" );

259 
	`SKIPW
 ( 
tmp
 );

261 i‡–
¨g
 =
NARGS
 )

263 
	`yyîr‹
 ( "Too many macroárguments" );

265 
tmp
++;

266 
íd
 = 
mãxt
 + 
MLEN
 - 2;

267  
öid
 = 0, 
q
 = 
mãxt
; *
tmp
; )

269 i‡–
	`ißlunum
 ( *
tmp
 ) )

271 i‡–!
öid
 )

273 
öid
++;

274 
ids
 = 
tmp
;

279 i‡–
öid
 )

281 
idÀn
 = 
tmp
 - 
ids
;

282 
n
, 
l
;

284  
n
 = 0;Ç < 
¨g
;Ç++ )

286 
l
 = 
	`°æí
 ( 
¨gs
[
n
] );

287 i‡–
l
 =
idÀn
 && 
	`°∫cmp
 ( 
¨gs
[
n
], 
ids
,Ü ) == 0 )

289 
q
 -
idÀn
;

290 *
q
++ = 
MARKS
;

291 *
q
++ = 
n
 + 
MARKS
 + 1;

295 
öid
 = 0;

298 i‡––*
q
 = *
tmp
++ ) =
MARKS
 ) *++q = MARKS;

299 i‡–
q
 < 
íd
 ) q++;

301 
	`yyîr‹
 ( "MacroÅextÅooÜong" );

302 i‡–!*
tmp
 &&Åmp[-2] == '\\' )

304 
q
 -= 2;

305 
	`ªfûl
();

306 
tmp
 = 
defbuf
 + ( 
DEFMAX
 >> 1 );

309 *--
q
 = 0;

310 
	`add_deföe
 ( 
«mebuf
, 
¨g
, 
mãxt
 );

312 i‡–
	`is•a˚
 ( *
tmp
 ) || ( !*tmp && ( * (Åmp+1 ) = '\0', *tmp = ' ' ) ) )

314 
íd
 = 
mãxt
 + 
MLEN
 - 2;

315  
q
 = 
mãxt
; *
tmp
; )

317 *
q
 = *
tmp
++;

318 i‡–
q
 < 
íd
 ) q++;

320 
	`yyîr‹
 ( "MacroÅextÅooÜong" );

321 i‡–!*
tmp
 &&Åmp[-2] == '\\' )

323 
q
 -= 2;

324 
	`ªfûl
();

325 
tmp
 = 
defbuf
 + ( 
DEFMAX
 >> 1 );

328 *
q
 = 0;

329 
	`add_deföe
 ( 
«mebuf
, -1, 
mãxt
 );

333 
	`yyîr‹
 ( "Illegal macro symbol" );

336 
	}
}

338 
	#SKPW
 
	`is•a˚
(*
ouç
)Ëouç++

	)

340 
	$cmygëc
()

342 
c
;

346 i‡––
c
 = *
ouç
++ ) == '/' )

348 i‡––
c
 = *
ouç
 ) ='*' ) ouç = 
	`skù_commít
 ( outp, 0 );

349 i‡–
c
 == '/' )  -1;

350  
c
;

352  
c
;

354 
	}
}

357 
	$ex∑nd_deföe
()

359 
de‚_t
 *
p
;

360 
expbuf
[
DEFMAX
];

361 *
¨gs
[
NARGS
];

362 
buf
[
DEFMAX
];

363 *
q
, *
e
, *
b
;

365 i‡–
√x∑nds
++ > 
EXPANDMAX
 ) 
	`yyîr‹
 ( "Too many macroÉxpansions" );

366 i‡–! ( 
p
 = 
	`lookup_deföe
 ( 
yyãxt
 ) ) )  0;

367 i‡–
p
->
«rgs
 == -1 )

369 
	`add_öput
 ( 
p
->
exps
 );

373 
c
, 
∑r˙t
 = 0, 
dquŸe
 = 0, 
squŸe
 = 0;

374 
n
;

376 
SKPW
;

377 i‡–*
ouç
++ != '(' )

378 
	`yyîr‹
 ( "Missing '(' in macro call" );

379 
SKPW
;

380 i‡––
c
 = *
ouç
++ ) == ')' )

381 
n
 = 0;

384 
q
 = 
expbuf
;

385 
¨gs
[0] = 
q
;

386  
n
 = 0;Ç < 
NARGS
; )

388  
c
 )

391 i‡–!
squŸe
 )

392 
dquŸe
 ^= 1;

395 i‡–!
dquŸe
 )

396 
squŸe
 ^= 1;

399 i‡–!
squŸe
 && !
dquŸe
 )

400 
∑r˙t
++;

403 i‡–!
squŸe
 && !
dquŸe
 )

404 
∑r˙t
--;

407 i‡–!
squŸe
 && !
dquŸe
 )

409 *
q
++ = 
c
;

410 i‡–*
ouç
++ !'#' ) 
	`yyîr‹
 ( "'#'Éxpected" );

414 i‡–
squŸe
 || 
dquŸe
 )

416 *
q
++ = 
c
;

417 
c
 = *
ouç
++;

421 i‡–
squŸe
 || 
dquŸe
 )

423 
	`yyîr‹
 ( "Newline in string" );

426 i‡–
c
 =',' && !
∑r˙t
 && !
dquŸe
 && !
squŸe
 )

428 *
q
++ = 0;

429 
¨gs
[++
n
] = 
q
;

431 i‡–
∑r˙t
 < 0 )

433 *
q
++ = 0;

434 
n
++;

439 i‡–
c
 =
EOF
 )

440 
	`yyîr‹
 ( "UnexpectedÉnd of file" );

441 i‡–
q
 >
expbuf
 + 
DEFMAX
 - 5 )

444 
	`yyîr‹
 ( "Macroárgument overflow" );

448 *
q
++ = 
c
;

451 i‡–!
squŸe
 && !
dquŸe
 )

453 i‡––
c
 = 
	`cmygëc
() ) < 0 )

455 
	`yyîr‹
 ( "End of macro in // comment" );

457 
c
 = *
ouç
++;

459 i‡–
n
 =
NARGS
 )

461 
	`yyîr‹
 ( "Maximum macroárgument countÉxceeded" );

465 i‡–
n
 !
p
->
«rgs
 )

467 
	`yyîr‹
 ( "WrongÇumber in macroárguments" );

471 
b
 = 
buf
;

472 
e
 = 
p
->
exps
;

473  *
e
 )

475 i‡–*
e
 == '#' && * (É + 1 ) == '#' )

476 
e
 += 2;

477 i‡–*
e
 =
MARKS
 )

479 i‡–*++
e
 =
MARKS
 )

480 *
b
++ = *
e
++;

483  
q
 = 
¨gs
[*
e
++ - 
MARKS
 - 1]; *q; )

485 *
b
++ = *
q
++;

486 i‡–
b
 >
buf
 + 
DEFMAX
 )

487 
	`yyîr‹
 ( "MacroÉxpansion is overflow" );

493 *
b
++ = *
e
++;

494 i‡–
b
 >
buf
 + 
DEFMAX
 )

495 
	`yyîr‹
 ( "MacroÉxpansion is overflow" );

498 *
b
++ = 0;

499 
	`add_öput
 ( 
buf
 );

502 
	}
}

504 
	$exgëc
()

506 
c
, *
yyp
;

508 
SKPW
;

509  
	`ißÕha
 ( 
c
 = *
ouç
 ) || c == '_' )

511 
yyp
 = 
yyãxt
;

514 *
yyp
++ = 
c
;

516  
	`iß um
 ( 
c
 = *++
ouç
 ) || ( c == '_' ) );

517 *
yyp
 = '\0';

518 i‡–!
	`°rcmp
 ( 
yyãxt
, "defined" ) )

521 
SKPW
;

522 i‡–*
ouç
++ != '(' )

524 
	`yyîr‹
 ( "Missing '('áfter 'defined'" );

525 
SKPW
;

526 
yyp
 = 
yyãxt
;

527 i‡–
	`ißÕha
 ( 
c
 = *
ouç
 ) || c == '_' )

531 *
yyp
++ = 
c
;

533  
	`iß um
 ( 
c
 = *++
ouç
 ) || ( c == '_' ) );

534 *
yyp
 = '\0';

537 
	`yyîr‹
 ( "Incorrect definition macroáfter defined(\n" );

538 
SKPW
;

539 i‡–*
ouç
 != ')' )

540 
	`yyîr‹
 ( "Missing ) in defined" );

541 i‡–
	`lookup_deföe
 ( 
yyãxt
 ) )

542 
	`add_öput
 ( "1 " );

544 
	`add_öput
 ( "0 " );

548 i‡–!
	`ex∑nd_deföe
() )

549 
	`add_öput
 ( "0 " );

550 
SKPW
;

553  
c
;

554 
	}
}

556 
	$skù_to
 ( 
tokí
, 
©okí
 )

557 *
tokí
, *
©okí
;

559 
b
[20], *
p
, *
íd
;

560 
c
;

561 
√°
;

563  
√°
 = 0;; )

565 i‡–!
	`fgës
 ( 
ouç
 = 
defbuf
 + ( 
DEFMAX
 >> 1 ), 
MAXLINE
-1,
yyö
 ) )

568 
	`yyîr‹
 ( "UnexpectedÉnd of file while skipping" );

570 
cuºít_löe
++;

571 i‡––
c
 = *
ouç
++ ) =
µch¨
 )

573  
	`is•a˚
 ( *
ouç
 ) ) outp++;

574 
íd
 = 
b
 +  b - 1;

575  
p
 = 
b
; ( 
c
 = *
ouç
++ ) !'\n' && !
	`is•a˚
 ( c ) && c !
EOF
; )

577 i‡–
p
 < 
íd
 ) *p++ = 
c
;

579 *
p
 = 0;

580 i‡–!
	`°rcmp
 ( 
b
, "if" ) || !strcmp ( b, "ifdef" ) || !strcmp ( b, "ifndef" ) )

582 
√°
++;

584 i‡–
√°
 > 0 )

586 i‡–!
	`°rcmp
 ( 
b
, "endif" ) )

587 
√°
--;

591 i‡–!
	`°rcmp
 ( 
b
, 
tokí
 ) )

593 *--
ouç
 = 
c
;

594 
	`add_öput
 ( 
b
 );

595 *--
ouç
 = 
µch¨
;

596 
buf„ªd
 = 1;

599 i‡–
©okí
 && !
	`°rcmp
 ( 
b
,átoken ) )

601 *--
ouç
 = 
c
;

602 
	`add_öput
 ( 
b
 );

603 *--
ouç
 = 
µch¨
;

604 
buf„ªd
 = 1;

607 i‡–!
	`°rcmp
 ( 
b
, "elif" ) )

609 *--
ouç
 = 
c
;

610 
	`add_öput
 ( 
b
 );

611 *--
ouç
 = 
µch¨
;

612 
buf„ªd
 = 1;

613  !
©okí
;

618 
	}
}

620 
	~"¥ïro˚ss.c
"

622 
	$maybe_›í_öput_fûe
 ( * 
‚
 )

624 i‡––
yyö
 = 
	`f›í
 ( 
‚
, "r" ) ) =
NULL
 )

628 i‡–
cuºít_fûe
 ) 
	`‰ì
 ( ( * ) current_file );

629 
cuºít_fûe
 = ( * ) 
	`mÆloc
 ( 
	`°æí
 ( 
‚
 ) + 1 );

630 
cuºít_löe
 = 0;

631 
	`°r˝y
 ( 
cuºít_fûe
, 
‚
 );

633 
	}
}

635 
	$›í_öput_fûe
 ( * 
‚
 )

637 i‡–!
	`maybe_›í_öput_fûe
 ( 
‚
 ) )

639 
	`≥º‹
 ( 
‚
 );

640 
	`exô
 ( -1 );

642 
	}
}

644 
	$›í_ouçut_fûe
 ( * 
‚
 )

646 i‡––
yyout
 = 
	`f›í
 ( 
‚
, "w" ) ) =
NULL
 )

648 
	`≥º‹
 ( 
‚
 );

649 
	`exô
 ( -1 );

651 
	}
}

653 
	$˛o£_ouçut_fûe
()

655 
	`f˛o£
 ( 
yyout
 );

656 
yyout
 = 0;

657 
	}
}

659 *
	$¥Ÿe˘
 ( * 
p
 )

661 
buf
[1024];

662 *
buÂ
 = 
buf
;

664  *
p
 )

666 i‡–*
p
=='\"' || *∞='\\' ) *
buÂ
++ = '\\';

667 *
buÂ
++ = *
p
++;

669 *
buÂ
 = 0;

670  
buf
;

671 
	}
}

673 
	$¸óã_›ti⁄_deföes
()

675 
de‚_t
 *
p
;

676 
cou¡
 = 0;

677 
i
;

679 
	`Ârötf
 ( 
°dîr
, "Wrôög buûd o±i⁄†tÿ%†...\n", 
OPTION_DEFINES
 );

680 
	`›í_ouçut_fûe
 ( 
OPTION_DEFINES
 );

681 
	`Ârötf
 ( 
yyout
, "{\n" );

682  
i
 = 0; i < 
DEFHASH
; i++ )

684  
p
 = 
de‚s
[
i
];Ö;Ö =Ö->
√xt
 )

685 i‡–! ( 
p
->
Êags
 & 
DEF_IS_UNDEFINED
 ) )

687 
cou¡
++;

688 
	`Ârötf
 ( 
yyout
, " \"__%s__\", \"%s\",\n",

689 
p
->
«me
, 
	`¥Ÿe˘
’->
exps
));

690 i‡–
	`°∫cmp
 ( 
p
->
«me
, "PACKAGE_", 8 ) ==0 )

692 
Àn
;

693 *
tmp
, *
t
;

695 
Àn
 = 
	`°æí
 ( 
p
->
«me
 + 8 );

696 
t
 = 
tmp
 = ( * ) 
	`mÆloc
 ( 
Àn
 + 1 );

697 
	`°r˝y
 ( 
tmp
, 
p
->
«me
 + 8 );

698  *
t
 )

700 i‡–
	`isuµî
 ( *
t
 ) )

701 *
t
 = 
	`tﬁowî
 ( *t );

702 
t
++;

704 i‡–
num_∑ckages
 >= 100 )

706 
	`Ârötf
 ( 
°dîr
, "Too manyÖackagesÅhen 100.\n" );

707 
	`exô
 ( -1 );

709 
∑ckages
[
num_∑ckages
++] = 
tmp
;

713 
	`Ârötf
 ( 
yyout
,"};\n\n#deföêNUM_OPTION_DEFS %d\n\n", 
cou¡
 );

714 
	`˛o£_ouçut_fûe
();

715 
	}
}

717 
	$dñåaû
()

719 *
p
;

721 
p
 = 
ouç
;

722  *
p
 && !
	`is•a˚
 ( *p ) && *p != '\n' )

724 
p
++;

726 *
p
 = 0;

727 
	}
}

729 
	$h™dÀ_ö˛ude
 ( * 
«me
 )

731 *
p
;

732 
buf
[1024];

733 
FILE
 *
f
;

734 
öc°©e
 *
is
;

736 i‡–*
«me
 != '"' )

738 
de‚_t
 *
d
;

740 i‡––
d
 = 
	`lookup_deföe
 ( 
«me
 ) ) && d->
«rgs
 == -1 )

742 *
q
;

744 
q
 = 
d
->
exps
;

745  
	`is•a˚
 ( *
q
 ) )

746 
q
++;

747 
	`h™dÀ_ö˛ude
 ( 
q
 );

751 
	`yyîr‹p
 ( "MissingÜeading \" in %cinclude" );

755  
p
 = ++
«me
; *p && *p != '"';Ö++ );

756 i‡–!*
p
 )

757 
	`yyîr‹p
 ( "MissingÅrailing \" in %cinclude" );

759 *
p
 = 0;

760 i‡––
f
 = 
	`f›í
 ( 
«me
, "r" ) ) !
NULL
 )

762 
is
 = ( 
öc°©e
 * )

763 
	`mÆloc
 (  ( 
öc°©e
 ) );

764 
is
->
yyö
 = yyin;

765 
is
->
löe
 = 
cuºít_löe
;

766 
is
->
fûe
 = 
cuºít_fûe
;

767 
is
->
√xt
 = 
ö˘›
;

768 
ö˘›
 = 
is
;

769 
cuºít_löe
 = 0;

770 
cuºít_fûe
 = ( * ) 
	`mÆloc
 ( 
	`°æí
 ( 
«me
 ) + 1 );

771 
	`°r˝y
 ( 
cuºít_fûe
, 
«me
 );

772 
yyö
 = 
f
;

776 
	`•rötf
 ( 
buf
, "C™nŸ %cö˛udê%s", 
µch¨
, 
«me
 );

777 
	`yyîr‹
 ( 
buf
 );

779 
	}
}

781 
	$h™dÀ_¥agma
 ( * 
«me
 )

783 i‡–!
	`°rcmp
 ( 
«me
, "auto_note_compiler_case_start" ) )

784 
¥agmas
 |
PRAGMA_NOTE_CASE_START
;

785 i‡–!
	`°rcmp
 ( 
«me
, "no_auto_note_compiler_case_start" ) )

786 
¥agmas
 &~
PRAGMA_NOTE_CASE_START
;

787 i‡–!
	`°∫cmp
 ( 
«me
, "ppchar:", 7 ) && * (Çame + 8 ) )

788 
µch¨
 = * ( 
«me
 + 8 );

790 
	`yyîr‹p
 ( "Unidentified %cpragma" );

791 
	}
}

793 
	$¥ïro˚ss
()

795 *
yyp
, *
yyp2
;

796 
c
;

797 
c⁄d
;

799  
buf„ªd
 ? ( 
yyp
 = 
yyp2
 = 
ouç
 ) : 
	`fgës
 ( yy∞yyp2 = 
defbuf
 + ( 
DEFMAX
 >> 1 ), 
MAXLINE
-1, 
yyö
 ) )

801 i‡–!
buf„ªd
 ) 
cuºít_löe
++;

802 
buf„ªd
 = 0;

803  
	`is•a˚
 ( *
yyp2
 ) ) yyp2++;

804 i‡––
c
 = *
yyp2
 ) =
µch¨
 )

806 
quŸe
 = 0;

807 
•_buf
 = 0, *
ﬁdouç
;

809 i‡–
c
 ='%' && 
yyp2
[1] == '%' )

810 
gømm¨_mode
++;

811 
ouç
 = 0;

812 i‡–
yyp
 !
yyp2
 )

814 
	`yyîr‹p
 ( "Misplaced '%c'.\n" );

815  
	`is•a˚
 ( *++
yyp2
 ) );

816 
yyp
++;

819 i‡––
c
 = *
yyp2
++ ) ='"' ) 
quŸe
 ^= 1;

822 i‡–!
quŸe
 && 
c
 == '/' )

824 i‡–*
yyp2
 == '*' )

826 
yyp2
 = 
	`skù_commít
 ( yyp2, 0 );

829 i‡–*
yyp2
 == '/' ) ;

831 i‡–!
ouç
 && 
	`is•a˚
 ( 
c
 ) ) ouç = 
yyp
;

832 i‡–
c
 ='\n' || c =
EOF
 ) ;

834 *
yyp
++ = 
c
;

837 i‡–
ouç
 )

839 i‡–
yyout
 ) 
•_buf
 = * ( 
ﬁdouç
 = 
ouç
 );

840 *
ouç
++ = 0;

841  
	`is•a˚
 ( *
ouç
 ) ) outp++;

843 
ouç
 = 
yyp
;

844 *
yyp
 = 0;

845 
yyp
 = 
defbuf
 + ( 
DEFMAX
 >> 1 ) + 1;

847 i‡–!
	`°rcmp
 ( "deföe", 
yyp
 ) )

849 
	`h™dÀ_deföe
();

851 i‡–!
	`°rcmp
 ( "if", 
yyp
 ) )

853 
c⁄d
 = 
	`c⁄d_gë_exp
 ( 0 );

854 i‡–*
ouç
 != '\n' )

856 
	`yyîr‹p
 ( "Condition isÅoo complex in %cif" );

857 
	`h™dÀ_c⁄d
 ( 
c⁄d
 );

859 i‡–!
	`°rcmp
 ( "ifdef", 
yyp
 ) )

861 
	`dñåaû
();

862 
	`h™dÀ_c⁄d
 ( 
	`lookup_deföe
 ( 
ouç
 ) != 0 );

864 i‡–!
	`°rcmp
 ( "i‚def", 
yyp
 ) )

866 
	`dñåaû
();

867 
	`h™dÀ_c⁄d
 ( !
	`lookup_deföe
 ( 
ouç
 ) );

869 i‡–!
	`°rcmp
 ( "ñif", 
yyp
 ) )

871 
	`h™dÀ_ñif
();

873 i‡–!
	`°rcmp
 ( "ñ£", 
yyp
 ) )

875 
	`h™dÀ_ñ£
();

877 i‡–!
	`°rcmp
 ( "ídif", 
yyp
 ) )

879 
	`h™dÀ_ídif
();

881 i‡–!
	`°rcmp
 ( "undef", 
yyp
 ) )

883 
de‚_t
 *
d
;

885 
	`dñåaû
();

886 i‡––
d
 = 
	`lookup_deföôi⁄
 ( 
ouç
 ) ) )

888 
d
->
Êags
 |
DEF_IS_UNDEFINED
;

889 
d
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

893 
	`add_deföe
 ( 
ouç
, -1, " " );

894 
d
 = 
	`lookup_deföôi⁄
 ( 
ouç
 );

895 
d
->
Êags
 |
DEF_IS_UNDEFINED
;

896 
d
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

899 i‡–!
	`°rcmp
 ( "echo", 
yyp
 ) )

901 
	`Ârötf
 ( 
°dîr
, "echÿ©Üöê%d o‡%s: %s\n", 
cuºít_löe
, 
cuºít_fûe
, 
ouç
 );

903 i‡–!
	`°rcmp
 ( "ö˛ude", 
yyp
 ) )

905 
	`h™dÀ_ö˛ude
 ( 
ouç
 );

907 i‡–!
	`°rcmp
 ( "¥agma", 
yyp
 ) )

909 
	`h™dÀ_¥agma
 ( 
ouç
 );

911 i‡–
yyout
 )

913 i‡–!
	`°rcmp
 ( "löe", 
yyp
 ) )

915 
	`Ârötf
 ( 
yyout
, "#löê%d \"%s\"\n", 
cuºít_löe
,

916 
cuºít_fûe
 );

920 i‡–
•_buf
 ) *
ﬁdouç
 = sp_buf;

921 i‡–
¥agmas
 & 
PRAGMA_NOTE_CASE_START
 )

923 i‡–*
yyp
 ='%' ) 
¥agmas
 &~
PRAGMA_NOTE_CASE_START
;

925 
	`Ârötf
 ( 
yyout
, "%s\n", 
yyp
-1 );

930 
buff
[200];

931 
	`•rötf
 ( 
buff
, "Uƒecogni£d %¯dúe˘ivê: %s\n", 
µch¨
, 
yyp
 );

932 
	`yyîr‹
 ( 
buff
 );

935 i‡–
c
 == '/' )

937 i‡––
c
 = *++
yyp2
 ) == '*' )

939 i‡–
yyout
 ) 
	`Âuts
 ( 
yyp
, yyout );

940 
yyp2
 = 
	`skù_commít
 ( yyp2, 1 );

942 i‡–
c
 ='/' && !
yyout
 ) ;

943 i‡–
yyout
 )

945 
	`Ârötf
 ( 
yyout
, "%s", 
yyp
 );

948 i‡–
yyout
 )

950 
	`Ârötf
 ( 
yyout
, "%s", 
yyp
 );

951 i‡–
¥agmas
 & 
PRAGMA_NOTE_CASE_START
 )

953 
löe_to_¥öt
;

955 
löe_to_¥öt
 = 0;

957 i‡–!
ö_c_ˇ£
 )

959  
	`ißlunum
 ( *
yyp2
 ) ) yyp2++;

960  
	`is•a˚
 ( *
yyp2
 ) ) yyp2++;

961 i‡–*
yyp2
 == ':' )

963 
ö_c_ˇ£
 = 1;

964 
yyp2
++;

968 i‡–
ö_c_ˇ£
 )

970  ( 
c
 = *
yyp2
++ ) )

972  
c
 )

976 i‡–!
cquŸe
 && ( ++
block_√°
 == 1 ) )

977 
löe_to_¥öt
 = 1;

983 i‡–!
cquŸe
 )

985 i‡–--
block_√°
 < 0 ) 
	`yyîr‹
 ( "Too many }'s" );

991 i‡–! ( 
cquŸe
 & 
CHAR_QUOTE
 ) ) cquŸê^
STRING_QUOTE
;

995 i‡–! ( 
cquŸe
 & 
STRING_QUOTE
 ) ) cquŸê^
CHAR_QUOTE
;

999 i‡–
cquŸe
 && *
yyp2
 ) yyp2++;

1003 i‡–!
cquŸe
 )

1005 i‡––
c
 = *
yyp2
 ) == '*' )

1007 
yyp2
 = 
	`skù_commít
 ( yyp2, 1 );

1009 i‡–
c
 == '/' )

1011 * ( 
yyp2
-1 ) = '\n';

1012 *
yyp2
 = '\0';

1018 i‡–!
cquŸe
 && !
block_√°
 )

1019 
	`yyîr‹
 ( "Case started beforeÉndingÖrevious case with ;" );

1023 i‡–!
cquŸe
 && !
block_√°
 ) 
ö_c_ˇ£
 = 0;

1028 i‡–
löe_to_¥öt
 )

1029 
	`Ârötf
 ( 
yyout
, "#löê%d \"%s\"\n", 
cuºít_löe
 + 1,
cuºít_fûe
 );

1033 i‡–
i·›
 )

1035 
if°©e_t
 *
p
 = 
i·›
;

1037  
i·›
 )

1039 
p
 = 
i·›
;

1040 
i·›
 = 
p
->
√xt
;

1041 
	`‰ì
 ( 
p
 );

1044 
	`yyîr‹p
 ( "Missing %cendif" );

1046 
	`f˛o£
 ( 
yyö
 );

1047 
	`‰ì
 ( 
cuºít_fûe
 );

1048 
cuºít_fûe
 = 0;

1049 
√x∑nds
 = 0;

1050 i‡–
ö˘›
 )

1052 
öc°©e
 *
p
 = 
ö˘›
;

1054 
cuºít_fûe
 = 
p
->
fûe
;

1055 
cuºít_löe
 = 
p
->
löe
;

1056 
yyö
 = 
p
->yyin;

1057 
ö˘›
 = 
p
->
√xt
;

1058 
	`‰ì
 ( ( * ) 
p
 );

1059 
	`¥ïro˚ss
();

1061 
yyö
 = 0;

1062 
	}
}

1064 
	$make_efun_èbÀs
()

1066 
	#NUM_FILES
 5

	)

1067 * 
outfûes
[
NUM_FILES
] =

1069 
EFUN_TABLE
, 
OPC_PROF
, 
OPCODES
, 
EFUN_PROTO
, 
EFUN_DEFS


1071 
FILE
 *
fûes
[
NUM_FILES
];

1072 
i
;

1074 
	`Ârötf
 ( 
°dîr
, "BuildingÉfunÅables ...\n" );

1075  
i
 = 0; i < 
NUM_FILES
; i++ )

1077 
fûes
[
i
] = 
	`f›í
 ( 
outfûes
[i], "w" );

1078 i‡–!
fûes
[
i
] )

1080 
	`Ârötf
 ( 
°dîr
, "make_func: u«bÀÅÿ›í %s\n", 
outfûes
[
i
] );

1081 
	`exô
 ( -1 );

1083 
	`Ârötf
 ( 
fûes
[
i
],

1085 
	`Ârötf
 ( 
fûes
[
i
],

1089 
	`Ârötf
 ( 
fûes
[0],"\n#include \"efun_protos.h\"\n\n" );

1090 
	`Ârötf
 ( 
fûes
[0],"\ntypedef void (*func_t) (void);\n\n" );

1091 
	`Ârötf
 ( 
fûes
[0],"func_tÉfun_table[] = {\n" );

1093 
	`Ârötf
 ( 
fûes
[1],"\ntypedef struct opc_s { char *name; int count; } opc_t;\n\n" );

1094 
	`Ârötf
 ( 
fûes
[1],"opc_t opc_efun[] = {\n" );

1096 
	`Ârötf
 ( 
fûes
[2], "\n/* operators */\n\n" );

1097  
i
 = 0; i < 
›_code
; i++ )

1099 
	`Ârötf
 ( 
fûes
[2],"#deföê%-30†%d\n", 
›î_codes
[
i
], i+1 );

1103 
	`Ârötf
 ( 
fûes
[2],"\n/* 1árgÉfun†*/\n#deföêBASE %d\n\n", 
›_code
+1 );

1104  
i
 = 0; i < 
efun1_code
; i++ )

1106 
	`Ârötf
 ( 
fûes
[0],"\tf_%s,\n", 
efun1_«mes
[
i
] );

1107 
	`Ârötf
 ( 
fûes
[1],"{\"%s\", 0},\n", 
efun1_«mes
[
i
] );

1108 
	`Ârötf
 ( 
fûes
[2],"#deföê%-30†%d\n", 
efun1_codes
[
i
], i+
›_code
+1 );

1109 
	`Ârötf
 ( 
fûes
[3],"void f_%†(void);\n", 
efun1_«mes
[
i
] );

1113 
	`Ârötf
 ( 
fûes
[2],"\n/*Éfun†*/\n#deföêONEARG_MAX %d\n\n", 
efun1_code
 + 
›_code
+1 );

1114  
i
 = 0; i < 
efun_code
; i++ )

1116 
	`Ârötf
 ( 
fûes
[0],"\tf_%s,\n", 
efun_«mes
[
i
] );

1117 
	`Ârötf
 ( 
fûes
[1],"{\"%s\", 0},\n", 
efun_«mes
[
i
] );

1118 
	`Ârötf
 ( 
fûes
[2],"#deföê%-30†%d\n", 
efun_codes
[
i
], i+
›_code
+
efun1_code
+1 );

1119 
	`Ârötf
 ( 
fûes
[3],"void f_%†(void);\n", 
efun_«mes
[
i
] );

1122 
	`Ârötf
 ( 
fûes
[0], "};\n" );

1123 
	`Ârötf
 ( 
fûes
[1], "};\n" );

1125 
	`Ârötf
 ( 
°dîr
, "You havêefuns.Éfun1_code[%d], op_code[%d],Éfun_code[%d].\n", 
efun1_code
, 
›_code
, 
efun_code
);

1126 i‡–
efun1_code
 + 
›_code
 >= 256 )

1128 
	`Ârötf
 ( 
°dîr
, "You havêwayÅoÿm™yÉfuns.Éfun1_code[%d] + op_code[%d] > 255.\n", 
efun1_code
, 
›_code
 );

1130 i‡–
efun_code
 >= 256 )

1132 
	`Ârötf
 ( 
°dîr
, "You havêwayÅoÿm™yÉfuns.Éfun_code[%d] >256.\n", 
efun_code
 );

1134 
	`Ârötf
 ( 
fûes
[2],"\n/*Éfun†*/\n#deföêNUM_OPCODES %d\n\n", 
efun_code
 + 
efun1_code
 + 
›_code
 );

1137  
i
 = 0; i < 
num_buff
; i++ )

1139 
j
;

1140  
j
 = 0; j < 
i
; j++ )

1141 i‡–
	`°rcmp
 ( 
key
[
i
], key[
j
] ) < 0 )

1143 *
tmp
;

1144 
tmp
 = 
key
[
i
];

1145 
key
[
i
] = key[
j
];

1146 
key
[
j
] = 
tmp
;

1147 
tmp
 = 
buf
[
i
];

1148 
buf
[
i
] = buf[
j
];

1149 
buf
[
j
] = 
tmp
;

1154 
	`Ârötf
 ( 
fûes
[4], "{\n" );

1155  
i
 = 0; i < 
num_buff
; i++ )

1156 
	`Ârötf
 ( 
fûes
[4], "%s", 
buf
[
i
] );

1157 
	`Ârötf
 ( 
fûes
[4], "\n};\nintÉfun_arg_types[] = {\n" );

1158  
i
=0; i < 
œ°_cuºít_ty≥
; i++ )

1160 i‡–
¨g_ty≥s
[
i
] == 0 )

1161 
	`Ârötf
 ( 
fûes
[4], "0,\n" );

1163 
	`Ârötf
 ( 
fûes
[4], "%s,", 
	`˘y≥
 ( 
¨g_ty≥s
[
i
] ) );

1165 
	`Ârötf
 ( 
fûes
[4],"};\n" );

1167  
i
=0; i < 
NUM_FILES
; i++ )

1168 
	`f˛o£
 ( 
fûes
[
i
] );

1169 
	}
}

1171 
	$h™dÀ_loˇl_deföes
()

1173 
de‚_t
 *
p
;

1174 
i
;

1175 
¥obÀm
 = 0;

1177  
i
 = 0; i < 
DEFHASH
; i++ )

1178  
p
 = 
de‚s
[
i
];Ö;Ö =Ö->
√xt
 )

1179 
p
->
Êags
 |
DEF_IS_NOT_LOCAL
;

1183 i‡––
p
 = 
	`lookup_deföe
 ( "_OPTIONS_H_" ) ) )

1185 
p
->
Êags
 |
DEF_IS_UNDEFINED
;

1186 
p
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

1188 i‡––
p
 = 
	`lookup_deföe
 ( "DEBUG" ) ) )

1189 
p
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

1191 
µch¨
 = '#';

1192 
	`¥ïro˚ss
();

1194 i‡––
p
 = 
	`lookup_deföe
 ( "_OPTIONS_H_" ) ) )

1195 
p
->
Êags
 |
DEF_IS_UNDEFINED
;

1197  
i
 = 0; i < 
DEFHASH
; i++ )

1198  
p
 = 
de‚s
[
i
];Ö;Ö =Ö->
√xt
 )

1199 i‡–
p
->
Êags
 & 
DEF_IS_NOT_LOCAL
 )

1201 
	`Ârötf
 ( 
°dîr
, "No setting for %s in '%s'.\n",

1202 
p
->
«me
, 
LOCAL_OPTIONS
 );

1203 
¥obÀm
 = 1;

1206 i‡–
¥obÀm
 )

1208 
	`Ârötf
(
°dîr
, "\
***ThisÜocal_options fileáppearsÅo have been written forán\n\
***earlier version ofÅheÉngine.PleaseÜookupÅheÇew options\n\
***(mentionedábove) inÅhe options.h file, decide how you wouldÜikeÅhem\n\
***set,ándáddÅhose settingsÅoÅheÜocal_options file.\n");

1214 
	`exô
 ( -1 );

1216 
	}
}

1218 
	$wrôe_›ti⁄s_ö˛
 ( 
loˇl
 )

1220 
	`›í_ouçut_fûe
 ( 
OPTIONS_INCL
 );

1221 i‡–
loˇl
 )

1223 
	`Ârötf
 ( 
yyout
, "#ö˛udê\"%s\"\n", 
LOCAL_OPTIONS
 );

1227 
	`Ârötf
 ( 
yyout
, "#ö˛udê\"%s\"\n", 
OPTIONS_H
 );

1230 
	`˛o£_ouçut_fûe
();

1231 
	}
}

1233 
	$h™dÀ_›ti⁄s
()

1235 
	`›í_öput_fûe
 ( 
OPTIONS_H
 );

1236 
µch¨
 = '#';

1237 
	`¥ïro˚ss
();

1239 i‡–
	`maybe_›í_öput_fûe
 ( 
LOCAL_OPTIONS
 ) )

1241 
	`Ârötf
 ( 
°dout
, "Usög '%s' fûê...\n", 
LOCAL_OPTIONS
 );

1242 
	`h™dÀ_loˇl_deföes
();

1243 
	`wrôe_›ti⁄s_ö˛
 ( 1 );

1247 
	`Ârötf
 ( 
°dîr
, "No \"%s\" fileÖresent. If you create one from \"%s\",\nyou can use it when you getáÇew driver,ánd you will be warned ifÅhereáre\nchangesÅoÅheÑeal %s which you should include in yourÜocal file.\n",

1248 
LOCAL_OPTIONS
, 
OPTIONS_H
, OPTIONS_H );

1249 
	`wrôe_›ti⁄s_ö˛
 ( 0 );

1252 
	`¸óã_›ti⁄_deföes
();

1253 
	}
}

1255 
	$h™dÀ_buûd_func_•ec
 ( * 
comm™d
 )

1257 
buf
[1024];

1258 
i
;

1260 
	`Ârötf
 ( 
°dîr
, "Building compiler files ...\n" );

1261 
	`•rötf
 ( 
buf
, "%†%†>%s", 
comm™d
, 
FUNC_SPEC
, 
FUNC_SPEC_CPP
 );

1262 
	`sy°em
 ( 
buf
 );

1263  
i
 = 0; i < 
num_∑ckages
; i++ )

1265 
	`•rötf
 ( 
buf
, "%s -I.Öackages/%s_spec.h >>%s",

1266 
comm™d
, 
∑ckages
[
i
], 
FUNC_SPEC_CPP
 );

1267 
	`sy°em
 ( 
buf
 );

1270 
	`›í_ouçut_fûe
 ( 
PACKAGES
 );

1271 
	`Ârötf
 ( 
yyout
, "SRC=" );

1272  
i
=0; i < 
num_∑ckages
; i++ )

1273 
	`Ârötf
 ( 
yyout
, "%s.¯", 
∑ckages
[
i
] );

1280 
	`˛o£_ouçut_fûe
();

1281 
	}
}

1283 
	$h™dÀ_¥o˚ss
 ( * 
fûe
 )

1285 
buf
[1024];

1286 
l
;

1288 
	`°r˝y
 ( 
buf
, 
fûe
 );

1289 
l
 = 
	`°æí
 ( 
buf
 );

1290 i‡–
	`°rcmp
 ( 
buf
 + 
l
 - 4, ".pre" ) )

1292 
	`Ârötf
 ( 
°dîr
, "Filename for -process mustÉnd in .pre\n" );

1293 
	`exô
 ( -1 );

1295 * ( 
buf
 + 
l
 - 4 ) = 0;

1297 
	`Ârötf
 ( 
°dîr
, "Cª©ög '%s' from '%s' ...\n", 
buf
, 
fûe
 );

1299 #ifde‡
DEBUG


1301 
	`add_deföe
 ( "DEBUG", -1, " " );

1304 
	`›í_öput_fûe
 ( 
fûe
 );

1305 
	`›í_ouçut_fûe
 ( 
buf
 );

1306 
µch¨
 = '%';

1307 
	`¥ïro˚ss
();

1308 
	`˛o£_ouçut_fûe
();

1309 
	}
}

1311 
	$h™dÀ_buûd_efuns
()

1313 
num_buff
 = 
›_code
 = 
efun_code
 = 
efun1_code
 = 0;

1315 
	`›í_öput_fûe
 ( 
FUNC_SPEC_CPP
 );

1316 
	`yy∑r£
();

1317 
	`make_efun_èbÀs
();

1318 
	}
}

1320 
	$h™dÀ_≠∂õs
()

1325 
FILE
 *
f
 = 
	`f›í
("applies", "r");

1326 
FILE
 *
out
 = 
	`f›í
("applies.h", "w");

1327 
FILE
 *
èbÀ
 = 
	`f›í
("applies_table.c", "w");

1328 
buf
[8192];

1329 *
cﬁ⁄
;

1330 *
p
;

1331 
≠∂y_numbî
 = 0;

1333 
	`Ârötf
(
out
, "/*áutogenerated from 'applies' */\n#ifndef APPLIES_H\n#define APPLIES_H\n\nextern char *applies_table[];\n\n/*Åhe folowing must beÅhe first character of __INIT */\n#define APPLY___INIT_SPECIAL_CHAR\t\t'#'\n");

1334 
	`Ârötf
(
èbÀ
, "/*áutogenerated from 'applies' */\n\nchar *applies_table[] = {\n");

1336 
	`fgës
(
buf
, 8192, 
f
)) {

1337 
buf
[
	`°æí
(buf)-1] = 0;

1338 i‡(
buf
[0] == '#') ;

1339 i‡((
cﬁ⁄
 = 
	`°rchr
(
buf
, ':'))) {

1340 *
cﬁ⁄
++ = 0;

1341 
	`Ârötf
(
out
, "#deföêAPPLY_%-30s\t\"%s\"\n", 
buf
, 
cﬁ⁄
);

1343 
	`Ârötf
(
out
, "#deföêAPPLY_%-30s\t", 
buf
);

1344 
p
 = 
buf
;

1345 *
p
) {

1346 *
p
 = 
	`tﬁowî
(*p);

1347 
p
++;

1349 
	`Ârötf
(
out
, "\"%s\"\n", 
buf
);

1352 
	`fgës
(
buf
, 8192, 
f
)) {

1353 
buf
[
	`°æí
(buf)-1] = 0;

1354 i‡((
cﬁ⁄
 = 
	`°rchr
(
buf
, ':'))) {

1355 *
cﬁ⁄
++ = 0;

1356 
	`Ârötf
(
èbÀ
, "\t\"%s\",\n", 
cﬁ⁄
);

1357 
	`Ârötf
(
out
, "#deföêAPPLY_%-30s\t%i\n", 
buf
, 
≠∂y_numbî
++);

1359 
	`Ârötf
(
out
, "#deföêAPPLY_%-30s\t%i\n", 
buf
, 
≠∂y_numbî
++);

1360 
p
 = 
buf
;

1361 *
p
) {

1362 *
p
 = 
	`tﬁowî
(*p);

1363 
p
++;

1365 
	`Ârötf
(
èbÀ
, "\t\"%s\",\n", 
buf
);

1369 
	`Ârötf
(
èbÀ
, "};\n");

1370 
	`Ârötf
(
out
, "\n#deföêNUM_MASTER_APPLIES\t%i\n\n#ídif\n", 
≠∂y_numbî
);

1372 
	`f˛o£
(
out
);

1373 
	`f˛o£
(
èbÀ
);

1374 
	`f˛o£
(
f
);

1376 
	}
}

1378 
	$h™dÀ_mÆloc
()

1380 *
the_mÆloc
 = 0, *
the_wøµî
 = 0;

1382 i‡–
	`lookup_deföe
 ( "SYSMALLOC" ) )

1383 
the_mÆloc
 = "grammar/sysmalloc.c";

1384 i‡–
	`lookup_deföe
 ( "SMALLOC" ) )

1385 
the_mÆloc
 = "grammar/smalloc.c";

1386 i‡–
	`lookup_deföe
 ( "BSDMALLOC" ) )

1387 
the_mÆloc
 = "grammar/bsdmalloc.c";

1389 i‡–
	`lookup_deföe
 ( "WRAPPEDMALLOC" ) )

1390 
the_wøµî
 = "grammar/wrappedmalloc.c";

1391 i‡–
	`lookup_deföe
 ( "DEBUGMALLOC" ) )

1392 
the_wøµî
 = "grammar/debugmalloc.c";

1394 i‡–!
the_mÆloc
 && !
the_wøµî
 )

1396 
	`Ârötf
 ( 
°dîr
, "MemoryÖackageánd/or malloc wrapper incorrectly specified in options.h\n" );

1397 
	`exô
 ( -1 );

1400 i‡–
	`u∆ök
 ( "§c/mÆloc.c" ) =-1 && 
î∫o
 !
ENOENT
 )

1401 
	`≥º‹
 ( "unlink src/malloc.c" );

1402 i‡–
	`u∆ök
 ( "§c/mÆlocwøµî.c" ) =-1 && 
î∫o
 !
ENOENT
 )

1403 
	`≥º‹
 ( "unlink mallocwrapper.c" );

1405 i‡–
the_wøµî
 )

1407 
	`¥ötf
 ( "Using memoryállocationÖackage: %s\n\t\tWrapped with: %s\n",

1408 
the_mÆloc
, 
the_wøµî
 );

1409 i‡–
	`lök
 ( 
the_wøµî
, "mallocwrapper.c" ) == -1 )

1410 
	`≥º‹
 ( "link mallocwrapper.c" );

1414 
	`¥ötf
 ( "Usög mem‹yáŒoˇti⁄Öackage: %s\n", 
the_mÆloc
 );

1420 i‡–
	`lök
 ( 
the_mÆloc
, "src/malloc.c" ) == -1 )

1422 
	`≥º‹
 ( "link src/malloc.c" );

1423 
	}
}

1425 
	$check_ö˛ude2
 ( * 
èg
, * 
fûe
,

1426 * 
bef‹e
, * 
a·î
 )

1428 
buf
[1024];

1429 
FILE
 *
˘
;

1432 
	`¥ötf
 ( "Checkög f‹ in˛udêfûê<%s> ,∂ó£ waô... ", 
fûe
 );

1433 
˘
 = 
	`f›í
 ( "comptest.c", "w" );

1434 
	`Ârötf
 ( 
˘
, "#include \"configure.h\"\n#include \"std_incl.h\"\n%s\n#include <%s>\n%s\n",

1435 
bef‹e
, 
fûe
, 
a·î
 );

1436 
	`f˛o£
 ( 
˘
 );

1438 
	`•rötf
 ( 
buf
, "%†%†-¯com±e°.¯" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
 );

1439 i‡–!
	`compûe
 ( 
buf
 ) )

1441 
	`Ârötf
 ( 
yyout
, "#deföê%s\n", 
èg
 );

1443 
	`fÊush
 ( 
yyout
 );

1444 
	`¥ötf
 ( "exists\n" );

1447 
	`¥ötf
 ( "doesÇotÉxist or is unusable\n" );

1449 
	}
}

1451 
	$check_ö˛ude
 ( * 
èg
, * 
fûe
 )

1453 
buf
[1024];

1454 
FILE
 *
˘
;

1456 
	`¥ötf
 ( "Checkög f‹ in˛udêfûê<%s> ... ", 
fûe
 );

1457 
˘
 = 
	`f›í
 ( "comptest.c", "w" );

1458 
	`Ârötf
 ( 
˘
, "#ö˛udê\"c⁄figuª.h\"\n#ö˛udê\"°d_ö˛.h\"\n#ö˛udê\"fûe_ö˛.h\"\n#ö˛udê<%s>\n", 
fûe
 );

1459 
	`f˛o£
 ( 
˘
 );

1461 
	`•rötf
 ( 
buf
, "%†%†-¯com±e°.¯" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
 );

1462 i‡–!
	`compûe
 ( 
buf
 ) )

1464 
	`Ârötf
 ( 
yyout
, "#deföê%s\n", 
èg
 );

1466 
	`fÊush
 ( 
yyout
 );

1467 
	`¥ötf
 ( "exists\n" );

1470 
	`¥ötf
 ( "doesÇotÉxist\n" );

1472 
	}
}

1474 
	$check_libøry
 ( * 
lib
 )

1476 
buf
[1024];

1477 
FILE
 *
˘
;

1479 
	`¥ötf
 ( "Checkög f‹Üibøry %s,∂ó£ waô ... ", 
lib
 );

1480 
˘
 = 
	`f›í
 ( "comptest.c", "w" );

1481 
	`Ârötf
 ( 
˘
, "int main() {Éxit(0); }\n" );

1482 
	`f˛o£
 ( 
˘
 );

1484 
	`•rötf
 ( 
buf
, "%†%†com±e°.¯%s" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
, 
lib
 );

1485 i‡–!
	`compûe
 ( 
buf
 ) )

1487 
	`Ârötf
 ( 
yyout
, " %s", 
lib
 );

1489 
	`¥ötf
 ( "FileÉxists\n" );

1493 
	`¥ötf
 ( "File doesÇotÉxist\n" );

1495 
	}
}

1498 
	$check_ªt_ty≥
 ( * 
èg
, * 
¥e
,

1499 * 
ty≥
, * 
func
 )

1501 
buf
[1024];

1502 
FILE
 *
˘
;

1504 
	`¥ötf
 ( "CheckögÑëu∫Åy≥ o‡%s(),∂ó£ waô...", 
func
 );

1505 
˘
 = 
	`f›í
 ( "comptest.c", "w" );

1506 
	`Ârötf
 ( 
˘
, "%s\n\n%s%s();\n", 
¥e
, 
ty≥
, 
func
 );

1507 
	`f˛o£
 ( 
˘
 );

1509 
	`•rötf
 ( 
buf
, "%†%†-¯com±e°.¯>/dev/nuŒ 2>&1", 
COMPILER
, 
CFLAGS
 );

1510 i‡–!
	`sy°em
 ( 
buf
 ) )

1512 
	`Ârötf
 ( 
yyout
, "#deföê%s\n", 
èg
 );

1514 
	`¥ötf
 ( "ty≥Ñëu∫ i†%s\n", 
ty≥
 );

1518 
	`¥ötf
 ( "Ty≥ d€†nŸÑëu∫ %s\n", 
ty≥
 );

1520 
	}
}

1524 
	$check_¥og
 ( * 
èg
, * 
¥e
, * 
code
, 
™drun
 )

1526 
buf
[1024];

1527 
FILE
 *
˘
;

1529 
˘
 = 
	`f›í
 ( "comptest.c", "w" );

1530 
	`Ârötf
 ( 
˘
, "#ö˛udê\"c⁄figuª.h\"\n#ö˛udê\"°d_ö˛.h\"\n%s\n\nöàmaö(Ë{%s}\n", ( 
¥e
 ?Öª : "" ), 
code
 );

1531 
	`f˛o£
 ( 
˘
 );

1533 
	`•rötf
 ( 
buf
, "%†%†com±e°.¯-ÿcom±e°" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
 );

1534 i‡–!
	`compûe
 ( 
buf
 ) && ( !
™drun
 || !
	`sy°em
 ( "./comptest" ) ) )

1536 i‡–
èg
 )

1538 
	`Ârötf
 ( 
yyout
, "#deföê%s\n", 
èg
 );

1539 
	`fÊush
 ( 
yyout
 );

1545 
	}
}

1547 
	$check_code
(* 
¥e
, * 
code
) {

1548 
buf
[1024];

1549 
FILE
 *
˘
;

1550 
rc
;

1552 
˘
 = 
	`f›í
("comptest.c", "w");

1553 
	`Ârötf
(
˘
, "#ö˛udê\"c⁄figuª.h\"\n#ö˛udê\"°d_ö˛.h\"\n%s\n\nöàmaö(Ë{%s}\n", (
¥e
 ?Öª : ""), 
code
);

1554 
	`f˛o£
(
˘
);

1556 
	`•rötf
(
buf
, "%†%†com±e°.¯-ÿcom±e°" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
);

1557 i‡(
	`compûe
(
buf
Ë|| (
rc
 = 
	`sy°em
("./comptest")) == 127 ||Ñc == -1) {

1560  
rc
;

1561 
	}
}

1563 
	$check_löux_libc
()

1565 
buf
[1024];

1566 
FILE
 *
˘
;

1568 
˘
 = 
	`f›í
 ( "comptest.c", "w" );

1569 
	`Ârötf
 ( 
˘
, "int main() { }\n" );

1570 
	`f˛o£
 ( 
˘
 );

1572 
	`•rötf
 ( 
buf
, "%†-g com±e°.¯-ÿcom±e° >/dev/nuŒ 2>&1", 
COMPILER
 );

1573 i‡–
	`sy°em
 ( 
buf
 ) )

1575 
	`Ârötf
 ( 
°dîr
, "Üibg.a/so installed wrong,Årying workaround ...\n" );

1576 
	`•rötf
 ( 
buf
, "%†-g com±e°.¯-l¯-ÿcom±e° >/dev/nuŒ 2>&1", 
COMPILER
 );

1577 i‡–
	`sy°em
 ( 
buf
 ) )

1579 
	`Ârötf
 ( 
°dîr
, "*** FAILED.\n" );

1580 
	`exô
 ( -1 );

1582 
	`Ârötf
 ( 
yyout
, " -lc" );

1584 
	}
}

1586 *
	gmemmove_¥og
 = "\
 buf[80];\n\
(buf,\"0123456789ABCDEF\");\n\
(&buf[1],&buf[4],13);\n\
(strcmp(buf,\"0456789ABCDEF\"))Éxit(-1);\n\
(&buf[8],&buf[6],9);\n\
(strcmp(buf,\"0456789A9ABCDEF\"))Éxit(-1);\n\
 0;\n";

1595 
	$check_memmove
 ( * 
èg
, * 
°r
 )

1597  
	`check_¥og
 ( 
èg
, 
°r
, 
memmove_¥og
, 1 );

1598 
	}
}

1600 
	$föd_memmove
()

1603 
	`¥ötf
 ( "Checking for memmove(),please wait..." );

1604 i‡–
	`check_memmove
 ( 0, "" ) )

1606 
	`¥ötf
 ( "Éxists\n" );

1609 i‡–
	`check_memmove
 ( "USE_BCOPY", "#define memmove(a,b,c) bcopy(b,a,c)" ) )

1611 
	`¥ötf
 ( " simulating via bcopy()\n" );

1615 
	`¥ötf
 ( " missing; using QTZ_SE's version\n" );

1616 
	`Ârötf
 ( 
yyout
, "#define MEMMOVE_MISSING\n" );

1617 
	}
}

1619 
	$vîbo£_check_¥og
 ( * 
msg
, * 
def
, * 
¥e
,

1620 * 
¥og
, 
™drun
 )

1622 
	`¥ötf
 ( "%†∂ó£ waô...", 
msg
 );

1623 i‡–
	`check_¥og
 ( 
def
, 
¥e
, 
¥og
, 
™drun
 ) )

1625 
	`¥ötf
 ( "exists\n" );

1627 
	`¥ötf
 ( "doesÇotÉxist\n" );

1628 
	}
}

1630 
	$check_c⁄figuª_vîsi⁄
()

1632 
buf
[1024];

1633 
FILE
 *
˘
;

1635 
˘
 = 
	`f›í
 ( "comptest.c", "w" );

1636 
	`Ârötf
 ( 
˘
, "#ö˛udê\"c⁄figuª.h\"\n\n#i‡CONFIGURE_VERSION < %i\¡høshánd dõ\n#ídif\n\nöàmaö(Ë{ }\n", 
CONFIGURE_VERSION
 );

1637 
	`f˛o£
 ( 
˘
 );

1639 
	`•rötf
 ( 
buf
, "%†%†com±e°.¯-ÿcom±e° " 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
 );

1640  !
	`compûe
 ( 
buf
 );

1641 
	}
}

1643 
	$h™dÀ_c⁄figuª
()

1645 i‡–
	`check_c⁄figuª_vîsi⁄
() ) ;

1647 
	`›í_ouçut_fûe
 ( "configure.h" );

1649 #i‚de‡
WIN32


1650 
	`check_ö˛ude
 ( "INCL_STDLIB_H", "stdlib.h" );

1651 
	`check_ö˛ude
 ( "INCL_UNISTD_H", "unistd.h" );

1653 i‡(
	`check_ö˛ude
("INCL_TIME_H", "time.h")) {

1654 i‡(!
	`check_¥og
(0, "#include <time.h>", "tzset();", 0)) {

1655 i‡(
	`check_¥og
(0, 0, "voidÅzset();Åzset();", 0))

1656 
	`Ârötf
(
yyout
, "#define PROTO_TZSET\n#define USE_TZSET\n");

1659 
	`Ârötf
(
yyout
, "#define USE_TZSET\n");

1661 i‡(
	`check_¥og
(0, 0, "voidÅzset();Åzset();", 0))

1662 
	`Ârötf
(
yyout
, "#define PROTO_TZSET\n#define USE_TZSET\n");

1664 
	`check_ö˛ude
 ( "INCL_SYS_TIMES_H", "sys/times.h" );

1665 
	`check_ö˛ude
 ( "INCL_FCNTL_H", "fcntl.h" );

1666 
	`check_ö˛ude
 ( "INCL_SYS_TIME_H", "sys/time.h" );

1667 
	`check_ö˛ude
 ( "INCL_DOS_H", "dos.h" );

1668 
	`check_ö˛ude
 ( "INCL_USCLKC_H", "usclkc.h" );

1669 
	`check_ö˛ude
 ( "INCL_LIMITS_H", "limits.h" );

1670 i‡–!
	`check_¥og
 ( 0, 0, "int x = USHRT_MAX;", 0 ) )

1672 i‡–!
	`check_¥og
 ( 0, 0, "int x = MAXSHORT;", 0 ) )

1673 
	`check_ö˛ude
 ( "INCL_VALUES_H", "values.h" );

1674 
	`Ârötf
 ( 
yyout
, "#define USHRT_MAX (MAXSHORT)\n" );

1677 
	`check_ö˛ude
 ( "INCL_NETINET_IN_H", "netinet/in.h" );

1678 
	`check_ö˛ude
 ( "INCL_ARPA_INET_H", "arpa/inet.h" );

1680 
	`check_ö˛ude
 ( "INCL_SYS_IOCTL_H", "sys/ioctl.h" );

1681 
	`check_ö˛ude
 ( "INCL_SYS_SOCKET_H", "sys/socket.h" );

1682 
	`check_ö˛ude
 ( "INCL_NETDB_H", "netdb.h" );

1684 
	`check_ö˛ude2
 ( "INCL_ARPA_TELNET_H", "arpa/telnet.h", "", "int i=TELOPT_NAWS;" );

1685 
	`check_ö˛ude
 ( "INCL_SYS_SEMA_H", "sys/sema.h" );

1686 
	`check_ö˛ude
 ( "INCL_SYS_SOCKETVAR_H", "sys/socketvar.h" );

1687 
	`check_ö˛ude
 ( "INCL_SOCKET_H", "socket.h" );

1688 
	`check_ö˛ude
 ( "INCL_RESOLVE_H", "resolve.h" );

1690 
	`check_ö˛ude
 ( "INCL_SYS_STAT_H", "sys/stat.h" );

1693 i‡–0 && 
	`check_¥og
("BSD_READDIR", "#include <sys/dir.h>", "struct direct *d; d->d_namlen;", 0)) {

1694 
	`check_ö˛ude
("INCL_SYS_DIR_H", "sys/dir.h");

1697 
	`check_ö˛ude
("INCL_DIRENT_H", "dirent.h");

1698 
	`check_ö˛ude
("INCL_SYS_DIRENT_H", "sys/dirent.h");

1699 
	`Ârötf
(
yyout
, "#define USE_STRUCT_DIRENT\n");

1702 
	`check_ö˛ude
 ( "INCL_SYS_FILIO_H", "sys/filio.h" );

1703 
	`check_ö˛ude
 ( "INCL_SYS_SOCKIO_H", "sys/sockio.h" );

1704 
	`check_ö˛ude
 ( "INCL_SYS_MKDEV_H", "sys/mkdev.h" );

1705 
	`check_ö˛ude
 ( "INCL_SYS_RESOURCE_H", "sys/resource.h" );

1706 
	`check_ö˛ude
 ( "INCL_SYS_RUSAGE_H", "sys/rusage.h" );

1707 
	`check_ö˛ude
 ( "INCL_SYS_WAIT_H", "sys/wait.h" );

1708 
	`check_ö˛ude
 ( "INCL_SYS_CRYPT_H", "sys/crypt.h" );

1709 
	`check_ö˛ude
 ( "INCL_CRYPT_H", "crypt.h" );

1712 i‡–!
	`check_ö˛ude
 ( "INCL_MACH_MACH_H", "mach/mach.h" ) )

1713 
	`check_ö˛ude
 ( "INCL_MACH_H", "mach.h" );

1716 
	`check_ö˛ude
 ( "INCL_SYS_SYSMACROS_H", "sys/sysmacros.h" );

1717 
	`check_ö˛ude
 ( "INCL_STDARG_H", "stdarg.h" );

1719 #ifde‡
DEBUG


1721 
	`check_ö˛ude
 ( "INCL_BSTRING_H", "bstring.h" );

1726 
	`check_ö˛ude
 ( "INCL_DLFCN_H", "dlfcn.h" );

1727 i‡–!
	`check_¥og
 ( 0, 0, "int x = RTLD_LAZY;", 0 ) )

1728 
	`Ârötf
 ( 
yyout
, "#define RTLD_LAZY 1\n" );

1732 
	`¥ötf
("Checking for missing INADDR_NONE ... ");

1733 i‡(!
	`check_¥og
(0, "#include <netinet/in.h>", "int x = INADDR_NONE;", 0)) {

1734 
	`¥ötf
("missing\n");

1735 
	`Ârötf
(
yyout
, "#define INADDR_NONE (unsigned int)0xffffffff\n");

1736 } 
	`¥ötf
("ok\n");

1738 
	`¥ötf
 ( "QTZ_SE:Checking forÑandomÇumber generator ..." );

1739 i‡–
	`check_¥og
 ( "RANDOM", 0, "srandom(0);", 0 ) )

1742 
	`¥ötf
 ( "QTZ_SE:UsingÑandom()\n" );

1744 i‡–
	`check_¥og
 ( "DRAND48", 0, "srand48(0);", 0 ) )

1747 
	`¥ötf
 ( "QTZ_SE: Using srand()\n" );

1749 i‡–
	`check_¥og
 ( "RAND", 0, "srand(0);", 0 ) )

1752 
	`¥ötf
 ( "QTZ_SE: UsingÑand()\n" );

1756 
	`¥ötf
 ( "QTZ_SE:WARNING: Can'tÇot findáÑandomÇumber generator\n" );

1757 
	`exô
 ( -1 );

1760 i‡–
	`check_¥og
 ( "USE_BSD_SIGNALS", 0, "SIGCHLD; wait3(0, 0, 0);", 0 ) )

1762 
	`¥ötf
 ( "QTZ_SE:Using BSD signals.\n" );

1766 
	`¥ötf
 ( "Using System V signals.\n" );

1769 
	`¥ötf
 ( "Checking if signal()Ñeturns SIG_ERR onÉrror ..." );

1770 i‡–
	`check_¥og
 ( "SIGNAL_ERROR SIG_ERR", 0, "if (signal(0, 0) == SIG_ERR) ;", 0 ) )

1772 
	`¥ötf
 ( " yes\n" );

1776 
	`Ârötf
 ( 
yyout
, "#define SIGNAL_ERROR BADSIG\n" );

1777 
	`¥ötf
 ( "Ço\n" );

1780 
	`¥ötf
 ( "Checking for inline ..." );

1781 i‡–!
	`check_¥og
 ( "INLINE inline", "inline void foo() { }", "foo();", 0 ) )

1783 
	`¥ötf
 ( " __inline ..." );

1784 i‡–!
	`check_¥og
 ( "INLINE __inline", "__inline void foo() {}", "foo();", 0 ) )

1786 
	`Ârötf
 ( 
yyout
, "#define INLINE\n" );

1789 
	`¥ötf
 ( " const ...\n" );

1790 i‡–!
	`check_¥og
 ( "CONST const", "int foo(const int *, const int *);", "", 0 ) )

1791 
	`Ârötf
 ( 
yyout
, "#define CONST\n" );

1793 
	`vîbo£_check_¥og
 ( "Checking for ualarm()", "HAS_UALARM",

1795 
	`vîbo£_check_¥og
 ( "Checking for strerror()", "HAS_STRERROR",

1797 
	`vîbo£_check_¥og
 ( "Checking for POSIX getcwd()", "HAS_GETCWD",

1799 
	`vîbo£_check_¥og
 ( "Checking for getrusage()", "RUSAGE",

1801 
	`vîbo£_check_¥og
 ( "Checking forÅimes()", "TIMES",

1803 
	`vîbo£_check_¥og
 ( "Checking for gettimeofday()", "HAS_GETTIMEOFDAY",

1805 
	`vîbo£_check_¥og
 ( "Checking for fchmod()", "HAS_FCHMOD",

1808 
	`¥ötf
("Checking for big orÜittleÉndian ... ");

1809 i‡(!
	`check_code
("charÇum[] = { 0x11, 0x22, 0x33, 0x44 }; int *foo = (int *)num;",

1811 
	`¥ötf
("big\n");

1812 
	`Ârötf
(
yyout
, "#define BIGENDIAN 1\n");

1813 
	`fÊush
(
yyout
);

1814 } 
	`¥ötf
("little\n");

1816 
	`föd_memmove
();

1819 
	`Ârötf
 ( 
yyout
, "#define SIZEOF_INT %li\n",  ( ) );

1820 
	`Ârötf
 ( 
yyout
, "#define SIZEOF_PTR %li\n",  ( * ) );

1821 
	`Ârötf
 ( 
yyout
, "#define SIZEOF_SHORT %li\n",  ( ) );

1822 
	`Ârötf
 ( 
yyout
, "#define SIZEOF_FLOAT %li\n",  ( ) );

1826 
	`Ârötf
 ( 
yyout
, "#define UINT32 unsignedÜong\n" );

1829 
	`Ârötf
 ( 
yyout
, "#define UINT32 unsigned int\n" );

1832 
	`¥ötf
 ( "WARNING: Can't findá 32 bit integralÅype.\n" );

1833 
	`exô
 ( -1 );

1837 i‡(
	`lookup_deföe
("PACKAGE_DB")) {

1841 i‡(
	`lookup_deföe
("USE_MSQL")) {

1842 i‡(!(
	`check_ö˛ude
("INCL_LOCAL_MSQL_H", "/usr/local/include/msql.h")

1843 || 
	`check_ö˛ude
("INCL_LOCAL_MSQL_MSQL_H", "/usr/local/msql/include/msql.h")

1844 || 
	`check_ö˛ude
("INCL_LOCAL_MINERVA_MSQL_H", "/usr/local/Minerva/include/msql.h")

1845 || 
	`check_ö˛ude
("INCL_LIB_HUGHES_MSQL_H", "/usr/lib/Hughes/include/msql.h"))) {

1846 
	`Ârötf
(
°dîr
, "Cannot find msql.h, compilation is goingÅo fail miserably.\n");

1849 i‡(!(
	`check_libøry
("-lmsql") ||

1850 
	`check_libøry
("-L/usr/local/lib -lmsql") ||

1851 
	`check_libøry
("-L/usr/local/msql/lib -lmsql") ||

1852 
	`check_libøry
("-L/usr/local/Minerva/lib -lmsql") ||

1853 
	`check_libøry
("-L/usr/lib/Hughes/lib -lmsql"))) {

1854 
	`Ârötf
(
°dîr
, "Cannot findÜibmsql.a, compilation is goingÅo fail miserably\n");

1857 i‡(
	`lookup_deföe
("USE_MYSQL")) {

1858 i‡(!(
	`check_ö˛ude
("INCL_LOCAL_MYSQL_H", "/usr/local/include/mysql.h")

1859 || 
	`check_ö˛ude
("INCL_LOCAL_INCLUDE_MYSQL_MYSQL_H", "/usr/local/include/mysql/mysql.h")

1860 || 
	`check_ö˛ude
("INCL_LOCAL_MYSQL_MYSQL_H", "/usr/local/mysql/include/mysql.h")

1861 || 
	`check_ö˛ude
("INCL_MYSQL_MYSQL_H", "/usr/include/mysql/mysql.h"))) {

1862 
	`Ârötf
(
°dîr
, "Cannot find mysql.h, compilation is goingÅo fail miserably.\n");

1865 i‡(!(
	`check_libøry
("-lmysqlclient") ||

1866 
	`check_libøry
("-L/usr/local/lib -lmysqlclient") ||

1867 
	`check_libøry
("-L/usr/local/lib/mysql -lmysqlclient") ||

1868 
	`check_libøry
("-L/usr/local/mysql/lib -lmysqlclient"))) {

1869 
	`Ârötf
(
°dîr
, "Cannot findÜibmysqlclient.a, compilation is goingÅo fail miserably\n");

1874 
	`Ârötf
(
yyout
, "#deföêCONFIGURE_VERSION %i\n\n", 
CONFIGURE_VERSION
);

1876 
	`˛o£_ouçut_fûe
();

1879 
	`›í_ouçut_fûe
 ( "system_libs" );

1880 
	`check_libøry
 ( "-lresolv" );

1881 
	`check_libøry
 ( "-lbsd" );

1882 
	`check_libøry
 ( "-lBSD" );

1883 
	`check_libøry
 ( "-ly" );

1886 i‡–!
	`check_¥og
 ( 0, "#include \"lint.h\"",

1888 
	`check_libøry
 ( "-lcrypt" );

1890 i‡–!
	`check_¥og
 ( 0, "", "char *x = malloc(100);", 0 ) )

1891 
	`check_libøry
 ( "-lmalloc" );

1893 i‡–!
	`check_¥og
 ( 0, "", "void *x = dlopen(0, 0);", 0 ) )

1894 
	`check_libøry
 ( "-ldl" );

1896 
	`check_libøry
 ( "-lsocket" );

1897 
	`check_libøry
 ( "-linet" );

1898 
	`check_libøry
 ( "-lnsl" );

1899 
	`check_libøry
 ( "-lnsl_s" );

1900 
	`check_libøry
 ( "-lseq" );

1901 
	`check_libøry
 ( "-lm" );

1903 
	`Ârötf
 ( 
°dîr
, "Checking for flaky Linux systems ...\n" );

1904 
	`check_löux_libc
();

1906 
	`Ârötf
 ( 
yyout
, "\n\n" );

1907 
	`˛o£_ouçut_fûe
();

1909 
	}
}

1911 
	$maö
 ( 
¨gc
, ** 
¨gv
 )

1913 
idx
 = 1;

1915 i‡–
¨gc
 < 2 )

1917 
	`Ârötf
–
°dîr
, 
SYNTAX
);

1918 
	`exô
 ( -1 );

1921  
idx
 < 
¨gc
 )

1923 
	`Ârötf
(
°dîr
, "∑rsög %s\n", 
¨gv
[
idx
]);

1924 i‡–
¨gv
[
idx
][0] != '-' )

1926 
	`Ârötf
 ( 
°dîr
, 
SYNTAX
 );

1927 
	`exô
 ( -1 );

1929 i‡–
	`°rcmp
 ( 
¨gv
[
idx
], "-configure" ) ==0 )

1931 
	`h™dÀ_c⁄figuª
();

1933 i‡–
	`°rcmp
 ( 
¨gv
[
idx
], "-process" ) ==0 )

1935 
	`h™dÀ_¥o˚ss
 ( 
¨gv
[++
idx
] );

1937 i‡–
	`°rcmp
 ( 
¨gv
[
idx
], "-options" ) ==0 )

1939 
	`h™dÀ_›ti⁄s
();

1941 i‡–
	`°rcmp
 ( 
¨gv
[
idx
], "-malloc" ) ==0 )

1943 
	`h™dÀ_mÆloc
();

1945 i‡(
	`°rcmp
(
¨gv
[
idx
], "-build_applies")==0) {

1946 
	`h™dÀ_≠∂õs
();

1948 i‡–
	`°rcmp
 ( 
¨gv
[
idx
], "-build_func_spec" ) ==0 )

1950 
	`h™dÀ_buûd_func_•ec
 ( 
¨gv
[++
idx
] );

1952 i‡–
	`°rcmp
 ( 
¨gv
[
idx
], "-build_efuns" ) ==0 )

1954 
	`h™dÀ_buûd_efuns
();

1958 
	`Ârötf
 ( 
°dîr
, "Uƒecognized fœg %s\n", 
¨gv
[
idx
] );

1959 
	`exô
 ( -1 );

1961 
idx
++;

1963 
	`¥ötf
 ( "\n" );

1965 
	}
}

	@grammar/efun_defs.c

7 {"GëIãmSave",
	gF_GETITEMSAVE
,0,0,2,2,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

8 {"GëIãmTemp",
	gF_GETITEMTEMP
,0,0,2,2,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

9 {"GëNpc",
	gF_GETNPC
,0,0,2,2,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

10 {"GëNpcSave",
	gF_GETNPCSAVE
,0,0,2,2,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

11 {"GëSumm⁄Save",
	gF_GETSUMMONSAVE
,0,0,2,2,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,18,
	gDEFAULT_NONE
},

12 {"GëSumm⁄Temp",
	gF_GETSUMMONTEMP
,0,0,2,2,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,18,
	gDEFAULT_NONE
},

13 {"SëIãmSave",
	gF_SETITEMSAVE
,0,0,3,3,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

14 {"SëIãmTemp",
	gF_SETITEMTEMP
,0,0,3,3,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

15 {"SëNpc",
	gF_SETNPC
,0,0,3,3,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

16 {"SëNpcSave",
	gF_SETNPCSAVE
,0,0,3,3,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

17 {"SëSumm⁄Save",
	gF_SETSUMMONSAVE
,0,0,3,3,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

18 {"SëSumm⁄Temp",
	gF_SETSUMMONTEMP
,0,0,3,3,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_STRING
|T_NUMBER,
	gT_ANY
,T_ANY,244,
	gDEFAULT_NONE
},

19 {"_",
	gF__
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

20 {"acos",
	gF_ACOS
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

21 {"Æl_¥evious_obje˘s",
	gF_PREVIOUS_OBJECT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,-1},

22 {"Æloˇã",
	gF_ALLOCATE
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

23 {"Æloˇã_buf„r",
	gF_ALLOCATE_BUFFER
,0,0,2,2,
	gTYPE_BUFFER
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,T_ANY,57,0},

24 {"Æloˇã_m≠pög",
	gF_ALLOCATE_MAPPING
,0,0,1,1,
	gTYPE_MAPPING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

25 {"¨øyp",
	gF_POINTERP
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

26 {"asö",
	gF_ASIN
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

27 {"©™",
	gF_ATAN
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

28 {"buf„Ω",
	gF_BUFFERP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

29 {"ˇŒ_Ÿhî",
	gF_CALL_OTHER
,0,0,2,-1,
	gTYPE_ANY
,
	gT_OBJECT
|
	gT_STRING
|
	gT_ARRAY
,T_STRING|T_ARRAY,
	gT_ANY
,T_ANY,0,
	gDEFAULT_NONE
},

30 {"ˇŒ_out",
	gF_CALL_OUT
,0,0,2,-1,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,200,
	gDEFAULT_NONE
},

31 {"ˇŒ_°ack",
	gF_CALL_STACK
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

32 {"˚û",
	gF_CEIL
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

33 {"chûdªn",
	gF_CHILDREN
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

34 {"˛as•",
	gF_CLASSP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

35 {"˛ór_bô",
	gF_CLEAR_BIT
,0,0,2,2,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,
	gDEFAULT_NONE
},

36 {"˛⁄e_obje˘",
	gF_CLONE_OBJECT
,0,0,1,-1,
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

37 {"˛⁄ï",
	gF_CLONEP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_THIS_OBJECT
},

38 {"c›y",
	gF_COPY
,0,0,1,1,
	gTYPE_ANY
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

39 {"cos",
	gF_COS
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

40 {"˝",
	gF_CP
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,25,
	gDEFAULT_NONE
},

41 {"¸y±",
	gF_CRYPT
,0,0,2,2,
	gTYPE_STRING
,
	gT_STRING
,T_STRING|
	gT_NUMBER
,
	gT_ANY
,T_ANY,54,
	gDEFAULT_NONE
},

42 {"˘ime",
	gF_CTIME
,0,0,1,1,
	gTYPE_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

43 {"curs‹_˛o£",
	gF_CURSOR_CLOSE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

44 {"curs‹_„tch",
	gF_CURSOR_FETCH
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_BUFFER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

45 {"debug_öfo",
	gF_DEBUG_INFO
,0,0,2,2,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,289,
	gDEFAULT_NONE
},

46 {"debug_mesßge",
	gF_DEBUG_MESSAGE
,0,0,1,-1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

47 {"dìp_öhîô_li°",
	gF_DEEP_INHERIT_LIST
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_THIS_OBJECT
},

48 {"de°roy_ôem",
	gF_DESTROY_ITEM
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

49 {"de°roy_≈c",
	gF_DESTROY_NPC
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

50 {"de°roy_summ⁄",
	gF_DESTROY_SUMMON
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

51 {"de°ru˘",
	gF_DESTRUCT
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_NONE
},

52 {"dismiss_ãam",
	gF_DISMISS_TEAM
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

53 {"dump_fûe_des¸ùt‹s",
	gF_DUMP_FILE_DESCRIPTORS
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

54 {"dump_mem‹y_poﬁ",
	gF_DUMP_MEMORY_POOL
,0,0,0,0,
	gTYPE_NOVALUE
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

55 {"dump_¥og",
	gF_DUMP_PROG
,0,0,1,-1,
	gTYPE_NOVALUE
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,293,
	gDEFAULT_NONE
},

56 {"dump_sockë_°©us",
	gF_DUMP_SOCKET_STATUS
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

57 {"dum∑Œobj",
	gF_DUMPALLOBJ
,0,0,0,1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

58 {"íabÀ_log_±o",
	gF_ENABLE_LOG_PTO
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

59 {"îr‹",
	gF_ERROR
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

60 {"evÆ_co°",
	gF_SET_EVAL_LIMIT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,-1},

61 {"evÆu©e",
	gF_EVALUATE
,0,0,1,-1,
	gTYPE_ANY
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

62 {"exp",
	gF_EXP
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

63 {"ex∂ode",
	gF_EXPLODE
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,25,
	gDEFAULT_NONE
},

64 {"„tch_v¨übÀ",
	gF_FETCH_VARIABLE
,0,0,1,1,
	gTYPE_ANY
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

65 {"fûe_Àngth",
	gF_FILE_LENGTH
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

66 {"fûe_«me",
	gF_FILE_NAME
,0,0,1,1,
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_THIS_OBJECT
},

67 {"fûe_size",
	gF_FILE_SIZE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

68 {"fûãr",
	gF_FILTER
,0,0,2,-1,
	gTYPE_ANY
,
	gT_ARRAY
|
	gT_MAPPING
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,137,
	gDEFAULT_NONE
},

69 {"fûãr_¨øy",
	gF_FILTER
 | 
	gF_ALIAS_FLAG
,0,0,2,-1,
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,131,
	gDEFAULT_NONE
},

70 {"fûãr_m≠pög",
	gF_FILTER
 | 
	gF_ALIAS_FLAG
,0,0,2,-1,
	gTYPE_MAPPING
,
	gT_MAPPING
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,138,
	gDEFAULT_NONE
},

71 {"föd_obje˘",
	gF_FIND_OBJECT
,0,0,2,2,
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,0},

72 {"Êﬂç",
	gF_FLOATP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

73 {"Êo‹",
	gF_FLOOR
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

74 {"fs_˛o£_uid_c⁄√˘i⁄",
	gF_FS_CLOSE_UID_CONNECTION
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

75 {"fs_˛o£_vfd_c⁄√˘i⁄",
	gF_FS_CLOSE_VFD_CONNECTION
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

76 {"fs_cuæ_ªque°",
	gF_FS_CURL_REQUEST
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_MAPPING
,
	gT_FUNCTION
,
	gT_ANY
,T_ANY,162,
	gDEFAULT_NONE
},

77 {"fs_db_gamed_exô",
	gF_FS_DB_GAMED_EXIT
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

78 {"fs_db_obje˘_lﬂd",
	gF_FS_DB_OBJECT_LOAD
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_NUMBER
|
	gT_STRING
,T_NUMBER,T_NUMBER,
	gT_ANY
,219,
	gDEFAULT_NONE
},

79 {"fs_db_obje˘_√w",
	gF_FS_DB_OBJECT_NEW
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_NUMBER
|
	gT_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,214,
	gDEFAULT_NONE
},

80 {"fs_db_obje˘_ª«me",
	gF_FS_DB_OBJECT_RENAME
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_NUMBER
|
	gT_STRING
,
	gT_OBJECT
,T_STRING,
	gT_ANY
,233,
	gDEFAULT_NONE
},

81 {"fs_db_obje˘_ª°‹e",
	gF_FS_DB_OBJECT_RESTORE
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_BUFFER
,
	gT_ANY
,T_ANY,240,
	gDEFAULT_NONE
},

82 {"fs_db_obje˘_ßve",
	gF_FS_DB_OBJECT_SAVE
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_NUMBER
|
	gT_STRING
,
	gT_OBJECT
,T_NUMBER,
	gT_ANY
,226,
	gDEFAULT_NONE
},

83 {"fs_db_obje˘_u∆ﬂd",
	gF_FS_DB_OBJECT_UNLOAD
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
|
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,214,
	gDEFAULT_NONE
},

84 {"fs_db_sync",
	gF_FS_DB_SYNC
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

85 {"fs_dúty_mem_poﬁ_°©",
	gF_FS_DIRTY_MEM_POOL_STAT
,0,0,0,0,
	gTYPE_NOVALUE
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

86 {"fs_dns_ªsﬁve",
	gF_FS_DNS_RESOLVE
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_FUNCTION
,
	gT_ANY
,T_ANY,257,
	gDEFAULT_NONE
},

87 {"fs_íabÀ_dúty_m≠",
	gF_FS_ENABLE_DIRTY_MAP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,61,
	gDEFAULT_NONE
},

88 {"fs_íabÀ_dúty_obje˘",
	gF_FS_ENABLE_DIRTY_OBJECT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_NONE
},

89 {"fs_ex˛ude_°©s_±o",
	gF_FS_EXCLUDE_STATS_PTO
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_ARRAY
,
	gT_ANY
,T_ANY,T_ANY,169,
	gDEFAULT_NONE
},

90 {"fs_gë_ù_by_vfd",
	gF_FS_GET_IP_BY_VFD
,0,0,1,1,
	gTYPE_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

91 {"fs_gë_uid_by_vfd",
	gF_FS_GET_UID_BY_VFD
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

92 {"fs_gë_vfd_by_uid",
	gF_FS_GET_VFD_BY_UID
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

93 {"fs_hâp_ªque°",
	gF_FS_HTTP_REQUEST
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_ARRAY
,T_ARRAY,T_ARRAY,
	gT_ANY
,156,
	gDEFAULT_NONE
},

94 {"fs_ic⁄v",
	gF_FS_ICONV
,0,0,3,3,
	gTYPE_STRING
,
	gT_STRING
,T_STRING,T_STRING,
	gT_ANY
,43,
	gDEFAULT_NONE
},

95 {"fs_is_uid_c⁄√˘ed",
	gF_FS_IS_UID_CONNECTED
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

96 {"fs_œ°_±o_time°amp",
	gF_FS_LAST_PTO_TIMESTAMP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

97 {"fs_m¨shÆ_dúty_m≠",
	gF_FS_MARSHAL_DIRTY_MAP
,0,0,1,1,
	gTYPE_BUFFER
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,61,
	gDEFAULT_NONE
},

98 {"fs_m¨shÆ_dúty_obje˘",
	gF_FS_MARSHAL_DIRTY_OBJECT
,0,0,1,1,
	gTYPE_BUFFER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_NONE
},

99 {"fs_m¨shÆ_m≠",
	gF_FS_MARSHAL_MAP
,0,0,1,1,
	gTYPE_BUFFER
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,61,
	gDEFAULT_NONE
},

100 {"fs_mem‹y_öfo",
	gF_FS_MEMORY_INFO
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

101 {"fs_mîge_dúty_m≠",
	gF_FS_MERGE_DIRTY_MAP
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_MAPPING
,
	gT_BUFFER
,
	gT_ANY
,T_ANY,206,
	gDEFAULT_NONE
},

102 {"fs_mîge_dúty_obje˘",
	gF_FS_MERGE_DIRTY_OBJECT
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_MAPPING
,
	gT_BUFFER
,
	gT_ANY
,T_ANY,206,
	gDEFAULT_NONE
},

103 {"fs_√w_u£r",
	gF_FS_NEW_USER
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,T_ANY,57,
	gDEFAULT_NONE
},

104 {"fs_ª°‹e_‰om_fûe",
	gF_FS_RESTORE_FROM_FILE
,0,0,1,1,
	gTYPE_ANY
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

105 {"fs_Ωc_ˇŒ",
	gF_FS_RPC_CALL
,0,0,2,-1,
	gTYPE_NOVALUE
,
	gT_NUMBER
|
	gT_ARRAY
,T_NUMBER,
	gT_ANY
,T_ANY,168,
	gDEFAULT_NONE
},

106 {"fs_Ωc_ˇŒ_lo›",
	gF_FS_RPC_CALL_LOOP
,0,0,2,-1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,T_ANY,174,
	gDEFAULT_NONE
},

107 {"fs_Ωc_make_cfg",
	gF_FS_RPC_MAKE_CFG
,0,0,3,3,
	gTYPE_NOVALUE
,
	gT_ARRAY
,
	gT_STRING
,T_STRING,
	gT_ANY
,186,
	gDEFAULT_NONE
},

108 {"fs_Ωc_x_ˇŒ",
	gF_FS_RPC_X_CALL
,0,0,3,-1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,T_NUMBER,T_NUMBER,
	gT_ANY
,179,
	gDEFAULT_NONE
},

109 {"fs_ßve_Æl_d©",
	gF_FS_SAVE_ALL_DAT
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_MAPPING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,210,
	gDEFAULT_NONE
},

110 {"fs_ßve_Æl_u£r",
	gF_FS_SAVE_ALL_USER
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

111 {"fs_ßve_to_fûe",
	gF_FS_SAVE_TO_FILE
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,152,
	gDEFAULT_NONE
},

112 {"fs_£t_vÆid©i⁄",
	gF_FS_SET_VALIDATION
,0,0,4,4,
	gTYPE_NOVALUE
,
	gT_NUMBER
,T_NUMBER,T_NUMBER,T_NUMBER,192,
	gDEFAULT_NONE
},

113 {"fs_uæ_decode",
	gF_FS_URL_DECODE
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

114 {"fs_uæ_ícode",
	gF_FS_URL_ENCODE
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

115 {"fs_uæ_ícode_m≠",
	gF_FS_URL_ENCODE_MAP
,0,0,1,1,
	gTYPE_STRING
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,61,
	gDEFAULT_NONE
},

116 {"fs_vÆid©i⁄_°¨t",
	gF_FS_VALIDATION_START
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

117 {"fun˘i⁄_exi°s",
	gF_FUNCTION_EXISTS
,0,0,1,3,
	gTYPE_STRING
,
	gT_STRING
,
	gT_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,113,
	gDEFAULT_NONE
},

118 {"fun˘i⁄_ow√r",
	gF_FUNCTION_OWNER
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_FUNCTION
,
	gT_ANY
,T_ANY,T_ANY,32,
	gDEFAULT_NONE
},

119 {"fun˘i⁄p",
	gF_FUNCTIONP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

120 {"fun˘i⁄s",
	gF_FUNCTIONS
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,115,0},

121 {"gamed_˛o£_uid_c⁄√˘i⁄",
	gF_GAMED_CLOSE_UID_CONNECTION
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

122 {"gë_Æl_u£rs",
	gF_GET_ALL_USERS
,0,0,1,1,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

123 {"gë_c⁄fig_fûe",
	gF_GET_CONFIG_FILE
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

124 {"gë_dú",
	gF_GET_DIR
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,0},

125 {"gë_ôem_m≠",
	gF_GET_ITEM_MAP
,0,0,2,2,
	gTYPE_MAPPING
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,T_ANY,57,
	gDEFAULT_NONE
},

126 {"gë_≈c_cú˛e_fõld",
	gF_GET_NPC_CIRCLE_FIELD
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

127 {"gë_≈c_fightid",
	gF_GET_NPC_FIGHTID
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

128 {"gë_≈c_m≠",
	gF_GET_NPC_MAP
,0,0,2,2,
	gTYPE_MAPPING
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,T_ANY,57,
	gDEFAULT_NONE
},

129 {"gë_≈c_obje˘",
	gF_GET_NPC_OBJECT
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

130 {"gë_≈c_pos",
	gF_GET_NPC_POS
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

131 {"gë_≈c_°©us",
	gF_GET_NPC_STATUS
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

132 {"gë_⁄löe_cou¡",
	gF_GET_ONLINE_COUNT
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

133 {"gë_summ⁄_m≠",
	gF_GET_SUMMON_MAP
,0,0,2,2,
	gTYPE_MAPPING
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,T_ANY,57,
	gDEFAULT_NONE
},

134 {"gë_ãam_m≠",
	gF_GET_TEAM_MAP
,0,0,1,1,
	gTYPE_MAPPING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

135 {"gë_time_of_day",
	gF_GET_TIME_OF_DAY
,0,0,0,0,
	gTYPE_MOD_ARRAY
|
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

136 {"gë_u£r",
	gF_GET_USER
,0,0,1,1,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

137 {"im∂ode",
	gF_IMPLODE
,0,0,2,3,
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,29,
	gDEFAULT_NONE
},

138 {"ö_≈c_fõld",
	gF_IN_NPC_FIELD
,0,0,4,4,
	gTYPE_NUMBER
,
	gT_NUMBER
,T_NUMBER,T_NUMBER,T_NUMBER,192,
	gDEFAULT_NONE
},

139 {"öhîô_li°",
	gF_SHALLOW_INHERIT_LIST
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_THIS_OBJECT
},

140 {"öhîôs",
	gF_INHERITS
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,83,
	gDEFAULT_NONE
},

141 {"öô_gëãxt",
	gF_INIT_GETTEXT
,0,0,2,2,
	gTYPE_MAPPING
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,25,
	gDEFAULT_NONE
},

142 {"öç",
	gF_INTP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

143 {"is_auth_£rvî",
	gF_IS_AUTH_SERVER
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

144 {"is_ôem_⁄löe",
	gF_IS_ITEM_ONLINE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

145 {"is_≈c_⁄löe",
	gF_IS_NPC_ONLINE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

146 {"is_⁄löe",
	gF_IS_ONLINE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

147 {"is_summ⁄_⁄löe",
	gF_IS_SUMMON_ONLINE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

148 {"keys",
	gF_KEYS
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,61,
	gDEFAULT_NONE
},

149 {"keys_by_vÆue",
	gF_KEYS_BY_VALUE
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,61,
	gDEFAULT_NONE
},

150 {"lﬂd_obje˘",
	gF_FIND_OBJECT
 | 
	gF_ALIAS_FLAG
,0,0,2,2,
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,1},

151 {"loˇ…ime",
	gF_LOCALTIME
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

152 {"log",
	gF_LOG
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

153 {"logout",
	gF_LOGOUT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

154 {"lowî_ˇ£",
	gF_LOWER_CASE
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

155 {"Õc2py°r",
	gF_LPC2PYSTR
,0,0,1,1,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

156 {"Õc_gc",
	gF_LPC_GC
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

157 {"maö_lo›",
	gF_MAIN_LOOP
,0,0,0,1,
	gTYPE_NOVALUE
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,3,
	gDEFAULT_NONE
},

158 {"mÆloc_°©us",
	gF_MALLOC_STATUS
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

159 {"m≠",
	gF_MAP
,0,0,2,-1,
	gTYPE_ANY
,
	gT_STRING
|
	gT_MAPPING
|
	gT_ARRAY
,T_STRING|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,144,
	gDEFAULT_NONE
},

160 {"m≠_¨øy",
	gF_MAP
 | 
	gF_ALIAS_FLAG
,0,0,2,-1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,131,
	gDEFAULT_NONE
},

161 {"m≠_dñëe",
	gF_MAP_DELETE
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,63,
	gDEFAULT_NONE
},

162 {"m≠_m≠pög",
	gF_MAP
 | 
	gF_ALIAS_FLAG
,0,0,2,-1,
	gTYPE_MAPPING
,
	gT_MAPPING
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,138,
	gDEFAULT_NONE
},

163 {"m≠p",
	gF_MAPP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

164 {"max",
	gF_MAX
,0,0,1,2,
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,39,
	gDEFAULT_NONE
},

165 {"max_evÆ_co°",
	gF_SET_EVAL_LIMIT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,1},

166 {"md5_hexdige°",
	gF_MD5_HEXDIGEST
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

167 {"membî_¨øy",
	gF_MEMBER_ARRAY
,0,0,2,3,
	gTYPE_NUMBER
,
	gT_ANY
,
	gT_STRING
|
	gT_ARRAY
,
	gT_NUMBER
,T_ANY,36,
	gDEFAULT_NONE
},

168 {"mem‹y_öfo",
	gF_MEMORY_INFO
,0,0,0,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_NONE
},

169 {"mö",
	gF_MIN
,0,0,1,2,
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,39,
	gDEFAULT_NONE
},

170 {"mkdú",
	gF_MKDIR
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

171 {"mysql_˛o£",
	gF_MYSQL_CLOSE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

172 {"mysql_c⁄√˘",
	gF_MYSQL_CONNECT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ARRAY
,
	gT_ANY
,T_ANY,T_ANY,5,
	gDEFAULT_NONE
},

173 {"mysql_execuã",
	gF_MYSQL_EXECUTE
,0,0,2,2,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,18,
	gDEFAULT_NONE
},

174 {"√w_ôem",
	gF_NEW_ITEM
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

175 {"√w_≈c",
	gF_NEW_NPC
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

176 {"√w_summ⁄",
	gF_NEW_SUMMON
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

177 {"√w_ãam",
	gF_NEW_TEAM
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

178 {"√xt_bô",
	gF_NEXT_BIT
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,
	gDEFAULT_NONE
},

179 {"nuŒp",
	gF_UNDEFINEDP
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

180 {"obje˘p",
	gF_OBJECTP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

181 {"obje˘s",
	gF_OBJECTS
,0,0,0,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,119,
	gDEFAULT_NONE
},

182 {"os_comm™d",
	gF_OS_COMMAND
,0,0,3,3,
	gTYPE_NOVALUE
,
	gT_STRING
,T_STRING,T_STRING,
	gT_ANY
,43,
	gDEFAULT_NONE
},

183 {"poöãΩ",
	gF_POINTERP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

184 {"pow",
	gF_POW
,0,0,2,2,
	gTYPE_REAL
,
	gT_REAL
,T_REAL,
	gT_ANY
,T_ANY,298,
	gDEFAULT_NONE
},

185 {"¥evious_obje˘",
	gF_PREVIOUS_OBJECT
,0,0,1,1,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

186 {"¥ogøm_öfo",
	gF_PROGRAM_INFO
,0,0,0,1,
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_NONE
},

187 {"py°r2Õc",
	gF_PYSTR2LPC
,0,0,1,1,
	gTYPE_ANY
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

188 {"quîy_lﬂd_avîage",
	gF_QUERY_LOAD_AVERAGE
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

189 {"øndom",
	gF_RANDOM
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

190 {"ªad_buf„r",
	gF_READ_BUFFER
,0,0,1,3,
	gTYPE_ANY
,
	gT_STRING
|
	gT_BUFFER
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,67,
	gDEFAULT_NONE
},

191 {"ªad_byãs",
	gF_READ_BYTES
,0,0,1,3,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,107,
	gDEFAULT_NONE
},

192 {"ªad_fûe",
	gF_READ_FILE
,0,0,1,3,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,107,
	gDEFAULT_NONE
},

193 {"ª˛aim_obje˘s",
	gF_RECLAIM_OBJECTS
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

194 {"ªfs",
	gF_REFS
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

195 {"ªgexp",
	gF_REGEXP
,0,0,2,3,
	gTYPE_ANY
,
	gT_STRING
|
	gT_ARRAY
,T_STRING,
	gT_NUMBER
,
	gT_ANY
,87,
	gDEFAULT_NONE
},

196 {"ªmove_ˇŒ_out",
	gF_REMOVE_CALL_OUT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

197 {"ª«me",
	gF_RENAME
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,25,
	gDEFAULT_NONE
},

198 {"ª≥©_°rög",
	gF_REPEAT_STRING
,0,0,2,2,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,
	gDEFAULT_NONE
},

199 {"ª∂a˚_¥ogøm",
	gF_REPLACE_PROGRAM
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

200 {"ª∂a˚_°rög",
	gF_REPLACE_STRING
,0,0,3,-1,
	gTYPE_STRING
,
	gT_STRING
,T_STRING,T_STRING,
	gT_ANY
,43,
	gDEFAULT_NONE
},

201 {"ª∂a˚_°rög_ªg",
	gF_REPLACE_STRING_REG
,0,0,3,3,
	gTYPE_STRING
,
	gT_STRING
,T_STRING,T_STRING,
	gT_ANY
,43,
	gDEFAULT_NONE
},

202 {"ª∂a˚abÀ",
	gF_REPLACEABLE
,0,0,1,2,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ARRAY
,
	gT_ANY
,T_ANY,263,
	gDEFAULT_NONE
},

203 {"ª£t_evÆ_co°",
	gF_SET_EVAL_LIMIT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

204 {"ª°‹e_ôem",
	gF_RESTORE_ITEM
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,152,
	gDEFAULT_NONE
},

205 {"ª°‹e_≈c",
	gF_RESTORE_NPC
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,152,
	gDEFAULT_NONE
},

206 {"ª°‹e_obje˘",
	gF_RESTORE_OBJECT
,0,0,1,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,
	gDEFAULT_NONE
},

207 {"ª°‹e_summ⁄",
	gF_RESTORE_SUMMON
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,152,
	gDEFAULT_NONE
},

208 {"rm",
	gF_RM
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

209 {"rmdú",
	gF_RMDIR
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

210 {"ßve_obje˘",
	gF_SAVE_OBJECT
,0,0,1,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,
	gDEFAULT_NONE
},

211 {"£t_bô",
	gF_SET_BIT
,0,0,2,2,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,
	gDEFAULT_NONE
},

212 {"£t_ef„˘_≈c",
	gF_SET_EFFECT_NPC
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,T_ANY,57,
	gDEFAULT_NONE
},

213 {"£t_evÆ_limô",
	gF_SET_EVAL_LIMIT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

214 {"£t_≈c_cú˛e_fõld",
	gF_SET_NPC_CIRCLE_FIELD
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,T_ANY,57,
	gDEFAULT_NONE
},

215 {"£t_≈c_fightid",
	gF_SET_NPC_FIGHTID
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,T_ANY,57,
	gDEFAULT_NONE
},

216 {"£t_≈c_m≠",
	gF_SET_NPC_MAP
,0,0,3,3,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_MAPPING
,T_NUMBER,
	gT_ANY
,251,
	gDEFAULT_NONE
},

217 {"£t_≈c_°©us",
	gF_SET_NPC_STATUS
,0,0,4,4,
	gTYPE_NOVALUE
,
	gT_NUMBER
,T_NUMBER,T_NUMBER,T_NUMBER,192,
	gDEFAULT_NONE
},

218 {"shÆlow_öhîô_li°",
	gF_SHALLOW_INHERIT_LIST
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_THIS_OBJECT
},

219 {"shutdown",
	gF_SHUTDOWN
,0,0,0,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

220 {"sö",
	gF_SIN
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

221 {"sizeof",
	gF_SIZEOF
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

222 {"sockë_ac˚±",
	gF_SOCKET_ACCEPT
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,T_STRING|T_FUNCTION,
	gT_ANY
,271,
	gDEFAULT_NONE
},

223 {"sockë_addªss",
	gF_SOCKET_ADDRESS
,0,0,1,1,
	gTYPE_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

224 {"sockë_böd_™d_li°í",
	gF_SOCKET_BIND_AND_LISTEN
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_NUMBER
,T_NUMBER,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,196,
	gDEFAULT_NONE
},

225 {"sockë_˛o£",
	gF_SOCKET_CLOSE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

226 {"sockë_c⁄√˘",
	gF_SOCKET_CONNECT
,0,0,4,4,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_STRING
,T_STRING|
	gT_FUNCTION
,T_STRING|T_FUNCTION,279,
	gDEFAULT_NONE
},

227 {"sockë_¸óã",
	gF_SOCKET_CREATE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,T_ANY,31,
	gDEFAULT_NONE
},

228 {"sockë_wrôe",
	gF_SOCKET_WRITE
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,247,
	gDEFAULT_NONE
},

229 {"s‹t_¨øy",
	gF_SORT_ARRAY
,0,0,2,-1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_NUMBER
|
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,124,
	gDEFAULT_NONE
},

230 {"•rötf",
	gF_SPRINTF
,0,0,1,-1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

231 {"sqπ",
	gF_SQRT
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

232 {"°©",
	gF_STAT
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,0},

233 {"°‹e_v¨übÀ",
	gF_STORE_VARIABLE
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,267,
	gDEFAULT_NONE
},

234 {"°rcmp",
	gF_STRCMP
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,25,
	gDEFAULT_NONE
},

235 {"°rögp",
	gF_STRINGP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

236 {"°æí",
	gF_SIZEOF
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

237 {"°r§ch",
	gF_STRSRCH
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING|
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,54,0},

238 {"sub°r",
	gF_SUBSTR
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING|
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,54,0},

239 {"èn",
	gF_TAN
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,296,
	gDEFAULT_NONE
},

240 {"ã°_bô",
	gF_TEST_BIT
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,50,
	gDEFAULT_NONE
},

241 {"this_obje˘",
	gF_THIS_OBJECT
,0,0,0,0,
	gTYPE_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

242 {"throw",
	gF_THROW
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

243 {"time",
	gF_TIME
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

244 {"to_Êﬂt",
	gF_TO_FLOAT
,0,0,1,1,
	gTYPE_REAL
,
	gT_STRING
|
	gT_REAL
|
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,16,
	gDEFAULT_NONE
},

245 {"to_öt",
	gF_TO_INT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_REAL
|
	gT_NUMBER
|
	gT_BUFFER
,
	gT_ANY
,T_ANY,T_ANY,11,
	gDEFAULT_NONE
},

246 {"ty≥of",
	gF_TYPEOF
,0,0,1,1,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

247 {"undeföedp",
	gF_UNDEFINEDP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

248 {"unique_m≠pög",
	gF_UNIQUE_MAPPING
,0,0,2,-1,
	gTYPE_MAPPING
,
	gT_ARRAY
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,131,
	gDEFAULT_NONE
},

249 {"upd©e_Õc_obje˘",
	gF_UPDATE_LPC_OBJECT
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_NONE
},

250 {"upd©e_max_logö",
	gF_UPDATE_MAX_LOGIN
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

251 {"uµî_ˇ£",
	gF_UPPER_CASE
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

252 {"u±ime",
	gF_UPTIME
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

253 {"u£r_¸óã",
	gF_USER_CREATE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

254 {"u£r_de°roy",
	gF_USER_DESTROY
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

255 {"vÆues",
	gF_VALUES
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,61,
	gDEFAULT_NONE
},

256 {"v¨übÀs",
	gF_VARIABLES
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,115,0},

257 {"wrôe_buf„r",
	gF_WRITE_BUFFER
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_BUFFER
,
	gT_NUMBER
,T_STRING|T_BUFFER|T_NUMBER,
	gT_ANY
,74,
	gDEFAULT_NONE
},

258 {"wrôe_byãs",
	gF_WRITE_BYTES
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,T_STRING|
	gT_BUFFER
,
	gT_ANY
,100,
	gDEFAULT_NONE
},

259 {"wrôe_fûe",
	gF_WRITE_FILE
,0,0,2,3,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_NUMBER
,
	gT_ANY
,94,
	gDEFAULT_NONE
},

262 
	gefun_¨g_ty≥s
[] = {

263 
TYPE_OBJECT
,
TYPE_STRING
,
TYPE_MOD_ARRAY
|TYPE_OBJECT,0,

264 
TYPE_STRING
,
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

266 
TYPE_ANY
,0,

268 
TYPE_STRING
,
TYPE_REAL
,
TYPE_NUMBER
,
TYPE_BUFFER
,0,

269 
TYPE_STRING
,
TYPE_REAL
,
TYPE_NUMBER
,0,

270 
TYPE_STRING
,0,

272 
TYPE_OBJECT
,0,

273 
TYPE_STRING
,0,

274 
TYPE_STRING
,0,

275 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

276 
TYPE_STRING
,
TYPE_FUNCTION
,0,

277 
TYPE_ANY
,0,

278 
TYPE_ANY
,0,

279 
TYPE_STRING
,
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

280 
TYPE_NUMBER
,0,

281 
TYPE_STRING
,0,

282 
TYPE_STRING
,0,

283 
TYPE_STRING
,0,

285 
TYPE_STRING
,0,

286 
TYPE_NUMBER
,0,

287 
TYPE_STRING
,0,

288 
TYPE_STRING
,
TYPE_NUMBER
,0,

289 
TYPE_NUMBER
,0,

290 
TYPE_MAPPING
,0,

291 
TYPE_MAPPING
,0,

292 
TYPE_ANY
,0,

293 
TYPE_STRING
,
TYPE_BUFFER
,0,

294 
TYPE_NUMBER
,0,

295 
TYPE_NUMBER
,0,

296 
TYPE_STRING
,
TYPE_BUFFER
,0,

297 
TYPE_NUMBER
,0,

298 
TYPE_STRING
,
TYPE_BUFFER
,
TYPE_NUMBER
,0,

299 
TYPE_STRING
,0,

300 
TYPE_OBJECT
,0,

301 
TYPE_STRING
,
TYPE_MOD_ARRAY
|TYPE_STRING,0,

302 
TYPE_STRING
,0,

303 
TYPE_NUMBER
,0,

304 
TYPE_STRING
,0,

305 
TYPE_STRING
,0,

306 
TYPE_NUMBER
,0,

307 
TYPE_STRING
,0,

308 
TYPE_NUMBER
,0,

309 
TYPE_STRING
,
TYPE_BUFFER
,0,

310 
TYPE_STRING
,0,

311 
TYPE_NUMBER
,0,

312 
TYPE_NUMBER
,0,

313 
TYPE_STRING
,0,

314 
TYPE_OBJECT
,0,

315 
TYPE_NUMBER
,0,

316 
TYPE_STRING
,
TYPE_FUNCTION
,0,

317 
TYPE_OBJECT
,0,

318 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

319 
TYPE_NUMBER
,
TYPE_STRING
,
TYPE_FUNCTION
,0,

321 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

322 
TYPE_STRING
,
TYPE_FUNCTION
,0,

324 
TYPE_MOD_ARRAY
|
TYPE_ANY
,
TYPE_MAPPING
,0,

325 
TYPE_STRING
,
TYPE_FUNCTION
,0,

327 
TYPE_STRING
,
TYPE_MAPPING
,
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

328 
TYPE_STRING
,
TYPE_FUNCTION
,0,

330 
TYPE_STRING
,0,

331 
TYPE_MAPPING
,0,

332 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

333 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

334 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

335 
TYPE_MAPPING
,0,

336 
TYPE_FUNCTION
,0,

337 
TYPE_ANY
,0,

338 
TYPE_NUMBER
,
TYPE_MOD_ARRAY
|TYPE_NUMBER,0,

339 
TYPE_NUMBER
,0,

341 
TYPE_NUMBER
,0,

342 
TYPE_NUMBER
,0,

344 
TYPE_NUMBER
,0,

345 
TYPE_NUMBER
,0,

346 
TYPE_NUMBER
,0,

348 
TYPE_MOD_ARRAY
|
TYPE_MAPPING
,0,

349 
TYPE_STRING
,0,

350 
TYPE_STRING
,0,

351 
TYPE_NUMBER
,0,

352 
TYPE_NUMBER
,0,

353 
TYPE_NUMBER
,0,

354 
TYPE_NUMBER
,0,

355 
TYPE_STRING
,
TYPE_FUNCTION
,0,

356 
TYPE_NUMBER
,0,

358 
TYPE_MAPPING
,0,

359 
TYPE_BUFFER
,0,

360 
TYPE_MAPPING
,0,

361 
TYPE_NUMBER
,0,

362 
TYPE_NUMBER
,
TYPE_STRING
,0,

363 
TYPE_OBJECT
,0,

364 
TYPE_NUMBER
,
TYPE_STRING
,0,

365 
TYPE_NUMBER
,0,

366 
TYPE_NUMBER
,0,

367 
TYPE_NUMBER
,
TYPE_STRING
,0,

368 
TYPE_OBJECT
,0,

369 
TYPE_NUMBER
,0,

370 
TYPE_NUMBER
,
TYPE_STRING
,0,

371 
TYPE_OBJECT
,0,

372 
TYPE_STRING
,0,

373 
TYPE_OBJECT
,0,

374 
TYPE_BUFFER
,0,

375 
TYPE_NUMBER
,0,

376 
TYPE_STRING
,
TYPE_NUMBER
,0,

377 
TYPE_ANY
,0,

378 
TYPE_NUMBER
,0,

379 
TYPE_MAPPING
,0,

380 
TYPE_NUMBER
,0,

381 
TYPE_STRING
,0,

382 
TYPE_FUNCTION
,0,

383 
TYPE_ANY
,0,

384 
TYPE_OBJECT
,0,

385 
TYPE_MOD_ARRAY
|
TYPE_STRING
,0,

386 
TYPE_STRING
,0,

387 
TYPE_ANY
,0,

388 
TYPE_NUMBER
,0,

389 
TYPE_STRING
,
TYPE_FUNCTION
,0,

390 
TYPE_STRING
,
TYPE_FUNCTION
,0,

391 
TYPE_NUMBER
,0,

392 
TYPE_STRING
,0,

393 
TYPE_STRING
,
TYPE_FUNCTION
,0,

394 
TYPE_STRING
,
TYPE_FUNCTION
,0,

395 
TYPE_NUMBER
,0,

396 
TYPE_OBJECT
,0,

397 
TYPE_OBJECT
,0,

399 
TYPE_REAL
,0,

400 
TYPE_REAL
,0,

401 
TYPE_REAL
,0,

	@grammar/efun_protos.h

6 
f_to_öt
 ();

7 
f_to_Êﬂt
 ();

8 
f_¥evious_obje˘
 ();

9 
f_ˇŒ_°ack
 ();

10 
f_sizeof
 ();

11 
f_de°ru˘
 ();

12 
f_fûe_«me
 ();

13 
f_øndom
 ();

14 
f_lowî_ˇ£
 ();

15 
f_Æloˇã_m≠pög
 ();

16 
f_vÆues
 ();

17 
f_keys
 ();

18 
f_˛⁄ï
 ();

19 
f_öç
 ();

20 
f_undeföedp
 ();

21 
f_Êﬂç
 ();

22 
f_°rögp
 ();

23 
f_fun˘i⁄p
 ();

24 
f_poöãΩ
 ();

25 
f_obje˘p
 ();

26 
f_˛as•
 ();

27 
f_ty≥of
 ();

28 
f_buf„Ω
 ();

29 
f_ª∂a˚_¥ogøm
 ();

30 
f_Æloˇã
 ();

31 
f_fûe_size
 ();

32 
f_mkdú
 ();

33 
f_rm
 ();

34 
f_rmdú
 ();

35 
f_md5_hexdige°
 ();

36 
f_˘ime
 ();

37 
f_loˇ…ime
 ();

38 
f_throw
 ();

39 
f_dìp_öhîô_li°
 ();

40 
f_shÆlow_öhîô_li°
 ();

41 
f_m≠p
 ();

42 
f_chûdªn
 ();

43 
f_îr‹
 ();

44 
f_£t_evÆ_limô
 ();

45 
f_keys_by_vÆue
 ();

46 
f_Õc_gc
 ();

47 
f_mysql_c⁄√˘
 ();

48 
f_mysql_˛o£
 ();

49 
f_curs‹_˛o£
 ();

50 
f_curs‹_„tch
 ();

51 
f_Õc2py°r
 ();

52 
f_py°r2Õc
 ();

53 
f_fs_ª°‹e_‰om_fûe
 ();

54 
f_fs_uæ_ícode_m≠
 ();

55 
f_fs_uæ_ícode
 ();

56 
f_fs_uæ_decode
 ();

57 
f_fs_is_uid_c⁄√˘ed
 ();

58 
f_fs_˛o£_uid_c⁄√˘i⁄
 ();

59 
f_fs_˛o£_vfd_c⁄√˘i⁄
 ();

60 
f_fs_gë_vfd_by_uid
 ();

61 
f_fs_gë_uid_by_vfd
 ();

62 
f_fs_gë_ù_by_vfd
 ();

63 
f_fs_œ°_±o_time°amp
 ();

64 
f_fs_ex˛ude_°©s_±o
 ();

65 
f_fs_vÆid©i⁄_°¨t
 ();

66 
f_ªmove_ˇŒ_out
 ();

67 
f_fs_íabÀ_dúty_obje˘
 ();

68 
f_fs_íabÀ_dúty_m≠
 ();

69 
f_fs_m¨shÆ_dúty_m≠
 ();

70 
f_fs_m¨shÆ_m≠
 ();

71 
f_fs_m¨shÆ_dúty_obje˘
 ();

72 
f_u£r_¸óã
 ();

73 
f_u£r_de°roy
 ();

74 
f_gamed_˛o£_uid_c⁄√˘i⁄
 ();

75 
f_fs_ßve_Æl_u£r
 ();

76 
f_fs_db_sync
 ();

77 
f_fs_db_obje˘_u∆ﬂd
 ();

78 
f_gë_u£r
 ();

79 
f_is_⁄löe
 ();

80 
f_logout
 ();

81 
f_upd©e_max_logö
 ();

82 
f_gë_Æl_u£rs
 ();

83 
f_√w_ôem
 ();

84 
f_is_ôem_⁄löe
 ();

85 
f_de°roy_ôem
 ();

86 
f_√w_≈c
 ();

87 
f_de°roy_≈c
 ();

88 
f_is_≈c_⁄löe
 ();

89 
f_gë_≈c_obje˘
 ();

90 
f_gë_≈c_pos
 ();

91 
f_gë_≈c_cú˛e_fõld
 ();

92 
f_gë_≈c_fightid
 ();

93 
f_gë_≈c_°©us
 ();

94 
f_√w_summ⁄
 ();

95 
f_de°roy_summ⁄
 ();

96 
f_is_summ⁄_⁄löe
 ();

97 
f_gë_ãam_m≠
 ();

98 
f_dismiss_ãam
 ();

99 
f_upd©e_Õc_obje˘
 ();

100 
f_íabÀ_log_±o
 ();

101 
f__
 ();

102 
f_c›y
 ();

103 
f_fûe_Àngth
 ();

104 
f_uµî_ˇ£
 ();

105 
f_„tch_v¨übÀ
 ();

106 
f_fun˘i⁄_ow√r
 ();

107 
f_sockë_¸óã
 ();

108 
f_sockë_˛o£
 ();

109 
f_sockë_addªss
 ();

110 
f_ªfs
 ();

111 
f_cos
 ();

112 
f_sö
 ();

113 
f_èn
 ();

114 
f_asö
 ();

115 
f_acos
 ();

116 
f_©™
 ();

117 
f_sqπ
 ();

118 
f_log
 ();

119 
f_exp
 ();

120 
f_Êo‹
 ();

121 
f_˚û
 ();

122 
f_ˇŒ_Ÿhî
 ();

123 
f_evÆu©e
 ();

124 
f_this_obje˘
 ();

125 
f_˛⁄e_obje˘
 ();

126 
f_ex∂ode
 ();

127 
f_im∂ode
 ();

128 
f_membî_¨øy
 ();

129 
f_ª∂a˚_°rög
 ();

130 
f_ª∂a˚_°rög_ªg
 ();

131 
f_ª°‹e_obje˘
 ();

132 
f_ßve_obje˘
 ();

133 
f_gë_dú
 ();

134 
f_°r§ch
 ();

135 
f_sub°r
 ();

136 
f_föd_obje˘
 ();

137 
f_m≠_dñëe
 ();

138 
f_Æloˇã_buf„r
 ();

139 
f_ªad_buf„r
 ();

140 
f_wrôe_buf„r
 ();

141 
f_öhîôs
 ();

142 
f_ªgexp
 ();

143 
f_wrôe_fûe
 ();

144 
f_ª«me
 ();

145 
f_wrôe_byãs
 ();

146 
f_ªad_byãs
 ();

147 
f_ªad_fûe
 ();

148 
f_˝
 ();

149 
f_˛ór_bô
 ();

150 
f_ã°_bô
 ();

151 
f_£t_bô
 ();

152 
f_√xt_bô
 ();

153 
f_¸y±
 ();

154 
f_fun˘i⁄_exi°s
 ();

155 
f_obje˘s
 ();

156 
f_s‹t_¨øy
 ();

157 
f_time
 ();

158 
f_unique_m≠pög
 ();

159 
f_•rötf
 ();

160 
f_°©
 ();

161 
f_mem‹y_öfo
 ();

162 
f_u±ime
 ();

163 
f_°rcmp
 ();

164 
f_fûãr
 ();

165 
f_m≠
 ();

166 
f_mÆloc_°©us
 ();

167 
f_dum∑Œobj
 ();

168 
f_dump_fûe_des¸ùt‹s
 ();

169 
f_quîy_lﬂd_avîage
 ();

170 
f_ª˛aim_obje˘s
 ();

171 
f_shutdown
 ();

172 
f_os_comm™d
 ();

173 
f_gë_c⁄fig_fûe
 ();

174 
f_is_auth_£rvî
 ();

175 
f_fs_mem‹y_öfo
 ();

176 
f_mysql_execuã
 ();

177 
f_fs_ßve_to_fûe
 ();

178 
f_fs_hâp_ªque°
 ();

179 
f_fs_cuæ_ªque°
 ();

180 
f_fs_√w_u£r
 ();

181 
f_fs_Ωc_ˇŒ
 ();

182 
f_fs_Ωc_ˇŒ_lo›
 ();

183 
f_fs_Ωc_x_ˇŒ
 ();

184 
f_fs_Ωc_make_cfg
 ();

185 
f_fs_£t_vÆid©i⁄
 ();

186 
f_maö_lo›
 ();

187 
f_ˇŒ_out
 ();

188 
f_fs_mîge_dúty_m≠
 ();

189 
f_fs_mîge_dúty_obje˘
 ();

190 
f_fs_ßve_Æl_d©
 ();

191 
f_fs_db_gamed_exô
 ();

192 
f_fs_db_obje˘_√w
 ();

193 
f_fs_db_obje˘_lﬂd
 ();

194 
f_fs_db_obje˘_ßve
 ();

195 
f_fs_db_obje˘_ª«me
 ();

196 
f_fs_db_obje˘_ª°‹e
 ();

197 
f_fs_dúty_mem_poﬁ_°©
 ();

198 
f_gë_⁄löe_cou¡
 ();

199 
f_ª°‹e_ôem
 ();

200 
f_gë_ôem_m≠
 ();

201 
f_SëIãmTemp
 ();

202 
f_GëIãmTemp
 ();

203 
f_SëIãmSave
 ();

204 
f_GëIãmSave
 ();

205 
f_ª°‹e_≈c
 ();

206 
f_SëNpc
 ();

207 
f_GëNpc
 ();

208 
f_SëNpcSave
 ();

209 
f_GëNpcSave
 ();

210 
f_£t_≈c_cú˛e_fõld
 ();

211 
f_ö_≈c_fõld
 ();

212 
f_gë_≈c_m≠
 ();

213 
f_£t_≈c_m≠
 ();

214 
f_£t_≈c_fightid
 ();

215 
f_£t_≈c_°©us
 ();

216 
f_£t_ef„˘_≈c
 ();

217 
f_gë_summ⁄_m≠
 ();

218 
f_ª°‹e_summ⁄
 ();

219 
f_SëSumm⁄Temp
 ();

220 
f_GëSumm⁄Temp
 ();

221 
f_SëSumm⁄Save
 ();

222 
f_GëSumm⁄Save
 ();

223 
f_√w_ãam
 ();

224 
f_dump_mem‹y_poﬁ
 ();

225 
f_gë_time_of_day
 ();

226 
f_fs_ic⁄v
 ();

227 
f_fs_dns_ªsﬁve
 ();

228 
f_öô_gëãxt
 ();

229 
f_fun˘i⁄s
 ();

230 
f_v¨übÀs
 ();

231 
f_ª∂a˚abÀ
 ();

232 
f_¥ogøm_öfo
 ();

233 
f_°‹e_v¨übÀ
 ();

234 
f_debug_mesßge
 ();

235 
f_ª≥©_°rög
 ();

236 
f_sockë_böd_™d_li°í
 ();

237 
f_sockë_ac˚±
 ();

238 
f_sockë_c⁄√˘
 ();

239 
f_sockë_wrôe
 ();

240 
f_dump_sockë_°©us
 ();

241 
f_debug_öfo
 ();

242 
f_dump_¥og
 ();

243 
f_pow
 ();

244 
f_max
 ();

245 
f_mö
 ();

	@grammar/efunctions.h

7 
	~"efun_¥Ÿos.h
"

10 (*
	tfunc_t
) ();

12 
func_t
 
efun_èbÀ
[] = {

13 
f_to_öt
,

14 
f_to_Êﬂt
,

15 
f_¥evious_obje˘
,

16 
f_ˇŒ_°ack
,

17 
f_sizeof
,

18 
f_de°ru˘
,

19 
f_fûe_«me
,

20 
f_øndom
,

21 
f_lowî_ˇ£
,

22 
f_Æloˇã_m≠pög
,

23 
f_vÆues
,

24 
f_keys
,

25 
f_˛⁄ï
,

26 
f_öç
,

27 
f_undeföedp
,

28 
f_Êﬂç
,

29 
f_°rögp
,

30 
f_fun˘i⁄p
,

31 
f_poöãΩ
,

32 
f_obje˘p
,

33 
f_˛as•
,

34 
f_ty≥of
,

35 
f_buf„Ω
,

36 
f_ª∂a˚_¥ogøm
,

37 
f_Æloˇã
,

38 
f_fûe_size
,

39 
f_mkdú
,

40 
f_rm
,

41 
f_rmdú
,

42 
f_md5_hexdige°
,

43 
f_˘ime
,

44 
f_loˇ…ime
,

45 
f_throw
,

46 
f_dìp_öhîô_li°
,

47 
f_shÆlow_öhîô_li°
,

48 
f_m≠p
,

49 
f_chûdªn
,

50 
f_îr‹
,

51 
f_£t_evÆ_limô
,

52 
f_keys_by_vÆue
,

53 
f_Õc_gc
,

54 
f_mysql_c⁄√˘
,

55 
f_mysql_˛o£
,

56 
f_curs‹_˛o£
,

57 
f_curs‹_„tch
,

58 
f_Õc2py°r
,

59 
f_py°r2Õc
,

60 
f_fs_ª°‹e_‰om_fûe
,

61 
f_fs_uæ_ícode_m≠
,

62 
f_fs_uæ_ícode
,

63 
f_fs_uæ_decode
,

64 
f_fs_is_uid_c⁄√˘ed
,

65 
f_fs_˛o£_uid_c⁄√˘i⁄
,

66 
f_fs_˛o£_vfd_c⁄√˘i⁄
,

67 
f_fs_gë_vfd_by_uid
,

68 
f_fs_gë_uid_by_vfd
,

69 
f_fs_gë_ù_by_vfd
,

70 
f_fs_œ°_±o_time°amp
,

71 
f_fs_ex˛ude_°©s_±o
,

72 
f_fs_vÆid©i⁄_°¨t
,

73 
f_ªmove_ˇŒ_out
,

74 
f_fs_íabÀ_dúty_obje˘
,

75 
f_fs_íabÀ_dúty_m≠
,

76 
f_fs_m¨shÆ_dúty_m≠
,

77 
f_fs_m¨shÆ_m≠
,

78 
f_fs_m¨shÆ_dúty_obje˘
,

79 
f_u£r_¸óã
,

80 
f_u£r_de°roy
,

81 
f_gamed_˛o£_uid_c⁄√˘i⁄
,

82 
f_fs_ßve_Æl_u£r
,

83 
f_fs_db_sync
,

84 
f_fs_db_obje˘_u∆ﬂd
,

85 
f_gë_u£r
,

86 
f_is_⁄löe
,

87 
f_logout
,

88 
f_upd©e_max_logö
,

89 
f_gë_Æl_u£rs
,

90 
f_√w_ôem
,

91 
f_is_ôem_⁄löe
,

92 
f_de°roy_ôem
,

93 
f_√w_≈c
,

94 
f_de°roy_≈c
,

95 
f_is_≈c_⁄löe
,

96 
f_gë_≈c_obje˘
,

97 
f_gë_≈c_pos
,

98 
f_gë_≈c_cú˛e_fõld
,

99 
f_gë_≈c_fightid
,

100 
f_gë_≈c_°©us
,

101 
f_√w_summ⁄
,

102 
f_de°roy_summ⁄
,

103 
f_is_summ⁄_⁄löe
,

104 
f_gë_ãam_m≠
,

105 
f_dismiss_ãam
,

106 
f_upd©e_Õc_obje˘
,

107 
f_íabÀ_log_±o
,

108 
f__
,

109 
f_c›y
,

110 
f_fûe_Àngth
,

111 
f_uµî_ˇ£
,

112 
f_„tch_v¨übÀ
,

113 
f_fun˘i⁄_ow√r
,

114 
f_sockë_¸óã
,

115 
f_sockë_˛o£
,

116 
f_sockë_addªss
,

117 
f_ªfs
,

118 
f_cos
,

119 
f_sö
,

120 
f_èn
,

121 
f_asö
,

122 
f_acos
,

123 
f_©™
,

124 
f_sqπ
,

125 
f_log
,

126 
f_exp
,

127 
f_Êo‹
,

128 
f_˚û
,

129 
f_ˇŒ_Ÿhî
,

130 
f_evÆu©e
,

131 
f_this_obje˘
,

132 
f_˛⁄e_obje˘
,

133 
f_ex∂ode
,

134 
f_im∂ode
,

135 
f_membî_¨øy
,

136 
f_ª∂a˚_°rög
,

137 
f_ª∂a˚_°rög_ªg
,

138 
f_ª°‹e_obje˘
,

139 
f_ßve_obje˘
,

140 
f_gë_dú
,

141 
f_°r§ch
,

142 
f_sub°r
,

143 
f_föd_obje˘
,

144 
f_m≠_dñëe
,

145 
f_Æloˇã_buf„r
,

146 
f_ªad_buf„r
,

147 
f_wrôe_buf„r
,

148 
f_öhîôs
,

149 
f_ªgexp
,

150 
f_wrôe_fûe
,

151 
f_ª«me
,

152 
f_wrôe_byãs
,

153 
f_ªad_byãs
,

154 
f_ªad_fûe
,

155 
f_˝
,

156 
f_˛ór_bô
,

157 
f_ã°_bô
,

158 
f_£t_bô
,

159 
f_√xt_bô
,

160 
f_¸y±
,

161 
f_fun˘i⁄_exi°s
,

162 
f_obje˘s
,

163 
f_s‹t_¨øy
,

164 
f_time
,

165 
f_unique_m≠pög
,

166 
f_•rötf
,

167 
f_°©
,

168 
f_mem‹y_öfo
,

169 
f_u±ime
,

170 
f_°rcmp
,

171 
f_fûãr
,

172 
f_m≠
,

173 
f_mÆloc_°©us
,

174 
f_dum∑Œobj
,

175 
f_dump_fûe_des¸ùt‹s
,

176 
f_quîy_lﬂd_avîage
,

177 
f_ª˛aim_obje˘s
,

178 
f_shutdown
,

179 
f_os_comm™d
,

180 
f_gë_c⁄fig_fûe
,

181 
f_is_auth_£rvî
,

182 
f_fs_mem‹y_öfo
,

183 
f_mysql_execuã
,

184 
f_fs_ßve_to_fûe
,

185 
f_fs_hâp_ªque°
,

186 
f_fs_cuæ_ªque°
,

187 
f_fs_√w_u£r
,

188 
f_fs_Ωc_ˇŒ
,

189 
f_fs_Ωc_ˇŒ_lo›
,

190 
f_fs_Ωc_x_ˇŒ
,

191 
f_fs_Ωc_make_cfg
,

192 
f_fs_£t_vÆid©i⁄
,

193 
f_maö_lo›
,

194 
f_ˇŒ_out
,

195 
f_fs_mîge_dúty_m≠
,

196 
f_fs_mîge_dúty_obje˘
,

197 
f_fs_ßve_Æl_d©
,

198 
f_fs_db_gamed_exô
,

199 
f_fs_db_obje˘_√w
,

200 
f_fs_db_obje˘_lﬂd
,

201 
f_fs_db_obje˘_ßve
,

202 
f_fs_db_obje˘_ª«me
,

203 
f_fs_db_obje˘_ª°‹e
,

204 
f_fs_dúty_mem_poﬁ_°©
,

205 
f_gë_⁄löe_cou¡
,

206 
f_ª°‹e_ôem
,

207 
f_gë_ôem_m≠
,

208 
f_SëIãmTemp
,

209 
f_GëIãmTemp
,

210 
f_SëIãmSave
,

211 
f_GëIãmSave
,

212 
f_ª°‹e_≈c
,

213 
f_SëNpc
,

214 
f_GëNpc
,

215 
f_SëNpcSave
,

216 
f_GëNpcSave
,

217 
f_£t_≈c_cú˛e_fõld
,

218 
f_ö_≈c_fõld
,

219 
f_gë_≈c_m≠
,

220 
f_£t_≈c_m≠
,

221 
f_£t_≈c_fightid
,

222 
f_£t_≈c_°©us
,

223 
f_£t_ef„˘_≈c
,

224 
f_gë_summ⁄_m≠
,

225 
f_ª°‹e_summ⁄
,

226 
f_SëSumm⁄Temp
,

227 
f_GëSumm⁄Temp
,

228 
f_SëSumm⁄Save
,

229 
f_GëSumm⁄Save
,

230 
f_√w_ãam
,

231 
f_dump_mem‹y_poﬁ
,

232 
f_gë_time_of_day
,

233 
f_fs_ic⁄v
,

234 
f_fs_dns_ªsﬁve
,

235 
f_öô_gëãxt
,

236 
f_fun˘i⁄s
,

237 
f_v¨übÀs
,

238 
f_ª∂a˚abÀ
,

239 
f_¥ogøm_öfo
,

240 
f_°‹e_v¨übÀ
,

241 
f_debug_mesßge
,

242 
f_ª≥©_°rög
,

243 
f_sockë_böd_™d_li°í
,

244 
f_sockë_ac˚±
,

245 
f_sockë_c⁄√˘
,

246 
f_sockë_wrôe
,

247 
f_dump_sockë_°©us
,

248 
f_debug_öfo
,

249 
f_dump_¥og
,

250 
f_pow
,

251 
f_max
,

252 
f_mö
,

253 
	}
};

	@grammar/func_spec.c

1 
	~"•ec.h
"

2 
	~"›_•ec.c
"

23 
mixed
 
ˇŒ_Ÿhî
(
obje˘
 | 
°rög
 | object *, string | mixed *,...);

24 
mixed
 
evÆu©e
(mixed, ...);

26 
obje˘
 
this_obje˘
();

28 
to_öt
(
°rög
 | | | 
buf„r
);

29 
to_Êﬂt
(
°rög
 | | );

31 
obje˘
 
˛⁄e_obje˘
(
°rög
, ...);

32 
mixed
 
¥evious_obje˘
(: 0);

33 
obje˘
 *
Æl_¥evious_obje˘s
 
¥evious_obje˘
(: -1);

34 
mixed
 *
ˇŒ_°ack
(: 0);

35 (
	gmixed
);

36 
°æí
 (
	g°rög
);

37 
de°ru˘
(
obje˘
);

38 
°rög
 
fûe_«me
(
obje˘
 : 
F_THIS_OBJECT
);

40 
°rög
 *
ex∂ode
(string, string);

41 
mixed
 
im∂ode
(mixed *, 
°rög
 | 
fun˘i⁄
, | mixed);

43 
membî_¨øy
(
mixed
, 
°rög
 | mixed *, | );

44 
øndom
();

46 
°rög
 
lowî_ˇ£
(string);

47 
°rög
 
ª∂a˚_°rög
(string, string, string,...);

48 
°rög
 
ª∂a˚_°rög_ªg
(string, string, string);

49 
ª°‹e_obje˘
(
°rög
, | );

50 
ßve_obje˘
(
°rög
, | );

54 
mixed
 *
gë_dú
(
°rög
, : 0);

55 
°r§ch
(
°rög
, string | , : 0);

56 
sub°r
(
°rög
, string | , : 0);

58 
obje˘
 
föd_obje˘
(
°rög
, : 0);

59 
obje˘
 
lﬂd_obje˘
 
föd_obje˘
(
°rög
, : 1);

62 
m≠pög
 
Æloˇã_m≠pög
();

63 
mixed
 *
vÆues
(
m≠pög
);

64 
mixed
 *
keys
(
m≠pög
);

65 #ifde‡
COMPAT_32


66 
m≠pög
 
m≠_dñëe
(m≠pög, 
mixed
);

67 
m≠pög
 
m_dñëe
 
m≠_dñëe
(m≠pög, 
mixed
);

68 
mixed
 *
m_vÆues
 
vÆues
(
m≠pög
);

69 
mixed
 *
m_ödi˚s
 
keys
(
m≠pög
);

71 
m≠_dñëe
(
m≠pög
, 
mixed
);

74 
˛⁄ï
(
mixed
 : 
F_THIS_OBJECT
);

75 
öç
(
mixed
);

76 
undeföedp
(
mixed
);

77 
nuŒp
 
undeföedp
(
mixed
);

78 
Êﬂç
(
mixed
);

79 
°rögp
(
mixed
);

81 
fun˘i⁄p
(
mixed
);

82 
poöãΩ
(
mixed
);

83 
¨øyp
 
poöãΩ
(
mixed
);

84 
obje˘p
(
mixed
);

85 
˛as•
(
mixed
);

86 
°rög
 
ty≥of
(
mixed
);

88 #i‚de‡
DISALLOW_BUFFER_TYPE


89 
buf„Ω
(
mixed
);

92 
buf„r
 
Æloˇã_buf„r
(, :0);

93 
mixed
 
ªad_buf„r
(
°rög
 | 
buf„r
, | , | );

94 
wrôe_buf„r
(
°rög
 | 
buf„r
, , string | buffer | );

97 
öhîôs
(
°rög
, 
obje˘
);

98 
ª∂a˚_¥ogøm
(
°rög
);

99 
mixed
 
ªgexp
(
°rög
 | string *, string, | );

101 
mixed
 *
Æloˇã
();

103 
wrôe_fûe
(
°rög
, string, | );

104 
ª«me
(
°rög
, string);

105 
wrôe_byãs
(
°rög
, , såög | 
buf„r
 );

107 
fûe_size
(
°rög
);

108 
°rög
 
ªad_byãs
(string, | , | );

109 
°rög
 
ªad_fûe
(string, | , | );

110 
˝
(
°rög
, string);

112 
mkdú
(
°rög
);

113 
rm
(
°rög
);

114 
rmdú
(
°rög
);

117 
°rög
 
˛ór_bô
(string, );

118 
ã°_bô
(
°rög
, );

119 
°rög
 
£t_bô
(string, );

120 
√xt_bô
(
°rög
, );

122 
°rög
 
¸y±
(string, string | );

123 
°rög
 
md5_hexdige°
(string);

126 
°rög
 
˘ime
();

127 
mixed
 *
loˇ…ime
();

128 
°rög
 
fun˘i⁄_exi°s
(°rög, | 
obje˘
, | );

130 
obje˘
 *
obje˘s
(| 
°rög
 | 
fun˘i⁄
, | object);

134 
mixed
 *
s‹t_¨øy
(mixed *, | 
°rög
 | 
fun˘i⁄
, ...);

135 
throw
(
mixed
);

136 
time
();

137 
m≠pög
 
unique_m≠pög
(
mixed
 *, 
°rög
 | 
fun˘i⁄
, ...);

138 
°rög
 *
dìp_öhîô_li°
(
obje˘
 :
F_THIS_OBJECT
);

139 
°rög
 *
shÆlow_öhîô_li°
(
obje˘
 :
F_THIS_OBJECT
);

140 #ifde‡
COMPAT_32


141 
°rög
 *
öhîô_li°
 
dìp_öhîô_li°
(
obje˘
 :
F_THIS_OBJECT
);

143 
°rög
 *
öhîô_li°
 
shÆlow_öhîô_li°
(
obje˘
 :
F_THIS_OBJECT
);

146 
°rög
 
•rötf
(string,...);

147 
m≠p
(
mixed
);

148 
mixed
 *
°©
(
°rög
, : 0);

150 
mem‹y_öfo
(
obje˘
 | );

153 
obje˘
 *
chûdªn
(
°rög
);

155 
îr‹
(
°rög
);

156 
u±ime
();

157 
°rcmp
(
°rög
, string);

159 #i‡(
deföed
(
RUSAGE
Ë|| deföed(
GET_PROCESS_STATS
Ë|| deföed(
TIMES
)Ë|| deföed(
LATTICE
)

160 
m≠pög
 
rußge
();

163 #ifde‡
CACHE_STATS


164 
°rög
 
ˇche_°©s
();

167 
mixed
 
fûãr
(mixed * | 
m≠pög
, 
°rög
 | 
fun˘i⁄
, ...);

168 
mixed
 
fûãr_¨øy
 
fûãr
(mixed *, 
°rög
 | 
fun˘i⁄
, ...);

169 
m≠pög
 
fûãr_m≠pög
 
fûãr
(m≠pög, 
°rög
 | 
fun˘i⁄
, ...);

171 
mixed
 
m≠
(
°rög
 | 
m≠pög
 | mixed *, såög | 
fun˘i⁄
, ...);

172 
m≠pög
 
m≠_m≠pög
 
m≠
(m≠pög, 
°rög
 | 
fun˘i⁄
, ...);

174 
mixed
 *
m≠_¨øy
 
m≠
(mixed *, 
°rög
 | 
fun˘i⁄
, ...);

176 
°rög
 
mÆloc_°©us
();

177 
dum∑Œobj
(
°rög
 | );

179 
°rög
 
dump_fûe_des¸ùt‹s
();

180 
°rög
 
quîy_lﬂd_avîage
();

186 
ª˛aim_obje˘s
();

188 
£t_evÆ_limô
();

189 
ª£t_evÆ_co°
 
£t_evÆ_limô
(: 0);

190 
evÆ_co°
 
£t_evÆ_limô
(: -1);

191 
max_evÆ_co°
 
£t_evÆ_limô
(: 1);

193 #ifde‡
DEBUG_MACRO


194 
£t_debug_Àvñ
();

197 #i‡
deföed
(
OPCPROF
Ë|| deföed(
OPCPROF_2D
)

198 
›˝rof
(
°rög
 | );

201 #ifde‡
PROFILE_FUNCTIONS


202 
m≠pög
 *
fun˘i⁄_¥ofûe
(
obje˘
 :
F_THIS_OBJECT
);

205 #ifde‡
DEBUG


211 
shutdown
(| );

213 
mixed
* 
keys_by_vÆue
(
m≠pög
);

215 
os_comm™d
(
°rög
, string, string);

217 
°rög
 
gë_c⁄fig_fûe
();

218 
is_auth_£rvî
();

221 
Õc_gc
();

223 
°rög
 
fs_mem‹y_öfo
();

	@grammar/make_func.tab.c

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

71 
	#EDIT_SOURCE


	)

72 
	#NO_OPCODES


	)

73 
	~"°d.h
"

74 
	~"make_func.h
"

75 
	~"Àx.h
"

76 
	~"¥ïro˚ss.h
"

77 
	~"edô_sour˚.h
"

78 
	~<°dlib.h
>

80 #ifde‡
WIN32


81 
	~<¥o˚ss.h
>

84 
	gnum_buff
 = 0;

85 
	g›_code
, 
	gefun_code
, 
	gefun1_code
;

86 *
	g›î_codes
[
MAX_FUNC
];

87 *
	gefun_codes
[
MAX_FUNC
], *
	gefun1_codes
[MAX_FUNC];

88 *
	gefun_«mes
[
MAX_FUNC
], *
	gefun1_«mes
[MAX_FUNC];

89 *
	gkey
[
MAX_FUNC
], *
	gbuf
[MAX_FUNC];

91 
	gmö_¨g
 = -1, 
	glimô_max
 = 0;

97 
	g¨g_ty≥s
[400], 
	gœ°_cuºít_ty≥
;

103 
	gcuº_¨g_ty≥s
[40], 
	gcuº_¨g_ty≥_size
;

105 
	sty≥
 {

106 *
	m«me
;

107 
	mnum
;

108 } 
	gty≥s
[] = {

109 { "void", 
VOID
 },

110 { "öt", 
INT
 },

111 { "°rög", 
STRING
 },

112 { "obje˘", 
OBJECT
 },

113 { "m≠pög", 
MAPPING
 },

114 { "mixed", 
MIXED
 },

115 { "unknown", 
UNKNOWN
 },

116 { "Êﬂt", 
FLOAT
},

117 { "fun˘i⁄", 
FUNCTION
},

118 { "buf„r", 
BUFFER
}

121 
	#NELEMS
(
¨r
Ë(áº / áº[0])

	)

126 #i‚de‡
YYDEBUG


127 
	#YYDEBUG
 0

	)

131 #ifde‡
YYERROR_VERBOSE


132 #unde‡
YYERROR_VERBOSE


133 
	#YYERROR_VERBOSE
 1

	)

135 
	#YYERROR_VERBOSE
 0

	)

139 #i‚de‡
YYTOKEN_TABLE


140 
	#YYTOKEN_TABLE
 0

	)

145 #i‚de‡
YYTOKENTYPE


146 
	#YYTOKENTYPE


	)

149 
	eyytokíty≥
 {

150 
	mID
 = 258,

151 
	mNUM
 = 259,

152 
	mDEFAULT
 = 260,

153 
	mOPERATOR
 = 261

157 
	#ID
 258

	)

158 
	#NUM
 259

	)

159 
	#DEFAULT
 260

	)

160 
	#OPERATOR
 261

	)

165 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


166 
	uYYSTYPE


170 
	mnumbî
;

171 *
	m°rög
;

175 } 
	tYYSTYPE
;

176 
	#YYSTYPE_IS_TRIVIAL
 1

	)

177 
	#yy°y≥
 
YYSTYPE


	)

178 
	#YYSTYPE_IS_DECLARED
 1

	)

190 #ifde‡
YYTYPE_UINT8


191 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

193 
	tyyty≥_uöt8
;

196 #ifde‡
YYTYPE_INT8


197 
YYTYPE_INT8
 
	tyyty≥_öt8
;

198 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

199 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

200 sig√d 
	tyyty≥_öt8
;

202 
	tyyty≥_öt8
;

205 #ifde‡
YYTYPE_UINT16


206 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

208 
	tyyty≥_uöt16
;

211 #ifde‡
YYTYPE_INT16


212 
YYTYPE_INT16
 
	tyyty≥_öt16
;

214 
	tyyty≥_öt16
;

217 #i‚de‡
YYSIZE_T


218 #ifde‡
__SIZE_TYPE__


219 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

220 #ñi‡
deföed
 
size_t


221 
	#YYSIZE_T
 
size_t


	)

222 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

223 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

224 
	~<°ddef.h
>

225 
	#YYSIZE_T
 
size_t


	)

227 
	#YYSIZE_T
 

	)

231 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

233 #i‚de‡
YY_


234 #i‡
YYENABLE_NLS


235 #i‡
ENABLE_NLS


236 
	~<liböé.h
>

237 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

240 #i‚de‡
YY_


241 
	#YY_
(
msgid
Ë
	)
msgid

246 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


247 
	#YYUSE
(
e
Ë((Ë”))

	)

249 
	#YYUSE
(
e
Ë

	)

253 #i‚de‡
löt


254 
	#YYID
(
n
Ë“)

	)

256 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

257 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

259 
	$YYID
 (
yyi
)

262 
	$YYID
 (
yyi
)

263 
yyi
;

266  
yyi
;

267 
	}
}

270 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


274 #ifde‡
YYSTACK_USE_ALLOCA


275 #i‡
YYSTACK_USE_ALLOCA


276 #ifde‡
__GNUC__


277 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

278 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


279 
	~<Æloˇ.h
>

280 #ñi‡
deföed
 
_AIX


281 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

282 #ñi‡
deföed
 
_MSC_VER


283 
	~<mÆloc.h
>

284 
	#Æloˇ
 
_Æloˇ


	)

286 
	#YYSTACK_ALLOC
 
Æloˇ


	)

287 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

288 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

289 
	~<°dlib.h
>

290 #i‚de‡
_STDLIB_H


291 
	#_STDLIB_H
 1

	)

298 #ifde‡
YYSTACK_ALLOC


300 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

301 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


306 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

309 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

310 
	#YYSTACK_FREE
 
YYFREE


	)

311 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


312 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

314 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

315 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

316 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

317 
	~<°dlib.h
>

318 #i‚de‡
_STDLIB_H


319 
	#_STDLIB_H
 1

	)

322 #i‚de‡
YYMALLOC


323 
	#YYMALLOC
 
mÆloc


	)

324 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

325 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

326 *
mÆloc
 (
YYSIZE_T
);

329 #i‚de‡
YYFREE


330 
	#YYFREE
 
‰ì


	)

331 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

332 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

333 
‰ì
 (*);

340 #i‡(! 
deföed
 
yyovîÊow
 \

341 && (! 
deföed
 
	g__˝lu•lus
 \

342 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

345 
	uyyÆloc


347 
yyty≥_öt16
 
	myyss_Æloc
;

348 
YYSTYPE
 
	myyvs_Æloc
;

352 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

356 
	#YYSTACK_BYTES
(
N
) \

357 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

358 + 
YYSTACK_GAP_MAXIMUM
)

	)

362 #i‚de‡
YYCOPY


363 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

364 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

365 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

367 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

370 
YYSIZE_T
 
yyi
; \

371 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

372 (
To
)[
yyi
] = (
From
)[yyi]; \

374 
	`YYID
 (0))

	)

383 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

386 
YYSIZE_T
 
yy√wbyãs
; \

387 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

388 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

389 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

390 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

392 
	`YYID
 (0))

	)

397 
	#YYFINAL
 2

	)

399 
	#YYLAST
 29

	)

402 
	#YYNTOKENS
 15

	)

404 
	#YYNNTS
 15

	)

406 
	#YYNRULES
 26

	)

408 
	#YYNSTATES
 40

	)

411 
	#YYUNDEFTOK
 2

	)

412 
	#YYMAXUTOK
 261

	)

414 
	#YYTRANSLATE
(
YYX
) \

415 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

418 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

449 #i‡
YYDEBUG


452 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

460 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

473 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

481 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


484 c⁄° *c⁄° 
	gyyäame
[] =

494 #ifde‡
YYPRINT


497 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

505 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

513 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

523 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

532 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

540 
	#YYPACT_NINF
 -8

	)

541 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

550 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

560 
	#YYTABLE_NINF
 -1

	)

561 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

568 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

577 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

585 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

586 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

587 
	#YYEMPTY
 (-2)

	)

588 
	#YYEOF
 0

	)

590 
	#YYACCEPT
 
yyac˚±œb


	)

591 
	#YYABORT
 
yyab‹éab


	)

592 
	#YYERROR
 
yyîr‹œb


	)

599 
	#YYFAIL
 
yyîæab


	)

601 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

603 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

605 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

607 
yych¨
 = (
Tokí
); \

608 
yylvÆ
 = (
VÆue
); \

609 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

610 
	`YYPOPSTACK
 (1); \

611 
yybackup
; \

615 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

616 
YYERROR
; \

618 
	`YYID
 (0))

	)

621 
	#YYTERROR
 1

	)

622 
	#YYERRCODE
 256

	)

629 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

630 #i‚de‡
YYLLOC_DEFAULT


631 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

633 i‡(
	`YYID
 (
N
)) \

635 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

636 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

637 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

638 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

642 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

643 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

644 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

645 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

647 
	`YYID
 (0))

	)

655 #i‚de‡
YY_LOCATION_PRINT


656 #i‡
YYLTYPE_IS_TRIVIAL


657 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

658 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

659 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

660 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

662 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

669 #ifde‡
YYLEX_PARAM


670 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

672 
	#YYLEX
 
	`yyÀx
 ()

	)

676 #i‡
YYDEBUG


678 #i‚de‡
YYFPRINTF


679 
	~<°dio.h
>

680 
	#YYFPRINTF
 
Ârötf


	)

683 
	#YYDPRINTF
(
Args
) \

685 i‡(
yydebug
) \

686 
YYFPRINTF
 
Args
; \

687 } 
	`YYID
 (0))

	)

689 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

691 i‡(
yydebug
) \

693 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

694 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

695 
Ty≥
, 
VÆue
); \

696 
	`YYFPRINTF
 (
°dîr
, "\n"); \

698 } 
	`YYID
 (0))

	)

706 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

707 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

709 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

712 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

713 
FILE
 *
yyouçut
;

714 
yyty≥
;

715 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

718 i‡(!
yyvÆuï
)

720 #ifde‡
YYPRINT


721 i‡(
yyty≥
 < 
YYNTOKENS
)

722 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

724 
	`YYUSE
 (
yyouçut
);

726 
yyty≥
)

731 
	}
}

738 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

739 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

741 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

744 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

745 
FILE
 *
yyouçut
;

746 
yyty≥
;

747 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

750 i‡(
yyty≥
 < 
YYNTOKENS
)

751 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

753 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

755 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

756 
	`YYFPRINTF
 (
yyouçut
, ")");

757 
	}
}

764 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

765 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

767 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

770 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

771 
yyty≥_öt16
 *
yybŸtom
;

772 
yyty≥_öt16
 *
yyt›
;

775 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

776 ; 
yybŸtom
 <
yyt›
; yybottom++)

778 
yybŸ
 = *
yybŸtom
;

779 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

781 
	`YYFPRINTF
 (
°dîr
, "\n");

782 
	}
}

784 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

786 i‡(
yydebug
) \

787 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

788 } 
	`YYID
 (0))

	)

795 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

796 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

798 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

801 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

802 
YYSTYPE
 *
yyv•
;

803 
yyruÀ
;

806 
yyƒhs
 = 
yyr2
[
yyruÀ
];

807 
yyi
;

808 
yy o
 = 
yyæöe
[
yyruÀ
];

809 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

810 
yyruÀ
 - 1, 
yy o
);

812 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

814 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

815 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

816 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

818 
	`YYFPRINTF
 (
°dîr
, "\n");

820 
	}
}

822 
	#YY_REDUCE_PRINT
(
RuÀ
) \

824 i‡(
yydebug
) \

825 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

826 } 
	`YYID
 (0))

	)

830 
	gyydebug
;

832 
	#YYDPRINTF
(
Args
)

	)

833 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

834 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

835 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

840 #i‚def 
YYINITDEPTH


841 
	#YYINITDEPTH
 200

	)

851 #i‚de‡
YYMAXDEPTH


852 
	#YYMAXDEPTH
 10000

	)

857 #i‡
YYERROR_VERBOSE


859 #i‚de‡
yy°æí


860 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


861 
	#yy°æí
 
°æí


	)

864 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

865 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

866 
YYSIZE_T


867 
	$yy°æí
 (c⁄° *
yy°r
)

869 
YYSIZE_T


870 
	$yy°æí
 (
yy°r
)

871 c⁄° *
yy°r
;

874 
YYSIZE_T
 
yyÀn
;

875 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

877  
yyÀn
;

878 
	}
}

882 #i‚de‡
yy°p˝y


883 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


884 
	#yy°p˝y
 
°p˝y


	)

888 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

889 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

891 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

894 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

895 *
yyde°
;

896 c⁄° *
yy§c
;

899 *
yyd
 = 
yyde°
;

900 c⁄° *
yys
 = 
yy§c
;

902 (*
yyd
++ = *
yys
++) != '\0')

905  
yyd
 - 1;

906 
	}
}

910 #i‚de‡
yyäamîr


918 
YYSIZE_T


919 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

921 i‡(*
yy°r
 == '"')

923 
YYSIZE_T
 
yyn
 = 0;

924 c⁄° *
yyp
 = 
yy°r
;

927 *++
yyp
)

931 
do_nŸ_°rù_quŸes
;

934 i‡(*++
yyp
 != '\\')

935 
do_nŸ_°rù_quŸes
;

938 i‡(
yyªs
)

939 
yyªs
[
yyn
] = *
yyp
;

940 
yyn
++;

944 i‡(
yyªs
)

945 
yyªs
[
yyn
] = '\0';

946  
yyn
;

948 
do_nŸ_°rù_quŸes
: ;

951 i‡(! 
yyªs
)

952  
	`yy°æí
 (
yy°r
);

954  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

955 
	}
}

965 
YYSIZE_T


966 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

968 
yyn
 = 
yy∑˘
[
yy°©e
];

970 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

974 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

975 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

976 
YYSIZE_T
 
yysize
 = 
yysize0
;

977 
YYSIZE_T
 
yysize1
;

978 
yysize_ovîÊow
 = 0;

979 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

980 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

981 
yyx
;

986 
	`YY_
("syntaxÉrror, unexpected %s");

987 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

988 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

989 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

990 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

992 *
yyfmt
;

993 c⁄° *
yyf
;

994 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

995 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

996 c⁄° 
yy‹
[] = " or %s";

997 
yyf‹m©
[ 
yyu√x≥˘ed


998 +  
yyex≥˘ög
 - 1

999 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

1000 * ( 
yy‹
 - 1))];

1001 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

1005 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1008 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1009 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1010 
yycou¡
 = 1;

1012 
yy¨g
[0] = 
yyäame
[
yyty≥
];

1013 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

1015 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1016 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1018 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1020 
yycou¡
 = 1;

1021 
yysize
 = 
yysize0
;

1022 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1025 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1026 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1027 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1028 
yysize
 = 
yysize1
;

1029 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1030 
yy¥efix
 = 
yy‹
;

1033 
yyf
 = 
	`YY_
(
yyf‹m©
);

1034 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1035 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1036 
yysize
 = 
yysize1
;

1038 i‡(
yysize_ovîÊow
)

1039  
YYSIZE_MAXIMUM
;

1041 i‡(
yyªsu…
)

1046 *
yyp
 = 
yyªsu…
;

1047 
yyi
 = 0;

1048 (*
yyp
 = *
yyf
) != '\0')

1050 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1052 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1053 
yyf
 += 2;

1057 
yyp
++;

1058 
yyf
++;

1062  
yysize
;

1064 
	}
}

1073 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1074 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1076 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1079 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1080 c⁄° *
yymsg
;

1081 
yyty≥
;

1082 
YYSTYPE
 *
yyvÆuï
;

1085 
	`YYUSE
 (
yyvÆuï
);

1087 i‡(!
yymsg
)

1088 
yymsg
 = "Deleting";

1089 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1091 
yyty≥
)

1097 
	}
}

1100 #ifde‡
YYPARSE_PARAM


1101 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1102 
yy∑r£
 (*
YYPARSE_PARAM
);

1104 
yy∑r£
 ();

1107 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1108 
yy∑r£
 ();

1110 
yy∑r£
 ();

1116 
	gyych¨
;

1119 
YYSTYPE
 
	gyylvÆ
;

1122 
	gyy√ºs
;

1130 #ifde‡
YYPARSE_PARAM


1131 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1132 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1134 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1137 
	$yy∑r£
 (
YYPARSE_PARAM
)

1138 *
YYPARSE_PARAM
;

1141 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1142 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1144 
	$yy∑r£
 ()

1147 
	$yy∑r£
 ()

1154 
yy°©e
;

1156 
yyîr°©us
;

1166 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1167 
yyty≥_öt16
 *
yyss
;

1168 
yyty≥_öt16
 *
yys•
;

1171 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1172 
YYSTYPE
 *
yyvs
;

1173 
YYSTYPE
 *
yyv•
;

1175 
YYSIZE_T
 
yy°acksize
;

1177 
yyn
;

1178 
yyªsu…
;

1180 
yytokí
;

1183 
YYSTYPE
 
yyvÆ
;

1185 #i‡
YYERROR_VERBOSE


1187 
yymsgbuf
[128];

1188 *
yymsg
 = 
yymsgbuf
;

1189 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1192 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1196 
yyÀn
 = 0;

1198 
yytokí
 = 0;

1199 
yyss
 = 
yysß
;

1200 
yyvs
 = 
yyvß
;

1201 
yy°acksize
 = 
YYINITDEPTH
;

1203 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1205 
yy°©e
 = 0;

1206 
yyîr°©us
 = 0;

1207 
yy√ºs
 = 0;

1208 
yych¨
 = 
YYEMPTY
;

1214 
yys•
 = 
yyss
;

1215 
yyv•
 = 
yyvs
;

1217 
yy£t°©e
;

1222 
yy√w°©e
:

1225 
yys•
++;

1227 
yy£t°©e
:

1228 *
yys•
 = 
yy°©e
;

1230 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1233 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1235 #ifde‡
yyovîÊow


1240 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1241 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1247 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1248 &
yyss1
, 
yysize
 *  (*
yys•
),

1249 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1250 &
yy°acksize
);

1252 
yyss
 = 
yyss1
;

1253 
yyvs
 = 
yyvs1
;

1256 #i‚de‡
YYSTACK_RELOCATE


1257 
yyexhau°edœb
;

1260 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1261 
yyexhau°edœb
;

1262 
yy°acksize
 *= 2;

1263 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1264 
yy°acksize
 = 
YYMAXDEPTH
;

1267 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1268 
yyÆloc
 *
yy±r
 =

1269 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1270 i‡(! 
yy±r
)

1271 
yyexhau°edœb
;

1272 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1273 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1274 #unde‡
YYSTACK_RELOCATE


1275 i‡(
yyss1
 !
yysß
)

1276 
	`YYSTACK_FREE
 (
yyss1
);

1281 
yys•
 = 
yyss
 + 
yysize
 - 1;

1282 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1284 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1285 (Ë
yy°acksize
));

1287 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1288 
YYABORT
;

1291 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1293 i‡(
yy°©e
 =
YYFINAL
)

1294 
YYACCEPT
;

1296 
yybackup
;

1301 
yybackup
:

1307 
yyn
 = 
yy∑˘
[
yy°©e
];

1308 i‡(
yyn
 =
YYPACT_NINF
)

1309 
yydeÁu…
;

1314 i‡(
yych¨
 =
YYEMPTY
)

1316 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1317 
yych¨
 = 
YYLEX
;

1320 i‡(
yych¨
 <
YYEOF
)

1322 
yych¨
 = 
yytokí
 = 
YYEOF
;

1323 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1327 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1328 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1333 
yyn
 +
yytokí
;

1334 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1335 
yydeÁu…
;

1336 
yyn
 = 
yyèbÀ
[yyn];

1337 i‡(
yyn
 <= 0)

1339 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1340 
yyîæab
;

1341 
yyn
 = -yyn;

1342 
yyªdu˚
;

1347 i‡(
yyîr°©us
)

1348 
yyîr°©us
--;

1351 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1354 
yych¨
 = 
YYEMPTY
;

1356 
yy°©e
 = 
yyn
;

1357 *++
yyv•
 = 
yylvÆ
;

1359 
yy√w°©e
;

1365 
yydeÁu…
:

1366 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1367 i‡(
yyn
 == 0)

1368 
yyîæab
;

1369 
yyªdu˚
;

1375 
yyªdu˚
:

1377 
yyÀn
 = 
yyr2
[
yyn
];

1387 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1390 
	`YY_REDUCE_PRINT
 (
yyn
);

1391 
yyn
)

1396 
f_«me
[500],
c
;

1397 
i
 = 2;

1398 
	`•rötf
(
f_«me
, "F_%s", (
yyv•
[(1Ë- (1)].
°rög
));

1399 (
c
 = 
f_«me
[
i
])) {

1400 i‡(
	`i¶owî
(
c
)Ë
f_«me
[
i
++] = 
	`touµî
(c);

1401 
i
++;

1403 
›î_codes
[
›_code
] = (*Ë
	`mÆloc
(
i
+1);

1404 
	`°r˝y
(
›î_codes
[
›_code
], 
f_«me
);

1405 
	`‰ì
((
yyv•
[(1Ë- (1)].
°rög
));

1407 
›_code
++;

1413 { (
yyvÆ
.
°rög
) = ""; }

1418 { (
yyvÆ
.
°rög
)="DEFAULT_NONE"; }

1424 
buf
[40];

1425 
	`•rötf
(
buf
, "%i", (
yyv•
[(3Ë- (3)].
numbî
));

1426 (
yyvÆ
.
°rög
Ë
buf
;

1433 i‡(
	`°rcmp
((
yyv•
[(3Ë- (3)].
°rög
), "F_THIS_OBJECT"))

1434 
	`yyîr‹
("Illegal default");

1435 (
yyvÆ
.
°rög
) = "DEFAULT_THIS_OBJECT";

1442 
buff
[500];

1443 
f_«me
[500];

1444 
i
, 
Àn
;

1445 i‡(
mö_¨g
 == -1)

1446 
mö_¨g
 = (
yyv•
[(5Ë- (8)].
numbî
);

1447 i‡(
mö_¨g
 > 5Ë
	`mf_Áèl
("min_arg > 5\n");

1448 i‡((
yyv•
[(3Ë- (8)].
°rög
)[0] == '\0') {

1449 i‡(
	`°æí
((
yyv•
[(2Ë- (8)].
°rög
)Ë+ 1 + 2 >  
f_«me
)

1450 
	`mf_Áèl
("AÜocal buffer wasÅoo small!(1)\n");

1451 
	`•rötf
(
f_«me
, "F_%s", (
yyv•
[(2Ë- (8)].
°rög
));

1452 
Àn
 = 
	`°æí
(
f_«me
);

1453 
i
=0; i < 
Àn
; i++) {

1454 i‡(
	`i¶owî
(
f_«me
[
i
]))

1455 
f_«me
[
i
] = 
	`touµî
(f_name[i]);

1457 i‡(
mö_¨g
 =1 && !
limô_max
 && (
yyv•
[(5Ë- (8)].
numbî
) == 1) {

1458 
efun1_codes
[
efun1_code
] = (*Ë
	`mÆloc
(
Àn
 + 1);

1459 
	`°r˝y
(
efun1_codes
[
efun1_code
], 
f_«me
);

1460 
efun1_«mes
[
efun1_code
] = (*Ë
	`mÆloc
(
Àn
 - 1);

1461 
	`°r˝y
(
efun1_«mes
[
efun1_code
], (
yyv•
[(2Ë- (8)].
°rög
));

1462 
efun1_code
++;

1464 
efun_codes
[
efun_code
] = (*Ë
	`mÆloc
(
Àn
 + 1);

1465 
	`°r˝y
(
efun_codes
[
efun_code
], 
f_«me
);

1466 
efun_«mes
[
efun_code
] = (*Ë
	`mÆloc
(
Àn
 - 1);

1467 
	`°r˝y
(
efun_«mes
[
efun_code
], (
yyv•
[(2Ë- (8)].
°rög
));

1468 
efun_code
++;

1471 i‡(
	`°æí
((
yyv•
[(3Ë- (8)].
°rög
)Ë+ 1 + 17 >  
f_«me
)

1472 
	`mf_Áèl
("AÜocal buffer wasÅoo small(2)!\n");

1473 
	`•rötf
(
f_«me
, "F_%†| F_ALIAS_FLAG", (
yyv•
[(3Ë- (8)].
°rög
));

1474 
Àn
 = 
	`°æí
(
f_«me
);

1475 
i
=0; i < 
Àn
; i++) {

1476 i‡(
	`i¶owî
(
f_«me
[
i
]))

1477 
f_«me
[
i
] = 
	`touµî
(f_name[i]);

1479 
	`‰ì
((
yyv•
[(3Ë- (8)].
°rög
));

1481 
i
=0; i < 
œ°_cuºít_ty≥
; i++) {

1482 
j
;

1483 
j
 = 0; j+
i
<
œ°_cuºít_ty≥
 && j < 
cuº_¨g_ty≥_size
; j++)

1485 i‡(
cuº_¨g_ty≥s
[
j
] !
¨g_ty≥s
[
i
+j])

1488 i‡(
j
 =
cuº_¨g_ty≥_size
)

1491 i‡(
i
 =
œ°_cuºít_ty≥
) {

1492 
j
;

1493 
j
=0; j < 
cuº_¨g_ty≥_size
; j++) {

1494 
¨g_ty≥s
[
œ°_cuºít_ty≥
++] = 
cuº_¨g_ty≥s
[
j
];

1495 i‡(
œ°_cuºít_ty≥
 =
	`NELEMS
(
¨g_ty≥s
))

1496 
	`yyîr‹
("Array 'arg_types' isÅoo small");

1499 i‡(!
	`°rcmp
((
yyv•
[(2Ë- (8)].
°rög
), "ˇŒ_Ÿhî"Ë&& !
	`lookup_deföe
("CAST_CALL_OTHERS")) {

1500 (
yyv•
[(1Ë- (8)].
numbî
Ë
MIXED
;

1502 
	`•rötf
(
buff
, "{\"%s\",%s,0,0,%d,%d,%s,%s,%s,%s,%s,%d,%s},\n",

1503 (
yyv•
[(2Ë- (8)].
°rög
), 
f_«me
, 
mö_¨g
, 
limô_max
 ? -1 : (yyv•[(5Ë- (8)].
numbî
),

1504 (
yyv•
[(1Ë- (8)].
numbî
Ë!
VOID
 ? 
	`˘y≥
((yyvsp[(1) - (8)].number)) : "TYPE_NOVALUE",

1505 
	`ëy≥
(0),Éty≥(1),Éty≥(2),Éty≥(3), 
i
, (
yyv•
[(6Ë- (8)].
°rög
));

1506 i‡(
	`°æí
(
buff
) >  buff)

1507 
	`mf_Áèl
("Local buffer overwritten !\n");

1509 
key
[
num_buff
] = (
yyv•
[(2Ë- (8)].
°rög
);

1510 
buf
[
num_buff
] = (*Ë
	`mÆloc
(
	`°æí
(
buff
) + 1);

1511 
	`°r˝y
(
buf
[
num_buff
], 
buff
);

1512 
num_buff
++;

1513 
mö_¨g
 = -1;

1514 
limô_max
 = 0;

1515 
cuº_¨g_ty≥_size
 = 0;

1521 { (
yyvÆ
.
numbî
Ë(
yyv•
[(1) - (2)].number) | 0x10000; }

1527 
i
 = 
	`NELEMS
(
ty≥s
);

1528 (
yyvÆ
.
numbî
) = 0;

1529 
i
--){

1530 i‡(
	`°rcmp
((
yyv•
[(1Ë- (1)].
°rög
), 
ty≥s
[
i
].
«me
) == 0) {

1531 (
yyvÆ
.
numbî
Ë
ty≥s
[
i
].
num
;

1535 i‡(!(
yyvÆ
.
numbî
)) {

1536 
buf
[256];

1537 
	`•rötf
(
buf
, "InvÆidÅy≥: %s", (
yyv•
[(1Ë- (1)].
°rög
));

1538 
	`yyîr‹
(
buf
);

1540 
	`‰ì
((
yyv•
[(1Ë- (1)].
°rög
));

1546 { (
yyvÆ
.
numbî
) = 0; }

1551 { (
yyvÆ
.
numbî
Ë1; i‡((
yyv•
[(1Ë- (1)].numbî)Ë
mö_¨g
 = 0; }

1556 { (
yyvÆ
.
numbî
Ë(
yyv•
[(1Ë- (3)].numbîË+ 1; i‡((yyv•[(3Ë- (3)].numbî)Ë
mö_¨g
 = (yyval.number) - 1; }

1562 (
yyvÆ
.
numbî
Ë(
yyv•
[(1) - (1)].number);

1563 
cuº_¨g_ty≥s
[
cuº_¨g_ty≥_size
++] = 0;

1564 i‡(
cuº_¨g_ty≥_size
 =
	`NELEMS
(
cuº_¨g_ty≥s
))

1565 
	`yyîr‹
("Too manyárguments");

1572 i‡((
yyv•
[(1Ë- (1)].
numbî
Ë!
VOID
) {

1573 
cuº_¨g_ty≥s
[
cuº_¨g_ty≥_size
++] = (
yyv•
[(1Ë- (1)].
numbî
);

1574 i‡(
cuº_¨g_ty≥_size
 =
	`NELEMS
(
cuº_¨g_ty≥s
))

1575 
	`yyîr‹
("Too manyárguments");

1577 (
yyvÆ
.
numbî
Ë(
yyv•
[(1) - (1)].number);

1583 { (
yyvÆ
.
numbî
Ë((
yyv•
[(1Ë- (1)].numbîË=
VOID
 && 
mö_¨g
 == -1); }

1588 { (
yyvÆ
.
numbî
Ë(
mö_¨g
 =-1 && ((
yyv•
[(1Ë- (3)].numbîË|| (yyv•[(3Ë- (3)].numbîË=
VOID
));}

1593 { (
yyvÆ
.
numbî
Ë
mö_¨g
 =-1 ; 
limô_max
 = 1; }

1600 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1602 
	`YYPOPSTACK
 (
yyÀn
);

1603 
yyÀn
 = 0;

1604 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1606 *++
yyv•
 = 
yyvÆ
;

1612 
yyn
 = 
yyr1
[yyn];

1614 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1615 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1616 
yy°©e
 = 
yyèbÀ
[yystate];

1618 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1620 
yy√w°©e
;

1626 
yyîæab
:

1628 i‡(!
yyîr°©us
)

1630 ++
yy√ºs
;

1631 #i‡! 
YYERROR_VERBOSE


1632 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1635 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

1636 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

1638 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

1639 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

1640 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1641 i‡(
yymsg
 !
yymsgbuf
)

1642 
	`YYSTACK_FREE
 (
yymsg
);

1643 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

1644 i‡(
yymsg
)

1645 
yymsg_Æloc
 = 
yyÆloc
;

1648 
yymsg
 = 
yymsgbuf
;

1649 
yymsg_Æloc
 =  
yymsgbuf
;

1653 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

1655 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

1656 
	`yyîr‹
 (
yymsg
);

1660 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1661 i‡(
yysize
 != 0)

1662 
yyexhau°edœb
;

1670 i‡(
yyîr°©us
 == 3)

1675 i‡(
yych¨
 <
YYEOF
)

1678 i‡(
yych¨
 =
YYEOF
)

1679 
YYABORT
;

1683 
	`yyde°ru˘
 ("Error: discarding",

1684 
yytokí
, &
yylvÆ
);

1685 
yych¨
 = 
YYEMPTY
;

1691 
yyîæab1
;

1697 
yyîr‹œb
:

1703 
yyîr‹œb
;

1707 
	`YYPOPSTACK
 (
yyÀn
);

1708 
yyÀn
 = 0;

1709 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1710 
yy°©e
 = *
yys•
;

1711 
yyîæab1
;

1717 
yyîæab1
:

1718 
yyîr°©us
 = 3;

1722 
yyn
 = 
yy∑˘
[
yy°©e
];

1723 i‡(
yyn
 !
YYPACT_NINF
)

1725 
yyn
 +
YYTERROR
;

1726 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1728 
yyn
 = 
yyèbÀ
[yyn];

1729 i‡(0 < 
yyn
)

1735 i‡(
yys•
 =
yyss
)

1736 
YYABORT
;

1739 
	`yyde°ru˘
 ("Error:Öopping",

1740 
yy°os
[
yy°©e
], 
yyv•
);

1741 
	`YYPOPSTACK
 (1);

1742 
yy°©e
 = *
yys•
;

1743 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1746 *++
yyv•
 = 
yylvÆ
;

1750 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1752 
yy°©e
 = 
yyn
;

1753 
yy√w°©e
;

1759 
yyac˚±œb
:

1760 
yyªsu…
 = 0;

1761 
yyªtu∫
;

1766 
yyab‹éab
:

1767 
yyªsu…
 = 1;

1768 
yyªtu∫
;

1770 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


1774 
yyexhau°edœb
:

1775 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1776 
yyªsu…
 = 2;

1780 
yyªtu∫
:

1781 i‡(
yych¨
 !
YYEMPTY
)

1782 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1783 
yytokí
, &
yylvÆ
);

1786 
	`YYPOPSTACK
 (
yyÀn
);

1787 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1788 
yys•
 !
yyss
)

1790 
	`yyde°ru˘
 ("Cleanup:Öopping",

1791 
yy°os
[*
yys•
], 
yyv•
);

1792 
	`YYPOPSTACK
 (1);

1794 #i‚de‡
yyovîÊow


1795 i‡(
yyss
 !
yysß
)

1796 
	`YYSTACK_FREE
 (
yyss
);

1798 #i‡
YYERROR_VERBOSE


1799 i‡(
yymsg
 !
yymsgbuf
)

1800 
	`YYSTACK_FREE
 (
yymsg
);

1803  
	`YYID
 (
yyªsu…
);

1804 
	}
}

1810 *
	$˘y≥
 (
n
)

1812 
buff
[100];

1813 *
p
 = (*)
NULL
;

1815 i‡(
n
 & 0x10000)

1816 
	`°r˝y
(
buff
, "TYPE_MOD_ARRAY|");

1818 
buff
[0] = '\0';

1819 
n
 &= ~0x10000;

1820 
n
) {

1821 
FLOAT
: 
p
 = "TYPE_REAL"; ;

1822 
FUNCTION
: 
p
 = "TYPE_FUNCTION"; ;

1823 
VOID
: 
p
 = "TYPE_VOID"; ;

1824 
STRING
: 
p
 = "TYPE_STRING"; ;

1825 
INT
: 
p
 = "TYPE_NUMBER"; ;

1826 
OBJECT
: 
p
 = "TYPE_OBJECT"; ;

1827 
MAPPING
: 
p
 = "TYPE_MAPPING"; ;

1828 
BUFFER
: 
p
 = "TYPE_BUFFER"; ;

1829 
MIXED
: 
p
 = "TYPE_ANY"; ;

1830 
UNKNOWN
: 
p
 = "TYPE_UNKNOWN"; ;

1831 : 
	`yyîr‹
("BadÅype!");

1833 
	`°rˇt
(
buff
, 
p
);

1834 i‡(
	`°æí
(
buff
) + 1 >  buff)

1835 
	`mf_Áèl
("Local buffer overwritten in ctype()");

1836  
buff
;

1837 
	}
}

1839 *
	$ëy≥1
 (
n
)

1841 i‡(
n
 & 0x10000)

1843 
n
) {

1844 
FLOAT
:

1846 
FUNCTION
:

1848 
INT
:

1850 
OBJECT
:

1852 
MAPPING
:

1854 
STRING
:

1856 
BUFFER
:

1858 
MIXED
:

1861 
	`yyîr‹
("IllegalÅype forárgument");

1864 
	}
}

1866 *
	$ëy≥
 (
n
)

1868 
i
;

1869 
loˇl_size
 = 100;

1870 *
buff
 = (*)
	`mÆloc
(
loˇl_size
);

1872 
i
=0; i < 
cuº_¨g_ty≥_size
; i++) {

1873 i‡(
n
 == 0)

1875 i‡(
cuº_¨g_ty≥s
[
i
] == 0)

1876 
n
--;

1878 i‡(
i
 =
cuº_¨g_ty≥_size
)

1880 
buff
[0] = '\0';

1881 ; 
cuº_¨g_ty≥s
[
i
] != 0; i++) {

1882 *
p
;

1883 i‡(
cuº_¨g_ty≥s
[
i
] =
VOID
)

1885 i‡(
buff
[0] != '\0')

1886 
	`°rˇt
(
buff
, "|");

1887 
p
 = 
	`ëy≥1
(
cuº_¨g_ty≥s
[
i
]);

1892 i‡(
	`°æí
(
p
Ë+ såÀn(
buff
Ë+ 2 > 
loˇl_size
) {

1893 
	`Ârötf
(
°dîr
, "Buffer overflow!\n");

1894 
	`exô
(1);

1896 
	`°rˇt
(
buff
, 
	`ëy≥1
(
cuº_¨g_ty≥s
[
i
]));

1898 i‡(!
	`°rcmp
(
buff
, ""))

1899 
	`°r˝y
(
buff
, "T_ANY");

1900  
buff
;

1901 
	}
}

1903 
idít
 ();

1905 
	$yyÀx
() {

1906 
c
;

1909 
c
 = 
	`gëc
(
yyö
)){

1914 
cuºít_löe
++;

1918 
buff
[2048];

1919 
	`fgës
(
buff
, 2047, 
yyö
);

1920 
	`Ârötf
(
°dîr
, "QTZ_SE:C⁄figuøti⁄ÖrobÀm: %s\n", 
buff
);

1921 
	`exô
(-1);

1925 
löe
;

1927 
aBuf
[2048], 
‚ame
[2048];

1928 
	`fgës
(
aBuf
, 2047, 
yyö
);

1929 i‡(
	`ssˇnf
(
aBuf
, "%d \"%[^\"]\"", &
löe
, 
‚ame
)) {

1930 
cuºít_löe
 = 
löe
;

1931 i‡(
cuºít_fûe
Ë
	`‰ì
(current_file);

1932 
cuºít_fûe
 = (*)
	`mÆloc
(
	`°æí
(
‚ame
) + 1);

1933 
	`°r˝y
(
cuºít_fûe
, 
‚ame
);

1935 i‡(
	`ssˇnf
(
aBuf
, "%d", &
löe
)Ë
cuºít_löe
 =Üine;

1936 
cuºít_löe
++;

1939 
EOF
:

1940 
	`f˛o£
(
yyö
);

1943 i‡((
c
 >= '0' && c <= '9') || c == '-') {

1944 
v
;

1945 
√g
 = 0;

1946 
v
 = 0;

1947 i‡(
c
 == '-') {

1948 
√g
 = 1;

1949 
c
 = '0';

1952 
v
 = v * 10 + (
c
 - '0');

1953 
c
 = 
	`gëc
(
yyö
);

1954 } 
c
 >= '0' && c <= '9');

1955 
	`ungëc
(
c
, 
yyö
);

1956 
yylvÆ
.
numbî
 = (
√g
 ? -
v
 : v);

1957  
NUM
;

1959 i‡(
	`ißlunum
(
c
))

1960  
	`idít
(
c
);

1961  
c
;

1964 
	}
}

1966 
	$idít
 (
c
)

1968 
buff
[100];

1969 
Àn
;

1971 
Àn
 = 0; 
	`ißlunum
(
c
); c = 
	`gëc
(
yyö
)) {

1972 
buff
[
Àn
++] = 
c
;

1973 i‡(
Àn
 = 
buff
 - 1) {

1974 
	`yyîr‹
("TooÜong indentifier");

1978 ()
	`ungëc
(
c
, 
yyö
);

1979 
buff
[
Àn
] = '\0';

1980 i‡(!
	`°rcmp
(
buff
, "default"))

1981  
DEFAULT
;

1982 i‡(!
	`°rcmp
(
buff
, "operator"))

1983  
OPERATOR
;

1985 
yylvÆ
.
°rög
 = (*)
	`mÆloc
(
	`°æí
(
buff
)+1);

1986 
	`°r˝y
(
yylvÆ
.
°rög
, 
buff
);

1987  
ID
;

1988 
	}
}

	@grammar/op_spec.c

6 
›î©‹
 
	gp›_vÆue
, 
	gpush
, 
	gefun0
, 
	gefun1
, 
	gefun2
, 
	gefun3
, 
	gefunv
;

8 
›î©‹
 
	gnumbî
, 
	gªÆ
, 
	gbyã
, 
	gnbyã
, 
	g°rög
, 
	gsh‹t_°rög
, 
	gc⁄°0
, 
	gc⁄°1
;

10 
›î©‹
 
	gaggªg©e
, 
	gaggªg©e_assoc
;

11 #ifde‡
DEBUG


12 
›î©‹
 
	gbªak_poöt
;

18 
›î©‹
 
	gbønch_whí_zîo
, 
	gbønch_whí_n⁄_zîo
, 
	gbønch
;

19 
›î©‹
 
	gbbønch_whí_zîo
, 
	gbbønch_whí_n⁄_zîo
, 
	gbbønch
;

21 
›î©‹
 
	gbønch_√
, 
	gbønch_ge
, 
	gbønch_À
, 
	gbønch_eq
, 
	gbbønch_…
;

23 
›î©‹
 
	gf‹óch
, 
	g√xt_f‹óch
, 
	gexô_f‹óch
;

24 
›î©‹
 
	glo›_c⁄d_loˇl
, 
	glo›_c⁄d_numbî
;

25 
›î©‹
 
	glo›_ö¸
;

26 
›î©‹
 
	gwhûe_dec
;

28 
›î©‹
 
	gl‹
, 
	gœnd
;

30 
›î©‹
 
	gˇtch
, 
	gíd_ˇtch
;

31 
›î©‹
 
	gtime_ex¥essi⁄
, 
	gíd_time_ex¥essi⁄
;

33 
›î©‹
 ;

35 
›î©‹
 
	gˇŒ_fun˘i⁄_by_addªss
, 
	gˇŒ_öhîôed
, , 
	gªtu∫_zîo
;

38 
›î©‹
 
	geq
, 
	g√
, 
	gÀ
, 
	g…
, 
	gge
, 
	ggt
;

40 
›î©‹
 
	göc
, 
	gdec
, 
	g¥e_öc
, 
	gpo°_öc
, 
	g¥e_dec
, 
	gpo°_dec
;

42 
›î©‹
 
	gå™s„r_loˇl
;

45 
›î©‹
 
	gloˇl
, 
	gloˇl_lvÆue
;

46 
›î©‹
 
	gglobÆ
, 
	gglobÆ_lvÆue
;

47 
›î©‹
 
	gmembî
, 
	gmembî_lvÆue
;

48 
›î©‹
 
	gödex
, 
	gödex_lvÆue
;

49 
›î©‹
 
	grödex
, 
	grödex_lvÆue
;

50 
›î©‹
 
	g¬_ønge
, 
	g¬_ønge_lvÆue
, 
	g∫_ønge
, 
	g∫_ønge_lvÆue
;

51 
›î©‹
 
	gº_ønge
, 
	gº_ønge_lvÆue
, 
	gƒ_ønge
, 
	gƒ_ønge_lvÆue
;

52 
›î©‹
 
	g√_ønge
, 
	gª_ønge
;

55 
›î©‹
 
	gadd_eq
, 
	gsub_eq
, 
	g™d_eq
, 
	g‹_eq
, 
	gx‹_eq
, 
	glsh_eq
, 
	grsh_eq
, 
	gmu…_eq
;

56 
›î©‹
 
	gdiv_eq
, 
	gmod_eq
, 
	gassign
;

58 
›î©‹
 
	gvoid_add_eq
, 
	gvoid_assign
, 
	gvoid_assign_loˇl
;

60 
›î©‹
 
	gadd
, 
	gsubåa˘
, 
	gmu…ùly
, 
	gdivide
, 
	gmod
, 
	g™d
, 
	g‹
, 
	gx‹
, 
	glsh
, 
	grsh
;

61 
›î©‹
 
	gnŸ
, 
	g√g©e
, 
	gcom∂
;

63 
›î©‹
 
	gfun˘i⁄_c⁄°ru˘‹
;

64 
›î©‹
 
	gsimul_efun
;

66 
›î©‹
 
	gssˇnf
;

67 
›î©‹
 
	g∑r£_comm™d
;

69 
›î©‹
 
	g√w_˛ass
, 
	g√w_em±y_˛ass
;

70 
›î©‹
 
	gex∑nd_v¨¨gs
;

	@grammar/opc.h

7 
	s›c_s
 { *
	m«me
; 
	mcou¡
; } 
	t›c_t
;

9 
›c_t
 
	g›c_efun
[] = {

	@grammar/opcodes.h

9 
	#F_POP_VALUE
 1

	)

10 
	#F_PUSH
 2

	)

11 
	#F_EFUN0
 3

	)

12 
	#F_EFUN1
 4

	)

13 
	#F_EFUN2
 5

	)

14 
	#F_EFUN3
 6

	)

15 
	#F_EFUNV
 7

	)

16 
	#F_NUMBER
 8

	)

17 
	#F_REAL
 9

	)

18 
	#F_BYTE
 10

	)

19 
	#F_NBYTE
 11

	)

20 
	#F_STRING
 12

	)

21 
	#F_SHORT_STRING
 13

	)

22 
	#F_CONST0
 14

	)

23 
	#F_CONST1
 15

	)

24 
	#F_AGGREGATE
 16

	)

25 
	#F_AGGREGATE_ASSOC
 17

	)

26 
	#F_BRANCH_WHEN_ZERO
 18

	)

27 
	#F_BRANCH_WHEN_NON_ZERO
 19

	)

28 
	#F_BRANCH
 20

	)

29 
	#F_BBRANCH_WHEN_ZERO
 21

	)

30 
	#F_BBRANCH_WHEN_NON_ZERO
 22

	)

31 
	#F_BBRANCH
 23

	)

32 
	#F_BRANCH_NE
 24

	)

33 
	#F_BRANCH_GE
 25

	)

34 
	#F_BRANCH_LE
 26

	)

35 
	#F_BRANCH_EQ
 27

	)

36 
	#F_BBRANCH_LT
 28

	)

37 
	#F_FOREACH
 29

	)

38 
	#F_NEXT_FOREACH
 30

	)

39 
	#F_EXIT_FOREACH
 31

	)

40 
	#F_LOOP_COND_LOCAL
 32

	)

41 
	#F_LOOP_COND_NUMBER
 33

	)

42 
	#F_LOOP_INCR
 34

	)

43 
	#F_WHILE_DEC
 35

	)

44 
	#F_LOR
 36

	)

45 
	#F_LAND
 37

	)

46 
	#F_CATCH
 38

	)

47 
	#F_END_CATCH
 39

	)

48 
	#F_TIME_EXPRESSION
 40

	)

49 
	#F_END_TIME_EXPRESSION
 41

	)

50 
	#F_SWITCH
 42

	)

51 
	#F_CALL_FUNCTION_BY_ADDRESS
 43

	)

52 
	#F_CALL_INHERITED
 44

	)

53 
	#F_RETURN
 45

	)

54 
	#F_RETURN_ZERO
 46

	)

55 
	#F_EQ
 47

	)

56 
	#F_NE
 48

	)

57 
	#F_LE
 49

	)

58 
	#F_LT
 50

	)

59 
	#F_GE
 51

	)

60 
	#F_GT
 52

	)

61 
	#F_INC
 53

	)

62 
	#F_DEC
 54

	)

63 
	#F_PRE_INC
 55

	)

64 
	#F_POST_INC
 56

	)

65 
	#F_PRE_DEC
 57

	)

66 
	#F_POST_DEC
 58

	)

67 
	#F_TRANSFER_LOCAL
 59

	)

68 
	#F_LOCAL
 60

	)

69 
	#F_LOCAL_LVALUE
 61

	)

70 
	#F_GLOBAL
 62

	)

71 
	#F_GLOBAL_LVALUE
 63

	)

72 
	#F_MEMBER
 64

	)

73 
	#F_MEMBER_LVALUE
 65

	)

74 
	#F_INDEX
 66

	)

75 
	#F_INDEX_LVALUE
 67

	)

76 
	#F_RINDEX
 68

	)

77 
	#F_RINDEX_LVALUE
 69

	)

78 
	#F_NN_RANGE
 70

	)

79 
	#F_NN_RANGE_LVALUE
 71

	)

80 
	#F_RN_RANGE
 72

	)

81 
	#F_RN_RANGE_LVALUE
 73

	)

82 
	#F_RR_RANGE
 74

	)

83 
	#F_RR_RANGE_LVALUE
 75

	)

84 
	#F_NR_RANGE
 76

	)

85 
	#F_NR_RANGE_LVALUE
 77

	)

86 
	#F_NE_RANGE
 78

	)

87 
	#F_RE_RANGE
 79

	)

88 
	#F_ADD_EQ
 80

	)

89 
	#F_SUB_EQ
 81

	)

90 
	#F_AND_EQ
 82

	)

91 
	#F_OR_EQ
 83

	)

92 
	#F_XOR_EQ
 84

	)

93 
	#F_LSH_EQ
 85

	)

94 
	#F_RSH_EQ
 86

	)

95 
	#F_MULT_EQ
 87

	)

96 
	#F_DIV_EQ
 88

	)

97 
	#F_MOD_EQ
 89

	)

98 
	#F_ASSIGN
 90

	)

99 
	#F_VOID_ADD_EQ
 91

	)

100 
	#F_VOID_ASSIGN
 92

	)

101 
	#F_VOID_ASSIGN_LOCAL
 93

	)

102 
	#F_ADD
 94

	)

103 
	#F_SUBTRACT
 95

	)

104 
	#F_MULTIPLY
 96

	)

105 
	#F_DIVIDE
 97

	)

106 
	#F_MOD
 98

	)

107 
	#F_AND
 99

	)

108 
	#F_OR
 100

	)

109 
	#F_XOR
 101

	)

110 
	#F_LSH
 102

	)

111 
	#F_RSH
 103

	)

112 
	#F_NOT
 104

	)

113 
	#F_NEGATE
 105

	)

114 
	#F_COMPL
 106

	)

115 
	#F_FUNCTION_CONSTRUCTOR
 107

	)

116 
	#F_SIMUL_EFUN
 108

	)

117 
	#F_SSCANF
 109

	)

118 
	#F_PARSE_COMMAND
 110

	)

119 
	#F_NEW_CLASS
 111

	)

120 
	#F_NEW_EMPTY_CLASS
 112

	)

121 
	#F_EXPAND_VARARGS
 113

	)

124 
	#BASE
 114

	)

126 
	#F_TO_INT
 114

	)

127 
	#F_TO_FLOAT
 115

	)

128 
	#F_PREVIOUS_OBJECT
 116

	)

129 
	#F_CALL_STACK
 117

	)

130 
	#F_SIZEOF
 118

	)

131 
	#F_DESTRUCT
 119

	)

132 
	#F_FILE_NAME
 120

	)

133 
	#F_RANDOM
 121

	)

134 
	#F_LOWER_CASE
 122

	)

135 
	#F_ALLOCATE_MAPPING
 123

	)

136 
	#F_VALUES
 124

	)

137 
	#F_KEYS
 125

	)

138 
	#F_CLONEP
 126

	)

139 
	#F_INTP
 127

	)

140 
	#F_UNDEFINEDP
 128

	)

141 
	#F_FLOATP
 129

	)

142 
	#F_STRINGP
 130

	)

143 
	#F_FUNCTIONP
 131

	)

144 
	#F_POINTERP
 132

	)

145 
	#F_OBJECTP
 133

	)

146 
	#F_CLASSP
 134

	)

147 
	#F_TYPEOF
 135

	)

148 
	#F_BUFFERP
 136

	)

149 
	#F_REPLACE_PROGRAM
 137

	)

150 
	#F_ALLOCATE
 138

	)

151 
	#F_FILE_SIZE
 139

	)

152 
	#F_MKDIR
 140

	)

153 
	#F_RM
 141

	)

154 
	#F_RMDIR
 142

	)

155 
	#F_MD5_HEXDIGEST
 143

	)

156 
	#F_CTIME
 144

	)

157 
	#F_LOCALTIME
 145

	)

158 
	#F_THROW
 146

	)

159 
	#F_DEEP_INHERIT_LIST
 147

	)

160 
	#F_SHALLOW_INHERIT_LIST
 148

	)

161 
	#F_MAPP
 149

	)

162 
	#F_CHILDREN
 150

	)

163 
	#F_ERROR
 151

	)

164 
	#F_SET_EVAL_LIMIT
 152

	)

165 
	#F_KEYS_BY_VALUE
 153

	)

166 
	#F_LPC_GC
 154

	)

167 
	#F_MYSQL_CONNECT
 155

	)

168 
	#F_MYSQL_CLOSE
 156

	)

169 
	#F_CURSOR_CLOSE
 157

	)

170 
	#F_CURSOR_FETCH
 158

	)

171 
	#F_LPC2PYSTR
 159

	)

172 
	#F_PYSTR2LPC
 160

	)

173 
	#F_FS_RESTORE_FROM_FILE
 161

	)

174 
	#F_FS_URL_ENCODE_MAP
 162

	)

175 
	#F_FS_URL_ENCODE
 163

	)

176 
	#F_FS_URL_DECODE
 164

	)

177 
	#F_FS_IS_UID_CONNECTED
 165

	)

178 
	#F_FS_CLOSE_UID_CONNECTION
 166

	)

179 
	#F_FS_CLOSE_VFD_CONNECTION
 167

	)

180 
	#F_FS_GET_VFD_BY_UID
 168

	)

181 
	#F_FS_GET_UID_BY_VFD
 169

	)

182 
	#F_FS_GET_IP_BY_VFD
 170

	)

183 
	#F_FS_LAST_PTO_TIMESTAMP
 171

	)

184 
	#F_FS_EXCLUDE_STATS_PTO
 172

	)

185 
	#F_FS_VALIDATION_START
 173

	)

186 
	#F_REMOVE_CALL_OUT
 174

	)

187 
	#F_FS_ENABLE_DIRTY_OBJECT
 175

	)

188 
	#F_FS_ENABLE_DIRTY_MAP
 176

	)

189 
	#F_FS_MARSHAL_DIRTY_MAP
 177

	)

190 
	#F_FS_MARSHAL_MAP
 178

	)

191 
	#F_FS_MARSHAL_DIRTY_OBJECT
 179

	)

192 
	#F_USER_CREATE
 180

	)

193 
	#F_USER_DESTROY
 181

	)

194 
	#F_GAMED_CLOSE_UID_CONNECTION
 182

	)

195 
	#F_FS_SAVE_ALL_USER
 183

	)

196 
	#F_FS_DB_SYNC
 184

	)

197 
	#F_FS_DB_OBJECT_UNLOAD
 185

	)

198 
	#F_GET_USER
 186

	)

199 
	#F_IS_ONLINE
 187

	)

200 
	#F_LOGOUT
 188

	)

201 
	#F_UPDATE_MAX_LOGIN
 189

	)

202 
	#F_GET_ALL_USERS
 190

	)

203 
	#F_NEW_ITEM
 191

	)

204 
	#F_IS_ITEM_ONLINE
 192

	)

205 
	#F_DESTROY_ITEM
 193

	)

206 
	#F_NEW_NPC
 194

	)

207 
	#F_DESTROY_NPC
 195

	)

208 
	#F_IS_NPC_ONLINE
 196

	)

209 
	#F_GET_NPC_OBJECT
 197

	)

210 
	#F_GET_NPC_POS
 198

	)

211 
	#F_GET_NPC_CIRCLE_FIELD
 199

	)

212 
	#F_GET_NPC_FIGHTID
 200

	)

213 
	#F_GET_NPC_STATUS
 201

	)

214 
	#F_NEW_SUMMON
 202

	)

215 
	#F_DESTROY_SUMMON
 203

	)

216 
	#F_IS_SUMMON_ONLINE
 204

	)

217 
	#F_GET_TEAM_MAP
 205

	)

218 
	#F_DISMISS_TEAM
 206

	)

219 
	#F_UPDATE_LPC_OBJECT
 207

	)

220 
	#F_ENABLE_LOG_PTO
 208

	)

221 
	#F__
 209

	)

222 
	#F_COPY
 210

	)

223 
	#F_FILE_LENGTH
 211

	)

224 
	#F_UPPER_CASE
 212

	)

225 
	#F_FETCH_VARIABLE
 213

	)

226 
	#F_FUNCTION_OWNER
 214

	)

227 
	#F_SOCKET_CREATE
 215

	)

228 
	#F_SOCKET_CLOSE
 216

	)

229 
	#F_SOCKET_ADDRESS
 217

	)

230 
	#F_REFS
 218

	)

231 
	#F_COS
 219

	)

232 
	#F_SIN
 220

	)

233 
	#F_TAN
 221

	)

234 
	#F_ASIN
 222

	)

235 
	#F_ACOS
 223

	)

236 
	#F_ATAN
 224

	)

237 
	#F_SQRT
 225

	)

238 
	#F_LOG
 226

	)

239 
	#F_EXP
 227

	)

240 
	#F_FLOOR
 228

	)

241 
	#F_CEIL
 229

	)

244 
	#ONEARG_MAX
 230

	)

246 
	#F_CALL_OTHER
 230

	)

247 
	#F_EVALUATE
 231

	)

248 
	#F_THIS_OBJECT
 232

	)

249 
	#F_CLONE_OBJECT
 233

	)

250 
	#F_EXPLODE
 234

	)

251 
	#F_IMPLODE
 235

	)

252 
	#F_MEMBER_ARRAY
 236

	)

253 
	#F_REPLACE_STRING
 237

	)

254 
	#F_REPLACE_STRING_REG
 238

	)

255 
	#F_RESTORE_OBJECT
 239

	)

256 
	#F_SAVE_OBJECT
 240

	)

257 
	#F_GET_DIR
 241

	)

258 
	#F_STRSRCH
 242

	)

259 
	#F_SUBSTR
 243

	)

260 
	#F_FIND_OBJECT
 244

	)

261 
	#F_MAP_DELETE
 245

	)

262 
	#F_ALLOCATE_BUFFER
 246

	)

263 
	#F_READ_BUFFER
 247

	)

264 
	#F_WRITE_BUFFER
 248

	)

265 
	#F_INHERITS
 249

	)

266 
	#F_REGEXP
 250

	)

267 
	#F_WRITE_FILE
 251

	)

268 
	#F_RENAME
 252

	)

269 
	#F_WRITE_BYTES
 253

	)

270 
	#F_READ_BYTES
 254

	)

271 
	#F_READ_FILE
 255

	)

272 
	#F_CP
 256

	)

273 
	#F_CLEAR_BIT
 257

	)

274 
	#F_TEST_BIT
 258

	)

275 
	#F_SET_BIT
 259

	)

276 
	#F_NEXT_BIT
 260

	)

277 
	#F_CRYPT
 261

	)

278 
	#F_FUNCTION_EXISTS
 262

	)

279 
	#F_OBJECTS
 263

	)

280 
	#F_SORT_ARRAY
 264

	)

281 
	#F_TIME
 265

	)

282 
	#F_UNIQUE_MAPPING
 266

	)

283 
	#F_SPRINTF
 267

	)

284 
	#F_STAT
 268

	)

285 
	#F_MEMORY_INFO
 269

	)

286 
	#F_UPTIME
 270

	)

287 
	#F_STRCMP
 271

	)

288 
	#F_FILTER
 272

	)

289 
	#F_MAP
 273

	)

290 
	#F_MALLOC_STATUS
 274

	)

291 
	#F_DUMPALLOBJ
 275

	)

292 
	#F_DUMP_FILE_DESCRIPTORS
 276

	)

293 
	#F_QUERY_LOAD_AVERAGE
 277

	)

294 
	#F_RECLAIM_OBJECTS
 278

	)

295 
	#F_SHUTDOWN
 279

	)

296 
	#F_OS_COMMAND
 280

	)

297 
	#F_GET_CONFIG_FILE
 281

	)

298 
	#F_IS_AUTH_SERVER
 282

	)

299 
	#F_FS_MEMORY_INFO
 283

	)

300 
	#F_MYSQL_EXECUTE
 284

	)

301 
	#F_FS_SAVE_TO_FILE
 285

	)

302 
	#F_FS_HTTP_REQUEST
 286

	)

303 
	#F_FS_CURL_REQUEST
 287

	)

304 
	#F_FS_NEW_USER
 288

	)

305 
	#F_FS_RPC_CALL
 289

	)

306 
	#F_FS_RPC_CALL_LOOP
 290

	)

307 
	#F_FS_RPC_X_CALL
 291

	)

308 
	#F_FS_RPC_MAKE_CFG
 292

	)

309 
	#F_FS_SET_VALIDATION
 293

	)

310 
	#F_MAIN_LOOP
 294

	)

311 
	#F_CALL_OUT
 295

	)

312 
	#F_FS_MERGE_DIRTY_MAP
 296

	)

313 
	#F_FS_MERGE_DIRTY_OBJECT
 297

	)

314 
	#F_FS_SAVE_ALL_DAT
 298

	)

315 
	#F_FS_DB_GAMED_EXIT
 299

	)

316 
	#F_FS_DB_OBJECT_NEW
 300

	)

317 
	#F_FS_DB_OBJECT_LOAD
 301

	)

318 
	#F_FS_DB_OBJECT_SAVE
 302

	)

319 
	#F_FS_DB_OBJECT_RENAME
 303

	)

320 
	#F_FS_DB_OBJECT_RESTORE
 304

	)

321 
	#F_FS_DIRTY_MEM_POOL_STAT
 305

	)

322 
	#F_GET_ONLINE_COUNT
 306

	)

323 
	#F_RESTORE_ITEM
 307

	)

324 
	#F_GET_ITEM_MAP
 308

	)

325 
	#F_SETITEMTEMP
 309

	)

326 
	#F_GETITEMTEMP
 310

	)

327 
	#F_SETITEMSAVE
 311

	)

328 
	#F_GETITEMSAVE
 312

	)

329 
	#F_RESTORE_NPC
 313

	)

330 
	#F_SETNPC
 314

	)

331 
	#F_GETNPC
 315

	)

332 
	#F_SETNPCSAVE
 316

	)

333 
	#F_GETNPCSAVE
 317

	)

334 
	#F_SET_NPC_CIRCLE_FIELD
 318

	)

335 
	#F_IN_NPC_FIELD
 319

	)

336 
	#F_GET_NPC_MAP
 320

	)

337 
	#F_SET_NPC_MAP
 321

	)

338 
	#F_SET_NPC_FIGHTID
 322

	)

339 
	#F_SET_NPC_STATUS
 323

	)

340 
	#F_SET_EFFECT_NPC
 324

	)

341 
	#F_GET_SUMMON_MAP
 325

	)

342 
	#F_RESTORE_SUMMON
 326

	)

343 
	#F_SETSUMMONTEMP
 327

	)

344 
	#F_GETSUMMONTEMP
 328

	)

345 
	#F_SETSUMMONSAVE
 329

	)

346 
	#F_GETSUMMONSAVE
 330

	)

347 
	#F_NEW_TEAM
 331

	)

348 
	#F_DUMP_MEMORY_POOL
 332

	)

349 
	#F_GET_TIME_OF_DAY
 333

	)

350 
	#F_FS_ICONV
 334

	)

351 
	#F_FS_DNS_RESOLVE
 335

	)

352 
	#F_INIT_GETTEXT
 336

	)

353 
	#F_FUNCTIONS
 337

	)

354 
	#F_VARIABLES
 338

	)

355 
	#F_REPLACEABLE
 339

	)

356 
	#F_PROGRAM_INFO
 340

	)

357 
	#F_STORE_VARIABLE
 341

	)

358 
	#F_DEBUG_MESSAGE
 342

	)

359 
	#F_REPEAT_STRING
 343

	)

360 
	#F_SOCKET_BIND_AND_LISTEN
 344

	)

361 
	#F_SOCKET_ACCEPT
 345

	)

362 
	#F_SOCKET_CONNECT
 346

	)

363 
	#F_SOCKET_WRITE
 347

	)

364 
	#F_DUMP_SOCKET_STATUS
 348

	)

365 
	#F_DEBUG_INFO
 349

	)

366 
	#F_DUMP_PROG
 350

	)

367 
	#F_POW
 351

	)

368 
	#F_MAX
 352

	)

369 
	#F_MIN
 353

	)

372 
	#NUM_OPCODES
 353

	)

	@grammar/option_defs.c

46 
	#NUM_OPTION_DEFS
 42

	)

	@grammar/options.h

1 #i‚de‡
_OPTIONS_H_


2 
	#_OPTIONS_H_


	)

76 #unde‡
SYSMALLOC


77 #unde‡
SMALLOC


79 
	#BSDMALLOC


	)

92 #unde‡
WRAPPEDMALLOC


93 #unde‡
DEBUGMALLOC


96 #unde‡
SBRK_OK


97 #unde‡
DO_MSTATS


98 #unde‡
DEBUGMALLOC_EXTENSIONS


99 #unde‡
CHECK_MEMORY


101 #unde‡
HAS_STATUS_TYPE


102 #unde‡
SANE_EXPLODE_STRING


103 #unde‡
REVERSIBLE_EXPLODE_STRING


104 #unde‡
CAST_CALL_OTHERS


105 
	#NONINTERACTIVE_STDERR_WRITE


	)

106 #unde‡
OLD_RANGE_BEHAVIOR


113 #unde‡
COMPRESS_FUNCTION_TABLES


120 #unde‡
CUSTOM_CRYPT


130 #unde‡
COMPAT_32


136 #unde‡
STRING_STATS


142 
	#ARRAY_STATS


	)

150 
	#LOG_CATCHES


	)

179 #i‚de‡
LATTICE


180 
	#CONFIG_FILE_DIR
 "/home/QTZE/s¸ùt"

	)

182 
	#CONFIG_FILE_DIR
 "./ëc"

	)

208 
	#DEFAULT_PRAGMAS
 
PRAGMA_WARNINGS
|
PRAGMA_STRICT_TYPES
|
PRAGMA_SAVE_BINARY
|
PRAGMA_OPTIMIZE
|
PRAGMA_ERROR_CONTEXT


	)

211 
	#SAVE_EXTENSION
 ".o"

	)

213 
	#STRIP_BEFORE_PROCESS_INPUT


	)

214 
	#TRAP_CRASHES


	)

216 
	#CALLOUT_HANDLES


	)

227 #unde‡
PROFILE_FUNCTIONS


229 
	#NO_SHADOWS


	)

230 
	#BINARIES


	)

231 
	#NO_ANSI


	)

233 #unde‡
OPCPROF


234 #unde‡
OPCPROF_2D


235 #unde‡
DROP_CORE


236 #unde‡
THIS_PLAYER_IN_CALL_OUT


237 #unde‡
FLUSH_OUTPUT_IMMEDIATELY


238 #unde‡
PRIVS


239 #unde‡
RESTRICTED_ED


240 #unde‡
INTERACTIVE_CATCH_TELL


241 #unde‡
RECEIVE_SNOOP


242 #unde‡
NO_BUFFER_TYPE


243 #unde‡
ARRAY_RESERVED_WORD


244 #unde‡
PACKAGE_QTZ_STATS


245 #unde‡
PACKAGE_SOCKETS


246 #unde‡
QTZ_SîvîEngöeLIB_ERROR_HANDLER


258 
	#HEARTBEAT_INTERVAL
 2000000

	)

264 
	#LARGEST_PRINTABLE_STRING
 10240

	)

269 
	#MESSAGE_BUFFER_SIZE
 4096

	)

275 
	#APPLY_CACHE_BITS
 11

	)

280 #unde‡
CACHE_STATS


289 #unde‡
RUNTIME_LOADING


295 #unde‡
TRACE_CODE


302 
	#HEART_BEAT_CHUNK
 32

	)

306 
	#SMALL_STRING_SIZE
 100

	)

307 
	#LARGE_STRING_SIZE
 1000

	)

308 
	#COMMAND_BUF_SIZE
 2000

	)

314 
	#MAX_SAVE_SVALUE_DEPTH
 25

	)

320 
	#CFG_MAX_LOCAL_VARIABLES
 100

	)

322 
	#CFG_EVALUATOR_STACK_SIZE
 20000

	)

323 
	#CFG_COMPILER_STACK_SIZE
 400

	)

324 
	#CFG_MAX_CALL_DEPTH
 50

	)

326 
	#CFG_LIVING_HASH_SIZE
 256

	)

353 #unde‡
NEXT_MALLOC_DEBUG


	@grammar/options_incl.h

1 
	~"∑ckages/loˇl_›ti⁄s.h
"

	@grammar/preprocess.c

3 
c⁄d_gë_exp
();

4 
h™dÀ_c⁄d
();

6 #i‚de‡
LEXER


7 #unde‡
DXALLOC


8 
	#DXALLOC
(
x
, 
y
, 
z
Ë
	`mÆloc
(x)

	)

9 #unde‡
FREE


10 
	#FREE
(
x
Ë
	`‰ì
(x)

	)

11 #unde‡
ALLOCATE


12 
	#ALLOCATE
(
x
, 
y
, 
z
Ë(x *)
	`mÆloc
((x))

	)

13 #unde‡
DREALLOC


14 
	#DREALLOC
(
w
, 
x
, 
y
, 
z
Ë
	`ªÆloc
(w, x)

	)

17 
de‚_t
 *
	gde‚s
[
DEFHASH
];

18 
if°©e_t
 *
	gi·›
 = 0;

20 
de‚_t
 *
	$lookup_deföôi⁄
(*
s
)

22 
de‚_t
 *
p
;

23 
h
;

25 
h
 = 
	`defhash
(
s
);

26 
p
 = 
de‚s
[
h
];Ö;Ö =Ö->
√xt
)

27 i‡(
	`°rcmp
(
s
, 
p
->
«me
) == 0)

29  
p
;

32 
	}
}

38 
de‚_t
 *
	$lookup_deföe
(*
s
)

40 
de‚_t
 *
p
 = 
	`lookup_deföôi⁄
(
s
);

42 i‡(
p
 && (p->
Êags
 &
DEF_IS_UNDEFINED
) )

48  
p
;

50 
	}
}

56 
	$add_deföe
(*
«me
, 
«rgs
, *
exps
)

58 
de‚_t
 *
p
 = 
	`lookup_deföôi⁄
(
«me
);

59 
h
;

61 i‡(
p
)

63 i‡(
p
->
Êags
 &
DEF_IS_UNDEFINED
)

65 
p
->
exps
 = (*)
	`DREALLOC
’->exps, 
	`°æí
”xpsË+ 1, 
TAG_COMPILER
, "add_define:Ñedef");

66 
	`°r˝y
(
p
->
exps
,Éxps);

67 
p
->
Êags
 = 0;

68 
p
->
«rgs
 =Çargs;

72 i‡(
p
->
Êags
 &
DEF_IS_PREDEF
)

74 
	`yyîr‹
("OSÉrror:IllegalÅoÑedefineÖredefined value.");

77 i‡(
«rgs
 !
p
->«rg†|| 
	`°rcmp
(
exps
,Ö->exps) )

79 
buf
[200+
NSIZE
];

81 
	`•rötf
(
buf
, "OS:Ñedeföôi⁄ o‡#deföê%s\n", 
«me
);

82 
	`yyw¨n
(
buf
);

84 
p
->
exps
 = (*)
	`DREALLOC
’->exps, 
	`°æí
”xpsË+ 1, 
TAG_COMPILER
, "add_define:Ñedef");

85 
	`°r˝y
(
p
->
exps
,Éxps);

86 
p
->
«rgs
 =Çargs;

88 #i‚de‡
LEXER


89 
p
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

95 
p
 = 
	`ALLOCATE
(
de‚_t
, 
TAG_COMPILER
, "add_define: def");

96 
p
->
«me
 = (*)
	`DXALLOC
(
	`°æí
“ameË+ 1, 
TAG_COMPILER
, "add_define: defÇame");

97 
	`°r˝y
(
p
->
«me
,Çame);

98 
p
->
exps
 = (*)
	`DXALLOC
(
	`°æí
”xpsË+ 1, 
TAG_COMPILER
, "add_define: defÉxps");

99 
	`°r˝y
(
p
->
exps
,Éxps);

100 
p
->
Êags
 = 0;

101 
p
->
«rgs
 =Çargs;

102 
h
 = 
	`defhash
(
«me
);

103 
p
->
√xt
 = 
de‚s
[
h
];

104 
de‚s
[
h
] = 
p
;

106 
	}
}

112 #ifde‡
LEXER


113 
	$h™dÀ_ñif
(*
•
)

115 
	$h™dÀ_ñif
()

118 i‡(
i·›
)

120 i‡(
i·›
->
°©e
 =
EXPECT_ELSE
)

123 
c⁄d
;

124 
if°©e_t
 *
p
 = 
i·›
;

127 
i·›
 = 
p
->
√xt
;

128 
	`FREE
–(*)
p
);

130 #ifde‡
LEXER


131 *--
ouç
 = '\0';

132 
	`add_öput
(
•
);

134 
c⁄d
 = 
	`c⁄d_gë_exp
(0);

135 #ifde‡
LEXER


136 i‡(*
ouç
++)

138 
	`yyîr‹
("OSÉrror : ConditionÅoo complex in #elif");

139 *
ouç
++)

142 i‡(*
ouç
 != '\n')

144 
	`yyîr‹
("OSÉrror: ConditionÅoo complex in #elif");

149 
	`h™dÀ_c⁄d
(
c⁄d
);

159 
	`skù_to
("endif", (*)0);

164 
	`yyîr‹p
("OSÉrror: Unexpected %celif");

166 
	}
}

168 
	$h™dÀ_ñ£
()

170 i‡(
i·›
)

172 i‡(
i·›
->
°©e
 =
EXPECT_ELSE
)

174 
i·›
->
°©e
 = 
EXPECT_ENDIF
;

178 
	`skù_to
("endif", (*)0);

183 
	`yyîr‹p
("OSÉrror: Unexpected %cendif");

185 
	}
}

187 
	$h™dÀ_ídif
()

189 i‡(
i·›
 && (i·›->
°©e
 =
EXPECT_ENDIF
 || i·›->°©ê=
EXPECT_ELSE
) )

191 
if°©e_t
 *
p
 = 
i·›
;

193 
i·›
 = 
p
->
√xt
;

194 
	`FREE
–(*)
p
);

198 
	`yyîr‹p
("OSÉrror: Unexpected %cendif");

200 
	}
}

202 
	#BNOT
 1

	)

203 
	#LNOT
 2

	)

204 
	#UMINUS
 3

	)

205 
	#UPLUS
 4

	)

207 
	#MULT
 1

	)

208 
	#DIV
 2

	)

209 
	#MOD
 3

	)

210 
	#BPLUS
 4

	)

211 
	#BMINUS
 5

	)

212 
	#LSHIFT
 6

	)

213 
	#RSHIFT
 7

	)

214 
	#LESS
 8

	)

215 
	#LEQ
 9

	)

216 
	#GREAT
 10

	)

217 
	#GEQ
 11

	)

218 
	#EQ
 12

	)

219 
	#NEQ
 13

	)

220 
	#BAND
 14

	)

221 
	#XOR
 15

	)

222 
	#BOR
 16

	)

223 
	#LAND
 17

	)

224 
	#LOR
 18

	)

225 
	#QMARK
 19

	)

227 
	g_›èb
[] =

232 
	g›èb2
[] =

234 
BNOT
, 0, 0, 
LNOT
, '=', 
NEQ
, 7, 0, 0, 
UMINUS
, 0, 
BMINUS
, 10, 
UPLUS
, 0, 
BPLUS
, 10, 0, 0, 
MULT
, 11, 0, 0, 
DIV
, 11, 0, 0, 
MOD
, 11, 0, '<', 
LSHIFT
, 9, '=', 
LEQ
, 8, 0, 
LESS
, 8, 0, '>', 
RSHIFT
, 9, '=',

235 
GEQ
, 8, 0, 
GREAT
, 8, 0, '=', 
EQ
, 7, 0, 0, 0, '&', 
LAND
, 3, 0, 
BAND
, 6, 0, '|', 
LOR
, 2, 0, 
BOR
, 4, 0, 0, 
XOR
, 5, 0, 0, 
QMARK
, 1

238 
	#›èb1
 (
_›èb
-' ')

	)

240 
	$c⁄d_gë_exp
(
¥i‹ôy
)

242 
c
;

243 
vÆue
, 
vÆue2
, 
x
;

245 #ifde‡
LEXER


248 
c
 = 
	`exgëc
();

250 
	`is_w•a˚
(
c
) );

251 i‡(
c
 == '(')

254 i‡–(
c
 = 
	`exgëc
() ) == '(')

257 
vÆue
 = 
	`c⁄d_gë_exp
(0);

258 #ifde‡
LEXER


261 
c
 = 
	`exgëc
();

263 
	`is_w•a˚
(
c
) );

264 i‡(
c
 != ')')

266 
	`yyîr‹
("OSÉrror: bracketÇotÖaired in #if");

267 i‡(!
c
)

269 *--
ouç
 = '\0';

273 i‡–(
c
 = 
	`exgëc
() ) != ')')

275 
	`yyîr‹p
("OSÉrror: bracketÇotÖaired in %cif");

279 i‡(
	`i•un˘
(
c
) )

281 i‡(!(
x
 = 
›èb1
[
c
]) )

283 
	`yyîr‹p
("OSÉrror: illegal character in %cif");

286 
vÆue
 = 
	`c⁄d_gë_exp
(12);

287 
›èb2
[
x
 - 1])

289 
BNOT
:

290 
vÆue
 = ~value;

292 
LNOT
:

293 
vÆue
 = !value;

295 
UMINUS
:

296 
vÆue
 = - value;

298 
UPLUS
:

299 
vÆue
 = value;

302 
	`yyîr‹p
("OSÉrror: illegal unary operator in %cif");

307 
ba£
;

309 i‡(!
	`isdigô
(
c
) )

311 #ifde‡
LEXER


312 i‡(!
c
)

315 i‡(
c
 == '\n')

318 
	`yyîr‹p
("OSÉrror:missingÉxpression in %cif");

322 
	`yyîr‹p
("OSÉrror: illegal character in %cif");

326 
vÆue
 = 0;

327 i‡(
c
 != '0')

329 
ba£
 = 10;

333 
c
 = *
ouç
++;

334 i‡(
c
 == 'x' || c == 'X')

336 
ba£
 = 16;

337 
c
 = *
ouç
++;

341 
ba£
 = 8;

346 i‡(
	`isdigô
(
c
) )

348 
x
 = - '0';

350 i‡(
	`isuµî
(
c
) )

352 
x
 = - 'A' + 10;

354 i‡(
	`i¶owî
(
c
) )

356 
x
 = - 'a' + 10;

362 
x
 +
c
;

363 i‡(
x
 > 
ba£
)

367 
vÆue
 = vÆuê* 
ba£
 + 
x
;

368 
c
 = *
ouç
++;

370 
ouç
--;

374 #ifde‡
LEXER


377 
c
 = 
	`exgëc
();

379 
	`is_w•a˚
(
c
) );

380 i‡(!
	`i•un˘
(
c
) )

385 i‡(!
	`i•un˘
(
c
 = 
	`exgëc
() ) )

390 i‡(!(
x
 = 
›èb1
[
c
]) )

394 
vÆue2
 = *
ouç
++;

395 ;; 
x
 += 3)

397 i‡(!
›èb2
[
x
])

399 
ouç
--;

400 i‡(!
›èb2
[
x
 + 1])

402 
	`yyîr‹p
("OSÉrror: illegal operator use in %cif");

407 i‡(
vÆue2
 =
›èb2
[
x
])

412 i‡(
¥i‹ôy
 >
›èb2
[
x
 + 2])

414 i‡(
›èb2
[
x
])

416 *--
ouç
 = 
vÆue2
;

420 
vÆue2
 = 
	`c⁄d_gë_exp
(
›èb2
[
x
 + 2]);

421 
›èb2
[
x
 + 1])

423 
MULT
:

424 
vÆue
 *
vÆue2
;

426 
DIV
:

427 i‡(
vÆue2
)

429 
vÆue
 /
vÆue2
;

433 
	`yyîr‹p
("OSÉrror: division by 0 in %cif");

436 
MOD
:

437 i‡(
vÆue2
)

439 
vÆue
 %
vÆue2
;

443 
	`yyîr‹p
("OSÉrror: modulo by 0 in %cif");

446 
BPLUS
:

447 
vÆue
 +
vÆue2
;

449 
BMINUS
:

450 
vÆue
 -
vÆue2
;

452 
LSHIFT
:

453 
vÆue
 <<
vÆue2
;

455 
RSHIFT
:

456 
vÆue
 >>
vÆue2
;

458 
LESS
:

459 
vÆue
 = vÆuê< 
vÆue2
;

461 
LEQ
:

462 
vÆue
 = vÆuê<
vÆue2
;

464 
GREAT
:

465 
vÆue
 = vÆuê> 
vÆue2
;

467 
GEQ
:

468 
vÆue
 = vÆuê>
vÆue2
;

470 
EQ
:

471 
vÆue
 = vÆuê=
vÆue2
;

473 
NEQ
:

474 
vÆue
 = vÆuê!
vÆue2
;

476 
BAND
:

477 
vÆue
 &
vÆue2
;

479 
XOR
:

480 
vÆue
 ^
vÆue2
;

482 
BOR
:

483 
vÆue
 |
vÆue2
;

485 
LAND
:

486 
vÆue
 = vÆuê&& 
vÆue2
;

488 
LOR
:

489 
vÆue
 = vÆuê|| 
vÆue2
;

491 
QMARK
:

492 #ifde‡
LEXER


495 
c
 = 
	`exgëc
();

497 
	`is•a˚
(
c
) );

498 i‡(
c
 != ':')

500 
	`yyîr‹
("'?' without ':' in #if");

501 
ouç
--;

505 i‡–(
c
 = 
	`exgëc
() ) != ':')

507 
	`yyîr‹p
("OSÉrror: '?' without ':' in %cif");

510 i‡(
vÆue
)

512 
	`c⁄d_gë_exp
(1);

513 
vÆue
 = 
vÆue2
;

517 
vÆue
 = 
	`c⁄d_gë_exp
(1);

522 
ouç
--;

523  
vÆue
;

524 
	}
}

526 
	$h™dÀ_c⁄d
(
c
)

528 
if°©e_t
 *
p
;

530 i‡(!
c
)

532 
	`skù_to
("else", "endif");

534 
p
 = 
	`ALLOCATE
(
if°©e_t
, 
TAG_COMPILER
, "handle_cond");

535 
p
->
√xt
 = 
i·›
;

536 
i·›
 = 
p
;

537 
p
->
°©e
 = 
c
 ? 
EXPECT_ENDIF
 : 
EXPECT_ELSE
;

538 
	}
}

	@grammar/smalloc.c

11 
	#IN_MALLOC_WRAPPER


	)

12 
	#NO_OPCODES


	)

13 
	~"°d.h
"

14 
	~"fûe_ö˛.h
"

15 
	~"Õc_ö˛.h
"

16 
	~"simuœã.h
"

17 
	~"comm.h
"

19 #i‡
deföed
(
•¨c
)

20 
	#MALLOC_ALIGN
 8

	)

22 
	#MALLOC_ALIGN
 4

	)

25 
	#POINTER
 *

	)

26 
	#FREE_RETURN_TYPE
 

	)

27 
	#FREE_RETURN
 ;

	)

28 
	#SFREE_RETURN_TYPE
 
FREE_RETURN_TYPE


	)

29 
	#SFREE_RETURN
 
FREE_RETURN


	)

31 
	#FIT_STYLE_FAST_FIT


	)

33 #unde‡
LARGE_TRACE


35 
	#Áke
(
s
)

	)

37 
	#SMALL_BLOCK_MAX_BYTES
 32

	)

38 
	#SMALL_CHUNK_SIZE
 0x4000

	)

39 
	#CHUNK_SIZE
 0x40000

	)

41 
	#SMALL_BLOCK_MAX
 (
SMALL_BLOCK_MAX_BYTES
/
SIZEOF_INT
)

	)

43 
	#PREV_BLOCK
 0x80000000

	)

44 
	#THIS_BLOCK
 0x40000000

	)

45 
	#NO_REF
 0x20000000

	)

46 
	#MASK
 0x0FFFFFFF

	)

48 
	#MAGIC
 0x17952932

	)

52 
	tu
;

54 
u
 *
	gœ°_smÆl_chunk
 = 0;

55 
u
 *
	gsÊèbÀ
[
SMALL_BLOCK_MAX
] =

59 
u
 *
	g√xt_unu£d
 = 0;

60 
u
 
	gunu£d_size
 = 0;

64 #i‚de‡
FIT_STYLE_FAST_FIT


65 
u
 *
	g‰ì_li°
 = 0;

67 
u
 *
	g°¨t_√xt_block
 = 0;

71 
	gsmÆl_cou¡
[
SMALL_BLOCK_MAX
] =

75 
	gsmÆl_tŸÆ
[
SMALL_BLOCK_MAX
] =

79 
	gsmÆl_max
[
SMALL_BLOCK_MAX
] =

83 
	gsmÆl_‰ì
[
SMALL_BLOCK_MAX
] =

90 
	mcou¡î
, 
	msize
;

91 } 
	tt_°©
;

93 
	#cou¡
(
a
,
b
Ë{á.
size
+=(b); i‡((b)<0Ë--a.
cou¡î
; ++a.cou¡î; }

	)

94 
	#cou¡_up
(
a
,
b
Ë{á.
size
+=(b); ++a.
cou¡î
; }

	)

95 
	#cou¡_back
(
a
,
b
Ë{á.
size
-=(b); --a.
cou¡î
; }

	)

98 
	gdebugmÆloc
 = 0;

105 *
œrge_mÆloc
(
u
, );

106 
œrge_‰ì
(*);

107 
mÆloc_size_mask
();

108 
mÆlo˚d_size
(
POINTER
);

109 
show_block
(
u
*);

110 
ªmove_‰om_‰ì_li°
(
u
*);

111 
add_to_‰ì_li°
(
u
*);

112 
buûd_block
(
u
 *, u);

113 
m¨k_block
(
u
*);

114 *
esbrk
(
u
);

115 
ªs‹t_‰ì_li°
();

116 #ifde‡
DEBUG


117 
wÆk_√w_smÆl_mÆlo˚d
((*) () );

120 
	#s_size_±r
(
p
Ë’)

	)

121 
	#s_√xt_±r
(
p
Ë((
u
 **Ë’+1))

	)

123 
t_°©
 
	gsmÆl_Æloc_°©
 =

127 
t_°©
 
	gsmÆl_‰ì_°©
 =

131 
t_°©
 
	gsmÆl_chunk_°©
 =

136 
POINTER
 
	$smÆloc_mÆloc
(
size_t
 
size
)

139 
u
 *
ãmp
;

141 
	`DEBUG_CHECK
(
size
 == 0, "Malloc size 0.\n");

142 i‡(
size
 > 
SMALL_BLOCK_MAX_BYTES
)

144  
	`œrge_mÆloc
(
size
, 0);

147 #i‡
SIZEOF_PTR
 > 
SIZEOF_INT


148 i‡(
size
 < 
SIZEOF_PTR
)

150 
size
 = 
SIZEOF_PTR
;

154 
size
 = (size + 7) &~3;

155 
	#SIZE_INDEX
(
u_¨øy
, 
size
Ë(*(
u
*Ë((*)u_¨øy-8+size))

	)

156 
	#SIZE_PNT_INDEX
(
u_¨øy
, 
size
Ë(*(
u
**)((*)u_¨øy-8+size))

	)

158 
	`cou¡_up
(
smÆl_Æloc_°©
, 
size
);

160 
	`SIZE_INDEX
(
smÆl_cou¡
, 
size
) += 1;

161 
	`SIZE_INDEX
(
smÆl_tŸÆ
, 
size
) += 1;

162 i‡(
	`SIZE_INDEX
(
smÆl_cou¡
, 
size
Ë> SIZE_INDEX(
smÆl_max
, size) )

164 
	`SIZE_INDEX
(
smÆl_max
, 
size
ËSIZE_INDEX(
smÆl_cou¡
, size);

167 i‡(
ãmp
 = 
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
size
) )

171 
	`cou¡_back
(
smÆl_‰ì_°©
, 
size
);

172 
ãmp
++;

173 
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
size
Ë*(
u
 **)
ãmp
;

174 
	`Áke
("From freeÜist.");

175  (*)
ãmp
;

177 i‡(
unu£d_size
 < 
size
)

183 i‡(
unu£d_size
)

185 
	`cou¡_up
(
smÆl_‰ì_°©
, 
unu£d_size
);

186 *
	`s_size_±r
(
√xt_unu£d
Ë
unu£d_size
 >> 2;

187 *
	`s_√xt_±r
(
√xt_unu£d
Ë
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
unu£d_size
);

188 
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
unu£d_size
Ë
√xt_unu£d
;

191 
	`Áke
("AllocatingÇew small chunk.");

192 
√xt_unu£d
 = (
u
*)
	`œrge_mÆloc
(
SMALL_CHUNK_SIZE
 + 
SIZEOF_PTR
, 1);

193 i‡(
√xt_unu£d
 == 0)

198 *
√xt_unu£d
 = (
u
)
œ°_smÆl_chunk
;

199 
œ°_smÆl_chunk
 = 
√xt_unu£d
++;

200 
	`cou¡_up
(
smÆl_chunk_°©
, 
SMALL_CHUNK_SIZE
 + 
SIZEOF_PTR
);

201 
	`cou¡_up
(
smÆl_Æloc_°©
, 
SIZEOF_PTR
);

202 
unu£d_size
 = 
SMALL_CHUNK_SIZE
;

206 
	`Áke
("Allocated from chunk.");

209 
ãmp
 = (
u
*)
	`s_√xt_±r
(
√xt_unu£d
);

210 *
	`s_size_±r
(
√xt_unu£d
Ë
size
 >> 2;

211 
unu£d_size
 -
size
;

212 i‡(
unu£d_size
 < (
SIZEOF_INT
 + 
SIZEOF_PTR
) )

214 
	`cou¡_up
(
smÆl_Æloc_°©
, 
unu£d_size
);

215 i‡–(
size
 + 
unu£d_size
Ë< (
SMALL_BLOCK_MAX_BYTES
 + 
SIZEOF_INT
) )

220 
size
 +
unu£d_size
;

221 *
	`s_size_±r
(
√xt_unu£d
Ë
size
 >> 2;

223 
unu£d_size
 = 0;

225 
√xt_unu£d
 +
size
 >> 2;

227 
	`Áke
("allocation from chunk successful\n");

228  (*)
ãmp
;

229 
	}
}

235 #ifde‡
DEBUG


236 *
	gdebug_‰ì_±r
;

239 
	$mÆloc_size_mask
()

241  
MASK
;

242 
	}
}

248 
	$mÆlo˚d_size
(
POINTER
 
±r
)

250  (Ë––(
u
*)
±r
)[ - 1] &
MASK
);

251 
	}
}

257 
SFREE_RETURN_TYPE
 
	$smÆloc_‰ì
(
POINTER
 
±r
)

259 
u
 *
block
;

260 
u
 
i
;

262 i‡(!
±r
)

264 
SFREE_RETURN
;

267 #ifde‡
DEBUG


268 
debug_‰ì_±r
 = 
±r
;

270 
block
 = (
u
*)
±r
;

271 
block
 -= 1;

272 
i
 = (*
	`s_size_±r
(
block
Ë&
MASK
);

273 i‡–(*
	`s_size_±r
(
block
Ë&
MASK
Ë> 
SMALL_BLOCK_MAX
 + 1)

275 
	`Áke
("sfree callsÜarge_free");

276 
	`œrge_‰ì
(
±r
);

277 
SFREE_RETURN


279 
	`cou¡_back
(
smÆl_Æloc_°©
, 
i
 << 2);

280 
	`cou¡_up
(
smÆl_‰ì_°©
, 
i
 << 2);

281 
i
 -= 2;

282 *
	`s_√xt_±r
(
block
Ë
sÊèbÀ
[
i
];

283 
sÊèbÀ
[
i
] = 
block
;

284 
smÆl_‰ì
[
i
] += 1;

285 
	`Áke
("Freed");

286 
SFREE_RETURN


287 
	}
}

293 
	#BEST_FIT
 0

	)

294 
	#FIRST_FIT
 1

	)

295 
	#HYBRID
 2

	)

297 
	#fô_°yÀ
 
BEST_FIT


	)

299 #i‚de‡
fô_°yÀ


300 
	gfô_°yÀ
 = 
BEST_FIT
;

303 
	#l_size_±r
(
p
Ë’)

	)

304 
	#l_√xt_±r
(
p
Ë(*((
u
 **Ë’+1)))

	)

305 
	#l_¥ev_±r
(
p
Ë(*((
u
 **Ë((u **)’+1)+1)))

	)

306 
	#l_√xt_block
(
p
Ë’ + (
MASK
 & (*’))Ë)

	)

307 
	#l_¥ev_block
(
p
Ë’ - (
MASK
 & (*’-1))Ë)

	)

308 
	#l_¥ev_‰ì
(
p
Ë(!(*∞& 
PREV_BLOCK
))

	)

309 
	#l_√xt_‰ì
(
p
Ë(!(*
	`l_√xt_block
’Ë& 
THIS_BLOCK
))

	)

311 
	$show_block
(
u
 *
±r
)

313 
	`¥ötf
("[%c%d: %d] ", (*
±r
 &
THIS_BLOCK
 ? '+' : '-'), (Ìå, (Ë(*±∏&
MASK
) );

314 
	}
}

320 #ifde‡
FIT_STYLE_FAST_FIT


322 #i‡
deföed
(
©¨i°
Ë|| deföed (
sun
Ë|| deföed(
AMIGA
)

324 
SIGNED
 
	tbÆ™˚_t
;

326 
	#BALANCE_T_BITS
 8

	)

328 
	tbÆ™˚_t
;

330 
	#BALANCE_T_BITS
 16

	)

332 #i‡(
deföed
(
©¨i°
Ë&& !deföed(
ATARI_TT
)Ë|| deföed(
•¨c
Ë|| deföed(
AMIGA
)

334 
	#NO_BARREL_SHIFT


	)

337 
	s‰ì_block_s


339 
u
 
	msize
;

340 
‰ì_block_s
 *
	m∑ª¡
, *
	mÀ·
, *
	mright
;

341 
bÆ™˚_t
 
	mbÆ™˚
;

342 
	mÆign_dummy
;

343 } 
	t‰ì_block_t
;

348 
‰ì_block_t
 
dummy2
;

350 
‰ì_block_t
 
	gdummy
 =

352  0, &
dummy2
, 0, 0, 0

355 
‰ì_block_t
 
	gdummy2
 =

357  0, 0, &
dummy
, 0, - 1

360 
‰ì_block_t
 *
	g‰ì_åì
 = &
dummy2
;

362 #ifde‡
DEBUG_AVL


363 
	göc⁄si°ícy
 = 0;

365 
	$check_avl
(
‰ì_block_t
 *
∑ª¡
, fªe_block_à*
p
)

367 
À·
, 
right
;

369 i‡(!
p
)

373 
À·
 = 
	`check_avl
(
p
,Ö->left);

374 
right
 = 
	`check_avl
(
p
,Ö->right);

375 i‡(
p
->
bÆ™˚
 !
right
 - 
À·
 ||Ö->balance < - 1 ||Ö->balance > 1)

377 
	`¥ötf
("Inconsistency inávlÇode!\n");

378 
	`¥ötf
("node:%x\n", 
p
);

379 
	`¥ötf
("size: %d\n", 
p
->
size
);

380 
	`¥ötf
("À·Çode:%x\n", 
p
->
À·
);

381 
	`¥ötf
("À· height: %d\n", 
À·
);

382 
	`¥ötf
("righànode:%x\n", 
p
->
right
);

383 
	`¥ötf
("righàheight: %d\n", 
right
);

384 
	`¥ötf
("ÆÀged bÆ™˚: %d\n", 
p
->
bÆ™˚
);

385 
öc⁄si°ícy
 = 1;

387 i‡(
p
->
∑ª¡
 !=Öarent)

389 
	`¥ötf
("Inconsistency inávlÇode!\n");

390 
	`¥ötf
("node:%x\n", 
p
);

391 
	`¥ötf
("size: %d\n", 
p
->
size
);

392 
	`¥ötf
("∑ª¡: %x\n", 
∑ª¡
);

393 
	`¥ötf
("∑ª¡ size: %d\n", 
∑ª¡
->
size
);

394 
	`¥ötf
("ÆÀgedÖ¨ít: %x\n", 
p
->
∑ª¡
);

395 
	`¥ötf
("ÆÀgedÖ¨íàsize: %d\n", 
p
->
∑ª¡
->
size
);

396 
	`¥ötf
("À· height: %d\n", 
À·
);

397 
	`¥ötf
("righàheight: %d\n", 
right
);

398 
	`¥ötf
("ÆÀged bÆ™˚: %d\n", 
p
->
bÆ™˚
);

399 
öc⁄si°ícy
 = 1;

401  
À·
 > 
right
 ?Üeft + 1:Ñight + 1;

402 
	}
}

405 
	$do_check_avl
()

407 
	`check_avl
(0, 
‰ì_åì
);

408 i‡(
öc⁄si°ícy
)

410 
	`fÊush
(
°dîr
);

411 
	`fÊush
(
°dout
);

412 
	`Áèl
("Inconsistency could crashÅhe OS\n");

415 
	}
}

418 
t_°©
 
	gœrge_‰ì_°©
;

419 
	$ªmove_‰om_‰ì_li°
(
u
 *
±r
)

421 
‰ì_block_t
 *
p
, *
q
, *
r
, *
s
, *
t
;

423 
	`Áke
–(
	`do_check_avl
(), "remove_from_free_list called") );

424 
p
 = (
‰ì_block_t
*Ë(
±r
 + 1);

425 
	`cou¡_back
(
œrge_‰ì_°©
, 
p
->
size
 << 2);

426 #ifde‡
DEBUG_AVL


427 
	`¥ötf
("node:%x\n", 
p
);

428 
	`¥ötf
("size:%d\n", 
p
->
size
);

430 i‡(
p
->
À·
)

432 i‡(
q
 = 
p
->
right
)

434 
	`Áke
("two childs");

435 
s
 = 
q
;

436 ; 
r
 = 
q
, q =Ñ->
À·
;)

438 i‡(
r
 =
s
)

440 
r
->
À·
 = 
s
 = 
p
->left;

441 
s
->
∑ª¡
 = 
r
;

442 i‡(
r
->
∑ª¡
 = 
s
 = 
p
->parent)

444 i‡(
p
 =
s
->
À·
)

446 
s
->
À·
 = 
r
;

450 
s
->
right
 = 
r
;

455 
‰ì_åì
 = 
r
;

457 
r
->
bÆ™˚
 = 
p
->balance;

458 
p
 = 
r
;

459 
bÆ™˚_right
;

463 
t
 = 
r
->
∑ª¡
;

464 i‡(
t
->
À·
 = 
s
 = 
r
->
right
)

466 
s
->
∑ª¡
 = 
t
;

468 
r
->
bÆ™˚
 = 
p
->balance;

469 
r
->
À·
 = 
s
 = 
p
->left;

470 
s
->
∑ª¡
 = 
r
;

471 
r
->
right
 = 
s
 = 
p
->right;

472 
s
->
∑ª¡
 = 
r
;

473 i‡(
r
->
∑ª¡
 = 
s
 = 
p
->parent)

475 i‡(
p
 =
s
->
À·
)

477 
s
->
À·
 = 
r
;

481 
s
->
right
 = 
r
;

486 
‰ì_åì
 = 
r
;

488 
p
 = 
t
;

489 
bÆ™˚_À·
;

500 
	`Áke
("noÑight child, butÜeft child");

501 
s
 = 
p
;

502 
p
 = 
s
->
∑ª¡
;

503 
r
 = 
s
->
À·
;

504 
r
->
∑ª¡
 = 
p
;

505 i‡(
s
 =
p
->
À·
)

507 
p
->
À·
 = 
r
;

508 
bÆ™˚_À·
;

512 
p
->
right
 = 
r
;

513 
bÆ™˚_right
;

524 
	`Áke
("noÜeft child");

525 
s
 = 
p
;

526 
p
 = 
s
->
∑ª¡
;

527 i‡(
q
 = 
r
 = 
s
->
right
)

529 
r
->
∑ª¡
 = 
p
;

531 i‡(
s
 =
p
->
À·
)

533 
p
->
À·
 = 
r
;

534 
bÆ™˚_À·
;

538 
p
->
right
 = 
r
;

539 
bÆ™˚_right
;

542 
bÆ™˚_q
: 
r
 = 
p
;

543 
p
 = 
q
;

544 i‡(
r
 =
p
->
right
)

546 
bÆ™˚_t
 
b
;

548 
bÆ™˚_right
: 
b
 = 
p
->
bÆ™˚
;

549 i‡(
b
 > 0)

551 
p
->
bÆ™˚
 = 0;

552 i‡(
q
 = 
p
->
∑ª¡
)

554 
bÆ™˚_q
;

558 i‡(
b
 < 0)

560 
r
 = 
p
->
À·
;

561 
b
 = 
r
->
bÆ™˚
;

562 i‡(
b
 <= 0)

565 #ifde‡
DEBUG_AVL


566 
	`Áke
("R-Rotation.");

567 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

569 i‡(
p
->
À·
 = 
s
 = 
r
->
right
)

571 
s
->
∑ª¡
 = 
p
;

573 
r
->
right
 = 
p
;

574 
s
 = 
p
->
∑ª¡
;

575 
p
->
∑ª¡
 = 
r
;

576 
b
 += 1;

577 
r
->
bÆ™˚
 = 
b
;

578 
b
 = - b;

579 #ifde‡
DEBUG_AVL


580 
	`¥ötf
("nodêr: %x\n", 
r
);

581 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

582 
	`¥ötf
("nodêp: %x\n", 
p
);

583 
p
->
bÆ™˚
 = 
b
;

584 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

585 
	`¥ötf
("r-height: %d\n", 
	`check_avl
(
r
->
∑ª¡
,Ñ) );

587 i‡(
r
->
∑ª¡
 = 
s
)

589 i‡(
p
->
bÆ™˚
 = 
b
)

591 i‡(
p
 =
s
->
À·
)

593 
s
->
À·
 = 
r
;

598 
s
->
right
 = 
r
;

602 i‡(
p
 =
s
->
À·
)

604 
	`Áke
("left fromÖarent");

605 
bÆ™˚_À·_s
;

609 
	`Áke
("right fromÖarent");

610 
p
 = 
s
;

611 
p
->
right
 = 
r
;

612 
bÆ™˚_right
;

615 
p
->
bÆ™˚
 = 
b
;

616 
‰ì_åì
 = 
r
;

623 
bÆ™˚_t
 
b2
;

625 
	`Áke
("LR-Rotation.");

626 
t
 = 
r
->
right
;

627 
b
 = 
t
->
bÆ™˚
;

628 i‡(
p
->
À·
 = 
s
 = 
t
->
right
)

630 
s
->
∑ª¡
 = 
p
;

632 i‡(
r
->
right
 = 
s
 = 
t
->
À·
)

634 
s
->
∑ª¡
 = 
r
;

636 
t
->
À·
 = 
r
;

637 
t
->
right
 = 
p
;

638 
r
->
∑ª¡
 = 
t
;

639 
s
 = 
p
->
∑ª¡
;

640 
p
->
∑ª¡
 = 
t
;

641 #ifde‡
NO_BARREL_SHIFT


642 
b
 = - b;

643 
b2
 = 
b
 >> 1;

644 
r
->
bÆ™˚
 = 
b2
;

645 
b
 -
b2
;

646 
p
->
bÆ™˚
 = 
b
;

648 
b2
 = ()
b
 >> 7;

649 
p
->
bÆ™˚
 = 
b2
;

650 
b2
 = - b2 - 
b
;

651 
r
->
bÆ™˚
 = 
b2
;

653 
t
->
bÆ™˚
 = 0;

654 #ifde‡
DEBUG_AVL


655 
	`¥ötf
("t-height: %d\n", 
	`check_avl
(
t
->
∑ª¡
,Å) );

657 i‡(
t
->
∑ª¡
 = 
s
)

659 i‡(
p
 =
s
->
À·
)

661 
p
 = 
s
;

662 
s
->
À·
 = 
t
;

663 
bÆ™˚_À·
;

667 
p
 = 
s
;

668 
s
->
right
 = 
t
;

669 
bÆ™˚_right
;

672 
‰ì_åì
 = 
t
;

679 
p
->
bÆ™˚
 = - 1;

686 
bÆ™˚_t
 
b
;

688 
bÆ™˚_À·
;

689 
bÆ™˚_À·_s
: 
p
 = 
s
;

690 
s
->
À·
 = 
r
;

691 
bÆ™˚_À·
: 
b
 = 
p
->
bÆ™˚
;

692 i‡(
b
 < 0)

694 
p
->
bÆ™˚
 = 0;

695 i‡(
q
 = 
p
->
∑ª¡
)

697 
bÆ™˚_q
;

701 i‡(
b
 > 0)

703 
r
 = 
p
->
right
;

704 
b
 = 
r
->
bÆ™˚
;

705 i‡(
b
 >= 0)

708 #ifde‡
DEBUG_AVL


709 
	`Áke
("L-Rotation.");

710 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

712 i‡(
p
->
right
 = 
s
 = 
r
->
À·
)

714 
s
->
∑ª¡
 = 
p
;

716 
	`Áke
("subtreeÑelocated");

717 
r
->
À·
 = 
p
;

718 
s
 = 
p
->
∑ª¡
;

719 
p
->
∑ª¡
 = 
r
;

720 
b
 -= 1;

721 
r
->
bÆ™˚
 = 
b
;

722 
b
 = - b;

723 #ifde‡
DEBUG_AVL


724 
	`Áke
("balances calculated");

725 
	`¥ötf
("nodêr: %x\n", 
r
);

726 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

727 
	`¥ötf
("nodêp: %x\n", 
p
);

728 
p
->
bÆ™˚
 = 
b
;

729 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

730 
	`¥ötf
("r-height: %d\n", 
	`check_avl
(
r
->
∑ª¡
,Ñ) );

732 i‡(
r
->
∑ª¡
 = 
s
)

734 i‡(
p
->
bÆ™˚
 = 
b
)

736 i‡(
p
 =
s
->
À·
)

738 
s
->
À·
 = 
r
;

743 
s
->
right
 = 
r
;

747 i‡(
p
 =
s
->
À·
)

749 
	`Áke
("left fromÖarent");

750 
bÆ™˚_À·_s
;

754 
	`Áke
("right fromÖarent");

755 
p
 = 
s
;

756 
p
->
right
 = 
r
;

757 
bÆ™˚_right
;

760 
p
->
bÆ™˚
 = 
b
;

761 
‰ì_åì
 = 
r
;

768 
bÆ™˚_t
 
b2
;

770 
	`Áke
("RL-Rotation.");

771 
t
 = 
r
->
À·
;

772 
b
 = 
t
->
bÆ™˚
;

773 i‡(
p
->
right
 = 
s
 = 
t
->
À·
)

775 
s
->
∑ª¡
 = 
p
;

777 i‡(
r
->
À·
 = 
s
 = 
t
->
right
)

779 
s
->
∑ª¡
 = 
r
;

781 
t
->
right
 = 
r
;

782 
t
->
À·
 = 
p
;

783 
r
->
∑ª¡
 = 
t
;

784 
s
 = 
p
->
∑ª¡
;

785 
p
->
∑ª¡
 = 
t
;

786 #ifde‡
NO_BARREL_SHIFT


787 
b
 = - b;

788 
b2
 = 
b
 >> 1;

789 
p
->
bÆ™˚
 = 
b2
;

790 
b
 -
b2
;

791 
r
->
bÆ™˚
 = 
b
;

793 
b2
 = ()
b
 >> 7;

794 
r
->
bÆ™˚
 = 
b2
;

795 
b2
 = - b2 - 
b
;

796 
p
->
bÆ™˚
 = 
b2
;

798 
t
->
bÆ™˚
 = 0;

799 i‡(
t
->
∑ª¡
 = 
s
)

801 i‡(
p
 =
s
->
À·
)

803 
p
 = 
s
;

804 
s
->
À·
 = 
t
;

805 
bÆ™˚_À·
;

809 
s
->
right
 = 
t
;

810 
p
 = 
s
;

811 
bÆ™˚_right
;

814 
‰ì_åì
 = 
t
;

821 
p
->
bÆ™˚
++;

825 
	}
}

827 
	$add_to_‰ì_li°
(
u
 *
±r
)

829 
u
 
size
;

830 
‰ì_block_t
 *
p
, *
q
, *
r
;

838 
	`Áke
–(
	`do_check_avl
(), "add_to_free_list called") );

839 
size
 = *
±r
 &
MASK
;

840 #ifde‡
DEBUG_AVL


841 
	`¥ötf
("size:%d\n", 
size
);

843 
q
 = (
‰ì_block_t
*)
size
;

845 
r
 = (
‰ì_block_t
*Ë(
±r
 + 1);

846 
	`cou¡_up
(
œrge_‰ì_°©
, 
size
 << 2);

847 
q
 = 
‰ì_åì
;

850 
p
 = (
‰ì_block_t
*)
q
;

851 #ifde‡
DEBUG_AVL


852 
	`¥ötf
("checkedÇodêsizê%d\n", 
p
->
size
);

854 i‡(
size
 < 
p
->size)

856 i‡(
q
 = 
p
->
À·
)

860 
	`Áke
("addÜeft");

861 
p
->
À·
 = 
r
;

867 i‡(
q
 = 
p
->
right
)

871 
	`Áke
("addÑight");

872 
p
->
right
 = 
r
;

876 
r
->
size
 = size;

877 
r
->
∑ª¡
 = 
p
;

878 
r
->
À·
 = 0;

879 
r
->
right
 = 0;

880 
r
->
bÆ™˚
 = 0;

881 #ifde‡
DEBUG_AVL


882 
	`Áke
("builtÇewÜeaf.");

883 
	`¥ötf
("p->bÆ™˚:%d\n", 
p
->
bÆ™˚
);

887 
‰ì_block_t
 *
s
;

889 i‡(
r
 =
p
->
À·
)

891 
bÆ™˚_t
 
b
;

893 i‡(!(
b
 = 
p
->
bÆ™˚
) )

895 #ifde‡
DEBUG_AVL


896 
	`¥ötf
("p->size: %d\n", 
p
->
size
);

897 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

898 
	`¥ötf
("p->right-h: %d\n", 
	`check_avl
(
p
,Ö->
right
) );

899 
	`¥ötf
("p->À· -h: %d\n", 
	`check_avl
(
p
,Ö->
À·
) );

900 
	`Áke
("growthÖropagation fromÜeft side");

902 
p
->
bÆ™˚
 = - 1;

904 i‡(
b
 < 0)

906 #ifde‡
DEBUG_AVL


907 
	`¥ötf
("p->bÆ™˚:%d\n", 
p
->
bÆ™˚
);

909 i‡(
r
->
bÆ™˚
 < 0)

912 
	`Áke
("R-Rotation");

913 i‡(
p
->
À·
 = 
s
 = 
r
->
right
)

915 
s
->
∑ª¡
 = 
p
;

917 
r
->
right
 = 
p
;

918 
p
->
bÆ™˚
 = 0;

919 
r
->
bÆ™˚
 = 0;

920 
s
 = 
p
->
∑ª¡
;

921 
p
->
∑ª¡
 = 
r
;

922 i‡(
r
->
∑ª¡
 = 
s
)

924 i‡(
s
->
À·
 =
p
)

926 
s
->
À·
 = 
r
;

930 
s
->
right
 = 
r
;

935 
‰ì_åì
 = 
r
;

942 
bÆ™˚_t
 
b2
;

943 
‰ì_block_t
 *
t
 = 
r
->
right
;

945 #ifde‡
DEBUG_AVL


946 
	`Áke
("LR-Rotation");

947 
	`¥ötf
("à%x\n", 
t
);

948 
	`¥ötf
("r->bÆ™˚:%d\n", 
r
->
bÆ™˚
);

950 i‡(
p
->
À·
 = 
s
 = 
t
->
right
)

952 
s
->
∑ª¡
 = 
p
;

954 
	`Áke
("relocatedÑight subtree");

955 
t
->
right
 = 
p
;

956 i‡(
r
->
right
 = 
s
 = 
t
->
À·
)

958 
s
->
∑ª¡
 = 
r
;

960 
	`Áke
("relocatedÜeft subtree");

961 
t
->
À·
 = 
r
;

962 
b
 = 
t
->
bÆ™˚
;

963 #ifde‡
NO_BARREL_SHIFT


964 
b
 = - b;

965 
b2
 = 
b
 >> 1;

966 
r
->
bÆ™˚
 = 
b2
;

967 
b
 -
b2
;

968 
p
->
bÆ™˚
 = 
b
;

970 
b2
 = ()
b
 >> 7;

971 
p
->
bÆ™˚
 = 
b2
;

972 
b2
 = - b2 - 
b
;

973 
r
->
bÆ™˚
 = 
b2
;

975 
t
->
bÆ™˚
 = 0;

976 
	`Áke
("balances calculated");

977 
s
 = 
p
->
∑ª¡
;

978 
p
->
∑ª¡
 = 
t
;

979 
r
->
∑ª¡
 = 
t
;

980 i‡(
t
->
∑ª¡
 = 
s
)

982 i‡(
s
->
À·
 =
p
)

984 
s
->
À·
 = 
t
;

988 
s
->
right
 = 
t
;

993 
‰ì_åì
 = 
t
;

995 #ifde‡
DEBUG_AVL


996 
	`¥ötf
("p->bÆ™˚:%d\n", 
p
->
bÆ™˚
);

997 
	`¥ötf
("r->bÆ™˚:%d\n", 
r
->
bÆ™˚
);

998 
	`¥ötf
("t->bÆ™˚:%d\n", 
t
->
bÆ™˚
);

999 
	`Áke
–(
	`do_check_avl
(), "LR-Rotation completed.") );

1007 
p
->
bÆ™˚
 = 0;

1008 
	`Áke
("growth ofÜeft side balancedÅheÇode");

1015 
bÆ™˚_t
 
b
;

1017 i‡(!(
b
 = 
p
->
bÆ™˚
) )

1019 
	`Áke
("growthÖropagation fromÑight side");

1020 
p
->
bÆ™˚
++;

1022 i‡(
b
 > 0)

1024 i‡(
r
->
bÆ™˚
 > 0)

1027 
	`Áke
("L-Rotation");

1028 i‡(
p
->
right
 = 
s
 = 
r
->
À·
)

1030 
s
->
∑ª¡
 = 
p
;

1032 
r
->
À·
 = 
p
;

1033 
p
->
bÆ™˚
 = 0;

1034 
r
->
bÆ™˚
 = 0;

1035 
s
 = 
p
->
∑ª¡
;

1036 
p
->
∑ª¡
 = 
r
;

1037 i‡(
r
->
∑ª¡
 = 
s
)

1039 i‡(
s
->
À·
 =
p
)

1041 
s
->
À·
 = 
r
;

1045 
s
->
right
 = 
r
;

1050 
‰ì_åì
 = 
r
;

1057 
bÆ™˚_t
 
b2
;

1058 
‰ì_block_t
 *
t
 = 
r
->
À·
;

1060 #ifde‡
DEBUG_AVL


1061 
	`Áke
("RL-Rotation");

1062 
	`¥ötf
("à%x\n", 
t
);

1063 
	`¥ötf
("r->bÆ™˚:%d\n", 
r
->
bÆ™˚
);

1065 i‡(
p
->
right
 = 
s
 = 
t
->
À·
)

1067 
s
->
∑ª¡
 = 
p
;

1069 
	`Áke
("relocatedÜeft subtree");

1070 
t
->
À·
 = 
p
;

1071 i‡(
r
->
À·
 = 
s
 = 
t
->
right
)

1073 
s
->
∑ª¡
 = 
r
;

1075 
	`Áke
("relocatedÑight subtree");

1076 
t
->
right
 = 
r
;

1077 
b
 = 
t
->
bÆ™˚
;

1078 #ifde‡
NO_BARREL_SHIFT


1079 
b
 = - b;

1080 
b2
 = 
b
 >> 1;

1081 
p
->
bÆ™˚
 = 
b2
;

1082 
b
 -
b2
;

1083 
r
->
bÆ™˚
 = 
b
;

1085 
b2
 = ()
b
 >> 7;

1086 
r
->
bÆ™˚
 = 
b2
;

1087 
b2
 = - b2 - 
b
;

1088 
p
->
bÆ™˚
 = 
b2
;

1090 
t
->
bÆ™˚
 = 0;

1091 
s
 = 
p
->
∑ª¡
;

1092 
p
->
∑ª¡
 = 
t
;

1093 
r
->
∑ª¡
 = 
t
;

1094 i‡(
t
->
∑ª¡
 = 
s
)

1096 i‡(
s
->
À·
 =
p
)

1098 
s
->
À·
 = 
t
;

1102 
s
->
right
 = 
t
;

1107 
‰ì_åì
 = 
t
;

1109 
	`Áke
("RL-Rotation completed.");

1116 #ifde‡
DEBUG_AVL


1117 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

1118 
	`¥ötf
("p->right-h: %d\n", 
	`check_avl
(
p
,Ö->
right
) );

1119 
	`¥ötf
("p->À· -h: %d\n", 
	`check_avl
(
p
,Ö->
À·
) );

1121 
p
->
bÆ™˚
 = 0;

1122 
	`Áke
("growth ofÑight side balancedÅheÇode");

1126 
r
 = 
p
;

1127 
p
 =Ö->
∑ª¡
;

1130 
q
 = 
p
);

1131 
	`Áke
–(
	`do_check_avl
(), "add_to_free_list successful") );

1132 
	}
}

1136 
	$show_‰ì_li°
()

1138 
u
 *
p
;

1140 
p
 = 
‰ì_li°
;

1141 
p
)

1143 
	`show_block
(
p
);

1144 
p
 = 
	`l_√xt_±r
(p);

1146 
	`¥ötf
("\n");

1147 
	}
}

1149 
t_°©
 
	gœrge_‰ì_°©
;

1150 
	$ªmove_‰om_‰ì_li°
(
u
 *
±r
)

1152 
	`cou¡_back
(
œrge_‰ì_°©
, (*
±r
 &
MASK
) << 2);

1154 i‡(
	`l_¥ev_±r
(
±r
) )

1156 
	`l_√xt_±r
(
	`l_¥ev_±r
(
±r
) ) =Ü_next_ptr(ptr);

1160 
‰ì_li°
 = 
	`l_√xt_±r
(
±r
);

1163 i‡(
	`l_√xt_±r
(
±r
) )

1165 
	`l_¥ev_±r
(
	`l_√xt_±r
(
±r
) ) =Ü_prev_ptr(ptr);

1167 
	}
}

1169 
	$add_to_‰ì_li°
(
u
 *
±r
)

1171 
	`puts
();

1173 
	`cou¡_up
(
œrge_‰ì_°©
, (*
±r
 &
MASK
) << 2);

1175 #ifde‡
DEBUG


1176 i‡(
‰ì_li°
 && 
	`l_¥ev_±r
(free_list) )

1178 
	`puts
("FreeÜist consistencyÉrror.");

1182 
	`l_√xt_±r
(
±r
Ë
‰ì_li°
;

1183 i‡(
‰ì_li°
)

1185 
	`l_¥ev_±r
(
‰ì_li°
Ë
±r
;

1187 
	`l_¥ev_±r
(
±r
) = 0;

1188 
‰ì_li°
 = 
±r
;

1189 
	}
}

1192 
buûd_block
 
	$P2
(

1193 
u
 *, 
±r
, u, 
size
)

1195 
u
 
tmp
;

1197 
tmp
 = (*
±r
 &
PREV_BLOCK
Ë| 
size
;

1198 *(
±r
 + 
size
 - 1) = size;

1199 *(
±r
Ë
tmp
;

1200 *(
±r
 + 
size
Ë&~
PREV_BLOCK
;

1201 
	}
}

1207 
m¨k_block
 
	$P1
(

1208 
u
 *, 
±r
)

1210 *
	`l_√xt_block
(
±r
Ë|
PREV_BLOCK
;

1211 *
±r
 |
THIS_BLOCK
;

1212 
	}
}

1218 
t_°©
 
	gsbrk_°©
;

1219 *
	$esbrk
(
u
 
size
)

1221 #ifde‡
SBRK_OK


1222 #ifde‡
NeXT


1224 *
addr
 = 
NULL
;

1225 *
cuºít_bªak
 = 
NULL
;

1226 
™ywhîe
 = 
FALSE
;

1227 
kîn_ªtu∫_t
 
ªt
;

1232 
addr
 = 
cuºít_bªak
;

1233 
ªt
 = 
	`vm_Æloˇã
(
	`èsk_£lf
(), (
vm_addªss_t
*Ë&
addr
, 
size
, 
™ywhîe
);

1234 i‡(
ªt
 !
KERN_SUCCESS
 && (
™ywhîe
 =
FALSE
) )

1239 
™ywhîe
 = 
TRUE
;

1240 
ªt
 = 
	`vm_Æloˇã
(
	`èsk_£lf
(), (
vm_addªss_t
*Ë&
addr
, 
size
, 
TRUE
);

1241 i‡(
ªt
 !
KERN_SUCCESS
)

1243  (
NULL
);

1246 
	`cou¡_up
(
sbrk_°©
, 
size
);

1247 
cuºít_bªak
 = (*Ë–(*)
addr
 + 
size
);

1248  (
addr
);

1251 #ifde‡
LATTICE


1253 *
	`sbrk
();

1254 *
addr
 = 
NULL
;

1256 
addr
 = (*)
	`sbrk
(
size
);

1257 i‡–(*)
addr
 == (*) ( - 1) )

1259  
NULL
;

1262 
	`cou¡_up
(
sbrk_°©
, 
size
);

1263  
addr
;

1267 #i‚de‡
löux


1268 *
	`sbrk
();

1271 *
cuºít_bªak
 = 0;

1273 i‡(
cuºít_bªak
 == 0)

1275 
cuºít_bªak
 = 
	`sbrk
(0);

1277 i‡(
	`brk
(
cuºít_bªak
 + 
size
) == - 1)

1282 
	`cou¡_up
(
sbrk_°©
, 
size
);

1283 
cuºít_bªak
 +
size
;

1284  
cuºít_bªak
 - 
size
;

1290 
	`cou¡_up
(
sbrk_°©
, 
size
);

1291  (*)
	`mÆloc
(
size
);

1294 
	}
}

1300 
t_°©
 
	gœrge_Æloc_°©
;

1301 *
	$œrge_mÆloc
(
u
 
size
, 
f‹˚_m‹e
)

1303 
u
 
ªÆ_size
;

1304 
u
 *
±r
;

1306 
	`Áke
("large_malloc called");

1307 #ifde‡
LARGE_TRACE


1308 
	`¥ötf
("ªque°:%d.", 
size
);

1310 
size
 = (size + 7) >> 2;

1311 
	`cou¡_up
(
œrge_Æloc_°©
, 
size
 << 2);

1313 
ªåy
: 
±r
 = 0;

1314 i‡(!
f‹˚_m‹e
)

1316 #ifde‡
FIT_STYLE_FAST_FIT


1318 
‰ì_block_t
 *
p
, *
q
, *
r
;

1319 
u
 
mö•lô
;

1320 
u
 
ãmpsize
;

1322 
±r
++;

1323 
mö•lô
 = 
size
 + 
SMALL_BLOCK_MAX
 + 1;

1324 
q
 = 
‰ì_åì
;

1327 
p
 = 
q
;

1328 #ifde‡
DEBUG_AVL


1329 
	`¥ötf
("checkedÇodêsizê%d\n", 
p
->
size
);

1331 
ãmpsize
 = 
p
->
size
;

1332 i‡(
mö•lô
 < 
ãmpsize
)

1334 
±r
 = (
u
*)
p
;

1335 i‡(
q
 = 
p
->
À·
)

1342 i‡(
size
 > 
ãmpsize
)

1344 i‡(
q
 = 
p
->
right
)

1353 i‡(
size
 =
ãmpsize
)

1355 
±r
 = (
u
*)
p
;

1359 i‡(
q
 = 
p
->
À·
)

1361 
r
 = 
p
;

1369 
p
 = 
q
;

1370 
ãmpsize
 = 
p
->
size
;

1371 i‡(
size
 < 
ãmpsize
)

1373 i‡(
q
 = 
p
->
À·
)

1379 i‡(
size
 > 
ãmpsize
)

1381 i‡(
q
 = 
p
->
right
)

1389 
±r
 = (
u
*)
p
;

1390 
found_fô
;

1393 
p
 = 
r
;

1395 
ãmpsize
 = 
p
->
size
;

1396 i‡(
mö•lô
 > 
ãmpsize
)

1398 i‡(
q
 = 
p
->
right
)

1402 
p
 = 
q
;

1403 
ãmpsize
 = 
p
->
size
;

1404 i‡(
mö•lô
 <
ãmpsize
)

1406 
±r
 = (
u
*)
p
;

1407 i‡(
q
 = 
p
->
À·
)

1416 i‡(
q
 = 
p
->
right
)

1428 
±r
 = (
u
*)
p
;

1432 
found_fô
: 
±r
--;

1434 
u
 
be°_size
;

1435 
u
 *
fú°
, *
be°
;

1437 #ifde‡
LARGE_TRACE


1438 
u
 
£¨ch_Àngth
 = 0;

1442 
fú°
 = 
be°
 = 0;

1443 
be°_size
 = 
MASK
;

1444 
±r
 = 
‰ì_li°
;

1446 
±r
)

1448 
u
 
ãmpsize
;

1450 #ifde‡
LARGE_TRACE


1451 
£¨ch_Àngth
++;

1454 
ãmpsize
 = *
±r
 &
MASK
;

1455 i‡(
ãmpsize
 =
size
)

1457 
be°
 = 
fú°
 = 
±r
;

1462 i‡(
ãmpsize
 >
size
 + 
SMALL_BLOCK_MAX
 + 1)

1465 i‡(!
fú°
)

1467 
fú°
 = 
±r
;

1468 i‡(
fô_°yÀ
 =
FIRST_FIT
)

1475 
ãmpsize
 -
size
;

1476 i‡(
ãmpsize
 > 0 &&Åempsizê<
be°_size
)

1478 
be°
 = 
±r
;

1479 
be°_size
 = 
ãmpsize
;

1482 
±r
 = 
	`l_√xt_±r
(ptr);

1485 #ifde‡
LARGE_TRACE


1486 
	`¥ötf
("£¨chÜígth %d\n", 
£¨ch_Àngth
);

1488 i‡(
fô_°yÀ
 =
BEST_FIT
)

1490 
±r
 = 
be°
;

1494 
±r
 = 
fú°
;

1500 i‡(!
±r
)

1503 
u
 
chunk_size
, 
block_size
;

1505 
block_size
 = 
size
 * 
SIZEOF_INT
;

1506 i‡(
f‹˚_m‹e
 || (
block_size
 > 
CHUNK_SIZE
) )

1508 
chunk_size
 = 
block_size
;

1512 
chunk_size
 = 
CHUNK_SIZE
;

1515 #ifde‡
SBRK_OK


1516 i‡(!
°¨t_√xt_block
)

1518 
	`cou¡_up
(
œrge_Æloc_°©
, 
SIZEOF_INT
);

1519 
°¨t_√xt_block
 = (
u
*)
	`esbrk
(
SIZEOF_INT
);

1520 i‡(!
°¨t_√xt_block
)

1522 
	`Áèl
("Couldn't mallocánything");

1524 *(
°¨t_√xt_block
Ë
PREV_BLOCK
;

1525 
	`Áke
("AllocatedÜittle fake block");

1527 
±r
 = (
u
*)
	`esbrk
(
chunk_size
);

1529 
±r
 = (
u
*)
	`esbrk
(
chunk_size
 + 
SIZEOF_INT
);

1531 i‡(
±r
 == 0)

1533 *
ª£rved_¨ó
;

1534 
¶ow_shut_down_to_do
;

1535 
goög_to_exô
 = 0;

1536 
mess1
[] = "Temporary out of MEMORY. FreeingÑeserve.\n";

1537 
mess2
[] = "Totally out of MEMORY.\n";

1539 i‡(
goög_to_exô
)

1541 
	`exô
(3);

1543 i‡(
ª£rved_¨ó
)

1545 
	`smÆloc_‰ì
(
ª£rved_¨ó
);

1546 
ª£rved_¨ó
 = 0;

1547 
	`wrôe
(1, 
mess1
, (mess1) - 1);

1548 
¶ow_shut_down_to_do
 = 6;

1549 
f‹˚_m‹e
 = 0;

1550 
ªåy
;

1552 i‡(
f‹˚_m‹e
)

1554 
f‹˚_m‹e
 = 0;

1555 
ªåy
;

1557 
goög_to_exô
 = 1;

1558 
	`wrôe
(1, 
mess2
, (mess2) - 1);

1559 ()
	`dump_åa˚
(0);

1560 
	`exô
(2);

1562 #ifde‡
SBRK_OK


1563 
±r
 -= 1;

1565 i‡(
°¨t_√xt_block
 =
±r
)

1567 
±r
 -= 1;

1568 
chunk_size
 +
SIZEOF_INT
;

1572 *
±r
 = 
PREV_BLOCK
;

1574 
°¨t_√xt_block
 = (
u
*Ë–(*)
±r
 + 
chunk_size
);

1576 
block_size
 = 
chunk_size
 / 
SIZEOF_INT
;

1580 
	`buûd_block
(
±r
, 
block_size
);

1581 i‡(
f‹˚_m‹e
)

1583 
	`Áke
("BuildÜittle block");

1587 
	`Áke
("Built memory block description.");

1589 *
	`l_√xt_block
(
±r
Ë
THIS_BLOCK
;

1590 
	`add_to_‰ì_li°
(
±r
);

1592 
	`ªmove_‰om_‰ì_li°
(
±r
);

1593 
ªÆ_size
 = *
±r
 &
MASK
;

1595 i‡(
ªÆ_size
 - 
size
)

1598 
	`buûd_block
(
±r
 + 
size
, 
ªÆ_size
 - size);

1599 
	`Áke
("BuiltÉmpty block");

1604 i‡(
ªÆ_size
 - 
size
 >
SMALL_BLOCK_MAX
 + 1)

1606 
	`add_to_‰ì_li°
(
±r
 + 
size
);

1610 
	`m¨k_block
(
±r
 + 
size
);

1612 
	`buûd_block
(
±r
, 
size
);

1614 
	`m¨k_block
(
±r
);

1615 
	`Áke
("builtállocated block");

1616  (*Ë(
±r
 + 1);

1617 
	}
}

1623 
	$œrge_‰ì
(*
±r
)

1625 
u
 
size
, *
p
;

1627 
p
 = (
u
*)
±r
;

1628 
p
 -= 1;

1629 
size
 = *
p
 &
MASK
;

1630 
	`cou¡_back
(
œrge_Æloc_°©
, (
size
 << 2) );

1632 i‡(!(*(
p
 + 
size
Ë&
THIS_BLOCK
) )

1634 
	`ªmove_‰om_‰ì_li°
(
p
 + 
size
);

1635 
size
 +(*(
p
 + sizeË&
MASK
);

1636 *
p
 = (*∞&
PREV_BLOCK
Ë| 
size
;

1638 i‡(
	`l_¥ev_‰ì
(
p
) )

1640 
	`ªmove_‰om_‰ì_li°
(
	`l_¥ev_block
(
p
) );

1641 
size
 +(*
	`l_¥ev_block
(
p
Ë&
MASK
);

1642 
p
 = 
	`l_¥ev_block
(p);

1644 
	`buûd_block
(
p
, 
size
);

1646 
	`add_to_‰ì_li°
(
p
);

1647 
	}
}

1653 
POINTER
 
	$smÆloc_ªÆloc
(
POINTER
 
p
, 
size_t
 
size
)

1655 *
q
, 
ﬁd_size
;

1656 *
t
;

1658 
q
 = (*)
p
;

1660 #i‡
MALLOC_ALIGN
 > 4

1661 !(
ﬁd_size
 = *--
q
) )

1663 
ﬁd_size
 = ( (ﬁd_sizê&
MASK
Ë- 1Ë*
SIZEOF_INT
;

1665 --
q
;

1666 
ﬁd_size
 = ( (*
q
 &
MASK
Ë- 1Ë*
SIZEOF_INT
;

1668 i‡(
ﬁd_size
 >
size
)

1670  
p
;

1673 
t
 = 
	`smÆloc_mÆloc
(
size
);

1674 i‡(
t
 == 0)

1679 
	`mem˝y
(
t
, 
p
, 
ﬁd_size
);

1680 
	`smÆloc_‰ì
(
p
);

1681  
t
;

1682 
	}
}

1688 
	$ªs‹t_‰ì_li°
()

1691 
	}
}

1697 #ifde‡
DO_MSTATS


1698 
	#dump_°©
(
°r
,
°©
Ë
	`outbuf_addv
(
ob
, så,°©.
cou¡î
,°©.
size
)

	)

1699 
	$show_m°©s
(
outbuf„r_t
 *
ob
, *
s
)

1701 
	`outbuf_addv
(
ob
, "Mem‹yáŒoˇti⁄ sèti°ic†%s\n", 
s
);

1702 
	`outbuf_add
(
ob
, "Type Count Space (bytes)\n");

1703 
	`dump_°©
("sbrkÑeque°s: %8d %10d (a)\n", 
sbrk_°©
);

1704 
	`dump_°©
("œrgêblocks: %8d %10d (b)\n", 
œrge_Æloc_°©
);

1705 
	`dump_°©
("œrgê‰ì blocks: %8d %10d (c)\n\n", 
œrge_‰ì_°©
);

1706 
	`dump_°©
("smÆ»chunks: %8d %10d (d)\n", 
smÆl_chunk_°©
);

1707 
	`dump_°©
("smÆ»blocks: %8d %10d (e)\n", 
smÆl_Æloc_°©
);

1708 
	`dump_°©
("smÆ»‰ì blocks: %8d %10d (f)\n", 
smÆl_‰ì_°©
);

1709 
	`outbuf_addv
(
ob
, "unu£d from cuºíàchunk %10d (g)\n\n", 
unu£d_size
);

1710 
	`outbuf_addv
(
ob
, " Small blocksáre stored in small chunks, whicháreállocatedás\n");

1711 
	`outbuf_addv
(
ob
, "large blocks. Therefore,ÅheÅotalÜarge blocksállocated (b)Ölus\n");

1712 
	`outbuf_addv
(
ob
, "theÜarge free blocks (c) shouldÉqualÅotal storage from sbrk (a).\n");

1713 
	`outbuf_addv
(
ob
, "Similarly, (e) + (f) + (g)Équals (d). TheÅotalámount of storage\n");

1714 
	`outbuf_addv
(
ob
, "wasted is (c) + (f) + (g);Åheámountállocated is (b) - (f) - (g).\n");

1715 
	}
}

1721 
POINTER
 
	$smÆloc_ˇŒoc
(
size_t
 
√Àm
, size_à
sizñ
)

1723 *
p
;

1725 i‡(
√Àm
 =0 || 
sizñ
 == 0)

1729 
p
 = 
	`smÆloc_mÆloc
(
√Àm
 *
sizñ
);

1730 i‡(
p
 == 0)

1734 ()
	`mem£t
(
p
, '\0', 
√Àm
 *
sizñ
);

1735  
p
;

1736 
	}
}

1742 #ifde‡
DEBUG


1747 
	$wÆk_√w_smÆl_mÆlo˚d
(
func
)(*funcË(
POINTER
, );

1749 
i
;

1750 
u
 *
p
, *
q
;

1752 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++)

1754 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1) )

1756 *
	`s_size_±r
(
p
Ë|
NO_REF
;

1759 i‡(
unu£d_size
)

1761 *
√xt_unu£d
 = 0;

1763 
p
 = 
œ°_smÆl_chunk
;Ö;Ö = *(
u
 **)p)

1765 
u
 *
íd
 = 
p
 - 1+’[ - 1] &
MASK
);

1767 
	`debug_mesßge
("sˇ¬ög chunk %x,Énd %x\n", (
u
Ë(
p
 - 1), (u)
íd
);

1768 
q
 = 
p
 + 1; q < 
íd
;)

1770 
u
 
size
 = *
	`s_size_±r
(
q
);

1772 i‡(!
size
)

1776 i‡(!(
size
 &
NO_REF
) )

1778 (*
func
Ë–(*)
	`s_√xt_±r
(
q
), (
size
 &
MASK
) << 2);

1779 *
	`s_size_±r
(
q
Ë|
NO_REF
;

1781 
q
 +
size
 &
MASK
;

1784 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++)

1786 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1) )

1788 *
	`s_size_±r
(
p
Ë&~
NO_REF
;

1791 
	}
}

1796 
	gdebug_smÆloc
 = 0;

1802 
	$vîify_sÊèbÀ
()

1804 
u
 *
p
;

1805 
i
, 
j
;

1806 
íd
;

1808 i‡(!
debug_smÆloc
)

1812 i‡(
unu£d_size
 > 
SMALL_CHUNK_SIZE
)

1814 
	`≠a
();

1816 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++)

1818 
j
 = 0, 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1), j++)

1820 i‡(
p
 < (
u
*Ë&
íd
 ||Ö > (u*)0xfffff)

1822 
	`≠a
();

1824 i‡(*
p
 - 2 !
i
)

1826 
	`≠a
();

1829 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2) )

1831 
	`≠a
();

1834 
p
 = 
‰ì_li°
;

1835 
p
)

1837 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2) )

1839 
	`≠a
();

1841 
p
 = 
	`l_√xt_±r
(p);

1843 
	}
}

1845 
	$vîify_‰ì
(
u
 *
±r
)

1847 
u
 *
p
;

1848 
i
, 
j
;

1850 i‡(!
debug_smÆloc
)

1854 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++)

1856 
j
 = 0, 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1), j++)

1858 i‡(*
p
 - 2 !
i
)

1860 
	`≠a
();

1862 i‡(
±r
 >
p
 &&Ötr <Ö + *p)

1864 
	`≠a
();

1866 i‡(
p
 >
±r
 &&Ö <Ötr + *ptr)

1868 
	`≠a
();

1870 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2) )

1872 
	`≠a
();

1877 
p
 = 
‰ì_li°
;

1878 
p
)

1880 i‡(
±r
 >
p
 &&Öå <Ö + (*∞&
MASK
) )

1882 
	`≠a
();

1884 i‡(
p
 >
±r
 &&Ö <Öå + (*±∏&
MASK
) )

1886 
	`≠a
();

1888 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2) )

1890 
	`≠a
();

1892 
p
 = 
	`l_√xt_±r
(p);

1894 i‡(
±r
 >
√xt_unu£d
 &&Öå <Çext_unu£d + (
unu£d_size
 >> 2) )

1896 
	`≠a
();

1898 
	}
}

1900 
	$≠a
()

1902 
i
;

1904 
i
 / 0;

1905 
	}
}

1907 *
	gªf
;

1908 
	$ã°_mÆloc
(*
p
)

1910 i‡(
p
 =
ªf
)

1912 
	`¥ötf
("Found 0x%x\n", 
p
);

1914 
	}
}

	@grammar/spec.h

1 
	#_FUNC_SPEC_


	)

2 
	~"°d.h
"

	@grammar/std.h

1 #i‚de‡
STD_H


2 
	#STD_H


	)

5 
	~"../ö˛ude/¨ch.h
"

7 #ifde‡
EDIT_SOURCE


8 
	#CONST


	)

9 
	#INLINE


	)

12 
	~"›ti⁄s_ö˛.h
"

13 
	~"c⁄figuª.h
"

15 #ifde‡
PEDANTIC


16 #unde‡
INLINE


17 
	#INLINE


	)

21 
	~"../ö˛ude/p‹èbûôy.h
"

22 
	~"../ö˛ude/ma¸os.h
"

23 #i‚de‡
_FUNC_SPEC_


24 
	~"°d_ö˛.h
"

25 
	~"mÆloc_ö˛.h
"

26 #i‚de‡
NO_OPCODES


27 
	~"›codes.h
"

31 #ifde‡
WIN32


32 
	#ouç
 
ouçå


	)

	@grammar/sysmalloc.c

1 
	#IN_MALLOC_WRAPPER


	)

2 
	#NO_OPCODES


	)

3 
	~"°d.h
"

4 
	~"Õc_ö˛.h
"

5 
	~"simuœã.h
"

6 
	~"comm.h
"

8 #ifde‡
DO_MSTATS


9 
	$show_m°©s
(
outbuf„r_t
 *
ob
, *
s
)

11 
	`outbuf_add
(
ob
, "QTZ_ServerEngine:No malloc statisticsávailable with SYSMALLOC\n");

12 
	}
}

	@grammar/wrappedmalloc.c

6 
	#IN_MALLOC_WRAPPER


	)

7 
	#NO_OPCODES


	)

8 
	~"°d.h
"

9 
	~"mÆloc.h
"

10 
	~"Õc_ö˛.h
"

11 
	~"comm.h
"

13 
	s°©s_s


15 
	m‰ì_ˇŒs
, 
	mÆloc_ˇŒs
, 
	mªÆloc_ˇŒs
;

16 } 
	t°©s_t
;

18 
°©s_t
 
	g°©s
;

20 
	$wøµedmÆloc_öô
()

22 
°©s
.
‰ì_ˇŒs
 = 0;

23 
°©s
.
Æloc_ˇŒs
 = 0;

24 
°©s
.
ªÆloc_ˇŒs
 = 0;

25 
	}
}

31 
INLINE
 *
	$wøµedªÆloc
(*
±r
, 
size
)

33 
°©s
.
ªÆloc_ˇŒs
++;

34  (*)
	`REALLOC
(
±r
, 
size
);

35 
	}
}

41 
INLINE
 *
	$wøµedmÆloc
(
size
)

43 
°©s
.
Æloc_ˇŒs
++;

44  (*)
	`MALLOC
(
size
);

45 
	}
}

51 
INLINE
 *
	$wøµedˇŒoc
(
nôems
, 
size
)

53 
°©s
.
Æloc_ˇŒs
++;

54  (*)
	`CALLOC
(
nôems
, 
size
);

55 
	}
}

61 
INLINE
 
	$wøµed‰ì
(*
±r
)

63 
°©s
.
‰ì_ˇŒs
++;

64 
	`FREE
(
±r
);

65 
	}
}

71 
	$dump_mÆloc_d©a
(
outbuf„r_t
 *
ob
)

73 
	`outbuf_add
(
ob
, "using wrapped malloc:\n\n");

74 
	`outbuf_addv
(
ob
, "#Ælo¯ˇŒs: %10lu\n", 
°©s
.
Æloc_ˇŒs
);

75 
	`outbuf_addv
(
ob
, "#‰ì cÆls: %10lu\n", 
°©s
.
‰ì_ˇŒs
);

76 
	`outbuf_addv
(
ob
, "#Ælo¯- #‰ì: %10lu\n", 
°©s
.
Æloc_ˇŒs
 - sèts.
‰ì_ˇŒs
);

77 
	`outbuf_addv
(
ob
, "#ªÆlo¯ˇŒs: %10lu\n", 
°©s
.
ªÆloc_ˇŒs
);

78 
	}
}

	@include/applies.h

7 #i‚de‡
APPLIES_H


8 
	#APPLIES_H


	)

11 
	#APPLY___INIT_SPECIAL_CHAR
 '#'

	)

12 
	#APPLY___INIT
 "#globÆ_öô#"

	)

13 
	#APPLY_AUTHOR_FILE
 "auth‹_fûe"

	)

14 
	#APPLY_CATCH_TELL
 "ˇtch_ãŒ"

	)

15 
	#APPLY_CLEAN_UP
 "˛ón_up"

	)

16 
	#APPLY_COMPILE_OBJECT
 "compûe_obje˘"

	)

17 
	#APPLY_CONNECT
 "c⁄√˘"

	)

18 
	#APPLY_CRASH
 "¸ash"

	)

19 
	#APPLY_CREATE
 "¸óã"

	)

20 
	#APPLY_EPILOG
 "ïûog"

	)

21 
	#APPLY_ERROR_HANDLER
 "îr‹_h™dÀr"

	)

22 
	#APPLY_GET_ED_BUFFER_SAVE_FILE_NAME
 "gë_ßve_fûe_«me"

	)

23 
	#APPLY_ID
 "id"

	)

24 
	#APPLY_INIT
 "öô"

	)

25 
	#APPLY_LOGON
 "log⁄"

	)

26 
	#APPLY_LOG_ERROR
 "log_îr‹"

	)

27 
	#APPLY_MAKE_PATH_ABSOLUTE
 "make_∑th_absﬁuã"

	)

28 
	#APPLY_FLAG
 "Êag"

	)

29 
	#APPLY_MOVE
 "move_‹_de°ru˘"

	)

30 
	#APPLY_NET_DEAD
 "√t_dód"

	)

31 
	#APPLY_OBJECT_NAME
 "obje˘_«me"

	)

32 
	#APPLY_PARSER_ERROR_MESSAGE
 "∑r£r_îr‹_mesßge"

	)

33 
	#APPLY_PRELOAD
 "¥ñﬂd"

	)

34 
	#APPLY_PRIVS_FILE
 "¥ivs_fûe"

	)

35 
	#APPLY_RESET
 "ª£t"

	)

36 
	#APPLY_SLOW_SHUTDOWN
 "¶ow_shutdown"

	)

	@include/arch.h

3 #i‚de‡
_ARCH_H_


4 
	#_ARCH_H_


	)

6 #ifde‡
£quít


7 
	#ARCH
 "SequíàDYNIX"

	)

10 #ifde‡
WINNT


11 
	#ARCH
 "Mi¸oso· Wödow†NT"

	)

14 #ifde‡
WIN95


15 
	#ARCH
 "Mi¸oso· Wödow†95"

	)

18 #ifde‡
_SEQUENT_


19 
	#ARCH
 "SequíàDYNIX/±x"

	)

22 #ifde‡
__FªeBSD__


23 
	#ARCH
 "FªeBSD"

	)

26 #ifde‡
__NëBSD__


27 #ifde‡
•¨c


28 
	#ARCH
 "NëBSD/•¨c"

	)

30 
	#ARCH
 "NëBSD"

	)

34 #ifde‡
NeXT


35 #ifde‡
m68k


36 
	#ARCH
 "NeXT/68k"

	)

38 
	#ARCH
 "NeXT"

	)

42 #ifde‡
_AIX


43 
	#ARCH
 "AIX"

	)

46 #ifde‡
ac˚l


47 
	#ARCH
 "Ac˚l"

	)

51 #i‡
deföed
(
sun
Ë&& !deföed(
SunOS_5
)

52 #i‡
deföed
(
__svr4__
Ë|| deföed(
__sﬁ__
Ë|| deföed(
SVR4
)

53 
	#SunOS_5


	)

55 #ifde‡
sun4


56 
	#ARCH
 "Sun4"

	)

59 #ifde‡
sun3


60 
	#ARCH
 "Sun3"

	)

62 
	#ARCH
 "Sun"

	)

68 #i‡
deföed
(
SunOS_5
)

69 
	#ARCH
 "Sﬁ¨is"

	)

72 #ifde‡
_AUX_SOURCE


73 
	#ARCH
 "A/UX"

	)

76 #ifde‡
löux


77 #ifde‡
__mc68000


78 
	#ARCH
 "Löux/m68k"

	)

80 
	#ARCH
 "Löux"

	)

84 #ifde‡
hp68k


85 
	#ARCH
 "HP/68k"

	)

88 #ifde‡
hµa


89 
	#ARCH
 "HP/PA-RISC"

	)

92 #ifde‡
¸ay


93 
	#ARCH
 "Cøy"

	)

96 #ifde‡
__Æpha


97 
	#ARCH
 "AÕha"

	)

100 #i‡!
deföed
(
ARCH
Ë&& deföed(
__bsdi__
)

101 
	#ARCH
 "BSDI"

	)

104 #i‡!
deföed
(
ARCH
Ë&& deföed(
__386BSD__
)

105 
	#ARCH
 "386bsd"

	)

108 #i‡!
deföed
(
ARCH
Ë&& deföed(
u…rix
)

109 
	#ARCH
 "U…rix"

	)

112 #i‡!
deföed
(
ARCH
Ë&& deföed(
hpux
)

113 
	#ARCH
 "HP/UX"

	)

116 #i‡!
deföed
(
ARCH
Ë&& deföed(
sgi
)

117 
	#ARCH
 "IRIX"

	)

120 #i‡(!
deföed
(
ARCH
Ë&& deföed(
SVR4
))

121 
	#ARCH
 "SVR4"

	)

124 #i‡!
deföed
(
ARCH
Ë&& deföed(
OSF
)

125 
	#ARCH
 "OSF/1"

	)

128 #i‡!
deföed
(
ARCH
Ë&& deföed(
LATTICE
)

129 
	#ARCH
 "Amiga"

	)

132 #i‚de‡
ARCH


133 
	#ARCH
 "unknow¿¨chôe˘uª"

	)

	@include/array.h

1 #i‚de‡
ARRAY_H


2 
	#ARRAY_H


	)

4 
	gdúty_m™age_s
 ;

6 
	s¨øy_s


8 
	mªf
;

9 #ifde‡
DEBUG


10 
	mexåa_ªf
;

12 
dúty_m™age_s
 *
	mdúty_mng
;

13 
	msize
;

14 
svÆue_t
 
	môem
[1];

15 } 
	t¨øy_t
;

17 
¨øy_t
 
the_nuŒ_¨øy
;

22 #ifde‡
ARRAY_STATS


23 
num_¨øys
;

24 
tŸÆ_¨øy_size
;

27 
ßmevÆ
(
svÆue_t
 *, svalue_t*);

28 
¨øy_t
 *
Æloˇã_¨øy
();

29 
¨øy_t
 *
Æloˇã_em±y_¨øy
();

30 
‰ì_¨øy
(
¨øy_t
*);

31 
‰ì_em±y_¨øy
(
¨øy_t
*);

32 
¨øy_t
 *
add_¨øy
(array_t *,árray_t*);

33 
im∂ode_¨øy
(
fu≈å_t
 *, 
¨øy_t
 *, 
svÆue_t
 *, );

34 
¨øy_t
 *
subåa˘_¨øy
(array_t *,árray_t*);

35 
¨øy_t
 *
¶i˚_¨øy
(array_t *, , );

36 
¨øy_t
 *
ex∂ode_°rög
(*, , *, );

37 *
im∂ode_°rög
(
¨øy_t
 *, *, );

38 
¨øy_t
 *
u£rs
();

39 
¨øy_t
 *
comm™ds
(
obje˘_t
*);

40 
fûãr_¨øy
(
svÆue_t
 *, );

41 
¨øy_t
 *
dìp_öhîô_li°
(
obje˘_t
*);

42 
¨øy_t
 *
öhîô_li°
(
obje˘_t
*);

43 
¨øy_t
 *
chûdªn
(*);

44 
¨øy_t
 *
livögs
();

45 
¨øy_t
 *
obje˘s
(
fu≈å_t
*);

46 
¨øy_t
 *
Æl_övít‹y
(
obje˘_t
 *, );

47 
¨øy_t
 *
gë_¨ound_obje˘
(
obje˘_t
 *, , , );

48 
¨øy_t
 *
dìp_övít‹y
(
obje˘_t
 *, );

49 
¨øy_t
 *
fûãr
◊ºay_à*, 
fu≈å_t
 *, 
svÆue_t
*);

50 
¨øy_t
 *
buûtö_s‹t_¨øy
(array_t *, );

51 
¨øy_t
 *
Â_s‹t_¨øy
◊ºay_à*, 
fu≈å_t
*);

52 
¨øy_t
 *
s‹t_¨øy
◊ºay_à*, *, 
obje˘_t
*);

53 
¨øy_t
 *
make_unique
◊ºay_à*, *, 
fu≈å_t
 *, 
svÆue_t
*);

54 
m≠_°rög
(
svÆue_t
 *
¨g
, 
num_¨g
);

55 
m≠_¨øy
(
svÆue_t
 *
¨g
, 
num_¨g
);

56 
¨øy_t
 *
öãr£˘_¨øy
(array_t *,árray_t*);

57 
m©ch_sögÀ_ªgexp
(*, *);

58 
¨øy_t
 *
m©ch_ªgexp
(array_t *, *, );

59 
¨øy_t
 *
ªg_assoc
(*,áºay_à*,áºay_à*, 
svÆue_t
*);

60 
dóŒoc_¨øy
(
¨øy_t
*);

	@include/avltree.h

7 #i‚de‡
_AVLTREE_H_


8 
	#_AVLTREE_H_


	)

10 
	såì_s


12 
åì_s
 *
	måì_l
, *
	måì_r
;

13 *
	måì_p
;

14 
	måì_b
;

15 } 
	tåì
;

17 
åì_öô
(
åì
 **);

18 *
åì_§ch
(
åì
 *, (*) (), *);

19 
åì_add
(
åì
 **, (*) (), *, (*) () );

20 
åì_dñëe
(
åì
 **, (*) (), *, (*) () );

21 
åì_åav
(
åì
 **, (*) () );

22 
åì_mung
(
åì
 **, (*) () );

	@include/backend.h

1 #i‚de‡
BACKEND_H


2 
	#BACKEND_H


	)

4 
	~"öãΩªt.h
"

6 
	#NULL_ERROR_CONTEXT
 0

	)

7 
	#NORMAL_ERROR_CONTEXT
 1

	)

8 
	#CATCH_ERROR_CONTEXT
 2

	)

9 
	#SAFE_APPLY_ERROR_CONTEXT
 4

	)

14 
cuºít_time
;

15 
hóπ_bót_Êag
;

16 
obje˘_t
 *
cuºít_hóπ_bót
;

17 
evÆ_co°
;

18 
mesßge_shut_down
;

19 
îr‹_c⁄ãxt_t
 *
cuºít_îr‹_c⁄ãxt
;

20 
f‹bid_logö_Êag
;

21 
öã∫Æ_£rvî
;

23 
ˇŒ_hóπ_bót
();

24 
backíd
();

25 
˛ór_°©e
();

26 
log⁄
(
obje˘_t
*);

27 
∑r£_comm™d
(*, 
obje˘_t
*);

28 
£t_hóπ_bót
(
obje˘_t
 *, );

29 
quîy_hóπ_bót
(
obje˘_t
*);

30 
hóπ_bót_°©us
(
outbuf„r_t
 *, );

31 
INLINE
 
ªmove_de°ru˘ed_obje˘s
();

32 
upd©e_lﬂd_av
();

33 
upd©e_compûe_av
();

34 *
quîy_lﬂd_av
();

35 
¨øy_t
 *
gë_hóπ_bóts
();

	@include/binaries.h

1 #i‚de‡
BINARIES_H


2 
	#BINARIES_H


	)

4 
	~"compûî.h
"

6 
drivî_«me
[];

8 
FILE
 *
¸dú_f›í
(*);

9 
öô_bö¨õs
(, **);

11 
	#lﬂd_bö¨y
(
x
, 
y
Ë
	`öt_lﬂd_bö¨y
(x)

	)

12 
¥ogøm_t
 *
öt_lﬂd_bö¨y
(*);

14 
ßve_bö¨y
(
¥ogøm_t
 *, 
mem_block_t
 *, mem_block_t*);

15 
time_t
 
gë_compûe_time
();

	@include/bsdmalloc.h

1 #i‚de‡
BSDMALLOC_H


2 
	#BSDMALLOC_H


	)

4 #ifde‡
BSDMALLOC


5 *
bsdmÆloc_mÆloc
(
size_t
);

6 *
bsdmÆloc_ˇŒoc
(
size_t
, size_t);

7 *
bsdmÆloc_ªÆloc
(*, 
size_t
);

8 
bsdmÆloc_‰ì
(*);

9 #ifde‡
DO_MSTATS


10 
show_m°©s
(
outbuf„r_t
 *, *);

	@include/buffer.h

3 #i‚de‡
_BUFFER_H_


4 
	#_BUFFER_H_


	)

6 
	sbuf„r_s


9 
	mªf
;

10 
	msize
;

11 #ifde‡
DEBUG


12 
	mexåa_ªf
;

14 
	môem
[1];

15 } 
	tbuf„r_t
;

20 
buf„r_t
 
nuŒ_buf
;

22 
INLINE
 
buf„r_t
 *
nuŒ_buf„r
();

23 
INLINE
 
‰ì_buf„r
(
buf„r_t
*);

24 
buf„r_t
 *
Æloˇã_buf„r
();

25 
wrôe_buf„r
(
buf„r_t
 *, , *, );

26 *
ªad_buf„r
(
buf„r_t
 *, , , *);

	@include/c_ext_fc.h

58 #i‚de‡
_c_ext_fc_h_


59 
	#_c_ext_fc_h_


	)

61 #ifde‡
__STDC__


62 
	#_VOID_
 

	)

63 
	#C_EXT_ARG
(
¨gs
Ë
	)
¨gs

66 
	#_VOID_


	)

67 
	#C_EXT_ARG
(
¨gs
Ë()

	)

	@include/c_fct.h

52 #i‚de‡
_c_f˘_h_


53 
	#_c_f˘_h_


	)

55 #ifde‡
__STDC__


56 
	#C_ARG_1
(
a1t
,
a1n
Ë◊1àa1n)

	)

57 
	#C_ARG_2
(
a1t
,
a1n
,
a2t
,
a2n
Ë◊1àa1n,a2àa2n)

	)

58 
	#C_ARG_3
(
a1t
,
a1n
,
a2t
,
a2n
,
a3t
,
a3n
Ë◊1àa1n,a2àa2n,a3àa3n)

	)

61 
	#C_ARG_1
(
a1t
,
a1n
Ë◊1nËa1àa1n;

	)

62 
	#C_ARG_2
(
a1t
,
a1n
,
a2t
,
a2n
Ë◊1n,a2nËa1àa1n;á2àa2n;

	)

63 
	#C_ARG_3
(
a1t
,
a1n
,
a2t
,
a2n
,
a3t
,
a3n
) (a1n,a2n,a3n)á1tá1n;á2tá2n;\

64 
a3t
 
a3n
;

	)

	@include/cc.h

2 
	#COMPILER
 "gcc44"

	)

3 
	#OPTIMIZE
 "-pùê-m¨chÚ©ivê-Âª„tch-lo›-¨øy†-DFD_SETSIZE=10000 -WÆ»-D_THREAD_SAFE -fomô-‰ame-poöã∏-f°ªngth-ªdu˚ -g "

	)

4 
	#CFLAGS
 "-g -Wîr‹ -Iö˛ude/ -I./ -I/u§/loˇl/ö˛udê -Igømm¨/ -Ilib/"

	)

5 
	#OBJDIR
 "obj"

	)

6 
	#GAME_MODULE
 1

	)

	@include/ccode.h

1 #i‚de‡
CCODE_H


2 
	#CCODE_H


	)

4 
	~"¥ogøm.h
"

6 
c_°¨t_fun˘i⁄
(*);

7 
c_íd_fun˘i⁄
();

9 
c_gíî©e_öhîôed_ˇŒ
(, );

10 
c_gíî©e_föÆ_¥ogøm
();

11 
c_gíî©e___INIT
();

12 
c_öôülize_∑r£r
();

13 
c_gíî©e_node
(
∑r£_node_t
*);

14 
c_™Æyze
(
∑r£_node_t
*);

15 
c_gíî©e_öhîôed_öô_ˇŒ
(, );

	@include/class.h

1 #i‚de‡
CLASS_H


2 
	#CLASS_H


	)

4 
dóŒoc_˛ass
(
¨øy_t
*);

5 
‰ì_˛ass
(
¨øy_t
*);

6 
¨øy_t
 *
Æloˇã_˛ass
(
˛ass_def_t
 *, );

7 
¨øy_t
 *
Æloˇã_˛ass_by_size
();

8 
¨øy_t
 *
Æloˇã_em±y_˛ass_by_size
();

	@include/comm.h

6 #i‚de‡
COMM_H


7 
	#COMM_H


	)

9 
	~"comm™d.h
"

11 
	~<sys/time.h
>

12 
	~<sys/evít.h
>

14 
	#CLOSING
 64

	)

16 
	söãø˘ive_s


18 
obje˘_t
 *
	mob
;

20 
	mfd
;

21 
	mvfd
;

22 
ö_addr
 
	mªÆ_sö_addr
;

23 
sockaddr_ö
 
	maddr
;

24 #ifde‡
F_QUERY_IP_PORT


25 
	mloˇl_p‹t
;

27 
	miÊags
;

28 
	m°©e
;

29 } 
	töãø˘ive_t
;

31 
tŸÆ_u£rs
;

33 
kq
;

34 
kevít
 *
evíéi°
;

36 
öãø˘ive_t
 **
Æl_u£rs
;

37 
max_u£rs
;

	@include/command.h

1 #i‚de‡
COMMAND_H


2 
	#COMMAND_H


	)

4 
	~"Õc_ö˛.h
"

6 
	tBYTE
;

7 
	tWORD
;

8 
	tDWORD
;

10 
vlog_fûe_timî_f
(c⁄° *
fûíame
, 
log_time
, c⁄° *
fmt
, ...);

12 
	#evít_debug
(
fmt
, 
¨gs
...Ë
	`vlog_fûe_timî_f
("o¶og/evít_log.d©", 1, fmt"Éºno: %d\n",árgs, 
î∫o
)

	)

	@include/compile_file.h

1 #i‚de‡
COMPILE_FILE_H


2 
	#COMPILE_FILE_H


	)

5 
gíî©e_sour˚
(
svÆue_t
 *, *);

6 
lök_jump_èbÀ
(
¥ogøm_t
 *, **);

	@include/compiler.h

1 #i‚de‡
COMPILER_H


2 
	#COMPILER_H


	)

4 
	~"°d.h
"

5 
	~"åìs.h
"

6 
	~"Àx.h
"

7 
	~"¥ogøm.h
"

9 
	#_YACC_


	)

11 
	#YYMAXDEPTH
 600

	)

21 *
	mblock
;

22 
	mcuºít_size
;

23 
	mmax_size
;

24 } 
	tmem_block_t
;

26 
	#START_BLOCK_SIZE
 4096

	)

31 
	#A_PROGRAM
 0

	)

32 
	#A_RUNTIME_FUNCTIONS
 1

	)

33 
	#A_COMPILER_FUNCTIONS
 2

	)

34 
	#A_RUNTIME_COMPRESSED
 3

	)

35 
	#A_FUNCTION_FLAGS
 4

	)

36 
	#A_STRINGS
 5

	)

37 
	#A_VAR_NAME
 6

	)

38 
	#A_VAR_TYPE
 7

	)

39 
	#A_LINENUMBERS
 8

	)

40 
	#A_FILE_INFO
 9

	)

41 
	#A_INHERITS
 10

	)

42 
	#A_CLASS_DEF
 11

	)

43 
	#A_CLASS_MEMBER
 12

	)

44 
	#A_ARGUMENT_TYPES
 13

	)

45 
	#A_ARGUMENT_INDEX
 14

	)

46 
	#NUMPAREAS
 15

	)

47 
	#A_CASES
 15

	)

48 
	#A_STRING_NEXT
 16

	)

49 
	#A_STRING_REFS
 17

	)

50 
	#A_INCLUDES
 18

	)

51 
	#A_PATCH
 19

	)

52 
	#A_INITIALIZER
 20

	)

53 
	#A_FUNCTIONALS
 21

	)

54 
	#A_FUNCTION_DEFS
 22

	)

55 
	#A_VAR_TEMP
 23

	)

56 
	#NUMAREAS
 24

	)

58 
	#CURRENT_PROGRAM_SIZE
 (
¥og_code
 - 
mem_block
[
cuºít_block
].
block
)

	)

59 
	#UPDATE_PROGRAM_SIZE
 
mem_block
[
cuºít_block
].
cuºít_size
 = 
CURRENT_PROGRAM_SIZE


	)

67 
	#TYPE_UNKNOWN
 0

	)

68 
	#TYPE_ANY
 1

	)

69 
	#TYPE_NOVALUE
 2

	)

70 
	#TYPE_VOID
 3

	)

71 
	#TYPE_NUMBER
 4

	)

72 
	#TYPE_STRING
 5

	)

73 
	#TYPE_OBJECT
 6

	)

74 
	#TYPE_MAPPING
 7

	)

75 
	#TYPE_FUNCTION
 8

	)

76 
	#TYPE_REAL
 9

	)

77 
	#TYPE_BUFFER
 10

	)

79 
mem_block_t
 
mem_block
[
NUMAREAS
];

80 *
compûî_ty≥_«mes
[];

82 
	#LOOP_CONTEXT
 0x1

	)

83 
	#SWITCH_CONTEXT
 0x2

	)

84 
	#SWITCH_STRINGS
 0x4

	)

85 
	#SWITCH_NUMBERS
 0x8

	)

86 
	#SWITCH_DEFAULT
 0x10

	)

87 
	#SWITCH_RANGES
 0x20

	)

88 
	#LOOP_FOREACH
 0x40

	)

89 
	#SPECIAL_CONTEXT
 0x80

	)

91 
	sfun˘i⁄_c⁄ãxt_s


93 
∑r£_node_t
 *
	mvÆues_li°
;

94 
	mbödabÀ
;

95 
	mnum_∑ømëîs
;

96 
	mnum_loˇls
;

97 
fun˘i⁄_c⁄ãxt_s
 *
	m∑ª¡
;

98 } 
	tfun˘i⁄_c⁄ãxt_t
;

100 
fun˘i⁄_c⁄ãxt_t
 *
cuºít_fun˘i⁄_c⁄ãxt
;

101 
v¨_deföed
;

107 
	#IS_CLASS
(
t
Ë(— & (
TYPE_MOD_ARRAY
 | 
TYPE_MOD_CLASS
)Ë=TYPE_MOD_CLASS)

	)

108 
	#CLASS_IDX
(
t
Ë— & ~(
NAME_TYPE_MOD
 | 
TYPE_MOD_CLASS
))

	)

110 
	#COMP_TYPE
(
e
, 
t
Ë(!” & (
TYPE_MOD_ARRAY
 | 
TYPE_MOD_CLASS
)) \

111 && (
com∑tibÀ
[()
e
] & (1 << (
t
))))

	)

112 
	#IS_TYPE
(
e
, 
t
Ë(!” & (
TYPE_MOD_ARRAY
 | 
TYPE_MOD_CLASS
)) \

113 && (
is_ty≥
[()
e
] & (1 << (
t
))))

	)

115 
	#FUNCTION_TEMP
(
n
Ë((
compûî_ãmp_t
 *)
mem_block
[
A_FUNCTION_DEFS
].
block
 + (n))

	)

117 
	#COMPILER_FUNC
(
n
Ë((
compûî_fun˘i⁄_t
 *)
mem_block
[
A_COMPILER_FUNCTIONS
].
block
 + (n))

	)

119 
	#FUNCTION_PROG
(
n
Ë(
	`FUNCTION_TEMP
“)->
¥og
)

	)

120 
	#FUNCTION_ALIAS
(
n
Ë(
	`FUNCTION_TEMP
“)->
Æüs_f‹
)

	)

122 
	#FUNCTION_DEF
(
n
Ë(
	`FUNCTION_PROG
“Ë? 
	`FUNCTION_TEMP
“)->
u
.
func
 : 
	`COMPILER_FUNC
(FUNCTION_TEMP“)->u.
ödex
))

	)

124 
	#FUNCTION_RENTRY
(
n
Ë((
ru¡ime_fun˘i⁄_u
 *)
mem_block
[
A_RUNTIME_FUNCTIONS
].
block
 + (n))

	)

126 
	#FUNCTION_DEF_RENTRY
(
n
Ë(
	`FUNCTION_PROG
“Ë? 
	`FIND_FUNC_ENTRY
(FUNCTION_PROG“), 
	`FUNCTION_TEMP
“)->
u
.
func
->
ru¡ime_ödex
Ë: 
	`FUNCTION_RENTRY
“))

	)

128 
	#FUNCTION_FLAGS
(
n
Ë*((*)
mem_block
[
A_FUNCTION_FLAGS
].
block
 + (n))

	)

130 
	#NUM_INHERITS
 (
mem_block
[
A_INHERITS
].
cuºít_size
 / (
öhîô_t
))

	)

132 
	#INHERIT
(
n
Ë((
öhîô_t
 *)
mem_block
[
A_INHERITS
].
block
 + (n))

	)

133 
	#VAR_TEMP
(
n
Ë((
v¨übÀ_t
 *)
mem_block
[
A_VAR_TEMP
].
block
 + (n))

	)

134 
	#SIMUL
(
n
Ë(
simuls
[n].
func
)

	)

135 
	#PROG_STRING
(
n
Ë(((**)
mem_block
[
A_STRINGS
].
block
)[n])

	)

136 
	#CLASS
(
n
Ë((
˛ass_def_t
 *)
mem_block
[
A_CLASS_DEF
].
block
 + (n))

	)

138 #i‡!
deföed
(
__Æpha
Ë&& !deföed(
¸ay
)

139 
	#Æign
(
x
Ë(((xË+ 3Ë& ~3)

	)

141 
	#Æign
(
x
Ë(((xË+ 7Ë& ~7)

	)

144 
	#SOME_NUMERIC_CASE_LABELS
 0x40000

	)

145 
	#NO_STRING_CASE_LABELS
 0x80000

	)

147 
	#ARG_IS_PROTO
 1

	)

148 
	#ARG_IS_VARARGS
 2

	)

150 
	#NOVALUE_USED_FLAG
 1024

	)

152 
vÆid©e_fun˘i⁄_ˇŒ
(, 
∑r£_node_t
*);

153 
∑r£_node_t
 *
vÆid©e_efun_ˇŒ
(,Öarse_node_t*);

154 
mem_block_t
 
mem_block
[];

155 
exa˘_ty≥s
, 
globÆ_modifõrs
;

156 
cuºít_ty≥
;

157 
cuºít_block
;

158 *
¥og_code
;

159 *
¥og_code_max
;

160 
¥ogøm_t
 
NULL_¥ogøm
;

161 
°rög_ègs
[0x20];

162 
‰ìd_°rög
;

163 
idít_hash_ñem_t
 **
loˇls
;

164 *
ty≥_of_loˇls
;

165 *
ru¡ime_loˇls
;

166 
cuºít_numbî_of_loˇls
;

167 
max_num_loˇls
;

168 *
ty≥_of_loˇls_±r
;

169 
idít_hash_ñem_t
 **
loˇls_±r
;

170 *
ru¡ime_loˇls_±r
;

172 
ty≥_of_loˇls_size
;

173 
loˇls_size
;

174 
cuºít_numbî_of_loˇls
;

175 
max_num_loˇls
;

176 
a_fun˘i⁄s_roŸ
;

177 
mem_block_t
 
ty≥_of_¨gumíts
;

178 
com∑tibÀ
[11];

179 
is_ty≥
[11];

181 
cuºít_loˇl_cou¡
;

182 
push_loˇl_cou¡
(
vÆ
);

183 
p›_loˇl_cou¡
();

185 *
gë_two_ty≥s
(*, *, , );

186 *
gë_ty≥_«me
(*, *, );

187 
öô_loˇls
();

189 
ßve_fûe_öfo
(, );

190 
add_¥ogøm_fûe
(*, );

191 
yyîr‹
(*);

192 
yyw¨n
(*);

193 
swôch_to_block
();

194 *
the_fûe_«me
(*);

195 
‰ì_Æl_loˇl_«mes
();

196 
p›_n_loˇls
();

197 
ªa˘iv©e_cuºít_loˇls
();

198 
˛ón_up_loˇls
();

199 
dó˘iv©e_cuºít_loˇls
();

200 
add_loˇl_«me
(*, );

201 
ªÆloˇã_loˇls
();

202 
öôülize_loˇls
();

203 
gë_id_numbî
();

204 
¥ogøm_t
 *
compûe_fûe
(, *);

205 
ª£t_fun˘i⁄_blocks
();

206 
c›y_v¨übÀs
(
¥ogøm_t
 *, );

207 
c›y_°ru˘uªs
(
¥ogøm_t
*);

208 
c›y_fun˘i⁄s
(
¥ogøm_t
 *, );

209 
ty≥_îr‹
(*, );

210 
com∑tibÀ_ty≥s
(, );

211 
com∑tibÀ_ty≥s2
(, );

212 
¨ønge_ˇŒ_öhîôed
(*, 
∑r£_node_t
*);

213 
add_¨g_ty≥
();

214 
deföe_√w_fun˘i⁄
(*, , , , );

215 
deföe_v¨übÀ
(*, , );

216 
deföe_√w_v¨übÀ
(*, );

217 
°‹e_¥og_°rög
(*);

218 
‰ì_¥og_°rög
();

219 #ifde‡
DEBUG


220 
dump_fun˘i⁄_èbÀ
();

222 
¥ï¨e_ˇ£s
(
∑r£_node_t
 *, );

223 
push_func_block
();

224 
p›_func_block
();

226 
lookup_˛ass_membî
(, *, *);

227 
∑r£_node_t
 *
ª‹dî_˛ass_vÆues
(,Öarse_node_t*);

229 
∑r£_node_t
 *
¥omŸe_to_Êﬂt
(parse_node_t*);

230 
∑r£_node_t
 *
¥omŸe_to_öt
(parse_node_t*);

231 
∑r£_node_t
 *
do_¥omŸi⁄s
(parse_node_t *, );

232 
∑r£_node_t
 *
throw_away_ˇŒ
(parse_node_t*);

233 
∑r£_node_t
 *
throw_away_m≠pög
(parse_node_t*);

235 #i‚de‡
SUPPRESS_COMPILER_INLINES


237 
INLINE_STATIC
 
ªÆloc_mem_block
(
mem_block_t
 *, );

238 
INLINE_STATIC
 
add_to_mem_block
(, *, );

239 
INLINE_STATIC
 
ö£π_ö_mem_block
(, , );

240 
INLINE_STATIC
 *
Æloˇã_ö_mem_block
(, );

242 
INLINE_STATIC
 
	$ªÆloc_mem_block
(
mem_block_t
 *
m
, 
size
)

244 
size
 > 
m
->
max_size
)

246 
m
->
max_size
 <<= 1;

247 
m
->
block
 = (*)
	`DREALLOC
–(*)m->block, m->
max_size
, 
TAG_COMPILER
, "realloc_mem_block");

249 
	}
}

251 
INLINE_STATIC
 
	$add_to_mem_block
(
n
, *
d©a
, 
size
)

253 
mem_block_t
 *
mbp
 = &
mem_block
[
n
];

255 i‡(
mbp
->
cuºít_size
 + 
size
 > mbp->
max_size
)

257 
	`ªÆloc_mem_block
(
mbp
, mbp->
cuºít_size
 + 
size
);

259 i‡(
d©a
)

261 
	`mem˝y
(
mbp
->
block
 + mbp->
cuºít_size
, 
d©a
, 
size
);

263 
mbp
->
cuºít_size
 +
size
;

264 
	}
}

266 
INLINE_STATIC
 *
	$Æloˇã_ö_mem_block
(
n
, 
size
)

268 
mem_block_t
 *
mbp
 = &
mem_block
[
n
];

269 *
ªt
;

271 i‡(
mbp
->
cuºít_size
 + 
size
 > mbp->
max_size
)

273 
	`ªÆloc_mem_block
(
mbp
, mbp->
cuºít_size
 + 
size
);

275 
ªt
 = 
mbp
->
block
 + mbp->
cuºít_size
;

276 
mbp
->
cuºít_size
 +
size
;

277  
ªt
;

278 
	}
}

280 
INLINE_STATIC
 
	$ö£π_ö_mem_block
(
n
, 
whîe
, 
size
)

282 
mem_block_t
 *
mbp
 = &
mem_block
[
n
];

283 *
p
;

285 i‡(
mbp
->
cuºít_size
 + 
size
 > mbp->
max_size
)

287 
	`ªÆloc_mem_block
(
mbp
, mbp->
cuºít_size
 + 
size
);

290 
p
 = 
mbp
->
block
 + mbp->
cuºít_size
;

291 
p
-- > 
mbp
->
block
 + 
whîe
)

293 *(
p
 + 
size
) = *p;

295 
mbp
->
cuºít_size
 +
size
;

296 
	}
}

	@include/condvar_md.h

1 #i‚de‡
__CONDVAR_MD_H__


2 
	#__CONDVAR_MD_H__


	)

4 
	~"thªads_md.h
"

5 
	~"muãx_md.h
"

6 
	~<±hªad.h
>

8 
	sc⁄dv¨


10 
±hªad_c⁄d_t
 
	mc⁄d
;

11 
	mcou¡î
;

12 } 
	tc⁄dv¨_t
;

14 
c⁄dv¨Inô
(
c⁄dv¨_t
*);

15 
c⁄dv¨De°roy
(
c⁄dv¨_t
*);

16 
c⁄dv¨Waô
(
c⁄dv¨_t
 *, 
muãx_t
*);

17 
c⁄dv¨TimedWaô
(
c⁄dv¨_t
 *, 
muãx_t
 *, 
mûlis
);

18 
c⁄dv¨Sig«l
(
c⁄dv¨_t
*);

19 
c⁄dv¨Brﬂdˇ°
(
c⁄dv¨_t
*);

	@include/config.h

1 #i‚de‡
__LPC_VM_CONFIG_H__


2 
	#__LPC_VM_CONFIG_H__


	)

4 
	~"cc.h
"

9 
	#RESERVED_SIZE
 (0)

	)

11 
	#NUM_CONSTS
 (5)

	)

13 
	#NUM_CONFIG_STRS
 (10)

	)

14 
	#NUM_CONFIG_INTS
 (10)

	)

16 
	#INHERIT_CHAIN_SIZE
 (60)

	)

18 
	#TIME_TO_RESET
 (600)

	)

22 
	#HTABLE_SIZE
 (7001)

	)

25 
	#OTABLE_SIZE
 (1<<16)

	)

27 
	#MAX_MAPPING_SIZE
 (60000)

	)

28 
	#MAX_ARRAY_SIZE
 (60000)

	)

29 
	#MAX_BUFFER_SIZE
 (200000000)

	)

30 
	#MAX_STRING_LENGTH
 (400000)

	)

31 
	#READ_FILE_MAX_SIZE
 (400000)

	)

33 
	#MAX_COST
 (15000000)

	)

34 
	#RUN_COST
 (15000000)

	)

36 
	#MAX_BITS
 (2400)

	)

38 
	#NULL_MSG
 "0"

	)

40 
	#APPLY_CACHE_SIZE
 (1 << 
APPLY_CACHE_BITS
)

	)

46 
	#INCLUDE_DIRS
 "/ö˛ude"

	)

47 
	#LOG_DIR
 "/log"

	)

48 
	#SAVE_BINARIES
 "/bö"

	)

50 
	#SIMUL_EFUN
 "/rc/simul_efun"

	)

51 
	#DEBUG_LOG_FILE
 "debug.log"

	)

52 
	#SWAP_FILE
 "/sys/sw≠/sw≠fûe"

	)

67 
	#QTZ_SîvîEngöe_LIB
 "../logic"

	)

69 
game_lib_bö_∑th
[];

70 
	#BIN_DIR
 (
game_lib_bö_∑th
)

	)

73 
	#QTZ_SîvîEngöe_NAME
 "∑‚…Ò∂´”Œ"

	)

75 
	#MAX_BYTE_TRANSFER
 (20000)

	)

	@include/contrib.h

1 
m≠pög_t
 *
dìp_c›y_m≠pög
(m≠pög_à*
¨g
);

2 
dìp_c›y_svÆue
(
svÆue_t
 *, svalue_t*);

	@include/crypt.h

1 #i‚de‡
CRYPT_H


2 
	#CRYPT_H


	)

8 
	#MD5_SALTLEN
 4

	)

11 
	#MD5_MAGIC
 "fsxy"

	)

16 
	#MD5_MAXLEN
 55

	)

24 
	#MD5_VALID_SALT
 "ˇn€lck!ggddl`l`lg`bjblodlf˛jd˙hffib`c"

	)

26 
	tbyã
;

28 *
cu°om_¸y±
(
CONST
 *
key
, CONST *
ß…
, 
byã
 *
øwout
);

31 
	#MD5_LEN
 16

	)

34 
	#MAX_SIZE
 256

	)

35 *
md5_dige°
(*
buf
, c⁄° *
öput
, 
size
);

37 
hexícode
(c⁄° *
§c
, 
Àn
, *
de°
);

38 
hexdecode
(c⁄° *
§c
, *
de°
, 
size
);

	@include/debug.h

19 
debug_Àvñ
;

21 #ifde‡
DEBUG_MACRO


22 
	#debug
(
x
,
y
Ëi‡(x & 
debug_Àvñ
Ë{ 
¥ötf
 y; 
	`fÊush
(
°dout
); }

	)

24 
	#debug
(
x
,
y
)

	)

	@include/debugmalloc.h

1 #i‚de‡
DEBUGMALLOC_H


2 
	#DEBUGMALLOC_H


	)

3 #ifde‡
DEBUGMALLOC


4 *
debugmÆloc
(, , *);

5 *
debugªÆloc
(*, , , *);

6 *
debugˇŒoc
(, , , *);

7 
debug‰ì
(*);

9 
debugmÆloc_öô
();

10 
dump_mÆloc_d©a
(
outbuf„r_t
*);

12 #ifde‡
DEBUGMALLOC_EXTENSIONS


13 
£t_mÆloc_mask
();

14 *
dump_debugmÆloc
(*, );

18 #unde‡
DEBUGMALLOC_EXTENSIONS


19 #unde‡
CHECK_MEMORY


	@include/dirty.h

6 #i‚de‡
__DIRTY_H__


7 
	#__DIRTY_H__


	)

9 
	~"Õc.h
"

11 
	~<sys/queue.h
>

13 
	g¨øy_s
;

14 
	gm≠pög_s
;

16 
	#DIRTY_SET
 (0)

	)

17 
	#DIRTY_ADD
 (1)

	)

18 
	#DIRTY_DEL
 (2)

	)

20 
	sdúty_key_s


22 
TAILQ_ENTRY
(
dúty_key_s
Ë
	míåy
;

24 
svÆue_t
 *
	mm≠_key
;

25 
	m¨r_ödex
;

26 
svÆue_t
 
	mdñ
;

27 } 
	mkey
;

28 
	mdúty_›
;

29 } 
	tdúty_key_t
;

31 
	u£lf_key_u
 {

32 
svÆue_t
 *
	mm≠_key
;

33 
	m¨r_ödex
;

34 } 
	t£lf_key_t
;

36 
	gdúty_m™age_s
;

39 
	sdúty_node_s


41 
TAILQ_ENTRY
(
dúty_node_s
Ë
	míåy
;

42 
TAILQ_HEAD
(
dúty_key_hód_s
, 
dúty_key_s
Ë
	mdúty_key_li°
;

43 
	mkey_˙t
;

44 
dúty_m™age_s
 *
	mmng
;

45 } 
	tdúty_node_t
;

49 
	sdúty_roŸ_s


51 
TAILQ_HEAD
(
dúty_node_hód_s
, 
dúty_node_s
Ë
	mdúty_node_li°
;

52 
	mnode_˙t
;

53 } 
	tdúty_roŸ_t
;

56 
	sdúty_m™age_s


58 
svÆue_t
 *
	mroŸ
;

59 
svÆue_t
 *
	m∑ª¡
;

60 
svÆue_t
 *
	m£lf
;

61 
£lf_key_t
 
	m£lf_key
;

62 
dúty_node_t
 *
	mdúty_node
;

63 
dúty_roŸ_t
 
	mdúty_roŸ
[0];

64 } 
	tdúty_m™age_t
;

66 
	#gë_m™age
(
sv
Ë–(sv)->
ty≥
 =
T_MAPPING
 ? (sv)->
u
.
m≠
->
dúty_mng
 : \

67 ((
sv
)->
ty≥
 =
T_ARRAY
 ? (sv)->
u
.
¨r
->
dúty_mng
 : 
NULL
))

	)

69 
	#IS_DIRTY_ROOT
(
mng
Ë((mng)->
£lf
 =(mng)->
roŸ
 && (mng)->roŸ !
NULL
)

	)

71 
begö_dúty_m™age_m≠
(
svÆue_t
 *
svm≠
, svÆue_à*
∑ª¡
, 
£lf_key_t
 *
£lf_key
);

72 
begö_dúty_m™age_¨øy
(
svÆue_t
 *
sv¨r
, svÆue_à*
∑ª¡
, 
£lf_key_t
 *
£lf_key
);

73 
‰ì_dúty_¨r
(
¨øy_s
 *
¨r
);

74 
‰ì_dúty_m≠
(
m≠pög_s
 *
m≠
);

75 
£t_dúty_m≠
(
m≠pög_s
 *
m≠
, 
svÆue_t
 *
key
, 
›
);

76 
£t_dúty_¨r
(
¨øy_s
 *
¨r
, 
idx
, 
›
);

77 
˛ór_dúty
(
svÆue_t
 *
vÆue
);

79 
dúty_mem_poﬁ_£tup
();

80 
dúty_mem_poﬁ_°©
();

	@include/dumpstat.h

1 #i‚de‡
DUMPSTAT_H


2 
	#DUMPSTAT_H


	)

7 
d©a_size
(
obje˘_t
*);

8 
dump°©
(*);

	@include/edit_source.h

1 #i‚de‡
EDIT_SOURCE_H


2 
	#EDIT_SOURCE_H


	)

4 
FILE
 *
yyö
;

5 
yyîr‹
 ( * 
°r
 );

6 
mf_Áèl
 ( * 
°r
 );

7 
yy∑r£
 ();

	@include/efun_protos.h

6 
f_to_öt
 ();

7 
f_to_Êﬂt
 ();

8 
f_¥evious_obje˘
 ();

9 
f_ˇŒ_°ack
 ();

10 
f_sizeof
 ();

11 
f_de°ru˘
 ();

12 
f_fûe_«me
 ();

13 
f_øndom
 ();

14 
f_lowî_ˇ£
 ();

15 
f_Æloˇã_m≠pög
 ();

16 
f_vÆues
 ();

17 
f_keys
 ();

18 
f_˛⁄ï
 ();

19 
f_öç
 ();

20 
f_undeföedp
 ();

21 
f_Êﬂç
 ();

22 
f_°rögp
 ();

23 
f_fun˘i⁄p
 ();

24 
f_poöãΩ
 ();

25 
f_obje˘p
 ();

26 
f_˛as•
 ();

27 
f_ty≥of
 ();

28 
f_buf„Ω
 ();

29 
f_ª∂a˚_¥ogøm
 ();

30 
f_Æloˇã
 ();

31 
f_fûe_size
 ();

32 
f_mkdú
 ();

33 
f_rm
 ();

34 
f_rmdú
 ();

35 
f_md5_hexdige°
 ();

36 
f_˘ime
 ();

37 
f_loˇ…ime
 ();

38 
f_throw
 ();

39 
f_dìp_öhîô_li°
 ();

40 
f_shÆlow_öhîô_li°
 ();

41 
f_m≠p
 ();

42 
f_chûdªn
 ();

43 
f_îr‹
 ();

44 
f_£t_evÆ_limô
 ();

45 
f_keys_by_vÆue
 ();

46 
f_Õc_gc
 ();

47 
f_mysql_c⁄√˘
 ();

48 
f_mysql_˛o£
 ();

49 
f_curs‹_˛o£
 ();

50 
f_curs‹_„tch
 ();

51 
f_Õc2py°r
 ();

52 
f_py°r2Õc
 ();

53 
f_fs_ª°‹e_‰om_fûe
 ();

54 
f_fs_uæ_ícode_m≠
 ();

55 
f_fs_uæ_ícode
 ();

56 
f_fs_uæ_decode
 ();

57 
f_fs_is_uid_c⁄√˘ed
 ();

58 
f_fs_˛o£_uid_c⁄√˘i⁄
 ();

59 
f_fs_˛o£_vfd_c⁄√˘i⁄
 ();

60 
f_fs_gë_vfd_by_uid
 ();

61 
f_fs_gë_uid_by_vfd
 ();

62 
f_fs_gë_ù_by_vfd
 ();

63 
f_fs_œ°_±o_time°amp
 ();

64 
f_fs_ex˛ude_°©s_±o
 ();

65 
f_fs_vÆid©i⁄_°¨t
 ();

66 
f_ªmove_ˇŒ_out
 ();

67 
f_fs_íabÀ_dúty_obje˘
 ();

68 
f_fs_íabÀ_dúty_m≠
 ();

69 
f_fs_m¨shÆ_dúty_m≠
 ();

70 
f_fs_m¨shÆ_m≠
 ();

71 
f_fs_m¨shÆ_dúty_obje˘
 ();

72 
f_u£r_¸óã
 ();

73 
f_u£r_de°roy
 ();

74 
f_gamed_˛o£_uid_c⁄√˘i⁄
 ();

75 
f_fs_ßve_Æl_u£r
 ();

76 
f_fs_db_sync
 ();

77 
f_fs_db_obje˘_u∆ﬂd
 ();

78 
f_gë_u£r
 ();

79 
f_is_⁄löe
 ();

80 
f_logout
 ();

81 
f_upd©e_max_logö
 ();

82 
f_gë_Æl_u£rs
 ();

83 
f_√w_ôem
 ();

84 
f_is_ôem_⁄löe
 ();

85 
f_de°roy_ôem
 ();

86 
f_√w_≈c
 ();

87 
f_de°roy_≈c
 ();

88 
f_is_≈c_⁄löe
 ();

89 
f_gë_≈c_obje˘
 ();

90 
f_gë_≈c_pos
 ();

91 
f_gë_≈c_cú˛e_fõld
 ();

92 
f_gë_≈c_fightid
 ();

93 
f_gë_≈c_°©us
 ();

94 
f_√w_summ⁄
 ();

95 
f_de°roy_summ⁄
 ();

96 
f_is_summ⁄_⁄löe
 ();

97 
f_gë_ãam_m≠
 ();

98 
f_dismiss_ãam
 ();

99 
f_upd©e_Õc_obje˘
 ();

100 
f_íabÀ_log_±o
 ();

101 
f__
 ();

102 
f_c›y
 ();

103 
f_fûe_Àngth
 ();

104 
f_uµî_ˇ£
 ();

105 
f_„tch_v¨übÀ
 ();

106 
f_fun˘i⁄_ow√r
 ();

107 
f_sockë_¸óã
 ();

108 
f_sockë_˛o£
 ();

109 
f_sockë_addªss
 ();

110 
f_ªfs
 ();

111 
f_cos
 ();

112 
f_sö
 ();

113 
f_èn
 ();

114 
f_asö
 ();

115 
f_acos
 ();

116 
f_©™
 ();

117 
f_sqπ
 ();

118 
f_log
 ();

119 
f_exp
 ();

120 
f_Êo‹
 ();

121 
f_˚û
 ();

122 
f_ˇŒ_Ÿhî
 ();

123 
f_evÆu©e
 ();

124 
f_this_obje˘
 ();

125 
f_˛⁄e_obje˘
 ();

126 
f_ex∂ode
 ();

127 
f_im∂ode
 ();

128 
f_membî_¨øy
 ();

129 
f_ª∂a˚_°rög
 ();

130 
f_ª∂a˚_°rög_ªg
 ();

131 
f_ª°‹e_obje˘
 ();

132 
f_ßve_obje˘
 ();

133 
f_gë_dú
 ();

134 
f_°r§ch
 ();

135 
f_sub°r
 ();

136 
f_föd_obje˘
 ();

137 
f_m≠_dñëe
 ();

138 
f_Æloˇã_buf„r
 ();

139 
f_ªad_buf„r
 ();

140 
f_wrôe_buf„r
 ();

141 
f_öhîôs
 ();

142 
f_ªgexp
 ();

143 
f_wrôe_fûe
 ();

144 
f_ª«me
 ();

145 
f_wrôe_byãs
 ();

146 
f_ªad_byãs
 ();

147 
f_ªad_fûe
 ();

148 
f_˝
 ();

149 
f_˛ór_bô
 ();

150 
f_ã°_bô
 ();

151 
f_£t_bô
 ();

152 
f_√xt_bô
 ();

153 
f_¸y±
 ();

154 
f_fun˘i⁄_exi°s
 ();

155 
f_obje˘s
 ();

156 
f_s‹t_¨øy
 ();

157 
f_time
 ();

158 
f_unique_m≠pög
 ();

159 
f_•rötf
 ();

160 
f_°©
 ();

161 
f_mem‹y_öfo
 ();

162 
f_u±ime
 ();

163 
f_°rcmp
 ();

164 
f_fûãr
 ();

165 
f_m≠
 ();

166 
f_mÆloc_°©us
 ();

167 
f_dum∑Œobj
 ();

168 
f_dump_fûe_des¸ùt‹s
 ();

169 
f_quîy_lﬂd_avîage
 ();

170 
f_ª˛aim_obje˘s
 ();

171 
f_shutdown
 ();

172 
f_os_comm™d
 ();

173 
f_gë_c⁄fig_fûe
 ();

174 
f_is_auth_£rvî
 ();

175 
f_fs_mem‹y_öfo
 ();

176 
f_mysql_execuã
 ();

177 
f_fs_ßve_to_fûe
 ();

178 
f_fs_hâp_ªque°
 ();

179 
f_fs_cuæ_ªque°
 ();

180 
f_fs_√w_u£r
 ();

181 
f_fs_Ωc_ˇŒ
 ();

182 
f_fs_Ωc_ˇŒ_lo›
 ();

183 
f_fs_Ωc_x_ˇŒ
 ();

184 
f_fs_Ωc_make_cfg
 ();

185 
f_fs_£t_vÆid©i⁄
 ();

186 
f_maö_lo›
 ();

187 
f_ˇŒ_out
 ();

188 
f_fs_mîge_dúty_m≠
 ();

189 
f_fs_mîge_dúty_obje˘
 ();

190 
f_fs_ßve_Æl_d©
 ();

191 
f_fs_db_gamed_exô
 ();

192 
f_fs_db_obje˘_√w
 ();

193 
f_fs_db_obje˘_lﬂd
 ();

194 
f_fs_db_obje˘_ßve
 ();

195 
f_fs_db_obje˘_ª«me
 ();

196 
f_fs_db_obje˘_ª°‹e
 ();

197 
f_fs_dúty_mem_poﬁ_°©
 ();

198 
f_gë_⁄löe_cou¡
 ();

199 
f_ª°‹e_ôem
 ();

200 
f_gë_ôem_m≠
 ();

201 
f_SëIãmTemp
 ();

202 
f_GëIãmTemp
 ();

203 
f_SëIãmSave
 ();

204 
f_GëIãmSave
 ();

205 
f_ª°‹e_≈c
 ();

206 
f_SëNpc
 ();

207 
f_GëNpc
 ();

208 
f_SëNpcSave
 ();

209 
f_GëNpcSave
 ();

210 
f_£t_≈c_cú˛e_fõld
 ();

211 
f_ö_≈c_fõld
 ();

212 
f_gë_≈c_m≠
 ();

213 
f_£t_≈c_m≠
 ();

214 
f_£t_≈c_fightid
 ();

215 
f_£t_≈c_°©us
 ();

216 
f_£t_ef„˘_≈c
 ();

217 
f_gë_summ⁄_m≠
 ();

218 
f_ª°‹e_summ⁄
 ();

219 
f_SëSumm⁄Temp
 ();

220 
f_GëSumm⁄Temp
 ();

221 
f_SëSumm⁄Save
 ();

222 
f_GëSumm⁄Save
 ();

223 
f_√w_ãam
 ();

224 
f_dump_mem‹y_poﬁ
 ();

225 
f_gë_time_of_day
 ();

226 
f_fs_ic⁄v
 ();

227 
f_fs_dns_ªsﬁve
 ();

228 
f_öô_gëãxt
 ();

229 
f_fun˘i⁄s
 ();

230 
f_v¨übÀs
 ();

231 
f_ª∂a˚abÀ
 ();

232 
f_¥ogøm_öfo
 ();

233 
f_°‹e_v¨übÀ
 ();

234 
f_debug_mesßge
 ();

235 
f_ª≥©_°rög
 ();

236 
f_sockë_böd_™d_li°í
 ();

237 
f_sockë_ac˚±
 ();

238 
f_sockë_c⁄√˘
 ();

239 
f_sockë_wrôe
 ();

240 
f_dump_sockë_°©us
 ();

241 
f_debug_öfo
 ();

242 
f_dump_¥og
 ();

243 
f_pow
 ();

244 
f_max
 ();

245 
f_mö
 ();

	@include/efunctions.h

7 
	~"efun_¥Ÿos.h
"

10 (*
	tfunc_t
) ();

12 
func_t
 
efun_èbÀ
[] = {

13 
f_to_öt
,

14 
f_to_Êﬂt
,

15 
f_¥evious_obje˘
,

16 
f_ˇŒ_°ack
,

17 
f_sizeof
,

18 
f_de°ru˘
,

19 
f_fûe_«me
,

20 
f_øndom
,

21 
f_lowî_ˇ£
,

22 
f_Æloˇã_m≠pög
,

23 
f_vÆues
,

24 
f_keys
,

25 
f_˛⁄ï
,

26 
f_öç
,

27 
f_undeföedp
,

28 
f_Êﬂç
,

29 
f_°rögp
,

30 
f_fun˘i⁄p
,

31 
f_poöãΩ
,

32 
f_obje˘p
,

33 
f_˛as•
,

34 
f_ty≥of
,

35 
f_buf„Ω
,

36 
f_ª∂a˚_¥ogøm
,

37 
f_Æloˇã
,

38 
f_fûe_size
,

39 
f_mkdú
,

40 
f_rm
,

41 
f_rmdú
,

42 
f_md5_hexdige°
,

43 
f_˘ime
,

44 
f_loˇ…ime
,

45 
f_throw
,

46 
f_dìp_öhîô_li°
,

47 
f_shÆlow_öhîô_li°
,

48 
f_m≠p
,

49 
f_chûdªn
,

50 
f_îr‹
,

51 
f_£t_evÆ_limô
,

52 
f_keys_by_vÆue
,

53 
f_Õc_gc
,

54 
f_mysql_c⁄√˘
,

55 
f_mysql_˛o£
,

56 
f_curs‹_˛o£
,

57 
f_curs‹_„tch
,

58 
f_Õc2py°r
,

59 
f_py°r2Õc
,

60 
f_fs_ª°‹e_‰om_fûe
,

61 
f_fs_uæ_ícode_m≠
,

62 
f_fs_uæ_ícode
,

63 
f_fs_uæ_decode
,

64 
f_fs_is_uid_c⁄√˘ed
,

65 
f_fs_˛o£_uid_c⁄√˘i⁄
,

66 
f_fs_˛o£_vfd_c⁄√˘i⁄
,

67 
f_fs_gë_vfd_by_uid
,

68 
f_fs_gë_uid_by_vfd
,

69 
f_fs_gë_ù_by_vfd
,

70 
f_fs_œ°_±o_time°amp
,

71 
f_fs_ex˛ude_°©s_±o
,

72 
f_fs_vÆid©i⁄_°¨t
,

73 
f_ªmove_ˇŒ_out
,

74 
f_fs_íabÀ_dúty_obje˘
,

75 
f_fs_íabÀ_dúty_m≠
,

76 
f_fs_m¨shÆ_dúty_m≠
,

77 
f_fs_m¨shÆ_m≠
,

78 
f_fs_m¨shÆ_dúty_obje˘
,

79 
f_u£r_¸óã
,

80 
f_u£r_de°roy
,

81 
f_gamed_˛o£_uid_c⁄√˘i⁄
,

82 
f_fs_ßve_Æl_u£r
,

83 
f_fs_db_sync
,

84 
f_fs_db_obje˘_u∆ﬂd
,

85 
f_gë_u£r
,

86 
f_is_⁄löe
,

87 
f_logout
,

88 
f_upd©e_max_logö
,

89 
f_gë_Æl_u£rs
,

90 
f_√w_ôem
,

91 
f_is_ôem_⁄löe
,

92 
f_de°roy_ôem
,

93 
f_√w_≈c
,

94 
f_de°roy_≈c
,

95 
f_is_≈c_⁄löe
,

96 
f_gë_≈c_obje˘
,

97 
f_gë_≈c_pos
,

98 
f_gë_≈c_cú˛e_fõld
,

99 
f_gë_≈c_fightid
,

100 
f_gë_≈c_°©us
,

101 
f_√w_summ⁄
,

102 
f_de°roy_summ⁄
,

103 
f_is_summ⁄_⁄löe
,

104 
f_gë_ãam_m≠
,

105 
f_dismiss_ãam
,

106 
f_upd©e_Õc_obje˘
,

107 
f_íabÀ_log_±o
,

108 
f__
,

109 
f_c›y
,

110 
f_fûe_Àngth
,

111 
f_uµî_ˇ£
,

112 
f_„tch_v¨übÀ
,

113 
f_fun˘i⁄_ow√r
,

114 
f_sockë_¸óã
,

115 
f_sockë_˛o£
,

116 
f_sockë_addªss
,

117 
f_ªfs
,

118 
f_cos
,

119 
f_sö
,

120 
f_èn
,

121 
f_asö
,

122 
f_acos
,

123 
f_©™
,

124 
f_sqπ
,

125 
f_log
,

126 
f_exp
,

127 
f_Êo‹
,

128 
f_˚û
,

129 
f_ˇŒ_Ÿhî
,

130 
f_evÆu©e
,

131 
f_this_obje˘
,

132 
f_˛⁄e_obje˘
,

133 
f_ex∂ode
,

134 
f_im∂ode
,

135 
f_membî_¨øy
,

136 
f_ª∂a˚_°rög
,

137 
f_ª∂a˚_°rög_ªg
,

138 
f_ª°‹e_obje˘
,

139 
f_ßve_obje˘
,

140 
f_gë_dú
,

141 
f_°r§ch
,

142 
f_sub°r
,

143 
f_föd_obje˘
,

144 
f_m≠_dñëe
,

145 
f_Æloˇã_buf„r
,

146 
f_ªad_buf„r
,

147 
f_wrôe_buf„r
,

148 
f_öhîôs
,

149 
f_ªgexp
,

150 
f_wrôe_fûe
,

151 
f_ª«me
,

152 
f_wrôe_byãs
,

153 
f_ªad_byãs
,

154 
f_ªad_fûe
,

155 
f_˝
,

156 
f_˛ór_bô
,

157 
f_ã°_bô
,

158 
f_£t_bô
,

159 
f_√xt_bô
,

160 
f_¸y±
,

161 
f_fun˘i⁄_exi°s
,

162 
f_obje˘s
,

163 
f_s‹t_¨øy
,

164 
f_time
,

165 
f_unique_m≠pög
,

166 
f_•rötf
,

167 
f_°©
,

168 
f_mem‹y_öfo
,

169 
f_u±ime
,

170 
f_°rcmp
,

171 
f_fûãr
,

172 
f_m≠
,

173 
f_mÆloc_°©us
,

174 
f_dum∑Œobj
,

175 
f_dump_fûe_des¸ùt‹s
,

176 
f_quîy_lﬂd_avîage
,

177 
f_ª˛aim_obje˘s
,

178 
f_shutdown
,

179 
f_os_comm™d
,

180 
f_gë_c⁄fig_fûe
,

181 
f_is_auth_£rvî
,

182 
f_fs_mem‹y_öfo
,

183 
f_mysql_execuã
,

184 
f_fs_ßve_to_fûe
,

185 
f_fs_hâp_ªque°
,

186 
f_fs_cuæ_ªque°
,

187 
f_fs_√w_u£r
,

188 
f_fs_Ωc_ˇŒ
,

189 
f_fs_Ωc_ˇŒ_lo›
,

190 
f_fs_Ωc_x_ˇŒ
,

191 
f_fs_Ωc_make_cfg
,

192 
f_fs_£t_vÆid©i⁄
,

193 
f_maö_lo›
,

194 
f_ˇŒ_out
,

195 
f_fs_mîge_dúty_m≠
,

196 
f_fs_mîge_dúty_obje˘
,

197 
f_fs_ßve_Æl_d©
,

198 
f_fs_db_gamed_exô
,

199 
f_fs_db_obje˘_√w
,

200 
f_fs_db_obje˘_lﬂd
,

201 
f_fs_db_obje˘_ßve
,

202 
f_fs_db_obje˘_ª«me
,

203 
f_fs_db_obje˘_ª°‹e
,

204 
f_fs_dúty_mem_poﬁ_°©
,

205 
f_gë_⁄löe_cou¡
,

206 
f_ª°‹e_ôem
,

207 
f_gë_ôem_m≠
,

208 
f_SëIãmTemp
,

209 
f_GëIãmTemp
,

210 
f_SëIãmSave
,

211 
f_GëIãmSave
,

212 
f_ª°‹e_≈c
,

213 
f_SëNpc
,

214 
f_GëNpc
,

215 
f_SëNpcSave
,

216 
f_GëNpcSave
,

217 
f_£t_≈c_cú˛e_fõld
,

218 
f_ö_≈c_fõld
,

219 
f_gë_≈c_m≠
,

220 
f_£t_≈c_m≠
,

221 
f_£t_≈c_fightid
,

222 
f_£t_≈c_°©us
,

223 
f_£t_ef„˘_≈c
,

224 
f_gë_summ⁄_m≠
,

225 
f_ª°‹e_summ⁄
,

226 
f_SëSumm⁄Temp
,

227 
f_GëSumm⁄Temp
,

228 
f_SëSumm⁄Save
,

229 
f_GëSumm⁄Save
,

230 
f_√w_ãam
,

231 
f_dump_mem‹y_poﬁ
,

232 
f_gë_time_of_day
,

233 
f_fs_ic⁄v
,

234 
f_fs_dns_ªsﬁve
,

235 
f_öô_gëãxt
,

236 
f_fun˘i⁄s
,

237 
f_v¨übÀs
,

238 
f_ª∂a˚abÀ
,

239 
f_¥ogøm_öfo
,

240 
f_°‹e_v¨übÀ
,

241 
f_debug_mesßge
,

242 
f_ª≥©_°rög
,

243 
f_sockë_böd_™d_li°í
,

244 
f_sockë_ac˚±
,

245 
f_sockë_c⁄√˘
,

246 
f_sockë_wrôe
,

247 
f_dump_sockë_°©us
,

248 
f_debug_öfo
,

249 
f_dump_¥og
,

250 
f_pow
,

251 
f_max
,

252 
f_mö
,

253 
	}
};

	@include/efuns_incl.h

1 #i‚de‡
EFUNS_INCL_H


2 
	#EFUNS_INCL_H


	)

4 
	~"efun_¥Ÿos.h
"

	@include/efuns_main.h

1 #i‚de‡
EFUNS_MAIN_H


2 
	#EFUNS_MAIN_H


	)

8 
ˇŒ_‹igö
;

10 
öhîôs
(
¥ogøm_t
 *,Örogram_t*);

11 
add_m≠pög_∑ú
(
m≠pög_t
 *, *, );

12 
add_m≠pög_°rög
(
m≠pög_t
 *, *, *);

13 
add_m≠pög_obje˘
(
m≠pög_t
 *, *, 
obje˘_t
*);

14 
add_m≠pög_¨øy
(
m≠pög_t
 *, *, 
¨øy_t
*);

15 
add_m≠pög_sh¨ed_°rög
(
m≠pög_t
 *, *, *);

	@include/eoperators.h

3 
INLINE
 
f_ge
();

4 
INLINE
 
f_À
();

5 
INLINE
 
f_…
();

6 
INLINE
 
f_gt
();

7 
INLINE
 
f_™d
();

8 
INLINE
 
f_™d_eq
();

9 
INLINE
 
f_div_eq
();

10 
INLINE
 
f_eq
();

11 
INLINE
 
f_lsh
();

12 
INLINE
 
f_lsh_eq
();

13 
INLINE
 
f_mod_eq
();

14 
INLINE
 
f_mu…_eq
();

15 
INLINE
 
f_√
();

16 
INLINE
 
f_‹
();

17 
INLINE
 
f_‹_eq
();

18 
INLINE
 
f_∑r£_comm™d
();

19 
INLINE
 
f_ønge
();

20 
INLINE
 
f_exåa˘_ønge
();

21 
INLINE
 
f_rsh
();

22 
INLINE
 
f_rsh_eq
();

23 
INLINE
 
f_simul_efun
();

24 
INLINE
 
f_sub_eq
();

25 
INLINE
 
f_swôch
();

26 
INLINE
 
f_x‹
();

27 
INLINE
 
f_x‹_eq
();

28 
INLINE
 
f_fun˘i⁄_c⁄°ru˘‹
();

29 
INLINE
 
f_evÆu©e
();

30 
INLINE
 
f_ssˇnf
();

35 
INLINE
 
fu≈å_t
 *
make_fu≈
(
svÆue_t
 *, svalue_t*);

36 
INLINE
 
push_fu≈
(
fu≈å_t
*);

37 
INLINE
 
‰ì_fu≈
(
fu≈å_t
*);

38 
mîge_¨g_li°s
(, 
¨øy_t
 *, );

39 
ˇŒ_simul_efun
(, );

41 
INLINE
 
fu≈å_t
 *
make_efun_fu≈
(, 
svÆue_t
*);

42 
INLINE
 
fu≈å_t
 *
make_lfun_fu≈
(, 
svÆue_t
*);

43 
INLINE
 
fu≈å_t
 *
make_simul_fu≈
(, 
svÆue_t
*);

	@include/file.h

1 #i‚de‡
FILE_H


2 
	#FILE_H


	)

3 
	~"m¨sh.h
"

4 
	~"obje˘.h
"

5 
	~<limôs.h
>

10 
	sfûe_node_s


12 
fûe_node_s
 *
	m√xt
;

13 
fûe_node_s
 *
	m¥ev
;

14 
	mtouch_cou¡
;

15 
	m«me
[128];

16 
FILE
 *
	mÂ
;

17 } 
	tfûe_node
;

19 
debug_≥º‹
(*, *);

21 
ÀgÆ_∑th
(*);

22 *
check_vÆid_∑th
(*, 
obje˘_t
 *, *, );

23 
sm¨t_log
(*, , *, );

24 
dump_fûe_des¸ùt‹s
(
outbuf„r_t
*);

26 *
ªad_fûe
(*, , );

27 *
ªad_byãs
(*, , , *);

28 
wrôe_fûe
(*, *, );

29 
wrôe_byãs
(*, , *, );

30 
¨øy_t
 *
gë_dú
(*, );

31 
èû
(*);

32 
fûe_size
(*);

33 
c›y_fûe
(*, *);

34 
do_ª«me
(*, *, );

35 
ªmove_fûe
(*);

37 
	#PRI_LIMIT
 10

	)

38 
fûe_node
 *
√w_Â_node
();

39 
FILE
 *
gë_Â_by_«me
(*
«me
, 
Êags
);

40 
˛o£_Æl_fûe
();

41 
¥öt_li°
();

47 
FILE
 *
	mÂ
;

48 
	mcmd
;

49 
	mtmp_«me
[
PATH_MAX
];

50 
	mfûe_«me
[
PATH_MAX
];

51 
m_buf„r_t
 
	md©a
;

52 } 
	tFûeD©a
;

54 
wrôe_öô_thªad
();

56 
push_wrôe_∑ckë
(
FILE
 *
Â
, 
cmd
, c⁄° *
tmp_«me
, c⁄° *
fûe_«me
, c⁄° 
m_buf„r_t
 *
d©a
);

57 
ªad_fûe_ö_queue
(c⁄° *
fûe
, **
buff
);

58 
fûe_size_ö_queue
(c⁄° *
fûe
);

60 
wrôe_shut_down
();

	@include/file_incl.h

1 #i‚de‡
FILE_INCL_H


2 
	#FILE_INCL_H


	)

4 #ifde‡
INCL_SYS_STAT_H


5 
	~<sys/°©.h
>

7 #ifde‡
INCL_SYS_DIR_H


8 
	~<sys/dú.h
>

15 #ifde‡
INCL_DIRENT_H


16 
	~<dúít.h
>

18 #ifde‡
INCL_SYS_FILIO_H


19 
	~<sys/fûio.h
>

21 #ifde‡
INCL_SYS_SOCKIO_H


22 
	~<sys/sockio.h
>

24 #ifde‡
INCL_SYS_MKDEV_H


25 
	~<sys/mkdev.h
>

28 #ifde‡
INCL_SYS_RESOURCE_H


29 
	~<sys/ªsour˚.h
>

31 #ifde‡
INCL_SYS_RUSAGE_H


32 
	~<sys/rußge.h
>

39 #i‡
deföed
(
LATTICE
Ë|| deföed(
__SASC
)

40 #unde‡
˛o£


41 #unde‡
io˘l


42 #unde‡
wrôe


43 #unde‡
ªad


46 #ifde‡
WIN32


47 
	~<dúe˘.h
>

48 
	~<io.h
>

50 
	#OS_mkdú
(
x
, 
y
Ë
	`mkdú
(x)

	)

51 
	#l°©
(
x
, 
y
Ë
	`°©
(x, y)

	)

53 
	#OS_mkdú
(
x
, 
y
Ë
	`mkdú
(x, y)

	)

	@include/function.h

1 #i‚de‡
FUNCTION_H


2 
	#FUNCTION_H


	)

7 
	mödex
;

8 } 
	tloˇl_±r_t
;

11 
loˇl_±r_t
 
	tsimul_±r_t
;

14 
loˇl_±r_t
 
	tefun_±r_t
;

20 
	mnum_¨g
;

21 
	mnum_loˇl
;

22 
	moff£t
;

23 
¥ogøm_t
 *
	m¥og
;

24 
	mfio
, 
	mvio
;

25 } 
	tfun˘i⁄Æ_t
;

30 
	mªf
;

31 
	mty≥
;

32 #ifde‡
DEBUG


33 
	mexåa_ªf
;

35 
obje˘_s
 *
	mow√r
;

36 
¨øy_s
 *
	m¨gs
;

37 } 
	tfu≈å_hdr_t
;

39 
	sfu≈å_s


41 
fu≈å_hdr_t
 
	mhdr
;

44 
efun_±r_t
 
	mefun
;

45 
loˇl_±r_t
 
	mloˇl
;

46 
simul_±r_t
 
	msimul
;

47 
fun˘i⁄Æ_t
 
	mfun˘i⁄Æ
;

48 } 
	mf
;

51 
	tfu≈å_t
;

53 
	u°rög_‹_func


55 
fu≈å_t
 *
	mf
;

56 *
	ms
;

59 
dóŒoc_fu≈
(
fu≈å_t
*);

60 
push_ª„d_fu≈
(
fu≈å_t
*);

	@include/generate.h

1 #i‚de‡
_GENERATE_H


2 
	#_GENERATE_H


	)

4 
	~"löt.h
"

5 
	~"åìs.h
"

6 
	~"¥ogøm.h
"

7 
	~"icode.h
"

9 
	#gíî©e_fun˘i⁄_ˇŒ
 
i_gíî©e_fun˘i⁄_ˇŒ


	)

10 
	#gíî©e_öhîôed_öô_ˇŒ
 
i_gíî©e_öhîôed_öô_ˇŒ


	)

11 
	#gíî©e___INIT
 
i_gíî©e___INIT


	)

12 
	#gíî©e_föÆ_¥ogøm
 
i_gíî©e_föÆ_¥ogøm


	)

13 
	#öôülize_∑r£r
 
i_öôülize_∑r£r


	)

15 
node_Æways_åue
(
∑r£_node_t
*);

16 
gíî©e
(
∑r£_node_t
*);

17 
gíî©e_fun˘i⁄
(
compûî_fun˘i⁄_t
 *, 
∑r£_node_t
 *, );

18 
gíî©e_c⁄dôi⁄Æ_bønch
(
∑r£_node_t
*);

20 #ifde‡
DEBUG


21 
dump_ex¥_li°
(
∑r£_node_t
*);

22 
dump_åì
(
∑r£_node_t
*);

23 
Õc_åì_f‹m
(
∑r£_node_t
 *,Öarse_node_t*);

	@include/grammar.tab.h

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mL_STRING
 = 258,

43 
	mL_NUMBER
 = 259,

44 
	mL_REAL
 = 260,

45 
	mL_BASIC_TYPE
 = 261,

46 
	mL_TYPE_MODIFIER
 = 262,

47 
	mL_DEFINED_NAME
 = 263,

48 
	mL_IDENTIFIER
 = 264,

49 
	mL_EFUN
 = 265,

50 
	mL_INC
 = 266,

51 
	mL_DEC
 = 267,

52 
	mL_ASSIGN
 = 268,

53 
	mL_LAND
 = 269,

54 
	mL_LOR
 = 270,

55 
	mL_LSH
 = 271,

56 
	mL_RSH
 = 272,

57 
	mL_ORDER
 = 273,

58 
	mL_NOT
 = 274,

59 
	mL_IF
 = 275,

60 
	mL_ELSE
 = 276,

61 
	mL_SWITCH
 = 277,

62 
	mL_CASE
 = 278,

63 
	mL_DEFAULT
 = 279,

64 
	mL_RANGE
 = 280,

65 
	mL_DOT_DOT_DOT
 = 281,

66 
	mL_WHILE
 = 282,

67 
	mL_DO
 = 283,

68 
	mL_FOR
 = 284,

69 
	mL_FOREACH
 = 285,

70 
	mL_IN
 = 286,

71 
	mL_BREAK
 = 287,

72 
	mL_CONTINUE
 = 288,

73 
	mL_RETURN
 = 289,

74 
	mL_ARROW
 = 290,

75 
	mL_INHERIT
 = 291,

76 
	mL_COLON_COLON
 = 292,

77 
	mL_ARRAY_OPEN
 = 293,

78 
	mL_MAPPING_OPEN
 = 294,

79 
	mL_FUNCTION_OPEN
 = 295,

80 
	mL_NEW_FUNCTION_OPEN
 = 296,

81 
	mL_SSCANF
 = 297,

82 
	mL_CATCH
 = 298,

83 
	mL_TIME_EXPRESSION
 = 299,

84 
	mL_CLASS
 = 300,

85 
	mL_NEW
 = 301,

86 
	mL_PARAMETER
 = 302,

87 
	mLOWER_THAN_ELSE
 = 303,

88 
	mL_NE
 = 304,

89 
	mL_EQ
 = 305

93 
	#L_STRING
 258

	)

94 
	#L_NUMBER
 259

	)

95 
	#L_REAL
 260

	)

96 
	#L_BASIC_TYPE
 261

	)

97 
	#L_TYPE_MODIFIER
 262

	)

98 
	#L_DEFINED_NAME
 263

	)

99 
	#L_IDENTIFIER
 264

	)

100 
	#L_EFUN
 265

	)

101 
	#L_INC
 266

	)

102 
	#L_DEC
 267

	)

103 
	#L_ASSIGN
 268

	)

104 
	#L_LAND
 269

	)

105 
	#L_LOR
 270

	)

106 
	#L_LSH
 271

	)

107 
	#L_RSH
 272

	)

108 
	#L_ORDER
 273

	)

109 
	#L_NOT
 274

	)

110 
	#L_IF
 275

	)

111 
	#L_ELSE
 276

	)

112 
	#L_SWITCH
 277

	)

113 
	#L_CASE
 278

	)

114 
	#L_DEFAULT
 279

	)

115 
	#L_RANGE
 280

	)

116 
	#L_DOT_DOT_DOT
 281

	)

117 
	#L_WHILE
 282

	)

118 
	#L_DO
 283

	)

119 
	#L_FOR
 284

	)

120 
	#L_FOREACH
 285

	)

121 
	#L_IN
 286

	)

122 
	#L_BREAK
 287

	)

123 
	#L_CONTINUE
 288

	)

124 
	#L_RETURN
 289

	)

125 
	#L_ARROW
 290

	)

126 
	#L_INHERIT
 291

	)

127 
	#L_COLON_COLON
 292

	)

128 
	#L_ARRAY_OPEN
 293

	)

129 
	#L_MAPPING_OPEN
 294

	)

130 
	#L_FUNCTION_OPEN
 295

	)

131 
	#L_NEW_FUNCTION_OPEN
 296

	)

132 
	#L_SSCANF
 297

	)

133 
	#L_CATCH
 298

	)

134 
	#L_TIME_EXPRESSION
 299

	)

135 
	#L_CLASS
 300

	)

136 
	#L_NEW
 301

	)

137 
	#L_PARAMETER
 302

	)

138 
	#LOWER_THAN_ELSE
 303

	)

139 
	#L_NE
 304

	)

140 
	#L_EQ
 305

	)

145 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


146 
	uYYSTYPE


150 
POINTER_INT
 
	mpoöãr_öt
;

151 
	mnumbî
;

152 
	mªÆ
;

153 *
	m°rög
;

154 
	mty≥
;

155 °ru˘ { 
	mnum_¨g
; 
	mÊags
; } 
	m¨gumít
;

156 
idít_hash_ñem_t
 *
	mihe
;

157 
∑r£_node_t
 *
	mnode
;

158 
fun˘i⁄_c⁄ãxt_t
 *
	mc⁄ãxç
;

160 
∑r£_node_t
 *
	mnode
;

161 
	mnum
;

162 } 
	mde˛
;

164 
	mnum_loˇl
;

165 
	mmax_num_loˇls
;

166 
	mc⁄ãxt
;

167 
	mßve_cuºít_ty≥
;

168 
	mßve_exa˘_ty≥s
;

169 } 
	mfunc_block
;

173 } 
	tYYSTYPE
;

174 
	#YYSTYPE_IS_TRIVIAL
 1

	)

175 
	#yy°y≥
 
YYSTYPE


	)

176 
	#YYSTYPE_IS_DECLARED
 1

	)

179 
YYSTYPE
 
yylvÆ
;

	@include/hash.h

1 #i‚de‡
HASH_H


2 
	#HASH_H


	)

7 
hash°r
(*, , );

8 
whash°r
(*, );

	@include/icode.h

5 #i‚de‡
_ICODE_H


6 
	#_ICODE_H


	)

7 
	~"åìs.h
"

9 
i_gíî©e___INIT
();

10 
i_gíî©e_node
(
∑r£_node_t
*);

11 
i_gíî©e_c⁄töue
();

12 
i_gíî©e_f‹w¨d_jump
();

13 
i_upd©e_f‹w¨d_jump
();

14 
i_upd©e_c⁄töues
();

15 
i_bønch_backw¨ds
(, );

16 
i_upd©e_bªaks
();

17 
i_ßve_lo›_öfo
(
∑r£_node_t
*);

18 
i_ª°‹e_lo›_öfo
();

19 
i_gíî©e_f‹w¨d_bønch
();

20 
i_upd©e_f‹w¨d_bønch
();

21 
i_upd©e_f‹w¨d_bønch_löks
(, 
∑r£_node_t
*);

22 
i_gíî©e_ñ£
();

23 
i_öôülize_∑r£r
();

24 
i_gíî©e_föÆ_¥ogøm
();

25 
i_gíî©e_öhîôed_öô_ˇŒ
(, );

27 
›timize_icode
(*, *, *);

	@include/interpret.h

1 #i‚de‡
INTERPRET_H


2 
	#INTERPRET_H


	)

4 
	#PUSH_STRING
 (0 << 6)

	)

5 
	#PUSH_NUMBER
 (1 << 6)

	)

6 
	#PUSH_GLOBAL
 (2 << 6)

	)

7 
	#PUSH_LOCAL
 (3 << 6)

	)

9 
	#PUSH_WHAT
 (3 << 6)

	)

10 
	#PUSH_MASK
 (0xf‡^ (
PUSH_WHAT
))

	)

12 
	#SWITCH_CASE_SIZE
 (()(2 + (*)))

	)

14 
	#EXTRACT_UCHAR
(
p
Ë(*(*)’))

	)

22 
	#FRAME_FUNCTION
 0

	)

23 
	#FRAME_FUNP
 1

	)

24 
	#FRAME_CATCH
 2

	)

25 
	#FRAME_FAKE
 3

	)

26 
	#FRAME_MASK
 3

	)

28 
	#FRAME_OB_CHANGE
 4

	)

29 
	#FRAME_EXTERNAL
 8

	)

33 #ifde‡
PROFILE_FUNCTIONS


34 
	míåy_£cs
, 
	míåy_u£cs
;

36 
	m‰ameköd
;

39 
	mèbÀ_ödex
;

40 
fu≈å_t
 *
	mfu≈
;

41 } 
	m‰
;

42 
obje˘_t
 *
	mob
;

43 
obje˘_t
 *
	m¥ev_ob
;

44 
¥ogøm_t
 *
	m¥og
;

45 
	mnum_loˇl_v¨übÀs
;

46 *
	mpc
;

47 
svÆue_t
 *
	mÂ
;

48 
	mfun˘i⁄_ödex_off£t
;

49 
	mv¨übÀ_ödex_off£t
;

50 
	mˇŒî_ty≥
;

53 
	tc⁄åﬁ_°ack_t
;

57 
obje˘_t
 *
	mob
;

60 
fu≈å_t
 *
	mÂ
;

61 *
	m°r
;

62 } 
	mf
;

63 
	m«rg
;

64 
svÆue_t
 *
	m¨gs
;

67 
	tfun˘i⁄_to_ˇŒ_t
;

69 
	sîr‹_c⁄ãxt_s


71 
jmp_buf
 
	mc⁄ãxt
;

72 
c⁄åﬁ_°ack_t
 *
	mßve_c•
;

73 
obje˘_t
 *
	mßve_comm™d_givî
;

74 
svÆue_t
 *
	mßve_•
;

75 
îr‹_c⁄ãxt_s
 *
	mßve_c⁄ãxt
;

76 } 
	tîr‹_c⁄ãxt_t
;

79 
	#MASTER_APPROVED
(
x
Ë(((x)==(
svÆue_t
 *)-1Ë|| ((xË&& (((x)->
ty≥
 !
T_NUMBER
Ë|| (x)->
u
.
numbî
)))

	)

81 
	#IS_ZERO
(
x
Ë(!(xË|| (((x)->
ty≥
 =
T_NUMBER
Ë&& ((x)->
u
.
numbî
 =0)))

	)

82 
	#IS_UNDEFINED
(
x
Ë(!(xË|| (((x)->
ty≥
 =
T_NUMBER
) && \

83 ((
x
)->
subty≥
 =
T_UNDEFINED
Ë&& ((x)->
u
.
numbî
 =0)))

	)

85 
	#CHECK_TYPES
(
vÆ
, 
t
, 
¨g
, 
ö°
) \

86 i‡(!((
vÆ
)->
ty≥
 & (
t
))Ë
	`bad_¨gumít
(vÆ,Å, 
¨g
, 
ö°
);

	)

90 
	#EXTEND_SVALUE_STRING
(
x
, 
y
, 
z
) \

91 
	`SAFE
–*
ess_ªs
; \

92 
ess_Àn
; \

93 
ess_r
; \

94 
ess_Àn
 = (
ess_r
 = 
	`SVALUE_STRLEN
(
x
)Ë+ 
	`°æí
(
y
); \

95 i‡((
x
)->
subty≥
 =
STRING_MALLOC
 && 
	`MSTR_REF
((x)->
u
.
°rög
) == 1) { \

96 
ess_ªs
 = (*Ë
	`exãnd_°rög
((
x
)->
u
.
°rög
, 
ess_Àn
); \

97 i‡(!
ess_ªs
Ë
	`Áèl
("QTZ_ServerEngine:Out of memory!\n"); \

98 
	`°r˝y
(
ess_ªs
 + 
ess_r
, (
y
)); \

100 
ess_ªs
 = 
	`√w_°rög
(
ess_Àn
, 
z
); \

101 
	`°r˝y
(
ess_ªs
, (
x
)->
u
.
°rög
); \

102 
	`°r˝y
(
ess_ªs
 + 
ess_r
, (
y
)); \

103 
	`‰ì_°rög_svÆue
(
x
); \

104 (
x
)->
subty≥
 = 
STRING_MALLOC
; \

106 (
x
)->
u
.
°rög
 = 
ess_ªs
; )

	)

109 
	#SVALUE_STRING_ADD_LEFT
(
y
, 
z
) \

110 
	`SAFE
–*
pss_ªs
; 
pss_r
; 
pss_Àn
; \

111 
pss_Àn
 = 
	`SVALUE_STRLEN
(
•
Ë+ (
pss_r
 = 
	`°æí
(
y
)); \

112 
pss_ªs
 = 
	`√w_°rög
(
pss_Àn
, 
z
); \

113 
	`°r˝y
(
pss_ªs
, 
y
); \

114 
	`°r˝y
(
pss_ªs
 + 
pss_r
, 
•
->
u
.
°rög
); \

115 
	`‰ì_°rög_svÆue
(
•
--); \

116 
•
->
ty≥
 = 
T_STRING
; \

117 
•
->
u
.
°rög
 = 
pss_ªs
; \

118 
•
->
subty≥
 = 
STRING_MALLOC
; \

119 )

	)

122 
	#SVALUE_STRING_JOIN
(
x
, 
y
, 
z
) \

123 
	`SAFE
–*
ssj_ªs
; 
ssj_r
; 
ssj_Àn
; \

124 
ssj_r
 = 
	`SVALUE_STRLEN
(
x
); \

125 
ssj_Àn
 = 
ssj_r
 + 
	`SVALUE_STRLEN
(
y
); \

126 i‡((
x
)->
subty≥
 =
STRING_MALLOC
 && 
	`MSTR_REF
((x)->
u
.
°rög
) == 1) { \

127 
ssj_ªs
 = (*Ë
	`exãnd_°rög
((
x
)->
u
.
°rög
, 
ssj_Àn
); \

128 i‡(!
ssj_ªs
Ë
	`Áèl
("QTZ_ServerEngine:Out of memory!\n"); \

129 (Ë
	`°r˝y
(
ssj_ªs
 + 
ssj_r
, (
y
)->
u
.
°rög
); \

130 
	`‰ì_°rög_svÆue
(
y
); \

132 
ssj_ªs
 = (*Ë
	`√w_°rög
(
ssj_Àn
, 
z
); \

133 
	`°r˝y
(
ssj_ªs
, (
x
)->
u
.
°rög
); \

134 
	`°r˝y
(
ssj_ªs
 + 
ssj_r
, (
y
)->
u
.
°rög
); \

135 
	`‰ì_°rög_svÆue
(
y
); \

136 
	`‰ì_°rög_svÆue
(
x
); \

137 (
x
)->
subty≥
 = 
STRING_MALLOC
; \

139 (
x
)->
u
.
°rög
 = 
ssj_ªs
; \

140 )

	)

143 
	#ˇŒ_¥ogøm
(
¥og
, 
off£t
) \

144 
	`evÆ_ö°ru˘i⁄
(
¥og
->
¥ogøm
 + 
off£t
)

	)

146 #ifde‡
DEBUG


147 
	#‰ì_svÆue
(
x
,
y
Ë
	`öt_‰ì_svÆue
(x,y)

	)

149 
	#‰ì_svÆue
(
x
,
y
Ë
	`öt_‰ì_svÆue
(x)

	)

152 
	#push_svÆue
(
x
Ë
	`assign_svÆue_no_‰ì
(++
•
, x)

	)

153 
	#put_numbî
(
x
Ë
	`SAFE
( \

154 
•
->
ty≥
 = 
T_NUMBER
;\

155 
•
->
subty≥
 = 0;\

156 
•
->
u
.
numbî
 = (
x
);\

157 )

	)

158 
	#£t_svÆue_numbî
(
s
, 
x
Ë
	`SAFE
( \

159 (
s
)->
ty≥
 = 
T_NUMBER
;\

160 (
s
)->
subty≥
 = 0;\

161 (
s
)->
u
.
numbî
 = (
x
);\

162 )

	)

163 
	#£t_svÆue_ªÆ
(
s
, 
x
Ë
	`SAFE
( \

164 (
s
)->
ty≥
 = 
T_REAL
;\

165 (
s
)->
u
.
ªÆ
 = (
x
);\

166 )

	)

168 
	#£t_svÆue_obje˘
(
s
, 
x
Ë
	`SAFE
( \

169 (
s
)->
ty≥
 = 
T_OBJECT
;\

170 (
s
)->
u
.
ob
 = (
x
);\

171 )

	)

172 
	#£t_svÆue_fun˘i⁄
(
s
, 
x
Ë
	`SAFE
( \

173 (
s
)->
ty≥
 = 
T_FUNCTION
;\

174 (
s
)->
u
.
Â
 = (
x
);\

175 )

	)

177 
	#put_buf„r
(
x
Ë
	`SAFE
( \

178 
•
->
ty≥
 = 
T_BUFFER
;\

179 
•
->
u
.
buf
 = (
x
);\

180 )

	)

181 
	#£t_svÆue_buf„r
(
s
, 
x
Ë
	`SAFE
( \

182 (
s
)->
ty≥
 = 
T_BUFFER
;\

183 (
s
)->
u
.
buf
 = (
x
);\

184 )

	)

185 
	#put_unde°ed_obje˘
(
x
Ë
	`SAFE
(\

186 
•
->
ty≥
 = 
T_OBJECT
;\

187 
•
->
u
.
ob
 = (
x
);\

188 )

	)

189 
	#put_obje˘
(
x
Ë
	`SAFE
(\

190 i‡((
x
)->
Êags
 & 
O_DESTRUCTED
Ë
	`put_numbî
(0); \

191 
	`put_unde°ed_obje˘
(
x
);\

192 )

	)

193 
	#put_uƒe„d_unde°ed_obje˘
(
x
, 
y
Ë
	`SAFE
(\

194 
•
->
ty≥
 = 
T_OBJECT
;\

195 
•
->
u
.
ob
 = (
x
);\

196 
	`add_ªf
((
x
), 
y
);\

197 )

	)

198 
	#put_uƒe„d_obje˘
(
x
,
y
Ë
	`SAFE
(\

199 i‡((
x
)->
Êags
 & 
O_DESTRUCTED
)\

200 
	`put_numbî
(0);\

201 
	`put_uƒe„d_unde°ed_obje˘
(
x
,
y
);\

202 )

	)

204 
	#put_c⁄°™t_°rög
(
x
Ë
	`SAFE
(\

205 
•
->
ty≥
 = 
T_STRING
;\

206 
•
->
subty≥
 = 
STRING_SHARED
;\

207 
•
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
x
);\

208 )

	)

209 
	#put_mÆlo˚d_°rög
(
x
Ë
	`SAFE
(\

210 
•
->
ty≥
 = 
T_STRING
;\

211 
•
->
subty≥
 = 
STRING_MALLOC
;\

212 
•
->
u
.
°rög
 = (
x
);\

213 )

	)

214 
	#£t_svÆue_mÆlo˚d_°rög
(
s
, 
x
Ë
	`SAFE
(\

215 (
s
)->
ty≥
 = 
T_STRING
;\

216 (
s
)->
subty≥
 = 
STRING_MALLOC
;\

217 (
s
)->
u
.
°rög
 = (
x
);\

218 )

	)

219 
	#£t_svÆue_sh¨ed_°rög
(
s
, 
x
Ë
	`SAFE
(\

220 (
s
)->
ty≥
 = 
T_STRING
;\

221 (
s
)->
subty≥
 = 
STRING_SHARED
;\

222 (
s
)->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
x
);\

223 )

	)

224 
	#put_¨øy
(
x
Ë
	`SAFE
(\

225 
•
->
ty≥
 = 
T_ARRAY
;\

226 
•
->
u
.
¨r
 = (
x
);\

227 )

	)

228 
	#£t_svÆue_¨øy
(
s
, 
x
Ë
	`SAFE
(\

229 (
s
)->
ty≥
 = 
T_ARRAY
;\

230 (
s
)->
u
.
¨r
 = (
x
);\

231 )

	)

232 
	#£t_svÆue_m≠pög
(
s
, 
x
Ë
	`SAFE
(\

233 (
s
)->
ty≥
 = 
T_MAPPING
;\

234 (
s
)->
u
.
m≠
 = (
x
);\

235 )

	)

236 
	#£t_svÆue_˛ass
(
s
, 
x
Ë
	`SAFE
(\

237 (
s
)->
ty≥
 = 
T_CLASS
;\

238 (
s
)->
u
.
¨r
 = (
x
);\

239 )

	)

240 
	#put_sh¨ed_°rög
(
x
Ë
	`SAFE
(\

241 
•
->
ty≥
 = 
T_STRING
;\

242 
•
->
subty≥
 = 
STRING_SHARED
;\

243 
•
->
u
.
°rög
 = (
x
);\

244 )

	)

246 
	#£t_svÆue_undeföed
(
s
Ë
	`SAFE
( \

247 *(
s
Ë
c⁄°0u
; \

248 )

	)

250 
	#svÆue_add_ªf
(
s
Ë
	`SAFE
(\

251 i‡((
s
)->
ty≥
 =
T_STRING
) { \

252 i‡((
s
)->
subty≥
 &
STRING_COUNTED
) \

254 
	`INC_COUNTED_REF
((
s
)->
u
.
°rög
); \

255 
	`ADD_STRING
(
	`MSTR_SIZE
((
s
)->
u
.
°rög
) ); \

256 
	`NDBG
(
	`BLOCK
((
s
)->
u
.
°rög
)); \

259 i‡((
s
)->
ty≥
 &
T_REFED
Ë(s)->
u
.
ª„d
->
ªf
++;\

260 )

	)

262 
	#efun_¨g
(
n
Ë(
•
 - 
°_num_¨g
 +“))

	)

264 
¥ogøm_t
 *
cuºít_¥og
;

265 
ˇŒî_ty≥
;

266 *
pc
;

267 
svÆue_t
 *
•
;

268 
svÆue_t
 *
íd_of_°ack
;

269 
svÆue_t
 *
Â
;

270 
svÆue_t
 
ˇtch_vÆue
;

271 
c⁄åﬁ_°ack_t
 
c⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
];

272 
c⁄åﬁ_°ack_t
 *
c•
;

273 
too_dìp_îr‹
;

274 
max_evÆ_îr‹
;

275 
fun˘i⁄_ödex_off£t
;

276 
v¨übÀ_ödex_off£t
;

277 
≠∂y_low_ˇŒ_Ÿhîs
;

278 
≠∂y_low_ˇche_hôs
;

279 
≠∂y_low_¶Ÿs_u£d
;

280 
≠∂y_low_cﬁlisi⁄s
;

281 
fun˘i⁄_ödex_off£t
;

282 
simul_efun_is_lﬂdög
;

283 
¥ogøm_t
 
Áke_¥og
;

284 
svÆue_t
 
globÆ_lvÆue_byã
;

285 
num_v¨¨gs
;

287 
evÆ_ö°ru˘i⁄
(*
p
);

288 
INLINE
 
assign_svÆue
(
svÆue_t
 *, svalue_t*);

289 
INLINE
 
assign_svÆue_no_‰ì
(
svÆue_t
 *, svalue_t*);

290 
INLINE
 
c›y_some_svÆues
(
svÆue_t
 *, svalue_t *, );

291 
INLINE
 
å™s„r_push_some_svÆues
(
svÆue_t
 *, );

292 
INLINE
 
push_some_svÆues
(
svÆue_t
 *, );

293 #ifde‡
DEBUG


294 
INLINE
 
öt_‰ì_svÆue
(
svÆue_t
 *, *);

296 
INLINE
 
öt_‰ì_svÆue
(
svÆue_t
*);

298 
INLINE
 
‰ì_°rög_svÆue
(
svÆue_t
*);

299 
INLINE
 
‰ì_some_svÆues
(
svÆue_t
 *, );

300 
INLINE
 
push_obje˘
(
obje˘_t
*);

301 
INLINE
 
push_numbî
();

302 
INLINE
 
push_ªÆ
();

303 
INLINE
 
push_undeföed
();

304 
INLINE
 
push_undeföeds
(
n
);

305 
INLINE
 
c›y_™d_push_°rög
(*);

306 
INLINE
 
sh¨e_™d_push_°rög
(*);

307 
INLINE
 
push_¨øy
(
¨øy_t
*);

308 
INLINE
 
push_ª„d_¨øy
(
¨øy_t
*);

309 
INLINE
 
push_buf„r
(
buf„r_t
*);

310 
INLINE
 
push_ª„d_buf„r
(
buf„r_t
*);

311 
INLINE
 
push_m≠pög
(
m≠pög_t
*);

312 
INLINE
 
push_ª„d_m≠pög
(
m≠pög_t
*);

313 
INLINE
 
push_˛ass
(
¨øy_t
*);

314 
INLINE
 
push_ª„d_˛ass
(
¨øy_t
 *, );

315 
INLINE
 
push_mÆlo˚d_°rög
(*);

316 
INLINE
 
push_sh¨ed_°rög
(*);

317 
INLINE
 
push_c⁄°™t_°rög
(*);

318 
INLINE
 
p›_°ack
();

319 
INLINE
 
p›_n_ñems
();

320 
INLINE
 
p›_2_ñems
();

321 
INLINE
 
p›_3_ñems
();

322 
INLINE
 
compûî_fun˘i⁄_t
 *
£tup_öhîôed_‰ame
();

323 *
fun˘i⁄_«me
(
¥ogøm_t
 *, );

324 
ªmove_obje˘_‰om_°ack
(
obje˘_t
*);

325 
£tup_Áke_‰ame
(
fu≈å_t
*);

326 
ªmove_Áke_‰ame
();

327 
push_ödexed_lvÆue
();

329 
¥o˚ss_efun_ˇŒback
(, 
fun˘i⁄_to_ˇŒ_t
 *, );

330 
svÆue_t
 *
ˇŒ_efun_ˇŒback
(
fun˘i⁄_to_ˇŒ_t
 *, );

331 *
ty≥_«me
(
c
);

332 
bad_¨g
(, );

333 
bad_¨gumít
(
svÆue_t
 *, , , );

334 
check_f‹_de°r
(
¨øy_t
*);

335 
is_°©ic
(*, 
obje˘_t
*);

336 
≠∂y_low
(*, 
obje˘_t
 *, );

337 
svÆue_t
 *
≠∂y
(*, 
obje˘_t
 *, , );

338 
svÆue_t
 *
ˇŒ_fun˘i⁄_poöãr
(
fu≈å_t
 *, );

339 
svÆue_t
 *
ß„_ˇŒ_fun˘i⁄_poöãr
(
fu≈å_t
 *, );

340 
svÆue_t
 *
ß„_≠∂y
(*, 
obje˘_t
 *, , );

341 
ˇŒ___INIT
(
obje˘_t
*);

342 
¨øy_t
 *
ˇŒ_Æl_Ÿhî
(array_t *, *, );

343 *
fun˘i⁄_exi°s
(*, 
obje˘_t
 *, );

344 
ˇŒ_fun˘i⁄
(
¥ogøm_t
 *, );

345 
svÆue_t
 *
≠∂y_ma°î_ob
(*, );

346 
svÆue_t
 *
ß„_≠∂y_ma°î_ob
(*, );

347 
öô_ma°î
(*);

348 
m¨k_≠∂y_low_ˇche
();

349 
å™¶©e_absﬁuã_löe
(, *, *, *);

350 *
add_¶ash
(*);

351 
°Ωªf
(*, *);

352 
¨øy_t
 *
gë_svÆue_åa˚
();

353 
do_åa˚
(*, *, *);

354 *
dump_åa˚
();

355 
›cdump
(*);

356 
öãr_ssˇnf
(
svÆue_t
 *, svalue_t *, svalue_t *, );

357 *
gë_löe_numbî_if_™y
();

358 *
gë_löe_numbî
(*, 
¥ogøm_t
*);

359 
gë_löe_numbî_öfo
(**, *);

360 
gë_vîsi⁄
(*);

361 
ª£t_machöe
();

362 
u∆ök_°rög_svÆue
(
svÆue_t
*);

363 
c›y_lvÆue_ønge
(
svÆue_t
*);

364 
assign_lvÆue_ønge
(
svÆue_t
*);

366 
p›_c⁄ãxt
(
îr‹_c⁄ãxt_t
*);

367 
ª°‹e_c⁄ãxt
(
îr‹_c⁄ãxt_t
*);

368 
ßve_c⁄ãxt
(
îr‹_c⁄ãxt_t
*);

370 
p›_c⁄åﬁ_°ack
();

371 
INLINE
 
compûî_fun˘i⁄_t
 *
£tup_√w_‰ame
();

372 
INLINE
 
push_c⁄åﬁ_°ack
();

373 
¥ogøm_t
 *
föd_fun˘i⁄_by_«me2
(
obje˘_t
 *
ob
, **
«me
, *
ödex
, *
fio
, *
vio
);

375 
bªak_poöt
();

377 #ifde‡
DEBUGMALLOC_EXTENSIONS


378 
m¨k_svÆue
(
svÆue_t
*);

379 
m¨k_°ack
();

	@include/lex.h

1 #i‚de‡
_LEX_H_


2 
	#_LEX_H_


	)

4 
	~"°d.h
"

6 
	#DEFMAX
 10000

	)

7 
	#MAXLINE
 1024

	)

8 
	#MLEN
 4096

	)

9 
	#NSIZE
 256

	)

10 
	#MAX_INSTRS
 512

	)

11 
	#EXPANDMAX
 25000

	)

12 
	#NARGS
 25

	)

13 
	#MARKS
 '@'

	)

15 
	#SKIPWHITE
 
	`is•a˚
(*
p
Ë&& (*∞!'\n')Ëp++

	)

17 
	#DEFAULT_NONE
 0xff

	)

18 
	#DEFAULT_THIS_OBJECT
 0x„

	)

20 
	#PRAGMA_STRICT_TYPES
 1

	)

21 
	#PRAGMA_WARNINGS
 2

	)

22 
	#PRAGMA_SAVE_TYPES
 4

	)

23 
	#PRAGMA_SAVE_BINARY
 8

	)

24 
	#PRAGMA_OPTIMIZE
 16

	)

25 
	#PRAGMA_ERROR_CONTEXT
 32

	)

26 
	#PRAGMA_OPTIMIZE_HIGH
 64

	)

28 
	#FOA_GLOBAL_SCOPE
 0x1

	)

29 
	#FOA_NEEDS_MALLOC
 0x2

	)

33 
SIGNED
 
	mloˇl_num
, 
	mglobÆ_num
, 
	mefun_num
;

34 
SIGNED
 
	mfun˘i⁄_num
, 
	msimul_num
, 
	m˛ass_num
;

35 } 
	tdeföed_«me_t
;

37 
	sif°©e_s


39 
if°©e_s
 *
	m√xt
;

40 
	m°©e
;

41 } 
	tif°©e_t
;

43 
	sde‚_s


45 
de‚_s
 *
	m√xt
;

46 *
	m«me
;

47 *
	mexps
;

48 
	mÊags
;

49 
	m«rgs
;

50 } 
	tde‚_t
;

53 
	#DEFHASH
 64

	)

54 
	#defhash
(
s
Ë(
	`whash°r
((s), 10Ë& (
DEFHASH
 - 1))

	)

56 
	#DEF_IS_UNDEFINED
 1

	)

57 
	#DEF_IS_PREDEF
 2

	)

59 
	#DEF_IS_NOT_LOCAL
 4

	)

62 
	#IHE_RESWORD
 0x8000

	)

63 
	#IHE_EFUN
 0x4000

	)

64 
	#IHE_SIMUL
 0x2000

	)

65 
	#IHE_PERMANENT
 (
IHE_RESWORD
 | 
IHE_EFUN
 | 
IHE_SIMUL
)

	)

66 
	#TOKEN_MASK
 0x0fff

	)

68 
	#INDENT_HASH_SIZE
 1024

	)

70 
	sidít_hash_ñem_s


72 *
	m«me
;

73 
	mtokí
;

74 
	m£m_vÆue
;

75 
idít_hash_ñem_s
 *
	m√xt
;

77 
idít_hash_ñem_s
 *
	m√xt_dúty
;

78 
deföed_«me_t
 
	mdn
;

79 } 
	tidít_hash_ñem_t
;

83 *
	mw‹d
;

84 
	mtokí
;

85 
	m£m_vÆue
;

86 
idít_hash_ñem_t
 *
	m√xt
;

88 
	mmö_¨gs
;

89 
	mmax_¨gs
;

90 
	mªt_ty≥
;

91 
	m¨g_ty≥1
;

92 
	m¨g_ty≥2
;

93 
	m¨g_ty≥3
;

94 
	m¨g_ty≥4
;

95 
	m¨g_ödex
;

96 
	mDeÁu…
;

98 } 
	tkeyw‹d_t
;

100 
	sÕc_¥edef_s


102 *
	mÊag
;

104 } 
	tÕc_¥edef_t
;

106 
	#EXPECT_ELSE
 1

	)

107 
	#EXPECT_ENDIF
 2

	)

109 
Õc_¥edef_t
 *
Õc_¥edefs
;

110 
Õc_¥edef_s
 
comm™d_löe_¥edefs
[20];

112 
	#ißlunum
(
c
Ë(
	`iß um
(cË|| (cË='_')

	)

120 
	#F_ALIAS_FLAG
 1024

	)

124 
	mmax_¨g
, 
	mmö_¨g
;

125 
	mty≥
[4];

126 
	mDeÁu…
;

127 
	mªt_ty≥
;

128 *
	m«me
;

130 
	m¨g_ödex
;

131 } 
	tö°r_t
;

136 
ö°r_t
 
ö°rs
[512];

137 
cuºít_löe
;

138 
cuºít_löe_ba£
;

139 
cuºít_löe_ßved
;

140 
tŸÆ_löes
;

141 *
cuºít_fûe
;

142 
cuºít_fûe_id
;

143 
¥agmas
;

144 
num_∑r£_îr‹
;

145 
Õc_¥edef_t
 *
Õc_¥edefs
;

146 
efun_¨g_ty≥s
[];

147 
yyãxt
[1024];

148 
ö°r_t
 
ö°rs
[];

149 
keyw‹d_t
 
¥edefs
[];

151 
INLINE
 
push_fun˘i⁄_c⁄ãxt
();

152 
p›_fun˘i⁄_c⁄ãxt
();

153 
yyÀx
();

154 
öô_num_¨gs
();

155 *
quîy_ö°r_«me
();

156 *
gë_f_«me
();

157 
£t_öc_li°
(*);

158 
°¨t_√w_fûe
();

159 
íd_√w_fûe
();

160 
lookup_¥edef
(*);

161 
add_¥edeföes
(*);

162 *
maö_fûe_«me
();

163 *
gë_deföed_«me
(
deföed_«me_t
*);

164 
idít_hash_ñem_t
 *
föd_‹_add_idít
(*, );

165 
idít_hash_ñem_t
 *
föd_‹_add_≥rm_idít
(*);

166 
idít_hash_ñem_t
 *
lookup_idít
(*);

167 
‰ì_unu£d_idítifõrs
();

168 
öô_idítifõrs
();

169 *
show_îr‹_c⁄ãxt
();

170 #ifde‡
DEBUGMALLOC_EXTENSIONS


171 
m¨k_Æl_deföes
();

	@include/lint.h

10 #i‚de‡
LINT_H_


11 
	#LINT_H_


	)

13 
	~"°d.h
"

15 #i‡
deföed
(
_SEQUENT_
Ë|| deföed(
SVR4
)

16 
	~<mÆloc.h
>

23 #ifde‡
USE_POSIX_SIGNALS


24 
p‹t_sigblock
();

25 
p‹t_sigmask
();

27 #i‚de‡
_M_UNIX


28 (*
p‹t_sig«l
() ) ();

31 
p‹t_sig£tmask
();

34 #ifde‡
NeXT


35 
_£tjmp
();

36 
_l⁄gjmp
();

40 #i‡
deföed
(
sun
Ë&& !deföed(
SunOS_5
Ë&& deföed(
__STDC__
)

41 #ifde‡
BUFSIZ


42 
Âuts
(*, 
FILE
*);

43 
fwrôe
(*, , , 
FILE
*);

44 
‰ód
(*, , , 
FILE
*);

46 
ssˇnf
(*, *, ...);

47 
≥º‹
(*);

48 
sy°em
(*);

49 
©oi
(const *);

50 
£tsock›t
(, , , *, );

51 
f£ek
 
PROT_STDIO
–(
FILE
 *, , ) );

52 
Æ¨m
();

53 
io˘l
(, ...);

54 
ª«me
(*, *);

55 
ªadlök
(*, *, );

56 
symlök
(*, *);

57 
fchmod
(, );

60 #i‡(
deföed
(
SVR4
Ë&& !deföed(
sgi
)Ë|| deföed(
__386BSD__
)

61 
exô
();

64 #i‡!
deföed
(
SunOS_5
Ë&& !deföed(
NeXT
)

65 #ifde‡
sun


66 *
_¸y±
(*, *);

69 #ifde‡
DRAND48


70 #i‚de‡
sgi


71 
dønd48
();

72 
§™d48
();

75 #ifde‡
RANDOM


76 
øndom
();

80 #ifde‡
PEDANTIC


81 #ifde‡
sgi


82 
uÆ¨m
(, );

	@include/list.h

1 
	sli°_öt


3 (*
	madd
Ë(
li°_öt
 *
	mli°p
, 
	mnum
);

4 (*
	mgë
Ë(
li°_öt
 *
	mli°p
, *
	mnum
);

6 *
	m_°‹e
;

7 
	m_max
;

8 
	m_hód
;

9 
	m_èû
;

10 
	m_u£d
;

11 } 
	tLIST_I
;

13 
_add_öt
(
LIST_I
 *
li°p
, 
num
);

14 
_gë_öt
(
LIST_I
 *
li°p
, *
num
);

15 
öô_li°_öt
(
LIST_I
 **
li°µ
, 
max_li°
);

16 
‰ì_li°_öt
(
LIST_I
 *
li°p
);

	@include/localtime.h

4 
	#LT_SEC
 0

	)

5 
	#LT_MIN
 1

	)

6 
	#LT_HOUR
 2

	)

7 
	#LT_MDAY
 3

	)

8 
	#LT_MON
 4

	)

9 
	#LT_YEAR
 5

	)

10 
	#LT_WDAY
 6

	)

11 
	#LT_YDAY
 7

	)

12 
	#LT_GMTOFF
 8

	)

13 
	#LT_ZONE
 9

	)

	@include/lpc.h

1 #i‚de‡
LPC_H


2 
	#LPC_H


	)

6 
	mªf
;

7 } 
	tª„d_t
;

9 
	uu


11 *
	m°rög
;

12 
	mnumbî
;

13 
	mªÆ
;

15 
ª„d_t
 *
	mª„d
;

17 
buf„r_s
 *
	mbuf
;

18 
obje˘_s
 *
	mob
;

19 
¨øy_s
 *
	m¨r
;

20 
m≠pög_s
 *
	mm≠
;

21 
fu≈å_s
 *
	mÂ
;

23 
svÆue_s
 *
	mlvÆue
;

24 *
	mlvÆue_byã
;

25 (*
	mîr‹_h™dÀr
) ();

33 
	ssvÆue_s


35 
	mty≥
;

36 
	msubty≥
;

37 
u
 
	mu
;

40 
	tsvÆue_t
;

43 
	#T_INVALID
 0x0

	)

44 
	#T_LVALUE
 0x1

	)

46 
	#T_NUMBER
 0x2

	)

47 
	#T_STRING
 0x4

	)

48 
	#T_REAL
 0x80

	)

50 
	#T_ARRAY
 0x8

	)

51 
	#T_OBJECT
 0x10

	)

52 
	#T_MAPPING
 0x20

	)

53 
	#T_FUNCTION
 0x40

	)

54 
	#T_BUFFER
 0x100

	)

55 
	#T_CLASS
 0x200

	)

57 
	#T_REFED
 (
T_ARRAY
|
T_OBJECT
|
T_MAPPING
|
T_FUNCTION
|
T_BUFFER
|
T_CLASS
)

	)

59 
	#T_LVALUE_BYTE
 0x400

	)

60 
	#T_LVALUE_RANGE
 0x800

	)

61 
	#T_ERROR_HANDLER
 0x1000

	)

62 #ifde‡
DEBUG


63 
	#T_FREED
 0x2000

	)

65 
	#T_ANY
 
T_STRING
|
T_NUMBER
|
T_ARRAY
|
T_OBJECT
|
T_MAPPING
|
T_FUNCTION
| \

66 
T_REAL
|
T_BUFFER
|
T_CLASS


	)

69 
	#STRING_COUNTED
 0x1

	)

70 
	#STRING_HASHED
 0x2

	)

72 
	#STRING_MALLOC
 
STRING_COUNTED


	)

73 
	#STRING_SHARED
 (
STRING_COUNTED
 | 
STRING_HASHED
)

	)

74 
	#STRING_CONSTANT
 0

	)

76 
	#T_UNDEFINED
 0x4

	)

	@include/lpc_args_op.h

2 #i‚de‡
__LPC_ARGS_OP_H__


3 
	#__LPC_ARGS_OP_H__


	)

5 
	~"Õc_ö˛.h
"

7 
svÆue_t
* 
	g__¨gs
;

9 
	#SET_ALL_ARGS
 \

10 
__num_¨g
 = 
°_num_¨g
; \

11 
__¨gs
 = 
°_num_¨g
?(
•
 - 
__num_¨g
 + 1):
NULL
;

	)

13 
	#ARGS
(
n
Ë(
__¨gs
 +Ç)

	)

15 
	#POP_ALL_ARGS
 do{\

16 
	`p›_n_ñems
(
__num_¨g
);\

17 
__¨gs
 = 
NULL
;\

18 }0);

	)

	@include/lpc_incl.h

1 #i‚de‡
LPC_INCL_H


2 
	#LPC_INCL_H


	)

4 
	~"°d.h
"

5 
	~"‹igö.h
"

6 
	~"≠∂õs.h
"

8 
	~"c⁄fig.h
"

9 
	~"¥ogøm.h
"

10 
	~"Õc.h
"

11 
	~"fun˘i⁄.h
"

12 
	~"buf„r.h
"

13 
	~"obje˘.h
"

14 
	~"dúty.h
"

15 
	~"¨øy.h
"

16 
	~"m≠pög.h
"

17 
	~"˛ass.h
"

18 
	~"e›î©‹s.h
"

21 
	~"maö.h
"

22 
	~"°øŒoc.h
"

23 
	~"simuœã.h
"

24 
	~"öãΩªt.h
"

25 
	~"rc.h
"

27 
	#FP_LOCAL
 2

	)

28 
	#FP_EFUN
 3

	)

29 
	#FP_SIMUL
 4

	)

30 
	#FP_FUNCTIONAL
 5

	)

33 
	#FP_G_VAR
 6

	)

34 
	#FP_L_VAR
 7

	)

35 
	#FP_ANONYMOUS
 8

	)

36 
	#FP_THIS_OBJECT
 0x10

	)

39 
	#FP_MASK
 0x0f

	)

40 
	#FP_HAS_ARGUMENTS
 0x10

	)

41 
	#FP_OWNER_DESTED
 0x20

	)

42 
	#FP_NOT_BINDABLE
 0x40

	)

44 
	#SETJMP
(
x
Ë
	`£tjmp
(x)

	)

45 
	#LONGJMP
(
x
,
y
Ë
	`l⁄gjmp
(x,y)

	)

	@include/lpc_socket.h

6 #i‚de‡
_LPC_SOCKET_H_


7 
	#_LPC_SOCKET_H_


	)

9 
	~<evít.h
>

10 
	~"°d.h
"

11 
	~<›ís¶/s¶.h
>

13 
	#MAX_LPC_SOCKET
 (4096)

14 
	#BACKLOG
 (5)

15 

	)

16 
	#ADDR_BUF_SIZE
 64

	)

26 
	esockë_°©e
 {

27 
	mCLOSED
 = 0, 
	mUNBOUND
, 
	mBOUND
, 
	mLISTEN
, 
	mDATA_XFER
,

32 
	mfunc_ty≥
;

33 
°rög_‹_func
 
	mfun˘i⁄
;

34 } 
	tˇŒback_t
;

37 
	mödex
;

38 
	mfd
;

40 
	mc⁄√˘ed
;

42 
sockë_°©e
 
	m°©e
;

44 
sockaddr_ö
 
	ml_addr
;

46 
sockaddr_ö
 
	mr_addr
;

49 
	m«me
[
ADDR_BUF_SIZE
];

52 
evít
* 
	mli°í_ev
;

53 
buf„ªvít
 * 
	mc⁄√˘_ev
;

56 
obje˘_t
 *
	mow√r_ob
;

58 
ˇŒback_t
 
	m˛o£_ˇŒback
;

62 
ˇŒback_t
 
	mli°í_ˇŒback
;

64 
ˇŒback_t
 
	mªad_ˇŒback
;

65 
ˇŒback_t
 
	m⁄c⁄√˘_ˇŒback
;

68 } 
	tÕc_sockë_t
;

	@include/lpc_to_c.h

1 #i‚de‡
LPC_TO_C_H


2 
	#LPC_TO_C_H


	)

4 
	~"Õc_ö˛.h
"

5 
	~"e›î©‹s.h
"

6 
	~"efun_¥Ÿos.h
"

	@include/macros.h

1 #i‚de‡
MACROS_H


2 
	#MACROS_H


	)

4 #ifde‡
__STDC__


5 
	#ANSI_STRING_HACK
(
x
Ë#x

	)

6 
	#DONT_ASK_WHY
(
x
Ë(x)

	)

7 
	#WHERE
 (
__FILE__
 ":" 
	`DONT_ASK_WHY
(
x
))

	)

9 
	#WHERE
 "n⁄-™sòcompûî†¨ê®∑ö"

	)

15 #ifde‡
BUFSIZ


16 
	#PROT_STDIO
(
x
Ë
	`PROT
(x)

	)

18 
	#PROT_STDIO
(
x
Ë()

	)

31 #i‡
deföed
(
__STDC__
Ë|| deföed(
WIN32
)

32 
	#VOLATILE
 vﬁ©ûe

	)

33 
	#SIGNED
 sig√d

	)

35 
	#VOLATILE


	)

36 
	#SIGNED


	)

40 
	#V_START
(
vli°
, 
œ°_¨g
Ë
	`va_°¨t
(vli°,Üa°_¨g)

	)

41 
	#V_VAR
(
ty≥
, 
v¨
, 
vli°
)

	)

42 
	#V_DCL
(
x
)

	)

44 
	#SAFE
(
x
Ëdÿ{ x } 0)

	)

56 #i‡(
deföed
(
SYSMALLOC
Ë+ deföed(
SMALLOC
Ë+ deföed(
BSDMALLOC
)) > 1

57 !
O∆y
 
⁄e
 
	$mÆloc
(
SYSMALLOC
, 
SMALLOC
, 
BSDMALLOC
)
∑ckage
 
should
 
be
 
deföed


60 #i‡(
	`deföed
(
WRAPPEDMALLOC
Ë+ deföed(
DEBUGMALLOC
)) > 1

61 !
O∆y
 
⁄e
 
	$wøµî
(
©
 
mo°
)
should
 
be
 
deföed


64 #i‡
	`deföed
 (
WRAPPEDMALLOC
Ë&& !deföed(
IN_MALLOC_WRAPPER
)

66 
	#MALLOC
(
x
Ë
	`wøµedmÆloc
(x)

	)

67 
	#FREE
(
x
Ë
	`wøµed‰ì
(x)

	)

68 
	#REALLOC
(
x
, 
y
Ë
	`wøµedªÆloc
(x, y)

	)

69 
	#CALLOC
(
x
, 
y
Ë
	`wøµedˇŒoc
(x, y)

	)

70 
	#DXALLOC
(
x
, 
t
, 
d
Ë
	`xÆloc
(x)

	)

71 
	#DMALLOC
(
x
, 
t
, 
d
Ë
	`MALLOC
(x)

	)

72 
	#DREALLOC
(
x
, 
y
, 
t
, 
d
Ë
	`REALLOC
(x,y)

	)

73 
	#DCALLOC
(
x
, 
y
, 
t
, 
d
Ë
	`CALLOC
(x,y)

	)

77 #i‡
	`deföed
(
DEBUGMALLOC
Ë&& !deföed(
IN_MALLOC_WRAPPER
)

79 
	#MALLOC
(
x
Ë
	`debugmÆloc
(x, 0, (*)0)

	)

80 
	#DMALLOC
(
x
, 
t
, 
d
Ë
	`debugmÆloc
(x,Å, d)

	)

81 
	#DXALLOC
(
x
, 
t
, 
d
Ë
	`debugmÆloc
(x,Å, d)

	)

82 
	#FREE
(
x
Ë
	`debug‰ì
(x)

	)

83 
	#REALLOC
(
x
,
y
Ë
	`debugªÆloc
(x,y,0,(*)0)

	)

84 
	#DREALLOC
(
x
,
y
,
èg
,
desc
Ë
	`debugªÆloc
(x,y,èg,desc)

	)

85 
	#CALLOC
(
x
,
y
Ë
	`debugˇŒoc
(x,y,0,(*)0)

	)

86 
	#DCALLOC
(
x
,
y
,
èg
,
desc
Ë
	`debugˇŒoc
(x,y,èg,desc)

	)

90 
	~"mÆloc.h
"

95 #i‡!
	`deföed
(
MALLOC
Ë&& !deföed(
EDIT_SOURCE
)

96 !
S‹ry
, 
You
 
√ed
 
to
 
•ecify
 
a
 
mÆloc
 
∑ckage
 
ö
 
loˇl_›ti⁄s
 / 
›ti⁄s
.
h


99 
	#ALLOCATE
(
ty≥
, 
èg
, 
desc
Ë(—y≥ *)
	`DXALLOC
(—y≥),Åag, desc))

	)

100 
	#CALLOCATE
(
num
, 
ty≥
, 
èg
, 
desc
Ë(—y≥ *)
	`DXALLOC
(—y≥[1]Ë* (num),Åag, desc))

	)

101 
	#RESIZE
(
±r
, 
num
, 
ty≥
, 
èg
, 
desc
Ë(—y≥ *)
	`DREALLOC
((*Ìå, —y≥Ë* (num),Åag, desc))

	)

103 #ifde‡
DEBUG


104 
	#IF_DEBUG
(
x
Ë
	)
x

105 
	#DEBUG_CHECK
(
x
, 
y
Ëi‡(xË
	`Áèl
(y)

	)

106 
	#DEBUG_CHECK1
(
x
, 
y
, 
a
Ëi‡(xË
	`Áèl
(y,á)

	)

107 
	#DEBUG_CHECK2
(
x
, 
y
, 
a
, 
b
Ëi‡(xË
	`Áèl
(y,á, b)

	)

109 
	#IF_DEBUG
(
x
)

	)

110 
	#DEBUG_CHECK
(
x
, 
y
)

	)

111 
	#DEBUG_CHECK1
(
x
, 
y
, 
a
)

	)

112 
	#DEBUG_CHECK2
(
x
, 
y
, 
a
, 
b
)

	)

115 #i‡!
	`deföed
(
EDIT_SOURCE
Ë&& !deföed(
_FUNC_SPEC_
)

116 
	#COPY2
(
x
, 
y
) ((*)(x))[0] = ((*)(y))[0]; \

117 ((*)(
x
))[1] = ((*)(
y
))[1]

	)

118 
	#LOAD2
(
x
, 
y
) ((*)&(x))[0] = *y++; \

119 ((*)&(
x
))[1] = *
y
++

	)

120 
	#STORE2
(
x
, 
y
) *x++ = ((*)(&(y)))[0]; \

121 *
x
++ = ((*)(&(
y
)))[1]

	)

123 
	#COPY4
(
x
, 
y
) ((*)(x))[0] = ((*)(y))[0]; \

124 ((*)(
x
))[1] = ((*)(
y
))[1]; \

125 ((*)(
x
))[2] = ((*)(
y
))[2]; \

126 ((*)(
x
))[3] = ((*)(
y
))[3]

	)

127 
	#LOAD4
(
x
, 
y
) ((*)&(x))[0] = *y++; \

128 ((*)&(
x
))[1] = *
y
++; \

129 ((*)&(
x
))[2] = *
y
++; \

130 ((*)&(
x
))[3] = *
y
++

	)

131 
	#STORE4
(
x
, 
y
) *x++ = ((*)(&(y)))[0]; \

132 *
x
++ = ((*)(&(
y
)))[1]; \

133 *
x
++ = ((*)(&(
y
)))[2]; \

134 *
x
++ = ((*)(&(
y
)))[3]

	)

136 
	#COPY8
(
x
, 
y
) ((*)(x))[0] = ((*)(y))[0]; \

137 ((*)(
x
))[1] = ((*)(
y
))[1]; \

138 ((*)(
x
))[2] = ((*)(
y
))[2]; \

139 ((*)(
x
))[3] = ((*)(
y
))[3]; \

140 ((*)(
x
))[4] = ((*)(
y
))[4]; \

141 ((*)(
x
))[5] = ((*)(
y
))[5]; \

142 ((*)(
x
))[6] = ((*)(
y
))[6]; \

143 ((*)(
x
))[7] = ((*)(
y
))[7]

	)

144 
	#LOAD8
(
x
, 
y
) ((*)&(x))[0] = *y++; \

145 ((*)&(
x
))[1] = *
y
++; \

146 ((*)&(
x
))[2] = *
y
++; \

147 ((*)&(
x
))[3] = *
y
++; \

148 ((*)&(
x
))[4] = *
y
++; \

149 ((*)&(
x
))[5] = *
y
++; \

150 ((*)&(
x
))[6] = *
y
++; \

151 ((*)&(
x
))[7] = *
y
++;

	)

152 
	#STORE8
(
x
, 
y
) *x++ = ((*)(&(y)))[0]; \

153 *
x
++ = ((*)(&(
y
)))[1]; \

154 *
x
++ = ((*)(&(
y
)))[2]; \

155 *
x
++ = ((*)(&(
y
)))[3]; \

156 *
x
++ = ((*)(&(
y
)))[4]; \

157 *
x
++ = ((*)(&(
y
)))[5]; \

158 *
x
++ = ((*)(&(
y
)))[6]; \

159 *
x
++ = ((*)(&(
y
)))[7]

	)

162 #i‡
SIZEOF_SHORT
 == 2

163 
	#COPY_SHORT
(
x
, 
y
Ë
	`COPY2
(x,y)

	)

164 
	#LOAD_SHORT
(
x
, 
y
Ë
	`LOAD2
(x,y)

	)

165 
	#STORE_SHORT
(
x
, 
y
Ë
	`STORE2
(x,y)

	)

167 !
sh‹ts
 
of
 
size
 
Ÿhî
 
th™
 2 
nŸ
 
im∂emíãd


171 #i‡
SIZEOF_INT
 == 4

172 
	#COPY_INT
(
x
, 
y
Ë
	`COPY4
(x,y)

	)

173 
	#LOAD_INT
(
x
, 
y
Ë
	`LOAD4
(x,y)

	)

174 
	#STORE_INT
(
x
, 
y
Ë
	`STORE4
(x,y)

	)

175 
	#INT_32
 

	)

177 !
öts
 
of
 
size
 
Ÿhî
 
th™
 4 
nŸ
 
im∂emíãd


181 #i‡
SIZEOF_FLOAT
 == 4

182 
	#COPY_FLOAT
(
x
, 
y
Ë
	`COPY4
(x,y)

	)

183 
	#LOAD_FLOAT
(
x
, 
y
Ë
	`LOAD4
(x,y)

	)

184 
	#STORE_FLOAT
(
x
, 
y
Ë
	`STORE4
(x,y)

	)

186 !
Êﬂts
 
of
 
size
 
Ÿhî
 
th™
 4 
nŸ
 
im∂emíãd


190 #i‡
SIZEOF_PTR
 == 4

191 
	#COPY_PTR
(
x
, 
y
Ë
	`COPY4
(x,y)

	)

192 
	#LOAD_PTR
(
x
, 
y
Ë
	`LOAD4
(x,y)

	)

193 
	#STORE_PTR
(
x
, 
y
Ë
	`STORE4
(x,y)

	)

195 
	#POINTER_INT
 

	)

196 
	#INS_POINTER
 
ös_öt


	)

198 #i‡
SIZEOF_PTR
 == 8

199 
	#COPY_PTR
(
x
, 
y
Ë
	`COPY8
(x,y)

	)

200 
	#LOAD_PTR
(
x
, 
y
Ë
	`LOAD8
(x,y)

	)

201 
	#STORE_PTR
(
x
, 
y
Ë
	`STORE8
(x,y)

	)

203 
	#POINTER_INT
 

	)

204 
	#INS_POINTER
 
ös_l⁄g


	)

206 !
poöãrs
 
of
 
size
 
Ÿhî
 
th™
 4 
‹
 8 
nŸ
 
im∂emíãd


212 #i‚de‡
_FUNC_SPEC_


213 *
	`xÆloc
();

214 #ifde‡
DEBUGMALLOC


215 *
	`öt_°rög_c›y
(*, *);

216 *
	`öt_°rög_u∆ök
(*, *);

217 *
öt_√w_°rög
 
	`PROT
( (, *) );

218 *
	`öt_Æloc_c°rög
(*, *);

220 *
	`öt_°rög_c›y
(*);

221 *
	`öt_°rög_u∆ök
(*);

222 *
	`öt_√w_°rög
();

223 *
	`öt_Æloc_c°rög
(*);

227 #ifde‡
DEBUGMALLOC


228 
	#°rög_c›y
(
x
,
y
Ë
	`öt_°rög_c›y
(x, y)

	)

229 
	#°rög_u∆ök
(
x
,
y
Ë
	`öt_°rög_u∆ök
(x, y)

	)

230 
	#√w_°rög
(
x
,
y
Ë
	`öt_√w_°rög
(x, y)

	)

231 
	#Æloc_c°rög
(
x
,
y
Ë
	`öt_Æloc_c°rög
(x, y)

	)

233 
	#°rög_c›y
(
x
,
y
Ë
	`öt_°rög_c›y
(x)

	)

234 
	#°rög_u∆ök
(
x
,
y
Ë
	`öt_°rög_u∆ök
(x)

	)

235 
	#√w_°rög
(
x
,
y
Ë
	`öt_√w_°rög
(x)

	)

236 
	#Æloc_c°rög
(
x
,
y
Ë
	`öt_Æloc_c°rög
(x)

	)

239 #i‚de‡
INLINE


240 #ifde‡
WIN32


241 
	#INLINE
 
__ölöe


	)

242 
	#INLINE_STATIC
 
__ölöe


	)

244 
	#INLINE


	)

248 #i‚de‡
INLINE_STATIC


249 
	#INLINE_STATIC
 
INLINE


	)

	@include/main.h

1 #i‚de‡
MAIN_H


2 
	#MAIN_H


	)

8 
	#PORT_TELNET
 1

	)

9 
	#PORT_BINARY
 2

	)

10 
	#PORT_ASCII
 3

	)

14 
	mköd
;

15 
	mp‹t
;

16 
	mfd
;

17 } 
	tp‹t_def_t
;

19 
p‹t_def_t
 
exã∫Æ_p‹t
[5];

20 #ifde‡
PACKAGE_EXTERNAL


21 *
exã∫Æ_cmd
[5];

24 #ifde‡
DEBUG


25 
d_Êag
;

27 
t_Êag
;

28 
comp_Êag
;

29 
run_Êag
;

30 
time_to_sw≠
;

31 
boŸ_time
;

32 
max_co°
;

33 
max_¨øy_size
;

34 
max_buf„r_size
;

35 
max_°rög_Àngth
;

36 *
ma°î_fûe_«me
;

37 *
ª£rved_¨ó
;

38 
svÆue_t
 
c⁄°0
;

39 
svÆue_t
 
c⁄°1
;

40 
svÆue_t
 
c⁄°0u
;

41 
°_num_¨g
;

42 
c⁄°s
[];

43 
¶ow_shut_down_to_do
;

44 
obje˘_t
 *
ma°î_ob
;

46 
debug_mesßge
(*, ...);

	@include/make_func.h

1 #i‚de‡
MAKE_FUNC_H


2 
	#MAKE_FUNC_H


	)

4 
	#MAX_FUNC
 4096

	)

6 
	#VOID
 1

	)

7 
	#INT
 2

	)

8 
	#STRING
 3

	)

9 
	#OBJECT
 4

	)

10 
	#MAPPING
 5

	)

11 
	#MIXED
 6

	)

12 
	#UNKNOWN
 7

	)

13 
	#FLOAT
 8

	)

14 
	#FUNCTION
 9

	)

15 
	#BUFFER
 10

	)

17 
num_buff
;

18 
›_code
, 
efun_code
, 
efun1_code
;

19 *
›î_codes
[
MAX_FUNC
];

20 *
efun_codes
[
MAX_FUNC
], *
efun1_codes
[MAX_FUNC];

21 *
efun_«mes
[
MAX_FUNC
], *
efun1_«mes
[MAX_FUNC];

22 *
key
[
MAX_FUNC
], *
buf
[MAX_FUNC];

24 
¨g_ty≥s
[400], 
œ°_cuºít_ty≥
;

26 *
˘y≥
();

27 *
ëy≥
();

	@include/malloc.h

1 #i‚de‡
MY_MALLOC_H


2 
	#MY_MALLOC_H


	)

8 #i‡
deföed
(
SYSMALLOC
) || \

9 (
deföed
(
SMALLOC
Ë&& deföed(
SBRK_OK
) ) || \

10 
	$deföed
(
BSDMALLOC
)

11 
	#MALLOC
(
x
Ë
	`mÆloc
(x)

	)

12 
	#FREE
(
x
Ë
	`‰ì
(x)

	)

13 
	#REALLOC
(
x
,
y
Ë
	`ªÆloc
(x,y)

	)

14 
	#CALLOC
(
x
,
y
Ë
	`ˇŒoc
(x,y)

	)

20 #i‡
	`deföed
(
SMALLOC
Ë&& !deföed(
SYSMALLOC
)

21 #ifde‡
SBRK_OK


22 
	#smÆloc_mÆloc
 
mÆloc


	)

23 
	#smÆloc_‰ì
 
‰ì


	)

24 
	#smÆloc_ªÆloc
 
ªÆloc


	)

25 
	#smÆloc_ˇŒoc
 
ˇŒoc


	)

27 
	#MALLOC
(
x
Ë
	`smÆloc_mÆloc
(x)

	)

28 
	#FREE
(
x
Ë
	`smÆloc_‰ì
(x)

	)

29 
	#REALLOC
(
x
,
y
Ë
	`smÆloc_ªÆloc
(x,y)

	)

30 
	#CALLOC
(
x
,
y
Ë
	`smÆloc_ˇŒoc
(x,y)

	)

35 #i‡
	`deföed
(
BSDMALLOC
Ë&& !deföed(
SYSMALLOC
)

36 
	#bsdmÆloc_mÆloc
 
mÆloc


	)

37 
	#bsdmÆloc_‰ì
 
‰ì


	)

38 
	#bsdmÆloc_ªÆloc
 
ªÆloc


	)

39 
	#bsdmÆloc_ˇŒoc
 
ˇŒoc


	)

42 
	#DXALLOC
(
x
,
èg
,
desc
Ë
	`xÆloc
(x)

	)

43 
	#DMALLOC
(
x
,
èg
,
desc
Ë
	`MALLOC
(x)

	)

44 
	#DREALLOC
(
x
,
y
,
èg
,
desc
Ë
	`REALLOC
(x,y)

	)

45 
	#DCALLOC
(
x
,
y
,
èg
,
desc
Ë
	`CALLOC
(x,y)

	)

	@include/malloc_incl.h

1 #i‚de‡
MALLOC_INCL_H


2 
	#MALLOC_INCL_H


	)

6 
	mªÆ_size
;

7 *
	mbuf„r
;

8 } 
	toutbuf„r_t
;

10 
outbuf_zîo
(
outbuf„r_t
*);

11 
outbuf_add
(
outbuf„r_t
 *, *);

12 
outbuf_addch¨
(
outbuf„r_t
 *, );

13 
outbuf_addv
(
outbuf„r_t
 *, *, ...);

14 
outbuf_fix
(
outbuf„r_t
*);

15 
outbuf_push
(
outbuf„r_t
*);

16 
outbuf_exãnd
(
outbuf„r_t
 *, );

18 
	~"bsdmÆloc.h
"

19 
	~"smÆloc.h
"

20 
	~"wøµedmÆloc.h
"

21 
	~"debugmÆloc.h
"

23 #ifde‡
DEBUGMALLOC


25 
	#TAG_TEMPORARY
 (1 << 8)

	)

26 
	#TAG_PERMANENT
 (2 << 8)

	)

27 
	#TAG_COMPILER
 (3 << 8)

	)

28 
	#TAG_DATA
 (4 << 8)

	)

29 
	#TAG_MISC
 (5 << 8)

	)

30 
	#TAG_MARKED
 (1 << 12)

	)

32 
	#TAG_PROGRAM
 (
TAG_PERMANENT
 + 11)

	)

33 
	#TAG_CALL_OUT
 (
TAG_PERMANENT
 + 12)

	)

34 
	#TAG_INTERACTIVE
 (
TAG_PERMANENT
 + 13)

	)

35 
	#TAG_ED
 (
TAG_PERMANENT
 + 14)

	)

37 
	#TAG_INC_LIST
 (
TAG_PERMANENT
 + 16)

	)

38 
	#TAG_PERM_IDENT
 (
TAG_PERMANENT
 + 17)

	)

39 
	#TAG_IDENT_TABLE
 (
TAG_PERMANENT
 + 18)

	)

40 
	#TAG_RESERVED
 (
TAG_PERMANENT
 + 19)

	)

41 
	#TAG_QTZ_SîvîEngöeLIB_STATS
 (
TAG_PERMANENT
 + 20)

	)

42 
	#TAG_OBJECT
 (
TAG_PERMANENT
 + 21)

	)

43 
	#TAG_OBJ_TBL
 (
TAG_PERMANENT
 + 22)

	)

44 
	#TAG_CONFIG
 (
TAG_PERMANENT
 + 23)

	)

45 
	#TAG_SIMULS
 (
TAG_PERMANENT
 + 24)

	)

46 
	#TAG_SENTENCE
 (
TAG_PERMANENT
 + 25)

	)

47 
	#TAG_STR_TBL
 (
TAG_PERMANENT
 + 26)

	)

48 
	#TAG_SWAP
 (
TAG_PERMANENT
 + 27)

	)

49 
	#TAG_UID
 (
TAG_PERMANENT
 + 28)

	)

50 
	#TAG_OBJ_NAME
 (
TAG_PERMANENT
 + 29)

	)

51 
	#TAG_PREDEFINES
 (
TAG_PERMANENT
 + 30)

	)

52 
	#TAG_LINENUMBERS
 (
TAG_PERMANENT
 + 31)

	)

53 
	#TAG_LOCALS
 (
TAG_PERMANENT
 + 32)

	)

54 
	#TAG_LPC_OBJECT
 (
TAG_PERMANENT
 + 33)

	)

55 
	#TAG_USERS
 (
TAG_PERMANENT
 + 34)

	)

56 
	#TAG_DEBUGMALLOC
 (
TAG_PERMANENT
 + 35)

	)

57 
	#TAG_HEART_BEAT
 (
TAG_PERMANENT
 + 36)

	)

58 #ifde‡
PACKAGE_PARSER


59 
	#TAG_PARSER
 (
TAG_PERMANENT
 + 37)

	)

61 
	#TAG_INPUT_TO
 (
TAG_PERMANENT
 + 38)

	)

62 
	#TAG_SOCKETS
 (
TAG_PERMANENT
 + 39)

	)

64 
	#TAG_STRING
 (
TAG_DATA
 + 40)

	)

65 
	#TAG_MALLOC_STRING
 (
TAG_DATA
 + 41)

	)

66 
	#TAG_SHARED_STRING
 (
TAG_DATA
 + 42)

	)

67 
	#TAG_FUNP
 (
TAG_DATA
 + 43)

	)

68 
	#TAG_ARRAY
 (
TAG_DATA
 + 44)

	)

69 
	#TAG_MAPPING
 (
TAG_DATA
 + 45)

	)

70 
	#TAG_MAP_NODE_BLOCK
 (
TAG_DATA
 + 46)

	)

71 
	#TAG_MAP_TBL
 (
TAG_DATA
 + 47)

	)

72 
	#TAG_BUFFER
 (
TAG_DATA
 + 48)

	)

73 
	#TAG_CLASS
 (
TAG_DATA
 + 49)

	)

	@include/mapping.h

1 #i‚de‡
_MAPPING_H


2 
	#_MAPPING_H


	)

4 
	#MAP_POINTER_HASH
(
x
Ë(((
POINTER_INT
)(xË>> 4Ë^ ((POINTER_INT)(xË& 0xFFFFFFF))

	)

6 
	sm≠pög_node_s


8 
m≠pög_node_s
 *
	m√xt
;

9 
svÆue_t
 
	mvÆues
[2];

10 } 
	tm≠pög_node_t
;

12 
	#MNB_SIZE
 256

	)

14 
	sm≠pög_node_block_s


16 
m≠pög_node_block_s
 *
	m√xt
;

17 
m≠pög_node_t
 
	mnodes
[
MNB_SIZE
];

18 } 
	tm≠pög_node_block_t
;

20 
	#MAX_TABLE_SIZE
 (32768 * 4)

	)

21 
	#MAP_HASH_TABLE_SIZE
 8

	)

22 
	#FILL_PERCENT
 80

	)

24 
	#MAPSIZE
(
size
Ë(
m≠pög_t
)

	)

26 
	gdúty_m™age_s
 ;

28 
	sm≠pög_s


30 
	mªf
;

32 #ifde‡
DEBUG


33 
	mexåa_ªf
;

35 
m≠pög_node_t
 **
	mèbÀ
;

36 
	mèbÀ_size
;

37 
	munfûÀd
;

38 
	mcou¡
;

39 
dúty_m™age_s
 *
	mdúty_mng
;

40 } 
	tm≠pög_t
;

42 
	sföfo_s


44 *
	mfunc
;

45 
obje˘_t
 *
	mobj
;

46 
svÆue_t
 *
	mexåa
;

47 
fu≈å_t
 *
	mÂ
;

48 } 
	tföfo_t
;

50 
	svöfo_s


52 
¨øy_t
 *
	mv
;

53 
	mpos
, 
	msize
, 
	mw
;

54 } 
	tvöfo_t
;

56 
	smöfo_s


58 
m≠pög_t
 *
	mm≠
, *
	m√wm≠
;

59 } 
	tmöfo_t
;

61 
	#m≠pög_too_œrge
() \

62 
	`îr‹
("M≠pögÉx˚eded maximumáŒowed sizêo‡%d.\n",
MAX_MAPPING_SIZE
);

	)

64 #i‚de‡
max


65 
	#max
(
x
,
y
Ë((xË> (y)Ë? (xË: (y)

	)

71 
num_m≠pögs
;

72 
tŸÆ_m≠pög_size
;

73 
tŸÆ_m≠pög_nodes
;

75 
mßmevÆ
(
svÆue_t
 *, svalue_t*);

76 
m≠pög_ßve_size
(
m≠pög_t
*);

77 
INLINE
 
m≠pög_t
 *
m≠Tøvî£
(m≠pög_à*, (*Ë(m≠pög_à*, 
m≠pög_node_t
 *, *), *);

78 
INLINE
 
m≠pög_t
 *
	`lﬂd_m≠pög_‰om_aggªg©e
(
svÆue_t
 *, );

79 
INLINE
 
m≠pög_t
 *
	`Æloˇã_m≠pög
();

80 
INLINE
 
m≠pög_t
 *
	`c›yM≠pög
(m≠pög_à*
m
);

81 
INLINE
 
	`‰ì_m≠pög
(
m≠pög_t
*);

82 
INLINE
 
svÆue_t
 *
	`föd_ö_m≠pög
(
m≠pög_t
 *, svalue_t*);

83 
svÆue_t
 *
	`föd_°rög_ö_m≠pög
(
m≠pög_t
 *, *);

84 
INLINE
 
svÆue_t
 *
	`föd_f‹_ö£π
(
m≠pög_t
 *, svalue_t *, );

85 
INLINE
 
	`abs‹b_m≠pög
(
m≠pög_t
 *, mapping_t*);

86 
INLINE
 
	`m≠pög_dñëe
(
m≠pög_t
 *, 
svÆue_t
*);

87 
INLINE
 
m≠pög_t
 *
	`add_m≠pög
(mapping_t *, mapping_t*);

88 
m≠pög_node_t
 *
	`√w_m≠_node
();

89 
	`‰ì_node
(
m≠pög_node_t
*);

90 
	`m≠_m≠pög
(
svÆue_t
 *, );

91 
	`fûãr_m≠pög
(
svÆue_t
 *, );

92 
INLINE
 
m≠pög_t
 *
	`compo£_m≠pög
(mapping_t *, mapping_t *, );

93 
¨øy_t
 *
	`m≠pög_ödi˚s
(
m≠pög_t
*);

94 
¨øy_t
 *
	`m≠pög_vÆues
(
m≠pög_t
*);

95 
¨øy_t
 *
	`m≠pög_óch
(
m≠pög_t
*);

96 *
	`ßve_m≠pög
(
m≠pög_t
*);

97 
	`dóŒoc_m≠pög
(
m≠pög_t
*);

98 
	`m¨k_m≠pög_node_blocks
();

100 
	`add_m≠pög_∑ú
(
m≠pög_t
 *, *, );

101 
	`add_m≠pög_°rög
(
m≠pög_t
 *, *, *);

102 
	`add_m≠pög_mÆlo˚d_°rög
(
m≠pög_t
 *, *, *);

103 
	`add_m≠pög_obje˘
(
m≠pög_t
 *, *, 
obje˘_t
*);

104 
	`add_m≠pög_¨øy
(
m≠pög_t
 *, *, 
¨øy_t
*);

105 
	`add_m≠pög_sh¨ed_°rög
(
m≠pög_t
 *, *, *);

108 
svÆue_t
 *
	`m≠_ö£π_öt_key
(
m≠pög_t
 *
m
, 
key
);

109 
svÆue_t
 *
	`m≠_ö£π_°r_key
(
m≠pög_t
 *
m
, *
key
);

	@include/marsh.h

1 #i‚de‡
_MARSH_H


2 
	#_MARSH_H


	)

6 
	mÀn
;

7 
	mpos
;

8 *
	md©a
;

9 } 
	tm_buf„r_t
;

11 
m_©èch
(
m_buf„r_t
 *
buf
, *
d©a
, 
Àn
);

12 
m_size
(
m_buf„r_t
 *
buf
);

13 *
m_d©a
(
m_buf„r_t
 *
buf
);

14 *
m_°r
(
m_buf„r_t
 *
buf
);

16 
push_öt8
(
m_buf„r_t
 *
p
, 
s
);

17 
push_öt16
(
m_buf„r_t
 *
p
, 
s
);

18 
push_öt32
(
m_buf„r_t
 *
p
, 
s
);

19 
push_v¨°r
(
m_buf„r_t
 *
p
, *
s
);

20 
push_øw
(
m_buf„r_t
 *
p
, *
s
, 
Àn
);

22 
p›_öt8
(
m_buf„r_t
 *
up
, *
d
);

23 
p›_öt16
(
m_buf„r_t
 *
up
, *
d
);

24 
p›_öt32
(
m_buf„r_t
 *
up
, *
d
);

25 
p›_v¨°r
(
m_buf„r_t
 *
up
, *
d©a
, 
d©a_Àn
);

26 
p›_øw
(
m_buf„r_t
 *
up
, *
d©a
, 
Àn
);

28 
m_buf„r_Æloˇã
(
m_buf„r_t
 *
buf
, 
Àn
);

29 
m_buf„r_‰ì
(
m_buf„r_t
 *
buf
);

31 
s_push_øw
(
m_buf„r_t
 *
p
, *
s
, 
Àn
);

32 
s_push_öt32
(
m_buf„r_t
 *
p
, 
s
);

33 
s_push_°r
(
m_buf„r_t
 *
p
, *
s
);

34 
m_buf„r_˛ón
(
m_buf„r_t
 *
buf
);

	@include/md.h

1 #i‡
deföed
(
CHECK_MEMORY
Ë&& !deföed(
DEBUGMALLOC_EXTENSIONS
)

2 #unde‡
CHECK_MEMORY


5 
	smd_node_s


7 
	msize
;

8 
md_node_s
 *
	m√xt
;

9 #ifde‡
DEBUGMALLOC_EXTENSIONS


10 
	mid
;

11 
	mèg
;

12 *
	mdesc
;

14 #ifde‡
CHECK_MEMORY


15 
	mmagic
;

17 } 
	tmd_node_t
;

19 #ifde‡
CHECK_MEMORY


20 
	#MD_OVERHEAD
 ((
md_node_t
Ë+ ())

	)

21 
	#MD_MAGIC
 0x4bì4bì

	)

23 
check_Æl_blocks
();

25 
	#MD_OVERHEAD
 ((
md_node_t
))

	)

28 
	#TABLESIZE
 20357

	)

30 
	#PTR
(
x
Ë((*)(x + 1))

	)

31 
	#NODET_TO_PTR
(
x
, 
y
Ë((y)(x + 1))

	)

32 
	#PTR_TO_NODET
(
x
Ë((
md_node_t
 *)(xË- 1)

	)

34 
	#DO_MARK
(
±r
, 
köd
Ëi‡(
	`PTR_TO_NODET
’å)->
èg
 != kind) \

35 
	`Ârötf
(
°dîr
, "OSÉrror: ExpectedÇode ofÅype %04x: got %s %04x\n", \

36 
köd
, 
	`PTR_TO_NODET
(
±r
)->
desc
, PTR_TO_NODET’å)->
èg
); \

37 
	`PTR_TO_NODET
(
±r
)->
èg
 |
TAG_MARKED


	)

39 #ifde‡
DEBUGMALLOC_EXTENSIONS


40 
	#SET_TAG
(
x
, 
y
Ë
	`£t_èg
(x, y)

	)

42 
	#SET_TAG
(
x
, 
y
)

	)

45 
mÆloc_mask
;

46 
tŸÆ_mÆlo˚d
;

47 
hiw©î
;

48 
MDöô
();

49 
MDmÆloc
(
md_node_t
 *, , , *);

50 
MD‰ì
(*);

52 #ifde‡
DEBUGMALLOC_EXTENSIONS


53 
	gsvÆue_s
;

55 
m¨k_svÆue
(
svÆue_s
*);

56 
£t_èg
(*, );

57 
check_°rög_°©s
(
outbuf„r_t
*);

60 
	#MAX_CATEGORY
 130

	)

	@include/mutex_md.h

1 #i‚de‡
__MUTEX_MD_H__


2 
	#__MUTEX_MD_H__


	)

4 
	~<±hªad.h
>

6 
±hªad_muãx_t
 
	tmuãx_t
;

8 
muãxInô
(
muãx_t
 *
m
);

9 
	#muãxDe°roy
(
m
Ë
	`±hªad_muãx_de°roy
(m)

	)

10 
	#muãxLock
(
m
Ë
	`±hªad_muãx_lock
(m)

	)

11 
	#muãxU∆ock
(
m
Ë
	`±hªad_muãx_u∆ock
(m)

	)

	@include/object.h

1 #i‚de‡
OBJECT_H


2 
	#OBJECT_H


	)

15 
	#MAX_OBJECT_NAME_SIZE
 2048

	)

17 
	#O_HEART_BEAT
 0x01

	)

19 
	#O_LISTENER
 0x04

	)

20 
	#O_CATCH_TELL
 0x04

	)

22 
	#O_CLONE
 0x08

	)

23 
	#O_DESTRUCTED
 0x10

	)

24 
	#O_SWAPPED
 0x20

	)

25 
	#O_ONCE_INTERACTIVE
 0x40

	)

26 
	#O_RESET_STATE
 0x80

	)

27 
	#O_WILL_CLEAN_UP
 0x100

	)

28 
	#O_VIRTUAL
 0x200

	)

29 
	#O_HIDDEN
 0x400

	)

30 
	#O_WILL_RESET
 0x1000

	)

36 
	s£¡í˚_s


38 
£¡í˚_s
 *
	m√xt
;

39 
obje˘_s
 *
	mob
;

40 
°rög_‹_func
 
	mfun˘i⁄
;

41 
	mÊags
;

44 
	t£¡í˚_t
;

46 
	sobje˘_s


48 
	mªf
;

49 
	mÊags
;

50 #ifde‡
DEBUG


51 
	mexåa_ªf
;

53 *
	m«me
;

54 
obje˘_s
 *
	m√xt_hash
;

56 
	mlﬂd_time
;

57 #i‚de‡
NO_RESET


58 
	m√xt_ª£t
;

60 
	mtime_of_ªf
;

61 
	msw≠_num
;

62 
¥ogøm_t
 *
	m¥og
;

63 
obje˘_s
 *
	m√xt_Æl
;

64 
öãø˘ive_s
 *
	möãø˘ive
;

65 #ifde‡
PRIVS


66 *
	m¥ivs
;

68 #ifde‡
PACKAGE_PARSER


69 
∑r£_öfo_s
 *
	mpöfo
;

71 
	miTy≥
;

76 
svÆue_t
 
	mv¨übÀs
[1];

78 } 
	tobje˘_t
;

80 #ifde‡
DEBUG


81 
	#add_ªf
(
ob
, 
°r
Ë
	`SAFE
(\

82 
ob
->
ªf
++; \

83 i‡(
d_Êag
 > 1) \

84 
	`¥ötf
("Add_ref %s (%d) from %s\n", \

85 
ob
->
«me
, ob->
ªf
, 
°r
);\

86 )

	)

88 
	#add_ªf
(
ob
, 
°r
Ëob->
ªf
++

	)

91 
	#ROB_STRING_ERROR
 1

	)

92 
	#ROB_ARRAY_ERROR
 2

	)

93 
	#ROB_MAPPING_ERROR
 4

	)

94 
	#ROB_NUMERAL_ERROR
 8

	)

95 
	#ROB_GENERAL_ERROR
 16

	)

96 
	#ROB_CLASS_ERROR
 32

	)

97 
	#ROB_ERROR
 63

	)

99 
obje˘_t
 *
hashed_livög
[
CFG_LIVING_HASH_SIZE
];

100 
obje˘_t
 *
¥evious_ob
;

101 
tŸ_Æloc_obje˘
;

102 
tŸ_Æloc_obje˘_size
;

103 
ßve_svÆue_dïth
;

105 
bufˇt
(**, *);

106 
INLINE
 
svÆue_ßve_size
(
svÆue_t
*);

107 
INLINE
 
ßve_svÆue
(
svÆue_t
 *, **);

108 
INLINE
 
ª°‹e_svÆue
(*, 
svÆue_t
*);

109 
ßve_obje˘
(
obje˘_t
 *, *, );

110 *
ßve_v¨übÀ
(
svÆue_t
*);

111 
ª°‹e_obje˘
(
obje˘_t
 *, *, );

112 
ª°‹e_v¨übÀ
(
svÆue_t
 *, *);

113 
obje˘_t
 *
gë_em±y_obje˘
();

114 
ª£t_obje˘
(
obje˘_t
*);

115 
ˇŒ_¸óã
(
obje˘_t
 *, );

116 
ªlﬂd_obje˘
(
obje˘_t
*);

117 
‰ì_obje˘
(
obje˘_t
 *, *);

118 
ß„_lﬂd_obje˘
(
obje˘_t
 **
obj
, *
fûe
);

119 
obje˘_t
 *
föd_livög_obje˘
(*, );

120 
INLINE
 
vÆid_hide
(
obje˘_t
*);

121 
INLINE
 
obje˘_visibÀ
(
obje˘_t
*);

122 
£t_livög_«me
(
obje˘_t
 *, *);

123 
ªmove_livög_«me
(
obje˘_t
*);

124 
°©_livög_obje˘s
(
outbuf„r_t
*);

125 
ãŒ_≈c
(
obje˘_t
 *, *);

126 
föd_globÆ_v¨übÀ
(
¥ogøm_t
 *, *, *);

127 
dóŒoc_obje˘
(
obje˘_t
 *, *);

132 
£t_obje˘_ty≥
(
obje˘_t
 *
obj
, 
iTy≥
);

134 
gë_obje˘_ty≥
(
obje˘_t
 *
obj
);

136 
svÆue_t
 *
ˇŒ_s¸ùt_func
(*
obje˘Name
, *
funcName
, *
∑ømFmt
, ...);

137 
svÆue_t
 *
ˇŒ_obje˘_func
(
obje˘_t
 *
obje˘
, *
funcName
, *
∑ømFmt
, ...);

139 
svÆue_t
 *
föd_obje˘_v¨übÀ
(
obje˘_t
 *
obje˘
, *
«me
);

140 *
ßve_v¨übÀ_2
(
svÆue_t
 *
v¨
, *
ªt
);

	@include/opc.h

7 
	s›c_s
 { *
	m«me
; 
	mcou¡
; } 
	t›c_t
;

9 
›c_t
 
	g›c_efun
[] = {

	@include/opcodes.h

9 
	#F_POP_VALUE
 1

	)

10 
	#F_PUSH
 2

	)

11 
	#F_EFUN0
 3

	)

12 
	#F_EFUN1
 4

	)

13 
	#F_EFUN2
 5

	)

14 
	#F_EFUN3
 6

	)

15 
	#F_EFUNV
 7

	)

16 
	#F_NUMBER
 8

	)

17 
	#F_REAL
 9

	)

18 
	#F_BYTE
 10

	)

19 
	#F_NBYTE
 11

	)

20 
	#F_STRING
 12

	)

21 
	#F_SHORT_STRING
 13

	)

22 
	#F_CONST0
 14

	)

23 
	#F_CONST1
 15

	)

24 
	#F_AGGREGATE
 16

	)

25 
	#F_AGGREGATE_ASSOC
 17

	)

26 
	#F_BRANCH_WHEN_ZERO
 18

	)

27 
	#F_BRANCH_WHEN_NON_ZERO
 19

	)

28 
	#F_BRANCH
 20

	)

29 
	#F_BBRANCH_WHEN_ZERO
 21

	)

30 
	#F_BBRANCH_WHEN_NON_ZERO
 22

	)

31 
	#F_BBRANCH
 23

	)

32 
	#F_BRANCH_NE
 24

	)

33 
	#F_BRANCH_GE
 25

	)

34 
	#F_BRANCH_LE
 26

	)

35 
	#F_BRANCH_EQ
 27

	)

36 
	#F_BBRANCH_LT
 28

	)

37 
	#F_FOREACH
 29

	)

38 
	#F_NEXT_FOREACH
 30

	)

39 
	#F_EXIT_FOREACH
 31

	)

40 
	#F_LOOP_COND_LOCAL
 32

	)

41 
	#F_LOOP_COND_NUMBER
 33

	)

42 
	#F_LOOP_INCR
 34

	)

43 
	#F_WHILE_DEC
 35

	)

44 
	#F_LOR
 36

	)

45 
	#F_LAND
 37

	)

46 
	#F_CATCH
 38

	)

47 
	#F_END_CATCH
 39

	)

48 
	#F_TIME_EXPRESSION
 40

	)

49 
	#F_END_TIME_EXPRESSION
 41

	)

50 
	#F_SWITCH
 42

	)

51 
	#F_CALL_FUNCTION_BY_ADDRESS
 43

	)

52 
	#F_CALL_INHERITED
 44

	)

53 
	#F_RETURN
 45

	)

54 
	#F_RETURN_ZERO
 46

	)

55 
	#F_EQ
 47

	)

56 
	#F_NE
 48

	)

57 
	#F_LE
 49

	)

58 
	#F_LT
 50

	)

59 
	#F_GE
 51

	)

60 
	#F_GT
 52

	)

61 
	#F_INC
 53

	)

62 
	#F_DEC
 54

	)

63 
	#F_PRE_INC
 55

	)

64 
	#F_POST_INC
 56

	)

65 
	#F_PRE_DEC
 57

	)

66 
	#F_POST_DEC
 58

	)

67 
	#F_TRANSFER_LOCAL
 59

	)

68 
	#F_LOCAL
 60

	)

69 
	#F_LOCAL_LVALUE
 61

	)

70 
	#F_GLOBAL
 62

	)

71 
	#F_GLOBAL_LVALUE
 63

	)

72 
	#F_MEMBER
 64

	)

73 
	#F_MEMBER_LVALUE
 65

	)

74 
	#F_INDEX
 66

	)

75 
	#F_INDEX_LVALUE
 67

	)

76 
	#F_RINDEX
 68

	)

77 
	#F_RINDEX_LVALUE
 69

	)

78 
	#F_NN_RANGE
 70

	)

79 
	#F_NN_RANGE_LVALUE
 71

	)

80 
	#F_RN_RANGE
 72

	)

81 
	#F_RN_RANGE_LVALUE
 73

	)

82 
	#F_RR_RANGE
 74

	)

83 
	#F_RR_RANGE_LVALUE
 75

	)

84 
	#F_NR_RANGE
 76

	)

85 
	#F_NR_RANGE_LVALUE
 77

	)

86 
	#F_NE_RANGE
 78

	)

87 
	#F_RE_RANGE
 79

	)

88 
	#F_ADD_EQ
 80

	)

89 
	#F_SUB_EQ
 81

	)

90 
	#F_AND_EQ
 82

	)

91 
	#F_OR_EQ
 83

	)

92 
	#F_XOR_EQ
 84

	)

93 
	#F_LSH_EQ
 85

	)

94 
	#F_RSH_EQ
 86

	)

95 
	#F_MULT_EQ
 87

	)

96 
	#F_DIV_EQ
 88

	)

97 
	#F_MOD_EQ
 89

	)

98 
	#F_ASSIGN
 90

	)

99 
	#F_VOID_ADD_EQ
 91

	)

100 
	#F_VOID_ASSIGN
 92

	)

101 
	#F_VOID_ASSIGN_LOCAL
 93

	)

102 
	#F_ADD
 94

	)

103 
	#F_SUBTRACT
 95

	)

104 
	#F_MULTIPLY
 96

	)

105 
	#F_DIVIDE
 97

	)

106 
	#F_MOD
 98

	)

107 
	#F_AND
 99

	)

108 
	#F_OR
 100

	)

109 
	#F_XOR
 101

	)

110 
	#F_LSH
 102

	)

111 
	#F_RSH
 103

	)

112 
	#F_NOT
 104

	)

113 
	#F_NEGATE
 105

	)

114 
	#F_COMPL
 106

	)

115 
	#F_FUNCTION_CONSTRUCTOR
 107

	)

116 
	#F_SIMUL_EFUN
 108

	)

117 
	#F_SSCANF
 109

	)

118 
	#F_PARSE_COMMAND
 110

	)

119 
	#F_NEW_CLASS
 111

	)

120 
	#F_NEW_EMPTY_CLASS
 112

	)

121 
	#F_EXPAND_VARARGS
 113

	)

124 
	#BASE
 114

	)

126 
	#F_TO_INT
 114

	)

127 
	#F_TO_FLOAT
 115

	)

128 
	#F_PREVIOUS_OBJECT
 116

	)

129 
	#F_CALL_STACK
 117

	)

130 
	#F_SIZEOF
 118

	)

131 
	#F_DESTRUCT
 119

	)

132 
	#F_FILE_NAME
 120

	)

133 
	#F_RANDOM
 121

	)

134 
	#F_LOWER_CASE
 122

	)

135 
	#F_ALLOCATE_MAPPING
 123

	)

136 
	#F_VALUES
 124

	)

137 
	#F_KEYS
 125

	)

138 
	#F_CLONEP
 126

	)

139 
	#F_INTP
 127

	)

140 
	#F_UNDEFINEDP
 128

	)

141 
	#F_FLOATP
 129

	)

142 
	#F_STRINGP
 130

	)

143 
	#F_FUNCTIONP
 131

	)

144 
	#F_POINTERP
 132

	)

145 
	#F_OBJECTP
 133

	)

146 
	#F_CLASSP
 134

	)

147 
	#F_TYPEOF
 135

	)

148 
	#F_BUFFERP
 136

	)

149 
	#F_REPLACE_PROGRAM
 137

	)

150 
	#F_ALLOCATE
 138

	)

151 
	#F_FILE_SIZE
 139

	)

152 
	#F_MKDIR
 140

	)

153 
	#F_RM
 141

	)

154 
	#F_RMDIR
 142

	)

155 
	#F_MD5_HEXDIGEST
 143

	)

156 
	#F_CTIME
 144

	)

157 
	#F_LOCALTIME
 145

	)

158 
	#F_THROW
 146

	)

159 
	#F_DEEP_INHERIT_LIST
 147

	)

160 
	#F_SHALLOW_INHERIT_LIST
 148

	)

161 
	#F_MAPP
 149

	)

162 
	#F_CHILDREN
 150

	)

163 
	#F_ERROR
 151

	)

164 
	#F_SET_EVAL_LIMIT
 152

	)

165 
	#F_KEYS_BY_VALUE
 153

	)

166 
	#F_LPC_GC
 154

	)

167 
	#F_MYSQL_CONNECT
 155

	)

168 
	#F_MYSQL_CLOSE
 156

	)

169 
	#F_CURSOR_CLOSE
 157

	)

170 
	#F_CURSOR_FETCH
 158

	)

171 
	#F_LPC2PYSTR
 159

	)

172 
	#F_PYSTR2LPC
 160

	)

173 
	#F_FS_RESTORE_FROM_FILE
 161

	)

174 
	#F_FS_URL_ENCODE_MAP
 162

	)

175 
	#F_FS_URL_ENCODE
 163

	)

176 
	#F_FS_URL_DECODE
 164

	)

177 
	#F_FS_IS_UID_CONNECTED
 165

	)

178 
	#F_FS_CLOSE_UID_CONNECTION
 166

	)

179 
	#F_FS_CLOSE_VFD_CONNECTION
 167

	)

180 
	#F_FS_GET_VFD_BY_UID
 168

	)

181 
	#F_FS_GET_UID_BY_VFD
 169

	)

182 
	#F_FS_GET_IP_BY_VFD
 170

	)

183 
	#F_FS_LAST_PTO_TIMESTAMP
 171

	)

184 
	#F_FS_EXCLUDE_STATS_PTO
 172

	)

185 
	#F_FS_VALIDATION_START
 173

	)

186 
	#F_REMOVE_CALL_OUT
 174

	)

187 
	#F_FS_ENABLE_DIRTY_OBJECT
 175

	)

188 
	#F_FS_ENABLE_DIRTY_MAP
 176

	)

189 
	#F_FS_MARSHAL_DIRTY_MAP
 177

	)

190 
	#F_FS_MARSHAL_MAP
 178

	)

191 
	#F_FS_MARSHAL_DIRTY_OBJECT
 179

	)

192 
	#F_USER_CREATE
 180

	)

193 
	#F_USER_DESTROY
 181

	)

194 
	#F_GAMED_CLOSE_UID_CONNECTION
 182

	)

195 
	#F_FS_SAVE_ALL_USER
 183

	)

196 
	#F_FS_DB_SYNC
 184

	)

197 
	#F_FS_DB_OBJECT_UNLOAD
 185

	)

198 
	#F_GET_USER
 186

	)

199 
	#F_IS_ONLINE
 187

	)

200 
	#F_LOGOUT
 188

	)

201 
	#F_UPDATE_MAX_LOGIN
 189

	)

202 
	#F_GET_ALL_USERS
 190

	)

203 
	#F_NEW_ITEM
 191

	)

204 
	#F_IS_ITEM_ONLINE
 192

	)

205 
	#F_DESTROY_ITEM
 193

	)

206 
	#F_NEW_NPC
 194

	)

207 
	#F_DESTROY_NPC
 195

	)

208 
	#F_IS_NPC_ONLINE
 196

	)

209 
	#F_GET_NPC_OBJECT
 197

	)

210 
	#F_GET_NPC_POS
 198

	)

211 
	#F_GET_NPC_CIRCLE_FIELD
 199

	)

212 
	#F_GET_NPC_FIGHTID
 200

	)

213 
	#F_GET_NPC_STATUS
 201

	)

214 
	#F_NEW_SUMMON
 202

	)

215 
	#F_DESTROY_SUMMON
 203

	)

216 
	#F_IS_SUMMON_ONLINE
 204

	)

217 
	#F_GET_TEAM_MAP
 205

	)

218 
	#F_DISMISS_TEAM
 206

	)

219 
	#F_UPDATE_LPC_OBJECT
 207

	)

220 
	#F_ENABLE_LOG_PTO
 208

	)

221 
	#F__
 209

	)

222 
	#F_COPY
 210

	)

223 
	#F_FILE_LENGTH
 211

	)

224 
	#F_UPPER_CASE
 212

	)

225 
	#F_FETCH_VARIABLE
 213

	)

226 
	#F_FUNCTION_OWNER
 214

	)

227 
	#F_SOCKET_CREATE
 215

	)

228 
	#F_SOCKET_CLOSE
 216

	)

229 
	#F_SOCKET_ADDRESS
 217

	)

230 
	#F_REFS
 218

	)

231 
	#F_COS
 219

	)

232 
	#F_SIN
 220

	)

233 
	#F_TAN
 221

	)

234 
	#F_ASIN
 222

	)

235 
	#F_ACOS
 223

	)

236 
	#F_ATAN
 224

	)

237 
	#F_SQRT
 225

	)

238 
	#F_LOG
 226

	)

239 
	#F_EXP
 227

	)

240 
	#F_FLOOR
 228

	)

241 
	#F_CEIL
 229

	)

244 
	#ONEARG_MAX
 230

	)

246 
	#F_CALL_OTHER
 230

	)

247 
	#F_EVALUATE
 231

	)

248 
	#F_THIS_OBJECT
 232

	)

249 
	#F_CLONE_OBJECT
 233

	)

250 
	#F_EXPLODE
 234

	)

251 
	#F_IMPLODE
 235

	)

252 
	#F_MEMBER_ARRAY
 236

	)

253 
	#F_REPLACE_STRING
 237

	)

254 
	#F_REPLACE_STRING_REG
 238

	)

255 
	#F_RESTORE_OBJECT
 239

	)

256 
	#F_SAVE_OBJECT
 240

	)

257 
	#F_GET_DIR
 241

	)

258 
	#F_STRSRCH
 242

	)

259 
	#F_SUBSTR
 243

	)

260 
	#F_FIND_OBJECT
 244

	)

261 
	#F_MAP_DELETE
 245

	)

262 
	#F_ALLOCATE_BUFFER
 246

	)

263 
	#F_READ_BUFFER
 247

	)

264 
	#F_WRITE_BUFFER
 248

	)

265 
	#F_INHERITS
 249

	)

266 
	#F_REGEXP
 250

	)

267 
	#F_WRITE_FILE
 251

	)

268 
	#F_RENAME
 252

	)

269 
	#F_WRITE_BYTES
 253

	)

270 
	#F_READ_BYTES
 254

	)

271 
	#F_READ_FILE
 255

	)

272 
	#F_CP
 256

	)

273 
	#F_CLEAR_BIT
 257

	)

274 
	#F_TEST_BIT
 258

	)

275 
	#F_SET_BIT
 259

	)

276 
	#F_NEXT_BIT
 260

	)

277 
	#F_CRYPT
 261

	)

278 
	#F_FUNCTION_EXISTS
 262

	)

279 
	#F_OBJECTS
 263

	)

280 
	#F_SORT_ARRAY
 264

	)

281 
	#F_TIME
 265

	)

282 
	#F_UNIQUE_MAPPING
 266

	)

283 
	#F_SPRINTF
 267

	)

284 
	#F_STAT
 268

	)

285 
	#F_MEMORY_INFO
 269

	)

286 
	#F_UPTIME
 270

	)

287 
	#F_STRCMP
 271

	)

288 
	#F_FILTER
 272

	)

289 
	#F_MAP
 273

	)

290 
	#F_MALLOC_STATUS
 274

	)

291 
	#F_DUMPALLOBJ
 275

	)

292 
	#F_DUMP_FILE_DESCRIPTORS
 276

	)

293 
	#F_QUERY_LOAD_AVERAGE
 277

	)

294 
	#F_RECLAIM_OBJECTS
 278

	)

295 
	#F_SHUTDOWN
 279

	)

296 
	#F_OS_COMMAND
 280

	)

297 
	#F_GET_CONFIG_FILE
 281

	)

298 
	#F_IS_AUTH_SERVER
 282

	)

299 
	#F_FS_MEMORY_INFO
 283

	)

300 
	#F_MYSQL_EXECUTE
 284

	)

301 
	#F_FS_SAVE_TO_FILE
 285

	)

302 
	#F_FS_HTTP_REQUEST
 286

	)

303 
	#F_FS_CURL_REQUEST
 287

	)

304 
	#F_FS_NEW_USER
 288

	)

305 
	#F_FS_RPC_CALL
 289

	)

306 
	#F_FS_RPC_CALL_LOOP
 290

	)

307 
	#F_FS_RPC_X_CALL
 291

	)

308 
	#F_FS_RPC_MAKE_CFG
 292

	)

309 
	#F_FS_SET_VALIDATION
 293

	)

310 
	#F_MAIN_LOOP
 294

	)

311 
	#F_CALL_OUT
 295

	)

312 
	#F_FS_MERGE_DIRTY_MAP
 296

	)

313 
	#F_FS_MERGE_DIRTY_OBJECT
 297

	)

314 
	#F_FS_SAVE_ALL_DAT
 298

	)

315 
	#F_FS_DB_GAMED_EXIT
 299

	)

316 
	#F_FS_DB_OBJECT_NEW
 300

	)

317 
	#F_FS_DB_OBJECT_LOAD
 301

	)

318 
	#F_FS_DB_OBJECT_SAVE
 302

	)

319 
	#F_FS_DB_OBJECT_RENAME
 303

	)

320 
	#F_FS_DB_OBJECT_RESTORE
 304

	)

321 
	#F_FS_DIRTY_MEM_POOL_STAT
 305

	)

322 
	#F_GET_ONLINE_COUNT
 306

	)

323 
	#F_RESTORE_ITEM
 307

	)

324 
	#F_GET_ITEM_MAP
 308

	)

325 
	#F_SETITEMTEMP
 309

	)

326 
	#F_GETITEMTEMP
 310

	)

327 
	#F_SETITEMSAVE
 311

	)

328 
	#F_GETITEMSAVE
 312

	)

329 
	#F_RESTORE_NPC
 313

	)

330 
	#F_SETNPC
 314

	)

331 
	#F_GETNPC
 315

	)

332 
	#F_SETNPCSAVE
 316

	)

333 
	#F_GETNPCSAVE
 317

	)

334 
	#F_SET_NPC_CIRCLE_FIELD
 318

	)

335 
	#F_IN_NPC_FIELD
 319

	)

336 
	#F_GET_NPC_MAP
 320

	)

337 
	#F_SET_NPC_MAP
 321

	)

338 
	#F_SET_NPC_FIGHTID
 322

	)

339 
	#F_SET_NPC_STATUS
 323

	)

340 
	#F_SET_EFFECT_NPC
 324

	)

341 
	#F_GET_SUMMON_MAP
 325

	)

342 
	#F_RESTORE_SUMMON
 326

	)

343 
	#F_SETSUMMONTEMP
 327

	)

344 
	#F_GETSUMMONTEMP
 328

	)

345 
	#F_SETSUMMONSAVE
 329

	)

346 
	#F_GETSUMMONSAVE
 330

	)

347 
	#F_NEW_TEAM
 331

	)

348 
	#F_DUMP_MEMORY_POOL
 332

	)

349 
	#F_GET_TIME_OF_DAY
 333

	)

350 
	#F_FS_ICONV
 334

	)

351 
	#F_FS_DNS_RESOLVE
 335

	)

352 
	#F_INIT_GETTEXT
 336

	)

353 
	#F_FUNCTIONS
 337

	)

354 
	#F_VARIABLES
 338

	)

355 
	#F_REPLACEABLE
 339

	)

356 
	#F_PROGRAM_INFO
 340

	)

357 
	#F_STORE_VARIABLE
 341

	)

358 
	#F_DEBUG_MESSAGE
 342

	)

359 
	#F_REPEAT_STRING
 343

	)

360 
	#F_SOCKET_BIND_AND_LISTEN
 344

	)

361 
	#F_SOCKET_ACCEPT
 345

	)

362 
	#F_SOCKET_CONNECT
 346

	)

363 
	#F_SOCKET_WRITE
 347

	)

364 
	#F_DUMP_SOCKET_STATUS
 348

	)

365 
	#F_DEBUG_INFO
 349

	)

366 
	#F_DUMP_PROG
 350

	)

367 
	#F_POW
 351

	)

368 
	#F_MAX
 352

	)

369 
	#F_MIN
 353

	)

372 
	#NUM_OPCODES
 353

	)

	@include/origin.h

1 #i‚de‡
ORIGIN_H


2 
	#ORIGIN_H


	)

4 
	e‹igö


6 
	mORIGIN_DRIVER
 = 0x01, 
	mORIGIN_LOCAL
 = 0x02, 
	mORIGIN_CALL_OTHER
 = 0x04, 
	mORIGIN_SIMUL_EFUN
 = 0x08, 
	mORIGIN_CALL_OUT
 = 0x10, 
	mORIGIN_EFUN
 = 0x20,

8 
	mORIGIN_FUNCTION_POINTER
 = 0x40,

10 
	mORIGIN_FUNCTIONAL
 = 0x80

	@include/otable.h

1 #i‚de‡
OTABLE_H


2 
	#OTABLE_H


	)

7 
öô_ŸabÀ
();

8 
íãr_obje˘_hash
(
obje˘_t
*);

9 
íãr_obje˘_hash_©_íd
(
obje˘_t
*);

10 
ªmove_obje˘_hash
(
obje˘_t
*);

11 
ªmove_¥ecompûed_hashes
(*);

12 
obje˘_t
 *
lookup_obje˘_hash
(*);

13 
show_ŸabÀ_°©us
(
outbuf„r_t
 *, );

	@include/port.h

1 #i‚de‡
PORT_H


2 
	#PORT_H


	)

7 #i‚de‡
_FUNC_SPEC_


8 
øndom_numbî
();

9 
gë_cuºít_time
();

10 *
time_°rög
(c⁄° 
time_t
*);

11 
öô_u£c_˛ock
();

12 
gë_u£c_˛ock
(*, *);

13 
gë_˝u_times
(*, *);

14 *
gë_cuºít_dú
(*, );

15 #ifde‡
DRAND48


16 
dønd48
();

18 #ifde‡
WIN32


19 *
¸y±
(*, *);

21 #i‚de‡
HAS_STRERROR


22 *
p‹t_°ªº‹
();

	@include/portability.h

15 #i‚de‡
PORTABILITY_H


16 
	#PORTABILITY_H


	)

21 #unde‡
OLD_ULTRIX


24 #unde‡
OLD_HPUX


26 #i‡
deföed
(
WINNT
Ë|| deföed(
WIN95
)

27 #i‚de‡
WIN32


28 
	#WIN32


	)

29 *
	tˇddr_t
;

31 
	#symlök
(
x
, 
y
Ë
	`dos_°yÀ_lök
(x, y)

	)

32 
	#CDECL
 
__cde˛


	)

34 
	#CDECL


	)

37 #ifde‡
WIN32


38 
	#WINSOCK


	)

39 #ifde‡
sun


40 #unde‡
sun


44 #i‡
deföed
(
SunOS_5
Ë&& !deföed(
SVR4
)

45 
	#SVR4


	)

52 #i‡(
deföed
(
hp200
Ë|| deföed(
hp300
Ë|| deföed(
hp400
Ë|| deföed(
hp500
)) \

53 && !
	$deföed
(
hpux
)

54 
	#hp68k


	)

55 
	#_ANSI_H


	)

61 #i‡
	`deföed
(
__osf__
Ë|| deföed(
__OSF__
)

62 
	#OSF


	)

65 #i‡!
	`deföed
(
AMIGA
) && ( \

66 –(
	`deföed
(
LATTICE
Ë|| deföed(
__SASC
ËË&& deföed(
_AMIGA
) ) || \

67 (
	`deföed
(
AZTEC_C
Ë&& 
	$deföed
(
MCH_AMIGA
) ) )

68 
	#AMIGA


	)

74 #i‡
	`deföed
(
NeXT
)

75 
	#HAS_MONCONTROL


	)

83 #i‡(!
	`deföed
(
•¨c
))

84 
	#INET_NTOA_OK


	)

88 #i‡
	`deföed
(
hpux
Ë&& !deföed(
OLD_HPUX
Ë&& !deföed(
_FUNC_SPEC_
)

89 
	~<sys/sysˇŒ.h
>

90 
	#gërußge
(
a
, 
b
Ë
	`sysˇŒ
(
SYS_GETRUSAGE
, (a), (b))

	)

96 #ifde‡
_SEQUENT_


97 
	#GET_PROCESS_STATS


	)

106 #i‡(
	`deföed
(
_SEQUENT_
Ë|| deföed(
_M_UNIX
))

107 
	#USE_POSIX_SIGNALS


	)

119 #i‡(
	`deföed
(
_SEQUENT_
))

120 
	#HAS_SETDTABLESIZE


	)

124 
	#SIGNAL_FUNC_TAKES_INT
 
	`deföed
(
_AIX
Ë|| deföed(
NeXT
) \

125 || 
	`deföed
(
_SEQUENT_
Ë|| deföed(
SVR4
) \

126 || 
	`deföed
(
__386BSD__
Ë|| deföed(
≠ﬁlo
Ë|| deföed(
¸ay
) \

127 || 
	`deföed
(
SunOS_5
Ë|| deföed(
__bsdi__
Ë|| deföed(
löux
)

	)

138 #i‡!
	`deföed
(
löux
Ë&& !deföed(
__386BSD__
Ë&& !deföed(
__FªeBSD__
) \

139 && !
	`deföed
(
OSF
Ë&& !deföed(
SunOS_4
Ë&& !
	$deföed
(
sgi
)

140 #ifde‡
_SC_PAGE_SIZE


141 
	#MEMPAGESIZE
 
	`sysc⁄f
(
_SC_PAGE_SIZE
)

	)

143 #ifde‡
_SC_PAGESIZE


144 
	#MEMPAGESIZE
 
	`sysc⁄f
(
_SC_PAGESIZE
)

	)

147 
	#MEMPAGESIZE
 0x40000

	)

153 #unde‡
BSD42


156 #i‚de‡
_FUNC_SPEC_


158 #i‡
	`deföed
(
löux
Ë|| deföed(
_M_UNIX
)

160 
	~<sys/time.h
>

161 
	~<sys/sockë.h
>

162 #i‚de‡
FD_SETSIZE


163 
	#FD_SETSIZE
 256

	)

168 #i‡
	`deföed
(
¸ay
Ë&& !deföed(
MAXPATHLEN
)

169 
	#MAXPATHLEN
 
PATH_MAX


	)

172 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
MAXPATHLEN
)

173 
	#MAXPATHLEN
 512

	)

176 #i‡
	`deföed
(
_M_UNIX
Ë&& !deföed(
MAXPATHLEN
)

177 
	#MAXPATHLEN
 1024

	)

185 #ifde‡
USE_BCOPY


187 
	#memmove
(
a
,
b
,
c
Ë
	`bc›y
(b,a,c)

	)

190 #ifde‡
CUSTOM_CRYPT


191 
	#CRYPT
(
x
, 
y
Ë
	`cu°om_¸y±
(x, y, 0)

	)

193 #i‡
	`deföed
(
sun
Ë&& !deföed(
SunOS_5
)

194 
	#CRYPT
(
x
, 
y
Ë
	`_¸y±
(x, y)

	)

196 
	#CRYPT
(
x
, 
y
Ë
	`¸y±
(x, y)

	)

200 #ifde‡
HAS_STRERROR


201 
	#p‹t_°ªº‹
 
°ªº‹


	)

204 #ifde‡
WIN32


205 
	#sockë_î∫o
 
	`WSAGëLa°Eº‹
()

	)

206 
	#sockë_≥º‹
(
x
, 
y
Ë
	`SockëPîr‹
(x, y)

	)

207 
	`SockëPîr‹
(*
°r
, *
fûe
);

209 
	#FOPEN_READ
 "rb"

	)

210 
	#FOPEN_WRITE
 "wb"

	)

211 
	#OPEN_WRITE
 (
O_WRONLY
 | 
O_BINARY
)

	)

212 
	#OPEN_READ
 (
O_RDONLY
 | 
O_BINARY
)

	)

214 
	#sockë_î∫o
 
î∫o


	)

215 
	#sockë_≥º‹
(
x
, 
y
Ë
	`debug_≥º‹
(x, y)

	)

217 
	#FOPEN_READ
 "r"

	)

218 
	#FOPEN_WRITE
 "w"

	)

219 
	#OPEN_WRITE
 
O_WRONLY


	)

220 
	#OPEN_READ
 
O_RDONLY


	)

	@include/preprocess.h

1 #i‚de‡
PREPROCESS_H


2 
	#PREPROCESS_H


	)

4 
de‚_t
 *
lookup_deföe
(*);

	@include/program.h

1 #i‚de‡
PROGRAM_H


2 
	#PROGRAM_H


	)

54 
	#NAME_INHERITED
 0x1

	)

55 
	#NAME_UNDEFINED
 0x2

	)

56 
	#NAME_STRICT_TYPES
 0x4

	)

57 
	#NAME_PROTOTYPE
 0x8

	)

58 
	#NAME_DEF_BY_INHERIT
 0x10

	)

59 
	#NAME_ALIAS
 0x20

	)

60 
	#NAME_TRUE_VARARGS
 0x40

	)

62 
	#NAME_HIDDEN
 0x0100

	)

63 
	#NAME_STATIC
 0x0200

	)

64 
	#NAME_NO_MASK
 0x0400

	)

65 
	#NAME_PRIVATE
 0x0800

	)

66 
	#NAME_PROTECTED
 0x1000

	)

67 
	#NAME_PUBLIC
 0x2000

	)

68 
	#NAME_VARARGS
 0x4000

	)

71 #ifde‡
DBVAR_NOASSIGN


72 
	#NAME_DBVAR_NOASSIGN
 0x4000

	)

73 
	#NAME_TYPE_MOD
 (
NAME_HIDDEN
 | 
NAME_STATIC
 | 
NAME_NO_MASK
 | 
NAME_PRIVATE
 | 
NAME_PROTECTED
 | 
NAME_PUBLIC
 | 
NAME_VARARGS
|
NAME_DBVAR_NOASSIGN
)

	)

75 
	#NAME_TYPE_MOD
 (
NAME_HIDDEN
 | 
NAME_STATIC
 | 
NAME_NO_MASK
 | 
NAME_PRIVATE
 | 
NAME_PROTECTED
 | 
NAME_PUBLIC
 | 
NAME_VARARGS
)

	)

79 
	#NAME_MASK
 (
NAME_UNDEFINED
 | 
NAME_STRICT_TYPES
 | 
NAME_PROTOTYPE
 | 
NAME_TRUE_VARARGS
 | 
NAME_TYPE_MOD
)

	)

81 
	#NAME_NO_CODE
 (
NAME_UNDEFINED
 | 
NAME_ALIAS
 | 
NAME_PROTOTYPE
)

	)

82 
	#REAL_FUNCTION
(
x
Ë(!((xË& (
NAME_ALIAS
 | 
NAME_PROTOTYPE
)) && \

83 (((
x
Ë& 
NAME_DEF_BY_INHERIT
Ë|| (!((xË& 
NAME_UNDEFINED
))))

	)

87 
	#TYPE_MOD_ARRAY
 0x0020

	)

88 
	#TYPE_MOD_CLASS
 0x0040

	)

92 
	mnum_¨g
;

93 
	mnum_loˇl
;

94 
	mf_ödex
;

95 } 
	tru¡ime_deföed_t
;

99 
	moff£t
;

100 
	mfun˘i⁄_ödex_off£t
;

101 } 
	tru¡ime_öhîôed_t
;

105 
ru¡ime_deföed_t
 
	mdef
;

106 
ru¡ime_öhîôed_t
 
	möh
;

107 } 
	tru¡ime_fun˘i⁄_u
;

111 
	mfú°_deföed
;

112 
	mfú°_ovîlﬂd
;

113 
	mnum_com¥es£d
;

114 
	mnum_dñëed
;

115 
	mödex
[1];

116 } 
	tcom¥es£d_off£t_èbÀ_t
;

120 *
	m«me
;

121 
	mty≥
;

122 
	mru¡ime_ödex
;

123 
	maddªss
;

125 #ifde‡
PROFILE_FUNCTIONS


126 
	mˇŒs
, 
	m£lf
, 
	mchûdªn
;

128 } 
	tcompûî_fun˘i⁄_t
;

132 
¥ogøm_s
 *
	m¥og
;

135 
compûî_fun˘i⁄_t
 *
	mfunc
;

136 
	mödex
;

137 } 
	mu
;

140 
	mÆüs_f‹
;

143 
	tcompûî_ãmp_t
;

147 
	m«me
;

148 
	mty≥
;

149 
	msize
;

150 
	mödex
;

151 } 
	t˛ass_def_t
;

155 
	m«me
;

156 
	mty≥
;

157 } 
	t˛ass_membî_íåy_t
;

161 *
	m«me
;

162 
	mty≥
;

163 } 
	tv¨übÀ_t
;

167 
¥ogøm_s
 *
	m¥og
;

168 
	mfun˘i⁄_ödex_off£t
;

169 
	mv¨übÀ_ödex_off£t
;

170 
	mty≥_mod
;

171 } 
	töhîô_t
;

173 
	s¥ogøm_s


175 *
	m«me
;

176 
	mÊags
;

177 
	mªf
;

178 
	mfunc_ªf
;

179 #ifde‡
DEBUG


180 
	mexåa_ªf
;

181 
	mexåa_func_ªf
;

183 *
	m¥ogøm
;

184 
	mid_numbî
;

187 *
	mlöe_öfo
;

188 *
	mfûe_öfo
;

189 
	mlöe_sw≠_ödex
;

190 
compûî_fun˘i⁄_t
 *
	mfun˘i⁄_èbÀ
;

191 *
	mfun˘i⁄_Êags
;

192 
ru¡ime_fun˘i⁄_u
 *
	mfun˘i⁄_off£ts
;

193 #ifde‡
COMPRESS_FUNCTION_TABLES


194 
com¥es£d_off£t_èbÀ_t
 *
	mfun˘i⁄_com¥es£d
;

196 
˛ass_def_t
 *
	m˛as£s
;

197 
˛ass_membî_íåy_t
 *
	m˛ass_membîs
;

198 **
	m°rögs
;

199 **
	mv¨übÀ_èbÀ
;

200 *
	mv¨übÀ_ty≥s
;

201 
öhîô_t
 *
	möhîô
;

202 
	mtŸÆ_size
;

203 
	mhóπ_bót
;

215 *
	m¨gumít_ty≥s
;

216 
	#INDEX_START_NONE
 65535

	)

217 *
	mty≥_°¨t
;

221 
	m¥ogøm_size
;

222 
	mnum_˛as£s
;

223 
	mnum_fun˘i⁄s_tŸÆ
;

224 
	mnum_fun˘i⁄s_deföed
;

225 
	mnum_°rögs
;

226 
	mnum_v¨übÀs_tŸÆ
;

227 
	mnum_v¨übÀs_deföed
;

228 
	mnum_öhîôed
;

229 } 
	t¥ogøm_t
;

231 
tŸÆ_num_¥og_blocks
;

232 
tŸÆ_¥og_block_size
;

233 
ª„ªn˚_¥og
(
¥ogøm_t
 *, *);

234 
‰ì_¥og
(
¥ogøm_t
 *, );

235 
dóŒoˇã_¥ogøm
(
¥ogøm_t
*);

236 *
v¨übÀ_«me
(
¥ogøm_t
 *, );

237 
ru¡ime_fun˘i⁄_u
 *
föd_func_íåy
(
¥ogøm_t
 *, );

240 
	#FUNC_ENTRY
(
p
, 
i
Ë(’)->
fun˘i⁄_off£ts
 + (i))

	)

241 #ifde‡
COMPRESS_FUNCTION_TABLES


243 
	#FIND_FUNC_ENTRY
(
p
, 
i
Ë(((iË< (p)->
fun˘i⁄_com¥es£d
->
fú°_deföed
Ë? 
	`föd_func_íåy
’, iË: 
	`FUNC_ENTRY
’, (iË- (p)->fun˘i⁄_com¥es£d->
num_dñëed
))

	)

245 
	#FIND_FUNC_ENTRY
(
p
, 
i
Ë
	`FUNC_ENTRY
’, i)

	)

	@include/qsort.h

1 #i‚de‡
QSORT_H


2 
	#QSORT_H


	)

7 
quickS‹t
(*, , , (*) () );

	@include/queue.h

35 #i‚de‡
_SYS_QUEUE_H_


36 
	#_SYS_QUEUE_H_


	)

85 #i‡
deföed
(
QUEUE_MACRO_DEBUG
Ë|| (deföed(
_KERNEL
Ë&& deföed(
DIAGNOSTIC
))

86 
	#_Q_INVALIDATE
(
a
Ë◊Ë((*)-1)

	)

88 
	#_Q_INVALIDATE
(
a
)

	)

94 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

95 
	s«me
 { \

96 
ty≥
 *
¶h_fú°
; \

97 }

	)

99 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

100 { 
NULL
 }

	)

102 
	#SLIST_ENTRY
(
ty≥
) \

104 
ty≥
 *
¶e_√xt
; \

105 }

	)

110 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

111 
	#SLIST_END
(
hód
Ë
NULL


	)

112 
	#SLIST_EMPTY
(
hód
Ë(
	`SLIST_FIRST
(hódË=
	`SLIST_END
(hód))

	)

113 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

115 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

116 (
v¨
Ë
	`SLIST_FIRST
(
hód
); \

117 (
v¨
Ë!
	`SLIST_END
(
hód
); \

118 (
v¨
Ë
	`SLIST_NEXT
(v¨, 
fõld
))

	)

120 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

121 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

122 ((
v¨
Ë*(
v¨p
)Ë!
	`SLIST_END
(
hód
); \

123 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

128 
	#SLIST_INIT
(
hód
) { \

129 
	`SLIST_FIRST
(
hód
Ë
	`SLIST_END
(head); \

130 }

	)

132 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

133 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

134 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

135 } 0)

	)

137 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

138 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

139 (
hód
)->
¶h_fú°
 = (
ñm
); \

140 } 0)

	)

142 
	#SLIST_REMOVE_NEXT
(
hód
, 
ñm
, 
fõld
) do { \

143 (
ñm
)->
fõld
.
¶e_√xt
 = (elm)->field.sle_next->field.sle_next; \

144 } 0)

	)

146 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

147 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

148 } 0)

	)

150 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

151 i‡((
hód
)->
¶h_fú°
 =(
ñm
)) { \

152 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

154 
ty≥
 *
cuªlm
 = (
hód
)->
¶h_fú°
; \

156 
cuªlm
->
fõld
.
¶e_√xt
 !(
ñm
)) \

157 
cuªlm
 = cuªlm->
fõld
.
¶e_√xt
; \

158 
cuªlm
->
fõld
.
¶e_√xt
 = \

159 
cuªlm
->
fõld
.
¶e_√xt
->field.sle_next; \

160 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
¶e_√xt
); \

162 } 0)

	)

167 
	#LIST_HEAD
(
«me
, 
ty≥
) \

168 
	s«me
 { \

169 
ty≥
 *
lh_fú°
; \

170 }

	)

172 
	#LIST_HEAD_INITIALIZER
(
hód
) \

173 { 
NULL
 }

	)

175 
	#LIST_ENTRY
(
ty≥
) \

177 
ty≥
 *
À_√xt
; \

178 
ty≥
 **
À_¥ev
; \

179 }

	)

184 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

185 
	#LIST_END
(
hód
Ë
NULL


	)

186 
	#LIST_EMPTY
(
hód
Ë(
	`LIST_FIRST
(hódË=
	`LIST_END
(hód))

	)

187 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

189 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

190 (
v¨
Ë
	`LIST_FIRST
(
hód
); \

191 (
v¨
)!
	`LIST_END
(
hód
); \

192 (
v¨
Ë
	`LIST_NEXT
(v¨, 
fõld
))

	)

197 
	#LIST_INIT
(
hód
) do { \

198 
	`LIST_FIRST
(
hód
Ë
	`LIST_END
(head); \

199 } 0)

	)

201 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

202 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

203 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

204 &(
ñm
)->
fõld
.
À_√xt
; \

205 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

206 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

207 } 0)

	)

209 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

210 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

211 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

212 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

213 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

214 } 0)

	)

216 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

217 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

218 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

219 (
hód
)->
lh_fú°
 = (
ñm
); \

220 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

221 } 0)

	)

223 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

224 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

225 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

226 (
ñm
)->
fõld
.
À_¥ev
; \

227 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

228 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
À_¥ev
); \

229 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
À_√xt
); \

230 } 0)

	)

232 
	#LIST_REPLACE
(
ñm
, 
ñm2
, 
fõld
) do { \

233 i‡(((
ñm2
)->
fõld
.
À_√xt
 = (
ñm
)->fõld.À_√xtË!
NULL
) \

234 (
ñm2
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

235 &(
ñm2
)->
fõld
.
À_√xt
; \

236 (
ñm2
)->
fõld
.
À_¥ev
 = (
ñm
)->field.le_prev; \

237 *(
ñm2
)->
fõld
.
À_¥ev
 = (elm2); \

238 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
À_¥ev
); \

239 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
À_√xt
); \

240 } 0)

	)

245 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

246 
	s«me
 { \

247 
ty≥
 *
sqh_fú°
; \

248 
ty≥
 **
sqh_œ°
; \

249 }

	)

251 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

252 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

254 
	#SIMPLEQ_ENTRY
(
ty≥
) \

256 
ty≥
 *
sqe_√xt
; \

257 }

	)

262 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

263 
	#SIMPLEQ_END
(
hód
Ë
NULL


	)

264 
	#SIMPLEQ_EMPTY
(
hód
Ë(
	`SIMPLEQ_FIRST
(hódË=
	`SIMPLEQ_END
(hód))

	)

265 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

267 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

268 (
v¨
Ë
	`SIMPLEQ_FIRST
(
hód
); \

269 (
v¨
Ë!
	`SIMPLEQ_END
(
hód
); \

270 (
v¨
Ë
	`SIMPLEQ_NEXT
(v¨, 
fõld
))

	)

275 
	#SIMPLEQ_INIT
(
hód
) do { \

276 (
hód
)->
sqh_fú°
 = 
NULL
; \

277 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

278 } 0)

	)

280 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

281 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

282 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

283 (
hód
)->
sqh_fú°
 = (
ñm
); \

284 } 0)

	)

286 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

287 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

288 *(
hód
)->
sqh_œ°
 = (
ñm
); \

289 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

290 } 0)

	)

292 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

293 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

294 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

295 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

296 } 0)

	)

298 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

299 i‡(((
hód
)->
sqh_fú°
 = (hód)->sqh_fú°->
fõld
.
sqe_√xt
Ë=
NULL
) \

300 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

301 } 0)

	)

306 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

307 
	s«me
 { \

308 
ty≥
 *
tqh_fú°
; \

309 
ty≥
 **
tqh_œ°
; \

310 }

	)

312 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

313 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

315 
	#TAILQ_ENTRY
(
ty≥
) \

317 
ty≥
 *
tqe_√xt
; \

318 
ty≥
 **
tqe_¥ev
; \

319 }

	)

324 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

325 
	#TAILQ_END
(
hód
Ë
NULL


	)

326 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

327 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

328 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

329 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

330 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

331 
	#TAILQ_EMPTY
(
hód
) \

332 (
	`TAILQ_FIRST
(
hód
Ë=
	`TAILQ_END
(hód))

	)

334 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

335 (
v¨
Ë
	`TAILQ_FIRST
(
hód
); \

336 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

337 (
v¨
Ë
	`TAILQ_NEXT
(v¨, 
fõld
))

	)

339 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

340 (
v¨
Ë
	`TAILQ_LAST
(
hód
, 
hód«me
); \

341 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

342 (
v¨
Ë
	`TAILQ_PREV
(v¨, 
hód«me
, 
fõld
))

	)

347 
	#TAILQ_INIT
(
hód
) do { \

348 (
hód
)->
tqh_fú°
 = 
NULL
; \

349 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

350 } 0)

	)

352 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

353 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

354 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

355 &(
ñm
)->
fõld
.
tqe_√xt
; \

357 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

358 (
hód
)->
tqh_fú°
 = (
ñm
); \

359 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

360 } 0)

	)

362 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

363 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

364 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

365 *(
hód
)->
tqh_œ°
 = (
ñm
); \

366 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

367 } 0)

	)

369 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

370 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

371 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

372 &(
ñm
)->
fõld
.
tqe_√xt
; \

374 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

375 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

376 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

377 } 0)

	)

379 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

380 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

381 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

382 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

383 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

384 } 0)

	)

386 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

387 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

388 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

389 (
ñm
)->
fõld
.
tqe_¥ev
; \

391 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

392 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

393 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
tqe_¥ev
); \

394 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
tqe_√xt
); \

395 } 0)

	)

397 
	#TAILQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

398 i‡(((
ñm2
)->
fõld
.
tqe_√xt
 = (
ñm
)->fõld.tqe_√xtË!
NULL
) \

399 (
ñm2
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

400 &(
ñm2
)->
fõld
.
tqe_√xt
; \

402 (
hód
)->
tqh_œ°
 = &(
ñm2
)->
fõld
.
tqe_√xt
; \

403 (
ñm2
)->
fõld
.
tqe_¥ev
 = (
ñm
)->field.tqe_prev; \

404 *(
ñm2
)->
fõld
.
tqe_¥ev
 = (elm2); \

405 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
tqe_¥ev
); \

406 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
tqe_√xt
); \

407 } 0)

	)

412 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

413 
	s«me
 { \

414 
ty≥
 *
cqh_fú°
; \

415 
ty≥
 *
cqh_œ°
; \

416 }

	)

418 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

419 { 
	`CIRCLEQ_END
(&
hód
), CIRCLEQ_END(&hódË}

	)

421 
	#CIRCLEQ_ENTRY
(
ty≥
) \

423 
ty≥
 *
cqe_√xt
; \

424 
ty≥
 *
cqe_¥ev
; \

425 }

	)

430 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

431 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

432 
	#CIRCLEQ_END
(
hód
Ë((*)(hód))

	)

433 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

434 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

435 
	#CIRCLEQ_EMPTY
(
hód
) \

436 (
	`CIRCLEQ_FIRST
(
hód
Ë=
	`CIRCLEQ_END
(hód))

	)

438 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

439 (
v¨
Ë
	`CIRCLEQ_FIRST
(
hód
); \

440 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

441 (
v¨
Ë
	`CIRCLEQ_NEXT
(v¨, 
fõld
))

	)

443 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

444 (
v¨
Ë
	`CIRCLEQ_LAST
(
hód
); \

445 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

446 (
v¨
Ë
	`CIRCLEQ_PREV
(v¨, 
fõld
))

	)

451 
	#CIRCLEQ_INIT
(
hód
) do { \

452 (
hód
)->
cqh_fú°
 = 
	`CIRCLEQ_END
(head); \

453 (
hód
)->
cqh_œ°
 = 
	`CIRCLEQ_END
(head); \

454 } 0)

	)

456 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

457 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

458 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

459 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

460 (
hód
)->
cqh_œ°
 = (
ñm
); \

462 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

463 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

464 } 0)

	)

466 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

467 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

468 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

469 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

470 (
hód
)->
cqh_fú°
 = (
ñm
); \

472 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

473 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

474 } 0)

	)

476 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

477 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

478 (
ñm
)->
fõld
.
cqe_¥ev
 = 
	`CIRCLEQ_END
(
hód
); \

479 i‡((
hód
)->
cqh_œ°
 =
	`CIRCLEQ_END
(head)) \

480 (
hód
)->
cqh_œ°
 = (
ñm
); \

482 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

483 (
hód
)->
cqh_fú°
 = (
ñm
); \

484 } 0)

	)

486 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

487 (
ñm
)->
fõld
.
cqe_√xt
 = 
	`CIRCLEQ_END
(
hód
); \

488 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

489 i‡((
hód
)->
cqh_fú°
 =
	`CIRCLEQ_END
(head)) \

490 (
hód
)->
cqh_fú°
 = (
ñm
); \

492 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

493 (
hód
)->
cqh_œ°
 = (
ñm
); \

494 } 0)

	)

496 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

497 i‡((
ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

498 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

500 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

501 (
ñm
)->
fõld
.
cqe_¥ev
; \

502 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

503 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

505 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

506 (
ñm
)->
fõld
.
cqe_√xt
; \

507 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
cqe_¥ev
); \

508 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
cqe_√xt
); \

509 } 0)

	)

511 
	#CIRCLEQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

512 i‡(((
ñm2
)->
fõld
.
cqe_√xt
 = (
ñm
)->field.cqe_next) == \

513 
	`CIRCLEQ_END
(
hód
)) \

514 (
hód
).
cqh_œ°
 = (
ñm2
); \

516 (
ñm2
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (elm2); \

517 i‡(((
ñm2
)->
fõld
.
cqe_¥ev
 = (
ñm
)->field.cqe_prev) == \

518 
	`CIRCLEQ_END
(
hód
)) \

519 (
hód
).
cqh_fú°
 = (
ñm2
); \

521 (
ñm2
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (elm2); \

522 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
cqe_¥ev
); \

523 
	`_Q_INVALIDATE
((
ñm
)->
fõld
.
cqe_√xt
); \

524 } 0)

	)

	@include/rc.h

1 #i‚de‡
RC_H


2 
	#RC_H


	)

7 
£t_deÁu…s
(*);

	@include/reclaim.h

1 #i‚de‡
RECLAIM_H


2 
	#RECLAIM_H


	)

7 
ª˛aim_obje˘s
();

	@include/regexp.h

1 #i‚de‡
_REGEXP_H_


2 
	#_REGEXP_H_


	)

6 
	#NSUBEXP
 10

	)

7 
	sªgexp


9 *
	m°¨ç
[
NSUBEXP
];

10 *
	mídp
[
NSUBEXP
];

11 
	mªg°¨t
;

12 
	mªg™ch
;

13 *
	mªgmu°
;

14 
	mªgmÀn
;

15 
	m¥ogøm
[1];

16 } 
	tªgexp
;

18 
ªg«º©e
;

19 
ªgexp_u£r
;

20 *
ªgexp_îr‹
;

22 
ªgdump
(
ªgexp
*);

24 
ªgexp
 *
_ªgcomp
(*, );

25 
_ªgexec
(
ªgexp
 *, *);

26 *
ªgsub
(
ªgexp
 *, *, *, );

	@include/replace_program.h

1 #i‚de‡
_REPLACE_PROGRAM_H_


2 
	#_REPLACE_PROGRAM_H_


	)

4 
ª∂a˚_¥ogøms
();

6 
	sª∂a˚_ob_s


8 
obje˘_t
 *
	mob
;

9 
¥ogøm_t
 *
	m√w_¥og
;

10 
	mv¨_off£t
;

11 
ª∂a˚_ob_s
 *
	m√xt
;

12 } 
	tª∂a˚_ob_t
;

14 
ª∂a˚_ob_t
 *
obj_li°_ª∂a˚
;

	@include/scratchpad.h

1 #i‚de‡
_SCRATCHPAD_H


2 
	#_SCRATCHPAD_H


	)

16 
	#SCRATCHPAD_SIZE
 4096

	)

17 
	#SDEBUG
(
x
)

	)

18 
	#SDEBUG2
(
x
)

	)

20 
	#SCRATCH_MAGIC
 (()0xbb)

	)

22 
	s•_block_s


24 
•_block_s
 *
	m√xt
, *
	m¥ev
;

25 
	mblock
[2];

26 } 
	t•_block_t
;

28 
	#s¸©ch_‰ì_œ°
() \

29 
s¸_èû
 = --
s¸_œ°
; \

30 
s¸_œ°
 -*
s¸_èû
; \

31 !(*
s¸_œ°
Ë&& 
s¸_èû
 != scr_last) { \

33 
s¸_èû
 = --
s¸_œ°
; \

34 
s¸_œ°
 -*
s¸_èû
; \

35 }

	)

37 *
s¸_œ°
;

38 *
s¸_èû
;

39 *
s¸©ch_íd
;

44 
s¸©ch_de°roy
();

45 *
s¸©ch_c›y
(*);

46 *
s¸©ch_Æloc
();

47 
s¸©ch_‰ì
(*);

48 *
s¸©ch_joö
(*, *);

49 *
s¸©ch_joö2
(*, *);

50 *
s¸©ch_ªÆloc
(*, );

51 *
s¸©ch_c›y_°rög
(*);

52 *
s¸©ch_œrge_Æloc
();

	@include/simul_efun.h

1 #i‚de‡
SIMUL_EFUN_H


2 
	#SIMUL_EFUN_H


	)

9 
compûî_fun˘i⁄_t
 *
	mfunc
;

10 
	mödex
;

11 } 
	tsimul_öfo_t
;

13 
obje˘_t
 *
simul_efun_ob
;

14 
simul_öfo_t
 *
simuls
;

16 
öô_simul_efun
(*);

17 
£t_simul_efun
(
obje˘_t
*);

18 
föd_simul_efun
(*);

20 #ifde‡
DEBUGMALLOC_EXTENSIONS


21 
m¨k_simuls
();

	@include/simulate.h

1 #i‚de‡
SIMULATE_H


2 
	#SIMULATE_H


	)

4 
	#V_SHORT
 1

	)

5 
	#V_NOSPACE
 2

	)

6 
	#V_FUNCTION
 4

	)

9 
	#EndOf
(
x
Ë(x + (x)/(x[0]))

	)

15 
ûÀgÆ_£¡í˚_a˘i⁄
;

16 
obje˘_t
 *
obj_li°
;

17 
obje˘_t
 *
obj_li°_de°ru˘
;

18 
obje˘_t
 *
cuºít_obje˘
;

19 
obje˘_t
 *
comm™d_givî
;

20 
obje˘_t
 *
cuºít_öãø˘ive
;

21 *
öhîô_fûe
;

22 
tŸ_Æloc_£¡í˚
;

23 
OS_is_beög_shut_down
;

25 *
°Ωut
(*, *, *);

26 *
°Ωut_öt
(*, *, );

27 
debug_Áèl
(*, ...);

28 
Áèl
(*, ...);

29 
îr‹
(*, ...);

30 
INLINE
 
check_ÀgÆ_°rög
(*);

31 
‰ì_£¡í˚
(
£¡í˚_t
*);

34 
gë_ch¨
(
svÆue_t
 *, , , svalue_t*);

36 
°rù_«me
(*, *, );

37 *
check_«me
(*);

39 
	#lﬂd_obje˘
(
x
, 
y
Ë
	`öt_lﬂd_obje˘
(x)

	)

40 
obje˘_t
 *
öt_lﬂd_obje˘
(*);

42 
obje˘_t
 *
˛⁄e_obje˘
(*, );

46 
obje˘_t
 *
föd_obje˘
(*);

47 
obje˘_t
 *
föd_obje˘2
(*);

48 
move_obje˘
(
obje˘_t
 *, object_t*);

49 
de°ru˘_obje˘
(
obje˘_t
*);

50 
de°ru˘2
(
obje˘_t
*);

52 
¥öt_svÆue
(
svÆue_t
*);

54 
do_mesßge
(
svÆue_t
 *, svÆue_à*, 
¨øy_t
 *,árray_t *, );

59 
îr‹_√eds_‰ì
(*);

60 
throw_îr‹
();

61 
îr‹_h™dÀr
(*);

63 #ifde‡
SIGNAL_FUNC_TAKES_INT


64 
°¨tshutdownOS
();

66 
°¨tshutdownOS
();

68 
shutdownOS
();

69 
¶ow_shut_down
();

71 #ifde‡
DEBUGMALLOC_EXTENSIONS


72 
m¨k_‰ì_£¡í˚s
();

	@include/smalloc.h

1 #i‚de‡
SMALLOC_H


2 
	#SMALLOC_H


	)

4 #ifde‡
SMALLOC


5 *
smÆloc_mÆloc
(
size_t
);

6 *
smÆloc_ªÆloc
(*, 
size_t
);

7 *
smÆloc_ˇŒoc
(
size_t
, size_t);

8 
smÆloc_‰ì
(*);

9 #ifde‡
DO_MSTATS


10 
show_m°©s
(
outbuf„r_t
 *, *);

	@include/socket_err.h

7 #i‚de‡
_SOCKET_ERRORS_H_


8 
	#_SOCKET_ERRORS_H_


	)

10 
	#EESUCCESS
 1

	)

11 
	#EESOCKET
 -1

	)

12 
	#EESETSOCKOPT
 -2

	)

13 
	#EENONBLOCK
 -3

	)

14 
	#EENOSOCKS
 -4

	)

15 
	#EEFDRANGE
 -5

	)

16 
	#EEBADF
 -6

	)

17 
	#EESECURITY
 -7

	)

18 
	#EEISBOUND
 -8

	)

19 
	#EEADDRINUSE
 -9

	)

20 
	#EEBIND
 -10

	)

21 
	#EEGETSOCKNAME
 -11

	)

22 
	#EEMODENOTSUPP
 -12

	)

23 
	#EENOADDR
 -13

	)

24 
	#EEISCONN
 -14

	)

25 
	#EELISTEN
 -15

	)

26 
	#EENOTLISTN
 -16

	)

27 
	#EEWOULDBLOCK
 -17

	)

28 
	#EEINTR
 -18

	)

29 
	#EEACCEPT
 -19

	)

30 
	#EEISLISTEN
 -20

	)

31 
	#EEBADADDR
 -21

	)

32 
	#EEALREADY
 -22

	)

33 
	#EECONNREFUSED
 -23

	)

34 
	#EECONNECT
 -24

	)

35 
	#EENOTCONN
 -25

	)

36 
	#EETYPENOTSUPP
 -26

	)

37 
	#EESENDTO
 -27

	)

38 
	#EESEND
 -28

	)

39 
	#EECALLBACK
 -29

	)

40 
	#EESOCKRLSD
 -30

	)

41 
	#EESOCKNOTRLSD
 -31

	)

42 
	#EEBADDATA
 -32

	)

44 
	#ERROR_STRINGS
 33

	)

	@include/sprintf.h

1 #i‚de‡
SPRINTF_H


2 
	#SPRINTF_H


	)

4 
svÆue_to_°rög
(
svÆue_t
 *, 
outbuf„r_t
 *, , , );

5 *
°rög_¥öt_f‹m©ãd
(*, , 
svÆue_t
*);

6 
b_v¢¥ötf
(*, , *, , 
svÆue_t
*);

	@include/stack.h

1 #i‚de‡
__LPC_STACK_H__


3 
	#__LPC_STACK_H__


	)

5 
	#MAX_STACK
 20480

	)

6 
	#POP_STR_LEN
 1024

	)

8 
	s°ack_°rög


10 (*
	mpush
Ë(
°ack_°rög
 *
	m°ackp
, *
	mvÆue
);

11 (*
	mp›
Ë(
°ack_°rög
 *
	m°ackp
, **
	mvÆue
);

12 *
	m°‹e
[
MAX_STACK
];

13 
	mödex
;

14 } 
	tST_S
;

16 
__push_°rög
(
ST_S
 *
°ackp
, *
vÆue
);

17 
__p›_°rög
(
ST_S
 *
°ackp
, **
vÆue
);

18 
öô_°ack_°rög
(
ST_S
 **
°ackµ
);

19 
‰ì_°ack_°rög
(
ST_S
 *
°ackp
);

21 
	s°ack_öt


23 (*
	mpush
Ë(
°ack_öt
 *
	m°ackp
, 
	mnum
);

24 (*
	mp›
Ë(
°ack_öt
 *
	m°ackp
, *
	mnum
);

25 
	m°‹e
[
MAX_STACK
];

26 
	mödex
;

27 } 
	tST_I
;

29 
__push_öt
(
ST_I
 *
°ackp
, 
num
);

30 
__p›_öt
(
ST_I
 *
°ackp
, *
num
);

31 
öô_°ack_öt
(
ST_I
 **
°ackµ
);

32 
‰ì_°ack_öt
(
ST_I
 *
°ackp
);

	@include/std.h

1 #i‚de‡
STD_H


2 
	#STD_H


	)

7 
	~"¨ch.h
"

9 #ifde‡
EDIT_SOURCE


10 
	#CONST


	)

11 
	#INLINE


	)

14 
	~"../gømm¨/›ti⁄s_ö˛.h
"

15 
	~"c⁄figuª.h
"

17 #ifde‡
PEDANTIC


18 #unde‡
INLINE


19 
	#INLINE


	)

23 
	~"p‹èbûôy.h
"

24 
	~"ma¸os.h
"

25 #i‚de‡
_FUNC_SPEC_


26 
	~"°d_ö˛.h
"

27 
	~"mÆloc_ö˛.h
"

28 #i‚de‡
NO_OPCODES


29 
	~"›codes.h
"

33 #ifde‡
WIN32


34 
	#ouç
 
ouçå


	)

	@include/std_incl.h

1 #i‡!
deföed
(
STD_INCL_H
Ë&& !deföed(
_FUNC_SPEC_
)

2 
	#STD_INCL_H


	)

4 #ifde‡
INCL_STDLIB_H


5 
	~<°dlib.h
>

7 #ifde‡
INCL_UNISTD_H


8 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<°dio.h
>

13 
	~<£tjmp.h
>

14 
	~<sig«l.h
>

15 
	~<m©h.h
>

16 
	~<˘y≥.h
>

17 
	~<î∫o.h
>

18 #ifde‡
INCL_FCNTL_H


19 
	~<f˙é.h
>

22 #ifde‡
INCL_TIME_H


23 
	~<time.h
>

25 #ifde‡
INCL_SYS_TIME_H


26 
	~<sys/time.h
>

28 #i‡
deföed
 (
INCL_DOS_H
Ë&& deföed (
WIN32
)

29 
	~<dos.h
>

31 #ifde‡
INCL_SYS_TIMES_H


32 
	~<sys/times.h
>

34 #ifde‡
INCL_USCLKC_H


35 
	~<us˛kc.h
>

38 #ifde‡
INCL_SYS_WAIT_H


39 
	~<sys/waô.h
>

41 #ifde‡
INCL_SYS_CRYPT_H


42 
	~<sys/¸y±.h
>

49 #ifde‡
INCL_VALUES_H


50 
	~<vÆues.h
>

52 #ifde‡
INCL_LIMITS_H


53 
	~<limôs.h
>

56 #ifde‡
LATTICE


57 #unde‡
VOID


60 #i‚de‡
_AUX_SOURCE


62 
	~<°rög.h
>

65 #i‚de‡
NO_SOCKETS


66 #ifde‡
INCL_NETINET_IN_H


67 
	~<√töë/ö.h
>

69 #ifde‡
INCL_ARPA_INET_H


70 
	~<¨∑/öë.h
>

73 #i‡
deföed
(
LATTICE
Ë|| deföed(
__SASC
)

74 
	~"amiga/amiga.h
"

75 
	~"amiga/nsig«l.h
"

76 
	~"amiga/sockë.h
"

79 #i‡
deföed
(
WIN32
Ë|| deföed(
LATTICE
)

80 
dos_°yÀ_lök
(*, *);

81 
	#lök
(
x
, 
y
Ë
	`dos_°yÀ_lök
(x, y)

	)

84 #ifde‡
NeXT


85 
	~<libc.h
>

88 #ifde‡
WIN32


89 
	~<sys/timeb.h
>

92 #i‡!
deföed
(
NeXT
Ë&& !deföed(
LATTICE
Ë&& !deföed(
WIN32
)

93 
	~<sys/∑øm.h
>

96 #ifde‡
OLD_ULTRIX


97 
	~<°ddef.h
>

98 
	#size_t
 

	)

101 #ifde‡
INCL_MACH_MACH_H


102 
	~<mach/mach.h
>

105 #ifde‡
INCL_MACH_H


106 
	~<mach.h
>

109 #ifde‡
sun


110 
	~<Æloˇ.h
>

113 #ifde‡
INCL_STDARG_H


114 
	~<°d¨g.h
>

117 
	~<°d¨g.h
>

120 #ifde‡
INCL_BSTRING_H


121 
	~<b°rög.h
>

125 #i‚de‡
USHRT_MAX


126 
	#USHRT_MAX
 ((1 << (()*8)Ë- 1)

	)

	@include/stralloc.h

1 #i‚de‡
_STRALLOC_H_


2 
	#_STRALLOC_H_


	)

5 #unde‡
NOISY_DEBUG


6 
	#NOISY_STRING
 "w‹kroom"

	)

9 #ifde‡
NOISY_DEBUG


10 
bp
();

11 #ifde‡
NOISY_STRING


12 
	#NDBG
(
x
Ëi‡(
	`°rcmp
(
	`STRING
(x), 
NOISY_STRING
)==0) \

13 
	`debug_mesßge
("%†- %d\n", 
	`STRING
(
x
), 
	`REFS
(x)), 
	`bp
()

	)

15 
	#NDBG
(
x
Ë
	`debug_mesßge
("%†- %d\n", 
	`STRING
(x), 
	`REFS
(x)), 
	`bp
()

	)

18 
	#NDBG
(
x
)

	)

21 #i‡
deföed
(
DEBUGMALLOC_EXTENSIONS
Ë&& deföed(
STRING_STATS
)

29 
	#CHECK_STRING_STATS


	)

31 
	#CHECK_STRING_STATS


	)

34 #ifde‡
STRING_STATS


35 
	#ADD_NEW_STRING
(
Àn
, 
ovîhód
Ë
num_di°ö˘_°rögs
++; 
byãs_di°ö˘_°rögs
 +À¿+ 1; 
ovîhód_byãs
 +
	)
ovîhód

36 
	#SUB_NEW_STRING
(
Àn
, 
ovîhód
Ë
num_di°ö˘_°rögs
--; 
byãs_di°ö˘_°rögs
 -À¿+ 1; 
ovîhód_byãs
 -
	)
ovîhód

38 
	#ADD_STRING
(
Àn
Ë
Ælocd_°rögs
++; 
Ælocd_byãs
 +À¿+ 1; 
CHECK_STRING_STATS


	)

39 
	#ADD_STRING_SIZE
(
Àn
Ë
Ælocd_byãs
 +Àn; 
byãs_di°ö˘_°rögs
 +
	)
Àn

40 
	#SUB_STRING
(
Àn
Ë
Ælocd_°rögs
--; 
Ælocd_byãs
 -À¿+ 1; 
CHECK_STRING_STATS


	)

43 
	#ADD_NEW_STRING
(
x
, 
y
)

	)

44 
	#SUB_NEW_STRING
(
x
, 
y
)

	)

45 
	#ADD_STRING
(
x
)

	)

46 
	#ADD_STRING_SIZE
(
x
)

	)

47 
	#SUB_STRING
(
x
)

	)

50 
	smÆloc_block_s


52 #ifde‡
DEBUGMALLOC_EXTENSIONS


53 
	mexåa_ªf
;

55 
	msize
;

56 
	mªf
;

57 } 
	tmÆloc_block_t
;

59 
	#MSTR_BLOCK
(
x
Ë(((
mÆloc_block_t
 *)(x)Ë- 1)

	)

60 
	#MSTR_EXTRA_REF
(
x
Ë(
	`MSTR_BLOCK
(x)->
exåa_ªf
)

	)

61 
	#MSTR_REF
(
x
Ë(
	`MSTR_BLOCK
(x)->
ªf
)

	)

62 
	#MSTR_SIZE
(
x
Ë(
	`MSTR_BLOCK
(x)->
size
)

	)

63 
	#MSTR_UPDATE_SIZE
(
x
, 
y
Ë
	`SAFE
(\

64 
	`ADD_STRING_SIZE
(
y
 - 
	`MSTR_SIZE
(
x
));\

65 
	`MSTR_BLOCK
(
x
)->
size
 = \

66 (
y
 > 
USHRT_MAX
 ? USHRT_MAX : y);\

67 )

	)

69 
	#FREE_MSTR
(
x
Ë
	`SAFE
(\

70 
	`DEBUG_CHECK
(
	`MSTR_REF
(
x
) != 1, "QTZ_ServerEngine:FREE_MSTR used oná multiplyÑeferenced string\n");\

71 
svÆue_°æí_size
 = 
	`MSTR_SIZE
(
x
);\

72 
	`SUB_NEW_STRING
(
svÆue_°æí_size
, \

73 (
mÆloc_block_t
));\

74 
	`FREE
(
	`MSTR_BLOCK
(
x
));\

75 
	`SUB_STRING
(
svÆue_°æí_size
);\

76 )

	)

83 
	#COUNTED_STRLEN
(
x
Ë((
svÆue_°æí_size
 = 
	`MSTR_SIZE
(x)), svÆue_°æí_sizê!
USHRT_MAX
 ? svÆue_°æí_sizê: 
	`°æí
((x)+USHRT_MAX)+USHRT_MAX)

	)

86 
	#COUNTED_REF
(
x
Ë
	`MSTR_REF
(x)

	)

90 
	#INC_COUNTED_REF
(
x
Ëi‡(
	`MSTR_REF
(x)ËMSTR_REF(x)++;

	)

93 
	#DEC_COUNTED_REF
(
x
Ë(!(
	`MSTR_REF
(xË=0 || --MSTR_REF(xË> 0))

	)

95 
	sblock_s


97 
block_s
 *
	m√xt
;

98 #i‡
deföed
(
DEBUGMALLOC_EXTENSIONS
Ë|| (
SIZEOF_PTR
 == 8)

99 
	mexåa_ªf
;

102 
	msize
;

103 
	mªfs
;

104 } 
	tblock_t
;

106 
	#NEXT
(
x
Ë(x)->
√xt


	)

107 
	#REFS
(
x
Ë(x)->
ªfs


	)

108 
	#EXTRA_REF
(
x
Ë(x)->
exåa_ªf


	)

109 
	#SIZE
(
x
Ë(x)->
size


	)

110 
	#BLOCK
(
x
Ë(((
block_t
 *)(x)Ë- 1Ë

	)

111 
	#STRING
(
x
Ë((*)(x + 1))

	)

113 
	#SHARED_STRLEN
(
x
Ë
	`COUNTED_STRLEN
(x)

	)

115 
	#SVALUE_STRLEN
(
x
Ë(((x)->
subty≥
 & 
STRING_COUNTED
) ? \

116 
	`COUNTED_STRLEN
((
x
)->
u
.
°rög
) : \

117 
	`°æí
((
x
)->
u
.
°rög
))

	)

120 
	#SVALUE_STRLEN_DIFFERS
(
x
, 
y
Ë((((x)->
subty≥
 & 
STRING_COUNTED
) && \

121 ((
y
)->
subty≥
 & 
STRING_COUNTED
)) ? \

122 
	`MSTR_SIZE
((
x
)->
u
.
°rög
) != \

123 
	`MSTR_SIZE
((
y
)->
u
.
°rög
Ë: 0)

	)

128 
öô_°rögs
();

129 *
föd°rög
(*);

130 *
make_sh¨ed_°rög
(*);

131 *
ªf_°rög
(*);

132 
‰ì_°rög
(*);

133 
dóŒoˇã_°rög
(*);

134 
add_°rög_°©us
(
outbuf„r_t
 *, );

136 *
exãnd_°rög
(*, );

138 
svÆue_°æí_size
;

140 #ifde‡
STRING_STATS


141 
num_di°ö˘_°rögs
;

142 
byãs_di°ö˘_°rögs
;

143 
Ælocd_°rögs
;

144 
Ælocd_byãs
;

145 
ovîhód_byãs
;

	@include/strstr.h

1 #i‚de‡
STRSTR_H


2 
	#STRSTR_H


	)

7 *
_°r°r
(*, *);

	@include/swap.h

1 #i‚de‡
SWAP_H


2 
	#SWAP_H


	)

7 
sw≠
(
obje˘_t
*);

8 
sw≠_löe_numbîs
(
¥ogøm_t
*);

9 
lﬂd_ob_‰om_sw≠
(
obje˘_t
*);

10 
lﬂd_löe_numbîs
(
¥ogøm_t
*);

11 
ªmove_sw≠_fûe
(
obje˘_t
*);

12 
u∆ök_sw≠_fûe
();

13 
ªmove_löe_sw≠
(
¥ogøm_t
*);

14 
loˇã_ö
(
¥ogøm_t
*);

15 
loˇã_out
(
¥ogøm_t
*);

16 
¥öt_sw≠_°©s
(
outbuf„r_t
*);

	@include/trees.h

5 #i‚de‡
_TREES_H


6 
	#_TREES_H


	)

8 
	#NODES_PER_BLOCK
 256

	)

10 
	enode_ty≥


12 
	mNODE_RETURN
, 
	mNODE_TWO_VALUES
, 
	mNODE_OPCODE
, 
	mNODE_OPCODE_1
, 
	mNODE_OPCODE_2
, 
	mNODE_UNARY_OP
, 
	mNODE_UNARY_OP_1
, 
	mNODE_BINARY_OP
, 
	mNODE_BINARY_OP_1
, 
	mNODE_TERNARY_OP
, 
	mNODE_TERNARY_OP_1
, 
	mNODE_CONTROL_JUMP
,

13 
	mNODE_LOOP
, 
	mNODE_CALL
, 
	mNODE_CALL_1
, 
	mNODE_CALL_2
, 
	mNODE_LAND_LOR
, 
	mNODE_FOREACH
, 
	mNODE_LVALUE_EFUN
, 
	mNODE_SWITCH_RANGES
, 
	mNODE_SWITCH_STRINGS
, 
	mNODE_SWITCH_DIRECT
, 
	mNODE_SWITCH_NUMBERS
, 
	mNODE_CASE_NUMBER
,

14 
	mNODE_CASE_STRING
, 
	mNODE_DEFAULT
, 
	mNODE_IF
, 
	mNODE_BRANCH_LINK
, 
	mNODE_PARAMETER
, 
	mNODE_PARAMETER_LVALUE
, 
	mNODE_EFUN
, 
	mNODE_ANON_FUNC
, 
	mNODE_REAL
, 
	mNODE_NUMBER
, 
	mNODE_STRING
, 
	mNODE_FUNCTION_CONSTRUCTOR
,

15 
	mNODE_CATCH
, 
	mNODE_TIME_EXPRESSION


18 
	ec⁄åﬁ_jump_ty≥


20 
	mCJ_BREAK_SWITCH
 = 2, 
	mCJ_BREAK
 = 0, 
	mCJ_CONTINUE
 = 1

23 
	u∑r£_vÆue


25 
	mnumbî
;

26 
	mªÆ
;

27 
∑r£_node_s
 *
	mex¥
;

30 
	s∑r£_node_s


32 
	mköd
;

33 
	mlöe
;

34 
	mty≥
;

35 #ifde‡
DBVAR_NOASSIGN


36 
	mdbv¨_nﬂssign
;

38 
∑r£_vÆue
 
	mv
, 
	ml
, 
	mr
;

40 
	t∑r£_node_t
;

42 #ifde‡
DBVAR_NOASSIGN


43 
	#DBVAR_NODE_CLEAR
(
node
Ë{“ode)->
dbv¨_nﬂssign
 = 0;}

	)

44 
	#DBVAR_NODE_SET
(
node
, 
ty≥
Ë{“ode)->
dbv¨_nﬂssign
 = (—y≥Ë& 
NAME_DBVAR_NOASSIGN
Ë? 1 : 0;}

	)

45 
	#DBVAR_NODE_GET
(
node
Ë“ode)->
dbv¨_nﬂssign


	)

47 
	#DBVAR_NODE_CLEAR
(
node
)

	)

48 
	#DBVAR_NODE_SET
(
node
, 
ty≥
)

	)

49 
	#DBVAR_NODE_GET
(
node
Ë0

	)

52 
	s∑r£_node_block_s


54 
∑r£_node_block_s
 *
	m√xt
;

55 
∑r£_node_t
 
	mnodes
[
NODES_PER_BLOCK
];

56 } 
	t∑r£_node_block_t
;

58 
	#IS_NODE
(
vn
, 
¡
, 
›
Ë((vn)->
köd
 =¡ && (vn)->
v
.
numbî
 =›)

	)

60 
	#CREATE_TERNARY_OP
(
vn
, 
›
, 
t
, 
x
, 
y
, 
z
Ë
	`SAFE
(\

61 (
vn
Ë
	`√w_node
();\

62 (
vn
)->
köd
 = 
NODE_TERNARY_OP
;\

63 
	`INT_CREATE_TERNARY_OP
(
vn
, 
›
, 
t
,\

64 
x
, 
y
, 
z
);\

65 )

	)

66 
	#INT_CREATE_TERNARY_OP
(
vn
, 
›
, 
t
, 
x
, 
y
, 
z
Ë
	`SAFE
(\

67 (
vn
)->
l
.
ex¥
 = (
x
);\

68 (
vn
)->
ty≥
 = 
t
;\

69 
	`CREATE_BINARY_OP
((
vn
)->
r
.
ex¥
, 
›
, 
t
, 
y
, 
z
);\

70 )

	)

71 
	#CREATE_BINARY_OP
(
vn
, 
›
, 
t
, 
x
, 
y
Ë
	`SAFE
(\

72 (
vn
Ë
	`√w_node
();\

73 (
vn
)->
köd
 = 
NODE_BINARY_OP
;\

74 
	`INT_CREATE_BINARY_OP
(
vn
, 
›
,\

75 
t
, 
x
, 
y
);\

76 )

	)

77 
	#INT_CREATE_BINARY_OP
(
vn
, 
›
, 
t
, 
x
, 
y
Ë
	`SAFE
(\

78 
	`INT_CREATE_UNARY_OP
(
vn
, 
›
,\

79 
t
, 
y
);\

80 (
vn
)->
l
.
ex¥
 = 
x
;\

81 )

	)

82 
	#CREATE_UNARY_OP
(
vn
, 
›
, 
t
, 
x
Ë
	`SAFE
(\

83 (
vn
Ë
	`√w_node
();\

84 (
vn
)->
köd
 = 
NODE_UNARY_OP
;\

85 
	`INT_CREATE_UNARY_OP
(
vn
, 
›
, 
t
, 
x
);\

86 )

	)

87 
	#INT_CREATE_UNARY_OP
(
vn
, 
›
, 
t
, 
x
Ë
	`SAFE
(\

88 
	`INT_CREATE_OPCODE
(
vn
, 
›
, 
t
);\

89 (
vn
)->
r
.
ex¥
 = 
x
;\

90 )

	)

91 
	#CREATE_OPCODE
(
vn
, 
›
, 
t
Ë
	`SAFE
(\

92 (
vn
Ë
	`√w_node
();\

93 (
vn
)->
köd
 = 
NODE_OPCODE
;\

94 
	`INT_CREATE_OPCODE
(
vn
, 
›
, 
t
);\

95 )

	)

96 
	#INT_CREATE_OPCODE
(
vn
, 
›
, 
t
Ë
	`SAFE
(\

97 (
vn
)->
v
.
numbî
 = 
›
;\

98 (
vn
)->
ty≥
 = 
t
;\

99 )

	)

101 
	#CREATE_OPCODE_1
(
vn
, 
›
, 
t
, 
p
Ë
	`SAFE
(\

102 (
vn
Ë
	`√w_node
();\

103 (
vn
)->
köd
 = 
NODE_OPCODE_1
;\

104 
	`INT_CREATE_OPCODE
(
vn
, 
›
, 
t
);\

105 (
vn
)->
l
.
numbî
 = 
p
;\

106 )

	)

107 
	#CREATE_OPCODE_2
(
vn
, 
›
, 
t
, 
p1
, 
p2
Ë
	`SAFE
(\

108 (
vn
Ë
	`√w_node
();\

109 (
vn
)->
köd
 = 
NODE_OPCODE_2
;\

110 
	`INT_CREATE_OPCODE
(
vn
, 
›
, 
t
);\

111 (
vn
)->
l
.
numbî
 = 
p1
;\

112 (
vn
)->
r
.
numbî
 = 
p2
;\

113 )

	)

114 
	#CREATE_UNARY_OP_1
(
vn
, 
›
, 
t
, 
x
, 
p
Ë
	`SAFE
(\

115 (
vn
Ë
	`√w_node
();\

116 (
vn
)->
köd
 = 
NODE_UNARY_OP_1
;\

117 
	`INT_CREATE_UNARY_OP
(
vn
,\

118 
›
, 
t
, 
x
);\

119 (
vn
)->
l
.
numbî
 = 
p
;\

120 )

	)

121 
	#CREATE_BINARY_OP_1
(
vn
, 
›
, 
t
, 
x
, 
y
, 
p
Ë
	`SAFE
(\

122 (
vn
Ë
	`√w_node
();\

123 (
vn
)->
köd
 = 
NODE_BINARY_OP_1
;\

124 
	`INT_CREATE_BINARY_OP
(
vn
, 
›
,\

125 
t
, 
x
, 
y
);\

126 (
vn
)->
ty≥
 = 
p
;\

127 )

	)

128 
	#CREATE_TERNARY_OP_1
(
vn
, 
›
, 
t
, 
x
, 
y
, 
z
, 
p
Ë
	`SAFE
(\

129 (
vn
Ë
	`√w_node
();\

130 (
vn
)->
köd
 = 
NODE_TERNARY_OP_1
;\

131 
	`INT_CREATE_TERNARY_OP
(
vn
, 
›
, 
t
,\

132 
x
, 
y
, 
z
);\

133 (
vn
)->
r
.
ex¥
->
ty≥
 = 
p
;\

134 )

	)

135 
	#CREATE_RETURN
(
vn
, 
vÆ
Ë
	`SAFE
(\

136 (
vn
Ë
	`√w_node_no_löe
();\

137 (
vn
)->
köd
 = 
NODE_RETURN
;\

138 (
vn
)->
r
.
ex¥
 = 
vÆ
;\

139 )

	)

140 
	#CREATE_LAND_LOR
(
vn
, 
›
, 
x
, 
y
Ë
	`SAFE
(\

141 (
vn
Ë
	`√w_node
();\

142 (
vn
)->
köd
 = 
NODE_LAND_LOR
;\

143 (
vn
)->
v
.
numbî
 = 
›
;\

144 (
vn
)->
l
.
ex¥
 = 
x
;\

145 (
vn
)->
r
.
ex¥
 = 
y
;\

146 (
vn
)->
ty≥
 = ((
x
->ty≥ =
y
->type)\

147 ? 
x
->
ty≥
 : 
TYPE_ANY
);\

148 )

	)

149 
	#CREATE_CALL
(
vn
, 
›
, 
t
, 
ñ
Ë
	`SAFE
(\

150 (
vn
Ë
ñ
;\

151 (
vn
)->
köd
 = 
NODE_CALL
;\

152 (
vn
)->
l
.
numbî
 = (vn)->
v
.number;\

153 (
vn
)->
v
.
numbî
 = 
›
;\

154 (
vn
)->
ty≥
 = 
t
;\

155 )

	)

156 
	#CREATE_STATEMENTS
(
vn
, 
 
, 
∫
Ë
	`SAFE
(\

157 (
vn
Ë
	`√w_node_no_löe
();\

158 (
vn
)->
köd
 = 
NODE_TWO_VALUES
;\

159 (
vn
)->
l
.
ex¥
 = 
 
;\

160 (
vn
)->
r
.
ex¥
 = 
∫
;\

161 )

	)

162 
	#CREATE_TWO_VALUES
(
vn
, 
t
, 
 
, 
∫
Ë
	`SAFE
(\

163 
	`CREATE_STATEMENTS
(
vn
, 
 
, 
∫
);\

164 (
vn
)->
ty≥
 = 
t
;\

165 )

	)

166 
	#CREATE_CONTROL_JUMP
(
vn
, 
›
Ë
	`SAFE
(\

167 (
vn
Ë
	`√w_node_no_löe
();\

168 (
vn
)->
köd
 = 
NODE_CONTROL_JUMP
;\

169 (
vn
)->
v
.
numbî
 = 
›
;\

170 )

	)

171 
	#CREATE_PARAMETER
(
vn
, 
t
, 
p
Ë
	`SAFE
(\

172 (
vn
Ë
	`√w_node_no_löe
();\

173 (
vn
)->
köd
 = 
NODE_PARAMETER
;\

174 (
vn
)->
ty≥
 = 
t
;\

175 (
vn
)->
v
.
numbî
 = 
p
;\

176 )

	)

177 
	#CREATE_IF
(
vn
, 
c
, 
s
, 
e
Ë
	`SAFE
(\

178 (
vn
Ë
	`√w_node_no_löe
();\

179 (
vn
)->
köd
 = 
NODE_IF
;\

180 (
vn
)->
v
.
ex¥
 = 
c
;\

181 (
vn
)->
l
.
ex¥
 = 
s
;\

182 (
vn
)->
r
.
ex¥
 = (
e
);\

183 )

	)

184 
	#CREATE_LOOP
(
vn
, 
tf
, 
b
, 
i
, 
t
Ë
	`SAFE
(\

185 (
vn
Ë
	`√w_node_no_löe
();\

186 (
vn
)->
köd
 = 
NODE_LOOP
;\

187 (
vn
)->
ty≥
 = 
tf
;\

188 (
vn
)->
v
.
ex¥
 = 
b
;\

189 (
vn
)->
l
.
ex¥
 = 
i
;\

190 (
vn
)->
r
.
ex¥
 = 
t
;\

191 )

	)

192 
	#CREATE_LVALUE_EFUN
(
vn
, 
t
, 
lvl
Ë
	`SAFE
(\

193 (
vn
Ë
	`√w_node
();\

194 (
vn
)->
köd
 = 
NODE_LVALUE_EFUN
;\

195 (
vn
)->
r
.
ex¥
 = 
lvl
;\

196 (
vn
)->
ty≥
 = 
t
;\

197 )

	)

198 
	#CREATE_FOREACH
(
vn
, 
 
, 
∫
Ë
	`SAFE
(\

199 (
vn
Ë
	`√w_node
();\

200 (
vn
)->
köd
 = 
NODE_FOREACH
;\

201 (
vn
)->
l
.
ex¥
 = 
 
;\

202 (
vn
)->
r
.
ex¥
 = 
∫
;\

203 )

	)

204 
	#CREATE_ERROR
(
vn
Ë
	`SAFE
(\

205 (
vn
Ë
	`√w_node_no_löe
();\

206 (
vn
)->
köd
 = 
NODE_NUMBER
;\

207 (
vn
)->
ty≥
 = 
TYPE_ANY
;\

208 )

	)

209 
	#CREATE_REAL
(
vn
, 
vÆ
Ë
	`SAFE
(\

210 (
vn
Ë
	`√w_node_no_löe
();\

211 (
vn
)->
köd
 = 
NODE_REAL
;\

212 (
vn
)->
ty≥
 = 
TYPE_REAL
;\

213 (
vn
)->
v
.
ªÆ
 = 
vÆ
;\

214 )

	)

215 
	#CREATE_NUMBER
(
vn
, 
vÆ
Ë
	`SAFE
(\

216 (
vn
Ë
	`√w_node_no_löe
();\

217 (
vn
)->
köd
 = 
NODE_NUMBER
;\

218 (
vn
)->
ty≥
 = (
vÆ
 ? 
TYPE_NUMBER
 : 
TYPE_ANY
);\

219 (
vn
)->
v
.
numbî
 = 
vÆ
;\

220 )

	)

221 
	#CREATE_STRING
(
vn
, 
vÆ
Ë
	`SAFE
(\

222 (
vn
Ë
	`√w_node_no_löe
();\

223 (
vn
)->
köd
 = 
NODE_STRING
;\

224 (
vn
)->
ty≥
 = 
TYPE_STRING
;\

225 (
vn
)->
v
.
numbî
 = 
	`°‹e_¥og_°rög
(
vÆ
);\

226 )

	)

227 
	#CREATE_EXPR_LIST
(
vn
, 
≤
Ë
	`SAFE
(\

228 (
vn
Ë
	`√w_node
();\

229 (
vn
)->
v
.
numbî
 = (
≤
 ? ((
∑r£_node_t
 *Ìn)->
köd
 : 0);\

230 (
vn
)->
l
.
ex¥
 = (
≤
 ? ((
∑r£_node_t
 *)pn)->l.expr : (vn));\

231 (
vn
)->
r
.
ex¥
 = 
≤
;\

232 )

	)

233 
	#CREATE_EXPR_NODE
(
vn
, 
≤
, 
f
Ë
	`SAFE
(\

234 (
vn
Ë
	`√w_node_no_löe
();\

235 (
vn
)->
v
.
ex¥
 = 
≤
;\

236 (
vn
)->
l
.
ex¥
 = vn;\

237 (
vn
)->
r
.
ex¥
 = 0;\

238 (
vn
)->
ty≥
 = 
f
;\

239 )

	)

240 
	#CREATE_CATCH
(
vn
, 
≤
Ë
	`SAFE
(\

241 (
vn
Ë
	`√w_node
();\

242 (
vn
)->
köd
 = 
NODE_CATCH
;\

243 (
vn
)->
ty≥
 = 
TYPE_ANY
;\

244 (
vn
)->
r
.
ex¥
 = 
≤
;\

245 )

	)

246 
	#CREATE_TIME_EXPRESSION
(
vn
, 
≤
Ë
	`SAFE
(\

247 (
vn
Ë
	`√w_node
();\

248 (
vn
)->
köd
 = 
NODE_TIME_EXPRESSION
;\

249 (
vn
)->
ty≥
 = 
TYPE_ANY
;\

250 (
vn
)->
r
.
ex¥
 = 
≤
;\

251 )

	)

253 
	#NODE_NO_LINE
(
x
,
y
Ë
	`SAFE
(\

254 (
x
Ë
	`√w_node_no_löe
();\

255 (
x
)->
köd
 = 
y
;\

256 )

	)

259 
‰ì_åì
();

260 
ªÀa£_åì
();

261 
lock_ex¥essi⁄s
();

262 
u∆ock_ex¥essi⁄s
();

264 
∑r£_node_t
 *
√w_node
();

265 
∑r£_node_t
 *
√w_node_no_löe
();

266 
∑r£_node_t
 *
make_bønched_node
(, ,Öarse_node_t *,Öarse_node_t*);

268 
∑r£_node_t
 *
bö¨y_öt_›
(parse_node_t *,Öarse_node_t *, , *);

269 
∑r£_node_t
 *
make_ønge_node
(,Öarse_node_t *,Öarse_node_t *,Öarse_node_t*);

270 
∑r£_node_t
 *
ö£π_p›_vÆue
(parse_node_t*);

271 
∑r£_node_t
 *
›timize_lo›_ã°
(parse_node_t*);

272 
is_boﬁón
(
∑r£_node_t
*);

	@include/wrappedmalloc.h

1 #i‚de‡
WRAPPED_MALLOC_H


2 
	#WRAPPED_MALLOC_H


	)

3 #ifde‡
WRAPPEDMALLOC


4 *
wøµedmÆloc
();

5 *
wøµedªÆloc
(*, );

6 *
wøµedˇŒoc
(, );

7 
wøµed‰ì
(*);

9 
wøµedmÆloc_öô
();

10 
dump_mÆloc_d©a
(
outbuf„r_t
*);

	@lib/lstack.c

1 
	~<°dlib.h
>

2 
	~"l°ack.h
"

4 
	sl°ack_t
 {

5 
	mcou¡
;

6 
	sñem
{

7 *
	mobj
;

8 
ñem
 *
	mlök
;

9 } *
	mhód
;

12 
ölöe
 
ñem
 *
	$_√w_node
()

14  (
ñem
 *)
	`mÆloc
((elem));

15 
	}
}

17 
ölöe
 
	$_‰ì_node
(
ñem
 *
node
)

19 
	`as£π
(
node
);

20 
	`‰ì
(
node
);

21 
	}
}

23 
l°ack_t
 
	$l°ack_√w
()

25 
l°ack_t
 
l°ack
 = (l°ack_t)
	`mÆloc
((lstack_t));

26 
l°ack
->
cou¡
 = 0;

27 
l°ack
->
hód
 = 
NULL
;

28  
l°ack
;

29 
	}
}

31 
	$l°ack_is_em±y
(
l°ack_t
 
l°ack
)

33 
	`as£π
(
l°ack
);

34  
l°ack
->
cou¡
 == 0;

35 
	}
}

37 
	$l°ack_size
(
l°ack_t
 
l°ack
)

39 
	`as£π
(
l°ack
);

40  
l°ack
->
cou¡
;

41 
	}
}

43 
	$l°ack_push
(
l°ack_t
 
l°ack
, *
ôem
)

45 
	`as£π
(
l°ack
);

46 
ñem
 *ñem = 
	`_√w_node
();

47 
ñem
->
obj
 = 
ôem
;

48 
ñem
->
lök
 = 
l°ack
->
hód
;

49 
l°ack
->
hód
 = 
ñem
;

50 
l°ack
->
cou¡
 ++;

51 
	}
}

53 *
	$l°ack_p›
(
l°ack_t
 
l°ack
)

55 
	`as£π
(
l°ack
);

56 
	`as£π
(
l°ack
->
cou¡
 >= 0);

57 
ñem
 *
node
 = 
l°ack
->
hód
;

58 
	`as£π
(
node
 !
NULL
);

59 *
ôem
 = 
node
->
obj
;

60 
l°ack
->
hód
 = 
node
->
lök
;

61 
l°ack
->
cou¡
 --;

62 
	`_‰ì_node
(
node
);

63  
ôem
;

64 
	}
}

66 
	$l°ack_‰ì
(
l°ack_t
 
l°ack
)

68 
	`as£π
(
l°ack
);

69 
l°ack
->
hód
){

70 
ñem
 *
node
 = 
l°ack
->
hód
;

71 
l°ack
->
hód
 = 
node
->
lök
;

72 
	`_‰ì_node
(
node
);

74 
	`‰ì
(
l°ack
);

75 
	}
}

	@lib/lstack.h

1 #i‚de‡
_LSTACK_INCLUDE


2 
	#_LSTACK_INCLUDE


	)

4 
l°ack_t
 *
	tl°ack_t
;

6 
l°ack_t
 
l°ack_√w
();

7 
l°ack_is_em±y
(
l°ack_t
 
°k
);

8 
l°ack_size
(
l°ack_t
 
°k
);

9 
l°ack_push
(
l°ack_t
 
°k
, *
ôem
);

10 *
l°ack_p›
(
l°ack_t
 
°k
);

11 
l°ack_‰ì
(
l°ack_t
 
°k
);

	@packages/cksum.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)sum2.c 8.1 (Berkeley) 6/6/93";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/usr.bin/cksum/sum2.c,v 1.8.32.1 2009/04/15 03:14:26 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

44 
	~<uni°d.h
>

45 
	~<°döt.h
>

47 
	$cksum
(c⁄° *
buf
, 
off_t
 
Àn
, 
uöt32_t
 *
cvÆ
)

49 
uöt32_t
 
l¸c
, 
tmp¸c
;

50 c⁄° *
p
;

51 
off_t
 
tm∂í
 = 
Àn
;

60 
l¸c
 = 0;

61 
p
 = 
buf
; 
Àn
--; ++p)

62 
l¸c
 +*
p
;

65 ; 
tm∂í
 != 0;Åmplen >>= 8) {

66 
l¸c
 +(
tm∂í
 & 0xff);

69 
tmp¸c
 = 
l¸c
;

70 
tmp¸c
 = (tmpcrc & 0xffff) + (tmpcrc >> 16);

71 
tmp¸c
 = (tmpcrc & 0xffff) + (tmpcrc >> 16);

72 ; 
tmp¸c
 != 0;Åmpcrc >>= 8) {

73 
l¸c
 +(
tmp¸c
 & 0xff);

76 
l¸c
 = (lcrc & 0xffff) + (lcrc >> 16);

77 
l¸c
 = (lcrc & 0xffff) + (lcrc >> 16);

78 *
cvÆ
 = 
l¸c
;

81 
	}
}

	@packages/comm.c

2 
	~"fs_comm.h
"

3 
	~"fs_mbuf.h
"

5 
	~<°dlib.h
>

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<as£π.h
>

9 
	~<î∫o.h
>

12 
	~<f˙é.h
>

13 
	~<uni°d.h
>

14 
	~<√töë/ö.h
>

15 
	~<sys/sockë.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<¨∑/öë.h
>

21 
fs_√t_ac˚±‹_t
* 
	$fs_√t_ac˚±‹_√w
(
fd
, 
evítcb
 
ac˚±cb
, *
ud©a
)

23 
fs_√t_ac˚±‹_t
 *
ac˚±‹
 = 
	`ˇŒoc
(1, (fs_net_acceptor_t));

24 
ac˚±‹
->
fd
 = fd;

25 
ac˚±‹
->
ud©a
 = udata;

26 
	`evít_£t
(&
ac˚±‹
->
ev
, 
fd
, 
EV_READ
|
EV_PERSIST
, 
ac˚±cb
,ácceptor);

27 
	`evít_add
(&
ac˚±‹
->
ev
, 
NULL
);

28  
ac˚±‹
;

29 
	}
}

31 
	$fs_√t_ac˚±‹_de°roy
(
fs_√t_ac˚±‹_t
 *
ac˚±‹
)

33 
	`evít_dñ
(&
ac˚±‹
->
ev
);

34 
	`˛o£
(
ac˚±‹
->
fd
);

35 
	`‰ì
(
ac˚±‹
);

36 
	}
}

38 
ölöe
 
fs_√t_c⁄√˘i⁄_t
 * 
	$c⁄√˘i⁄_√w
(
fd
, 
evbuf„rcb
 
ªadcb
,

39 
evbuf„rcb
 
wrôecb
, 
evîr‹cb
 
îr‹cb
, 
size_t
 
max_outbuf
, size_à
obj_size
)

41 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`ˇŒoc
(1, 
obj_size
);

42 
c⁄n
->
fd
 = fd;

43 
c⁄n
->
max_outbuf
 = max_outbuf;

44 
c⁄n
->
bu„v
 = 
	`buf„ªvít_√w
(
fd
, 
ªadcb
, 
wrôecb
, 
îr‹cb
, conn);

45 
	`buf„ªvít_íabÀ
(
c⁄n
->
bu„v
, 
EV_READ
|
EV_WRITE
);

46  
c⁄n
 ;

47 
	}
}

49 
fs_√t_c⁄√˘i⁄_t
 * 
	$fs_√t_c⁄√˘i⁄_√w
(
fd
, 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
,

50 
evîr‹cb
 
îr‹cb
, 
size_t
 
max_outbuf
,*
ud©a
)

52 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`c⁄√˘i⁄_√w
(
fd
, 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
max_outbuf
, (fs_net_connection_t));

53 
c⁄n
->
ud©a
 = udata;

54  
c⁄n
 ;

55 
	}
}

57 
fs_√t_c⁄√˘i⁄_t
 * 
	$fs_√t_c⁄√˘i⁄_√w_ext
(
fd
, 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
,

58 
evîr‹cb
 
îr‹cb
, 
size_t
 
max_outbuf
, size_à
ext
)

60 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`c⁄√˘i⁄_√w
(
fd
, 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
max_outbuf
, (fs_√t_c⁄√˘i⁄_tË+ 
ext
);

61 
c⁄n
->
ud©a
 = conn + 1;

62  
c⁄n
 ;

63 
	}
}

65 
	$fs_√t_c⁄√˘i⁄_de°roy
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
)

67 
	`buf„ªvít_‰ì
(
c⁄n
->
bu„v
);

68 
	`˛o£
(
c⁄n
->
fd
);

69 
	`‰ì
(
c⁄n
);

70 
	}
}

72 
	$fs_√t_c⁄√˘i⁄_åy_Êush
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
)

74 
size_t
 
size
 = 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
c⁄n
->
bu„v
));

75 i‡(
size
 > 0) {

77 
w
 = 
	`evbuf„r_wrôe
(
	`EVBUFFER_OUTPUT
(
c⁄n
->
bu„v
), c⁄n->
fd
);

78  
w
 < 0 ? -1 : 
size
 - w;

81 
	}
}

83 
	$fs_√t_c⁄√˘i⁄_max_outbuf
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
size_t
 
max_outbuf
) {

84 
c⁄n
->
max_outbuf
 = max_outbuf;

85 
	}
}

87 
	$fs_√t_c⁄√˘i⁄_£nd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, c⁄° *
buf
, 
size_t
 
Àn
)

95 
ªt
 = 
	`buf„ªvít_wrôe
(
c⁄n
->
bu„v
, 
buf
, 
Àn
);

96 i‡(
ªt
 != 0) {

97 
	`Ârötf
(
°dîr
, "net sendÉrror.bufsize=%lu,errno=%d\n",

98 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
c⁄n
->
bu„v
)), 
î∫o
);

100  
ªt
;

101 
	}
}

103 
	$fs_√t_c⁄√˘i⁄_£nd_∑ckë
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, c⁄° *
hódî
, 
size_t
 
hdæí
,

104 c⁄° *
∑ylﬂd
, 
size_t
 
∂dÀn
)

106 
ªt
;

115 i‡((
ªt
 = 
	`buf„ªvít_wrôe
(
c⁄n
->
bu„v
, 
hódî
, 
hdæí
)) == 0) {

116 
ªt
 = 
	`buf„ªvít_wrôe
(
c⁄n
->
bu„v
, 
∑ylﬂd
, 
∂dÀn
);

117 i‡(
ªt
 != 0) {

118 
	`Ârötf
(
°dîr
, "net sendÖacketÖayloadÉrror.bufsize=%lu,errno=%d\n",

119 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
c⁄n
->
bu„v
)), 
î∫o
);

122 
	`Ârötf
(
°dîr
, "net sendÖacket headerÉrror.bufsize=%lu,errno=%d\n",

123 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
c⁄n
->
bu„v
)), 
î∫o
);

125  
ªt
;

126 
	}
}

130 
	$fs_√t_c⁄vît_addr
(c⁄° *
ù
, 
p‹t
, 
sockaddr_ö
 *
addr
)

132 
ö_addr
 
öaddr
;

133 
	`mem£t
(&
öaddr
, 0, (inaddr));

134 
	`mem£t
(
addr
, 0, (*addr));

135 
ªt
 = 
	`öë_©⁄
(
ù
, &
öaddr
);

136 i‡(1 =
ªt
) {

137 
addr
->
sö_Ámûy
 = 
AF_INET
;

138 
addr
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

140 
addr
->
sö_addr
 = 
öaddr
;

143 
	`as£π
(
ªt
 == 1);

145  
ªt
;

146 
	}
}

148 
	$fs_√t_£t_n⁄block
(
fd
)

150 
Êag
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

151  
	`f˙é
(
fd
, 
F_SETFL
, 
Êag
 | 
O_NONBLOCK
);

152 
	}
}

154 
	$fs_√t_£t_block
(
fd
, *
rÊag
)

156 
Êag
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

157 i‡(
rÊag
 !
NULL
) {

158 *
rÊag
 = 
Êag
;

160  
	`f˙é
(
fd
, 
F_SETFL
, 
Êag
 & (~
O_NONBLOCK
));

161 
	}
}

163 
	$fs_√t_c⁄√˘
(c⁄° *
ù
, 
p‹t
, 
block
)

165 
sockaddr_ö
 
addr
;

166 
fd
;

167 
	`¥ötf
("c⁄√˘Åÿ%s:%d\n", 
ù
, 
p‹t
);

168 i‡(1 =
	`fs_√t_c⁄vît_addr
(
ù
, 
p‹t
, &
addr
)) {

169 
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

170 i‡(0 > 
fd
) {

171 
	`≥º‹
("fsÇet socket");

174 i‡(!
block
) {

175 i‡(0 > 
	`fs_√t_£t_n⁄block
(
fd
)){

176 
	`≥º‹
("fsÇet fcntlÇoblock");

177 
	`˛o£
(
fd
);

181 i‡(0 > 
	`c⁄√˘
(
fd
, (
sockaddr
*)&
addr
, (addr))) {

182 i‡(!
block
 && 
î∫o
 =
EINPROGRESS
) {

183  
fd
;

185 
	`≥º‹
("fsÇet connect");

186 
	`˛o£
(
fd
);

190  
fd
;

194 
	}
}

196 
	$fs_√t_li°í
(c⁄° *
ù
, 
p‹t
, 
backlog
, 
block
)

198 
sockaddr_ö
 
addr
;

199 
fd
;

200 i‡(1 =
	`fs_√t_c⁄vît_addr
(
ù
, 
p‹t
, &
addr
)) {

201 
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

202 i‡(0 > 
fd
) {

203 
	`≥º‹
("fsÇet socket");

206 
ªu£
 = 1;

207 i‡(0 > 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
ªu£
, ())) {

208 
	`≥º‹
("fsÇet setsockopt");

209 
	`˛o£
(
fd
);

212 i‡(0 > 
	`böd
(
fd
, (
sockaddr
*)&
addr
, (addr))) {

213 
	`≥º‹
("fsÇet bind");

214 
	`˛o£
(
fd
);

217 i‡(0 > 
	`li°í
(
fd
, 
backlog
)) {

218 
	`≥º‹
("fsÇetÜisten");

219 
	`˛o£
(
fd
);

222 i‡(!
block
) {

223 i‡(0 > 
	`fs_√t_£t_n⁄block
(
fd
)){

224 
	`≥º‹
("fsÇet fcntlÇoblock");

225 
	`˛o£
(
fd
);

230  
fd
;

234 
	}
}

237 
	$fs_sig«l_li°í
(
fs_sig«l_t
 *
s
, 
sig
, 
evítcb
 
h™dÀr
)

239 
s
->
sig
 = sig;

240 
	`evít_£t
(&
s
->
ev
, 
sig
, 
EV_SIGNAL
|
EV_PERSIST
, 
h™dÀr
, s);

241 
	`evít_add
(&
s
->
ev
, 
NULL
);

242 
	}
}

244 
	$fs_sig«l_ªmove
(
fs_sig«l_t
 *
sig
)

246 
	`evít_dñ
(&
sig
->
ev
);

247 
	}
}

250 
öô_sig«l
(
evítcb
 
sig«l_evít
, (*
sig«l_öãºu±
)())

252 
i
;

253 
sig_li°
[] = {
SIGUSR1
, 
SIGTERM
, 
SIGHUP
, 
SIGINT
,
SIGPIPE
,
SIGCHLD
, };

254 
	#SIGNAL_NUM
 ((
sig_li°
)/(sig_li°[0]))

	)

255 
fs_sig«l_t
 
sig_˘l
[
SIGNAL_NUM
];

257 
i
 = 0; i < 
SIGNAL_NUM
; i++) {

258 
	`fs_sig«l_li°í
(&
sig_˘l
[
i
], 
sig_li°
[i], 
sig«l_evít
);

261 
	`sig«l
(
SIGUSR2
, 
sig«l_öãºu±
) ;

262 
	}
}

264 
	$fs_ng_£nd_cmd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_ng_cmd_t
 
cmd
, 
fs_uid_t
 
uid
, *
buf
, 
size_t
 
Àn
)

266 
fs_ng_hódî_t
 
nghdr
;

268 i‡(
buf
 =
NULL
) {

269 
	`FS_NG_SET_HEADER
(&
nghdr
, 
cmd
, 
uid
, 0);

270  
	`fs_√t_c⁄√˘i⁄_£nd
(
c⁄n
, &
nghdr
, (nghdr));

272 
	`FS_NG_SET_HEADER
(&
nghdr
, 
cmd
, 
uid
, 
Àn
);

273  
	`fs_√t_c⁄√˘i⁄_£nd_∑ckë
(
c⁄n
, &
nghdr
, “ghdr), 
buf
, 
Àn
);

276 
	}
}

278 
	$fs_gd_£nd_cmd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_cmd_t
 
cmd
, 
fs_uid_t
 
uid
, *
buf
, 
size_t
 
Àn
)

280 
fs_gd_hódî_t
 
hódî
;

282 i‡(
buf
 =
NULL
 || 
Àn
 == 0) {

283 
	`FS_GD_SET_HEADER
(&
hódî
, 
cmd
, 
uid
, 0);

284  
	`fs_√t_c⁄√˘i⁄_£nd
(
c⁄n
, &
hódî
, (header));

286 
	`FS_GD_SET_HEADER
(&
hódî
, 
cmd
, 
uid
, 
Àn
);

287  
	`fs_√t_c⁄√˘i⁄_£nd_∑ckë
(
c⁄n
, &
hódî
, (hódî), 
buf
, 
Àn
);

289 
	}
}

315 
	$fs_mbuf_to_buf„ªvít
(
fs_mbuf_t
 *
mbuf
, 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
)

317 i‡(
mbuf
->
d©a_size
 > 0) {

318 
fs_mbuf_blk_t
 *
blk
;

328 
blk
 = 
mbuf
->
hód
; blk !
NULL
; blk = blk->
√xt
) {

329 
Àn
 = 
	`FS_MBUF_BLK_DATA_LEN
(
blk
);

330 i‡(
Àn
 > 0) {

331 
ªt
 = 
	`buf„ªvít_wrôe
(
c⁄n
->
bu„v
, 
blk
->
hód
, 
Àn
);

332 i‡(
ªt
 != 0) {

333 
	`Ârötf
(
°dîr
, "mbufÅo buffereventÉrror.bufsize=%lu,errno=%d\n",

334 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
c⁄n
->
bu„v
)), 
î∫o
);

340  
mbuf
->
d©a_size
;

341 
	}
}

343 
	$fs_gd_£nd_cmd_mbuf
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, 
fs_mbuf_t
 *
mbuf
)

345 
size_t
 
hódÀn
 = (
fs_gd_hódî_t
);

354 
hódî
->
∑ylﬂd_Àn
 = 
mbuf
->
d©a_size
;

355 
	`buf„ªvít_wrôe
(
c⁄n
->
bu„v
, 
hódî
, 
hódÀn
);

356 
	`fs_mbuf_to_buf„ªvít
(
mbuf
, 
c⁄n
);

358  
mbuf
->
d©a_size
 + 
hódÀn
;

359 
	}
}

362 
	$fs_√t_mbuf_£nd
(
fs_√t_mbuf_t
 *
√tbuf
, 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
)

364  
	`fs_mbuf_to_buf„ªvít
(&
√tbuf
->
mbuf
, 
c⁄n
);

365 
	}
}

367 
	$mbuf_to_evbuf„r
(
fs_mbuf_t
 *
mbuf
, 
evbuf„r
 *
buf
)

369 i‡(
mbuf
->
d©a_size
 > 0) {

370 
fs_mbuf_blk_t
 *
blk
;

371 
blk
 = 
mbuf
->
hód
; blk !
NULL
; blk = blk->
√xt
) {

372 
Àn
 = 
	`FS_MBUF_BLK_DATA_LEN
(
blk
);

373 i‡(
Àn
 > 0) {

374 
	`evbuf„r_add
(
buf
, 
blk
->
hód
, 
Àn
);

379  
mbuf
->
d©a_size
;

380 
	}
}

382 
	$fs_gd_£nd_sync
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hdr
, 
fs_mbuf_t
 *
mbuf
)

384 
À·
;

385 
ªt
;

386 
Êag
;

387 
evbuf„r
 *
ouãvb
 = 
	`EVBUFFER_OUTPUT
(
c⁄n
->
bu„v
);

389 i‡(
mbuf
 =
NULL
) {

390 
hdr
->
∑ylﬂd_Àn
 = 0;

391 
	`evbuf„r_add
(
ouãvb
, 
hdr
, (*hdr));

393 
hdr
->
∑ylﬂd_Àn
 = 
mbuf
->
d©a_size
;

394 
	`evbuf„r_add
(
ouãvb
, 
hdr
, (*hdr));

395 
	`mbuf_to_evbuf„r
(
mbuf
, 
ouãvb
);

398 
	`fs_√t_£t_block
(
c⁄n
->
fd
, &
Êag
);

399 
À·
 = 
	`EVBUFFER_LENGTH
(
ouãvb
);Üeft > 0; ) {

400 
ªt
 = 
	`wrôe
(
c⁄n
->
fd
, 
	`EVBUFFER_DATA
(
ouãvb
), 
À·
);

401 i‡(
ªt
 > 0) {

402 
À·
 -
ªt
;

403 
	`evbuf„r_døö
(
ouãvb
, 
ªt
);

404 } i‡(
ªt
 < 0) {

406 
	`evbuf„r_døö
(
ouãvb
, 
	`EVBUFFER_LENGTH
(outevb));

407 
	`≥º‹
("rpc call db sync writeÉrror");

408 
îr‹
;

411 
	`as£π
(
	`EVBUFFER_LENGTH
(
ouãvb
) == 0);

412 
	`f˙é
(
c⁄n
->
fd
, 
F_SETFL
, 
Êag
);

415 
îr‹
:

416 
	`f˙é
(
c⁄n
->
fd
, 
F_SETFL
, 
Êag
);

418 
	}
}

420 
evbuf„r
 * 
	$fs_gd_ªcv_sync
(
fd
)

422 
evbuf„r
 *
öevb
 = 
	`evbuf„r_√w
();

423 
ªt
 = 0;

424 
size_t
 
∑ckë_sz
 = 0;

425 
fs_gd_hódî_t
 *
hódî
 = 
NULL
;

426 
size_t
 
bufsz
 = 1024;

427 
buf
[
bufsz
];

431 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
bufsz
);

432 i‡(
ªt
 < 0) {

433 
	`≥º‹
("rpc call db syncÑeadÉrror");

434 i‡(
ªt
 =
EINTR
) {

435 
	`Ârötf
(
°dîr
, "inter syncÑecv\n");

438  
NULL
;

439 } i‡(
ªt
 == 0) {

440 
	`Ârötf
(
°dîr
, "sync db socket close\n");

441 
	`as£π
(0);

442  
NULL
;

444 
	`evbuf„r_add
(
öevb
, 
buf
, 
ªt
);

445 i‡(
	`EVBUFFER_LENGTH
(
öevb
Ë< (
fs_gd_hódî_t
))

448 i‡(
hódî
 =
NULL
) {

449 
hódî
 = (
fs_gd_hódî_t
 *)
	`EVBUFFER_DATA
(
öevb
);

450 
∑ckë_sz
 = (
fs_gd_hódî_t
Ë+ 
hódî
->
∑ylﬂd_Àn
;

453 i‡(
	`EVBUFFER_LENGTH
(
öevb
Ë>
∑ckë_sz
)

459 
	`as£π
(
	`EVBUFFER_LENGTH
(
öevb
Ë=
∑ckë_sz
);

460  
öevb
;

461 
	}
}

463 
	$fs_ng_buf_öô
(
fs_ng_buf_t
 *
ngbuf
)

465 
	`fs_mbuf_öô
(&
ngbuf
->
mbuf
, 0);

466 
ngbuf
->
hód
 = 
	`FS_MBUF_ALLOC
(&ngbuf->
mbuf
, (*ngbuf->head));

467 
	}
}

469 
	$fs_ng_buf_ª£t
(
fs_ng_buf_t
 *
ngbuf
)

471 
	`fs_mbuf_ª£t
(&
ngbuf
->
mbuf
);

472 
ngbuf
->
hód
 = 
	`FS_MBUF_ALLOC
(&ngbuf->
mbuf
, (*ngbuf->head));

473 
	}
}

475 
	$fs_ng_buf_de°roy
(
fs_ng_buf_t
 *
ngbuf
)

477 
	`fs_mbuf_de°ru˘
(&
ngbuf
->
mbuf
);

478 
	}
}

480 
	$fs_ng_buf_£nd
(
fs_ng_buf_t
 *
ngbuf
, 
fs_ng_cmd_t
 
cmd
, 
fs_uid_t
 
uid
, 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
)

482 
	`FS_NG_SET_HEADER
(
ngbuf
->
hód
, 
cmd
, 
uid
,Çgbuf->
mbuf
.
d©a_size
 - (*ngbuf->head));

483  
	`fs_mbuf_to_buf„ªvít
(&
ngbuf
->
mbuf
, 
c⁄n
);

484 
	}
}

486 
	$fs_hh_buf_öô
(
fs_hh_buf_t
 *
hhbuf
)

488 
	`fs_mbuf_öô
(&
hhbuf
->
mbuf
, 0);

489 
hhbuf
->
hód
 = 
	`FS_MBUF_ALLOC
(&hhbuf->
mbuf
, (*hhbuf->head));

490 
	}
}

492 
	$fs_hh_buf_ª£t
(
fs_hh_buf_t
 *
hhbuf
)

494 
	`fs_mbuf_ª£t
(&
hhbuf
->
mbuf
);

495 
hhbuf
->
hód
 = 
	`FS_MBUF_ALLOC
(&hhbuf->
mbuf
, (*hhbuf->head));

496 
	}
}

498 
	$fs_hh_buf_de°roy
(
fs_hh_buf_t
 *
hhbuf
)

500 
	`fs_mbuf_de°ru˘
(&
hhbuf
->
mbuf
);

501 
	}
}

503 
	$fs_hh_buf_£nd
(
fs_hh_buf_t
 *
hhbuf
, 
fs_hh_cmd_t
 
cmd
, 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
)

505 
	`FS_HH_SET_HEADER
(
hhbuf
->
hód
, 
cmd
, hhbuf->
mbuf
.
d©a_size
 - (*hhbuf->head));

506 
	`fs_mbuf_to_buf„ªvít
(&
hhbuf
->
mbuf
, 
c⁄n
);

507  
hhbuf
->
mbuf
.
d©a_size
;

508 
	}
}

510 
	$fs_≠r_hash_c⁄°ru˘
(
fs_≠r_hash_t
 *
èbÀ
)

512 
	`≠r_poﬁ_¸óã
(&
èbÀ
->
poﬁ
, 
NULL
);

513 
èbÀ
->
hash
 = 
	`≠r_hash_make
—abÀ->
poﬁ
);

514 
	}
}

516 
	$fs_≠r_hash_de°ru˘
(
fs_≠r_hash_t
 *
èbÀ
)

518 
	`≠r_poﬁ_de°roy
(
èbÀ
->
poﬁ
);

519 
	}
}

522 
	$fs_°ack_öô
(
fs_°ack_t
 *
°ack
, 
size_t
 
cou¡
, size_à
size
, 
fs_°ack_dë‹_t
 
dë‹
, *
ud©a
)

524 
°ack
->
obj_˙t
 = 
cou¡
;

525 
°ack
->
obj_‹igsize
 = 
size
;

526 
°ack
->
obj_size
 = 4 * ((
size
 + 4 - 1) / 4);

527 
°ack
->
obj
 = 
	`ˇŒoc
(
cou¡
, sèck->
obj_size
);

528 
°ack
->
t›
 = 0;

529 
°ack
->
dë‹
 = detor;

530 
°ack
->
ud©a
 = udata;

531 
	}
}

533 
	$fs_°ack_de°roy
(
fs_°ack_t
 *
°ack
)

535 i‡(
°ack
->
dë‹
) {

536 
i
;

537 
i
 = 0; i < 
°ack
->
t›
; ++i) {

538 
°ack
->
	`dë‹
(&°ack->
obj
[
i
 * sèck->
obj_size
], sèck->
ud©a
);

542 
	`‰ì
(
°ack
->
obj
);

543 
°ack
->
obj
 = 
NULL
;

544 
	}
}

546 
	#FS_STACK_IS_EMPTY
(
°
Ë((°)->
t›
 =0)

	)

547 
	#FS_STACK_IS_FULL
(
°
Ë((°)->
t›
 =(°)->
obj_˙t
)

	)

549 
	$fs_°ack_is_em±y
(
fs_°ack_t
 *
°ack
)

551  
	`FS_STACK_IS_EMPTY
(
°ack
);

552 
	}
}

554 
	$fs_°ack_is_fuŒ
(
fs_°ack_t
 *
°ack
)

556  
	`FS_STACK_IS_FULL
(
°ack
);

557 
	}
}

559 
size_t
 
	$fs_°ack_size
(
fs_°ack_t
 *
°ack
)

561  
°ack
->
t›
;

562 
	}
}

564 
	$fs_°ack_push
(
fs_°ack_t
 *
°ack
, *
obj
)

566 i‡(
	`FS_STACK_IS_FULL
(
°ack
))

569 
	`mem˝y
(&
°ack
->
obj
[°ack->
t›
++ * sèck->
obj_size
], obj, sèck->
obj_‹igsize
);

570  
°ack
->
t›
;

571 
	}
}

573 *
	$fs_°ack_p›
(
fs_°ack_t
 *
°ack
)

575 i‡(
	`FS_STACK_IS_EMPTY
(
°ack
))

576  
NULL
;

578  (*)&
°ack
->
obj
[--°ack->
t›
 * sèck->
obj_size
];

579 
	}
}

	@packages/contrib.c

1 
	#SUPRESS_COMPILER_INLINES


	)

2 #ifde‡
LATTICE


3 
	~"/Õc_ö˛.h
"

4 
	~"/comm.h
"

5 
	~"/fûe_ö˛.h
"

6 
	~"/fûe.h
"

7 
	~"/backíd.h
"

8 
	~"/sw≠.h
"

9 
	~"/compûî.h
"

10 
	~"/maö.h
"

11 
	~"/e›î©‹s.h
"

13 
	~"ö˛ude/Õc_ö˛.h
"

14 
	~"ö˛ude/comm.h
"

15 
	~"ö˛ude/fûe_ö˛.h
"

16 
	~"ö˛ude/fûe.h
"

17 
	~"ö˛ude/backíd.h
"

18 
	~"ö˛ude/sw≠.h
"

19 
	~"ö˛ude/compûî.h
"

20 
	~"ö˛ude/maö.h
"

21 
	~"ö˛ude/e›î©‹s.h
"

25 #ifde‡
WIN32


26 
	#°rˇ£cmp
(
X
, 
Y
Ë
	`°ricmp
(X, Y)

	)

30 #ifde‡
F_STORE_VARIABLE


31 
	$f_°‹e_v¨übÀ
()

33 
idx
;

34 
svÆue_t
 *
sv
;

35 
ty≥
;

37 
idx
 = 
	`föd_globÆ_v¨übÀ
(
cuºít_obje˘
->
¥og
, (
•
 - 1)->
u
.
°rög
, &
ty≥
);

38 i‡(
idx
 == - 1)

40 
	`îr‹
("Nÿv¨übÀÇamed '%s'!\n", (
•
 - 1)->
u
.
°rög
);

42 
sv
 = &
cuºít_obje˘
->
v¨übÀs
[
idx
];

43 
	`‰ì_svÆue
(
sv
, "f_store_variable");

44 *
sv
 = *
•
--;

45 
	`‰ì_°rög_svÆue
(
•
--);

46 
	}
}

49 #ifde‡
F_FETCH_VARIABLE


50 
	$f_„tch_v¨übÀ
()

52 
idx
;

53 
svÆue_t
 *
sv
;

54 
ty≥
;

56 
idx
 = 
	`föd_globÆ_v¨übÀ
(
cuºít_obje˘
->
¥og
, 
•
->
u
.
°rög
, &
ty≥
);

57 i‡(
idx
 == - 1)

59 
	`îr‹
("Nÿv¨übÀÇamed '%s'!\n", 
•
->
u
.
°rög
);

61 
sv
 = &
cuºít_obje˘
->
v¨übÀs
[
idx
];

62 
	`‰ì_°rög_svÆue
(
•
--);

63 
	`push_svÆue
(
sv
);

64 
	}
}

71 #ifde‡
F_COPY


72 
	gdïth
;

74 
dìp_c›y_svÆue
(
svÆue_t
 *, svalue_t*);

76 
¨øy_t
 *
	$dìp_c›y_¨øy
(
¨øy_t
 *
¨g
)

78 
¨øy_t
 *
vec
;

79 
i
;

81 
vec
 = 
	`Æloˇã_em±y_¨øy
(
¨g
->
size
);

82 
i
 = 0; i < 
¨g
->
size
; i++)

84 
	`dìp_c›y_svÆue
(&
¨g
->
ôem
[
i
], &
vec
->item[i]);

86  
vec
;

87 
	}
}

89 
	$doC›y
(
m≠pög_t
 *
m≠
, 
m≠pög_node_t
 *
ñt
, m≠pög_à*
de°
)

91 
svÆue_t
 *
•
;

93 
•
 = 
	`föd_f‹_ö£π
(
de°
, &
ñt
->
vÆues
[0], 1);

94 i‡(!
•
)

96 
	`m≠pög_too_œrge
();

100 ()
m≠
;

101 
	`dìp_c›y_svÆue
(&
ñt
->
vÆues
[1], 
•
);

103 
	}
}

105 
m≠pög_t
 *
	$dìp_c›y_m≠pög
(
m≠pög_t
 *
¨g
)

107 
m≠pög_t
 *
m≠
;

109 
m≠
 = 
	`Æloˇã_m≠pög
(0);

110 
	`m≠Tøvî£
(
¨g
, ((*Ë(Ë)
doC›y
, 
m≠
);

111  
m≠
;

112 
	}
}

114 
	$dìp_c›y_svÆue
(
svÆue_t
 *
‰om
, svÆue_à*
to
)

116 
‰om
->
ty≥
)

118 
T_ARRAY
:

119 
T_CLASS
:

120 
dïth
++;

121 i‡(
dïth
 > 
MAX_SAVE_SVALUE_DEPTH
)

123 
dïth
 = 0;

124 
	`îr‹
("M≠pögs,áºay†™d/‹ cœs£†√°edÅoÿdì∞(%dËf‹ c›y()\n", 
MAX_SAVE_SVALUE_DEPTH
);

126 *
to
 = *
‰om
;

127 
to
->
u
.
¨r
 = 
	`dìp_c›y_¨øy
(
‰om
->u.arr);

128 
dïth
--;

130 
T_MAPPING
:

131 
dïth
++;

132 i‡(
dïth
 > 
MAX_SAVE_SVALUE_DEPTH
)

134 
dïth
 = 0;

135 
	`îr‹
("M≠pögs,áºay†™d/‹ cœs£†√°edÅoÿdì∞(%dËf‹ c›y()\n", 
MAX_SAVE_SVALUE_DEPTH
);

137 *
to
 = *
‰om
;

138 
to
->
u
.
m≠
 = 
	`dìp_c›y_m≠pög
(
‰om
->u.map);

139 
dïth
--;

142 
	`assign_svÆue_no_‰ì
(
to
, 
‰om
);

144 
	}
}

146 
	$f_c›y
()

148 
svÆue_t
 
ªt
;

150 
dïth
 = 0;

151 
	`dìp_c›y_svÆue
(
•
, &
ªt
);

152 
	`‰ì_svÆue
(
•
, "f_copy");

153 *
•
 = 
ªt
;

154 
	}
}

159 #ifde‡
F_FUNCTIONS


160 
	$f_fun˘i⁄s
()

162 
i
, 
j
, 
num
, 
ödex
;

163 
¨øy_t
 *
vec
, *
subvec
;

164 
ru¡ime_fun˘i⁄_u
 *
func_íåy
;

165 
compûî_fun˘i⁄_t
 *
fu≈
;

166 
¥ogøm_t
 *
¥og
;

167 
Êag
 = (
•
--)->
u
.
numbî
;

168 *
ty≥s
;

169 
buf
[256];

170 *
íd
 = 
	`EndOf
(
buf
);

171 
¥ogøm_t
 *
¥ogp
;

173 #ifde‡
_USE_SWAP_H_


174 i‡(
•
->
u
.
ob
->
Êags
 &
O_SWAPPED
)

176 
	`lﬂd_ob_‰om_sw≠
(
•
->
u
.
ob
);

180 
¥ogp
 = 
•
->
u
.
ob
->
¥og
;

181 
num
 = 
¥ogp
->
num_fun˘i⁄s_tŸÆ
;

182 i‡(
num
 && 
¥ogp
->
fun˘i⁄_èbÀ
[¥ogp->
num_fun˘i⁄s_deföed
 - 1].
«me
[0] =
APPLY___INIT_SPECIAL_CHAR
)

184 
num
--;

187 
vec
 = 
	`Æloˇã_em±y_¨øy
(
num
);

188 
i
 = 
num
;

190 
i
--)

192 
¥og
 = 
•
->
u
.
ob
->prog;

193 
ödex
 = 
i
;

194 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
¥og
, 
ödex
);

197 
¥og
->
fun˘i⁄_Êags
[
ödex
] &
NAME_INHERITED
)

199 
¥og
 =Örog->
öhîô
[
func_íåy
->
öh
.
off£t
].prog;

200 
ödex
 = 
func_íåy
->
öh
.
fun˘i⁄_ödex_off£t
;

201 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
¥og
, 
ödex
);

204 
fu≈
 = 
¥og
->
fun˘i⁄_èbÀ
 + 
func_íåy
->
def
.
f_ödex
;

206 i‡(
Êag
)

208 i‡(
¥og
->
ty≥_°¨t
 &&Örog->ty≥_°¨t[
ödex
] !
INDEX_START_NONE
)

210 
ty≥s
 = &
¥og
->
¨gumít_ty≥s
[¥og->
ty≥_°¨t
[
ödex
]];

214 
ty≥s
 = 0;

217 
vec
->
ôem
[
i
].
ty≥
 = 
T_ARRAY
;

218 
subvec
 = 
vec
->
ôem
[
i
].
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(3+
func_íåy
->
def
.
num_¨g
);

220 
subvec
->
ôem
[0].
ty≥
 = 
T_STRING
;

221 
subvec
->
ôem
[0].
subty≥
 = 
STRING_SHARED
;

222 
subvec
->
ôem
[0].
u
.
°rög
 = 
	`ªf_°rög
(
fu≈
->
«me
);

224 
subvec
->
ôem
[1].
ty≥
 = 
T_NUMBER
;

225 
subvec
->
ôem
[1].
subty≥
 = 0;

226 
subvec
->
ôem
[1].
u
.
numbî
 = 
func_íåy
->
def
.
num_¨g
;

228 
	`gë_ty≥_«me
(
buf
, 
íd
, 
fu≈
->
ty≥
);

229 
subvec
->
ôem
[2].
ty≥
 = 
T_STRING
;

230 
subvec
->
ôem
[2].
subty≥
 = 
STRING_SHARED
;

231 
subvec
->
ôem
[2].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
buf
);

233 
j
 = 0; j < 
func_íåy
->
def
.
num_¨g
; j++)

235 i‡(
ty≥s
)

237 
	`gë_ty≥_«me
(
buf
, 
íd
, 
ty≥s
[
j
]);

238 
subvec
->
ôem
[3+
j
].
ty≥
 = 
T_STRING
;

239 
subvec
->
ôem
[3+
j
].
subty≥
 = 
STRING_SHARED
;

240 
subvec
->
ôem
[3+
j
].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
buf
);

244 
subvec
->
ôem
[3+
j
].
ty≥
 = 
T_NUMBER
;

245 
subvec
->
ôem
[3+
j
].
u
.
numbî
 = 0;

251 
vec
->
ôem
[
i
].
ty≥
 = 
T_STRING
;

252 
vec
->
ôem
[
i
].
subty≥
 = 
STRING_SHARED
;

253 
vec
->
ôem
[
i
].
u
.
°rög
 = 
	`ªf_°rög
(
fu≈
->
«me
);

257 
	`p›_°ack
();

258 
	`push_ª„d_¨øy
(
vec
);

259 
	}
}

263 #ifde‡
F_VARIABLES


264 
	$fv_ªcur£
(
¨øy_t
 *
¨r
, *
idx
, 
¥ogøm_t
 *
¥og
, 
ty≥
, 
Êag
)

266 
i
;

267 
¨øy_t
 *
sub¨r
;

268 
buf
[256];

269 *
íd
 = 
	`EndOf
(
buf
);

271 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++)

273 
	`fv_ªcur£
(
¨r
, 
idx
, 
¥og
->
öhîô
[
i
].¥og, 
ty≥
 |Örog->öhîô[i].
ty≥_mod
, 
Êag
);

275 
i
 = 0; i < 
¥og
->
num_v¨übÀs_deföed
; i++)

277 i‡(
Êag
)

279 
¨r
->
ôem
[ *
idx
 + 
i
].
ty≥
 = 
T_ARRAY
;

280 
sub¨r
 = 
¨r
->
ôem
[ *
idx
 + 
i
].
u
.¨∏
	`Æloˇã_em±y_¨øy
(2);

281 
sub¨r
->
ôem
[0].
ty≥
 = 
T_STRING
;

282 
sub¨r
->
ôem
[0].
subty≥
 = 
STRING_SHARED
;

283 
sub¨r
->
ôem
[0].
u
.
°rög
 = 
	`ªf_°rög
(
¥og
->
v¨übÀ_èbÀ
[
i
]);

284 
	`gë_ty≥_«me
(
buf
, 
íd
, 
¥og
->
v¨übÀ_ty≥s
[
i
]);

285 
sub¨r
->
ôem
[1].
ty≥
 = 
T_STRING
;

286 
sub¨r
->
ôem
[1].
subty≥
 = 
STRING_SHARED
;

287 
sub¨r
->
ôem
[1].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
buf
);

291 
¨r
->
ôem
[ *
idx
 + 
i
].
ty≥
 = 
T_STRING
;

292 
¨r
->
ôem
[ *
idx
 + 
i
].
subty≥
 = 
STRING_SHARED
;

293 
¨r
->
ôem
[ *
idx
 + 
i
].
u
.
°rög
 = 
	`ªf_°rög
(
¥og
->
v¨übÀ_èbÀ
[i]);

296 *
idx
 +
¥og
->
num_v¨übÀs_deföed
;

297 
	}
}

299 
	$f_v¨übÀs
()

301 
idx
 = 0;

302 
¨øy_t
 *
¨r
;

303 
Êag
 = (
•
--)->
u
.
numbî
;

304 
¥ogøm_t
 *
¥og
 = 
•
->
u
.
ob
->prog;

306 i‡(
•
->
u
.
ob
->
Êags
 &
O_SWAPPED
)

308 
	`lﬂd_ob_‰om_sw≠
(
•
->
u
.
ob
);

311 
¨r
 = 
	`Æloˇã_em±y_¨øy
(
¥og
->
num_v¨übÀs_tŸÆ
);

312 
	`fv_ªcur£
(
¨r
, &
idx
, 
¥og
, 0, 
Êag
);

314 
	`p›_°ack
();

315 
	`push_ª„d_¨øy
(
¨r
);

316 
	}
}

319 #ifde‡
F_FILE_LENGTH


324 
	$fûe_Àngth
(*
fûe
)

326 
°©
 
°
;

327 
FILE
 *
f
;

328 
ªt
 = 0;

329 
num
;

330 
buf
[2049];

331 *
p
, *
√wp
;

333 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "file_size", 0);

335 i‡(!
fûe
)

339 i‡(
	`°©
(
fûe
, &
°
) == - 1)

343 i‡(
°
.
°_mode
 &
S_IFDIR
)

347 i‡(!(
f
 = 
	`f›í
(
fûe
, "r") ) )

354 
num
 = 
	`‰ód
(
buf
, 1, 2048, 
f
);

355 
p
 = 
buf
 - 1;

356  (
√wp
 = 
	`memchr
(
p
 + 1, '\n', 
num
) ) )

358 
num
 -(
√wp
 - 
p
);

359 
p
 = 
√wp
;

360 
ªt
++;

364 !
	`„of
(
f
) )

367 
	`f˛o£
(
f
);

368  
ªt
;

369 
	}
}

371 
	$f_fûe_Àngth
()

373 
l
;

375 
l
 = 
	`fûe_Àngth
(
•
->
u
.
°rög
);

376 
	`p›_°ack
();

377 
	`push_numbî
(
l
);

378 
	}
}

381 #ifde‡
F_UPPER_CASE


382 
	$f_uµî_ˇ£
()

384 *
°r
;

386 
°r
 = 
•
->
u
.
°rög
;

388 ; *
°r
; str++)

390 i‡(
	`i¶owî
(*
°r
) )

392 
l
 = 
°r
 - 
•
->
u
.
°rög
;

393 
	`u∆ök_°rög_svÆue
(
•
);

394 
°r
 = 
•
->
u
.
°rög
 + 
l
;

395 *
°r
 -= 'a' - 'A';

396 
°r
++; *str; str++)

398 i‡(
	`i¶owî
(*
°r
) )

400 *
°r
 -= 'a' - 'A';

406 
	}
}

409 #ifde‡
F_REPLACEABLE


410 
	$f_ª∂a˚abÀ
()

412 
¥ogøm_t
 *
¥og
;

413 
i
, 
j
, 
num
, 
numign‹e
;

414 **
ign‹e
;

416 i‡(
°_num_¨g
 == 2)

418 
numign‹e
 = 
•
->
u
.
¨r
->
size
;

419 i‡(
numign‹e
)

421 
ign‹e
 = 
	`CALLOCATE
(
numign‹e
, *, 
TAG_TEMPORARY
, "replaceable");

425 
ign‹e
 = 0;

427 
i
 = 0; i < 
numign‹e
; i++)

429 i‡(
•
->
u
.
¨r
->
ôem
[
i
].
ty≥
 =
T_STRING
)

431 
ign‹e
[
i
] = 
	`föd°rög
(
•
->
u
.
¨r
->
ôem
[i].u.
°rög
);

435 
ign‹e
[
i
] = 0;

438 
¥og
 = (
•
 - 1)->
u
.
ob
->prog;

442 
numign‹e
 = 1;

443 
ign‹e
 = 
	`CALLOCATE
(1, *, 
TAG_TEMPORARY
, "replaceable");

444 
ign‹e
[0] = 
	`föd°rög
(
APPLY_CREATE
);

445 
¥og
 = 
•
->
u
.
ob
->prog;

448 
num
 = 
¥og
->
num_fun˘i⁄s_tŸÆ
 - 1;

450 
i
 = 0; i < 
num
; i++)

452 i‡(
¥og
->
fun˘i⁄_Êags
[
i
] &(
NAME_INHERITED
 | 
NAME_NO_CODE
) )

456 
j
 = 0; j < 
numign‹e
; j++)

457 i‡(
ign‹e
[
j
] =
¥og
->
fun˘i⁄_èbÀ
[
	`FIND_FUNC_ENTRY
’rog, 
i
)->
def
.
f_ödex
].
«me
)

461 i‡(
j
 =
numign‹e
)

466 i‡(
°_num_¨g
 == 2)

468 
	`‰ì_¨øy
–(
•
--)->
u
.
¨r
);

470 
	`FREE
(
ign‹e
);

471 
	`‰ì_svÆue
(
•
, "f_replaceable");

472 
	`put_numbî
(
i
 =
num
);

473 
	}
}

476 #ifde‡
F_PROGRAM_INFO


477 
	$f_¥ogøm_öfo
()

479 
func_size
 = 0;

480 
°rög_size
 = 0;

481 
v¨_size
 = 0;

482 
öhîô_size
 = 0;

483 
¥og_size
 = 0;

484 
hdr_size
 = 0;

485 
˛ass_size
 = 0;

486 
ty≥_size
 = 0;

487 
tŸÆ_size
 = 0;

488 
obje˘_t
 *
ob
;

489 
¥ogøm_t
 *
¥og
;

490 
outbuf„r_t
 
out
;

491 
i
, 
n
;

493 i‡(
°_num_¨g
 == 1)

495 
ob
 = 
•
->
u
.ob;

496 
¥og
 = 
ob
->prog;

497 i‡(!(
ob
->
Êags
 &(
O_CLONE
 | 
O_SWAPPED
) ) )

499 
hdr_size
 +(
¥ogøm_t
);

500 
¥og_size
 +
¥og
->
¥ogøm_size
;

501 
func_size
 +2 * 
¥og
->
num_fun˘i⁄s_tŸÆ
;

502 #ifde‡
COMPRESS_FUNCTION_TABLES


504 
func_size
 +(
com¥es£d_off£t_èbÀ_t
) - 1;

506 
func_size
 +(
¥og
->
fun˘i⁄_com¥es£d
->
fú°_deföed
 -Örog->fun˘i⁄_com¥es£d->
num_com¥es£d
);

508 
func_size
 +(
ru¡ime_fun˘i⁄_u
)*(
¥og
->
num_fun˘i⁄s_tŸÆ
 -Örog->
fun˘i⁄_com¥es£d
->
num_dñëed
);

511 
func_size
 +
¥og
->
num_fun˘i⁄s_tŸÆ
 *(
ru¡ime_fun˘i⁄_u
);

514 
func_size
 +
¥og
->
num_fun˘i⁄s_deföed
 *(
compûî_fun˘i⁄_t
);

515 
°rög_size
 +
¥og
->
num_°rögs
 *(*);

516 
v¨_size
 +
¥og
->
num_v¨übÀs_deföed
 *((*) + () );

517 
öhîô_size
 +
¥og
->
num_öhîôed
 *(
öhîô_t
);

518 i‡(
¥og
->
num_˛as£s
)

520 
˛ass_size
 +
¥og
->
num_˛as£s
 *(
˛ass_def_t
Ë+ (¥og->
˛as£s
[¥og->num_˛as£†- 1].
ödex
 +Örog->˛as£s[¥og->num_˛as£†- 1].
size
Ë*(
˛ass_membî_íåy_t
);

522 
ty≥_size
 +
¥og
->
num_fun˘i⁄s_deföed
 *();

523 
n
 = 0;

524 
i
 = 0; i < 
¥og
->
num_fun˘i⁄s_deföed
; i++)

526 
°¨t
;

527 *
ts
 = 
¥og
->
ty≥_°¨t
;

528 
ri
;

530 i‡(!
ts
)

534 
°¨t
 = 
ts
[
i
];

535 i‡(
°¨t
 =
INDEX_START_NONE
)

539 
ri
 = 
¥og
->
fun˘i⁄_èbÀ
[
i
].
ru¡ime_ödex
;

540 
°¨t
 +
	`FIND_FUNC_ENTRY
(
¥og
, 
ri
)->
def
.
num_¨g
;

541 i‡(
°¨t
 > 
n
)

543 
n
 = 
°¨t
;

546 
ty≥_size
 +
n
 * ();

547 
tŸÆ_size
 +
¥og
->total_size;

549 
	`p›_°ack
();

553 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
)

555 i‡(
ob
->
Êags
 &(
O_CLONE
 | 
O_SWAPPED
) )

559 
¥og
 = 
ob
->prog;

560 
hdr_size
 +(
¥ogøm_t
);

561 
¥og_size
 +
¥og
->
¥ogøm_size
;

562 
func_size
 +
¥og
->
num_fun˘i⁄s_tŸÆ
;

563 #ifde‡
COMPRESS_FUNCTION_TABLES


565 
func_size
 +(
com¥es£d_off£t_èbÀ_t
) - 1;

567 
func_size
 +(
¥og
->
fun˘i⁄_com¥es£d
->
fú°_deföed
 -Örog->fun˘i⁄_com¥es£d->
num_com¥es£d
);

569 
func_size
 +(
ru¡ime_fun˘i⁄_u
)*(
¥og
->
num_fun˘i⁄s_tŸÆ
 -Örog->
fun˘i⁄_com¥es£d
->
num_dñëed
);

572 
func_size
 +
¥og
->
num_fun˘i⁄s_tŸÆ
 *(
ru¡ime_fun˘i⁄_u
);

575 
func_size
 +
¥og
->
num_fun˘i⁄s_deföed
 *(
compûî_fun˘i⁄_t
);

576 
°rög_size
 +
¥og
->
num_°rögs
 *(*);

577 
v¨_size
 +
¥og
->
num_v¨übÀs_deföed
 *((*) + () );

578 
öhîô_size
 +
¥og
->
num_öhîôed
 *(
öhîô_t
);

579 i‡(
¥og
->
num_˛as£s
)

581 
˛ass_size
 +
¥og
->
num_˛as£s
 *(
˛ass_def_t
Ë+ (¥og->
˛as£s
[¥og->num_˛as£†- 1].
ödex
 +Örog->˛as£s[¥og->num_˛as£†- 1].
size
Ë*(
˛ass_membî_íåy_t
);

583 
ty≥_size
 +
¥og
->
num_fun˘i⁄s_deföed
 *();

584 
n
 = 0;

585 
i
 = 0; i < 
¥og
->
num_fun˘i⁄s_deföed
; i++)

587 
°¨t
;

588 
ri
;

590 *
ts
 = 
¥og
->
ty≥_°¨t
;

591 i‡(!
ts
)

595 
°¨t
 = 
ts
[
i
];

596 i‡(
°¨t
 =
INDEX_START_NONE
)

600 
ri
 = 
¥og
->
fun˘i⁄_èbÀ
[
i
].
ru¡ime_ödex
;

601 
°¨t
 +
	`FIND_FUNC_ENTRY
(
¥og
, 
ri
)->
def
.
num_¨g
;

602 i‡(
°¨t
 > 
n
)

604 
n
 = 
°¨t
;

607 
ty≥_size
 +
n
 * ();

608 
tŸÆ_size
 +
¥og
->total_size;

612 
	`outbuf_zîo
(&
out
);

614 
	`outbuf_addv
(&
out
, "\nhódî size: %i\n", 
hdr_size
);

615 
	`outbuf_addv
(&
out
, "codêsize: %i\n", 
¥og_size
);

616 
	`outbuf_addv
(&
out
, "fun˘i⁄ size: %i\n", 
func_size
);

617 
	`outbuf_addv
(&
out
, "°rög size: %i\n", 
°rög_size
);

618 
	`outbuf_addv
(&
out
, "v¨ size: %i\n", 
v¨_size
);

619 
	`outbuf_addv
(&
out
, "˛as†size: %i\n", 
˛ass_size
);

620 
	`outbuf_addv
(&
out
, "öhîô size: %i\n", 
öhîô_size
);

621 
	`outbuf_addv
(&
out
, "ßvedÅy≥ size: %i\n\n", 
ty≥_size
);

623 
	`outbuf_addv
(&
out
, "tŸÆ size: %i\n", 
tŸÆ_size
);

625 
	`outbuf_push
(&
out
);

626 
	}
}

629 #ifde‡
F_DEBUG_MESSAGE


630 
	$f_debug_mesßge
()

632 *
fûe
;

633 
löe
;

634 *
s
 = 
NULL
;

635 
num_¨g
 = 
°_num_¨g
;

636 
	`gë_löe_numbî_öfo
(&
fûe
, &
löe
);

638 *
	`°rög_¥öt_f‹m©ãd
(*
f‹m©_°r
, 
¨gc
, 
svÆue_t
 *
¨gv
);

640 i‡(
num_¨g
 > 1) {

641 
s
 = 
	`°rög_¥öt_f‹m©ãd
–(
•
 - 
num_¨g
 + 1)->
u
.
°rög
,Çum_arg - 1, sp -Çum_arg + 2);

642 
	`debug_mesßge
("%†%d : %s\n", 
fûe
, 
löe
, 
s
);

643 
	`FREE_MSTR
(
s
);

645 
	`debug_mesßge
("%†%d : %s\n", 
fûe
, 
löe
, (
•
 - 
num_¨g
 + 1)->
u
.
°rög
);

647 
	`p›_n_ñems
(
num_¨g
);

649 
	}
}

652 #ifde‡
F_FUNCTION_OWNER


653 
	$f_fun˘i⁄_ow√r
()

655 
obje˘_t
 *
ow√r
 = 
•
->
u
.
Â
->
hdr
.owner;

657 
	`‰ì_fu≈
(
•
->
u
.
Â
);

658 
	`put_uƒe„d_obje˘
(
ow√r
, "f_function_owner");

659 
	}
}

662 #ifde‡
F_REPEAT_STRING


663 
	$f_ª≥©_°rög
()

665 *
°r
;

666 
ª≥©
, 
Àn
;

667 *
ªt
, *
p
;

668 
i
;

670 
ª≥©
 = (
•
--)->
u
.
numbî
;

671 i‡(
ª≥©
 <= 0)

673 
	`‰ì_°rög_svÆue
(
•
);

674 
•
->
ty≥
 = 
T_STRING
;

675 
•
->
subty≥
 = 
STRING_CONSTANT
;

676 
•
->
u
.
°rög
 = "";

678 i‡(
ª≥©
 != 1)

680 
°r
 = 
•
->
u
.
°rög
;

681 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

682 
p
 = 
ªt
 = 
	`√w_°rög
(
Àn
 *
ª≥©
, "f_repeat_string");

683 
i
 = 0; i < 
ª≥©
; i++)

685 
	`mem˝y
(
p
, 
°r
, 
Àn
);

686 
p
 +
Àn
;

688 *
p
 = 0;

689 
	`‰ì_°rög_svÆue
(
•
);

690 
•
->
ty≥
 = 
T_STRING
;

691 
•
->
subty≥
 = 
STRING_MALLOC
;

692 
•
->
u
.
°rög
 = 
ªt
;

694 
	}
}

	@packages/contrib_spec.h

1 
	~"../gømm¨/•ec.h
"

3 
mixed
 
c›y
(mixed);

4 
°rög
 *
fun˘i⁄s
(
obje˘
, : 0);

5 
°rög
 *
v¨übÀs
(
obje˘
, : 0);

6 
fûe_Àngth
(
°rög
);

7 
°rög
 
uµî_ˇ£
(string);

8 
ª∂a˚abÀ
(
obje˘
, | 
°rög
*);

9 
°rög
 
¥ogøm_öfo
(| 
obje˘
);

10 
°‹e_v¨übÀ
(
°rög
, 
mixed
);

11 
mixed
 
„tch_v¨übÀ
(
°rög
);

12 
debug_mesßge
(
°rög
, ...);

13 
obje˘
 
fun˘i⁄_ow√r
(
fun˘i⁄
);

14 
°rög
 
ª≥©_°rög
(string, );

	@packages/db/db_format.c

2 
	~"fs_db_f‹m©.h
"

3 
	~"Õc_¨gs_›.h
"

4 
	~"fs_cksum.h
"

5 
	~"fs_log.h
"

6 
	~"Õc_ö˛.h
"

8 
	#DB_FORMAT_VERSION
 1

	)

9 
	#META_BEGIN
 "#mëa="

	)

10 
	#META_END
 "#mëa_íd\n"

	)

11 
	#META_FORMAT
 
META_BEGIN
"vîsi⁄:%u;sum:%u;\n"
META_END


	)

12 
	#MAX_META_LEN
 1024

	)

19 
ölöe
 
f‹m©
(
svÆue_t
 *
vÆue
, 
evbuf„r
 *
outbuf
);

21 
ölöe
 
	$f‹m©_m≠pög
(
m≠pög_t
 *
m≠
, 
evbuf„r
 *
outbuf
)

23 
i
;

24 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

25 
∑ss_fú°
 = 0;

27 
	`evbuf„r_add_¥ötf
(
outbuf
, "{");

28 
i
 = 0, 
èbÀ
 = 
m≠
->èbÀ; i <m≠->
èbÀ_size
; i++) {

29 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

30 i‡(
∑ss_fú°
) {

31 
	`evbuf„r_add_¥ötf
(
outbuf
, ",");

33 
∑ss_fú°
 = 1;

35 
	`f‹m©
(&
ñt
->
vÆues
[0], 
outbuf
);

36 
	`evbuf„r_add_¥ötf
(
outbuf
, ":");

37 
	`f‹m©
(&
ñt
->
vÆues
[1], 
outbuf
);

40 
	`evbuf„r_add_¥ötf
(
outbuf
, "}");

42 
	}
}

44 
ölöe
 
	$f‹m©_¨øy
(
¨øy_t
 *
¨øy
, 
evbuf„r
 *
outbuf
)

46 
i
;

48 
	`evbuf„r_add_¥ötf
(
outbuf
, "[");

49 
i
 = 0; i < 
¨øy
->
size
; ) {

50 
	`f‹m©
(&
¨øy
->
ôem
[
i
++], 
outbuf
);

51 i‡(
i
 < 
¨øy
->
size
) {

52 
	`evbuf„r_add_¥ötf
(
outbuf
, ",");

55 
	`evbuf„r_add_¥ötf
(
outbuf
, "]");

57 
	}
}

76 
ölöe
 
	$f‹m©_°rög
(*
°r
, 
evbuf„r
 *
outbuf
)

78 
c
;

79 
	`evbuf„r_add_¥ötf
(
outbuf
, "\"");

80 ; (
c
 = *
°r
++) != '\0'; ) {

81 
c
) {

82 '"': 
	`evbuf„r_add_¥ötf
(
outbuf
, "\\\""); ;

83 '\\': 
	`evbuf„r_add_¥ötf
(
outbuf
, "\\\\"); ;

84 '\a': 
	`evbuf„r_add_¥ötf
(
outbuf
, "\\a"); ;

85 '\b': 
	`evbuf„r_add_¥ötf
(
outbuf
, "\\b"); ;

86 '\f': 
	`evbuf„r_add_¥ötf
(
outbuf
, "\\f"); ;

87 '\n': 
	`evbuf„r_add_¥ötf
(
outbuf
, "\\n"); ;

88 '\r': 
	`evbuf„r_add_¥ötf
(
outbuf
, "\\r"); ;

89 '\t': 
	`evbuf„r_add_¥ötf
(
outbuf
, "\\t"); ;

90 '\v': 
	`evbuf„r_add_¥ötf
(
outbuf
, "\\v"); ;

98 
	`evbuf„r_add_¥ötf
(
outbuf
, "%c", 
c
);

101 
	`evbuf„r_add_¥ötf
(
outbuf
, "\"");

103 
	}
}

105 
ölöe
 
	$f‹m©_numbî
(
n
, 
evbuf„r
 *
outbuf
)

107 
	`evbuf„r_add_¥ötf
(
outbuf
, "%d", 
n
);

109 
	}
}

111 
ölöe
 
	$f‹m©_ªÆ
(
f
, 
evbuf„r
 *
outbuf
)

113 
	`evbuf„r_add_¥ötf
(
outbuf
, "%f", 
f
);

115 
	}
}

117 
ölöe
 
	$f‹m©
(
svÆue_t
 *
vÆue
, 
evbuf„r
 *
outbuf
)

119 
ty≥
 = 
vÆue
->type;

121 
ty≥
) {

122 
T_MAPPING
:

123  
	`f‹m©_m≠pög
(
vÆue
->
u
.
m≠
, 
outbuf
);

124 
T_ARRAY
:

125  
	`f‹m©_¨øy
(
vÆue
->
u
.
¨r
, 
outbuf
);

126 
T_REAL
:

127  
	`f‹m©_ªÆ
(
vÆue
->
u
.
ªÆ
, 
outbuf
);

128 
T_NUMBER
:

129  
	`f‹m©_numbî
(
vÆue
->
u
.
numbî
, 
outbuf
);

130 
T_STRING
:

131  
	`f‹m©_°rög
(
vÆue
->
u
.
°rög
, 
outbuf
);

134 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹! db f‹m© unknowÅy≥:%s\n", 
	`ty≥_«me
(
ty≥
));

137 
	}
}

139 
ölöe
 
	$⁄ñöe_¥imôive_fú°_m≠
(*
key
, 
m≠pög_t
 *
m≠
, 
evbuf„r
 *
outbuf
)

141 
i
;

142 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

143 
svÆue_t
 *
k
, *
v
;

144 
evbuf„r
 *
comp
 = 
	`evbuf„r_√w
();

146 
	`f‹m©_°rög
(
key
, 
outbuf
);

147 
	`evbuf„r_add_¥ötf
(
outbuf
, ":{");

149 
i
 = 0, 
èbÀ
 = 
m≠
->èbÀ; i <m≠->
èbÀ_size
; i++) {

150 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

151 
evbuf„r
 *
buf
 = 
NULL
;

152 
k
 = &
ñt
->
vÆues
[0];

153 
v
 = &
ñt
->
vÆues
[1];

155 
v
->
ty≥
) {

156 
T_MAPPING
:

157 
T_ARRAY
:

158 
buf
 = 
comp
;

161 
buf
 = 
outbuf
;

164 
	`f‹m©
(
k
, 
buf
);

165 
	`evbuf„r_add_¥ötf
(
buf
, ":");

166 
	`f‹m©
(
v
, 
buf
);

167 
	`evbuf„r_add_¥ötf
(
buf
, ",");

171 
	`evbuf„r_add
(
outbuf
, 
	`EVBUFFER_DATA
(
comp
), 
	`EVBUFFER_LENGTH
(comp));

172 
	`evbuf„r_add_¥ötf
(
outbuf
, "},\n");

173 
	`evbuf„r_‰ì
(
comp
);

175 
	}
}

177 
ölöe
 
	$li°_m≠
(*
key
, 
m≠pög_t
 *
m≠
, 
evbuf„r
 *
outbuf
)

179 
i
;

180 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

181 
svÆue_t
 *
k
, *
v
;

183 
	`f‹m©_°rög
(
key
, 
outbuf
);

184 
	`evbuf„r_add_¥ötf
(
outbuf
, ":{\n");

186 
i
 = 0, 
èbÀ
 = 
m≠
->èbÀ; i <m≠->
èbÀ_size
; i++) {

187 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

188 
k
 = &
ñt
->
vÆues
[0];

189 
v
 = &
ñt
->
vÆues
[1];

190 
	`evbuf„r_add_¥ötf
(
outbuf
, "\t");

191 
	`f‹m©
(
k
, 
outbuf
);

192 
	`evbuf„r_add_¥ötf
(
outbuf
, ":");

193 
	`f‹m©
(
v
, 
outbuf
);

194 
	`evbuf„r_add_¥ötf
(
outbuf
, ",\n");

198 
	`evbuf„r_add_¥ötf
(
outbuf
, "},\n\n");

200 
	}
}

202 
ölöe
 
	$⁄ñöe_m≠
(*
key
, 
m≠pög_t
 *
m≠
, 
evbuf„r
 *
outbuf
)

204 
	`f‹m©_°rög
(
key
, 
outbuf
);

205 
	`evbuf„r_add_¥ötf
(
outbuf
, ":");

206 
ªt
 = 
	`f‹m©_m≠pög
(
m≠
, 
outbuf
);

207 
	`evbuf„r_add_¥ötf
(
outbuf
, ",\n\n");

208  
ªt
;

209 
	}
}

211 
ölöe
 
	$f‹m©_¥›
(*
key
, 
m≠pög_t
 *
¥›
, 
evbuf„r
 *
outbuf
)

213  
	`⁄ñöe_m≠
(
key
, 
¥›
, 
outbuf
);

214 
	}
}

216 
ölöe
 
	$f‹m©_ôem
(*
key
, 
m≠pög_t
 *
ôem
, 
evbuf„r
 *
outbuf
)

218  
	`li°_m≠
(
key
, 
ôem
, 
outbuf
);

219 
	}
}

221 
ölöe
 
	$f‹m©_missi⁄
(*
key
, 
m≠pög_t
 *
missi⁄
, 
evbuf„r
 *
outbuf
)

223  
	`li°_m≠
(
key
, 
missi⁄
, 
outbuf
);

224 
	}
}

226 
ölöe
 
	$f‹m©_summ⁄
(*
key
, 
m≠pög_t
 *
summ⁄
, 
evbuf„r
 *
outbuf
)

228  
	`li°_m≠
(
key
, 
summ⁄
, 
outbuf
);

229 
	}
}

231 
	$db_f‹m©_d©a_thr_ß„
(
m≠pög_t
 *
m≠
, 
evbuf„r
 *
outbuf
)

233 
i
, 
ªt
;

234 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

235 
svÆue_t
 *
k
, *
v
;

236 *
¥›
 = "prop";

237 *
ôem
 = "item";

238 *
summ⁄
 = "summon";

239 *
missi⁄
 = "mission";

240 *
≈c
 = "npc_data";

241 *
sh¨e_d©a
 = "share_data";

243 
	`evbuf„r_add_¥ötf
(
outbuf
, "data = {\n");

244 
i
 = 0, 
èbÀ
 = 
m≠
->èbÀ; i <m≠->
èbÀ_size
; i++) {

245 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

246 
k
 = &
ñt
->
vÆues
[0];

247 
v
 = &
ñt
->
vÆues
[1];

248 i‡(
k
->
ty≥
 !
T_STRING
) {

251 
	`log_îr‹_thr_ß„
(
MOD_DB
, "db formatÉrror!bad keyÅypeÉxpect:%s,given:%s",

252 
	`ty≥_«me
(
T_STRING
),Åy≥_«me(
k
->
ty≥
));

255 i‡(
v
->
ty≥
 !
T_MAPPING
) {

258 
	`log_îr‹_thr_ß„
(
MOD_DB
, "db formatÉrror!bad valueÅypeÉxpect:%s,given:%s",

259 
	`ty≥_«me
(
T_MAPPING
),Åy≥_«me(
v
->
ty≥
));

262 i‡(0 =
	`°rcmp
(
k
->
u
.
°rög
, 
¥›
)) {

263 
ªt
 = 
	`f‹m©_¥›
(
¥›
, 
v
->
u
.
m≠
, 
outbuf
);

264 } i‡(0 =
	`°rcmp
(
k
->
u
.
°rög
, 
ôem
)) {

265 
ªt
 = 
	`f‹m©_ôem
(
ôem
, 
v
->
u
.
m≠
, 
outbuf
);

266 } i‡(0 =
	`°rcmp
(
k
->
u
.
°rög
, 
summ⁄
)) {

267 
ªt
 = 
	`f‹m©_summ⁄
(
summ⁄
, 
v
->
u
.
m≠
, 
outbuf
);

268 } i‡(0 =
	`°rcmp
(
k
->
u
.
°rög
, 
missi⁄
)) {

269 
ªt
 = 
	`f‹m©_missi⁄
(
missi⁄
, 
v
->
u
.
m≠
, 
outbuf
);

270 } i‡(0 =
	`°rcmp
(
k
->
u
.
°rög
, 
≈c
)) {

271 
ªt
 = 
	`li°_m≠
(
≈c
, 
v
->
u
.
m≠
, 
outbuf
);

272 } i‡(0 =
	`°rcmp
(
k
->
u
.
°rög
, 
sh¨e_d©a
)) {

273 
ªt
 = 
	`li°_m≠
(
sh¨e_d©a
, 
v
->
u
.
m≠
, 
outbuf
);

275 
ªt
 = 
	`⁄ñöe_m≠
(
k
->
u
.
°rög
, 
v
->u.
m≠
, 
outbuf
);

278 i‡(
ªt
) Ñet;

281 
	`evbuf„r_add_¥ötf
(
outbuf
, "}\n");

284 
	}
}

286 
	$fs_db_f‹m©_thr_ß„
(
svÆue_t
 *
vÆue
, 
evbuf„r
 *
outbuf
)

288 
uöt32_t
 
sum
 = 0;

289 
evbuf„r
 *
buff
 = 
	`evbuf„r_√w
();

291 i‡(
vÆue
->
ty≥
 !
T_MAPPING
) {

293 
	`log_îr‹_thr_ß„
(
MOD_DB
, "db f‹m©Éº‹!badÅy≥Éx≥˘:%s,giví:%s",
	`ty≥_«me
(
T_MAPPING
),Åy≥_«me(
vÆue
->
ty≥
));

294 
îr‹
;

296 i‡(
	`db_f‹m©_d©a_thr_ß„
(
vÆue
->
u
.
m≠
, 
buff
)) {

297 
îr‹
;

301 
	`cksum
(
	`EVBUFFER_DATA
(
buff
), 
	`EVBUFFER_LENGTH
(buff), &
sum
);

302 
	`evbuf„r_add_¥ötf
(
outbuf
, "#-*- coding: utf-8 -*-\n");

303 
	`evbuf„r_add_¥ötf
(
outbuf
, 
META_FORMAT
, 
DB_FORMAT_VERSION
, 
sum
);

304 
	`evbuf„r_add
(
outbuf
, 
	`EVBUFFER_DATA
(
buff
), 
	`EVBUFFER_LENGTH
(buff));

305 
	`evbuf„r_‰ì
(
buff
);

308 
îr‹
:

309 
	`evbuf„r_‰ì
(
buff
);

311 
	}
}

313 
	$fs_db_f‹m©_
(
svÆue_t
 *
vÆue
, 
evbuf„r
 *
outbuf
)

315 
íd
 = '\0';

317 i‡(0 =
	`f‹m©
(
vÆue
, 
outbuf
)) {

318 
	`evbuf„r_add
(
outbuf
, &
íd
, (end));

321 
	}
}

324 
	#FS_T_ARRAY_BEG
 '['

	)

325 
	#FS_T_ARRAY_END
 ']'

	)

326 
	#FS_T_MAP_BEG
 '{'

	)

327 
	#FS_T_MAP_END
 '}'

	)

328 
	#FS_T_MAP_PAIR_SEP
 ':'

	)

329 
	#FS_T_ELEMENT_SEP
 ','

	)

330 
	#FS_T_ASSIGN
 '='

	)

333 
	#FS_T_ID
 'i'

	)

334 
	#FS_T_INT
 'n'

	)

335 
	#FS_T_FLOAT
 'f'

	)

336 
	#FS_T_STR
 's'

	)

338 
	#FS_T_EOF
 '\0'

	)

339 
	#FS_T_ERR
 'e'

	)

340 
	#FS_T_START
 'b'

	)

351 
	uvÆ_u
 {

352 *
	m°r
;

353 
	mn
;

354 
	mf
;

355 } 
	tvÆ_t
;

357 
	stokí_s
 {

358 
	mty≥
;

359 
vÆ_t
 
	mvÆ
;

360 } 
	ttokí_t
;

362 
	ssˇ¬î_s
 {

363 
	mvîsi⁄
;

364 
	mlöe
;

365 
	mlöe_pos
;

366 
	mlöe_w‹d
;

367 *
	möput
;

368 
	mpos
;

369 
tokí_t
 
	mtokí
;

370 
evbuf„r
 *
	mbuf
;

371 } 
	tsˇ¬î_t
;

375 
	$sˇ¬î_öô
(
sˇ¬î_t
 *
sˇn
, 
vîsi⁄
, *
öput
)

377 
sˇn
->
vîsi⁄
 = version;

378 
sˇn
->
öput
 = input;

379 
sˇn
->
löe
 = 1;

380 
sˇn
->
löe_pos
 = 1;

381 
sˇn
->
löe_w‹d
 = 1;

382 
sˇn
->
pos
 = 0;

383 
sˇn
->
tokí
.
ty≥
 = 
FS_T_START
;

384 
sˇn
->
tokí
.
vÆ
.
n
 = 0;

385 
sˇn
->
buf
 = 
	`evbuf„r_√w
();

386 
	}
}

388 
	$sˇ¬î_deöô
(
sˇ¬î_t
 *
sˇn
)

390 
	`evbuf„r_‰ì
(
sˇn
->
buf
);

391 
	}
}

393 
ölöe
 
	$sˇ¬î_buf_ª£t
(
sˇ¬î_t
 *
sˇn
)

395 
	`evbuf„r_døö
(
sˇn
->
buf
, 
	`EVBUFFER_LENGTH
(scan->buf));

396 
	}
}

398 
ölöe
 
	$sˇ¬î_buf_add
(
sˇ¬î_t
 *
sˇn
, 
c
)

400 
	`evbuf„r_add
(
sˇn
->
buf
, &
c
, (c));

401 
	}
}

403 
ölöe
 *
	$sˇ¬î_buf_d©a
(
sˇ¬î_t
 *
sˇn
)

405  (*)
	`EVBUFFER_DATA
(
sˇn
->
buf
);

406 
	}
}

461 
	$isodigô
(
c
)

463  '0' <
c
 && c < '8';

464 
	}
}

466 
	$sˇn_°r_v1
(
sˇ¬î_t
 *
sˇn
, 
dñ
)

468 
c
;

470 
	`sˇ¬î_buf_ª£t
(
sˇn
);

471 ; (
c
 = 
sˇn
->
öput
[sˇn->
pos
]) != '\0'; scan->pos++) {

472 i‡(
c
 =
dñ
) {

473 
	`sˇ¬î_buf_add
(
sˇn
, '\0');

474 
sˇn
->
pos
++;

475 
sˇn
->
tokí
.
ty≥
 = 
FS_T_STR
;

476 
sˇn
->
tokí
.
vÆ
.
°r
 = 
	`sˇ¬î_buf_d©a
(scan);

479 
c
) {

482 
îr‹
;

484 
n
 = 0, 
idx
 = 0;

485 
tmp
[4];

486 
c
 = 
sˇn
->
öput
[++sˇn->
pos
];

487 
c
) {

488 '\0': 
îr‹
;

492 'a': 
n
 = '\a'; ;

493 'b': 
n
 = '\b'; ;

494 'f': 
n
 = '\f'; ;

495 'n': 
n
 = '\n'; ;

496 'r': 
n
 = '\r'; ;

497 't': 
n
 = '\t'; ;

498 'v': 
n
 = '\v'; ;

500 
idx
 = 0, 
sˇn
->
pos
++; idx < 2; idx++, scan->pos++) {

501 
c
 = 
sˇn
->
öput
[sˇn->
pos
];

502 i‡(!
	`isxdigô
(
c
))

503 
îr‹
;

504 
tmp
[
idx
] = 
c
;

506 
sˇn
->
pos
--;

507 
tmp
[
idx
] = '\0';

508 
n
 = ()
	`°πﬁ
(
tmp
, 
NULL
, 16);

513 i‡(
	`isodigô
(
c
)) {

514 
idx
 = 0;

516 
tmp
[
idx
++] = 
c
;

517 
c
 = 
sˇn
->
öput
[++sˇn->
pos
];

518 } 
idx
 < 3 && 
	`isodigô
(
c
));

519 
sˇn
->
pos
--;

520 
tmp
[
idx
] = '\0';

521 
n
 = ()
	`°πﬁ
(
tmp
, 
NULL
, 8);

523 i‡(
n
 > 
UCHAR_MAX
) {

524 
îr‹
;

527 
n
 = 
c
;

532 
	`sˇ¬î_buf_add
(
sˇn
, 
n
);

537 
	`sˇ¬î_buf_add
(
sˇn
, 
c
);

540 
îr‹
:

541 
sˇn
->
tokí
.
ty≥
 = 
FS_T_ERR
;

542 
	}
}

544 
	$sˇn_°r
(
sˇ¬î_t
 *
sˇn
, 
dñ
)

553 
	`sˇn_°r_v1
(
sˇn
, 
dñ
);

554 
	}
}

556 
ölöe
 
	$is_id_begö
(
c
)

558  
	`ißÕha
(
c
) || c == '_';

559 
	}
}

561 
	$sˇn_idítifõr
(
sˇ¬î_t
 *
sˇn
)

563 
c
;

564 
	`sˇ¬î_buf_ª£t
(
sˇn
);

565 
is_°¨t
 = 1;

567 ; (
c
 = 
sˇn
->
öput
[sˇn->
pos
]Ë!'\0'; sˇn->pos++, sˇn->
löe_pos
++) {

569 i‡(
is_°¨t
) {

570 
is_°¨t
 = 0;

571 i‡(
	`is_id_begö
(
c
)) {

572 
	`sˇ¬î_buf_add
(
sˇn
, 
c
);

574 
sˇn
->
tokí
.
ty≥
 = 
FS_T_ERR
;

578 i‡(
c
 ='_' || 
	`iß um
(c)) {

579 
	`sˇ¬î_buf_add
(
sˇn
, 
c
);

581 
	`sˇ¬î_buf_add
(
sˇn
, '\0');

582 
sˇn
->
tokí
.
ty≥
 = 
FS_T_ID
;

583 
sˇn
->
tokí
.
vÆ
.
°r
 = 
	`sˇ¬î_buf_d©a
(scan);

588 
	}
}

591 
	$sˇn_numîic
(
sˇ¬î_t
 *
sˇn
)

593 
c
;

594 
is_Êﬂt
 = 0;

595 
tokí_t
 *
tokí
 = &
sˇn
->token;

596 *
°¨t
 = &
sˇn
->
öput
[sˇn->
pos
 - 1];

598 ; (
c
 = 
sˇn
->
öput
[sˇn->
pos
]Ë!'\0'; sˇn->pos++, sˇn->
löe_pos
++) {

599 
c
) {

612 i‡(!
is_Êﬂt
) {

613 
is_Êﬂt
 = 1;

618 *
íd
 = &
sˇn
->
öput
[sˇn->
pos
];

619 *
ex≥˘
;

620 i‡(
is_Êﬂt
) {

621 
tokí
->
ty≥
 = 
FS_T_FLOAT
;

622 
tokí
->
vÆ
.
f
 = 
	`°πof
(
°¨t
 , &
ex≥˘
);

625 
tokí
->
ty≥
 = 
FS_T_INT
;

626 
tokí
->
vÆ
.
n
 = ()
	`°πﬁ
(
°¨t
, &
ex≥˘
, 10);

629 i‡(
íd
 !
ex≥˘
) {

630 
	`Ârötf
(
°dîr
, "scanÇumericÉrror\n");

631 
tokí
->
ty≥
 = 
FS_T_ERR
;

638 
sˇn
->
tokí
.
ty≥
 = 
FS_T_ERR
;

639 
	}
}

642 
	$ót_commít
(
sˇ¬î_t
 *
sˇn
)

644 
c
;

645 ; (
c
 = 
sˇn
->
öput
[sˇn->
pos
]Ë!'\0'; sˇn->pos++, sˇn->
löe_pos
++) {

646 i‡(
c
 == '\n')

649 
	}
}

651 
tokí_t
 *
	$√xt_tokí
(
sˇ¬î_t
 *
sˇn
)

653 
c
;

654 
tokí_t
 *
tokí
 = &
sˇn
->token;

656 ; (
c
 = 
sˇn
->
öput
[sˇn->
pos
++]) != '\0'; ) {

658 
sˇn
->
löe_pos
++;

659 
c
) {

661 
	`ót_commít
(
sˇn
);

664 
sˇn
->
löe
++;

665 
sˇn
->
löe_pos
 = 1;

666 
sˇn
->
löe_w‹d
 = 1;

669 
sˇn
->
löe_w‹d
++;

672 
tokí
->
ty≥
 = 
FS_T_MAP_BEG
;

673  
tokí
;

675 
tokí
->
ty≥
 = 
FS_T_MAP_END
;

676  
tokí
;

679 
tokí
->
ty≥
 = 
FS_T_ARRAY_BEG
;

680  
tokí
;

682 
tokí
->
ty≥
 = 
FS_T_ARRAY_END
;

683  
tokí
;

685 
tokí
->
ty≥
 = 
FS_T_MAP_PAIR_SEP
;

686  
tokí
;

688 
tokí
->
ty≥
 = 
FS_T_ELEMENT_SEP
;

689  
tokí
;

691 
tokí
->
ty≥
 = 
FS_T_ASSIGN
;

692  
tokí
;

694 
	`sˇn_°r
(
sˇn
, '\'');

695  
tokí
;

697 
	`sˇn_°r
(
sˇn
, '"');

698  
tokí
;

710 
	`sˇn_numîic
(
sˇn
);

711  
tokí
;

713 i‡(
	`is_id_begö
(
c
)) {

714 
sˇn
->
pos
--;

715 
	`sˇn_idítifõr
(
sˇn
);

716  
tokí
;

718 
tokí
->
ty≥
 = 
FS_T_ERR
;

719  
tokí
;

724 
tokí
->
ty≥
 = 
FS_T_EOF
;

725  
tokí
;

726 
	}
}

745 
ölöe
 
	$is_¥imôive
(
tokí_t
 *
tokí
)

747  
tokí
->
ty≥
 =
FS_T_INT
 ||Åokí->ty≥ =
FS_T_STR
 ||Åokí->ty≥ =
FS_T_FLOAT
;

748 
	}
}

750 
ölöe
 
	$is_ñemít
(
tokí_t
 *
tokí
)

752 i‡(
	`is_¥imôive
(
tokí
))

754  
tokí
->
ty≥
 =
FS_T_MAP_BEG
 ||Åokí->ty≥ =
FS_T_ARRAY_BEG
;

755 
	}
}

757 
	$m©ch
(
ty≥
, 
sˇ¬î_t
 *
sˇn
, *
wh©
)

759 i‡(
ty≥
 =
sˇn
->
tokí
.type) {

761 i‡(
ty≥
 !
FS_T_EOF
) {

762 
	`√xt_tokí
(
sˇn
);

766 i‡(
wh©
) {

767 
	`Ârötf
(
°dîr
, "error! %sÜine:%d,word:%d,expect:'%c',given:'%c'\n",

768 
wh©
, 
sˇn
->
löe
, sˇn->
löe_w‹d
, 
ty≥
, sˇn->
tokí
.type);

772 
	}
}

774 
	$gømm_¥imôive
(
sˇ¬î_t
 *
sˇn
, 
svÆue_t
 *
vÆue
)

776 
tokí_t
 *
tokí
 = &
sˇn
->token;

777 
tokí
->
ty≥
) {

778 
FS_T_INT
:

779 
	`£t_svÆue_numbî
(
vÆue
, 
tokí
->
vÆ
.
n
);

780 
	`m©ch
(
FS_T_INT
, 
sˇn
, "int");

782 
FS_T_FLOAT
:

783 
	`£t_svÆue_ªÆ
(
vÆue
, 
tokí
->
vÆ
.
f
);

784 
	`m©ch
(
FS_T_FLOAT
, 
sˇn
, "float");

786 
FS_T_STR
: {

787 * 
°r
 = 
	`°rög_c›y
(
tokí
->
vÆ
.str, "unform string");

788 
	`£t_svÆue_mÆlo˚d_°rög
(
vÆue
, 
°r
);

789 
	`m©ch
(
FS_T_STR
, 
sˇn
, "string");

793 
	`Ârötf
(
°dîr
, "îr‹ unknow¿¥imôive:'%c'\n", 
sˇn
->
tokí
.
ty≥
);

796 
	}
}

799 
gømm_¨øy
(
sˇ¬î_t
 *
sˇn
, 
svÆue_t
 *
vÆue
);

800 
gømm_m≠
(
sˇ¬î_t
 *
sˇn
, 
svÆue_t
 *
vÆue
);

802 
	$gømm_ñemít
(
sˇ¬î_t
 *
sˇn
, 
svÆue_t
 *
vÆue
)

804 
tokí_t
 *
tokí
 = &
sˇn
->token;

805 
tokí
->
ty≥
) {

806 
FS_T_ARRAY_BEG
:

807  
	`gømm_¨øy
(
sˇn
, 
vÆue
);

808 
FS_T_MAP_BEG
:

809  
	`gømm_m≠
(
sˇn
, 
vÆue
);

811  
	`gømm_¥imôive
(
sˇn
, 
vÆue
);

813 
	}
}

815 
	$gømm_m≠_∑ús
(
sˇ¬î_t
 *
sˇn
, 
m≠pög_t
 *
m≠
)

817 
svÆue_t
 
k
, 
v
;

820 i‡(
	`is_¥imôive
(&
sˇn
->
tokí
)) {

821 i‡(
	`gømm_¥imôive
(
sˇn
, &
k
)) {

825 i‡(
	`m©ch
(
FS_T_MAP_PAIR_SEP
, 
sˇn
, "mapÖair seperator")) {

826 
	`‰ì_svÆue
(&
k
, "gramm map key ofÖair\n");

830 i‡(
	`gømm_ñemít
(
sˇn
, &
v
)) {

831 
	`‰ì_svÆue
(&
k
, "gramm map key ofÖair\n");

835 i‡(
	`m©ch
(
FS_T_ELEMENT_SEP
, 
sˇn
, 
NULL
)) {

836 i‡(
sˇn
->
tokí
.
ty≥
 !
FS_T_MAP_END
) {

837 
	`‰ì_svÆue
(&
k
, "gramm map key ofÖair\n");

838 
	`‰ì_svÆue
(&
v
, "gramm map key ofÖair\n");

843 
svÆue_t
 *
iv
 = 
	`föd_f‹_ö£π
(
m≠
, &
k
, 0);

844 
	`assign_svÆue
(
iv
, &
v
);

845 
	`‰ì_svÆue
(&
k
, "gramm map free");

846 
	`‰ì_svÆue
(&
v
, "gramm map free");

851 
	}
}

854 
	$gømm_m≠
(
sˇ¬î_t
 *
sˇn
, 
svÆue_t
 *
vÆue
)

857 i‡(
	`m©ch
(
FS_T_MAP_BEG
, 
sˇn
, "map begin")) {

861 
m≠pög_t
 *
m≠
 = 
	`Æloˇã_m≠pög
(0);

862 i‡(
	`gømm_m≠_∑ús
(
sˇn
, 
m≠
)) {

863 
	`‰ì_m≠pög
(
m≠
);

867 i‡(
	`m©ch
(
FS_T_MAP_END
, 
sˇn
, "mapÉnd")) {

868 
	`‰ì_m≠pög
(
m≠
);

872 
	`£t_svÆue_m≠pög
(
vÆue
, 
m≠
);

874 
	}
}

877 
svÆue_t
 *
	$gømm_¨øy_ñemít
(
sˇ¬î_t
 *
sˇn
, 
size_t
 *
size
)

879 
size_t
 
Æloc_size
 = 4;

880 *
size
 = 0;

881 
svÆue_t
 *
ñemíts
 = 
	`mÆloc
((svÆue_tË* 
Æloc_size
);

884 i‡(
	`is_ñemít
(&
sˇn
->
tokí
)) {

886 i‡(
	`gømm_ñemít
(
sˇn
, &
ñemíts
[*
size
])) {

888 
	`‰ì
(
ñemíts
);

889  
NULL
;

892 (*
size
)++;

893 i‡(*
size
 >
Æloc_size
) {

894 
Æloc_size
 *= 2;

895 
ñemíts
 = 
	`ªÆloc
”Àmíts, (
svÆue_t
Ë* 
Æloc_size
);

900 i‡(
	`m©ch
(
FS_T_ELEMENT_SEP
, 
sˇn
, 
NULL
)) {

901 i‡(
FS_T_ARRAY_END
 =
sˇn
->
tokí
.
ty≥
) {

902  
ñemíts
;

905 
	`‰ì
(
ñemíts
);

906  
NULL
;

910  
ñemíts
;

913 
	}
}

915 
	$gømm_¨øy
(
sˇ¬î_t
 *
sˇn
, 
svÆue_t
 *
vÆue
)

917 
svÆue_t
 *
ñemíts
;

918 
size_t
 
size
;

920 i‡(
	`m©ch
(
FS_T_ARRAY_BEG
, 
sˇn
, "array begin")) {

924 i‡(
NULL
 =(
ñemíts
 = 
	`gømm_¨øy_ñemít
(
sˇn
, &
size
))) {

928 i‡(
	`m©ch
(
FS_T_ARRAY_END
, 
sˇn
, "arrayÉnd")) {

929 
	`‰ì
(
ñemíts
);

933 
¨øy_t
 *
¨r
 = 
	`Æloˇã_em±y_¨øy
(
size
);

934 
	`mem˝y
(
¨r
->
ôem
, 
ñemíts
, 
size
 * (
svÆue_t
));

935 
	`£t_svÆue_¨øy
(
vÆue
, 
¨r
);

938 
	`‰ì
(
ñemíts
);

941 
	}
}

944 
	$gømm_°¨t
(
sˇ¬î_t
 *
sˇn
, 
svÆue_t
 *
vÆue
)

947 i‡(
	`m©ch
(
FS_T_ID
, 
sˇn
, "start identifier")) {

952 i‡(
	`m©ch
(
FS_T_ASSIGN
, 
sˇn
, "start idássign")) {

957 
sˇn
->
tokí
.
ty≥
) {

958 
FS_T_ARRAY_BEG
:

959 i‡(
	`gømm_¨øy
(
sˇn
, 
vÆue
)) {

963 
FS_T_MAP_BEG
:

964 i‡(
	`gømm_m≠
(
sˇn
, 
vÆue
)) {

969 
	`Ârötf
(
°dîr
, "gømm sèπ unknowÅy≥:%c\n", 
sˇn
->
tokí
.
ty≥
);

973 i‡(
	`m©ch
(
FS_T_EOF
, 
sˇn
, "finish EOF")) {

978 
	}
}

980 
	$fs_db_unf‹m©
(*
∑th«me
, *
sour˚
, 
size_t
 
Àn
, 
svÆue_t
 *
vÆue
)

982 
sˇ¬î_t
 
sˇn
;

984 
vîsi⁄
 = 0;

985 
sum
 = 0,
ßvesum
 = 0;

986 *
mëa_begö
 = 
NULL
;

987 *
mëa_íd
 = 
NULL
;

989 i‡(
sour˚
 =
NULL
 || 
Àn
 == 0) {

993 
mëa_begö
 = 
	`°∫°r
(
sour˚
, 
META_BEGIN
, 
MAX_META_LEN
);

994 i‡(
mëa_begö
) {

995 
mëa_íd
 = 
	`°∫°r
(
mëa_begö
, 
META_END
, 
MAX_META_LEN
);

997 i‡(
mëa_begö
 && 
mëa_íd
) {

998 i‡(2 =
	`ssˇnf
(
mëa_begö
, 
META_FORMAT
, &
vîsi⁄
, &
ßvesum
)) {

999 *
d©a
 = 
mëa_íd
 + 
	`°æí
(
META_END
);

1000 
	`cksum
((*)
d©a
, 
Àn
 - (d©®- 
sour˚
), &
sum
);

1001 i‡(
sum
 !
ßvesum
) {

1002 
	`log_îr‹
(
MOD_DB
, "unformat meta bad cksum version=%u,sum=%u,savesum=%u,pathname=%s",

1003 
vîsi⁄
, 
sum
, 
ßvesum
, 
∑th«me
);

1009 
	`log_îr‹
(
MOD_DB
, "unf‹m© mÆf‹med më®∑th«me=%s", 
∑th«me
);

1012 
	`log_w¨nög
(
MOD_DB
, "unf‹m©Çÿmë®∑th«me=%s", 
∑th«me
);

1015 
	`sˇ¬î_öô
(&
sˇn
, 
vîsi⁄
, 
sour˚
);

1016 
	`√xt_tokí
(&
sˇn
);

1017 i‡(
	`gømm_°¨t
(&
sˇn
, 
vÆue
)) {

1018 
	`sˇ¬î_deöô
(&
sˇn
);

1022 
	`sˇ¬î_deöô
(&
sˇn
);

1024 
	}
}

1026 
	$py°r_°¨t
(
sˇ¬î_t
 *
sˇn
, 
svÆue_t
 *
vÆue
)

1028 
sˇn
->
tokí
.
ty≥
) {

1029 
FS_T_ARRAY_BEG
:

1030 i‡(
	`gømm_¨øy
(
sˇn
, 
vÆue
)) {

1034 
FS_T_MAP_BEG
:

1035 i‡(
	`gømm_m≠
(
sˇn
, 
vÆue
)) {

1040 
	`Ârötf
(
°dîr
, "gømm sèπ unknowÅy≥:%c\n", 
sˇn
->
tokí
.
ty≥
);

1044 i‡(
	`m©ch
(
FS_T_EOF
, 
sˇn
, "finish EOF")) {

1049 
	}
}

1052 
	$fs_py°r2Õc
(*
sour˚
, 
svÆue_t
 *
vÆue
)

1054 
sˇ¬î_t
 
sˇn
;

1056 
	`sˇ¬î_öô
(&
sˇn
, 
DB_FORMAT_VERSION
, 
sour˚
);

1057 
	`√xt_tokí
(&
sˇn
);

1058 i‡(
	`py°r_°¨t
(&
sˇn
, 
vÆue
)) {

1059 
	`sˇ¬î_deöô
(&
sˇn
);

1063 
	`sˇ¬î_deöô
(&
sˇn
);

1065 
	}
}

1068 
	$f_py°r2Õc
()

1070 
ªt
;

1071 
svÆue_t
 
vÆue
;

1073 *
sour˚
 = 
•
->
u
.
°rög
;

1074 
ªt
 = 
	`fs_py°r2Õc
(
sour˚
, &
vÆue
);

1075 *
•
 = 
ªt
 =0 ? 
vÆue
 : 
c⁄°0u
;

1076 
	}
}

1078 
	$f_Õc2py°r
()

1080 
ªt
;

1081 
SET_ALL_ARGS
;

1082 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

1083 
ªt
 = 
	`f‹m©
(
	`ARGS
(0), 
buf
);

1084 
POP_ALL_ARGS
;

1085 i‡(
ªt
 == 0) {

1086 
íd
 = '\0';

1087 
	`evbuf„r_add
(
buf
, &
íd
, (end));

1088 *
p
 = 
	`°rög_c›y
((*)
	`EVBUFFER_DATA
(
buf
), "db format");

1089 
	`push_mÆlo˚d_°rög
(
p
);

1091 
	`push_undeföed
();

1093 
	`evbuf„r_‰ì
(
buf
);

1094 
	}
}

	@packages/db/db_main.c

2 
	~"fs_c⁄fig.h
"

3 
	~"fs_comm.h
"

4 
	~"fs_ùc.h
"

5 
	~"fs_dbi.h
"

6 
	~"fs_m¨shÆ.h
"

7 
	~"fs_d©a_ßve.h
"

8 
	~"fs_db_f‹m©.h
"

10 
	~"fs_Ωc_Õc.h
"

11 
	~"Õc_¨gs_›.h
"

13 
	~"Õc.h
"

14 
	~"Õc_ö˛.h
"

16 
	~"mkdú.h
"

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<as£π.h
>

22 
	~<libgí.h
>

24 
	~<uni°d.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<f˙é.h
>

28 
	~<¨∑/öë.h
>

29 
	~<î∫o.h
>

30 
	~<±hªad.h
>

31 
	~<sys/sys˘l.h
>

33 
	~"fs_log.h
"

35 
	#PATH_BUF_LEN
 1024

	)

37 
	#DIR_MODE
 (
S_IRWXU
|
S_IRWXG
|
S_IROTH
|
S_IXOTH
)

	)

38 
	#FILE_MODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
)

	)

42 
size_t
 
	ggame_max_outbuf
 = (1.8 * 1024 * 1024 * 1024);

43 *
	gdbd_ù
 = "127.0.0.1";

44 
	gdbd_p‹t
 = 60010;

45 c⁄° 
	gbacklog
 = 15;

47 
fs_√t_ac˚±‹_t
 *
	ggame_ac˚±‹
 = 
NULL
;

48 
fs_√t_c⁄√˘i⁄_t
 *
	ggame_c⁄n
 = 
NULL
;

49 
fs_√t_c⁄√˘i⁄_t
 *
	ggame_c⁄n_sync
 = 
NULL
;

50 
	gis_£rvi˚_›í
 = 0;

52 
fs_Ωc_Õc_t
 *
	gdbd_Ωc_Õc
 = 
NULL
;

54 
fs_√t_mbuf_t
 *
	ggamed_√tbuf
 = 
NULL
;

56 
fs_≠r_hash_t
 
	gdbo_ba£
 = {
NULL
, NULL};

59 
	#SEVENT_NULL
 0

	)

60 
	#SEVENT_SYNC_SAVE
 0x00000001

	)

61 
	#SEVENT_SIG_SAVE
 0x00000002

	)

62 
	#SEVENT_SIG_EXIT
 0x00000004

	)

63 
	#SEVENT_CONN_ERR
 0x00000008

	)

64 
	#SEVENT_GAMED_EXIT
 0x00000010

	)

67 
	g£rülized_£q
[] = {
SEVENT_SYNC_SAVE
, 
SEVENT_SIG_SAVE
, 
SEVENT_SIG_EXIT
, 
SEVENT_CONN_ERR
, 
SEVENT_GAMED_EXIT
};

68 
	g£rülized_evít
 = 
SEVENT_NULL
;

70 
	#DBD_CALLOUT_SEC
 (0)

	)

71 
	#DBD_CALLOUT_USEC
 (300000)

	)

74 
	#LOG_DEBUG
(
wh©
, 
key
, 
fmt
, 
¨gs
...Ë
	`DB_KEY_LOG
("debug "wh©, key, fmt, ##¨gs)

	)

75 
	#LOG_WARN
(
wh©
, 
key
, 
fmt
, 
¨gs
...Ë
	`DB_KEY_LOG
("w¨¿"wh©, key, fmt, ##¨gs)

	)

76 
	#LOG_ERROR
(
wh©
, 
key
, 
fmt
, 
¨gs
...Ë
	`DB_KEY_LOG
("îr‹ "wh©, key, fmt, ##¨gs)

	)

80 
	mFS_DB_STAT_ONLINE
 = 0,

81 
	mFS_DB_STAT_OFFLINE
,

82 
	mFS_DB_STAT_UNDEFINED
,

83 } 
	tfs_db_°©_t
;

86 
	sfs_db_u£r_s
 {

87 
db_key_t
 
	mkey
;

88 
fs_db_°©_t
 
	m°©
;

89 
	mdúty
;

90 *
	m∑th«me
;

91 *
	mdú
;

92 *
	mtmµ©h«me
;

93 *
	m√w∑th«me
;

94 *
	m√wdú
;

95 
svÆue_t
 
	mm≠
;

96 } 
	tfs_db_obje˘_t
;

98 
	sfs_dúty_°©ics_s
 {

99 
	mcou¡
;

100 
size_t
 
	msize
;

101 } 
	tfs_dúty_°©ics_t
;

103 
fs_dúty_°©ics_t
 
	gdúty_°©ics
 = {0, 0};

105 
	$dúty_°©ics_ª£t
(
fs_dúty_°©ics_t
 *
°
)

107 
°
->
cou¡
 = 0;

108 
°
->
size
 = 0;

109 
	}
}

112 
	$ª°‹e_dbd_¥o˘ôÀ
()

114 
	`£çro˘ôÀ
("-dbd_%s", 
	`fs_c⁄fig_gë_°rög
(
ENGINE_NAME
));

115 
	}
}

117 
	#DAT_PATTERN
 "d©/%s.py"

	)

119 
	$gë_∑th«me
(
db_key_t
 *
key
, *
out
, 
size_t
 
size
)

121 
	`mem£t
(
out
, 0, 
size
);

122 i‡(
	`DB_KEY_IS_STR
(
key
)) {

123 
	`¢¥ötf
(
out
, 
size
, 
DAT_PATTERN
, 
	`DB_KEY_STR
(
key
));

125 
fs_uid_t
 
uid
 = 
	`DB_KEY_INT
(
key
);

126 
	`¢¥ötf
(
out
, 
size
, "u£r/%02d/u%d.py", (
uid
%100), uid);

128 
	}
}

130 
	$gë_öa˘ive_∑th«me
(
db_key_t
 *
key
, *
out
, 
size_t
 
size
)

132 
	`mem£t
(
out
, 0, 
size
);

133 i‡(
	`DB_KEY_IS_STR
(
key
)) {

134 
	`¢¥ötf
(
out
, 
size
, "öa˘ive_d©/%s.py", 
	`DB_KEY_STR
(
key
));

136 
fs_uid_t
 
uid
 = 
	`DB_KEY_INT
(
key
);

137 
	`¢¥ötf
(
out
, 
size
, "öa˘ive_u£r/%02d/u%d.py", (
uid
%100), uid);

139 
	}
}

141 
	#MAKE_TMPPATH
(
buf
, 
Àn
, 
∑th
) do {\

142 
	`mem£t
((
buf
), 0, (
Àn
)); \

143 
	`¢¥ötf
((
buf
), (
Àn
), "%s.%s", (
∑th
), "tmp");\

144 } 0)

	)

146 
	$£tup_∑th«me
(
fs_db_obje˘_t
 *
dbo
)

148 
∑th«me
[
PATH_BUF_LEN
];

149 
tmµ©h«me
[
PATH_BUF_LEN
];

151 
db_key_t
 *
key
 = &
dbo
->key;

152 
	`mem£t
(
∑th«me
, 0, (pathname));

153 
	`gë_∑th«me
(
key
, 
∑th«me
, (pathname));

154 
	`MAKE_TMPPATH
(
tmµ©h«me
, —mµ©h«me), 
∑th«me
);

156 
dbo
->
∑th«me
 = 
	`°rdup
(pathname);

157 
dbo
->
dú
 = 
	`°rdup
(
	`dú«me
(
∑th«me
));

158 
dbo
->
tmµ©h«me
 = 
	`°rdup
(tmppathname);

159 
dbo
->
√w∑th«me
 = 
NULL
;

160 
dbo
->
√wdú
 = 
NULL
;

161 
	}
}

163 
fs_db_obje˘_t
 *
	$fs_db_obje˘_√w
(
db_key_t
 *
ªf
)

165 
fs_db_obje˘_t
 *
dbo
 = 
	`ˇŒoc
(1, (fs_db_object_t));

166 
m≠pög_t
 *
m≠
 = 
	`Æloˇã_m≠pög
(1);

168 
dbo
->
°©
 = 
FS_DB_STAT_UNDEFINED
;

169 
dbo
->
dúty
 = 0;

170 
	`£t_svÆue_m≠pög
(&
dbo
->
m≠
, map);

172 
	`db_key_öô
(&
dbo
->
key
, 
ªf
->
ty≥
,Ñef->
vÆue
,Ñef->
Àn
);

173 
	`£tup_∑th«me
(
dbo
);

174  
dbo
;

175 
	}
}

177 
	$fs_db_obje˘_‰ì
(
fs_db_obje˘_t
 *
dbo
)

179 
	`db_key_‰ì
(&
dbo
->
key
);

180 
	`‰ì_svÆue
(&
dbo
->
m≠
, "db dat free");

181 
	`‰ì
(
dbo
->
∑th«me
);

182 
	`‰ì
(
dbo
->
tmµ©h«me
);

183 
	`‰ì
(
dbo
->
dú
);

184 i‡(
dbo
->
√w∑th«me
) {

185 
	`‰ì
(
dbo
->
√w∑th«me
);

187 i‡(
dbo
->
√wdú
) {

188 
	`‰ì
(
dbo
->
√wdú
);

190 
	`‰ì
(
dbo
);

191 
	}
}

195 
ölöe
 
	$is_exi°
(*
∑th«me
)

197 
°©
 
sb
;

198  
	`°©
(
∑th«me
, &
sb
) == 0;

199 
	}
}

202 
	$unf‹m©
(
svÆue_t
 *
m≠
, *
°r
, 
size_t
 
Àn
, *
∑th«me
)

204 
svÆue_t
 
tmp
 = 
c⁄°0u
;

206 i‡(
	`fs_db_unf‹m©
(
∑th«me
, 
°r
, 
Àn
, &
tmp
)) {

207 
	`Ârötf
(
°dîr
, "unformatÉrror!\n");

211 i‡(
tmp
.
ty≥
 !
T_MAPPING
) {

212 
	`‰ì_svÆue
(&
tmp
, "unformat");

216 
	`assign_svÆue
(
m≠
, &
tmp
);

217 
	`‰ì_svÆue
(&
tmp
, "unformat");

220 
	}
}

222 
	$øw_ßve_to_fûe_thr_ß„
(c⁄° *
∑th«me
, *
tmµ©h«me
, *
dú
, *
d©a
, 
size_t
 
Àn
)

224 
fd
;

225 
ªt
;

231 i‡(
dú
 =
NULL
) {

233 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ savênuŒ dúÖ©h«me=%s", 
∑th«me
);

234 
îr‹
;

237 i‡(!
	`is_exi°
(
dú
)) {

238 i‡(0 =
	`buûd
(
dú
, 
DIR_MODE
)) {

240 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ savêmkdúÖ©h«me=%s,dú=%s", 
∑th«me
, 
dú
);

241 
îr‹
;

245 
fd
 = 
	`›í
(
tmµ©h«me
, 
O_WRONLY
|
O_TRUNC
|
O_CREAT
, 
FILE_MODE
);

246 i‡(
fd
 < 0) {

248 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ savê›íÖ©h«me=%s,°ªº‹=%s", 
∑th«me
, 
	`°ªº‹
(
thªºno
));

249 
îr‹
;

253 
ªt
 = 
	`wrôe
(
fd
, 
d©a
, 
Àn
);

254 i‡(
ªt
 < 0) {

256 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ savê∑th«me=%s,°ªº‹=%s", 
∑th«me
, 
	`°ªº‹
(
thªºno
));

257 i‡(
	`u∆ök
(
tmµ©h«me
) < 0) {

259 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ u∆ökÖ©h«me=%s,°ªº‹=%s", 
∑th«me
, 
	`°ªº‹
(
thªºno
));

262 
ªt
 = 
	`ª«me
(
tmµ©h«me
, 
∑th«me
);

263 i‡(
ªt
 < 0) {

265 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ savêª«mê∑th«me=%s,°ªº‹=%s", 
∑th«me
, 
	`°ªº‹
(
thªºno
));

269 
	`˛o£
(
fd
);

271  
ªt
 < 0 ? -1 : 0;

273 
îr‹
:

276 
	}
}

278 
	$ßve_to_fûe_thr_ß„
(c⁄° *
∑th«me
, *
tmµ©h«me
, *
dú
, 
svÆue_t
 *
svm≠
)

280 
evbuf„r
 *
d©a_buf
 = 
	`evbuf„r_√w
();

282 i‡(
	`fs_db_f‹m©_thr_ß„
(
svm≠
, 
d©a_buf
)) {

284 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ obje˘ f‹m©Ö©h«me=%s", 
∑th«me
);

285 
îr‹
;

288 i‡(
	`øw_ßve_to_fûe_thr_ß„
(
∑th«me
, 
tmµ©h«me
, 
dú
, 
	`EVBUFFER_DATA
(
d©a_buf
), 
	`EVBUFFER_LENGTH
(data_buf))) {

290 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ obje˘ savê∑th«me=%s", 
∑th«me
);

291 
îr‹
;

294 
	`evbuf„r_‰ì
(
d©a_buf
);

297 
îr‹
:

298 
	`evbuf„r_‰ì
(
d©a_buf
);

300 
	}
}

302 
	$ª°‹e_‰om_fûe
(*
∑th«me
, 
svÆue_t
 *
svm≠
)

304 
size_t
 
size
;

305 *
buf
;

306 
fd
;

307 
°©
 
sb
;

309 
	`log_öfo
(
MOD_DB
, "åyÑe°‹êfûê∑th«me=%s", 
∑th«me
);

311 
fd
 = 
	`›í
(
∑th«me
, 
O_RDONLY
, 0);

312 i‡(
fd
 < 0) {

313 
	`Ârötf
(
°dîr
, "W¨nög:ª°‹ê›íÖ©h«me=%s,îrmsg=%s\n", 
∑th«me
, 
	`°ªº‹
(
î∫o
));

317 i‡(
	`f°©
(
fd
, &
sb
)) {

318 
	`˛o£
(
fd
);

319 
	`Ârötf
(
°dîr
, "W¨nög:ª°‹êfûê∑th«me=%s,îrmsg=%s\n", 
∑th«me
, 
	`°ªº‹
(
î∫o
));

323 
size
 = 
sb
.
°_size
;

324 
buf
 = 
	`ˇŒoc
(1, 
size
 + 1);

325 
	`ªad
(
fd
, 
buf
, 
size
);

326 
	`˛o£
(
fd
);

327 
buf
[
size
] = '\0';

329 i‡(
	`unf‹m©
(
svm≠
, 
buf
, 
size
, 
∑th«me
)) {

330 
	`‰ì
(
buf
);

331 
	`Ârötf
(
°dîr
, "W¨nög:ª°‹êunf‹m©Ö©h«me=%s\n", 
∑th«me
);

335 
	`‰ì
(
buf
);

337 
	}
}

340 
	#DBO_STAT_NOT_EXIST
 0

	)

341 
	#DBO_STAT_ACTIVE
 1

	)

342 
	#DBO_STAT_INACTIVE
 2

	)

344 
	#IS_DBO_STAT_EXIST
(
°©
Ë((°©Ë=
DBO_STAT_ACTIVE
 || (°©Ë=
DBO_STAT_INACTIVE
)

	)

347 
	$db_obje˘_fûe_°©
(
db_key_t
 *
key
)

349 
∑th«me
[
PATH_BUF_LEN
];

350 
	`gë_∑th«me
(
key
, 
∑th«me
, (pathname));

351 i‡(
	`is_exi°
(
∑th«me
)) {

352  
DBO_STAT_ACTIVE
;

354 
	`gë_öa˘ive_∑th«me
(
key
, 
∑th«me
, (pathname));

355 i‡(
	`is_exi°
(
∑th«me
)) {

356  
DBO_STAT_INACTIVE
;

358  
DBO_STAT_NOT_EXIST
;

361 
	}
}

363 
	$has_db_obje˘_fûe
(
db_key_t
 *
key
)

365 
ªt
 = 
	`db_obje˘_fûe_°©
(
key
);

366  
	`IS_DBO_STAT_EXIST
(
ªt
);

367 
	}
}

369 
	$db_obje˘_ßve_thr_ß„
(
fs_db_obje˘_t
 *
dbo
)

371 
ªt
 = 
	`ßve_to_fûe_thr_ß„
(
dbo
->
∑th«me
, dbo->
tmµ©h«me
, dbo->
dú
, &dbo->
m≠
);

372 i‡(
ªt
 == 0) {

373 i‡(
dbo
->
√w∑th«me
) {

374 i‡(
dbo
->
√wdú
 =
NULL
) {

375 
	`log_îr‹_thr_ß„
(
MOD_DB
, "errorÑename saveÇull dirÖathname=%s,newpathname=%d",

376 
dbo
->
∑th«me
, dbo->
√w∑th«me
);

380 i‡(!
	`is_exi°
(
dbo
->
√wdú
)) {

381 i‡(0 =
	`buûd
(
dbo
->
√wdú
, 
DIR_MODE
)) {

382 
	`log_îr‹_thr_ß„
(
MOD_DB
, "errorÑename save mkdirÖathname=%s,newpathname=%d,dir=%s",

383 
dbo
->
∑th«me
, dbo->
√w∑th«me
, dbo->
dú
);

388 
ªt
 = 
	`ª«me
(
dbo
->
∑th«me
, dbo->
√w∑th«me
);

389 i‡(
ªt
 == 0) {

390 
	`log_öfo_thr_ß„
(
MOD_DB
, "renameÖathname=%s,newpathname=%s",

391 
dbo
->
∑th«me
, dbo->
√w∑th«me
);

393 
	`log_îr‹_thr_ß„
(
MOD_DB
, "errorÑenameÖathname=%s,newpathname=%s,strerror=%s",

394 
dbo
->
∑th«me
, dbo->
√w∑th«me
, 
	`°ªº‹
(
thªºno
));

399  
ªt
;

400 
	}
}

402 
	$db_obje˘_ª°‹e
(
fs_db_obje˘_t
 *
dbo
, 
dbo°©
)

404 i‡(
dbo°©
 =
DBO_STAT_ACTIVE
) {

405 i‡(
	`ª°‹e_‰om_fûe
(
dbo
->
∑th«me
, &dbo->
m≠
)) {

406 
	`Ârötf
(
°dîr
, "îr‹ db obje˘Ñe°‹êa˘ivê∑th«me=%s\n", 
dbo
->
∑th«me
);

410 } i‡(
dbo°©
 =
DBO_STAT_INACTIVE
) {

411 
∑th«me
[
PATH_BUF_LEN
];

412 
	`gë_öa˘ive_∑th«me
(&
dbo
->
key
, 
∑th«me
, (pathname));

413 i‡(
	`ª°‹e_‰om_fûe
(
∑th«me
, &
dbo
->
m≠
)) {

414 
	`Ârötf
(
°dîr
, "îr‹ db obje˘Ñe°‹êöa˘ivê∑th«me=%s\n", 
∑th«me
);

421 
	}
}

424 
	$f_fs_ª°‹e_‰om_fûe
()

426 
ªt
;

427 
SET_ALL_ARGS
;

428 
svÆue_t
 * 
∑th«me
 = 
	`ARGS
(0);

429 
svÆue_t
 
svm≠
;

430 
m≠pög_t
 *
m≠
 = 
	`Æloˇã_m≠pög
(0);

431 
	`£t_svÆue_m≠pög
(&
svm≠
, 
m≠
);

432 
ªt
 = 
	`ª°‹e_‰om_fûe
(
∑th«me
->
u
.
°rög
, &
svm≠
);

433 
POP_ALL_ARGS
;

434 i‡(
ªt
 == 0) {

435 
	`push_svÆue
(&
svm≠
);

437 
	`push_undeföed
();

439 
	`‰ì_svÆue
(&
svm≠
, "restore");

440 
	}
}

443 
	$f_fs_ßve_to_fûe
()

445 
ªt
;

446 
SET_ALL_ARGS
;

447 
svÆue_t
 * 
∑th«me
 = 
	`ARGS
(0);

448 
svÆue_t
 * 
svm≠
 = 
	`ARGS
(1);

449 
tmµ©h«me
[
PATH_BUF_LEN
];

450 
	`MAKE_TMPPATH
(
tmµ©h«me
, —mµ©h«me), 
∑th«me
->
u
.
°rög
);

451 
ªt
 = 
	`ßve_to_fûe_thr_ß„
(
∑th«me
->
u
.
°rög
, 
tmµ©h«me
, 
	`dú«me
’©h«me->u.°rög), 
svm≠
);

452 
POP_ALL_ARGS
;

453 
	`push_numbî
(
ªt
);

454 
	}
}

457 
fs_db_obje˘_t
 *
	$dbo_√w
(
db_key_t
 *
key
)

459 
fs_db_obje˘_t
 *
dbo
 = 
NULL
;

461 i‡(
	`has_db_obje˘_fûe
(
key
)) {

462 
	`LOG_WARN
("√wÑïœ˚Åhêﬁd fûe", 
key
, "");

464 
dbo
 = 
	`fs_db_obje˘_√w
(
key
);

465 
dbo
->
°©
 = 
FS_DB_STAT_ONLINE
;

466 
dbo
->
dúty
 = 1;

467 
	`≠r_hash_£t
(
dbo_ba£
.
hash
, 
dbo
->
key
.
vÆue
, dbo->key.
Àn
, dbo);

468  
dbo
;

469 
	}
}

472 
	$game_öput_dbo_√w
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

475 
fs_dbi_¨øy_ôî_t
 
ôî
;

476 
db_key_t
 
key
;

478 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, 
buf
, 
Àn
);

479 
	`db_key_ªf
(
hódî
, &
ôî
, &
key
);

482 
	`LOG_DEBUG
("√w cmd", &
key
, "");

483 
fs_db_obje˘_t
 *
dbo
 = 
	`≠r_hash_gë
(
dbo_ba£
.
hash
, 
key
.
vÆue
, key.
Àn
);

484 i‡(
dbo
 =
NULL
) {

485 
dbo
 = 
	`dbo_√w
(&
key
);

486 i‡(
	`db_m≠_unm¨shÆ
(&
dbo
->
m≠
, &
ôî
)) {

489 
	`as£π
(0);

491 
	`LOG_DEBUG
("√w ok", &
key
, "");

494 
	`LOG_WARN
("skùÇew du∂iˇãd", &
key
, "");

496 
	}
}

498 
	$game_öput_dbo_lﬂd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
, 
sync
)

500 
fs_dbi_¨øy_ôî_t
 
ôî
;

501 
db_key_t
 
key
;

502 
fs_gd_hódî_t
 
hdr
;

503 
sid
;

504 
	`mem£t
(&
hdr
, 0, (hdr));

506 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, 
buf
, 
Àn
);

507 
	`db_key_ªf
(
hódî
, &
ôî
, &
key
);

508 
sid
 = 
ôî
.
tv
->
numbî
.
n
;

509 
	`FS_DBI_ARRAY_ITER_NEXT
(&
ôî
);

511 
hdr
.
cmd
 = 
FS_GD_CMD_DB_OBJ_DATA
;

512 
hdr
.
uid
 = 
hódî
->uid;

513 
hdr
.
Êag
 = 
hódî
->flag;

515 
	`LOG_DEBUG
("lﬂd cmd", &
key
, "sync=%d", 
sync
);

516 
fs_db_obje˘_t
 *
dbo
 = 
	`≠r_hash_gë
(
dbo_ba£
.
hash
, 
key
.
vÆue
, key.
Àn
);

517 i‡(
dbo
 =
NULL
) {

518 
dbo°©
 = 
	`db_obje˘_fûe_°©
(&
key
);

519 i‡(
	`IS_DBO_STAT_EXIST
(
dbo°©
)) {

520 
dbo
 = 
	`fs_db_obje˘_√w
(&
key
);

521 i‡(
	`db_obje˘_ª°‹e
(
dbo
, 
dbo°©
)) {

522 
	`fs_db_obje˘_‰ì
(
dbo
);

523 
hdr
.
°©
 = 
FS_GD_STAT_ERROR
;

524 
	`db_m≠_m¨shÆ_to
(
c⁄n
, &
hdr
, &
key
, 
NULL
, 
sid
);

525 
	`LOG_ERROR
("lﬂd faû", &
key
, "sync=%d", 
sync
);

528 i‡(
dbo
->
m≠
.
ty≥
 =
T_MAPPING
) {

529 
hdr
.
°©
 = 
FS_GD_STAT_OK
;

530 
	`db_m≠_m¨shÆ_to
(
c⁄n
, &
hdr
, &
key
, &
dbo
->
m≠
, 
sid
);

531 
	`≠r_hash_£t
(
dbo_ba£
.
hash
, 
dbo
->
key
.
vÆue
, dbo->key.
Àn
, dbo);

532 
dbo
->
dúty
 = 0;

533 
	`LOG_DEBUG
("lﬂd ok", &
key
, "sync=%d", 
sync
);

535 
	`fs_db_obje˘_‰ì
(
dbo
);

536 
hdr
.
°©
 = 
FS_GD_STAT_ERROR
;

537 
	`db_m≠_m¨shÆ_to
(
c⁄n
, &
hdr
, &
key
, 
NULL
, 
sid
);

538 
	`LOG_ERROR
("lﬂdÉº‹", &
key
, "sync=%d", 
sync
);

541 
hdr
.
°©
 = 
FS_GD_STAT_NULL
;

542 
	`db_m≠_m¨shÆ_to
(
c⁄n
, &
hdr
, &
key
, 
NULL
, 
sid
);

543 
	`LOG_WARN
("lﬂdÇuŒ", &
key
, "sync=%d", 
sync
);

546 
dbo
->
°©
 = 
FS_DB_STAT_ONLINE
;

547 i‡(
dbo
->
m≠
.
ty≥
 =
T_MAPPING
) {

548 
hdr
.
°©
 = 
FS_GD_STAT_OK
;

549 
	`db_m≠_m¨shÆ_to
(
c⁄n
, &
hdr
, &
key
, &
dbo
->
m≠
, 
sid
);

550 
	`LOG_DEBUG
("lﬂd cachêok", &
key
, "sync=%d", 
sync
);

552 
hdr
.
°©
 = 
FS_GD_STAT_ERROR
;

553 
	`db_m≠_m¨shÆ_to
(
c⁄n
, &
hdr
, &
key
, 
NULL
, 
sid
);

554 
	`LOG_ERROR
("lﬂd cachêîr‹", &
key
, "sync=%d", 
sync
);

557 
	}
}

560 
	$game_öput_dbo_u∆ﬂd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

562 
fs_dbi_¨øy_ôî_t
 
ôî
;

563 
db_key_t
 
key
;

565 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, 
buf
, 
Àn
);

566 
	`db_key_ªf
(
hódî
, &
ôî
, &
key
);

568 
	`LOG_DEBUG
("u∆ﬂd cmd", &
key
, "");

569 
fs_db_obje˘_t
 *
dbo
 = 
	`≠r_hash_gë
(
dbo_ba£
.
hash
, 
key
.
vÆue
, key.
Àn
);

570 i‡(
dbo
 !
NULL
) {

579 
dbo
->
°©
 = 
FS_DB_STAT_OFFLINE
;

580 
	`LOG_DEBUG
("u∆ﬂd ok", &
key
, "");

582 
	`LOG_WARN
("u∆ﬂd miss", &
key
, "");

584 
	}
}

587 
	$game_öput_dbo_Æl_d©a
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

589 
fs_dbi_¨øy_ôî_t
 
ôî
;

590 
db_key_t
 
key
;

592 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, 
buf
, 
Àn
);

593 
	`db_key_ªf
(
hódî
, &
ôî
, &
key
);

595 
	`LOG_DEBUG
("d©®cmd", &
key
, "");

596 
fs_db_obje˘_t
 *
dbo
 = 
	`≠r_hash_gë
(
dbo_ba£
.
hash
, 
key
.
vÆue
, key.
Àn
);

597 i‡(
dbo
 !
NULL
) {

598 
dbo
->
dúty
 = 1;

601 
	`LOG_WARN
("d©®mis†™d ju°Çew it", &
key
, "");

602 
dbo
 = 
	`dbo_√w
(&
key
);

605 i‡(
	`db_m≠_unm¨shÆ
(&
dbo
->
m≠
, &
ôî
)) {

606 
	`LOG_ERROR
("d©®unm¨shÆ faû", &
key
, "");

609 
	`LOG_DEBUG
("d©®ok", &
key
, "");

610 
	}
}

612 
	$game_öput_dbo_dúty_d©a
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

614 
fs_dbi_¨øy_ôî_t
 
ôî
;

615 
db_key_t
 
key
;

617 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, 
buf
, 
Àn
);

618 
	`db_key_ªf
(
hódî
, &
ôî
, &
key
);

621 
fs_db_obje˘_t
 *
dbo
 = 
	`≠r_hash_gë
(
dbo_ba£
.
hash
, 
key
.
vÆue
, key.
Àn
);

622 i‡(
dbo
 !
NULL
) {

623 
dbo
->
dúty
 = 1;

624 
	`mîge_dúty_db_obje˘_to_m≠
(&
dbo
->
m≠
, &
ôî
);

627 
	`LOG_ERROR
("dúty miss.nÿsuch obje˘", &
key
, "");

631 
	}
}

634 
	$game_öput_dbo_ª«me
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

636 
fs_dbi_¨øy_ôî_t
 
ôî
;

637 
db_key_t
 
key
;

639 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, 
buf
, 
Àn
);

640 
	`db_key_ªf
(
hódî
, &
ôî
, &
key
);

642 
	`LOG_DEBUG
("ª«mêcmd", &
key
, "");

643 
fs_db_obje˘_t
 *
dbo
 = 
	`≠r_hash_gë
(
dbo_ba£
.
hash
, 
key
.
vÆue
, key.
Àn
);

644 i‡(
dbo
 !
NULL
) {

645 *
√wdú
;

646 
√w∑th«me
[
PATH_BUF_LEN
];

647 
	`mem£t
(
√w∑th«me
, 0, (newpathname));

648 
	`¢¥ötf
(
√w∑th«me
, “ew∑th«me), 
DAT_PATTERN
, 
ôî
.
tv
->
°rög
.
°r
);

650 i‡(
	`is_exi°
(
√w∑th«me
)) {

651 
	`LOG_ERROR
("ª«mê√wfûêÆªadyÉxi°s", &
key
, "ﬁd∑th«me=%s,√w∑th«me=%s", 
dbo
->
∑th«me
, 
√w∑th«me
);

654 i‡(
	`°rcmp
(
√w∑th«me
, 
dbo
->
∑th«me
) == 0) {

655 
	`LOG_WARN
("ª«mêskù", &
key
, "ﬁd∑th«me=%s,√w∑th«me=%s", 
dbo
->
∑th«me
, 
√w∑th«me
);

658 
√wdú
 = 
	`dú«me
(
√w∑th«me
);

659 i‡(
√wdú
 =
NULL
) {

660 
	`LOG_ERROR
("ª«mê√wdúÉº‹", &
key
, "ﬁd∑th«me=%s,√w∑th«me=%s", 
dbo
->
∑th«me
, 
√w∑th«me
);

664 
dbo
->
dúty
 = 1;

665 
	`LOG_DEBUG
("åyÑíame", &
key
, "ﬁd∑th«me=%s,√w∑th«me=%s", 
dbo
->
∑th«me
, 
√w∑th«me
);

666 i‡(
dbo
->
√w∑th«me
) {

667 
	`‰ì
(
dbo
->
√w∑th«me
);

669 
dbo
->
√w∑th«me
 = 
	`°rdup
(newpathname);

670 i‡(
dbo
->
√wdú
) {

671 
	`‰ì
(
dbo
->
√wdú
);

673 
dbo
->
√wdú
 = 
	`°rdup
(newdir);

675 
	`LOG_WARN
("ª«mêmiss", &
key
, "");

677 
	}
}

679 
	$‰ì_ofÊöe
()

681 
≠r_hash_ödex_t
 *
hi
;

682 *
hdbo
;

683 
fs_db_obje˘_t
 *
dbo
;

684 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
dbo_ba£
.
hash
); hi; hò
	`≠r_hash_√xt
(hi)) {

685 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
hdbo
);

686 
dbo
 = 
hdbo
;

688 i‡(
dbo
->
°©
 =
FS_DB_STAT_OFFLINE
 && dbo->
dúty
 == 0) {

689 
	`≠r_hash_£t
(
dbo_ba£
.
hash
, 
dbo
->
key
.
vÆue
, dbo->key.
Àn
, 
NULL
);

690 
	`fs_db_obje˘_‰ì
(
dbo
);

691 
	`LOG_DEBUG
("‰ì", &
dbo
->
key
, "");

695 
	`ª°‹e_dbd_¥o˘ôÀ
();

696 
	}
}

698 
	$Êush_Æl_db_obje˘
()

701 
≠r_hash_ödex_t
 *
hi
;

702 *
hdbo
;

703 
fs_db_obje˘_t
 *
dbo
;

705 
	`£çro˘ôÀ
("-dbd %s", "flushing dirty");

706 
	`log_öfo
(
MOD_DB
, "sync dirtyÅo disk begin");

709 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
dbo_ba£
.
hash
); hi; hò
	`≠r_hash_√xt
(hi)) {

710 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
hdbo
);

711 
dbo
 = 
hdbo
;

712 i‡(
dbo
->
dúty
) {

713 i‡(
	`db_obje˘_ßve_thr_ß„
(
dbo
)) {

716 
dbo
->
dúty
 = 0;

729 
	`‰ì_ofÊöe
();

730 
	`log_öfo
(
MOD_DB
, "sync dirtyÅo diskÉnd");

731 
	}
}

734 
fs_db_obje˘_t
 ** 
	mdútyli°
;

735 
	m°¨t
;

736 
	míd
;

737 
	mthªad˙t
;

738 } 
	tthr_¨g_t
;

740 * 
	$thªad_maö
(* 
∑øm
)

742 
i
;

743 
fs_db_obje˘_t
 *
dbo
;

744 
thr_¨g_t
 *
¨g
 = 
∑øm
;

746 
i
 = 
¨g
->
°¨t
; i <árg->
íd
; i +¨g->
thªad˙t
) {

747 
dbo
 = 
¨g
->
dútyli°
[
i
];

748 i‡(0 =
	`db_obje˘_ßve_thr_ß„
(
dbo
)) {

749 
dbo
->
dúty
 = 0;

754  
NULL
;

755 
	}
}

757 
	$quîy_hw_n˝u
()

759 
mib
[2];

760 
n˝u
 = 0;

761 
size_t
 
Àn
;

763 
mib
[0] = 
CTL_HW
;

764 
mib
[1] = 
HW_NCPU
;

765 
Àn
 = (
n˝u
);

766 i‡(
	`sys˘l
(
mib
, (mib)/(mib[0]), &
n˝u
, &
Àn
, 
NULL
, 0)) {

767 
	`≥º‹
("sysctlÉrror");

771  
n˝u
;

772 
	}
}

774 
	$thªad_Êush_Æl_db_obje˘
()

777 
≠r_hash_ödex_t
 *
hi
;

778 *
hdbo
;

779 
fs_db_obje˘_t
 *
dbo
;

781 
size
 = 
	`≠r_hash_cou¡
(
dbo_ba£
.
hash
);

782 
fs_db_obje˘_t
 **
dútyli°
 = 
	`ˇŒoc
(
size
, (fs_db_object_t*));

783 
ödex
 = 0, 
thªad˙t
 = 0;

785 
	`£çro˘ôÀ
("-dbd %s", "multi-thread flushing dirty");

786 
	`log_öfo
(
MOD_DB
, "multi-thread sync dirtyÅo disk begin");

789 
ödex
 = 0, 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
dbo_ba£
.
hash
); hi; hò
	`≠r_hash_√xt
(hi)) {

790 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
hdbo
);

791 
dbo
 = 
hdbo
;

792 i‡(
dbo
->
dúty
) {

793 
dútyli°
[
ödex
++] = 
dbo
;

797 i‡(
ödex
 > 0) {

798 
thªad˙t
 = 
	`quîy_hw_n˝u
();

799 i‡(
thªad˙t
 <= 0) {

800 
thªad˙t
 = 4;

802 
thªad˙t
 = 
ödex
 >Åhreadcnt ?Åhreadcnt : index;

804 
±hªad_t
 
thªad
[
thªad˙t
];

805 
thr_¨g_t
 
¨g
[
thªad˙t
];

806 
i
;

808 
i
 = 0; i < 
thªad˙t
; i++) {

809 
¨g
[
i
].
dútyli°
 = dirtylist;

810 
¨g
[
i
].
°¨t
 = i;

811 
¨g
[
i
].
íd
 = 
ödex
;

812 
¨g
[
i
].
thªad˙t
 =Åhreadcnt;

813 i‡(
	`±hªad_¸óã
(&
thªad
[
i
], 
NULL
, 
thªad_maö
, &
¨g
[i])) {

815 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ cª©êthªad index=%d,î∫o=%d", 
i
, 
î∫o
);

818 
i
 = 0; i < 
thªad˙t
; i++) {

819 i‡(
	`±hªad_joö
(
thªad
[
i
], 
NULL
)) {

820 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ joöÅhªad index=%d,î∫o=%d", 
i
, 
î∫o
);

822 
	`log_öfo_thr_ß„
(
MOD_DB
, "joöÅhªad ok index=%d", 
i
);

826 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
dbo_ba£
.
hash
); hi; hò
	`≠r_hash_√xt
(hi)) {

827 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
hdbo
);

828 
dbo
 = 
hdbo
;

830 i‡(
dbo
->
°©
 =
FS_DB_STAT_OFFLINE
 && dbo->
dúty
 == 0) {

831 
	`≠r_hash_£t
(
dbo_ba£
.
hash
, 
dbo
->
key
.
vÆue
, dbo->key.
Àn
, 
NULL
);

832 
	`fs_db_obje˘_‰ì
(
dbo
);

833 
	`LOG_DEBUG
("‰ì", &
dbo
->
key
, "");

837 
	`‰ì
(
dútyli°
);

838 
	`ª°‹e_dbd_¥o˘ôÀ
();

839 
	`log_öfo
(
MOD_DB
, "mu…i-thªad syn¯dútyÅÿdiskÉnd.thªad˙t=%d", 
thªad˙t
);

840 
	}
}

845 
±hªad_rwlock_t
 
	gglobÆ_Õc_rwlock
 = 
PTHREAD_RWLOCK_INITIALIZER
;

846 
	#GLOBAL_RLOCK_REQUIRE
 { 
ªt
 = 
	`±hªad_rwlock_rdlock
(&
globÆ_Õc_rwlock
); 
	`as£π
‘ë =0);}

	)

847 
	#GLOBAL_WLOCK_REQUIRE
 { 
ªt
 = 
	`±hªad_rwlock_wæock
(&
globÆ_Õc_rwlock
); 
	`as£π
‘ë =0);}

	)

848 
	#GLOBAL_LOCK_RELEASE
 { 
ªt
 = 
	`±hªad_rwlock_u∆ock
(&
globÆ_Õc_rwlock
); 
	`as£π
‘ë =0);}

	)

851 
±hªad_t
 
	m±hid
;

852 
	mödex
;

853 } 
	tfs_w‹kî_t
;

856 
fs_db_obje˘_t
 ** 
	mdútyli°
;

857 
size_t
 
	mdúty˙t
;

858 
fs_w‹kî_t
 *
	mw‹kîli°
;

859 
	mw‹kî˙t
;

860 
	mdos˙t
;

861 
	misw‹kög
;

862 
	mdosfds
[2];

863 } 
	tfs_bœckbﬂrd_t
;

865 
add_timî
(
timevÆ
 
≥riod
, (*
ˇŒback
)(*), * 
¨g
);

866 c⁄° 
dos_fö_w‹k
 = 'F';

867 
fs_bœckbﬂrd_t
 *
bœckbﬂrd
 = 
NULL
;

869 
	$öô_bœckbﬂrd
()

871 
	`as£π
(
bœckbﬂrd
 =
NULL
);

872 
bœckbﬂrd
 = 
	`ˇŒoc
((
fs_bœckbﬂrd_t
), 1);

873 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
bœckbﬂrd
->
dosfds
)) {

874 
	`log_îr‹
(
MOD_DB
, "mu…i-rw-thªad syn¯dúty cª©êdosfd†ÁûÉºno=%d", 
î∫o
);

878 
	}
}

880 
	$ª£t_bœckbﬂrd
()

882 i‡(
bœckbﬂrd
->
dútyli°
) {

883 
	`‰ì
(
bœckbﬂrd
->
dútyli°
);

884 
bœckbﬂrd
->
dútyli°
 = 
NULL
;

886 i‡(
bœckbﬂrd
->
w‹kîli°
) {

887 
	`‰ì
(
bœckbﬂrd
->
w‹kîli°
);

888 
bœckbﬂrd
->
w‹kîli°
 = 
NULL
;

890 
bœckbﬂrd
->
dúty˙t
 = 0;

891 
bœckbﬂrd
->
w‹kî˙t
 = 0;

892 
bœckbﬂrd
->
isw‹kög
 = 0;

893 
bœckbﬂrd
->
dos˙t
 = 0;

894 
	}
}

896 * 
	$w‹kî_maö
(* 
∑øm
)

898 
i
;

899 
ssize_t
 
ªt
;

900 
fs_db_obje˘_t
 *
dbo
;

901 
fs_w‹kî_t
 *
w‹kî
 = 
∑øm
;

903 
i
 = 
w‹kî
->
ödex
; i < 
bœckbﬂrd
->
dúty˙t
; i +bœckbﬂrd->
w‹kî˙t
) {

904 
dbo
 = 
bœckbﬂrd
->
dútyli°
[
i
];

905 
GLOBAL_RLOCK_REQUIRE
;

906 i‡(0 =
	`db_obje˘_ßve_thr_ß„
(
dbo
)) {

908 
dbo
->
dúty
 = 0;

911 
GLOBAL_LOCK_RELEASE
;

913 
ªt
 = 
	`£nd
(
bœckbﬂrd
->
dosfds
[1], &
dos_fö_w‹k
, (dos_fin_work), 0);

914 i‡(
ªt
 < (
dos_fö_w‹k
)) {

916 
	`log_îr‹_thr_ß„
(
MOD_DB
, "%dthÅhªad síd do†Áûêªt=%d,î∫o=%d", 
w‹kî
->
ödex
, 
ªt
, 
î∫o
);

918 
	`log_öfo_thr_ß„
(
MOD_DB
, "%dthÅhªad föishánd síd do†ok", 
w‹kî
->
ödex
);

921  
NULL
;

922 
	}
}

925 
	$check_thªad_föish
()

927 i‡(
bœckbﬂrd
->
dos˙t
 =bœckbﬂrd->
w‹kî˙t
) {

929 
i
;

930 
i
 = 0; i < 
bœckbﬂrd
->
w‹kî˙t
; ++i) {

931 i‡(
	`±hªad_joö
(
bœckbﬂrd
->
w‹kîli°
[
i
].
±hid
, 
NULL
)) {

932 
	`log_îr‹
(
MOD_DB
, "îr‹ joöÅhªad index=%d,î∫o=%d", 
i
, 
î∫o
);

935 
	`log_öfo
(
MOD_DB
, "multi-rw-thread sync dirtyÅo diskÉnd.dirtycnt=%lu,workercnt=%d",

936 
bœckbﬂrd
->
dúty˙t
, bœckbﬂrd->
w‹kî˙t
);

937 
	`‰ì_ofÊöe
();

938 
	`ª£t_bœckbﬂrd
();

943 
	}
}

945 
˛o£_£rvi˚
();

946 
dbd_shutdown_d´m⁄
();

948 
	$thr_ß„_timeout_cb
(*
¨g
)

950 
ªt
;

952 i‡(
bœckbﬂrd
 =
NULL
) {

953 
	`log_îr‹_thr_ß„
(
MOD_DB
, "errorÇo blackboard");

957 i‡(
bœckbﬂrd
->
isw‹kög
) {

959 i‡(0 =
	`check_thªad_föish
()) {

960 
dos
[256];

961 
ªt
 = 
	`ªcv
(
bœckbﬂrd
->
dosfds
[0], &
dos
, (dosË, 
MSG_DONTWAIT
);

962 i‡(
ªt
 > 0) {

964 
bœckbﬂrd
->
dos˙t
 +
ªt
;

965 
	`check_thªad_föish
();

966 } i‡(
ªt
 == 0) {

967 
	`log_îr‹_thr_ß„
(
MOD_DB
, "error dosÑeadÉof");

969 i‡(
î∫o
 !
EAGAIN
) {

970 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ do†ªadÉºno=%d", 
î∫o
);

975 i‡(
£rülized_evít
 !
SEVENT_NULL
) {

976 
i
;

977 
evít
;

978 
	`log_öfo
(
MOD_DB
, "check sîülizedÉvít:%x", 
£rülized_evít
);

980 
	`Êush_Æl_db_obje˘
();

981 
i
 = 0; i < (
£rülized_£q
)/(serialized_seq[0]); ++i) {

982 
evít
 = 
£rülized_evít
 & 
£rülized_£q
[
i
];

983 i‡(
evít
) {

984 
	`log_öfo
(
MOD_DB
, "⁄ sîülizedÉvít:%x", 
evít
);

986 
evít
) {

987 
SEVENT_SYNC_SAVE
:

989 
SEVENT_SIG_SAVE
:

991 
SEVENT_GAMED_EXIT
:

993 
SEVENT_SIG_EXIT
:

994 
	`dbd_shutdown_d´m⁄
();

996 
SEVENT_CONN_ERR
:

997 
	`˛o£_£rvi˚
();

1001 
£rülized_evít
 = 
SEVENT_NULL
;

1004 
	}
}

1007 
fs_db_obje˘_t
 ** 
	$gë_dbo_dútyli°
(
size_t
 *
psize
)

1009 
≠r_hash_ödex_t
 *
hi
;

1010 *
hdbo
;

1011 
fs_db_obje˘_t
 *
dbo
;

1013 
size_t
 
ödex
 = 0;

1014 
size_t
 
size
 = 
	`≠r_hash_cou¡
(
dbo_ba£
.
hash
);

1015 
fs_db_obje˘_t
 **
dútyli°
 = 
	`ˇŒoc
(
size
, (fs_db_object_t*));

1017  
ödex
 = 0, 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
dbo_ba£
.
hash
); hi; hò
	`≠r_hash_√xt
(hi)) {

1018 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
hdbo
);

1019 
dbo
 = 
hdbo
;

1020 i‡(
dbo
->
dúty
) {

1021 
dútyli°
[
ödex
++] = 
dbo
;

1025 *
psize
 = 
ödex
;

1026 i‡(
ödex
 > 0) {

1027  
dútyli°
;

1029 
	`‰ì
(
dútyli°
);

1030  
NULL
;

1032 
	}
}

1034 
	$gë_w‹kî_˙t
(
size_t
 
dútyli°size
)

1036 
thªad˙t
 = 
	`quîy_hw_n˝u
();

1037 i‡(
thªad˙t
 <= 0) {

1038 
thªad˙t
 = 4;

1040 
thªad˙t
 = 
dútyli°size
 >Åhreadcnt ?Åhreadcnt : dirtylistsize;

1041  
thªad˙t
;

1042 
	}
}

1044 
	$wr_thªad_Êush_Æl_db_obje˘
()

1046 
fs_db_obje˘_t
 **
dútyli°
;

1047 
size_t
 
dúty˙t
;

1048 
fs_w‹kî_t
 *
w‹kîli°
;

1049 
w‹kî˙t
, 
i
;

1051 i‡(
bœckbﬂrd
 =
NULL
) {

1052 
	`log_îr‹_thr_ß„
(
MOD_DB
, "multi-rw-thread sync dirtyÇo blackboard");

1055 i‡(
bœckbﬂrd
->
isw‹kög
) {

1056 
	`log_îr‹_thr_ß„
(
MOD_DB
, "multi-rw-thread sync dirtyáre still working");

1060 
dútyli°
 = 
	`gë_dbo_dútyli°
(&
dúty˙t
);

1061 i‡(
dútyli°
 =
NULL
 || 
dúty˙t
 == 0) {

1062 
	`log_öfo
(
MOD_DB
, "multi-rw-thread syncÇo dirtyÅo do");

1065 
w‹kî˙t
 = 
	`gë_w‹kî_˙t
(
dúty˙t
);

1066 
w‹kîli°
 = 
	`ˇŒoc
((
fs_w‹kî_t
), 
w‹kî˙t
);

1068 i‡(
bœckbﬂrd
->
dútyli°
) {

1069 
	`‰ì
(
bœckbﬂrd
->
dútyli°
);

1071 i‡(
bœckbﬂrd
->
w‹kîli°
) {

1072 
	`‰ì
(
bœckbﬂrd
->
w‹kîli°
);

1074 
bœckbﬂrd
->
dútyli°
 = dirtylist;

1075 
bœckbﬂrd
->
dúty˙t
 = dirtycnt;

1076 
bœckbﬂrd
->
w‹kîli°
 = workerlist;

1077 
bœckbﬂrd
->
isw‹kög
 = 1;

1078 
bœckbﬂrd
->
w‹kî˙t
 = 0;

1079 
bœckbﬂrd
->
dos˙t
 = 0;

1081 
	`£çro˘ôÀ
("-dbd %s", "multi-rw-thread flushing dirty");

1082 
	`log_öfo
(
MOD_DB
, "multi-rw-thread sync dirtyÅo disk begin");

1083 
i
 = 0; i < 
w‹kî˙t
; i++) {

1084 
fs_w‹kî_t
 *
w‹kî¨g
 = &
bœckbﬂrd
->
w‹kîli°
[bœckbﬂrd->
w‹kî˙t
];

1085 
w‹kî¨g
->
ödex
 = 
bœckbﬂrd
->
w‹kî˙t
;

1086 i‡(0 =
	`±hªad_¸óã
(&
w‹kî¨g
->
±hid
, 
NULL
, 
w‹kî_maö
, workerarg)) {

1087 
bœckbﬂrd
->
w‹kî˙t
++;

1089 
	`log_îr‹_thr_ß„
(
MOD_DB
, "îr‹ mu…i-rw-thªad cª©êthªad index=%d,î∫o=%d", 
i
, 
î∫o
);

1092 
	}
}

1096 
	$game_öput_sync
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

1099 
fs_dbi_¨øy_ôî_t
 
ôî
;

1100 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, 
buf
, 
Àn
);

1101 
mëhod
 = 
ôî
.
tv
->
numbî
.
n
;

1103 i‡(
mëhod
 =
FS_GD_MULTI_W_THREAD
) {

1104 i‡(!
bœckbﬂrd
->
isw‹kög
) {

1105 
	`thªad_Êush_Æl_db_obje˘
();

1107 } i‡(
mëhod
 =
FS_GD_MULTI_RW_THREAD
) {

1108 
	`wr_thªad_Êush_Æl_db_obje˘
();

1110 
£rülized_evít
 |
SEVENT_SYNC_SAVE
;

1112 
	}
}

1114 
	$game_öput_gamed_exô
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

1116 
£rülized_evít
 |
SEVENT_GAMED_EXIT
;

1117 
	`log_îr‹_thr_ß„
(
MOD_DB
, "recv gamedÉxit cmd");

1118 
	}
}

1120 
	$ß„_game_öput
(
fs_√t_c⁄√˘i⁄_t
 *
‰omc⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
, *
ud©a
)

1122 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
‰omc⁄n
;

1123 *
d©a
 = 
hódî
->
∑ylﬂd_Àn
 =0 ? 
NULL
 : 
buf
;

1124 
	`as£π
(
c⁄n
 =
game_c⁄n
);

1125 
	`as£π
(
hódî
->
∑ylﬂd_Àn
 =
Àn
);

1127 
hódî
->
cmd
) {

1128 
FS_GD_CMD_DB_OBJ_NEW
:

1129 
	`game_öput_dbo_√w
(
c⁄n
, 
hódî
, 
d©a
, 
Àn
);

1131 
FS_GD_CMD_DB_OBJ_LOAD
:

1132 
	`game_öput_dbo_lﬂd
(
c⁄n
, 
hódî
, 
d©a
, 
Àn
, 0);

1134 
FS_GD_CMD_DB_OBJ_LOAD_SYNC
:

1135 
	`game_öput_dbo_lﬂd
(
game_c⁄n_sync
, 
hódî
, 
d©a
, 
Àn
, 1);

1137 
FS_GD_CMD_DB_OBJ_UNLOAD
:

1138 
	`game_öput_dbo_u∆ﬂd
(
c⁄n
, 
hódî
, 
d©a
, 
Àn
);

1140 
FS_GD_CMD_DB_OBJ_DATA
:

1141 
	`game_öput_dbo_Æl_d©a
(
c⁄n
, 
hódî
, 
d©a
, 
Àn
);

1143 
FS_GD_CMD_DB_OBJ_DATA_DIRTY
:

1144 
dúty_°©ics
.
cou¡
++;

1145 
dúty_°©ics
.
size
 +
Àn
;

1146 
	`game_öput_dbo_dúty_d©a
(
c⁄n
, 
hódî
, 
d©a
, 
Àn
);

1149 
FS_GD_CMD_SYNC
:

1150 
	`game_öput_sync
(
c⁄n
, 
hódî
, 
d©a
, 
Àn
);

1152 
	`dúty_°©ics_ª£t
(&
dúty_°©ics
);

1154 
FS_GD_CMD_RENAME
:

1155 
	`game_öput_dbo_ª«me
(
c⁄n
, 
hódî
, 
d©a
, 
Àn
);

1157 
FS_GD_CMD_GAMED_EXIT
:

1158 
	`game_öput_gamed_exô
(
c⁄n
, 
hódî
, 
d©a
, 
Àn
);

1161 
FS_GD_RPC
: {

1162 
fs_öbuf_t
 
öbuf
;

1163 
	`FS_INBUF_INIT
(&
öbuf
, 
d©a
, 
Àn
);

1164 
	`fs_Ωc_di•©ch
(
dbd_Ωc_Õc
, 
hódî
->
uid
, &
öbuf
);

1169 
	`Ârötf
(
°dîr
, "dbd i≈uàunknow cmd:%d\n", 
hódî
->
cmd
);

1172 
	}
}

1174 
	$game_öput
(
fs_√t_c⁄√˘i⁄_t
 *
‰omc⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
, *
ud©a
)

1176 
GLOBAL_WLOCK_REQUIRE
;

1177 
	`ß„_game_öput
(
‰omc⁄n
, 
hódî
, 
buf
, 
Àn
, 
ud©a
);

1178 
GLOBAL_LOCK_RELEASE
;

1179 
	}
}

1182 
	$game_c⁄√˘i⁄_ªcv
(
buf„ªvít
 *
bu„v
, *
¨g
)

1184 
	`READ_PACKET
(
fs_gd_hódî_t
, 
bu„v
, 
¨g
, 
game_öput
, 
NULL
);

1185 
	}
}

1188 
	$game_c⁄√˘i⁄_îr‹
(
buf„ªvít
 *
bu„v
, 
wh©
, *
¨g
)

1190 
	`log_îr‹_thr_ß„
(
MOD_DB
, "gamêc⁄√˘i⁄Éº‹:%x", 
wh©
);

1191 
£rülized_evít
 |
SEVENT_CONN_ERR
;

1192 
	}
}

1194 
	$˛o£_£rvi˚
()

1196 i‡(
is_£rvi˚_›í
) {

1197 
	`log_îr‹
(
MOD_DB
, "dbd close service");

1198 i‡(
game_c⁄n
 !
NULL
) {

1199 
	`fs_√t_c⁄√˘i⁄_de°roy
(
game_c⁄n
);

1200 
game_c⁄n
 = 
NULL
;

1203 i‡(
game_c⁄n_sync
 !
NULL
) {

1204 
	`fs_√t_c⁄√˘i⁄_de°roy
(
game_c⁄n_sync
);

1205 
game_c⁄n_sync
 = 
NULL
;

1208 
is_£rvi˚_›í
 = 0;

1210 
	}
}

1212 
	$›í_£rvi˚
(
fd
)

1214 i‡(!
is_£rvi˚_›í
) {

1215 
	`Ârötf
(
°dîr
, "open service\n");

1216 i‡(
game_c⁄n
 =
NULL
) {

1218 
c⁄n_fd
 = 
	`ac˚±
(
fd
, 
NULL
, NULL);

1219 i‡(
c⁄n_fd
 < 0) {

1220 
	`≥º‹
("accept game connection");

1223 
	`fs_√t_£t_n⁄block
(
c⁄n_fd
);

1224 
game_c⁄n
 = 
	`fs_√t_c⁄√˘i⁄_√w
(
c⁄n_fd
, 
game_c⁄√˘i⁄_ªcv
, 
NULL
,

1225 
game_c⁄√˘i⁄_îr‹
, 
game_max_outbuf
, 
NULL
);

1226 
	`Ârötf
(
°dîr
, "dbdác˚±ásyn¯game:%d\n", 
c⁄n_fd
);

1227 } i‡(
game_c⁄n_sync
 =
NULL
) {

1228 
sync_c⁄n_fd
 = 
	`ac˚±
(
fd
, 
NULL
, NULL);

1229 i‡(
sync_c⁄n_fd
 < 0) {

1230 
	`≥º‹
("accept sync game connection");

1233 
	`fs_√t_£t_n⁄block
(
sync_c⁄n_fd
);

1234 
game_c⁄n_sync
 = 
	`fs_√t_c⁄√˘i⁄_√w
(
sync_c⁄n_fd
, 
game_c⁄√˘i⁄_ªcv
, 
NULL
,

1235 
game_c⁄√˘i⁄_îr‹
, 
game_max_outbuf
, 
NULL
);

1236 
	`¥ötf
("dbdác˚±ánŸhîásyn¯gamêf‹ blockög:%d\n", 
sync_c⁄n_fd
);

1239 i‡(
game_c⁄n
 && 
game_c⁄n_sync
) {

1240 
is_£rvi˚_›í
 = 1;

1246 
	}
}

1249 
	$game_ac˚±
(
fd
, 
evty≥
, *
¨g
)

1251 i‡(0 > 
	`›í_£rvi˚
(
fd
)) {

1253 
c⁄n_fd
 = 
	`ac˚±
(
fd
, 
NULL
, NULL);

1254 
	`Ârötf
(
°dîr
, "denyánother gamed connection\n");

1256 
	`˛o£
(
c⁄n_fd
);

1258 
	}
}

1260 
	$Ωc_ˇŒ_imp
(
¨gc
, 
svÆue_t
 *
¨gv
)

1262 
gamed
;

1263 i‡(
	`fs_Ωc_Õc_∑ck_¨g
(
¨gc
, 
¨gv
, 
dbd_Ωc_Õc
, 
gamed_√tbuf
, &
gamed
)) {

1267 
	`FS_GD_SET_HEADER
((
fs_gd_hódî_t
*)
gamed_√tbuf
->
hód
, 
FS_GD_RPC
, 
gamed
, 
	`FS_NET_MBUF_PAYLOAD_LEN
(gamed_netbuf));

1268 
	`fs_√t_mbuf_£nd
(
gamed_√tbuf
, 
game_c⁄n
);

1270 
	}
}

1273 
	$dbd_shutdown_d´m⁄
()

1275 
	`fs_≠r_hash_de°ru˘
(&
dbo_ba£
);

1276 
	`≠r_ãrmö©e
();

1277 
	`fs_√t_mbuf_‰ì
(
gamed_√tbuf
);

1279 i‡(
game_ac˚±‹
 !
NULL
)

1280 
	`fs_√t_ac˚±‹_de°roy
(
game_ac˚±‹
);

1282 
	`evít_lo›exô
(
NULL
);

1283 
	}
}

1286 
	$sig«l_evít
(
sig
, 
evty≥
, *
¨g
)

1288 
	`log_îr‹_thr_ß„
(
MOD_DB
, "dbd c©ch sig«l:%d", 
sig
);

1289 i‡(
sig
 =
SIGINT
) {

1290 
£rülized_evít
 |
SEVENT_SIG_EXIT
;

1292 
£rülized_evít
 |
SEVENT_SIG_SAVE
;

1294 
	}
}

1298 
	$emîgícy_öãºu±
(
sig
)

1300 
	`log_îr‹_thr_ß„
(
MOD_DB
, "emîgícy i¡îru±:%d", 
sig
);

1301 
	`Êush_Æl_db_obje˘
();

1302 
	}
}

1304 
	$öô
()

1306 
	`evít_öô
();

1307 
	`öô_sig«l
(
sig«l_evít
, 
emîgícy_öãºu±
);

1308 
	`≠r_öôülize
();

1311 
	`ª°‹e_dbd_¥o˘ôÀ
();

1313 
	`fs_≠r_hash_c⁄°ru˘
(&
dbo_ba£
);

1315 i‡(
	`öô_bœckbﬂrd
()) {

1316 
	`exô
(1);

1319 
timevÆ
 
≥riod
;

1320 
≥riod
.
tv_£c
 = 
DBD_CALLOUT_SEC
;

1321 
≥riod
.
tv_u£c
 = 
DBD_CALLOUT_USEC
;

1322 
	`add_timî
(
≥riod
, 
thr_ß„_timeout_cb
, 
NULL
);

1324 
game_fd
 = 
	`fs_√t_li°í
(
dbd_ù
, 
dbd_p‹t
, 
backlog
, 0);

1325 i‡(
game_fd
 < 0) {

1326 
	`log_îr‹
(
MOD_DB
, "îr‹ dbdÜi°í:%s, %d", 
dbd_ù
, 
dbd_p‹t
);

1327 
	`exô
(1);

1329 
	`log_öfo
(
MOD_DB
, "dbdÜi°í:%s, %d", 
dbd_ù
, 
dbd_p‹t
);

1330 
game_ac˚±‹
 = 
	`fs_√t_ac˚±‹_√w
(
game_fd
, 
game_ac˚±
, 
NULL
);

1332 
gamed_√tbuf
 = 
	`fs_√t_mbuf_√w
((
fs_gd_hódî_t
));

1334 *
Ωc_cfg
 = 
	`fs_c⁄fig_gë_°rög
(
RPC_CFG
);

1335 
dbd_Ωc_Õc
 = 
	`fs_Ωc_Õc_¸óã
(
Ωc_cfg
, 
Ωc_ˇŒ_imp
);

1336 
	}
}

1338 
	$£tup_c⁄fig
()

1340 *
ù
 = 
	`fs_c⁄fig_gë_°rög
(
DBD_IP
);

1341 i‡(
ù
 !
NULL
) {

1342 
dbd_ù
 = 
	`°rdup
(
ù
);

1345 
p‹t
 = 
	`fs_c⁄fig_gë_öt
(
DBD_PORT
);

1346 i‡(
p‹t
 >= 0) {

1347 
dbd_p‹t
 = 
p‹t
;

1350 
	}
}

1352 
	$moduÀ_öô_dbd
()

1354 
	`£tup_c⁄fig
();

1355 
	`öô
();

1358 
£c
, 
u£c
;

1359 
£c
 = 
	`fs_c⁄fig_gë_öt
(
SYSTEM_INTERVAL_SEC
);

1360 
u£c
 = 
	`fs_c⁄fig_gë_öt
(
SYSTEM_INTERVAL_USEC
);

1361 
	`ˇŒout_öô
–
£c
, 
u£c
);

1362 
	`ˇŒout_öô
–
£c
, 
u£c
 );

1363 
	}
}

1365 
	$sy°em_°¨tup_dbd
()

1367 
	`ˇŒ_s¸ùt_func
("/rc/dbd_main", "main", "");

1368 
	`evít_di•©ch
();

1369 
	}
}

	@packages/db/fs_db_format.h

2 #i‚de‡
_FS_DB_FORMAT_H_


3 
	#_FS_DB_FORMAT_H_


	)

6 
	~"Õc.h
"

7 
	~"Õc_ö˛.h
"

8 
	~<evít.h
>

10 
fs_db_f‹m©_thr_ß„
(
svÆue_t
 *
sv
, 
evbuf„r
 *
outbuf
);

11 
fs_db_unf‹m©
(*
∑th«me
, *
sour˚
, 
size_t
 
Àn
, 
svÆue_t
 *
vÆue
);

	@packages/dbi.c

2 
	~"fs_dbi.h
"

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

8 
	$fs_dbi_¨øy_c⁄°ru˘
(
fs_dbi_¨øy_t
 *
¨øy
)

10 
	`fs_mbuf_öô
(&
¨øy
->
mbuf
, 0);

11 
¨øy
->
˙t
 = 
	`FS_MBUF_ALLOC
(&¨øy->
mbuf
, (*array->cnt));

12 *
¨øy
->
˙t
 = 0;

13 
	}
}

15 
	$fs_dbi_¨øy_ª£t
(
fs_dbi_¨øy_t
 *
¨øy
)

17 
	`fs_mbuf_ª£t
(&
¨øy
->
mbuf
);

18 
¨øy
->
˙t
 = 
	`FS_MBUF_ALLOC
(&¨øy->
mbuf
, (*array->cnt));

19 *
¨øy
->
˙t
 = 0;

20 
	}
}

22 
	$fs_dbi_¨øy_de°ru˘
(
fs_dbi_¨øy_t
 *
¨øy
)

24 
¨øy
->
˙t
 = 
NULL
;

25 
	`fs_mbuf_de°ru˘
(&
¨øy
->
mbuf
);

26 
	}
}

28 *
	$fs_dbi_¨øy_Æloc
(
fs_dbi_¨øy_t
 *
¨øy
, 
size
)

30 *
vÆ
 = 
	`FS_MBUF_ALLOC
(&
¨øy
->
mbuf
, 
size
);

31 (*
¨øy
->
˙t
)++;

32  
vÆ
;

33 
	}
}

35 
	$fs_dbi_¨øy_push_öt
(
fs_dbi_¨øy_t
 *
¨øy
, 
n
)

37 
fs_dbi_öt_t
 *
vÆ
 = 
	`fs_dbi_¨øy_Æloc
(
¨øy
, (*val));

38 
vÆ
->
ty≥
 = 
FS_DBI_INT
;

39 
vÆ
->
n
 =Ç;

40 
	}
}

42 
	$fs_dbi_¨øy_push_ªÆ
(
fs_dbi_¨øy_t
 *
¨øy
, 
r
)

44 
fs_dbi_ªÆ_t
 *
vÆ
 = 
	`fs_dbi_¨øy_Æloc
(
¨øy
, (*val));

45 
vÆ
->
ty≥
 = 
FS_DBI_REAL
;

46 
vÆ
->
r
 =Ñ;

47 
	}
}

49 
	$fs_dbi_¨øy_push_nû
(
fs_dbi_¨øy_t
 *
¨øy
)

51 
fs_dbi_nû_t
 *
vÆ
 = 
	`fs_dbi_¨øy_Æloc
(
¨øy
, (*val));

52 
vÆ
->
ty≥
 = 
FS_DBI_NIL
;

53 
	}
}

55 
	$fs_dbi_¨øy_push_l°rög
(
fs_dbi_¨øy_t
 *
¨øy
, *
°r
, 
size_t
 
Àn
)

57 
fs_dbi_°rög_t
 *
vÆ
 = 
	`fs_dbi_¨øy_Æloc
(
¨øy
, (*vÆË+ 
Àn
);

58 
vÆ
->
ty≥
 = 
FS_DBI_STRING
;

59 
vÆ
->
Àn
 =Üen;

60 
	`mem˝y
(
vÆ
->
°r
, så, 
Àn
);

61 
	}
}

63 
	$fs_dbi_¨øy_push_°rög
(
fs_dbi_¨øy_t
 *
¨øy
, *
°r
)

66 
	`fs_dbi_¨øy_push_l°rög
(
¨øy
, 
°r
, 
	`°æí
(str));

67 
	}
}

69 
	$fs_dbi_¨øy_push_¨øy
(
fs_dbi_¨øy_t
 *
¨øy
, 
˙t
)

71 
fs_dbi_¨r_t
 *
vÆ
 = 
	`fs_dbi_¨øy_Æloc
(
¨øy
, (*val));

72 
vÆ
->
ty≥
 = 
FS_DBI_ARRAY
;

73 
vÆ
->
˙t
 = cnt;

74 
	}
}

76 
	$fs_dbi_¨øy_£t_¨øy
(
fs_dbi_¨øy_t
 *
¨øy
, *
¨r
, 
˙t
)

78 
fs_dbi_¨r_t
 *
vÆ
 = 
¨r
;

79 
vÆ
->
ty≥
 = 
FS_DBI_ARRAY
;

80 
vÆ
->
˙t
 = cnt;

81 
	}
}

83 
	$fs_dbi_¨øy_push_m≠pög
(
fs_dbi_¨øy_t
 *
¨øy
, 
∑ú
)

85 
fs_dbi_m≠pög_t
 *
vÆ
 = 
	`fs_dbi_¨øy_Æloc
(
¨øy
, (*val));

86 
vÆ
->
ty≥
 = 
FS_DBI_MAPPING
;

87 
vÆ
->
∑ú
 =Öair;

88 
	}
}

90 
	$fs_dbi_¨øy_£t_m≠pög
(
fs_dbi_¨øy_t
 *
¨øy
, *
m≠
, 
∑ú
)

92 
fs_dbi_m≠pög_t
 *
vÆ
 = 
m≠
;

93 
vÆ
->
ty≥
 = 
FS_DBI_MAPPING
;

94 
vÆ
->
∑ú
 =Öair;

95 
	}
}

97 
	$fs_dbi_tvÆue_size
(
fs_dbi_tvÆue_t
 *
tvÆue
)

99 
tvÆue
->
comm⁄
.
ty≥
) {

100 
FS_DBI_NIL
:

101  (
fs_dbi_nû_t
);

102 
FS_DBI_INT
:

103  (
fs_dbi_öt_t
);

104 
FS_DBI_REAL
:

105  (
fs_dbi_ªÆ_t
);

106 
FS_DBI_ARRAY
:

107  (
fs_dbi_¨r_t
);

108 
FS_DBI_MAPPING
:

109  (
fs_dbi_m≠pög_t
);

110 
FS_DBI_STRING
:

111  ((
fs_dbi_°rög_t
Ë+ 
tvÆue
->
°rög
.
Àn
);

113 
	`as£π
(0);

116 
	}
}

	@packages/develop.c

1 #ifde‡
LATTICE


2 
	~"/Õc_ö˛.h
"

3 
	~"/comm.h
"

4 
	~"/md.h
"

5 
	~"/•rötf.h
"

7 
	~"ö˛ude/Õc_ö˛.h
"

8 
	~"ö˛ude/comm.h
"

9 
	~"ö˛ude/md.h
"

10 
	~"ö˛ude/•rötf.h
"

13 
obje˘_t
 *
	gob
;

15 #ifde‡
F_DEBUG_INFO


16 
	$f_debug_öfo
()

18 
svÆue_t
 *
¨g
;

19 
outbuf„r_t
 
out
;

21 
	`outbuf_zîo
(&
out
);

22 
¨g
 = 
•
 - 1;

23 
¨g
[0].
u
.
numbî
)

27 
i
, 
Êags
;

28 
obje˘_t
 *
obj2
;

30 
ob
 = 
¨g
[1].
u
.ob;

31 
Êags
 = 
ob
->flags;

32 
	`outbuf_addv
(&
out
, "O_HEART_BEAT : %s\n", 
Êags
 &
O_HEART_BEAT
 ? "TRUE" : "FALSE");

33 
	`outbuf_addv
(&
out
, "O_LISTENER : %s\n", 
Êags
 &
O_LISTENER
 ? "TRUE" : "FALSE");

34 
	`outbuf_addv
(&
out
, "O_CLONE : %s\n", 
Êags
 &
O_CLONE
 ? "TRUE" : "FALSE");

35 
	`outbuf_addv
(&
out
, "O_VIRTUAL : %s\n", 
Êags
 &
O_VIRTUAL
 ? "TRUE" : "FALSE");

36 
	`outbuf_addv
(&
out
, "O_DESTRUCTED : %s\n", 
Êags
 &
O_DESTRUCTED
 ? "TRUE" : "FALSE");

37 
	`outbuf_addv
(&
out
, "O_SWAPPED : %s\n", 
Êags
 &
O_SWAPPED
 ? "TRUE" : "FALSE");

38 
	`outbuf_addv
(&
out
, "O_ONCE_INTERACTIVE: %s\n", 
Êags
 &
O_ONCE_INTERACTIVE
 ? "TRUE" : "FALSE");

39 
	`outbuf_addv
(&
out
, "O_RESET_STATE : %s\n", 
Êags
 &
O_RESET_STATE
 ? "TRUE" : "FALSE");

40 
	`outbuf_addv
(&
out
, "O_WILL_CLEAN_UP : %s\n", 
Êags
 &
O_WILL_CLEAN_UP
 ? "TRUE" : "FALSE");

41 
	`outbuf_addv
(&
out
, "O_WILL_RESET: %s\n", 
Êags
 &
O_WILL_RESET
 ? "TRUE" : "FALSE");

42 
	`outbuf_addv
(&
out
, "time_of_ª‡: %d\n", 
ob
->
time_of_ªf
);

43 
	`outbuf_addv
(&
out
, "ª‡ : %d\n", 
ob
->
ªf
);

44 #ifde‡
DEBUG


45 
	`outbuf_addv
(&
out
, "exåa_ª‡ : %d\n", 
ob
->
exåa_ªf
);

47 
	`outbuf_addv
(&
out
, "sw≠_num : %d\n", 
ob
->
sw≠_num
);

48 
	`outbuf_addv
(&
out
, "«mê : '/%s'\n", 
ob
->
«me
);

49 
	`outbuf_addv
(&
out
, "√xt_Æ» : OBJ(/%s)\n", 
ob
->
√xt_Æl
 ? ob->√xt_Æl->
«me
: "NULL");

50 i‡(
obj_li°
 =
ob
)

52 
	`outbuf_add
(&
out
, "This object isÅhe head ofÅhe objectÜist.\n");

54 
obj2
 = 
obj_li°
, 
i
 = 1; obj2; obj2 = obj2->
√xt_Æl
, i++)

55 i‡(
obj2
->
√xt_Æl
 =
ob
)

57 
	`outbuf_addv
(&
out
, "Pªviou†obje˘ i¿obje˘Üi°: OBJ(/%s)\n", 
obj2
->
«me
);

58 
	`outbuf_addv
(&
out
, "posôi⁄ i¿obje˘Üi°:%d\n", 
i
);

63 
ob
 = 
¨g
[1].
u
.ob;

64 i‡(
ob
->
Êags
 &
O_SWAPPED
)

66 
	`outbuf_add
(&
out
, "Swapped\n");

69 
	`outbuf_addv
(&
out
, "¥ogømÑef'†%d\n", 
ob
->
¥og
->
ªf
);

70 
	`outbuf_addv
(&
out
, "Namê/%s\n", 
ob
->
¥og
->
«me
);

71 
	`outbuf_addv
(&
out
, "¥ogøm sizê%d\n", 
ob
->
¥og
->
¥ogøm_size
);

72 
	`outbuf_addv
(&
out
, "ru¡imêfun˘i⁄ÅabÀ %d (%dË\n", 
ob
->
¥og
->
num_fun˘i⁄s_tŸÆ
, ob->¥og->num_fun˘i⁄s_tŸÆ *((
ru¡ime_fun˘i⁄_u
) + 1) );

73 
	`outbuf_addv
(&
out
, "compûî fun˘i⁄ÅabÀ %d (%dË\n", 
ob
->
¥og
->
num_fun˘i⁄s_deföed
, ob->¥og->num_fun˘i⁄s_deföed *(
compûî_fun˘i⁄_t
) );

74 
	`outbuf_addv
(&
out
, "num såög†%d\n", 
ob
->
¥og
->
num_°rögs
);

75 
	`outbuf_addv
(&
out
, "num v¨†%d (%d)\n", 
ob
->
¥og
->
num_v¨übÀs_deföed
, ob->prog->num_variables_defined *((*) + () ) );

76 
	`outbuf_addv
(&
out
, "num inhîô†%d (%d)\n", 
ob
->
¥og
->
num_öhîôed
, ob->¥og->num_öhîôed *(
öhîô_t
) );

77 
	`outbuf_addv
(&
out
, "tŸÆ sizê%d\n", 
ob
->
¥og
->
tŸÆ_size
);

81 
i
;

82 
ob
 = 
¨g
[1].
u
.ob;

83 
i
 = 0; i < 
ob
->
¥og
->
num_v¨übÀs_tŸÆ
; i++)

86 
	`outbuf_addv
(&
out
, "%s: ", 
	`v¨übÀ_«me
(
ob
->
¥og
, 
i
) );

87 
	`svÆue_to_°rög
(&
ob
->
v¨übÀs
[
i
], &
out
, 2, 0, 0);

88 
	`outbuf_add
(&
out
, "\n");

93 
	`bad_¨g
(1, 
F_DEBUG_INFO
);

95 
	`p›_°ack
();

96 
	`p›_°ack
();

97 
	`outbuf_push
(&
out
);

98 
	}
}

101 #ifde‡
F_REFS


102 
	$f_ªfs
()

104 
r
;

106 
•
->
ty≥
)

108 
T_MAPPING
:

109 
r
 = 
•
->
u
.
m≠
->
ªf
;

111 
T_CLASS
:

112 
T_ARRAY
:

113 
r
 = 
•
->
u
.
¨r
->
ªf
;

115 
T_OBJECT
:

116 
r
 = 
•
->
u
.
ob
->
ªf
;

118 
T_FUNCTION
:

119 
r
 = 
•
->
u
.
Â
->
hdr
.
ªf
;

121 
T_BUFFER
:

122 
r
 = 
•
->
u
.
buf
->
ªf
;

125 
r
 = 0;

128 
	`‰ì_svÆue
(
•
, "f_refs");

129 
	`put_numbî
(
r
 - 1);

131 
	}
}

134 #i‡(
deföed
(
DEBUGMALLOC
Ë&& deföed(
DEBUGMALLOC_EXTENSIONS
))

135 #ifde‡
F_DEBUGMALLOC


136 
	$f_debugmÆloc
()

138 *
ªs
;

140 
ªs
 = 
	`dump_debugmÆloc
–(
•
 - 1)->
u
.
°rög
, sp->u.
numbî
);

141 
	`‰ì_°rög_svÆue
(--
•
);

142 
•
->
subty≥
 = 
STRING_MALLOC
;

143 
•
->
u
.
°rög
 = 
ªs
;

144 
	}
}

147 #ifde‡
F_SET_MALLOC_MASK


148 
	$f_£t_mÆloc_mask
()

150 
	`£t_mÆloc_mask
–(
•
--)->
u
.
numbî
);

151 
	}
}

154 #ifde‡
F_CHECK_MEMORY


155 
	$f_check_mem‹y
()

157 
	`check_Æl_blocks
–(
•
--)->
u
.
numbî
);

158 
	}
}

161 * 
deföed
(
DEBUGMALLOC_EXTENSIONS
)) */

163 #ifde‡
F_TRACE


164 
	$f_åa˚
()

166 
Ÿ
 = - 1;

168 i‡(
comm™d_givî
 && comm™d_givî->
öãø˘ive
)

170 
Ÿ
 = 
comm™d_givî
->
öãø˘ive
->
åa˚_Àvñ
;

171 
comm™d_givî
->
öãø˘ive
->
åa˚_Àvñ
 = 
•
->
u
.
numbî
;

173 
•
->
u
.
numbî
 = 
Ÿ
;

174 
	}
}

177 #ifde‡
F_TRACEPREFIX


178 
	$f_åa˚¥efix
()

180 *
ﬁd
 = 0;

182 i‡(
comm™d_givî
 && comm™d_givî->
öãø˘ive
)

184 
ﬁd
 = 
comm™d_givî
->
öãø˘ive
->
åa˚_¥efix
;

185 i‡(
•
->
ty≥
 &
T_STRING
)

187 
comm™d_givî
->
öãø˘ive
->
åa˚_¥efix
 = 
	`make_sh¨ed_°rög
(
•
->
u
.
°rög
);

188 
	`‰ì_°rög_svÆue
(
•
);

192 
comm™d_givî
->
öãø˘ive
->
åa˚_¥efix
 = 0;

195 i‡(
ﬁd
)

197 
	`put_sh¨ed_°rög
(
ﬁd
);

201 *
•
 = 
c⁄°0
;

203 
	}
}

	@packages/develop_spec.h

1 
	~"../gømm¨/•ec.h
"

3 
mixed
 
debug_öfo
(, 
obje˘
);

4 
ªfs
(
mixed
);

9 
dump_¥og
(
obje˘
, ...);

11 #i‡
deföed
(
PROFILING
Ë&& deföed(
HAS_MONCONTROL
)

15 #i‡(
deföed
(
DEBUGMALLOC
Ë&& deföed(
DEBUGMALLOC_EXTENSIONS
))

21 #i‡
deföed
(
NeXT
Ë&& deföed(
NEXT_MALLOC_DEBUG
)

	@packages/escape.c

26 
	~<˘y≥.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

35 
	$Cuæ_isuƒe£rved
(
ö
)

37 
ö
) {

56 
	}
}

59 *
	$uæ_ósy_esˇ≥
(c⁄° *
°rög
, 
öÀngth
)

61 
size_t
 
Æloc
 = (
öÀngth
?(size_t)öÀngth:
	`°æí
(
°rög
))+1;

62 *
ns
;

63 *
ã°ög_±r
 = 
NULL
;

64 
ö
;

65 
size_t
 
√wÀn
 = 
Æloc
;

66 
°rödex
=0;

67 
size_t
 
Àngth
;

69 
ns
 = 
	`mÆloc
(
Æloc
);

70 if(!
ns
)

71  
NULL
;

73 
Àngth
 = 
Æloc
-1;

74 
Àngth
--) {

75 
ö
 = *
°rög
;

77 i‡(
	`Cuæ_isuƒe£rved
(
ö
)) {

79 
ns
[
°rödex
++]=
ö
;

83 
√wÀn
 += 2;

84 if(
√wÀn
 > 
Æloc
) {

85 
Æloc
 *= 2;

86 
ã°ög_±r
 = 
	`ªÆloc
(
ns
, 
Æloc
);

87 if(!
ã°ög_±r
) {

88 
	`‰ì
–
ns
 );

89  
NULL
;

92 
ns
 = 
ã°ög_±r
;

96 
	`¢¥ötf
(&
ns
[
°rödex
], 4, "%%%02X", 
ö
);

98 
°rödex
+=3;

100 
°rög
++;

102 
ns
[
°rödex
]=0;

103  
ns
;

104 
	}
}

113 *
	$uæ_ósy_u√sˇ≥
(c⁄° *
°rög
, 
Àngth
, *
ﬁí
)

115 
Æloc
 = (
Àngth
?Àngth:()
	`°æí
(
°rög
))+1;

116 *
ns
 = 
	`mÆloc
(
Æloc
);

117 
ö
;

118 
°rödex
=0;

119 
hex
;

121 if–!
ns
 )

122  
NULL
;

124 --
Æloc
 > 0) {

125 
ö
 = *
°rög
;

127 if(('%' =
ö
Ë&& 
	`isxdigô
(
°rög
[1]) && isxdigit(string[2])) {

129 
hex°r
[3];

130 *
±r
;

131 
hex°r
[0] = 
°rög
[1];

132 
hex°r
[1] = 
°rög
[2];

133 
hex°r
[2] = 0;

135 
hex
 = 
	`°πoul
(
hex°r
, &
±r
, 16);

138 
ö
 = ()
hex
;

140 
°rög
+=2;

141 
Æloc
-=2;

142 } i‡('+' =
ö
) {

143 
ö
 = ' ';

146 
ns
[
°rödex
++] = 
ö
;

147 
°rög
++;

149 
ns
[
°rödex
]=0;

151 if(
ﬁí
)

153 *
ﬁí
 = 
°rödex
;

154  
ns
;

155 
	}
}

	@packages/escape.h

1 #i‚de‡
__ESCAPE_H


2 
	#__ESCAPE_H


	)

28 *
uæ_ósy_esˇ≥
(c⁄° *
°rög
, 
öÀngth
);

29 *
uæ_ósy_u√sˇ≥
(c⁄° *
°rög
, 
Àngth
, *
ﬁí
);

	@packages/fs.h

2 #i‚de‡
_FS_H_


3 
	#_FS_H_


	)

5 #i‡
deföed
(
__˝lu•lus
)

6 
	#FS_BEGIN_DECLS
 "C" {

	)

7 
	#FS_END_DECLS
 }

	)

9 
	#FS_BEGIN_DECLS


	)

10 
	#FS_END_DECLS


	)

15 
	#FS_CTASSERT_ENABLE
 
YES


	)

17 #i‡
deföed
(
FS_CTASSERT_ENABLE
)

18 
	#FS_CTASSERT
(
x
Ë
	`_FS_CTASSERT
(x, 
__LINE__
)

	)

19 
	#_FS_CTASSERT
(
x
, 
y
Ë
	`__FS_CTASSERT
(x, y)

	)

20 
	#__FS_CTASSERT
(
x
, 
y
Ë
	t__as£π
 ## 
	ty
[(xË? 1 : -1]

	)

22 
	tFS_CTASSERT
(
	tx
)

	)

23 
	t_FS_CTASSERT
(
	tx
, 
	ty
)

	)

24 
	t__FS_CTASSERT
(
	tx
, 
	ty
)

	)

	@packages/fs_cksum.h

37 #i‚de‡
_FS_CKSUM_


38 
	#_FS_CKSUM_


	)

40 
	~<sys/cdefs.h
>

42 
__BEGIN_DECLS


43 
cksum
(c⁄° *
buf
, 
off_t
 
Àn
, 
uöt32_t
 *
cvÆ
);

44 
	g__END_DECLS


	@packages/fs_comm.h

2 #i‚de‡
_FS_COMMON_H_


3 
	#_FS_COMMON_H_


	)

5 
	~"fs.h
"

6 
	~"fs_ùc.h
"

7 
	~"fs_mbuf.h
"

8 
	~"fs_comm.h
"

10 
	~"≠r_hash.h
"

11 
	~"≠r_poﬁs.h
"

13 
	~<evít.h
>

14 
	~<evutû.h
>

17 
	#FS_ERROR_OUTBUF_FULL
 -2

	)

20 
	#TIME_TAG_BEGIN
(
sw
, 
wh©
) \

21 
timevÆ
 
wh©
##
_begö
, wh©##
_íd
, wh©##
_dif
; \

22 i‡((
sw
)) { \

23 
	`gëtimeofday
(&
wh©
##
_begö
, 
NULL
); \

24 }

	)

25 
	#TIME_TAG_END
(
sw
, 
wh©
,
fmt
,
¨gs
...) \

26 i‡((
sw
)) {\

27 
	`gëtimeofday
(&
wh©
##
_íd
, 
NULL
); \

28 
	`timîsub
(&
wh©
##
_íd
, &wh©##
_begö
, &wh©##
_dif
); \

29 
	`Ârötf
(
°dîr
, #wh© "Åimedif‡£c=%ld,u£c=%ld,"
fmt
"\n", 
wh©
##
_dif
.
tv_£c
, wh©##_dif.
tv_u£c
, ##
¨gs
);\

30 }

	)

33 
fs_√t_ac˚±‹_s
 
	tfs_√t_ac˚±‹_t
;

34 
fs_√t_c⁄√˘i⁄_s
 
	tfs_√t_c⁄√˘i⁄_t
;

35 (*
	tevítcb
)(
	tfd
, 
	tevty≥
, *
	t¨g
);

37 
	sfs_√t_ac˚±‹_s
 {

38 
fd
;

39 
evít
 
ev
;

40 *
ud©a
;

43 
	sfs_√t_c⁄√˘i⁄_s
 {

44 
fd
;

45 
fs_vfd_t
 
vfd
;

46 
size_t
 
max_outbuf
;

47 
buf„ªvít
 *
bu„v
;

48 *
ud©a
;

52 
sig
;

53 
evít
 
ev
;

54 } 
	tfs_sig«l_t
;

57 
FS_BEGIN_DECLS


59 
fs_√t_ac˚±‹_t
 * 
	`fs_√t_ac˚±‹_√w
(
fd
, 
evítcb
 
ac˚±cb
 , *
ud©a
);

60 
	`fs_√t_ac˚±‹_de°roy
(
fs_√t_ac˚±‹_t
 *
ac˚±‹
);

61 
fs_√t_c⁄√˘i⁄_t
 * 
	`fs_√t_c⁄√˘i⁄_√w
(
fd
, 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
,

62 
evîr‹cb
 
îr‹cb
, 
size_t
 
max_outbuf
, *
ud©a
);

63 
fs_√t_c⁄√˘i⁄_t
 * 
	`fs_√t_c⁄√˘i⁄_√w_ext
(
fd
, 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
,

64 
evîr‹cb
 
îr‹cb
, 
size_t
 
max_outbuf
, size_à
ext
);

65 
	`fs_√t_c⁄√˘i⁄_de°roy
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
);

66 
	`fs_√t_c⁄√˘i⁄_£nd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, c⁄° *
buf
, 
size_t
 
Àn
);

67 
	`fs_√t_c⁄√˘i⁄_£nd_∑ckë
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, c⁄° *
hódî
, 
size_t
 
hdæí
,

68 c⁄° *
∑ylﬂd
, 
size_t
 
∂dÀn
);

69 
	`fs_√t_c⁄√˘i⁄_åy_Êush
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
);

70 
	`fs_√t_c⁄√˘i⁄_max_outbuf
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
size_t
 
max_outbuf
);

72 
	`fs_√t_li°í
(c⁄° *
ù
, 
p‹t
, 
backlog
, 
block
);

73 
	`fs_√t_£t_n⁄block
(
fd
);

74 
	`fs_√t_£t_block
(
fd
, *
rÊag
);

75 
	`fs_√t_c⁄√˘
(c⁄° *
ù
, 
p‹t
, 
block
);

77 
	`fs_sig«l_li°í
(
fs_sig«l_t
 *
s
, 
sig
, 
evítcb
 
h™dÀr
);

78 
	`fs_sig«l_ªmove
(
fs_sig«l_t
 *
s
);

79 
	`öô_sig«l
(
evítcb
 
sig«l_evít
, (*
sig«l_öãºu±
)());

81 
	`fs_ng_£nd_cmd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_ng_cmd_t
 
cmd
, 
fs_vfd_t
 
vfd
, *
buf
, 
size_t
 
Àn
);

82 
	`fs_gd_£nd_cmd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_cmd_t
 
cmd
, 
fs_uid_t
 
uid
, *
buf
, 
size_t
 
Àn
);

84 
fs_mbuf_s
;

85 
	`fs_gd_£nd_cmd_mbuf
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, 
fs_mbuf_s
 *
mbuf
);

86 
	`fs_gd_£nd_sync
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hdr
, 
fs_mbuf_t
 *
mbuf
);

87 
evbuf„r
 * 
	`fs_gd_ªcv_sync
(
fd
);

89 
	`fs_√t_mbuf_£nd
(
fs_√t_mbuf_t
 *
√tbuf
, 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
);

92 
FS_END_DECLS


96 (*
	tfs_°ack_dë‹_t
)(*
	tobj
, *
	tud©a
);

99 
size_t
 
obj_˙t
;

100 
size_t
 
obj_‹igsize
;

101 
size_t
 
obj_size
;

102 *
obj
;

103 
t›
;

104 
fs_°ack_dë‹_t
 
dë‹
;

105 *
ud©a
;

106 } 
	tfs_°ack_t
;

109 
	`fs_°ack_öô
(
fs_°ack_t
 *
°ack
, 
size_t
 
cou¡
, size_à
size
, 
fs_°ack_dë‹_t
 
dë‹
, *
ud©a
);

110 
	`fs_°ack_de°roy
(
fs_°ack_t
 *
°ack
);

111 
	`fs_°ack_push
(
fs_°ack_t
 *
°ack
, *
obj
);

112 *
	`fs_°ack_p›
(
fs_°ack_t
 *
°ack
);

113 
	`fs_°ack_is_fuŒ
(
fs_°ack_t
 *
°ack
);

114 
	`fs_°ack_is_em±y
(
fs_°ack_t
 *
°ack
);

115 
size_t
 
	`fs_°ack_size
(
fs_°ack_t
 *
°ack
);

117 
	#FS_STACK_FOREACH
(
°
, 
i
, 
objty≥
, 
o
) \

118 
i
 = 0; (ò< (
°
)->
t›
Ë&& (
o
 = (
objty≥
)&(°)->
obj
[i*(°)->
obj_size
]); ++i)

	)

121 
	sfs_ng_buf_s
 {

122 
fs_ng_hódî_t
 *
hód
;

123 
fs_mbuf_t
 
mbuf
;

124 } 
	tfs_ng_buf_t
;

126 
	`fs_ng_buf_öô
(
fs_ng_buf_t
 *
ngbuf
);

127 
	`fs_ng_buf_ª£t
(
fs_ng_buf_t
 *
ngbuf
);

128 
	`fs_ng_buf_de°roy
(
fs_ng_buf_t
 *
ngbuf
);

129 
	`fs_ng_buf_£nd
(
fs_ng_buf_t
 *
ngbuf
, 
fs_ng_cmd_t
 
cmd
, 
fs_uid_t
 
uid
, 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
);

131 
	sfs_hh_buf_s
 {

132 
fs_hh_hódî_t
 *
hód
;

133 
fs_mbuf_t
 
mbuf
;

134 } 
	tfs_hh_buf_t
;

136 
	`fs_hh_buf_öô
(
fs_hh_buf_t
 *
ngbuf
);

137 
	`fs_hh_buf_ª£t
(
fs_hh_buf_t
 *
ngbuf
);

138 
	`fs_hh_buf_de°roy
(
fs_hh_buf_t
 *
ngbuf
);

139 
	`fs_hh_buf_£nd
(
fs_hh_buf_t
 *
ngbuf
, 
fs_hh_cmd_t
 
cmd
, 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
);

142 
≠r_poﬁ_t
 *
poﬁ
;

143 
≠r_hash_t
 *
hash
;

144 } 
	tfs_≠r_hash_t
;

146 
	`fs_≠r_hash_c⁄°ru˘
(
fs_≠r_hash_t
 *
èbÀ
);

147 
	`fs_≠r_hash_de°ru˘
(
fs_≠r_hash_t
 *
èbÀ
);

150 
fd
;

151 
evbuf„r
 *
öevb
;

152 
evbuf„r
 *
ouãvb
;

153 } 
	tfs_iobuf_t
;

	@packages/fs_config.c

3 
	~"fs_c⁄fig.h
"

4 
	~"fs_Ωc_Õc.h
"

6 
	~<as£π.h
>

10 
ölöe
 
	$gë_öt_‰om_m≠
–
m≠pög_t
 * 
m≠
, * 
key
)

12 
svÆue_t
 
key_sv
, *
vÆ_sv
;

14 
key_sv
.
ty≥
 = 
T_STRING
;

15 
key_sv
.
subty≥
 = 
STRING_CONSTANT
;

16 
key_sv
.
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
key
);

18 
vÆ_sv
 = 
	`föd_ö_m≠pög
–
m≠
, &
key_sv
);

20 
	`¥ötf
–"[%s]ty≥ = [%d] vÆuê[%d]\n", 
key
, 
vÆ_sv
->
ty≥
, vÆ_sv->
u
.
numbî
 );

22 i‡–!
	`IS_LPC_INT
(
vÆ_sv
) )

24 
	`Ârötf
(
°dîr
, "OSÉº‹: Thêc⁄fig v¨ [%s]'†ty≥ i¢'àINT .\n", 
key
);

28  
vÆ_sv
->
u
.
numbî
;

29 
	}
}

31 
ölöe
 * 
	$gë_°rög_‰om_m≠
–
m≠pög_t
 * 
m≠
, * 
key
)

33 
svÆue_t
 
key_sv
, *
vÆ_sv
;

35 
key_sv
.
ty≥
 = 
T_STRING
;

36 
key_sv
.
subty≥
 = 
STRING_CONSTANT
;

37 
key_sv
.
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
key
);

39 
vÆ_sv
 = 
	`föd_ö_m≠pög
–
m≠
, &
key_sv
);

41 i‡–!
	`IS_LPC_STR
(
vÆ_sv
) )

43 
	`Ârötf
(
°dîr
, "OSÉº‹: Thêc⁄fig v¨ [%s]'†ty≥ i¢'àSåög .\n", 
key
);

44  
NULL
;

47  
vÆ_sv
->
u
.
°rög
;

48 
	}
}

50 
svÆue_t
 *
	$gë_c⁄fig_svÆue
()

52 
obje˘_t
 *
c⁄fig_ob
;

53 
c⁄fig_ödex
;

54 
ty≥
;

55 
svÆue_t
 * 
c⁄fig_sv
 = 
NULL
;

57 
c⁄fig_ob
 = 
	`föd_obje˘
(
CONFIG_OBJECT
);

58 i‡(
c⁄fig_ob
 =
NULL
)

60 
	`Ârötf
(
°dîr
, "OSÉº‹: Thêc⁄fig fûê%†wa†nŸÜﬂded.\n", 
CONFIG_OBJECT
);

61  
NULL
;

65 
c⁄fig_ödex
 = 
	`föd_globÆ_v¨übÀ
(
c⁄fig_ob
->
¥og
, "c⁄fig", &
ty≥
);

67 i‡–
c⁄fig_ödex
 == -1)

69 
	`Ârötf
(
°dîr
, "OSÉº‹: Thêc⁄fig fûê%†wa†lﬂded, buàha¢'àc⁄fig v¨.\n", 
CONFIG_OBJECT
);

70  
NULL
;

73 
c⁄fig_sv
 = &(
c⁄fig_ob
->
v¨übÀs
[
c⁄fig_ödex
]);

76 i‡–(
c⁄fig_sv
->
ty≥
 & 
T_MAPPING
) == 0)

78 
	`Ârötf
(
°dîr
, "OSÉº‹: Thêc⁄fig fûê%†wa†lﬂded, buàc⁄fig v¨'†ty≥ i†îr‹.\n", 
CONFIG_OBJECT
);

79  
NULL
;

82  
c⁄fig_sv
;

83 
	}
}

86 
	#MAX_LINE_LENGTH
 120

	)

88 
ölöe
 
	$i¢um
(*
°r
)

90 
c
;

91 
Àn
;

92 
i
;

94 
Àn
 = 
	`°æí
(
°r
);

96 
i
 = 0;

97 
i
 < 
Àn
) {

98 
c
 = 
°r
[
i
];

99 i‡(
c
 < '0' || c > '9') {

102 
i
++;

105 
	}
}

107 
	$lﬂd_c⁄fig_fûe
(*
fûíame
)

109 
°r
[
MAX_LINE_LENGTH
 * 4];

110 
Àn
, 
i
, 
j
;

111 
key
[
MAX_LINE_LENGTH
];

112 
vÆ
[
MAX_LINE_LENGTH
];

113 *
fmt
 = "%[^=]=%[^;]";

114 
tmp
[
MAX_LINE_LENGTH
];

115 
svÆue_t
 *
psvÆ
, 
skey
;

116 
FILE
 *
fûe
;

118 
fûe
 = 
	`f›í
(
fûíame
, "r");

119 i‡(!
fûe
) {

120 
	`Ârötf
(
°dîr
, "Eº‹: couldn'àföd o∏›í c⁄fig fûe: '%s'\n", 
fûíame
);

121 
	`exô
(-1);

124 
c⁄fig_m≠
 = 
	`Æloˇã_m≠pög
(0);

127 i‡(
	`fgës
(
°r
, (°r), 
fûe
Ë=
NULL
)

131 i‡(
°r
[0] == '#' || str[0] == '/' || str[0] == '\n' || str[0] == ' ') {

135 
Àn
 = 
	`°æí
(
°r
);

137 i‡(
Àn
 > 
MAX_LINE_LENGTH
) {

138 
	`Ârötf
(
°dîr
, "Eº‹ i¿c⁄fig fûe:Üöêtoÿl⁄g:\n%s...\n", 
°r
);

139 
	`exô
(-1);

142 
	`mem£t
(
tmp
, '\0', (tmp));

144 
i
 = 0;

145 
j
 = 0;

146 
i
 < 
Àn
) {

147 i‡(
°r
[
i
] != ' ') {

148 
tmp
[
j
++] = 
°r
[
i
];

150 
i
++;

153 i‡(
	`ssˇnf
(
tmp
, 
fmt
, &
key
, &
vÆ
) == 2) {

155 
	`TO_LPC_STR
(
skey
, 
key
);

157 i‡(
vÆ
[0] ='"' && vÆ[
	`°æí
(val) - 1] == '"') {

158 
vÆ
[
	`°æí
(val) - 1] = '\0';

159 
psvÆ
 = 
	`föd_f‹_ö£π
(
c⁄fig_m≠
, &
skey
, 1);

160 
	`£t_svÆue_sh¨ed_°rög
(
psvÆ
, 
vÆ
 + 1);

163 i‡(
	`i¢um
(
vÆ
)) {

164 
psvÆ
 = 
	`föd_f‹_ö£π
(
c⁄fig_m≠
, &
skey
, 1);

165 
	`£t_svÆue_numbî
(
psvÆ
, 
	`©oi
(
vÆ
));

167 
	`Ârötf
(
°dîr
, "Eº‹ i¿c⁄fig fûe: vÆÇŸ vÆid:%s, %s...\n", 
key
, 
vÆ
);

171 
	`Ârötf
(
°dîr
, "Eº‹ i¿c⁄fig fûe:ÜöênŸ vÆid: %s...\n", 
°r
);

174 
	`f˛o£
(
fûe
);

175 
	}
}

178 * 
	$fs_c⁄fig_gë_°rög
(*
key
)

180 
svÆue_t
 * 
c⁄fig_sv
 = 
	`gë_c⁄fig_svÆue
();

181 i‡(
c⁄fig_sv
 =
NULL
) {

182  
NULL
;

184  
	`gë_°rög_‰om_m≠
(
c⁄fig_sv
->
u
.
m≠
, 
key
);

185 
	}
}

187 
	$fs_c⁄fig_gë_öt
(*
key
)

189 
svÆue_t
 * 
c⁄fig_sv
 = 
	`gë_c⁄fig_svÆue
();

190 i‡(
c⁄fig_sv
 =
NULL
) {

193  
	`gë_öt_‰om_m≠
(
c⁄fig_sv
->
u
.
m≠
, 
key
);

194 
	}
}

196 
	$fs_c⁄fig_gë_ho°_h›
(
hid
, **
ù
, *
p‹t
)

198 
svÆue_t
 
öi_key
, 
hid_key
, 
ù_key
, 
h›_p‹t_key
;

199 
svÆue_t
 * 
c⁄fig_sv
 = 
	`gë_c⁄fig_svÆue
();

201 
	`£t_svÆue_sh¨ed_°rög
(&
öi_key
, 
SERVER_INI
);

202 
svÆue_t
 *
öi
 = 
	`föd_ö_m≠pög
(
c⁄fig_sv
->
u
.
m≠
, &
öi_key
);

203 i‡(
öi
->
ty≥
 !
T_MAPPING
) {

204 
	`‰ì_svÆue
(&
öi_key
, "server ini");

205 
	`Ârötf
(
°dîr
, "error!Ço server ini\n");

206 
îr‹
;

208 
	`‰ì_svÆue
(&
öi_key
, "server ini");

210 
	`£t_svÆue_numbî
(&
hid_key
, 
hid
);

211 
svÆue_t
 *
ho°
 = 
	`föd_ö_m≠pög
(
öi
->
u
.
m≠
, &
hid_key
);

212 i‡(
ho°
->
ty≥
 !
T_MAPPING
) {

213 
	`Ârötf
(
°dîr
, "îr‹!Çÿ£rvî ho°.hid:%d\n", 
hid
);

214 
îr‹
;

217 
	`£t_svÆue_sh¨ed_°rög
(&
ù_key
, "ip");

218 
	`£t_svÆue_sh¨ed_°rög
(&
h›_p‹t_key
, "hop_port");

219 
svÆue_t
 *
sù
 = 
	`föd_ö_m≠pög
(
ho°
->
u
.
m≠
, &
ù_key
);

220 
svÆue_t
 *
•‹t
 = 
	`föd_ö_m≠pög
(
ho°
->
u
.
m≠
, &
h›_p‹t_key
);

221 i‡(
	`IS_LPC_UNDEF
(
sù
Ë|| IS_LPC_UNDEF(
•‹t
Ë|| sù->
ty≥
 !
T_STRING
 || sp‹t->ty≥ !
T_NUMBER
) {

222 
	`Ârötf
(
°dîr
, "îr‹! ho°Çÿù o∏p‹t.hid:%d\n", 
hid
);

223 
	`‰ì_svÆue
(&
ù_key
, "host ip");

224 
	`‰ì_svÆue
(&
h›_p‹t_key
, "hostÖort");

225 
îr‹
;

228 *
ù
 = 
sù
->
u
.
°rög
;

229 *
p‹t
 = 
•‹t
->
u
.
numbî
;

230 
	`‰ì_svÆue
(&
ù_key
, "host hop");

231 
	`‰ì_svÆue
(&
h›_p‹t_key
, "host hop");

233 
îr‹
:

234 *
ù
 = 
NULL
;

235 *
p‹t
 = 0;

238 
	}
}

	@packages/fs_config.h

2 #i‚de‡
__FS_CONFIG_H__


3 
	#__FS_CONFIG_H__


	)

5 
	~"Õc_ö˛.h
"

6 
	~"obje˘.h
"

7 
	~"fs_Õc_›.h
"

9 
	#CONFIG_OBJECT
 "/rc/c⁄fig.c"

	)

11 
	#MAX_ONLINE_KEY
 "MAX_ONLINE"

	)

12 
	#MAX_LOGIN_KEY
 "MAX_LOGIN"

	)

13 
	#SYSTEM_INTERVAL_SEC
 "SYSTEM_INTERVAL_SEC"

	)

14 
	#SYSTEM_INTERVAL_USEC
 "SYSTEM_INTERVAL_USEC"

	)

15 
	#RPC_CFG
 "RPC_CFG"

	)

16 
	#NETD_IP
 "NETD_IP"

	)

17 
	#NETD_PORT
 "NETD_PORT"

	)

18 
	#NETD_OUTER_IP
 "NETD_OUTER_IP"

	)

20 
	#NETD_OUTER_PORT
 "NETD_OUTER_PORT"

	)

22 
	#NETD_HOST_PORT
 "NETD_HOST_PORT"

	)

23 
	#NETD_AUTH_PORT
 "NETD_AUTH_PORT"

	)

25 
	#HOST_ID
 "HOST_ID"

	)

27 
	#DBD_IP
 "DBD_IP"

	)

28 
	#DBD_PORT
 "DBD_PORT"

	)

29 
	#FS_PATH
 "FS_PATH"

	)

30 
	#ENGINE_NAME
 "ENGINE_NAME"

	)

31 
	#SERVER_INI
 "SERVER_INI"

	)

33 
	#HTTPD_PORT
 "HTTPD_PORT"

	)

35 * 
fs_c⁄fig_gë_°rög
(*
key
);

36 
fs_c⁄fig_gë_öt
(*
key
);

38 
svÆue_t
 *
gë_c⁄fig_svÆue
();

39 
fs_c⁄fig_gë_ho°_h›
(
hid
, **
ù
, *
p‹t
);

	@packages/fs_curl.c

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<°dlib.h
>

46 
	~<sys/time.h
>

47 
	~<time.h
>

48 
	~<uni°d.h
>

49 
	~<sys/pﬁl.h
>

50 
	~<cuæ/cuæ.h
>

51 
	~<evít.h
>

52 
	~<f˙é.h
>

53 
	~<sys/°©.h
>

54 
	~<î∫o.h
>

56 
	~"Õc.h
"

58 
	~"Õc_ö˛.h
"

59 
	~"Õc_¨gs_›.h
"

60 
	~"fs_Õc_›.h
"

61 
	~"fs_cuæ.h
"

63 
	#MSG_OUT
 
°dout


	)

67 
	s_GlobÆInfo
 {

68 
evít
 
	mtimî_evít
;

69 
CURLM
 *
	mmu…i
;

70 
	m°ûl_ru¬ög
;

71 } 
	tGlobÆInfo
;

73 
GlobÆInfo
 *
	gg_öfo
 = 
NULL
;

76 *
	md©a
;

77 
size_t
 
	md©a_Àn
;

78 
size_t
 
	md©a_Æloc
;

79 } 
	tfs_°rög_t
;

81 
	$fs_°rög_öô
(
fs_°rög_t
 *
°r
)

83 
°r
->
d©a
 = 
NULL
;

84 
°r
->
d©a_Àn
 = 0;

85 
°r
->
d©a_Æloc
 = 0;

86 
	}
}

88 
	$fs_°rög_deöô
(
fs_°rög_t
 *
°r
)

90 i‡(
°r
->
d©a
) {

91 
	`‰ì
(
°r
->
d©a
);

93 
	}
}

95 
fs_°rög_t
 * 
	$fs_°rög_√w
()

97 
fs_°rög_t
 *
°r
 = 
	`ˇŒoc
(1, (fs_string_t));

98 
	`fs_°rög_öô
(
°r
);

99  
°r
;

100 
	}
}

102 
	$fs_°rög_‰ì
(
fs_°rög_t
 *
°r
)

104 
	`fs_°rög_deöô
(
°r
);

105 
	`‰ì
(
°r
);

106 
	}
}

108 
	$fs_°rög_≠≥nd
(
fs_°rög_t
 *
°r
, *
d©a
, 
size_t
 
Àn
)

110 
size_t
 
√ed
 = 
°r
->
d©a_Àn
 + 
Àn
;

111 i‡(
√ed
 > 
°r
->
d©a_Æloc
) {

112 
size_t
 
ex∑ndto
 = 
°r
->
d©a_Æloc
 * 2;

113 
size_t
 
√wÆloc
 = 
ex∑ndto
 > 
√ed
 ?Éxpandto :Çeed;

114 
°r
->
d©a
 = 
	`ªÆloc
(°r->d©a, 
√wÆloc
);

115 
°r
->
d©a_Æloc
 = 
√wÆloc
;

117 
	`mem˝y
(
°r
->
d©a
 + så->
d©a_Àn
, d©a, 
Àn
);

118 
°r
->
d©a_Àn
 +
Àn
;

119 
	}
}

122 
	s_C⁄nInfo
 {

123 
CURL
 *
	mósy
;

124 
GlobÆInfo
 *
	mglobÆ
;

125 
	mîr‹
[
CURL_ERROR_SIZE
];

127 
cuæ_¶i°
 *
	mªqhódî
;

128 
fs_°rög_t
 *
	mhódî
;

129 
fs_°rög_t
 *
	mc⁄ã¡
;

130 
svÆue_t
 
	mfun˘i⁄
;

131 
svÆue_t
 
	mud©a
;

132 } 
	tC⁄nInfo
;

134 
	$‰ì_c⁄n
(
C⁄nInfo
 *
c⁄n
)

136 
	`cuæ_mu…i_ªmove_h™dÀ
(
g_öfo
->
mu…i
, 
c⁄n
->
ósy
);

137 
	`cuæ_ósy_˛ónup
(
c⁄n
->
ósy
);

139 i‡(
c⁄n
->
ªqhódî
) {

140 
	`cuæ_¶i°_‰ì_Æl
(
c⁄n
->
ªqhódî
);

143 i‡(
c⁄n
->
hódî
) {

144 
	`fs_°rög_‰ì
(
c⁄n
->
hódî
);

146 i‡(
c⁄n
->
c⁄ã¡
) {

147 
	`fs_°rög_‰ì
(
c⁄n
->
c⁄ã¡
);

149 
	`‰ì_svÆue
(&
c⁄n
->
fun˘i⁄
, "curl");

150 
	`‰ì_svÆue
(&
c⁄n
->
ud©a
, "curl");

152 
	`‰ì
(
c⁄n
);

153 
	}
}

156 
	s_SockInfo
 {

157 
cuæ_sockë_t
 
	msockfd
;

158 
CURL
 *
	mósy
;

159 
	ma˘i⁄
;

160 
	mtimeout
;

161 
evít
 
	mev
;

162 
	mev£t
;

163 
GlobÆInfo
 *
	mglobÆ
;

164 } 
	tSockInfo
;

169 
	$mu…i_timî_cb
(
CURLM
 *
mu…i
, 
timeout_ms
, 
GlobÆInfo
 *
g
)

171 
timevÆ
 
timeout
;

172 ()
mu…i
;

174 
timeout
.
tv_£c
 = 
timeout_ms
/1000;

175 
timeout
.
tv_u£c
 = (
timeout_ms
%1000)*1000;

176 
	`Ârötf
(
MSG_OUT
, "mu…i_timî_cb: SëtögÅimeouàtÿ%ld ms\n", 
timeout_ms
);

177 
	`evtimî_add
(&
g
->
timî_evít
, &
timeout
);

179 
	}
}

182 
	$mcode_‹_dõ
(c⁄° *
whîe
, 
CURLMcode
 
code
)

184 i‡–
CURLM_OK
 !
code
 ) {

185 c⁄° *
s
;

186 
code
) {

187 
CURLM_CALL_MULTI_PERFORM
: 
s
="CURLM_CALL_MULTI_PERFORM"; ;

188 
CURLM_BAD_HANDLE
: 
s
="CURLM_BAD_HANDLE"; ;

189 
CURLM_BAD_EASY_HANDLE
: 
s
="CURLM_BAD_EASY_HANDLE"; ;

190 
CURLM_OUT_OF_MEMORY
: 
s
="CURLM_OUT_OF_MEMORY"; ;

191 
CURLM_INTERNAL_ERROR
: 
s
="CURLM_INTERNAL_ERROR"; ;

192 
CURLM_UNKNOWN_OPTION
: 
s
="CURLM_UNKNOWN_OPTION"; ;

193 
CURLM_LAST
: 
s
="CURLM_LAST"; ;

194 : 
s
="CURLM_unknown";

196 
CURLM_BAD_SOCKET
: 
s
="CURLM_BAD_SOCKET";

197 
	`Ârötf
(
MSG_OUT
, "ERROR: %†ªtu∫†%s\n", 
whîe
, 
s
);

201 
	`Ârötf
(
MSG_OUT
, "ERROR: %†ªtu∫†%s\n", 
whîe
, 
s
);

202 
	`exô
(
code
);

204 
	}
}

209 
	$check_mu…i_öfo
(
GlobÆInfo
 *
g
)

211 *
eff_uæ
;

212 
CURLMsg
 *
msg
;

213 
msgs_À·
;

214 
C⁄nInfo
 *
c⁄n
;

215 
CURL
 *
ósy
;

216 
CURLcode
 
ªs
;

218 
	`Ârötf
(
MSG_OUT
, "REMAINING: %d\n", 
g
->
°ûl_ru¬ög
);

219 (
msg
 = 
	`cuæ_mu…i_öfo_ªad
(
g
->
mu…i
, &
msgs_À·
))) {

220 i‡(
msg
->msg =
CURLMSG_DONE
) {

221 
ósy
 = 
msg
->
ósy_h™dÀ
;

222 
ªs
 = 
msg
->
d©a
.
ªsu…
;

223 
	`cuæ_ósy_gëöfo
(
ósy
, 
CURLINFO_PRIVATE
, (**)&
c⁄n
);

224 
	`cuæ_ósy_gëöfo
(
ósy
, 
CURLINFO_EFFECTIVE_URL
, &
eff_uæ
);

225 
	`Ârötf
(
MSG_OUT
, "DONE: %†=> (%dË%s\n", 
eff_uæ
, 
ªs
, 
c⁄n
->
îr‹
);

227 
¨gc
 = 4;

228 
íd
 = '\0';

229 
ª•⁄£_code
;

230 
	`cuæ_ósy_gëöfo
(
ósy
, 
CURLINFO_RESPONSE_CODE
, &
ª•⁄£_code
);

231 
	`push_svÆue
(&
c⁄n
->
ud©a
);

232 
	`push_numbî
(
ª•⁄£_code
);

233 
	`fs_°rög_≠≥nd
(
c⁄n
->
hódî
, &
íd
, (end));

234 
	`fs_°rög_≠≥nd
(
c⁄n
->
c⁄ã¡
, &
íd
, (end));

235 
	`c›y_™d_push_°rög
(
c⁄n
->
hódî
->
d©a
);

236 
	`c›y_™d_push_°rög
(
c⁄n
->
c⁄ã¡
->
d©a
);

237 
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
c⁄n
->
fun˘i⁄
.
u
.
Â
, 
¨gc
);

238 
	`‰ì_c⁄n
(
c⁄n
);

241 
	}
}

246 
	$evít_cb
(
fd
, 
köd
, *
u£Ω
)

248 
GlobÆInfo
 *
g
 = (GlobÆInfo*Ë
u£Ω
;

249 
CURLMcode
 
rc
;

251 
a˘i⁄
 =

252 (
köd
 & 
EV_READ
 ? 
CURL_CSELECT_IN
 : 0) |

253 (
köd
 & 
EV_WRITE
 ? 
CURL_CSELECT_OUT
 : 0);

255 
rc
 = 
	`cuæ_mu…i_sockë_a˘i⁄
(
g
->
mu…i
, 
fd
, 
a˘i⁄
, &g->
°ûl_ru¬ög
);

256 
	`mcode_‹_dõ
("evít_cb: cuæ_mu…i_sockë_a˘i⁄", 
rc
);

258 
	`check_mu…i_öfo
(
g
);

259 i‡–
g
->
°ûl_ru¬ög
 <= 0 ) {

260 
	`Ârötf
(
MSG_OUT
, "lastÅransfer done, killÅimeout\n");

261 i‡(
	`evtimî_≥ndög
(&
g
->
timî_evít
, 
NULL
)) {

262 
	`evtimî_dñ
(&
g
->
timî_evít
);

265 
	}
}

270 
	$timî_cb
(
fd
, 
köd
, *
u£Ω
)

272 
GlobÆInfo
 *
g
 = (GlobÆInfÿ*)
u£Ω
;

273 
CURLMcode
 
rc
;

274 ()
fd
;

275 ()
köd
;

277 
rc
 = 
	`cuæ_mu…i_sockë_a˘i⁄
(
g
->
mu…i
,

278 
CURL_SOCKET_TIMEOUT
, 0, &
g
->
°ûl_ru¬ög
);

279 
	`mcode_‹_dõ
("timî_cb: cuæ_mu…i_sockë_a˘i⁄", 
rc
);

280 
	`check_mu…i_öfo
(
g
);

281 
	}
}

286 
	$ªmsock
(
SockInfo
 *
f
)

288 i‡(
f
) {

289 
	`˛o£
(
f
->
sockfd
);

290 i‡(
f
->
ev£t
)

291 
	`evít_dñ
(&
f
->
ev
);

292 
	`‰ì
(
f
);

294 
	}
}

299 
	$£tsock
(
SockInfo
*
f
, 
cuæ_sockë_t
 
s
, 
CURL
*
e
, 
a˘
, 
GlobÆInfo
*
g
)

301 
köd
 =

302 (
a˘
&
CURL_POLL_IN
?
EV_READ
:0)|◊˘&
CURL_POLL_OUT
?
EV_WRITE
:0)|
EV_PERSIST
;

304 
f
->
sockfd
 = 
s
;

305 
f
->
a˘i⁄
 = 
a˘
;

306 
f
->
ósy
 = 
e
;

307 i‡(
f
->
ev£t
)

308 
	`evít_dñ
(&
f
->
ev
);

309 
	`evít_£t
(&
f
->
ev
, f->
sockfd
, 
köd
, 
evít_cb
, 
g
);

310 
f
->
ev£t
=1;

311 
	`evít_add
(&
f
->
ev
, 
NULL
);

312 
	}
}

317 
	$addsock
(
cuæ_sockë_t
 
s
, 
CURL
 *
ósy
, 
a˘i⁄
, 
GlobÆInfo
 *
g
) {

318 
SockInfo
 *
fdp
 = 
	`ˇŒoc
((SockInfo), 1);

320 
fdp
->
globÆ
 = 
g
;

321 
	`£tsock
(
fdp
, 
s
, 
ósy
, 
a˘i⁄
, 
g
);

322 
	`cuæ_mu…i_assign
(
g
->
mu…i
, 
s
, 
fdp
);

323 
	}
}

326 
	$sock_cb
(
CURL
 *
e
, 
cuæ_sockë_t
 
s
, 
wh©
, *
cbp
, *
sockp
)

328 
GlobÆInfo
 *
g
 = (GlobÆInfo*Ë
cbp
;

329 
SockInfo
 *
fdp
 = (SockInfo*Ë
sockp
;

330 c⁄° *
wh©°r
[]={ "none", "IN", "OUT", "INOUT", "REMOVE" };

332 
	`Ârötf
(
MSG_OUT
,

333 "sockë cÆlback: s=%dÉ=%∞wh©=%†", 
s
, 
e
, 
wh©°r
[
wh©
]);

334 i‡(
wh©
 =
CURL_POLL_REMOVE
) {

335 
	`Ârötf
(
MSG_OUT
, "\n");

336 
	`ªmsock
(
fdp
);

339 i‡(!
fdp
) {

340 
	`Ârötf
(
MSG_OUT
, "Addög d©a: %s\n", 
wh©°r
[
wh©
]);

341 
	`addsock
(
s
, 
e
, 
wh©
, 
g
);

344 
	`Ârötf
(
MSG_OUT
,

346 
wh©°r
[
fdp
->
a˘i⁄
], wh©°r[
wh©
]);

347 
	`£tsock
(
fdp
, 
s
, 
e
, 
wh©
, 
g
);

351 
	}
}

355 
size_t
 
	$wrôe_hódî_cb
(*
±r
, 
size_t
 
size
, size_à
nmemb
, *
d©a
)

357 
size_t
 
ªÆsize
 = 
size
 * 
nmemb
;

358 
C⁄nInfo
 *
c⁄n
 = (C⁄nInfo*Ë
d©a
;

360 
	`fs_°rög_≠≥nd
(
c⁄n
->
hódî
, 
±r
, 
ªÆsize
);

362  
ªÆsize
;

363 
	}
}

367 
size_t
 
	$wrôe_cb
(*
±r
, 
size_t
 
size
, size_à
nmemb
, *
d©a
)

369 
size_t
 
ªÆsize
 = 
size
 * 
nmemb
;

370 
C⁄nInfo
 *
c⁄n
 = (C⁄nInfo*Ë
d©a
;

372 
	`fs_°rög_≠≥nd
(
c⁄n
->
c⁄ã¡
, 
±r
, 
ªÆsize
);

374  
ªÆsize
;

375 
	}
}

392 
	$£t_›t
(
C⁄nInfo
 *
c⁄n
, 
m≠pög_t
 *
›t
)

394 
i
, 
j
;

395 
m≠pög_node_t
 *
ñt
;

396 
svÆue_t
 *
k
, *
v
;

398 i‡(
›t
->
cou¡
 == 0) {

402 
i
 = 0; i <
›t
->
èbÀ_size
; ++i) {

403 
ñt
 = 
›t
->
èbÀ
[
i
];É… !
NULL
;É… =É…->
√xt
) {

404 
k
 = 
ñt
->
vÆues
;

405 
v
 = 
ñt
->
vÆues
 + 1;

406 i‡(
k
->
ty≥
 !
T_STRING
) {

407 
	`Ârötf
(
°dîr
, "opt key should be string\n");

411 i‡(
	`°rcmp
(
k
->
u
.
°rög
, "CURLOPT_URL") == 0) {

412 i‡(
v
->
ty≥
 !
T_STRING
) {

413 
	`Ârötf
(
°dîr
, "CURLOPT_URL should be string\n");

416 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_URL
, 
v
->
u
.
°rög
);

417 } i‡(
	`°rcmp
(
k
->
u
.
°rög
, "CURLOPT_POSTFIELDS") == 0) {

418 i‡(
v
->
ty≥
 !
T_STRING
) {

419 
	`Ârötf
(
°dîr
, "CURLOPT_POSTFIELDS should be string\n");

422 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_POSTFIELDS
, 
v
->
u
.
°rög
);

423 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_POSTFIELDSIZE
, 
	`SVALUE_STRLEN
(
v
));

424 } i‡(
	`°rcmp
(
k
->
u
.
°rög
, "CURLOPT_HTTPHEADER") == 0) {

425 i‡(
v
->
ty≥
 !
T_ARRAY
) {

426 
	`Ârötf
(
°dîr
, "CURLOPT_HTTPHEADER should beárray\n");

429 
cuæ_¶i°
 *
hódî
 = 
NULL
;

430 
j
 = 0; j < 
v
->
u
.
¨r
->
size
; j++) {

431 i‡(
v
->
u
.
¨r
->
ôem
[
j
].
ty≥
 !
T_STRING
) {

432 i‡(
hódî
) {

433 
	`cuæ_¶i°_‰ì_Æl
(
hódî
);

435 
	`Ârötf
(
°dîr
, "CURLOPT_HTTPHEADER header should be string\n");

438 
hódî
 = 
	`cuæ_¶i°_≠≥nd
(hódî, 
v
->
u
.
¨r
->
ôem
[
j
].u.
°rög
);

440 i‡(
hódî
) {

441 
c⁄n
->
ªqhódî
 = 
hódî
;

442 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_HTTPHEADER
, c⁄n->
ªqhódî
);

444 } i‡(
	`°rcmp
(
k
->
u
.
°rög
, "CURLOPT_SSL_VERIFYPEER") == 0) {

445 i‡(
v
->
ty≥
 !
T_NUMBER
) {

446 
	`Ârötf
(
°dîr
, "CURLOPT_SSL_VERIFYPEER header should beÇumber\n");

449 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_SSL_VERIFYPEER
, ()
v
->
u
.
numbî
);

450 } i‡(
	`°rcmp
(
k
->
u
.
°rög
, "CURLOPT_SSL_VERIFYHOST") == 0) {

451 i‡(
v
->
ty≥
 !
T_NUMBER
) {

452 
	`Ârötf
(
°dîr
, "CURLOPT_SSL_VERIFYHOST header should beÇumber\n");

455 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_SSL_VERIFYHOST
, ()
v
->
u
.
numbî
);

461 
	}
}

464 
	$√w_c⁄n
(
m≠pög_t
 *
›t
, 
svÆue_t
 *
fun˘i⁄
, svÆue_à*
ud©a
)

466 
C⁄nInfo
 *
c⁄n
;

467 
CURLMcode
 
rc
;

468 
GlobÆInfo
 *
g
 = 
g_öfo
;

470 
c⁄n
 = 
	`ˇŒoc
(1, (
C⁄nInfo
));

471 
c⁄n
->
îr‹
[0]='\0';

473 
c⁄n
->
ósy
 = 
	`cuæ_ósy_öô
();

474 i‡(!
c⁄n
->
ósy
) {

475 
	`Ârötf
(
MSG_OUT
, "curl_easy_init() failed,Éxiting!\n");

476 
	`exô
(2);

478 
c⁄n
->
globÆ
 = 
g
;

483 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_WRITEFUNCTION
, 
wrôe_cb
);

484 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_WRITEDATA
, conn);

485 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_HEADERFUNCTION
, 
wrôe_hódî_cb
);

486 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_HEADERDATA
, conn);

487 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_ERRORBUFFER
, c⁄n->
îr‹
);

488 
	`cuæ_ósy_£t›t
(
c⁄n
->
ósy
, 
CURLOPT_PRIVATE
, conn);

494 
c⁄n
->
ªqhódî
 = 
NULL
;

495 
c⁄n
->
fun˘i⁄
 = 
c⁄°0u
;

496 
c⁄n
->
ud©a
 = 
c⁄°0u
;

497 
c⁄n
->
hódî
 = 
	`fs_°rög_√w
();

498 
c⁄n
->
c⁄ã¡
 = 
	`fs_°rög_√w
();

499 
	`assign_svÆue
(&
c⁄n
->
fun˘i⁄
, function);

500 
	`assign_svÆue
(&
c⁄n
->
ud©a
, udata);

501 i‡(0 =
	`£t_›t
(
c⁄n
, 
›t
)) {

502 
	`Ârötf
(
MSG_OUT
, "AddögÉasy %∞tÿmu…ò%∞\n", 
c⁄n
->
ósy
, 
g
->
mu…i
);

503 
rc
 = 
	`cuæ_mu…i_add_h™dÀ
(
g
->
mu…i
, 
c⁄n
->
ósy
);

504 
	`mcode_‹_dõ
("√w_c⁄n: cuæ_mu…i_add_h™dÀ", 
rc
);

509 
	`‰ì
(
c⁄n
);

512 
	}
}

514 
	$fs_cuæ_öô
()

516 i‡(
g_öfo
 =
NULL
) {

517 
g_öfo
 = 
	`ˇŒoc
(1, (
GlobÆInfo
));

518 
g_öfo
->
mu…i
 = 
	`cuæ_mu…i_öô
();

519 
	`evtimî_£t
(&
g_öfo
->
timî_evít
, 
timî_cb
, g_info);

522 
	`cuæ_mu…i_£t›t
(
g_öfo
->
mu…i
, 
CURLMOPT_SOCKETFUNCTION
, 
sock_cb
);

523 
	`cuæ_mu…i_£t›t
(
g_öfo
->
mu…i
, 
CURLMOPT_SOCKETDATA
, g_info);

524 
	`cuæ_mu…i_£t›t
(
g_öfo
->
mu…i
, 
CURLMOPT_TIMERFUNCTION
, 
mu…i_timî_cb
);

525 
	`cuæ_mu…i_£t›t
(
g_öfo
->
mu…i
, 
CURLMOPT_TIMERDATA
, g_info);

533 
	}
}

535 
	$fs_cuæ_deöô
()

537 i‡(
g_öfo
 !
NULL
) {

538 
	`cuæ_mu…i_˛ónup
(
g_öfo
->
mu…i
);

539 
	`‰ì
(
g_öfo
);

541 
	}
}

543 
	$f_fs_cuæ_ªque°
()

545 
ªt
;

546 
SET_ALL_ARGS
;

547 
m≠pög_t
 *
›t
 = 
	`ARGS
(0)->
u
.
m≠
;

548 
svÆue_t
 *
fun˘i⁄
 = 
	`ARGS
(1);

549 
svÆue_t
 *
ud©a
 = 
	`ARGS
(2);

550 
ªt
 = 
	`√w_c⁄n
(
›t
, 
fun˘i⁄
, 
ud©a
);

551 
POP_ALL_ARGS
;

552 
	`push_numbî
(
ªt
);

553 
	}
}

	@packages/fs_curl.h

2 #i‚de‡
_FS_CURL_H


3 
	#_FS_CURL_H


	)

5 
fs_cuæ_öô
();

6 
fs_cuæ_deöô
();

	@packages/fs_data_save.c

2 
	~"fs_d©a_ßve.h
"

3 
	~"fs_Õc_›.h
"

4 
	~"Õc_¨gs_›.h
"

5 
	~"mÆloc_ö˛.h
"

6 
	~"fs_ùc.h
"

7 
	~"fs_m¨shÆ.h
"

8 
	~"dúty.h
"

10 
	~<as£π.h
>

12 
	#OBJ_FAST_NAME
 "Á°_ödex"

	)

13 *
	gßve_v¨_li°
 = "_GDBArray";

15 
fs_≠r_hash_t
 
	gdb_obj_ba£
 = {
NULL
, NULL};

17 
g_sync_dbd_fd
;

19 
ölöe
 
	$gë_dúty_∑th
(
dúty_m™age_t
 *
mng
, 
fs_dbi_¨øy_t
 *
¨r
)

21 *
dbi_¨r
;

22 
c
 = 0;

23 
dbi_¨r
 = 
	`fs_dbi_¨øy_Æloc
(
¨r
, (
fs_dbi_¨r_t
));

25  ; 
mng
->
∑ª¡
; mng = 
	`gë_m™age
(mng->∑ª¡), 
c
++) {

26 
mng
->
∑ª¡
->
ty≥
) {

27 
T_MAPPING
: {

28 
svÆue_t
 *
key
 = 
mng
->
£lf_key
.
m≠_key
;

29 
key
->
ty≥
) {

30 
T_NUMBER
:

31 
	`fs_dbi_¨øy_push_öt
(
¨r
, 
key
->
u
.
numbî
);

33 
T_REAL
:

34 
	`fs_dbi_¨øy_push_ªÆ
(
¨r
, 
key
->
u
.
ªÆ
);

36 
T_STRING
:

37 
	`fs_dbi_¨øy_push_l°rög
(
¨r
, 
key
->
u
.
°rög
, 
	`SVALUE_STRLEN
(key));

40 
	`as£π
(0);

44 
T_ARRAY
:

45 
	`fs_dbi_¨øy_push_öt
(
¨r
, 
mng
->
£lf_key
.
¨r_ödex
);

48 
	`as£π
(0);

52 
	`fs_dbi_¨øy_£t_¨øy
(
¨r
, 
dbi_¨r
, 
c
);

53 
	}
}

56 
ölöe
 
	$gë_m≠_dúty_d©a
(
svÆue_t
 *
svm≠
, 
fs_dbi_¨øy_t
 *
¨r
)

58 
m≠pög_t
 *
m≠
 = 
svm≠
->
u
.map;

59 
dúty_m™age_t
 *
mng
 = 
m≠
->
dúty_mng
;

60 
dúty_node_t
 *
dúty_node
 = 
mng
->dirty_node;

61 
dúty_key_t
 *
dk
;

63 
	`as£π
(
svm≠
->
ty≥
 =
T_MAPPING
);

64 
	`as£π
(
mng
->
£lf
 =
svm≠
);

66 
	`gë_dúty_∑th
(
mng
, 
¨r
);

68 
	`fs_dbi_¨øy_push_m≠pög
(
¨r
, 
dúty_node
->
key_˙t
);

71 
	`TAILQ_FOREACH
(
dk
, &
dúty_node
->
dúty_key_li°
, 
íåy
) {

72 
dk
->
dúty_›
) {

73 
DIRTY_SET
:

74 
DIRTY_ADD
: {

75 
svÆue_t
 *
key
 = 
dk
->key.
m≠_key
;

76 
svÆue_t
 *
vÆue
 = 
key
 + 1;

77 
	`as£π
(
vÆue
 =
	`föd_ö_m≠pög
(
m≠
, 
key
));

79 
	`fs_m¨shÆ
(
key
, 
¨r
);

80 
	`fs_m¨shÆ
(
vÆue
, 
¨r
);

83 
DIRTY_DEL
:

84 
	`fs_m¨shÆ
(&
dk
->
key
.
dñ
, 
¨r
);

85 
	`fs_m¨shÆ
(&
c⁄°0u
, 
¨r
);

90 
	}
}

92 
ölöe
 
	$gë_¨r_dúty_d©a
(
svÆue_t
 *
sv¨r
, 
fs_dbi_¨øy_t
 *
¨r
)

94 
¨øy_t
 *
¨øy
 = 
sv¨r
->
u
.
¨r
;

95 
dúty_m™age_t
 *
mng
 = 
¨øy
->
dúty_mng
;

96 
dúty_node_t
 *
dúty_node
 = 
mng
->dirty_node;

97 
dúty_key_t
 *
dk
;

99 
	`as£π
(
sv¨r
->
ty≥
 =
T_ARRAY
);

101 
	`gë_dúty_∑th
(
mng
, 
¨r
);

103 
	`fs_dbi_¨øy_push_¨øy
(
¨r
, 
dúty_node
->
key_˙t
 * 2);

105 
	`TAILQ_FOREACH
(
dk
, &
dúty_node
->
dúty_key_li°
, 
íåy
) {

106 
dk
->
dúty_›
) {

107 
DIRTY_SET
:

108 
DIRTY_ADD
: {

109 
idx
 = 
dk
->
key
.
¨r_ödex
;

110 
svÆue_t
 
key
;

111 
	`£t_svÆue_numbî
(&
key
, 
idx
);

112 
svÆue_t
 *
vÆue
 = &
¨øy
->
ôem
[
idx
];

113 
	`fs_m¨shÆ
(&
key
, 
¨r
);

114 
	`fs_m¨shÆ
(
vÆue
, 
¨r
);

118 
DIRTY_DEL
:

119 
	`fs_m¨shÆ
(&
dk
->
key
.
dñ
, 
¨r
);

120 
	`fs_m¨shÆ
(&
c⁄°0u
, 
¨r
);

125 
	}
}

128 
	$fs_m¨shÆ_dúty_m≠
(
svÆue_t
 *
svm≠
, 
fs_dbi_¨øy_t
 *
¨øy
)

131 
m≠pög_t
 *
m≠
 = 
svm≠
->
u
.map;

132 
dúty_m™age_t
 *
mng
 = 
m≠
->
dúty_mng
;

133 
dúty_roŸ_t
 *
dúty_roŸ
 = 
mng
->dirty_root;

134 
dúty_node_t
 *
dúty_node
;

135 
svÆue_t
 *
node
;

137 
	`as£π
(
mng
);

138 
	`as£π
(
	`IS_DIRTY_ROOT
(
mng
));

139 
	`as£π
(
svm≠
->
ty≥
 =
T_MAPPING
);

142 
	`fs_dbi_¨øy_push_m≠pög
(
¨øy
, 
dúty_roŸ
->
node_˙t
);

143 
	`TAILQ_FOREACH
(
dúty_node
, &
dúty_roŸ
->
dúty_node_li°
, 
íåy
) {

144 
node
 = 
dúty_node
->
mng
->
£lf
;

145 
node
->
ty≥
) {

146 
T_MAPPING
: {

147 
	`gë_m≠_dúty_d©a
(
node
, 
¨øy
);

150 
T_ARRAY
: {

151 
	`gë_¨r_dúty_d©a
(
node
, 
¨øy
);

155 
	`as£π
(0);

158 
	}
}

160 
	$db_obje˘_íabÀ_dúty
(
obje˘_t
 *
obj
)

162 
svÆue_t
 *
v¨_li°
;

163 
¨øy_t
 *
li°
;

164 
i
;

166 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

170 
v¨_li°
 = 
	`föd_obje˘_v¨übÀ
(
obj
, 
ßve_v¨_li°
);

171 
	`as£π
(
v¨_li°
->
ty≥
 =
T_ARRAY
);

172 
li°
 = 
v¨_li°
->
u
.
¨r
;

174 
i
 = 0; i < 
li°
->
size
; ++i) {

175 
svÆue_t
 *
ov
 = 
	`föd_obje˘_v¨übÀ
(
obj
, 
li°
->
ôem
[
i
].
u
.
°rög
);

176 
	`begö_dúty_m™age_m≠
(
ov
, 
NULL
, NULL);

182 
	}
}

184 
	$dump_dúty_d©a
(
svÆue_t
 *
sv
)

186 
dúty_key_t
 *
dk
;

187 
dúty_node_t
 *
dúty_node
;

188 
dúty_m™age_t
 *
mng
 = 
	`gë_m™age
(
sv
);

190 i‡(
sv
->
ty≥
 !
T_MAPPING
) {

195 i‡(
mng
 =
NULL
) {

200 
dúty_m™age_t
 *
roŸ_mng
 = 
	`gë_m™age
(
mng
->
roŸ
);

201 
dúty_roŸ_t
 *
dúty_roŸ
 = 
roŸ_mng
->dirty_root;

203 
	`TAILQ_FOREACH
(
dúty_node
, &
dúty_roŸ
->
dúty_node_li°
, 
íåy
) {

208 
dúty_node
 = 
mng
->dirty_node;

209 i‡(
dúty_node
 =
NULL
) {

215 
	`TAILQ_FOREACH
(
dk
, &
dúty_node
->
dúty_key_li°
, 
íåy
) {

216 
dk
->
dúty_›
) {

217 
DIRTY_SET
: {

218 
svÆue_t
 *
key
 = 
dk
->key.
m≠_key
;

219 
svÆue_t
 *
vÆue
 = 
key
 + 1;

221 
	`¥ötf
("*** së dúty k:%s,v:%s\n", 
	`ßve_v¨übÀ
(
key
), save_v¨übÀ(
vÆue
));

224 
DIRTY_ADD
: {

225 
svÆue_t
 *
key
 = 
dk
->key.
m≠_key
;

226 
svÆue_t
 *
vÆue
 = 
key
 + 1;

228 
	`¥ötf
("***ádd dúty k:%s,v:%s\n", 
	`ßve_v¨übÀ
(
key
), save_v¨übÀ(
vÆue
));

231 
DIRTY_DEL
:

232 
	`¥ötf
("*** dñ dúty k:%s\n", 
	`ßve_v¨übÀ
(&
dk
->
key
.
dñ
));

236 
	}
}

238 
	$f_¥öt_m≠_dúty
()

240 
svÆue_t
 *
d©a
 = 
•
;

241 
	`dump_dúty_d©a
(
d©a
);

242 
	`p›_°ack
();

243 
	}
}

247 
ölöe
 
svÆue_t
 *
	$gë_dúe˘ed_node
(
svÆue_t
 *
node
, svÆue_à*
key
)

249 
node
->
ty≥
) {

250 
T_MAPPING
: {

251  
	`föd_ö_m≠pög
(
node
->
u
.
m≠
, 
key
);

253 
T_ARRAY
: {

254 
¨øy_t
 *
¨r
 = 
node
->
u
.arr;

255  &
¨r
->
ôem
[
key
->
u
.
numbî
];

258 
	`as£π
(0);

259  
NULL
;

261 
	}
}

263 
ölöe
 
svÆue_t
 *
	$gë_node
(
svÆue_t
 *
roŸ
, 
fs_dbi_¨øy_ôî_t
 *
ôî
)

265 
	`as£π
(
ôî
->
tv
->
comm⁄
.
ty≥
 =
FS_DBI_ARRAY
);

267 
i
, 
˙t
;

268 
svÆue_t
 *
keys
, *
key
, *
node
;

269 
svÆue_t
 
v
 = 
c⁄°0u
;

271 
˙t
 = 
ôî
->
tv
->
¨r
.cnt;

272 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

274 
keys
 = 
	`ˇŒoc
(
˙t
, (
v
));

275 
i
 = 0; i < 
˙t
; ++i) {

276 
	`fs_unm¨shÆ
(&
v
, 
ôî
);

277 
	`mem˝y
(
keys
 + 
i
, &
v
, (v));

281 
i
 = 0, 
node
 = 
roŸ
; i < 
˙t
; ++i) {

282 
key
 = &
keys
[
˙t
 - 
i
 - 1];

283 
node
 = 
	`gë_dúe˘ed_node
“ode, 
key
);

284 
	`as£π
(
key
->
ty≥
 =
T_NUMBER
 || key->ty≥ =
T_STRING
);

285 
	`as£π
(
node
->
ty≥
 =
T_MAPPING
 ||Çode->ty≥ =
T_ARRAY
);

288 
i
 = 0; i < 
˙t
; ++i) {

289 
	`‰ì_svÆue
(&
keys
[
i
], "freeÖath");

292 
	`‰ì
(
keys
);

294  
node
;

295 
	}
}

297 
ölöe
 
	$mîge_dúty_m≠
(
m≠pög_t
 *
m≠
, 
fs_dbi_¨øy_ôî_t
 *
ôî
)

299 
i
;

300 
svÆue_t
 
k
 = 
c⁄°0u
, 
v
 = c⁄°0u, *
lv
 = 
NULL
;

301 
∑ú
 = 
ôî
->
tv
->
m≠
.pair;

303 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

305 
i
 = 0; i < 
∑ú
; ++i) {

306 
	`fs_unm¨shÆ
(&
k
, 
ôî
);

307 
	`as£π
(
k
.
ty≥
 =
T_NUMBER
 || k.ty≥ =
T_REAL
 || k.ty≥ =
T_STRING
);

308 
	`fs_unm¨shÆ
(&
v
, 
ôî
);

310 i‡(
	`IS_LPC_UNDEF
(&
v
)) {

311 
	`m≠pög_dñëe
(
m≠
, &
k
);

313 
lv
 = 
	`föd_f‹_ö£π
(
m≠
, &
k
, 0);

314 
	`assign_svÆue
(
lv
, &
v
);

315 
	`‰ì_svÆue
(&
v
, "merge");

317 
	`‰ì_svÆue
(&
k
, "merge");

319 
	}
}

321 
ölöe
 
	$mîge_dúty_¨r
(
¨øy_t
 *
¨r
, 
fs_dbi_¨øy_ôî_t
 *
ôî
)

323 
i
, 
idx
;

324 
svÆue_t
 
k
 = 
c⁄°0u
, 
v
 = const0u;

325 
∑ú
 = 
ôî
->
tv
->
¨r
.
˙t
/2;

327 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

328 
i
 = 0; i < 
∑ú
; ++i) {

329 
	`fs_unm¨shÆ
(&
k
, 
ôî
);

330 
	`as£π
(
k
.
ty≥
 =
T_NUMBER
);

331 
idx
 = 
k
.
u
.
numbî
;

332 
	`as£π
(0 <
idx
 && idx < 
¨r
->
size
);

333 
	`fs_unm¨shÆ
(&
v
, 
ôî
);

334 
	`assign_svÆue
(&
¨r
->
ôem
[
idx
], &
v
);

336 
	`‰ì_svÆue
(&
k
, "merge");

337 
	`‰ì_svÆue
(&
v
, "merge");

339 
	}
}

341 
ölöe
 
	$h™dÀ_dúty_m≠
(
svÆue_t
 *
roŸ
, 
fs_dbi_¨øy_ôî_t
 *
ôî
)

343 
∑ú
, 
i
;

344 
svÆue_t
 *
node
;

346 
	`as£π
(
ôî
->
tv
->
comm⁄
.
ty≥
 =
FS_DBI_MAPPING
);

348 
∑ú
 = 
ôî
->
tv
->
m≠
.pair;

349 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

352 
i
 = 0; i < 
∑ú
; ++i) {

354 
node
 = 
	`gë_node
(
roŸ
, 
ôî
);

355 
node
->
ty≥
) {

356 
T_MAPPING
: {

357 
	`mîge_dúty_m≠
(
node
->
u
.
m≠
, 
ôî
);

360 
T_ARRAY
:

361 
	`mîge_dúty_¨r
(
node
->
u
.
¨r
, 
ôî
);

365 
	`as£π
(0);

368 
	}
}

370 
	$mîge_dúty_db_obje˘_to_m≠
(
svÆue_t
 *
roŸ
, 
fs_dbi_¨øy_ôî_t
 *
ôî
)

372 
i
, 
∑ú
;

373 
svÆue_t
 *
mv
;

374 
svÆue_t
 
key
 = 
c⁄°0u
;

377 
	`as£π
(
roŸ
->
ty≥
 =
T_MAPPING
);

378 
	`as£π
(
ôî
->
tv
->
comm⁄
.
ty≥
 =
FS_DBI_MAPPING
);

380 
∑ú
 = 
ôî
->
tv
->
m≠
.pair;

381 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

385 
i
 = 0; i < 
∑ú
; ++i) {

386 
	`fs_unm¨shÆ
(&
key
, 
ôî
);

388 
	`as£π
(
ôî
->
tv
->
comm⁄
.
ty≥
 =
FS_DBI_MAPPING
);

389 
	`as£π
(
key
.
ty≥
 =
T_STRING
);

390 
mv
 = 
	`föd_f‹_ö£π
(
roŸ
->
u
.
m≠
, &
key
, 0);

391 i‡(
	`IS_LPC_UNDEF
(
mv
)) {

392 
m≠pög_t
 *
m
 = 
	`Æloˇã_m≠pög
(1);

393 
	`£t_svÆue_m≠pög
(
mv
, 
m
);

396 
	`h™dÀ_dúty_m≠
(
mv
, 
ôî
);

398 
	`‰ì_svÆue
(&
key
, "free dirty key");

402 
	}
}

405 
	$db_obje˘_unm¨shÆ
(
obje˘_t
 *
obj
, 
fs_dbi_¨øy_ôî_t
 *
ôî
)

407 
i
;

408 
¨øy_t
 *
li°
;

409 
svÆue_t
 *
v¨_li°
;

410 
m≠pög_node_t
 *
ñt
;

411 
m≠pög_t
 *
m≠
;

412 
svÆue_t
 
svm≠
 = 
c⁄°0u
;

414 
v¨_li°
 = 
	`föd_obje˘_v¨übÀ
(
obj
, 
ßve_v¨_li°
);

415 
	`as£π
(
v¨_li°
->
ty≥
 =
T_ARRAY
);

416 
li°
 = 
v¨_li°
->
u
.
¨r
;

418 
	`fs_unm¨shÆ
(&
svm≠
, 
ôî
);

419 
	`as£π
(
svm≠
.
ty≥
 =
T_MAPPING
);

420 
m≠
 = 
svm≠
.
u
.map;

421 
i
 = ()
m≠
->
èbÀ_size
;

423 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

427 i‡(
li°
->
size
 !
m≠
->
cou¡
) {

429 
	`Ârötf
(
°dîr
, "db obje˘ unm¨shÆ u√quÆ size.size:%d,cou¡:%d\n", 
li°
->
size
, 
m≠
->
cou¡
);

434 
ñt
 = 
m≠
->
èbÀ
[
i
];É…;É… =É…->
√xt
) {

437 
svÆue_t
 *
mk
 = 
ñt
->
vÆues
;

438 
svÆue_t
 *
mv
 = 
ñt
->
vÆues
 + 1;

439 
	`as£π
(
mk
->
ty≥
 =
T_STRING
);

441 
svÆue_t
 *
v
 = 
	`föd_obje˘_v¨übÀ
(
obj
, 
mk
->
u
.
°rög
);

442 if(
	`IS_LPC_UNDEF
(
v
)) {

444 
	`Ârötf
(
°dîr
, "db obje˘ unm¨shÆ mis†key i¿v¨s.key:%s\n", 
mk
->
u
.
°rög
);

446 
	`assign_svÆue
(
v
, 
mv
);

449 } 
i
--);

451 
	`‰ì_svÆue
(&
svm≠
, "free dat db");

453 
	}
}

455 
ölöe
 
	$db_obje˘_m¨shÆ
(
obje˘_t
 *
obj
, 
fs_dbi_¨øy_t
 *
¨r
)

457 
svÆue_t
 *
v¨_li°
;

458 
¨øy_t
 *
li°
;

459 
i
;

461 
v¨_li°
 = 
	`föd_obje˘_v¨übÀ
(
obj
, 
ßve_v¨_li°
);

462 
	`as£π
(
v¨_li°
->
ty≥
 =
T_ARRAY
);

463 
li°
 = 
v¨_li°
->
u
.
¨r
;

465 
	`fs_dbi_¨øy_push_m≠pög
(
¨r
, 
li°
->
size
);

466 
i
 = 0; i < 
li°
->
size
; ++i) {

467 
svÆue_t
 *
ov
 = 
	`föd_obje˘_v¨übÀ
(
obj
, 
li°
->
ôem
[
i
].
u
.
°rög
);

468 i‡(
	`IS_LPC_UNDEF
(
ov
)) {

471 
	`as£π
(0);

475 if(
ov
->
ty≥
 !
T_MAPPING
) {

476 
	`Ârötf
(
°dîr
, "îr‹ obje˘ m¨shÆ key:%s,v:%s\n", 
	`ßve_v¨übÀ
(&
li°
->
ôem
[
i
]), save_v¨übÀ(
ov
));

477 
	`as£π
(0);

480 
	`fs_m¨shÆ
(&
li°
->
ôem
[
i
], 
¨r
);

482 
	`fs_m¨shÆ
(
ov
, 
¨r
);

484 
	}
}

487 
	$db_obje˘_m¨shÆ_dúty
(
obje˘_t
 *
obj
, 
fs_dbi_¨øy_t
 *
¨r
)

489 
svÆue_t
 *
v¨_li°
;

490 
¨øy_t
 *
li°
;

491 
i
;

492 
c
 = 0;

493 *
dbi_m≠
;

495 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

499 
v¨_li°
 = 
	`föd_obje˘_v¨übÀ
(
obj
, 
ßve_v¨_li°
);

500 
	`as£π
(
v¨_li°
->
ty≥
 =
T_ARRAY
);

502 
li°
 = 
v¨_li°
->
u
.
¨r
;

504 
dbi_m≠
 = 
	`fs_dbi_¨øy_Æloc
(
¨r
, (
fs_dbi_m≠pög_t
));

505 
i
 = 0; i < 
li°
->
size
; ++i) {

506 
svÆue_t
 *
ov
 = 
	`föd_obje˘_v¨übÀ
(
obj
, 
li°
->
ôem
[
i
].
u
.
°rög
);

509 i‡(
ov
->
ty≥
 !
T_MAPPING
) {

510 
	`Ârötf
(
°dîr
, "marshal dirtyÉrror! %s db_var must be mapping in %s\n",

511 
li°
->
ôem
[
i
].
u
.
°rög
, 
obj
->
¥og
->
«me
);

512 
	`as£π
(
ov
->
ty≥
 =
T_MAPPING
);

514 
dúty_m™age_t
 *
roŸ_mng
 = 
	`gë_m™age
(
ov
);

515 i‡(
roŸ_mng
 !
NULL
) {

516 i‡(
roŸ_mng
->
dúty_roŸ
->
node_˙t
 > 0) {

518 
	`fs_m¨shÆ
(&
li°
->
ôem
[
i
], 
¨r
);

520 
	`fs_m¨shÆ_dúty_m≠
(
ov
, 
¨r
);

521 
	`˛ór_dúty
(
ov
);

522 
c
++;

525 
	`Ârötf
(
°dîr
, "îr‹! %†ha†nŸ dúty m™agî\n", 
li°
->
ôem
[
i
].
u
.
°rög
);

528 
	`fs_dbi_¨øy_£t_m≠pög
(
¨r
, 
dbi_m≠
, 
c
);

529  
c
;

530 
	}
}

533 
ölöe
 
	$t›_m¨shÆ_dúty
(
svÆue_t
 *
key
, svÆue_à*
vÆue
, 
fs_dbi_¨øy_t
 *
¨r
)

535 
dúty_m™age_t
 *
roŸ_mng
 = 
	`gë_m™age
(
vÆue
);

536 i‡(
roŸ_mng
 !
NULL
) {

537 i‡(
roŸ_mng
->
dúty_roŸ
->
node_˙t
 > 0) {

538 
	`fs_m¨shÆ
(
key
, 
¨r
);

539 
	`fs_m¨shÆ_dúty_m≠
(
vÆue
, 
¨r
);

540 
	`˛ór_dúty
(
vÆue
);

545 
	}
}

547 
ölöe
 
	$t›_m¨shÆ
(
svÆue_t
 *
key
, svÆue_à*
vÆue
, 
fs_dbi_¨øy_t
 *
¨r
)

549 
	`fs_m¨shÆ
(
key
, 
¨r
);

550 
	`fs_m¨shÆ
(
vÆue
, 
¨r
);

552 
	}
}

554 (*
	tm¨shÆ_f_t
)(
	tsvÆue_t
 *, svÆue_t*, 
	tfs_dbi_¨øy_t
*);

556 
	$db_obje˘_m¨shÆ_ôî
(
obje˘_t
 *
obj
, 
fs_db_obje˘_ödex_t
 *
ödex
, 
fs_dbi_¨øy_t
 *
¨r
, 
m¨shÆ_f_t
 
h™dÀr
)

558 
i
;

559 
c
 = 0;

560 *
dbi_m≠
;

561 
fs_db_obje˘_∑ú_t
 *
∑ú
;

563 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

567 
dbi_m≠
 = 
	`fs_dbi_¨øy_Æloc
(
¨r
, (
fs_dbi_m≠pög_t
));

568 
i
 = 0; i < 
ödex
->
˙t
; ++i) {

569 
∑ú
 = &
ödex
->
∑ús
[
i
];

570 
svÆue_t
 *
ok
 = &
∑ú
->
sv«me
;

571 
svÆue_t
 *
ov
 = &
obj
->
v¨übÀs
[
∑ú
->
ödex
];

572 
	`as£π
(
ok
->
ty≥
 =
T_STRING
);

573 
	`as£π
(
ov
->
ty≥
 =
T_MAPPING
);

574 
c
 +
	`h™dÀr
(
ok
, 
ov
, 
¨r
);

576 
	`fs_dbi_¨øy_£t_m≠pög
(
¨r
, 
dbi_m≠
, 
c
);

577  
c
;

578 
	}
}

583 
	$db_m≠_unm¨shÆ
(
svÆue_t
 *
svm≠
, 
fs_dbi_¨øy_ôî_t
 *
ôî
)

585 
svÆue_t
 
m≠
 = 
c⁄°0u
;

587 
	`fs_unm¨shÆ
(&
m≠
, 
ôî
);

589 i‡(
m≠
.
ty≥
 !
T_MAPPING
) {

590 
	`‰ì_svÆue
(&
m≠
, "db userÑecv");

594 
	`assign_svÆue
(
svm≠
, &
m≠
);

595 
	`‰ì_svÆue
(&
m≠
, "db datÑecv");

597 
	}
}

599 
	$db_m≠_m¨shÆ_to
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, 
db_key_t
 *
key
, 
svÆue_t
 *
svm≠
, 
sid
)

602 
fs_dbi_¨øy_t
 
¨r
;

603 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

605 
	`db_key_push
(
key
, &
¨r
);

606 
	`fs_dbi_¨øy_push_öt
(&
¨r
, 
sid
);

608 i‡(
svm≠
 !
NULL
) {

610 
	`fs_m¨shÆ
(
svm≠
, &
¨r
);

613 
	`fs_gd_£nd_cmd_mbuf
(
c⁄n
, 
hódî
, &
¨r
.
mbuf
);

614 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

616 
	}
}

618 
	$∑ck_gd_hódî
(
fs_gd_hódî_t
 *
hódî
, 
svÆue_t
 *
k
, 
fs_dbi_¨øy_t
 *
¨r
)

620 i‡(
k
->
ty≥
 =
T_NUMBER
) {

621 
hódî
->
uid
 = 
k
->
u
.
numbî
;

622 
hódî
->
Êag
 = 
FS_GD_FLAG_INT_KEY
;

624 } i‡(
k
->
ty≥
 =
T_STRING
) {

625 
hódî
->
uid
 = 
FS_NULL_UID
;

626 
hódî
->
Êag
 = 
FS_GD_FLAG_STR_KEY
;

627 
	`fs_dbi_¨øy_push_l°rög
(
¨r
, 
k
->
u
.
°rög
, 
	`SVALUE_STRLEN
(k) + 1);

632 
	}
}

634 
fs_db_obje˘_ªcv
(
fs_gd_hódî_t
 *
hódî
, *
d©a
, 
size_t
 
Àn
);

636 
	$lﬂd_db_sync
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hdr
, 
fs_mbuf_t
 *
mbuf
)

638 i‡(0 =
	`fs_gd_£nd_sync
(
c⁄n
, 
hdr
, 
mbuf
)) {

639 
evbuf„r
 *
öevb
 = 
	`fs_gd_ªcv_sync
(
g_sync_dbd_fd
);

640 i‡(
öevb
 !
NULL
) {

641 
fs_gd_hódî_t
 *
ªthódî
 = (*)
	`EVBUFFER_DATA
(
öevb
);

642 *
d©a
 = (*)(
ªthódî
->
∑ylﬂd_Àn
 =0 ? 
NULL
 :Ñetheader + 1);

644 i‡(
ªthódî
->
cmd
 =
FS_GD_CMD_DB_OBJ_DATA
) {

645 
ªt
 = 
	`fs_db_obje˘_ªcv
(
ªthódî
, 
d©a
,Ñëhódî->
∑ylﬂd_Àn
);

646 
	`evbuf„r_‰ì
(
öevb
);

647  
ªt
;

649 
	`Ârötf
(
°dîr
, "dbd i≈uàunknow cmd:%d\n", 
ªthódî
->
cmd
);

650 
	`evbuf„r_‰ì
(
öevb
);

657 
	}
}

659 
	$fs_db_obje˘_£nd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_cmd_t
 
cmd
, 
svÆue_t
 *
k
, 
obje˘_t
 *
obj
)

661 
ªt
 = 0;

662 
fs_dbi_¨øy_t
 
¨r
;

663 
fs_gd_hódî_t
 
hódî
;

665 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

666 
	`Ârötf
(
°dîr
, "îr‹ síd des˘ru˘ed obj.Åy≥=%d\n", 
k
->
ty≥
);

667 
îr‹
;

670 
	`mem£t
(&
hódî
, 0, (header));

671 
hódî
.
cmd
 = cmd;

672 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

673 i‡(!
	`∑ck_gd_hódî
(&
hódî
, 
k
, &
¨r
)) {

674 
îr‹
;

677 
hódî
.
cmd
) {

678 
FS_GD_CMD_DB_OBJ_NEW
:

679 
FS_GD_CMD_DB_OBJ_DATA
:

680 
	`db_obje˘_m¨shÆ
(
obj
, &
¨r
);

681 
	`fs_gd_£nd_cmd_mbuf
(
c⁄n
, &
hódî
, &
¨r
.
mbuf
);

683 
FS_GD_CMD_DB_OBJ_DATA_DIRTY
: {

684 
c
 = 
	`db_obje˘_m¨shÆ_dúty
(
obj
, &
¨r
);

685 i‡(
c
 > 0) {

686 
	`fs_gd_£nd_cmd_mbuf
(
c⁄n
, &
hódî
, &
¨r
.
mbuf
);

691 
îr‹
;

694 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

695  
ªt
;

696 
îr‹
:

697 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

699 
	}
}

701 
	$fs_db_obje˘_lﬂd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
svÆue_t
 *
k
, 
sync
, 
sid
)

703 
ªt
 = 0;

704 
fs_dbi_¨øy_t
 
¨r
;

705 
fs_gd_hódî_t
 
hódî
;

707 
	`mem£t
(&
hódî
, 0, (header));

708 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

710 i‡(!
	`∑ck_gd_hódî
(&
hódî
, 
k
, &
¨r
)) {

711 
îr‹
;

713 
	`fs_dbi_¨øy_push_öt
(&
¨r
, 
sid
);

714 i‡(
sync
) {

715 
hódî
.
cmd
 = 
FS_GD_CMD_DB_OBJ_LOAD_SYNC
;

716 
ªt
 = 
	`lﬂd_db_sync
(
c⁄n
, &
hódî
, &
¨r
.
mbuf
);

718 
hódî
.
cmd
 = 
FS_GD_CMD_DB_OBJ_LOAD
;

719 
	`fs_gd_£nd_cmd_mbuf
(
c⁄n
, &
hódî
, &
¨r
.
mbuf
);

722 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

723  
ªt
;

724 
îr‹
:

725 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

727 
	}
}

729 
	$fs_db_obje˘_u∆ﬂd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
svÆue_t
 *
k
)

731 
ªt
 = 0;

732 
fs_dbi_¨øy_t
 
¨r
;

733 
fs_gd_hódî_t
 
hódî
;

735 
	`mem£t
(&
hódî
, 0, (header));

736 
hódî
.
cmd
 = 
FS_GD_CMD_DB_OBJ_UNLOAD
;

737 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

739 i‡(!
	`∑ck_gd_hódî
(&
hódî
, 
k
, &
¨r
)) {

740 
îr‹
;

742 
	`fs_gd_£nd_cmd_mbuf
(
c⁄n
, &
hódî
, &
¨r
.
mbuf
);

743 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

744  
ªt
;

745 
îr‹
:

746 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

748 
	}
}

750 
	$fs_db_obje˘_ßve
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_cmd_t
 
cmd
, 
svÆue_t
 *
k
, 
obje˘_t
 *
obj
, 
fs_db_obje˘_ödex_t
 *
ödex
)

752 
fs_dbi_¨øy_t
 
¨r
;

753 
c
 = 0;

755 
fs_gd_hódî_t
 
hódî
;

756 
	`mem£t
(&
hódî
, 0, (header));

757 
hódî
.
cmd
 = cmd;

758 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

760 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

761 
	`Ârötf
(
°dîr
, "îr‹ síd des˘ru˘ed obj.Åy≥=%d\n", 
k
->
ty≥
);

762 
îr‹
;

765 i‡(!
	`∑ck_gd_hódî
(&
hódî
, 
k
, &
¨r
)) {

766 
	`Ârötf
(
°dîr
, "îr‹ savêskù badÅy≥ key.Åy≥=%d\n", 
k
->
ty≥
);

767 
îr‹
;

771 i‡(
cmd
 =
FS_GD_CMD_DB_OBJ_DATA_DIRTY
) {

772 
c
 = 
	`db_obje˘_m¨shÆ_ôî
(
obj
, 
ödex
, &
¨r
, 
t›_m¨shÆ_dúty
);

774 
c
 = 
	`db_obje˘_m¨shÆ_ôî
(
obj
, 
ödex
, &
¨r
, 
t›_m¨shÆ
);

777 i‡(
c
 > 0) {

778 
	`fs_gd_£nd_cmd_mbuf
(
c⁄n
, &
hódî
, &
¨r
.
mbuf
);

781 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

784 
îr‹
:

785 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

787 
	}
}

789 
	$fs_db_obje˘_ª«me
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
svÆue_t
 *
k
, 
obje˘_t
 *
obj
, svÆue_à*
√wk
)

791 
fs_dbi_¨øy_t
 
¨r
;

792 
fs_gd_hódî_t
 
hódî
;

793 
	`mem£t
(&
hódî
, 0, (header));

794 
hódî
.
cmd
 = 
FS_GD_CMD_RENAME
;

795 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

797 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

798 
	`Ârötf
(
°dîr
, "îr‹ síd des˘ru˘ed obj.Åy≥=%d\n", 
k
->
ty≥
);

799 
îr‹
;

802 i‡(!
	`∑ck_gd_hódî
(&
hódî
, 
k
, &
¨r
)) {

803 
	`Ârötf
(
°dîr
, "îr‹ savêskù badÅy≥ key.Åy≥=%d\n", 
k
->
ty≥
);

804 
îr‹
;

808 i‡(
√wk
->
ty≥
 =
T_STRING
) {

809 
	`fs_dbi_¨øy_push_l°rög
(&
¨r
, 
√wk
->
u
.
°rög
, 
	`SVALUE_STRLEN
(newk) + 1);

811 
îr‹
;

814 
	`fs_gd_£nd_cmd_mbuf
(
c⁄n
, &
hódî
, &
¨r
.
mbuf
);

815 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

817 
îr‹
:

818 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

820 
	}
}

822 
	$db_key_öô
(
db_key_t
 *
key
, 
ty≥
, *
vÆue
, 
Àn
)

824 
key
->
ty≥
 =Åype;

825 
key
->
Àn
 =Üen;

827 i‡(
	`DB_KEY_IS_INT
(
key
)) {

828 
key
->
vÆue
 = 
	`mÆloc
(key->
Àn
);

829 
	`mem˝y
(
key
->
vÆue
, vÆue, key->
Àn
);

831 
key
->
vÆue
 = 
	`mÆloc
(key->
Àn
 + 1);

832 
	`mem˝y
(
key
->
vÆue
, vÆue, key->
Àn
);

833 
	`DB_KEY_STR
(
key
)[key->
Àn
] = '\0';

835 
	}
}

837 
	$db_key_‰ì
(
db_key_t
 *
key
)

839 
	`‰ì
(
key
->
vÆue
);

840 
	}
}

842 
	$db_key_push
(
db_key_t
 *
key
, 
fs_dbi_¨øy_t
 *
¨r
)

844 i‡(
	`DB_KEY_IS_STR
(
key
)) {

846 
	`fs_dbi_¨øy_push_l°rög
(
¨r
, 
	`DB_KEY_STR
(
key
), key->
Àn
 + 1);

848 
	}
}

850 
	$db_key_ªf
(
fs_gd_hódî_t
 *
hódî
, 
fs_dbi_¨øy_ôî_t
 *
ôî
, 
db_key_t
 *
key
)

852 i‡(
hódî
->
Êag
 =
FS_GD_FLAG_INT_KEY
) {

853 
key
->
ty≥
 = 
DB_KEY_TYPE_INT
;

854 
key
->
Àn
 = (
hódî
->
uid
);

855 
key
->
vÆue
 = &
hódî
->
uid
;

857 
	`as£π
(
hódî
->
Êag
 =
FS_GD_FLAG_STR_KEY
);

858 
key
->
ty≥
 = 
DB_KEY_TYPE_STR
;

859 
key
->
vÆue
 = 
ôî
->
tv
->
°rög
.
°r
;

860 
key
->
Àn
 = 
ôî
->
tv
->
°rög
.len - 1;

861 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

863 
	}
}

865 
	$db_key_svÆue_ªf
(
db_key_t
 *
key
, 
svÆue_t
 *
v
)

867 i‡(
v
->
ty≥
 =
T_NUMBER
) {

868 
	`DB_KEY_INT_REF
(
key
, &
v
->
u
.
numbî
);

870 
	`DB_KEY_SVALUE_STR_REF
(
key
, 
v
);

872 
	}
}

875 
	$fs_db_obje˘_ödex_‰ì
(
fs_db_obje˘_ödex_t
 *
ödex
)

877 
i
;

878 
fs_db_obje˘_∑ú_t
 *
∑ú
;

880 
i
 = 0; i < 
ödex
->
˙t
; ++i) {

881 
∑ú
 = &
ödex
->
∑ús
[
i
];

882 
	`‰ì_svÆue
(&
∑ú
->
sv«me
, "db object index");

886 
	`‰ì
(
ödex
->
∑ús
);

887 
	`‰ì_¥og
(
ödex
->
¥og
, 1);

888 
	`‰ì
(
ödex
);

889 
	}
}

891 
ölöe
 
fs_db_obje˘_ödex_t
 *
	$fs_db_obje˘_ödex_föd
(
fs_≠r_hash_t
 *
ba£
, 
obje˘_t
 *
obj
)

893 
¥ogøm_t
 *
¥og
 = 
obj
->prog;

894 
fs_db_obje˘_ödex_t
 *
ödex
 =
	`≠r_hash_gë
(
ba£
->
hash
, 
¥og
, (prog));

895  
ödex
;

896 
	}
}

898 
fs_db_obje˘_ödex_t
 *
	$fs_db_obje˘_ödex_föd_by_«me
(
fs_≠r_hash_t
 *
ba£
, 
obje˘_t
 *
obj
)

900 
≠r_hash_ödex_t
 *
hi
;

901 *
ödex
;

902 
fs_db_obje˘_ödex_t
 *
dbo_ödex
;

903 *
«me
 = 
obj
->
¥og
->name;

905 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
ba£
->
hash
); hi; hò
	`≠r_hash_√xt
(hi)) {

906 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
ödex
);

907 
dbo_ödex
 = 
ödex
;

908 i‡(!
	`°rcmp
(
«me
, 
dbo_ödex
->
¥og
->name)) {

909  
dbo_ödex
;

913  
NULL
;

914 
	}
}

917 
fs_db_obje˘_ödex_t
 *
	$fs_db_obje˘_ödex_add
(
fs_≠r_hash_t
 *
ba£
, 
obje˘_t
 *
obj
)

919 i‡(
NULL
 =
	`fs_db_obje˘_ödex_föd
(
ba£
, 
obj
)) {

920 
svÆue_t
 *
v¨s
 = 
	`föd_obje˘_v¨übÀ
(
obj
, 
ßve_v¨_li°
);

921 i‡(
v¨s
->
ty≥
 !
T_ARRAY
) {

922 
	`Ârötf
(
°dîr
, "îr‹ db obje˘ badÅy≥ v¨übÀÜi°:%s\n", 
	`ty≥_«me
(
v¨s
->
ty≥
));

923  
NULL
;

926 
i
;

927 
¨øy_t
 *
li°
 = 
v¨s
->
u
.
¨r
;

929 
fs_db_obje˘_∑ú_t
 *
∑ús
 = 
	`ˇŒoc
(
li°
->
size
, (fs_db_object_pair_t));

930 
fs_db_obje˘_ödex_t
 *
dbo_ödex
 = 
	`ˇŒoc
(1, (fs_db_object_index_t));

931 
dbo_ödex
->
˙t
 = 0;

932 
dbo_ödex
->
∑ús
 =Öairs;

933 
dbo_ödex
->
¥og
 = 
obj
->prog;

934 
	`ª„ªn˚_¥og
(
dbo_ödex
->
¥og
, "db object index");

936 
i
 = 0; i < 
li°
->
size
; ++i) {

937 
	`as£π
(
li°
->
ôem
[
i
].
ty≥
 =
T_STRING
);

938 
ty≥
;

939 *
«me
 = 
li°
->
ôem
[
i
].
u
.
°rög
;

940 
ödex
 = 
	`föd_globÆ_v¨übÀ
(
obj
->
¥og
, 
«me
, &
ty≥
);

941 i‡(
ödex
 == -1) {

943 
	`Ârötf
(
°dîr
, "w¨nög db obje˘ c™ÇŸ föd v¨übÀ:%s\n", 
«me
);

946 
	`assign_svÆue_no_‰ì
(&
∑ús
[
dbo_ödex
->
˙t
].
sv«me
, &
li°
->
ôem
[
i
]);

947 
∑ús
[
dbo_ödex
->
˙t
++].
ödex
 = index;

950 
	`≠r_hash_£t
(
ba£
->
hash
, 
dbo_ödex
->
¥og
, (dbo_index->prog), dbo_index);

952  
dbo_ödex
;

955  
NULL
;

956 
	}
}

958 
	$fs_db_obje˘_ödex_upd©e
(
fs_≠r_hash_t
 *
ba£
, 
obje˘_t
 *
obj
)

960 
fs_db_obje˘_ödex_t
 *
dbo_ödex
 = 
	`fs_db_obje˘_ödex_föd_by_«me
(
ba£
, 
obj
);

961 i‡(
dbo_ödex
 !
NULL
) {

962 
	`≠r_hash_£t
(
ba£
->
hash
, 
dbo_ödex
->
¥og
, (dbo_ödex->¥og), 
NULL
);

963 
	`fs_db_obje˘_ödex_‰ì
(
dbo_ödex
);

964 
	`fs_db_obje˘_ödex_add
(
ba£
, 
obj
);

966 
	}
}

968 
	$fs_db_obje˘_ödex_˛ór
(
fs_≠r_hash_t
 *
ba£
)

970 
≠r_hash_ödex_t
 *
hi
;

971 *
ödex
;

972 
fs_db_obje˘_ödex_t
 *
dbo_ödex
;

974 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
ba£
->
hash
); hi; hò
	`≠r_hash_√xt
(hi)) {

975 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
ödex
);

976 
dbo_ödex
 = 
ödex
;

977 
	`fs_db_obje˘_ödex_‰ì
(
dbo_ödex
);

980 
	`≠r_hash_˛ór
(
ba£
->
hash
);

981 
	}
}

983 
fs_db_obje˘_ödex_t
 *
	$fs_db_obje˘_ödex_föd_‹_add
(
obje˘_t
 *
obj
)

985 
fs_db_obje˘_ödex_t
 *
ödex
 = 
	`fs_db_obje˘_ödex_föd
(&
db_obj_ba£
, 
obj
);

986 i‡(
ödex
 =
NULL
) {

987 
ödex
 = 
	`fs_db_obje˘_ödex_add
(&
db_obj_ba£
 ,
obj
);

990 
	`as£π
(
ödex
 !
NULL
);

991  
ödex
;

992 
	}
}

995 
	$fs_db_obje˘_moduÀ_öô
()

997 
	`fs_≠r_hash_c⁄°ru˘
(&
db_obj_ba£
);

998 
	}
}

1000 
	$fs_db_obje˘_moduÀ_exô
()

1002 
	`fs_db_obje˘_ödex_˛ór
(&
db_obj_ba£
);

1003 
	`fs_≠r_hash_de°ru˘
(&
db_obj_ba£
);

1004 
	}
}

1006 
	$fs_db_obje˘_moduÀ_upd©e
(
obje˘_t
 *
obj
)

1008 
	`fs_db_obje˘_ödex_upd©e
(&
db_obj_ba£
, 
obj
);

1009 
	}
}

	@packages/fs_data_save.h

2 #i‚de‡
_FS_DATA_SAVE_H


3 
	#_FS_DATA_SAVE_H


	)

5 
	~"fs_dbi.h
"

6 
	~"fs_comm.h
"

8 
	~"Õc.h
"

9 
	~"Õc_ö˛.h
"

11 *
ßve_v¨_li°
;

13 
	#DB_KEY_TYPE_INT
 0

	)

14 
	#DB_KEY_TYPE_STR
 1

	)

17 
	mty≥
;

18 
	mÀn
;

19 *
	mvÆue
;

20 } 
	tdb_key_t
;

22 
	#DB_KEY_INT
(
key
Ë(*(
fs_uid_t
*)(key)->
vÆue
)

	)

23 
	#DB_KEY_STR
(
key
Ë((*)(key)->
vÆue
)

	)

24 
	#DB_KEY_IS_INT
(
key
Ë((key)->
ty≥
 =
DB_KEY_TYPE_INT
)

	)

25 
	#DB_KEY_IS_STR
(
key
Ë((key)->
ty≥
 =
DB_KEY_TYPE_STR
)

	)

27 
	#DB_KEY_INT_REF
(
key
, 
uidp
) do {\

28 (
key
)->
ty≥
 = 
DB_KEY_TYPE_INT
;\

29 (
key
)->
vÆue
 = (
uidp
);\

30 (
key
)->
Àn
 = (*(
uidp
));\

31 } 0)

	)

33 
	#DB_KEY_STR_REF
(
key
, 
°r
, 
sz
) do {\

34 (
key
)->
ty≥
 = 
DB_KEY_TYPE_STR
;\

35 (
key
)->
vÆue
 = (
°r
);\

36 (
key
)->
Àn
 = (
sz
);\

37 } 0)

	)

39 
	#DB_KEY_SVALUE_STR_REF
(
key
, 
sv
Ë
	`DB_KEY_STR_REF
(key, (sv)->
u
.
°rög
, 
	`SVALUE_STRLEN
(sv))

	)

42 
	#DB_KEY_LOG
(
wh©
, 
key
, 
fmt
, 
¨gs
...) \

44 
timefmt
[128];\

45 
time_t
 
£c⁄ds
 = 
	`time
(
NULL
);\

46 
tm
 *
ç
 = 
	`loˇ…ime
(&
£c⁄ds
);\

47 
	`°r·ime
(
timefmt
, —imefmt), "%F %T", 
ç
);\

48 i‡(
	`DB_KEY_IS_INT
(
key
)) { \

49 
	`Ârötf
(
°dîr
, "[%s] %†uid=%d "
fmt
"\n", 
timefmt
, 
wh©
, 
	`DB_KEY_INT
(
key
), ##
¨gs
);\

51 
	`Ârötf
(
°dîr
, "[%s] %†ßvíame=%†"
fmt
"\n", 
timefmt
, 
wh©
, 
	`DB_KEY_STR
(
key
), ##
¨gs
);\

53 } 0)

	)

55 
db_key_push
(
db_key_t
 *
key
, 
fs_dbi_¨øy_t
 *
¨r
);

56 
db_key_öô
(
db_key_t
 *
key
, 
ty≥
, *
vÆue
, 
Àn
);

57 
db_key_‰ì
(
db_key_t
 *
key
);

58 
db_key_ªf
(
fs_gd_hódî_t
 *
hódî
, 
fs_dbi_¨øy_ôî_t
 *
ôî
, 
db_key_t
 *
ªt
);

59 
db_key_svÆue_ªf
(
db_key_t
 *
key
, 
svÆue_t
 *
v
);

62 
fs_m¨shÆ_dúty_m≠
(
svÆue_t
 *
svm≠
, 
fs_dbi_¨øy_t
 *
¨øy
);

63 
db_obje˘_unm¨shÆ
(
obje˘_t
 *
obj
, 
fs_dbi_¨øy_ôî_t
 *
ôî
);

65 
db_m≠_unm¨shÆ
(
svÆue_t
 *
svm≠
, 
fs_dbi_¨øy_ôî_t
 *
ôî
);

66 
db_m≠_m¨shÆ_to
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, 
db_key_t
 *
key
, 
svÆue_t
 *
svm≠
, 
sid
);

68 
fs_db_obje˘_£nd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_cmd_t
 
cmd
, 
svÆue_t
 *
key
, 
obje˘_t
 *
obj
);

69 
fs_db_obje˘_lﬂd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
svÆue_t
 *
k
, 
sync
, 
sid
);

70 
fs_db_obje˘_u∆ﬂd
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
svÆue_t
 *
k
);

72 
db_obje˘_íabÀ_dúty
(
obje˘_t
 *
obj
);

73 
db_obje˘_m¨shÆ_dúty
(
obje˘_t
 *
obj
, 
fs_dbi_¨øy_t
 *
¨r
);

74 
mîge_dúty_db_obje˘_to_m≠
(
svÆue_t
 *
roŸ
, 
fs_dbi_¨øy_ôî_t
 *
ôî
);

77 
svÆue_t
 
	msv«me
;

78 
	mödex
;

79 } 
	tfs_db_obje˘_∑ú_t
;

82 
¥ogøm_t
 *
	m¥og
;

83 
	m˙t
;

84 
fs_db_obje˘_∑ú_t
 *
	m∑ús
;

85 } 
	tfs_db_obje˘_ödex_t
;

87 
fs_db_obje˘_ödex_t
 *
fs_db_obje˘_ödex_föd_‹_add
(
obje˘_t
 *
obj
);

88 
fs_db_obje˘_ßve
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_cmd_t
 
cmd
, 
svÆue_t
 *
k
, 
obje˘_t
 *
obj
, 
fs_db_obje˘_ödex_t
 *
ödex
);

89 
fs_db_obje˘_ª«me
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
svÆue_t
 *
k
, 
obje˘_t
 *
obj
, svÆue_à*
√wk
);

91 
fs_db_obje˘_moduÀ_öô
();

92 
fs_db_obje˘_moduÀ_exô
();

93 
fs_db_obje˘_moduÀ_upd©e
();

	@packages/fs_dbd_spec.h

2 
	~"../gømm¨/•ec.h
"

9 
°rög
 
Õc2py°r
(
mixed
);

10 
mixed
 
py°r2Õc
(
°rög
);

11 
mixed
 
fs_ª°‹e_‰om_fûe
(
°rög
);

12 
fs_ßve_to_fûe
(
°rög
, 
m≠pög
);

	@packages/fs_dbi.h

2 #i‚de‡
FS_DBI_H


3 
	#FS_DBI_H


	)

5 
	~"fs_comm.h
"

6 
	~"fs_mbuf.h
"

8 
	~<°dlib.h
>

9 
	~<sys/queue.h
>

11 
	gFS_BEGIN_DECLS


23 
	#FS_DBI_INT
 0

	)

24 
	#FS_DBI_REAL
 1

	)

25 
	#FS_DBI_STRING
 2

	)

26 
	#FS_DBI_ARRAY
 3

	)

27 
	#FS_DBI_MAPPING
 4

	)

28 
	#FS_DBI_NIL
 5

	)

30 
	#COMMON_FIELD
 
ty≥


	)

32 
	tFS_DBI_CNT_TYPE
;

35 
	sfs_dbi_nû_s


37 
	mCOMMON_FIELD
;

38 } 
	tfs_dbi_nû_t
;

40 
	sfs_dbi_öt_s


42 
	mCOMMON_FIELD
;

43 
	mn
;

44 } 
	tfs_dbi_öt_t
;

46 
	sfs_dbi_ªÆ_s


48 
	mCOMMON_FIELD
;

49 
	mr
;

50 } 
	tfs_dbi_ªÆ_t
;

52 
	sfs_dbi_°rög_s


54 
	mCOMMON_FIELD
;

55 
	mÀn
;

56 
	m°r
[0];

57 } 
	tfs_dbi_°rög_t
;

59 
	sfs_dbi_¨r_s


61 
	mCOMMON_FIELD
;

62 
	m˙t
;

63 } 
	tfs_dbi_¨r_t
;

65 
	sfs_dbi_m≠pög_s


67 
	mCOMMON_FIELD
;

68 
	m∑ú
;

69 } 
	tfs_dbi_m≠pög_t
;

72 
	ufs_dbi_tvÆue_u


75 
	mCOMMON_FIELD
;

76 } 
	mcomm⁄
;

77 
fs_dbi_nû_t
 
	mnû
;

78 
fs_dbi_öt_t
 
	mnumbî
;

79 
fs_dbi_ªÆ_t
 
	mªÆ
;

80 
fs_dbi_°rög_t
 
	m°rög
;

81 
fs_dbi_¨r_t
 
	m¨r
;

82 
fs_dbi_m≠pög_t
 
	mm≠
;

83 } 
	tfs_dbi_tvÆue_t
;

87 
	sfs_dbi_¨øy_s


89 *
	m˙t
;

90 
fs_mbuf_t
 
	mmbuf
;

91 } 
	tfs_dbi_¨øy_t
;

94 
fs_dbi_¨øy_c⁄°ru˘
(
fs_dbi_¨øy_t
 *
¨øy
);

95 
fs_dbi_¨øy_de°ru˘
(
fs_dbi_¨øy_t
 *
¨øy
);

96 
fs_dbi_¨øy_ª£t
(
fs_dbi_¨øy_t
 *
¨øy
);

98 *
fs_dbi_¨øy_Æloc
(
fs_dbi_¨øy_t
 *
¨øy
, 
size
);

100 
fs_dbi_¨øy_push_öt
(
fs_dbi_¨øy_t
 *
¨øy
, 
n
);

101 
fs_dbi_¨øy_push_ªÆ
(
fs_dbi_¨øy_t
 *
¨øy
, 
r
);

102 
fs_dbi_¨øy_push_nû
(
fs_dbi_¨øy_t
 *
¨øy
);

104 
fs_dbi_¨øy_push_°rög
(
fs_dbi_¨øy_t
 *
¨øy
, *
°r
);

105 
fs_dbi_¨øy_push_l°rög
(
fs_dbi_¨øy_t
 *
¨øy
, *
°r
, 
size_t
 
Àn
);

107 
fs_dbi_¨øy_push_¨øy
(
fs_dbi_¨øy_t
 *
¨øy
, 
˙t
);

108 
fs_dbi_¨øy_£t_¨øy
(
fs_dbi_¨øy_t
 *
¨øy
, *
¨r
, 
˙t
);

110 
fs_dbi_¨øy_push_m≠pög
(
fs_dbi_¨øy_t
 *
¨øy
, 
˙t
);

111 
fs_dbi_¨øy_£t_m≠pög
(
fs_dbi_¨øy_t
 *
¨øy
, *
m≠
, 
∑ú
);

113 
fs_dbi_tvÆue_size
(
fs_dbi_tvÆue_t
 *
tvÆue
);

116 
	sfs_dbi_¨øy_ôî_s
 {

117 
	mi
;

118 
FS_DBI_CNT_TYPE
 
	m˙t
;

119 *
	m¨r
;

120 
	msize
;

121 
fs_dbi_tvÆue_t
 *
	mtv
;

122 } 
	tfs_dbi_¨øy_ôî_t
;

124 
ölöe
 
	$FS_DBI_ARRAY_ITER_FIRST
(
fs_dbi_¨øy_ôî_t
 *
ôî
, *
¨r
, 
size
)

126 
FS_DBI_CNT_TYPE
 *
˙t
 = 
¨r
;

127 
ôî
->
i
 = 0;

128 
ôî
->
˙t
 = *cnt;

129 
ôî
->
¨r
 =árr;

130 
ôî
->
size
 = size;

131 
ôî
->
tv
 = iãr->
˙t
 =0 ? 
NULL
 : (
fs_dbi_tvÆue_t
*)(cnt + 1);

132 
	}
}

134 
ölöe
 
	$FS_DBI_ARRAY_ITER_NEXT
(
fs_dbi_¨øy_ôî_t
 *
ôî
)

136 
ôî
->
tv
 = ++ôî->
i
 < iãr->
˙t
 ?

137 (
fs_dbi_tvÆue_t
*)((*)
ôî
->
tv
 + 
	`fs_dbi_tvÆue_size
(iter->tv))

138 : 
NULL
;

139 
	}
}

141 
ölöe
 
	$FS_DBI_ARRAY_LEN
(
fs_dbi_¨øy_t
 *
¨øy
)

143 
size
 = 
¨øy
->
mbuf
.
d©a_size
;

145 i‡(
size
 >(
FS_DBI_CNT_TYPE
)) {

146  
size
 - (
FS_DBI_CNT_TYPE
);

150 
	}
}

152 
	gFS_END_DECLS


	@packages/fs_dns.c

2 
	~<√töë/ö.h
>

3 
	~<evít.h
>

4 
	~<evdns.h
>

5 
	~<î∫o.h
>

7 
	~"Õc.h
"

8 
	~"Õc_ö˛.h
"

9 
	~"Õc_¨gs_›.h
"

10 
	~"fs_Õc_›.h
"

11 
	~"fs_cuæ.h
"

14 
svÆue_t
 
	mho°«me
;

15 
svÆue_t
 
	mfun˘i⁄
;

16 
svÆue_t
 
	mud©a
;

17 } 
	tfs_ªsﬁve_t
;

19 
	$‰ì_ªsﬁve
(
fs_ªsﬁve_t
 *
ªsﬁv
)

21 
	`‰ì_svÆue
(&
ªsﬁv
->
ho°«me
, "dns");

22 
	`‰ì_svÆue
(&
ªsﬁv
->
fun˘i⁄
, "dns");

23 
	`‰ì_svÆue
(&
ªsﬁv
->
ud©a
, "dns");

24 
	`‰ì
(
ªsﬁv
);

25 
	}
}

27 
	$evdns_ˇŒback
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
, *
addªs£s
, *
¨g
)

29 
fs_ªsﬁve_t
 *
ªsﬁv
 = (fs_ªsﬁve_t*)
¨g
;

30 
¨gc
 = 2;

32 i‡(
ªsu…
 =
DNS_ERR_NONE
) {

33 
m≠pög_t
 *
ùli°
 = 
	`Æloˇã_m≠pög
(0);

34 
svÆue_t
 *
v
;

35 
buf
[256];

36 
i
;

38 i‡(
ty≥
 =
EVDNS_TYPE_A
 && 
cou¡
 >= 0) {

39 
i
 = 0; i < 
cou¡
; ++i) {

40 
	`mem£t
(
buf
, 0, (buf));

41 i‡(
NULL
 !
	`öë_¡ﬂ_r
(((
ö_addr
 *)
addªs£s
)[
i
], 
buf
, (buf))) {

42 
v
 = 
	`m≠_ö£π_°r_key
(
ùli°
, 
buf
);

43 
	`£t_svÆue_numbî
(
v
, 
âl
);

47 
	`push_ª„d_m≠pög
(
ùli°
);

49 c⁄° * 
îr
 = 
	`evdns_îr_to_°rög
(
ªsu…
);

50 
	`c›y_™d_push_°rög
((*)
îr
);

53 
	`push_svÆue
(&
ªsﬁv
->
ud©a
);

54 
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
ªsﬁv
->
fun˘i⁄
.
u
.
Â
, 
¨gc
);

55 
	`‰ì_ªsﬁve
(
ªsﬁv
);

56 
	}
}

58 
	$fs_dns_öô
()

60  
	`evdns_öô
();

61 
	}
}

63 
	$fs_dns_deöô
()

66 
	}
}

68 
	$ªsﬁve
(
svÆue_t
 *
ho°«me
, svÆue_à*
fun˘i⁄
, svÆue_à*
ud©a
)

70 i‡(
ho°«me
->
ty≥
 !
T_STRING
) {

73 i‡(
fun˘i⁄
->
ty≥
 !
T_FUNCTION
) {

77 
fs_ªsﬁve_t
 *
ªsﬁv
 = 
	`ˇŒoc
((fs_resolve_t), 1);

78 
ªsﬁv
->
ho°«me
 = 
c⁄°0u
;

79 
ªsﬁv
->
fun˘i⁄
 = 
c⁄°0u
;

80 
ªsﬁv
->
ud©a
 = 
c⁄°0u
;

81 
	`assign_svÆue
(&
ªsﬁv
->
ho°«me
, hostname);

82 
	`assign_svÆue
(&
ªsﬁv
->
fun˘i⁄
, function);

83 
	`assign_svÆue
(&
ªsﬁv
->
ud©a
, udata);

85 i‡(0 =
	`evdns_ªsﬁve_ùv4
(
ªsﬁv
->
ho°«me
.
u
.
°rög
, 0, 
evdns_ˇŒback
,Ñesolv)) {

88 
	`‰ì_ªsﬁve
(
ªsﬁv
);

91 
	}
}

93 
	$f_fs_dns_ªsﬁve
()

95 
ªt
;

96 
SET_ALL_ARGS
;

97 
svÆue_t
 *
ho°«me
 = 
	`ARGS
(0);

98 
svÆue_t
 *
fun˘i⁄
 = 
	`ARGS
(1);

99 
svÆue_t
 *
ud©a
 = 
	`ARGS
(2);

100 
ªt
 = 
	`ªsﬁve
(
ho°«me
, 
fun˘i⁄
, 
ud©a
);

101 
POP_ALL_ARGS
;

102 
	`push_numbî
(
ªt
);

103 
	}
}

	@packages/fs_dns.h

2 #i‚de‡
_FS_DNS_H


3 
	#_FS_DNS_H


	)

5 
fs_dns_öô
();

6 
fs_dns_deöô
();

	@packages/fs_enigma.c

13 
	~<sys/cdefs.h
>

14 
__FBSDID
("$FreeBSD: src/usr.bin/enigma/enigma.c,v 1.9.8.1 2009/04/15 03:14:26 kensmith Exp $");

16 
	~<sys/ty≥s.h
>

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

23 
	#MINUSKVAR
 "CrYpTkEy"

	)

25 
	#ECHO
 010

	)

26 
	#ROTORSZ
 256

	)

27 
	#MASK
 0377

	)

28 
	gt1
[
ROTORSZ
];

29 
	gt2
[
ROTORSZ
];

30 
	gt3
[
ROTORSZ
];

31 
	gdeck
[
ROTORSZ
];

32 
	gbuf
[13];

34 
shufÊe
(*);

35 
£tup
(*);

38 
	$£tup
(*
pw
)

40 
ic
, 
i
, 
k
, 
ãmp
;

41 
ß…
[3];

42 
∫d
;

43 
öt32_t
 
£ed
;

45 
	`°æ˝y
(
ß…
, 
pw
, (salt));

46 
	`mem˝y
(
buf
, 
	`¸y±
(
pw
, 
ß…
), (buf));

47 
£ed
 = 123;

48 
i
=0; i<13; i++)

49 
£ed
 = sìd*
buf
[
i
] + i;

50 
i
=0;i<
ROTORSZ
;i++) {

51 
t1
[
i
] = i;

52 
deck
[
i
] = i;

54 
i
=0;i<
ROTORSZ
;i++) {

55 
£ed
 = 5*£ed + 
buf
[
i
%13];

56 
∫d
 = 
£ed
 % 65521;

57 
k
 = 
ROTORSZ
-1 - 
i
;

58 
ic
 = (
∫d
&
MASK
)%(
k
+1);

59 
∫d
 >>= 8;

60 
ãmp
 = 
t1
[
k
];

61 
t1
[
k
] =Å1[
ic
];

62 
t1
[
ic
] = 
ãmp
;

63 if(
t3
[
k
]!=0) ;

64 
ic
 = (
∫d
&
MASK
Ë% 
k
;

65 
t3
[
ic
]!=0Ëi¯(ic+1Ë% 
k
;

66 
t3
[
k
] = 
ic
;

67 
t3
[
ic
] = 
k
;

69 
i
=0;i<
ROTORSZ
;i++)

70 
t2
[
t1
[
i
]&
MASK
] = i;

71 
	}
}

74 
	$_maö
(
¨gc
, *
¨gv
[])

76 
i
, 
n1
, 
n2
, 
ƒ1
, 
ƒ2
;

77 
£cuªÊg
 = 0, 
kÊag
 = 0;

78 *
˝
;

80 i‡(
¨gc
 > 1 && 
¨gv
[1][0] == '-') {

81 i‡(
¨gv
[1][1] == 's') {

82 
¨gc
--;

83 
¨gv
++;

84 
£cuªÊg
 = 1;

85 } i‡(
¨gv
[1][1] == 'k') {

86 
¨gc
--;

87 
¨gv
++;

88 
kÊag
 = 1;

91 i‡(
kÊag
) {

92 i‡((
˝
 = 
	`gëív
(
MINUSKVAR
)Ë=
NULL
) {

93 
	`Ârötf
(
°dîr
, "%†nŸ së\n", 
MINUSKVAR
);

94 
	`exô
(1);

96 
	`£tup
(
˝
);

97 } i‡(
¨gc
 != 2) {

98 
	`£tup
(
	`gë∑ss
("Enter key:"));

101 
	`£tup
(
¨gv
[1]);

102 
n1
 = 0;

103 
n2
 = 0;

104 
ƒ2
 = 0;

106 (
i
=
	`gëch¨
()) != -1) {

107 i‡(
£cuªÊg
) {

108 
ƒ1
 = 
deck
[
n1
]&
MASK
;

109 
ƒ2
 = 
deck
[
ƒ1
]&
MASK
;

111 
ƒ1
 = 
n1
;

113 
i
 = 
t2
[(
t3
[(
t1
[(i+
ƒ1
)&
MASK
]+
ƒ2
)&MASK]-nr2)&MASK]-nr1;

114 
	`putch¨
(
i
);

115 
n1
++;

116 if(
n1
==
ROTORSZ
) {

117 
n1
 = 0;

118 
n2
++;

119 if(
n2
==
ROTORSZ
)Ç2 = 0;

120 i‡(
£cuªÊg
) {

121 
	`shufÊe
(
deck
);

123 
ƒ2
 = 
n2
;

129 
	}
}

132 
	$shufÊe
(
deck¨y
[])

134 
i
, 
ic
, 
k
, 
ãmp
;

135 
∫d
;

136 
öt32_t
 
£ed
 = 123;

138 
i
=0;i<
ROTORSZ
;i++) {

139 
£ed
 = 5*£ed + 
buf
[
i
%13];

140 
∫d
 = 
£ed
 % 65521;

141 
k
 = 
ROTORSZ
-1 - 
i
;

142 
ic
 = (
∫d
&
MASK
)%(
k
+1);

143 
ãmp
 = 
deck¨y
[
k
];

144 
deck¨y
[
k
] = deck¨y[
ic
];

145 
deck¨y
[
ic
] = 
ãmp
;

147 
	}
}

	@packages/fs_http_lpc_spec.h

1 
	~"../gømm¨/•ec.h
"

4 
fs_hâp_ªque°
(
mixed
 *, mixed *, mixed *);

5 
°rög
 
fs_uæ_ícode_m≠
(
m≠pög
);

6 
°rög
 
fs_uæ_ícode
(string);

7 
°rög
 
fs_uæ_decode
(string);

8 
fs_cuæ_ªque°
(
m≠pög
, 
fun˘i⁄
, 
mixed
);

	@packages/fs_iconv.c

3 
	~<ic⁄v.h
>

7 
	~"Õc.h
"

8 
	~"Õc_ö˛.h
"

9 
	~"Õc_¨gs_›.h
"

10 
	~"fs_Õc_›.h
"

13 
	$f_fs_ic⁄v
()

15 
SET_ALL_ARGS
;

17 
svÆue_t
 *
svc⁄ã¡
 = 
	`ARGS
(0);

18 
svÆue_t
 *
sv‰om
 = 
	`ARGS
(1);

19 
svÆue_t
 *
svto
 = 
	`ARGS
(2);

21 *
‰om
 = 
sv‰om
->
u
.
°rög
;

22 *
to
 = 
svto
->
u
.
°rög
;

23 c⁄° *
c⁄ã¡
 = 
svc⁄ã¡
->
u
.
°rög
;

24 
size_t
 
c⁄ã¡Àn
 = 
	`SVALUE_STRLEN
(
svc⁄ã¡
);

25 
size_t
 
buÊí
 = 
c⁄ã¡Àn
 * 3 + 1;

26 *
buf
 = 
	`ˇŒoc
(1, 
buÊí
);

27 
size_t
 
À·
 = 
buÊí
;

28 *
ªsu…
 = 
buf
;

30 
ic⁄v_t
 
˙v
 = 
	`ic⁄v_›í
(
to
, 
‰om
);

31 i‡(
˙v
 =(
ic⁄v_t
)(-1)) {

32 
îr‹
;

34 i‡(
	`ic⁄v
(
˙v
, &
c⁄ã¡
, &
c⁄ã¡Àn
, &
ªsu…
, &
À·
Ë=(
size_t
)(-1)) {

35 
îr‹
;

37 i‡(-1 =
	`ic⁄v_˛o£
(
˙v
)) {

38 
îr‹
;

41 i‡(
À·
 == 0) {

42 
îr‹
;

45 
buf
[
buÊí
 - 
À·
] = '\0';

47 
POP_ALL_ARGS
;

48 
	`c›y_™d_push_°rög
(
buf
);

49 
	`‰ì
(
buf
);

51 
îr‹
:

52 
POP_ALL_ARGS
;

53 
	`push_undeföed
();

54 
	`‰ì
(
buf
);

55 
	}
}

	@packages/fs_ipc.h

2 #i‚de‡
_FS_IPC_H_


3 
	#_FS_IPC_H_


	)

5 
	~"fs.h
"

7 
	~<sys/ty≥s.h
>

9 
FS_BEGIN_DECLS


13 
öt32_t
 
	tfs_vfd_t
;

14 
öt32_t
 
	tfs_uid_t
;

15 
öt32_t
 
	tfs_hid_t
;

25 
	#FS_CLIENT_START_VFD
 256

	)

27 
	#FS_BROADCAST_VFD
 0

	)

29 
	#FS_GAMED_VFD
 1

	)

30 
	#FS_NETD_VFD
 2

	)

31 
	#FS_DBD_VFD
 3

	)

34 
	#FS_BROADCAST_UID
 (-1)

	)

36 
	#FS_GAMED_UID
 (-2)

	)

37 
	#FS_NETD_UID
 (-3)

	)

38 
	#FS_DBD_UID
 (-4)

	)

40 
	#FS_NULL_UID
 (0)

	)

48 
	sfs_ng_hódî_s
 {

53 
uöt32_t
 
	m∑ylﬂd_Àn
:24,

54 
	mcmd
:8;

57 
fs_uid_t
 
	muid
;

58 
fs_uid_t
 
	muid_cou¡
;

59 } 
	mu
;

60 } 
	tfs_ng_hódî_t
;

63 
FS_CTASSERT
((
fs_ng_hódî_t
) == 8);

66 
	mFS_NG_NEW
 = 0,

67 
	mFS_NG_REMOVE
,

68 
	mFS_NG_UNICAST
,

69 
	mFS_NG_MULTICAST
,

70 
	mFS_NG_BROADCAST
,

71 
	mFS_NG_LOGIN_OK
,

72 
	mFS_NG_USER
,

73 
	mFS_NG_RPC
,

74 } 
	tfs_ng_cmd_t
;

77 
ölöe
 
	$FS_NG_SET_HEADER
(
fs_ng_hódî_t
 *
hódî
, 
comm™d
, 
uni⁄_vÆue
, 
∑ylﬂd_size
)

79 (
hódî
)->
∑ylﬂd_Àn
 = (
∑ylﬂd_size
);

80 (
hódî
)->
cmd
 = (
comm™d
);

81 i‡((
comm™d
Ë=
FS_NG_BROADCAST
)

82 (
hódî
)->
u
.
uid_cou¡
 = (
uni⁄_vÆue
);

83 (
hódî
)->
u
.
uid
 = (
uni⁄_vÆue
);

84 
	}
}

98 
	sfs_hh_hódî_s
 {

99 
uöt32_t
 
	m∑ylﬂd_Àn
:24,

100 
	mcmd
:8;

101 } 
	tfs_hh_hódî_t
;

103 
FS_CTASSERT
((
fs_hh_hódî_t
) == 4);

105 
	#FS_HH_SET_HEADER
(
hódî
, 
comm™d
, 
∑ylﬂd_size
) \

107 (
hódî
)->
cmd
 = (
comm™d
); \

108 (
hódî
)->
∑ylﬂd_Àn
 = (
∑ylﬂd_size
); \

109 } 0)

	)

112 
	mFS_HH_NEW
 = 0,

113 
	mFS_HH_REMOVE
,

114 
	mFS_HH_RPC
,

115 } 
	tfs_hh_cmd_t
;

117 
	sfs_hh_√w_¨g_s
 {

118 
öt32_t
 
	mhid
;

119 } 
	tfs_hh_√w_¨g_t
;

121 
FS_CTASSERT
((
fs_hh_√w_¨g_t
) == 4);

126 
uöt32_t
 
	tfs_nc_∑ylﬂd_Àn_t
;

128 
fs_nc_hódî_s
 
	tfs_nc_hódî_t
;

130 
	sfs_nc_hódî_s
 {

131 
fs_nc_∑ylﬂd_Àn_t
 
	m∑ylﬂd_Àn
;

135 
	#FS_NC_SET_HEADER
(
hódî
, 
∑ylﬂd_size
Ë((hódî)->
∑ylﬂd_Àn
 = (∑ylﬂd_size))

	)

137 
FS_CTASSERT
((
fs_nc_hódî_t
) == 4);

142 
	mFS_GD_CMD_DB_OBJ_NEW
 = 0,

143 
	mFS_GD_CMD_DB_OBJ_UNLOAD
,

144 
	mFS_GD_CMD_DB_OBJ_LOAD
,

145 
	mFS_GD_CMD_DB_OBJ_LOAD_SYNC
,

146 
	mFS_GD_CMD_DB_OBJ_DATA_DIRTY
,

147 
	mFS_GD_CMD_DB_OBJ_DATA
,

148 
	mFS_GD_RPC
,

149 
	mFS_GD_CMD_SYNC
,

150 
	mFS_GD_CMD_RENAME
,

151 
	mFS_GD_CMD_GAMED_EXIT
,

152 } 
	tfs_gd_cmd_t
;

155 
	#FS_GD_STAT_OK
 0

	)

156 
	#FS_GD_STAT_NULL
 1

	)

157 
	#FS_GD_STAT_ERROR
 2

	)

159 
	#FS_GD_FLAG_INT_KEY
 1

	)

160 
	#FS_GD_FLAG_STR_KEY
 2

	)

163 
	#FS_GD_ASYNC
 0

	)

164 
	#FS_GD_SYNC
 1

	)

166 
	#FS_GD_SINGLE_THREAD
 0

	)

167 
	#FS_GD_MULTI_W_THREAD
 1

	)

168 
	#FS_GD_MULTI_RW_THREAD
 2

	)

170 
	sfs_gd_hódî_s
 {

171 
uöt32_t
 
	mcmd
:16,

172 
	m°©
:8,

173 
	mÊag
:8;

174 
uöt32_t
 
	m∑ylﬂd_Àn
;

175 
fs_uid_t
 
	muid
;

176 } 
	tfs_gd_hódî_t
;

178 
FS_CTASSERT
((
fs_gd_hódî_t
) == 12);

181 
	#FS_GD_SET_HEADER
(
hódî
, 
comm™d
, 
u£r_id
, 
∑ylﬂd
) \

183 (
hódî
)->
cmd
 = (
comm™d
); \

184 (
hódî
)->
°©
 = 
FS_GD_STAT_OK
; \

185 (
hódî
)->
uid
 = (
u£r_id
); \

186 (
hódî
)->
∑ylﬂd_Àn
 = (
∑ylﬂd
); \

187 } 0)

	)

193 
	#READ_PACKET
(
hódî_ty≥
, 
bu„v
, 
¨g
, 
∑ckë_h™dÀr
, 
ud©a
) \

195 
size_t
 
bufsz
 = 0; \

196 
size_t
 
∑ckë_sz
 = 0; \

197 
hódî_ty≥
 *
hódî
 = 
NULL
; \

198 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
¨g
; \

199 (
bufsz
 = 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_INPUT
(
bu„v
))) > 0) { \

200 i‡(
bufsz
 < (*
hódî
)) \

202 
hódî
 = (
hódî_ty≥
 *)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bu„v
)); \

203 
∑ckë_sz
 = (*
hódî
Ë+ hódî->
∑ylﬂd_Àn
; \

204 i‡(
bufsz
 < 
∑ckë_sz
) \

206 (
∑ckë_h™dÀr
)(
c⁄n
, 
hódî
, hódî + 1, hódî->
∑ylﬂd_Àn
, (
ud©a
)); \

207 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bu„v
), 
∑ckë_sz
); \

209 } 0)

	)

211 
	gFS_END_DECLS


	@packages/fs_log.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<î∫o.h
>

4 
	~<°d¨g.h
>

5 
	~<°rög.h
>

6 
	~<time.h
>

7 
	~"fs_log.h
"

8 
	~"c⁄fig.h
"

10 
	#MAX_TIME_STR_LEN
 30

	)

11 
	#MAX_LOG_BUF_LEN
 256

	)

13 
	gg_°rLogBuf
[
MAX_LOG_BUF_LEN
];

14 
	gg_eLogSwôch
 = 
LOG_INFO
;

15 
	gg_eLogMod
 = 
MOD_ALL
;

17 
±hªad_muãx_t
 
	gdbd_log_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

19 
ölöe
 c⁄° *
	$_Àvñ_°rög
(
LOG_LEVEL_E
 
e_Àvñ
)

21 
e_Àvñ
)

23 
LOG_DEBUG
:

25 
LOG_INFO
:

27 
LOG_WARNING
:

29 
LOG_ERROR
:

31 
LOG_FATAL
:

37 
	}
}

39 
	$fs_debug_¥ötf
(
LOG_MODULE_E
 
e_mod
, 
LOG_LEVEL_E
 
e_Àvñ
, c⁄° *
°rfûe
, 
löe
, c⁄° *
pf‹m©
, ...)

41 
va_li°
 
¨gs
;

42 
time_t
 
t
;

43 
°πime
[
MAX_TIME_STR_LEN
];

44 c⁄° *
fûíame
 = 
NULL
;

45 c⁄° *
°πmp
 = 
NULL
;

46 c⁄° *
°æevñ
;

48 
≠≥nd
 = 0;

49 
deb_buf
[100];

50 *
deb
 = 
deb_buf
;

51 
FILE
 *
Â
 = 
NULL
;

53 i‡(((
e_mod
 <
MOD_ALL
 ) || (e_mod >
MOD_NONE
))

54 || (
NULL
 =
pf‹m©
))

59 i‡((
g_eLogSwôch
 !
LOG_ALL
Ë&& (
e_Àvñ
 < g_eLogSwitch)) {

62 i‡(
g_eLogMod
 && (
e_mod
 != g_eLogMod)) {

66 ()
	`time
(&
t
);

67 
	`°r·ime
(
°πime
, (°πime), "%Y-%m-%d %H:%M:%S", 
	`loˇ…ime
(&
t
) );

69 
°πmp
 = 
	`°ºchr
(
°rfûe
, '/');

71 i‡(
NULL
 =
°πmp
) {

72 
fûíame
 = 
°rfûe
;

74 
fûíame
 = 
°πmp
 + 1;

77 
°æevñ
 = 
	`_Àvñ_°rög
(
e_Àvñ
);

79 
	`va_°¨t
(
¨gs
, 
pf‹m©
);

80 ()
	`v¢¥ötf
(
g_°rLogBuf
, 
MAX_LOG_BUF_LEN
, 
pf‹m©
, 
¨gs
);

81 
	`va_íd
(
¨gs
);

83 i‡(!
≠≥nd
)

85 
	`¢¥ötf
(
deb
, (
deb_buf
), "%s/fs_log.log", 
LOG_DIR
);

86 *
deb
 == '/')

88 
deb
++;

91 
	`_Touch
(c⁄° *
P©hFûe
);

93 
	`_Touch
(
deb
);

94 
Â
 = 
	`f›í
(
deb
, 
≠≥nd
 ? "a" : "w");

99 i‡(!
Â
 && (
î∫o
 =
EMFILE


100 #ifde‡
ENFILE


101 || 
î∫o
 =
ENFILE


105 
Â
 = 
	`‰e›í
(
deb
, 
≠≥nd
 ? "a" : "w", 
°dout
);

106 
≠≥nd
 = 2;

109 
≠≥nd
 = 1;

112 i‡(!
Â
) {

113 
	`≥º‹
(
deb
);

118 
	`Ârötf
(
Â
, "[%s] [%s:%d] [mod=%d] %†%s\n", 
°πime
, 
fûíame
, 
löe
, 
e_mod
, 
°æevñ
, 
g_°rLogBuf
);

119 
	`fÊush
(
Â
);

120 
	`Ârötf
(
°dîr
, "[%s] [%s:%d] [mod=%d] %†%s\n", 
°πime
, 
fûíame
, 
löe
, 
e_mod
, 
°æevñ
, 
g_°rLogBuf
);

121 
	`fÊush
(
°dîr
);

126 i‡(
≠≥nd
 != 2) {

127 ()
	`f˛o£
(
Â
);

133 i‡(!
≠≥nd
) {

134 
≠≥nd
 = 1;

138 
	}
}

140 
	$fs_£t_log_swôch_Àvñ
(
LOG_LEVEL_E
 
e_swôch_Àvñ
)

142 
g_eLogSwôch
 = 
e_swôch_Àvñ
;

143 
	}
}

145 
	$fs_£t_log_swôch_moduÀ
(
LOG_MODULE_E
 
e_swôch_moduÀ
)

147 
g_eLogMod
 = 
e_swôch_moduÀ
;

148 
	}
}

	@packages/fs_log.h

1 #i‚de‡
_FS_LOG_H_


2 
	#_FS_LOG_H_


	)

4 
	~<±hªad.h
>

5 
	~<î∫o.h
>

6 
	~<as£π.h
>

9 
	mMOD_ALL
 = 0,

10 
	mMOD_SCENE
,

11 
	mMOD_CHAR_OB
,

12 
	mMOD_ITEM
,

13 
	mMOD_SUMMON
,

14 
	mMOD_NPC
,

15 
	mMOD_DATA_MAP
,

16 
	mMOD_DB_CACHE
,

17 
	mMOD_TEAM
,

18 
	mMOD_MEM_POOL
,

19 
	mMOD_NETD
,

20 
	mMOD_GAMED
,

21 
	mMOD_DB
,

22 
	mMOD_NONE


23 } 
	tLOG_MODULE_E
;

26 
	mLOG_ALL
 = 0x00,

27 
	mLOG_DEBUG
 = 0x01,

28 
	mLOG_INFO
 = 0x02,

29 
	mLOG_WARNING
 = 0x04,

30 
	mLOG_ERROR
 = 0x08,

31 
	mLOG_FATAL
 = 0x10,

32 
	mLOG_NONE
 = 0xFF

33 } 
	tLOG_LEVEL_E
;

35 
fs_debug_¥ötf
(
LOG_MODULE_E
 
e_mod
, 
LOG_LEVEL_E
 
e_Àvñ
, c⁄° *
°rfûe
, 
löe
, c⁄° *
pf‹m©
, ...);

37 
	#log_¥öt
(
mod
, 
Àvñ
, 
log
...) \

38 
	`fs_debug_¥ötf
(
mod
, 
Àvñ
, 
__FILE__
, 
__LINE__
, 
log
)

	)

40 
	#log_debug
(
mod
, 
log
...) \

41 
	`fs_debug_¥ötf
(
mod
, 
LOG_DEBUG
, 
__FILE__
, 
__LINE__
, 
log
)

	)

43 
	#log_öfo
(
mod
, 
log
...) \

44 
	`fs_debug_¥ötf
(
mod
, 
LOG_INFO
, 
__FILE__
, 
__LINE__
, 
log
)

	)

46 
	#log_w¨nög
(
mod
, 
log
...) \

47 
	`fs_debug_¥ötf
(
mod
, 
LOG_WARNING
, 
__FILE__
, 
__LINE__
, 
log
)

	)

49 
	#log_îr‹
(
mod
, 
log
...) \

50 
	`fs_debug_¥ötf
(
mod
, 
LOG_ERROR
, 
__FILE__
, 
__LINE__
, 
log
)

	)

52 
	#log_Áèl
(
mod
, 
log
...) \

53 
	`fs_debug_¥ötf
(
mod
, 
LOG_FATAL
, 
__FILE__
, 
__LINE__
, 
log
)

	)

56 
±hªad_muãx_t
 
dbd_log_lock
;

58 
	#LOG_LOCK_AQUIRE
 
thªºno
 = 
î∫o
; {(Èhªºno; 
ªt
 = 
	`±hªad_muãx_lock
(&
dbd_log_lock
); 
	`as£π
‘ë =0);}

	)

59 
	#LOG_LOCK_RELEASE
 { 
ªt
 = 
	`±hªad_muãx_u∆ock
(&
dbd_log_lock
); 
	`as£π
‘ë =0);}

	)

61 
	#log_öfo_thr_ß„
(
mod
, 
log
...) do {\

62 
LOG_LOCK_AQUIRE
;\

63 
	`log_öfo
(
mod
, 
log
);\

64 
LOG_LOCK_RELEASE
;\

65 } 0)

	)

67 
	#log_w¨nög_thr_ß„
(
mod
, 
log
...) do {\

68 
LOG_LOCK_AQUIRE
;\

69 
	`log_w¨nög
(
mod
, 
log
);\

70 
LOG_LOCK_RELEASE
;\

71 } 0)

	)

73 
	#log_îr‹_thr_ß„
(
mod
, 
log
...) do {\

74 
LOG_LOCK_AQUIRE
;\

75 
	`log_îr‹
(
mod
, 
log
);\

76 
LOG_LOCK_RELEASE
;\

77 } 0)

	)

80 
fs_£t_log_swôch_Àvñ
(
LOG_LEVEL_E
 
e_swôch_Àvñ
);

81 
fs_£t_log_swôch_moduÀ
(
LOG_MODULE_E
 
e_swôch_moduÀ
);

	@packages/fs_lpc_ext.c

2 
	~"fs_Õc_ext.h
"

4 
fu≈å_t
 *
	$fs_make_lfun_fu≈
(
obje˘_t
 *
obj
, *
fun˘i⁄_«me
, 
svÆue_t
 *
¨gs
)

6 
fu≈å_t
 *
Â
;

7 *
«me
 = 
fun˘i⁄_«me
;

8 
Êags
, 
ödex
, 
fio
, 
vio
;

10 
¥ogøm_t
 *
¥og
 = 
	`föd_fun˘i⁄_by_«me2
(
obj
, &
«me
, &
ödex
, &
fio
, &
vio
);

11 i‡(
¥og
 =
NULL
)

12  
NULL
;

14 
compûî_fun˘i⁄_t
 *
fu≈
 = &
¥og
->
fun˘i⁄_èbÀ
[
ödex
];

17 
Êags
 = 
fu≈
->
ru¡ime_ödex
 + 
fio
;

19 
Â
 = (
fu≈å_t
*)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
loˇl_±r_t
), 
TAG_FUNP
, "make_local_funp");

20 
Â
->
hdr
.
ow√r
 = 
obj
;;

21 
	`add_ªf
(
obj
, "make_local_funp");

22 
Â
->
hdr
.
ty≥
 = 
FP_LOCAL
 | 
FP_NOT_BINDABLE
;

25 
Â
->
f
.
loˇl
.
ödex
 = 
Êags
;

27 i‡(
¨gs
 !
NULL
 &&árgs->
ty≥
 =
T_ARRAY
) {

28 
Â
->
hdr
.
¨gs
 =árgs->
u
.
¨r
;

29 
¨gs
->
u
.
¨r
->
ªf
++;

31 
Â
->
hdr
.
¨gs
 = 
NULL
;

34 
Â
->
hdr
.
ªf
 = 1;

36  
Â
;

37 
	}
}

	@packages/fs_lpc_ext.h

2 #i‚de‡
_FS_LPC_EXT_H_


3 
	#_FS_LPC_EXT_H_


	)

5 
	~"Õc.h
"

6 
	~"Õc_ö˛.h
"

8 
fu≈å_t
 *
fs_make_lfun_fu≈
(
obje˘_t
 *
obj
, *
fun˘i⁄_«me
, 
svÆue_t
 *
¨gs
);

	@packages/fs_lpc_op.h

17 #i‚de‡
_FS_LPC_OP_H_


18 
	#_FS_LPC_OP_H_


	)

20 
	~"Õc_ö˛.h
"

22 
	#IS_LPC_INT
(
x
Ë((x)->
ty≥
 =
T_NUMBER
)

	)

23 
	#IS_LPC_STR
(
x
Ë((x)->
ty≥
 =
T_STRING
)

	)

24 
	#IS_LPC_ARR
(
x
Ë((x)->
ty≥
 =
T_ARRAY
)

	)

25 
	#IS_LPC_MAP
(
x
Ë((x)->
ty≥
 =
T_MAPPING
)

	)

26 
	#IS_LPC_UNDEF
(
x
Ë((x)->
ty≥
 =
T_NUMBER
 && (x)->
subty≥
 =
T_UNDEFINED
)

	)

28 
	#IS_NULL
(
x
Ë((xË=&
c⁄°0u
)

	)

31 
	#TO_LPC_STR
(
s
, 
x
) do{ \

32 
s
.
ty≥
 = 
T_STRING
; \

33 
s
.
subty≥
 = 
STRING_CONSTANT
; \

34 
s
.
u
.
°rög
=
x
; \

35 }0)

	)

37 
	#TO_LPC_INT
(
s
, 
x
) do { \

38 
s
.
ty≥
 = 
T_NUMBER
; \

39 
s
.
u
.
numbî
 = 
x
; \

40 }0)

	)

42 
	#TO_LPC_MAP
(
s
, 
x
) do { \

43 
s
.
ty≥
 = 
T_MAPPING
; \

44 
s
.
u
.
m≠
 = 
x
; \

45 }0)

	)

47 
	#LPC_ARR_SIZE
(
s
Ë(s)->
u
.
¨r
->
size


	)

48 
	#LPC_ARR_ITEM
(
s
,
x
Ë(&((s)->
u
.
¨r
->
ôem
[x]))

	)

50 
	#LPC_INT_VALUE
(
s
Ë((s)->
u
.
numbî
)

	)

51 
	#LPC_STR_VALUE
(
s
Ë((s)->
u
.
°rög
)

	)

52 
	#LPC_MAP_VALUE
(
s
Ë((s)->
u
.
m≠
)

	)

53 
	#LPC_ARR_VALUE
(
s
Ë((s)->
u
.
¨r
)

	)

	@packages/fs_main_spec.h

3 
	~"../gømm¨/•ec.h
"

5 
maö_lo›
();

7 
ˇŒ_out
(
°rög
 | 
fun˘i⁄
, ,...);

8 
ªmove_ˇŒ_out
( );

11 
fs_íabÀ_dúty_obje˘
(
obje˘
);

12 
fs_íabÀ_dúty_m≠
(
m≠pög
);

13 
buf„r
 
fs_m¨shÆ_dúty_m≠
(
m≠pög
);

14 
fs_mîge_dúty_m≠
(
m≠pög
, 
buf„r
);

15 
buf„r
 
fs_m¨shÆ_m≠
(
m≠pög
);

17 
buf„r
 
fs_m¨shÆ_dúty_obje˘
(
obje˘
);

18 
fs_mîge_dúty_obje˘
(
m≠pög
, 
buf„r
);

21 
u£r_¸óã
();

22 
u£r_de°roy
();

23 
gamed_˛o£_uid_c⁄√˘i⁄
();

25 
fs_ßve_Æl_u£r
();

26 
fs_ßve_Æl_d©
(
m≠pög
, );

27 
fs_db_sync
();

28 
fs_db_gamed_exô
();

30 
fs_db_obje˘_√w
(|
°rög
, 
obje˘
);

31 
fs_db_obje˘_lﬂd
(|
°rög
, , );

32 
fs_db_obje˘_u∆ﬂd
(|
°rög
);

33 
fs_db_obje˘_ßve
(|
°rög
, 
obje˘
, );

34 
fs_db_obje˘_ª«me
(|
°rög
, 
obje˘
, string);

35 
fs_db_obje˘_ª°‹e
(
obje˘
, 
buf„r
);

36 
fs_dúty_mem_poﬁ_°©
();

41 
mixed
 
gë_u£r
( );

42 
is_⁄löe
( );

43 
logout
( );

74 
upd©e_max_logö
();

76 
mixed
 
gë_Æl_u£rs
(:0);

77 
gë_⁄löe_cou¡
();

81 
√w_ôem
(
°rög
);

82 
is_ôem_⁄löe
();

83 
ª°‹e_ôem
(
°rög
, 
m≠pög
);

84 
de°roy_ôem
();

85 
m≠pög
 
gë_ôem_m≠
(, );

88 
SëIãmTemp
(, 
°rög
|, 
mixed
);

89 
mixed
 
GëIãmTemp
(, 
°rög
|);

90 
SëIãmSave
(, 
°rög
|, 
mixed
);

91 
mixed
 
GëIãmSave
(, 
°rög
|);

94 
√w_≈c
(
°rög
);

95 
ª°‹e_≈c
(
°rög
, 
m≠pög
);

96 
de°roy_≈c
();

97 
SëNpc
(, 
°rög
|, 
mixed
);

98 
mixed
 
GëNpc
(, 
°rög
|);

99 
SëNpcSave
(, 
°rög
|, 
mixed
);

100 
mixed
 
GëNpcSave
(, 
°rög
|);

101 
is_≈c_⁄löe
();

102 
obje˘
 
gë_≈c_obje˘
();

103 *
gë_≈c_pos
();

104 
£t_≈c_cú˛e_fõld
(, );

105 
gë_≈c_cú˛e_fõld
();

106 
ö_≈c_fõld
(, , , );

107 
m≠pög
 
gë_≈c_m≠
(, );

108 
£t_≈c_m≠
(, 
m≠pög
, );

109 
£t_≈c_fightid
(, );

110 
gë_≈c_fightid
();

111 
mixed
 *
gë_≈c_°©us
();

112 
£t_≈c_°©us
(, , , );

114 
£t_ef„˘_≈c
(, );

119 
√w_summ⁄
(
°rög
);

120 
m≠pög
 
gë_summ⁄_m≠
(, );

121 
de°roy_summ⁄
();

122 
ª°‹e_summ⁄
(
°rög
, 
m≠pög
);

123 
is_summ⁄_⁄löe
();

124 
SëSumm⁄Temp
(, 
°rög
|, 
mixed
);

125 
mixed
 
GëSumm⁄Temp
(, 
°rög
);

126 
SëSumm⁄Save
(, 
°rög
|, 
mixed
);

127 
mixed
 
GëSumm⁄Save
(, 
°rög
);

152 
m≠pög
 
gë_ãam_m≠
();

153 
√w_ãam
();

154 
dismiss_ãam
();

221 
upd©e_Õc_obje˘
(
obje˘
);

222 
dump_mem‹y_poﬁ
();

223 *
gë_time_of_day
();

224 
íabÀ_log_±o
();

226 
°rög
 
fs_ic⁄v
(string, string, string);

228 
fs_dns_ªsﬁve
(
°rög
, 
fun˘i⁄
, 
mixed
);

231 
°rög
 
_
(string);

232 
m≠pög
 
öô_gëãxt
(
°rög
, string);

	@packages/fs_marshal.h

2 #i‚de‡
_FS_MARSHAL_H


3 
	#_FS_MARSHAL_H


	)

6 
	~"fs_dbi.h
"

7 
	~"Õc.h
"

8 
	~"Õc_ö˛.h
"

11 
fs_m¨shÆ
(
svÆue_t
 *
vÆue
, 
fs_dbi_¨øy_t
 *
¨r
);

12 
fs_m¨shÆ_¨øy
(
¨øy_t
 *
¨øy
, 
fs_dbi_¨øy_t
 *
¨r
);

13 
fs_m¨shÆ_m≠pög
(
m≠pög_t
 *
m≠
, 
fs_dbi_¨øy_t
 *
¨r
);

15 
fs_unm¨shÆ
(
svÆue_t
 *
vÆue
, 
fs_dbi_¨øy_ôî_t
 *
ôî
);

16 
m≠pög_t
 *
fs_unm¨shÆ_m≠pög
(
fs_dbi_¨øy_ôî_t
 *
ôî
);

	@packages/fs_mbuf.c

2 
	~"fs_mbuf.h
"

4 
	~<evít.h
>

5 
	~<°rög.h
>

6 
	~<°dio.h
>

7 
	~<î∫o.h
>

9 
	#MIN_BLK_SIZE
 4

	)

10 
	#BLK_FACTOR
 4

	)

12 
	#BLK_SIZE
 (1024*2)

	)

15 
ölöe
 
	$blk_buf_öô
(
fs_mbuf_blk_t
 *
blk
)

17 
blk
->
hód
 = blk->
èû
 = blk->
buf
;

18 
	}
}

20 
fs_mbuf_blk_t
 *
	$fs_mbuf_add_blk
(
fs_mbuf_t
 *
mbuf
, 
size
)

22 
fs_mbuf_blk_t
 *
blk
 = 
	`ˇŒoc
(1, (fs_mbuf_blk_t));

24 
size
 = 
mbuf
->
höt_size
 > size ? mbuf->hint_size : size;

25 
size
 = 
BLK_FACTOR
 * ((size + BLK_FACTOR - 1) / BLK_FACTOR);

26 i‡(
size
 < 
MIN_BLK_SIZE
) {

27 
size
 = 
MIN_BLK_SIZE
;

30 
blk
->
id
 = 
mbuf
->
blk_cou¡
;

31 
blk
->
mbuf
 = mbuf;

32 
blk
->
buf
 = (*)
	`mÆloc
(
size
);

33 
blk
->
size
 = size;

34 
blk
->
íd
 = blk->
buf
 + blk->
size
;

35 
	`blk_buf_öô
(
blk
);

39 
blk
->
√xt
 = 
NULL
;

40 i‡(
mbuf
->
èû
 =
NULL
) {

41 
mbuf
->
hód
 = mbuf->
èû
 = 
blk
;

43 
mbuf
->
èû
->
√xt
 = 
blk
;

44 
mbuf
->
èû
 = 
blk
;

47 
mbuf
->
blk_cou¡
++;

48 
mbuf
->
blk_íq
 = 
blk
;

49 
mbuf
->
Æloc_size
 +
blk
->
size
;

52  
blk
;

53 
	}
}

55 
	$fs_mbuf_öô
(
fs_mbuf_t
 *
mbuf
, 
blk_size
)

57 
mbuf
->
höt_size
 = 
blk_size
 =0 ? 
BLK_SIZE
 : blk_size;

58 
mbuf
->
d©a_size
 = 0;

59 
mbuf
->
blk_íq
 = 
NULL
;

60 
mbuf
->
blk_deq
 = 
NULL
;

61 
mbuf
->
blk_cou¡
 = 0;

62 
mbuf
->
Æloc_size
 = 0;

64 
mbuf
->
hód
 = 
NULL
;

65 
mbuf
->
èû
 = 
NULL
;

66 
mbuf
->
blk_deq
 = 
	`fs_mbuf_add_blk
(mbuf, mbuf->
höt_size
);

67 
	}
}

69 
	$fs_mbuf_de°ru˘
(
fs_mbuf_t
 *
mbuf
)

71 
fs_mbuf_blk_t
 *
blk
, *
tmp
;

73 
blk
 = 
mbuf
->
hód
; blk && (
tmp
 = blk->
√xt
, 1); blk =Åmp) {

74 
mbuf
->
blk_cou¡
--;

75 
	`‰ì
(
blk
->
buf
);

76 
	`‰ì
(
blk
);

87 
	}
}

89 
	$fs_mbuf_ª£t
(
fs_mbuf_t
 *
mbuf
)

91 
fs_mbuf_blk_t
 *
blk
, *
tmp
;

93 i‡(
mbuf
->
blk_cou¡
 > 1) {

94 
blk
 = 
mbuf
->
hód
; blk && (
tmp
 = blk->
√xt
, 1); blk =Åmp) {

95 
	`‰ì
(
blk
->
buf
);

96 
	`‰ì
(
blk
);

99 
	`fs_mbuf_öô
(
mbuf
, mbuf->
Æloc_size
);

101 
	`as£π
(
mbuf
->
blk_cou¡
 == 1);

102 
	`blk_buf_öô
(
mbuf
->
hód
);

103 
mbuf
->
d©a_size
 = 0;

106 
	`as£π
(
mbuf
->
hód
 =mbuf->
èû
 && mbuf->hód =mbuf->
blk_íq
 && mbuf->hód =mbuf->
blk_deq
);

107 
	}
}

110 
fs_√t_mbuf_t
 *
	$fs_√t_mbuf_√w
(
hód_size
)

112 
fs_√t_mbuf_t
 *
√tbuf
 = 
	`ˇŒoc
(1, (fs_net_mbuf_t));

113 
	`fs_√t_mbuf_öô
(
√tbuf
, 
hód_size
);

114  
√tbuf
;

115 
	}
}

117 
	$fs_√t_mbuf_‰ì
(
fs_√t_mbuf_t
 *
√tbuf
)

119 
	`fs_mbuf_de°ru˘
(&
√tbuf
->
mbuf
);

120 
	`‰ì
(
√tbuf
);

121 
	}
}

123 
	$fs_√t_mbuf_öô
(
fs_√t_mbuf_t
 *
√tbuf
, 
hód_size
)

125 
√tbuf
->
hód_size
 = head_size;

126 
	`fs_mbuf_öô
(&
√tbuf
->
mbuf
, 0);

127 
√tbuf
->
hód
 = 
	`FS_MBUF_ALLOC
(&√tbuf->
mbuf
,Çëbuf->
hód_size
);

128 
	}
}

130 
	$fs_√t_mbuf_ª£t
(
fs_√t_mbuf_t
 *
√tbuf
)

132 
	`fs_mbuf_ª£t
(&
√tbuf
->
mbuf
);

133 
√tbuf
->
hód
 = 
	`FS_MBUF_ALLOC
(&√tbuf->
mbuf
,Çëbuf->
hód_size
);

134 
	}
}

137 
	$fs_mbuf_íq_•™
(
fs_mbuf_t
 *
mbuf
, *
d©a
, 
Àn
)

139 
fs_mbuf_blk_t
 *
blk
 = 
mbuf
->
blk_íq
;

140 
ˇ∑côy
 = 
	`FS_MBUF_BLK_CAP
(
blk
);

142 i‡(
ˇ∑côy
 < 
Àn
) {

143 
	`mem˝y
(
blk
->
èû
, 
d©a
, 
ˇ∑côy
);

144 
	`FS_MBUF_ADVANCE
(
mbuf
, 
blk
, 
ˇ∑côy
);

146 
Àn
 -
ˇ∑côy
;

147 
d©a
 +
ˇ∑côy
;

148 
blk
 = 
	`fs_mbuf_add_blk
(
mbuf
, 
Àn
);

150 
	`mem˝y
(
blk
->
èû
, 
d©a
, 
Àn
);

151 
	`FS_MBUF_ADVANCE
(
mbuf
, 
blk
, 
Àn
);

152 
	}
}

156 *
	$fs_mbuf_íq
(
fs_mbuf_t
 *
mbuf
, *
d©a
, 
Àn
)

158 *
p
 = 
	`FS_MBUF_ALLOC
(
mbuf
, 
Àn
);

159 i‡(
d©a
)

160 
	`mem˝y
(
p
, 
d©a
, 
Àn
);

161  
p
;

162 
	}
}

164 
	$fs_mbuf_deq
(
fs_mbuf_t
 *
mbuf
, *
ªt
, 
Àn
)

166 
fs_mbuf_blk_t
 *
blk
 = 
mbuf
->
blk_deq
;

167 
¶í
 = 
Àn
;

170 
∑ylﬂd
 = 
blk
->
èû
 - blk->
hód
;

171 
mö
 = 
∑ylﬂd
 < 
Àn
 ?Öayload :Üen;

172 i‡(
mö
 > 0) {

173 i‡(
ªt
 !
NULL
)

174 
	`mem˝y
(
ªt
, 
blk
->
hód
, 
∑ylﬂd
);

175 
blk
->
hód
 +
mö
;

176 
mbuf
->
d©a_size
 -
mö
;

177 
Àn
 -
mö
;

181 } 
Àn
 > 0 && 
NULL
 !(
blk
 = 
mbuf
->
blk_deq
 = blk->
√xt
));

183  
¶í
 - 
Àn
;

184 
	}
}

188 
	#ELEMENT_ALIGN
 4

	)

189 
	#MIN_ELEMENT_CNT
 1

	)

190 
	#MAX_ELEMENT_CNT
 1024

	)

191 
	#MAX_PAGE_SIZE
 (1024 * 16)

	)

193 
	$‰ì_¨øy_blk_öô
(
fs_‰ì_¨øy_t
 *
Áº
, 
fs_mbuf_blk_t
 *
blk
)

195 *
ñemít
, *
íd
;

196 
fs_‰ì_¨øy_íåy_t
 *
íåy
;

198 
ñemít
 = 
blk
->
buf
, 
íd
 =ÉÀmíà+ 
Áº
->
ñemít_size
 ;Énd <= blk->end; ) {

199 
íåy
 = (
fs_‰ì_¨øy_íåy_t
*)
ñemít
;

200 
íåy
->
√xt
 = 
Áº
->
‰ì
;

201 
Áº
->
‰ì
 = 
íåy
;

202 
Áº
->
ñemít_tŸÆ
++;

204 
ñemít
 = 
íd
;

205 
íd
 = 
ñemít
 + 
Áº
->
ñemít_size
;

207 
	}
}

209 
	$fs_‰ì_¨øy_öô
(
fs_‰ì_¨øy_t
 *
Áº
, *
«me
, 
ñsize
, 
ñ˙t_∑ge
)

211 
∑ge_size
;

213 i‡(
ñsize
 < (
fs_‰ì_¨øy_íåy_t
))

214 
ñsize
 = (
fs_‰ì_¨øy_íåy_t
);

215 
ñsize
 = 
ELEMENT_ALIGN
 * ((elsize + ELEMENT_ALIGN - 1) / ELEMENT_ALIGN);

217 i‡(
ñ˙t_∑ge
 < 
MIN_ELEMENT_CNT
)

218 
ñ˙t_∑ge
 = 
MIN_ELEMENT_CNT
;

219 i‡(
ñ˙t_∑ge
 > 
MAX_ELEMENT_CNT
)

220 
ñ˙t_∑ge
 = 
MAX_ELEMENT_CNT
;

222 
∑ge_size
 = 
ñ˙t_∑ge
 * 
ñsize
;

228 
Áº
->
«me
 = 
	`°rdup
(name);

229 
Áº
->
ñemít_size
 = 
ñsize
;

230 
Áº
->
ñemít_tŸÆ
 = 0;

231 
Áº
->
ñemít_Æloc
 = 0;

232 
Áº
->
‰ì
 = 
NULL
;

234 
	`fs_mbuf_öô
(&
Áº
->
mbuf
, 
∑ge_size
);

235 
	`‰ì_¨øy_blk_öô
(
Áº
, f¨r->
mbuf
.
blk_íq
);

236 
	}
}

238 
	$fs_‰ì_¨øy_de°ru˘
(
fs_‰ì_¨øy_t
 *
Áº
)

240 
	`‰ì
(
Áº
->
«me
);

241 
	`fs_mbuf_de°ru˘
(&
Áº
->
mbuf
);

242 
	}
}

244 *
	$fs_‰ì_¨øy_Æloc
(
fs_‰ì_¨øy_t
 *
Áº
)

246 *
ªt
;

248 i‡(
Áº
->
‰ì
 =
NULL
) {

249 
	`fs_mbuf_add_blk
(&
Áº
->
mbuf
, f¨r->mbuf.
höt_size
);

250 
	`‰ì_¨øy_blk_öô
(
Áº
, f¨r->
mbuf
.
blk_íq
);

253 
ªt
 = 
Áº
->
‰ì
;

254 
Áº
->
‰ì
 = f¨r->‰ì->
√xt
;

255 
Áº
->
ñemít_Æloc
++;

257 
	`mem£t
(
ªt
, 0, 
Áº
->
ñemít_size
);

259  
ªt
;

260 
	}
}

262 
	$fs_‰ì_¨øy_‰ì
(
fs_‰ì_¨øy_t
 *
Áº
, *
ñemít
)

264 
fs_‰ì_¨øy_íåy_t
 *
íåy
 = 
ñemít
;

265 
íåy
->
√xt
 = 
Áº
->
‰ì
;

266 
Áº
->
‰ì
 = 
íåy
;

267 
Áº
->
ñemít_Æloc
--;

269 
	}
}

	@packages/fs_mbuf.h

2 #i‚de‡
_FS_MBUF_H_


3 
	#_FS_MBUF_H_


	)

5 
	~<°dlib.h
>

6 
	~<°dio.h
>

7 
	~<as£π.h
>

11 
fs_mbuf_s
 
	tfs_mbuf_t
;

13 
	sfs_mbuf_blk_s
 {

15 
fs_mbuf_blk_s
 *
	m√xt
;

16 
fs_mbuf_t
 *
	mmbuf
;

17 
	mid
;

18 
	msize
;

19 *
	mbuf
;

20 *
	mhód
;

21 *
	mèû
;

22 *
	míd
;

23 } 
	tfs_mbuf_blk_t
;

27 
	sfs_mbuf_s
 {

29 
fs_mbuf_blk_t
 *
	mhód
;

30 
fs_mbuf_blk_t
 *
	mèû
;

32 
fs_mbuf_blk_t
 *
	mblk_deq
;

33 
fs_mbuf_blk_t
 *
	mblk_íq
;

34 
	mblk_cou¡
;

35 
	md©a_size
;

36 
	mhöt_size
;

37 
	mÆloc_size
;

40 
fs_mbuf_öô
(
fs_mbuf_t
 *
mbuf
, 
blk_size
);

41 
fs_mbuf_de°ru˘
(
fs_mbuf_t
 *
mbuf
);

42 
fs_mbuf_blk_t
 *
fs_mbuf_add_blk
(
fs_mbuf_t
 *
mbuf
, 
size
);

43 *
fs_mbuf_íq
(
fs_mbuf_t
 *
mbuf
, *
d©a
, 
Àn
);

44 
fs_mbuf_íq_•™
(
fs_mbuf_t
 *
mbuf
, *
d©a
, 
Àn
);

45 
fs_mbuf_deq
(
fs_mbuf_t
 *
mbuf
, *
ªt
, 
Àn
);

46 
fs_mbuf_ª£t
(
fs_mbuf_t
 *
mbuf
);

48 
	gbuf„ªvít
;

50 
	#FS_MBUF_ADVANCE
(
mbuf
, 
blk
, 
Àn
) do {\

51 (
mbuf
)->
d©a_size
 +(
Àn
); \

52 (
blk
)->
èû
 +(
Àn
); \

53 } 0)

	)

55 
	#FS_MBUF_BLK_CAP
(
blk
Ë((blk)->
íd
 - (blk)->
èû
)

	)

56 
	#FS_MBUF_BLK_DATA_LEN
(
blk
Ë((blk)->
èû
 - (blk)->
hód
)

	)

58 
ölöe
 *
	$FS_MBUF_ALLOC
(
fs_mbuf_t
 *
mbuf
, 
Àn
)

62 ; 
	`FS_MBUF_BLK_CAP
(
mbuf
->
blk_íq
Ë< 
Àn
; ) {

63 
mbuf
->
blk_íq
 = mbuf->blk_íq->
√xt
;

64 i‡(
mbuf
->
blk_íq
 =
NULL
) {

65 
	`fs_mbuf_add_blk
(
mbuf
, 
Àn
);

68 
	`as£π
(
	`FS_MBUF_BLK_DATA_LEN
(
mbuf
->
blk_íq
) == 0);

73 
	`FS_MBUF_ADVANCE
(
mbuf
, mbuf->
blk_íq
, 
Àn
);

74  
mbuf
->
blk_íq
->
èû
 - 
Àn
;

75 
	}
}

77 
	#FS_MBUF_ENQ
(
mbuf
, 
d©a
, 
Àn
) do { \

78 *
p
 = 
	`FS_MBUF_ALLOC
(
mbuf
, 
Àn
);\

79 
	`mem˝y
(
p
, 
d©a
, 
Àn
);\

80 } 0)

	)

82 
	#FS_MBUF_ENQ_TYPE
(
mbuf
, 
d©a
, 
ty≥
) do { \

83 
ty≥
 *
p
 = 
	`FS_MBUF_ALLOC
(
mbuf
, (type));\

84 *
p
 = *(
d©a
);\

85 } 0)

	)

89 
	sfs_öbuf_s
 {

90 *
	mbuf
;

91 
	moff
;

92 
	msize
;

93 } 
	tfs_öbuf_t
;

95 
	#FS_INBUF_INIT
(
ö
, 
d©a
, 
Àn
) do {\

96 (
ö
)->
buf
 = (
d©a
);\

97 (
ö
)->
size
 = (
Àn
);\

98 (
ö
)->
off
 = 0; \

99 } 0)

	)

101 
	#FS_INBUF_POS
(
ö
Ë((*)((ö)->
buf
 + (ö)->
off
))

	)

102 
	#FS_INBUF_LEN
(
ö
Ë((ö)->
size
 - (ö)->
off
)

	)

103 
	#FS_INBUF_ADV
(
ö
, 
Àn
Ë((ö)->
off
 +÷í))

	)

104 
	#FS_INBUF_CHECK
(
ö
, 
Àn
Ëdÿ{i‡(
	`FS_INBUF_LEN
(öË< (Àn)Ë -1; } 0)

	)

106 
	#FS_INBUF_GET_NO_CHECK
(
ö
, 
ªtv
, 
Àn
) do { \

107 
	`mem˝y
((
ªtv
), 
	`FS_INBUF_POS
((
ö
)), (
Àn
));\

108 
	`FS_INBUF_ADV
((
ö
), (
Àn
)); \

109 } 0)

	)

111 
	#FS_INBUF_GET_TYPE
(
ö
, 
ªtv
, 
ty≥
) do {\

112 
	`FS_INBUF_CHECK
((
ö
), (
ty≥
));\

113 *(
ty≥
*)(
ªtv
Ë*—y≥*)
	`FS_INBUF_POS
((
ö
));\

114 
	`FS_INBUF_ADV
((
ö
), (
ty≥
)); \

115 } 0)

	)

119 
	sfs_‰ì_¨øy_íåy_s
 {

120 
fs_‰ì_¨øy_íåy_s
 *
	m√xt
;

121 } 
	tfs_‰ì_¨øy_íåy_t
;

123 
	sfs_‰ì_¨øy_s
 {

124 
fs_‰ì_¨øy_íåy_t
 *
	m‰ì
;

125 *
	m«me
;

126 
	mñemít_size
;

127 
	mñemít_Æloc
;

128 
	mñemít_tŸÆ
;

129 
fs_mbuf_t
 
	mmbuf
;

130 } 
	tfs_‰ì_¨øy_t
;

133 
fs_‰ì_¨øy_öô
(
fs_‰ì_¨øy_t
 *
Áº
, *
«me
, 
ñsize
, 
ñ˙t_∑ge
);

134 
fs_‰ì_¨øy_de°ru˘
(
fs_‰ì_¨øy_t
 *
Áº
);

135 *
fs_‰ì_¨øy_Æloc
(
fs_‰ì_¨øy_t
 *
Áº
);

136 
fs_‰ì_¨øy_‰ì
(
fs_‰ì_¨øy_t
 *
Áº
, *
ñemít
);

139 
	sfs_√t_mbuf_s
 {

140 *
	mhód
;

141 
	mhód_size
;

142 
fs_mbuf_t
 
	mmbuf
;

143 } 
	tfs_√t_mbuf_t
;

145 
fs_√t_mbuf_t
 * 
fs_√t_mbuf_√w
(
hód_size
);

146 
fs_√t_mbuf_‰ì
(
fs_√t_mbuf_t
 *
√tbuf
);

147 
fs_√t_mbuf_öô
(
fs_√t_mbuf_t
 *
√tbuf
, 
hód_size
);

148 
fs_√t_mbuf_ª£t
(
fs_√t_mbuf_t
 *
√tbuf
);

149 
	#FS_NET_MBUF_PAYLOAD_LEN
(
√tbuf
Ë(“ëbuf)->
mbuf
.
d©a_size
 - (√tbuf)->
hód_size
)

	)

	@packages/fs_mysql.c

2 
	~<as£π.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<˘y≥.h
>

8 
	~"mysql.h
"

10 
	~"Õc.h
"

11 
	~"Õc_ö˛.h
"

12 
	~"Õc_¨gs_›.h
"

13 
	~"fs_comm.h
"

16 
	mid
;

17 
MYSQL
 *
	mmy_c⁄n
;

18 } 
	tfs_mysql_c⁄n_t
;

22 
	mid
;

23 
	mc⁄n_id
;

24 
	mnumcﬁs
;

25 
¨øy_t
 *
	mcﬁty≥s
;

26 
¨øy_t
 *
	mcﬁ«mes
;

27 
¨øy_t
 *
	m„tch_tmp
;

28 
MYSQL_RES
 *
	mmy_ªs
;

29 } 
	tfs_mysql_curs‹_t
;

31 
fs_≠r_hash_t
 
	gc⁄n_ba£
 = {
NULL
, NULL};

32 
fs_≠r_hash_t
 
	gcurs‹_ba£
 = {
NULL
, NULL};

34 
	gs_c⁄n_id
 = 1;

35 
	gs_curs‹_id
 = 1;

37 
	$fs_mysql_moduÀ_öô
()

39 
	`fs_≠r_hash_c⁄°ru˘
(&
c⁄n_ba£
);

40 
	`fs_≠r_hash_c⁄°ru˘
(&
curs‹_ba£
);

41 
	}
}

43 
fs_mysql_c⁄n_t
 *
	$¸óã_c⁄n
(
MYSQL
 *
my_c⁄n
)

45 
cid
 = 
s_c⁄n_id
++;

46 
fs_mysql_c⁄n_t
 *
c⁄n
 = 
	`ˇŒoc
(1, (*conn));

47 
c⁄n
->
id
 = 
cid
;

48 
c⁄n
->
my_c⁄n
 = my_conn;

49 
	`≠r_hash_£t
(
c⁄n_ba£
.
hash
, &
c⁄n
->
id
, (conn->id), conn);

50  
c⁄n
;

51 
	}
}

53 
	$‰ì_c⁄n
(
fs_mysql_c⁄n_t
 *
c⁄n
)

55 
	`mysql_˛o£
(
c⁄n
->
my_c⁄n
);

56 
	`≠r_hash_£t
(
c⁄n_ba£
.
hash
, &
c⁄n
->
id
, (c⁄n->id), 
NULL
);

57 
	`‰ì
(
c⁄n
);

58 
	}
}

60 
fs_mysql_curs‹_t
 * 
	$¸óã_curs‹
(
fs_mysql_c⁄n_t
 *
c⁄n
, 
MYSQL_RES
 *
ªsu…
, 
numcﬁs
)

62 
fs_mysql_curs‹_t
 *
cur
 = 
	`ˇŒoc
(1, (*cur));

64 
cur
->
id
 = 
s_curs‹_id
++;

65 
cur
->
c⁄n_id
 = 
c⁄n
->
id
;

66 
cur
->
my_ªs
 = 
ªsu…
;

67 
cur
->
numcﬁs
 =Çumcols;

68 
cur
->
cﬁty≥s
 = 
NULL
;

69 
cur
->
cﬁ«mes
 = 
NULL
;;

70 
cur
->
„tch_tmp
 = 
NULL
;

71 
	`≠r_hash_£t
(
curs‹_ba£
.
hash
, &
cur
->
id
, (cur->id), cur);

73  
cur
;

74 
	}
}

76 
	$‰ì_curs‹
(
fs_mysql_curs‹_t
 *
cur
)

78 
	`mysql_‰ì_ªsu…
(
cur
->
my_ªs
);

79 
	`≠r_hash_£t
(
curs‹_ba£
.
hash
, &
cur
->
id
, (cur->id), 
NULL
);

80 i‡(
cur
->
cﬁty≥s
 !
NULL
) {

81 
	`‰ì_¨øy
(
cur
->
cﬁty≥s
);

83 i‡(
cur
->
cﬁ«mes
 !
NULL
) {

84 
	`‰ì_¨øy
(
cur
->
cﬁ«mes
);

86 i‡(
cur
->
„tch_tmp
 !
NULL
) {

87 
	`‰ì_¨øy
(
cur
->
„tch_tmp
);

89 
	`‰ì
(
cur
);

90 
	}
}

92 
ölöe
 
	$curs‹_£t_cﬁ«mes
(
fs_mysql_curs‹_t
 *
cur
, 
¨øy_t
 *
cﬁ«mes
)

94 
cur
->
cﬁ«mes
 = colnames;

95 
	`add_ªf
(
cﬁ«mes
, "fs mysql");

96 
	}
}

98 
ölöe
 
	$curs‹_£t_cﬁty≥s
(
fs_mysql_curs‹_t
 *
cur
, 
¨øy_t
 *
cﬁty≥s
)

100 
cur
->
cﬁty≥s
 = coltypes;

101 
	`add_ªf
(
cﬁty≥s
, "fs mysql");

102 
	}
}

107 *
	$gëcﬁum¡y≥
 (
íum_fõld_ty≥s
 
ty≥
)

109 
ty≥
) {

110 
MYSQL_TYPE_VAR_STRING
: 
MYSQL_TYPE_STRING
:

112 
MYSQL_TYPE_TINY
:

113 
MYSQL_TYPE_SHORT
:

114 
MYSQL_TYPE_INT24
:

115 
MYSQL_TYPE_LONG
:

116 
MYSQL_TYPE_LONGLONG
:

117 
MYSQL_TYPE_YEAR
:

119 
MYSQL_TYPE_DECIMAL
:

120 
MYSQL_TYPE_FLOAT
:

121 
MYSQL_TYPE_DOUBLE
:

123 
MYSQL_TYPE_TINY_BLOB
:

124 
MYSQL_TYPE_MEDIUM_BLOB
:

125 
MYSQL_TYPE_LONG_BLOB
:

126 
MYSQL_TYPE_BLOB
:

128 
MYSQL_TYPE_DATE
:

129 
MYSQL_TYPE_NEWDATE
:

131 
MYSQL_TYPE_DATETIME
:

133 
MYSQL_TYPE_TIME
:

135 
MYSQL_TYPE_TIMESTAMP
:

137 
MYSQL_TYPE_ENUM
:

138 
MYSQL_TYPE_SET
:

140 
MYSQL_TYPE_NULL
:

145 
	}
}

153 
	$f_mysql_c⁄√˘
()

155 *
ho°
;

156 *
u£∫ame
;

157 *
∑ssw‹d
;

158 *
db«me
;

159 
p‹t
;

160 
m≠pög_t
 *
m≠c⁄n
 = 
	`Æloˇã_m≠pög
(0);

162 
SET_ALL_ARGS
;

164 
¨øy_t
 *
¨r
 = 
	`ARGS
(0)->
u
.arr;

165 
svÆue_t
 *
¨gs
 = 
¨r
->
ôem
;

166 i‡(
¨r
->
size
 != 5) {

167 
îr‹
;

170 i‡(
¨gs
[0].
ty≥
 !
T_STRING
) {

171 
îr‹
;

173 
ho°
 = 
¨gs
[0].
u
.
°rög
;

175 i‡(
¨gs
[1].
ty≥
 !
T_STRING
) {

176 
îr‹
;

178 
u£∫ame
 = 
¨gs
[1].
u
.
°rög
;

180 i‡(
¨gs
[2].
ty≥
 !
T_STRING
) {

181 
îr‹
;

183 
∑ssw‹d
 = 
¨gs
[2].
u
.
°rög
;

185 i‡(
¨gs
[3].
ty≥
 !
T_STRING
) {

186 
îr‹
;

188 
db«me
 = 
¨gs
[3].
u
.
°rög
;

190 i‡(
¨gs
[4].
ty≥
 !
T_NUMBER
) {

191 
îr‹
;

193 
p‹t
 = 
¨gs
[4].
u
.
numbî
;

195 
MYSQL
 *
my_c⁄n
 = 
	`mysql_öô
(
NULL
);

196 i‡(!
	`mysql_ªÆ_c⁄√˘
(
my_c⁄n
, 
ho°
, 
u£∫ame
, 
∑ssw‹d
,

197 
db«me
, 
p‹t
, 
NULL
, 0))

199 
	`Ârötf
(
°dîr
, "error connectingÅo database.host:%s,db:%s,user:%s,port:%d,errstr:%s\n",

200 
ho°
, 
db«me
, 
u£∫ame
, 
p‹t
, 
	`mysql_îr‹
(
my_c⁄n
));

201 
	`mysql_˛o£
 (
my_c⁄n
);

202 
îr‹
;

205 
POP_ALL_ARGS
;

207 
fs_mysql_c⁄n_t
 *
c⁄n
 = 
	`¸óã_c⁄n
(
my_c⁄n
);

208 
	`add_m≠pög_°rög
(
m≠c⁄n
, "ho°", 
ho°
);

209 
	`add_m≠pög_°rög
(
m≠c⁄n
, "u£∫ame", 
u£∫ame
);

210 
	`add_m≠pög_°rög
(
m≠c⁄n
, "∑ssw‹d", 
∑ssw‹d
);

211 
	`add_m≠pög_°rög
(
m≠c⁄n
, "d©aba£", 
db«me
);

212 
	`add_m≠pög_∑ú
(
m≠c⁄n
, "p‹t", 
p‹t
);

213 
	`add_m≠pög_∑ú
(
m≠c⁄n
, "id", 
c⁄n
->
id
);

214 
	`push_ª„d_m≠pög
(
m≠c⁄n
);

217 
îr‹
:

218 
POP_ALL_ARGS
;

219 
	`‰ì_m≠pög
(
m≠c⁄n
);

220 
	`push_numbî
(0);

222 
	}
}

224 
	$f_mysql_˛o£
()

226 
SET_ALL_ARGS
;

227 
cid
 = 
	`ARGS
(0)->
u
.
numbî
;

228 
fs_mysql_c⁄n_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
c⁄n_ba£
.
hash
, &
cid
, (cid));

229 i‡(
c⁄n
 =
NULL
) {

230 
	`put_numbî
(-1);

234 
	`‰ì_c⁄n
(
c⁄n
);

235 
	`put_numbî
(0);

236 
	}
}

243 
	$f_mysql_execuã
()

245 
SET_ALL_ARGS
;

246 
cid
 = 
	`ARGS
(0)->
u
.
numbî
;

247 *
°©emít
 = 
	`ARGS
(1)->
u
.
°rög
;

248 
°_Àn
 = 
	`SVALUE_STRLEN
(
	`ARGS
(1));

250 
fs_mysql_c⁄n_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
c⁄n_ba£
.
hash
, &
cid
, (cid));

251 i‡(
c⁄n
 =
NULL
) {

252 
	`Ârötf
(
°dîr
, "îr‹Çÿsuch c⁄√˘i⁄:%d.°©emít:%s\n", 
cid
, 
°©emít
);

253 
îr‹
;

256 i‡(
	`mysql_ªÆ_quîy
(
c⁄n
->
my_c⁄n
, 
°©emít
, 
°_Àn
)) {

257 
	`Ârötf
(
°dîr
, "îr‹Éxecutög quîy.°©emít:%s,îr°r:%s\n", 
°©emít
, 
	`mysql_îr‹
(
c⁄n
->
my_c⁄n
));

258 
îr‹
;

260 
MYSQL_RES
 *
ªs
 = 
	`mysql_°‹e_ªsu…
(
c⁄n
->
my_c⁄n
);

261 
num_cﬁs
 = 
	`mysql_fõld_cou¡
(
c⁄n
->
my_c⁄n
);

263 i‡(
ªs
) {

264 
fs_mysql_curs‹_t
 *
cur
 = 
	`¸óã_curs‹
(
c⁄n
, 
ªs
, 
num_cﬁs
);

265 
POP_ALL_ARGS
;

267 
m≠pög_t
 *
curs‹
 = 
	`Æloˇã_m≠pög
(0);

268 
	`add_m≠pög_∑ú
(
curs‹
, "id", 
cur
->
id
);

269 
	`add_m≠pög_∑ú
(
curs‹
, "numcﬁs", 
num_cﬁs
);

270 
	`add_m≠pög_∑ú
(
curs‹
, "numrows", 
	`mysql_num_rows
(
cur
->
my_ªs
));

271 
¨øy_t
 *
cﬁty≥s
 = 
	`Æloˇã_¨øy
(
num_cﬁs
);

272 
¨øy_t
 *
cﬁ«mes
 = 
	`Æloˇã_¨øy
(
num_cﬁs
);

273 
MYSQL_FIELD
 *
fõlds
 = 
	`mysql_„tch_fõlds
(
cur
->
my_ªs
);

274 
i
;

275 
i
 = 0; i < 
cur
->
numcﬁs
; ++i) {

276 
	`£t_svÆue_sh¨ed_°rög
(&
cﬁ«mes
->
ôem
[
i
], 
fõlds
[i].
«me
);

277 
	`£t_svÆue_sh¨ed_°rög
(&
cﬁty≥s
->
ôem
[
i
], 
	`gëcﬁum¡y≥
(
fõlds
[i].
ty≥
));

279 
svÆue_t
 *
v
 = 
	`m≠_ö£π_°r_key
(
curs‹
, "coltypes");

280 
	`£t_svÆue_¨øy
(
v
, 
cﬁty≥s
);

281 
v
 = 
	`m≠_ö£π_°r_key
(
curs‹
, "colnames");

282 
	`£t_svÆue_¨øy
(
v
, 
cﬁ«mes
);

283 
	`push_ª„d_m≠pög
(
curs‹
);

286 if(
num_cﬁs
 == 0) {

289 
POP_ALL_ARGS
;

290 
	`push_numbî
(
	`mysql_af„˘ed_rows
(
c⁄n
->
my_c⁄n
));

293 
	`Ârötf
(
°dîr
, "errorÑetrievingÑesult.statement:%s,errstr:%s\n",

294 
°©emít
, 
	`mysql_îr‹
(
c⁄n
->
my_c⁄n
));

295 
îr‹
;

300 
îr‹
:

301 
POP_ALL_ARGS
;

302 
	`push_numbî
(-1);

303 
	}
}

305 
	$f_curs‹_˛o£
()

307 
SET_ALL_ARGS
;

308 
cur_id
 = 
	`ARGS
(0)->
u
.
numbî
;

309 
fs_mysql_curs‹_t
 *
cur
 = 
	`≠r_hash_gë
(
curs‹_ba£
.
hash
, &
cur_id
, (cur_id));

310 i‡(
cur
 =
NULL
) {

311 
îr‹
;

314 
	`‰ì_curs‹
(
cur
);

315 
	`put_numbî
(0);

317 
îr‹
:

318 
	`put_numbî
(-1);

319 
	}
}

325 
	$f_curs‹_„tch
()

327 
SET_ALL_ARGS
;

328 
cur_id
 = 
	`ARGS
(0)->
u
.
numbî
;

329 
POP_ALL_ARGS
;

331 
fs_mysql_curs‹_t
 *
cur
 = 
	`≠r_hash_gë
(
curs‹_ba£
.
hash
, &
cur_id
, (cur_id));

332 i‡(
cur
 =
NULL
) {

333 
	`push_numbî
(-1);

337 
MYSQL_RES
 *
ªs
 = 
cur
->
my_ªs
;

339 
MYSQL_ROW
 
row
 = 
	`mysql_„tch_row
(
ªs
);

340 i‡(
row
 =
NULL
) {

342 
	`push_numbî
(0);

346 
i
;

347 *
Àngths
 = 
	`mysql_„tch_Àngths
(
ªs
);

348 
¨øy_t
 *
¨r
 = 
cur
->
„tch_tmp
;

349 i‡(
¨r
 =
NULL
) {

350 
¨r
 = 
	`Æloˇã_¨øy
(
cur
->
numcﬁs
);

351 
cur
->
„tch_tmp
 = 
¨r
;

353 
i
 = 0; i < 
cur
->
numcﬁs
; ++i) {

354 
buf„r_t
 *
buf
 = 
	`Æloˇã_buf„r
(
Àngths
[
i
]);

355 
	`wrôe_buf„r
(
buf
, 0, 
row
[
i
], 
Àngths
[i]);

356 
	`£t_svÆue_buf„r
(&
¨r
->
ôem
[
i
], 
buf
);

359 
i
 = 0; i < 
cur
->
numcﬁs
; ++i) {

360 
buf„r_t
 *
buf
 = 
¨r
->
ôem
[
i
].
u
.buf;

361 i‡(
buf
->
size
 =
Àngths
[
i
]) {

362 
	`wrôe_buf„r
(
buf
, 0, 
row
[
i
], 
Àngths
[i]);

364 
	`‰ì_buf„r
(
buf
);

365 
buf„r_t
 *
√wbuf
 = 
	`Æloˇã_buf„r
(
Àngths
[
i
]);

366 
	`wrôe_buf„r
(
√wbuf
, 0, 
row
[
i
], 
Àngths
[i]);

367 
	`£t_svÆue_buf„r
(&
¨r
->
ôem
[
i
], 
√wbuf
);

372 
	`push_¨øy
(
¨r
);

373 
	}
}

	@packages/fs_mysql.h

2 #i‚de‡
_FS_MYSQL_


3 
	#_FS_MYSQL_


	)

5 
fs_mysql_moduÀ_öô
();

	@packages/fs_mysql_spec.h

1 
	~"../gømm¨/•ec.h
"

3 
mysql_c⁄√˘
(
mixed
 *);

4 
mysql_˛o£
();

6 
mixed
 
mysql_execuã
(, 
°rög
);

7 
curs‹_˛o£
();

8 
buf„r
 *
curs‹_„tch
();

	@packages/fs_netd_spec.h

2 
	~"../gømm¨/•ec.h
"

4 
fs_√w_u£r
(, );

5 
fs_is_uid_c⁄√˘ed
();

6 
fs_˛o£_uid_c⁄√˘i⁄
();

7 
fs_˛o£_vfd_c⁄√˘i⁄
();

8 
fs_gë_vfd_by_uid
();

9 
fs_gë_uid_by_vfd
();

10 
°rög
 
fs_gë_ù_by_vfd
();

	@packages/fs_rpc.h

2 #i‚de‡
_FS_RPC_H_


3 
	#_FS_RPC_H_


	)

5 
	~"fs_mbuf.h
"

7 
	~<°dlib.h
>

8 
	~<°döt.h
>

9 
	~<°rög.h
>

11 #ifde‡
__FªeBSD__


12 
	~<sys/°ddef.h
>

13 
uöt32_t
 
	tfs_¥Ÿocﬁ_id_t
;

14 
öt32_t
 
	tfs_Ωc_öt_t
;

15 
uöt32_t
 
	tfs_Ωc_size_t
;

16 #ñi‡
MS_WINDOWS


22 
	#FS_RPC_INT
 0

	)

23 
	#FS_RPC_STRING
 1

	)

24 
	#FS_RPC_CLASS
 2

	)

25 
	#FS_RPC_OBJECT
 3

26 
	#FS_RPC_MIXED
 4

27 
	#FS_RPC_BUFFER
 5

28 

	)

29 
	#FS_RPC_ARRAY_VAR
 -1

	)

30 
	#FS_RPC_ARRAY_NOT
 -2

	)

31 
	#FS_RPC_CLASS_INDEX_NOT
 -1

	)

34 
	#FS_RPC_LPC_PID_START
 256

	)

46 
	#FS_RPC_SERVER_PREFIX
 "Ωc_£rvî_"

	)

47 
	#FS_RPC_CLIENT_PREFIX
 "Ωc_˛õ¡_"

	)

49 
	#FS_RPC_CHECK_C_DECL
(
¨g_˛s
Ë(◊rg_˛s)->
fõld_cou¡
 =2 && (¨g_˛s)->
fõld
[1].
ty≥
 =
FS_RPC_CLASS
)

	)

50 
	#FS_RPC_STRUCT_ARG
(
¨g_˛s
Ë(◊rg_˛s)->
fõld
[1].
˛ass_±r
)

	)

58 
	sfs_Ωc_°rög_s
 {

59 
fs_Ωc_size_t
 
	mn
;

60 *
	m°r
;

61 } 
	tfs_Ωc_°rög_t
;

64 (* 
	tfs_Ωc_c_fun˘i⁄_t
)(
	tvfd
, *
	t¨g
);

66 
fs_Ωc_fõld_s
 
	tfs_Ωc_fõld_t
;

68 
	sfs_Ωc_˛ass_s
 {

69 *
«me
;

70 
c_size
;

71 
c_imp
;

72 
fõld_cou¡
;

73 
fs_Ωc_fõld_t
 *
fõld
;

74 } 
	tfs_Ωc_˛ass_t
;

76 
	sfs_Ωc_fõld_s
 {

77 
ty≥
;

78 
¨øy
;

79 
˛ass_ödex
;

80 
fs_Ωc_˛ass_t
 *
˛ass_±r
;

81 *
«me
;

82 
c_off£t
;

83 
fs_Ωc_˛ass_t
 *
∑ª¡
;

86 
ölöe
 
	$fs_Ωc_fõld_ßme
(
fs_Ωc_fõld_t
 *
lf
, fs_Ωc_fõld_à*
rf
)

88  
lf
->
ty≥
 =
rf
->ty≥ &&Üf->
¨øy
 =rf->¨øy &&Üf->
˛ass_ödex
 ==Ñf->class_index &&

89 
	`°rcmp
(
lf
->
«me
, 
rf
->«meË=0 &&Üf->
c_off£t
 ==Ñf->c_offset;

90 
	}
}

92 
ölöe
 
	$fs_Ωc_˛ass_ßme
(
fs_Ωc_˛ass_t
 *
l˛s
, fs_Ωc_˛ass_à*
r˛s
)

94 i‡(
l˛s
 =
r˛s
) {

97 i‡(
l˛s
 =
NULL
 || 
r˛s
 == NULL) {

101 i‡–
	`°rcmp
(
l˛s
->
«me
, 
r˛s
->name) == 0 &&

102 
l˛s
->
c_size
 =
r˛s
->c_size &&

103 
l˛s
->
c_imp
 =
r˛s
->c_imp &&

104 
l˛s
->
fõld_cou¡
 =
r˛s
->field_count) {

105 
i
;

106 
i
 = 0; i < 
l˛s
->
fõld_cou¡
; ++i) {

107 
fs_Ωc_fõld_t
 *
lf
 = &
l˛s
->
fõld
[
i
];

108 
fs_Ωc_fõld_t
 *
rf
 = &
r˛s
->
fõld
[
i
];

109 i‡(!
	`fs_Ωc_fõld_ßme
(
lf
, 
rf
)) {

118 
	}
}

122 
	#RPC_FLAG_EXCLUDED_PTO
 (0x00000001)

	)

124 
	#TEST_RPC_EXCLUDED_PTO
(
Êag
Ë((ÊagË& 
RPC_FLAG_EXCLUDED_PTO
)

	)

125 
	#SET_RPC_EXCLUDED_PTO
(
Êag
Ë((ÊagË|
RPC_FLAG_EXCLUDED_PTO
)

	)

126 
	#CLEAR_RPC_EXCLUDED_PTO
(
Êag
Ë((ÊagË&~
RPC_FLAG_EXCLUDED_PTO
)

	)

128 
	sfs_Ωc_fun˘i⁄_s
 {

129 
	mfun˘i⁄_id
;

130 *
	mmoduÀ
;

131 
fs_Ωc_˛ass_t
 
	m¨g_˛ass
;

132 
fs_Ωc_c_fun˘i⁄_t
 
	mc_fun˘i⁄
;

133 *
	mud©a
;

134 
	mÊag
;

135 } 
	tfs_Ωc_fun˘i⁄_t
;

137 
	sfs_Ωc_fõld_mëa_s
 {

138 c⁄° *
	m«me
;

139 
	mc_off£t
;

140 } 
	tfs_Ωc_fõld_mëa_t
;

142 
	sfs_Ωc_˛ass_mëa_s
 {

143 c⁄° *
	m«me
;

144 
	mc_size
;

145 
	mfõld_cou¡
;

146 
fs_Ωc_fõld_mëa_t
 *
	mfõld_mëa
;

147 } 
	tfs_Ωc_˛ass_mëa_t
;

149 
	sfs_Ωc_fun˘i⁄_mëa_s
 {

150 c⁄° *
	m«me
;

151 
fs_Ωc_c_fun˘i⁄_t
 
	mc_fun˘i⁄
;

152 } 
	tfs_Ωc_fun˘i⁄_mëa_t
;

154 
	sfs_Ωc_˛ass_èbÀ_s
 {

155 
	mñts
;

156 
fs_Ωc_˛ass_t
 *
	mΩc_˛ass
;

157 } 
	tfs_Ωc_˛ass_èbÀ_t
;

159 
	sfs_Ωc_fun˘i⁄_èbÀ_s
 {

160 
	mñts
;

161 
fs_Ωc_fun˘i⁄_t
 *
	mΩc_fun˘i⁄
;

163 
	m•¨£_ñts
;

164 
fs_Ωc_fun˘i⁄_t
 **
	m•¨£_Ωc_fun˘i⁄
;

165 } 
	tfs_Ωc_fun˘i⁄_èbÀ_t
;

167 
	sfs_Ωc_èbÀ_s
 {

168 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
	mfun˘i⁄_èbÀ
;

169 
fs_Ωc_˛ass_èbÀ_t
 *
	m˛ass_èbÀ
;

170 } 
	tfs_Ωc_èbÀ_t
;

172 #i‡
deföed
(
__˝lu•lus
)

176 
fs_Ωc_èbÀ_¸óã
(
fs_Ωc_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
);

177 
fs_Ωc_èbÀ_de°roy
(
fs_Ωc_èbÀ_t
 *
èbÀ
);

178 
fs_Ωc_dump_cfg
(
fs_Ωc_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
);

179 
fs_Ωc_dump_c
(
fs_Ωc_èbÀ_t
 *
èbÀ
, c⁄° *
hfûe
, c⁄° *
cfûe
);

180 
fs_Ωc_dump_fun˘i⁄_id
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
);

181 
fs_Ωc_dump_fun˘i⁄_c_id
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
);

183 
˛ass_‰ì
(
fs_Ωc_˛ass_t
 *
˛s
);

184 
fs_Ωc_˛ass_t
 *
fs_Ωc_˛ass
(
fs_Ωc_˛ass_èbÀ_t
 *
èbÀ
, 
ödex
);

185 
fs_Ωc_fun˘i⁄_t
 *
fs_Ωc_fun˘i⁄
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, 
ödex
);

186 
fs_Ωc_˛ass_ödex
(
fs_Ωc_˛ass_èbÀ_t
 *
èbÀ
, c⁄° *
«me
);

187 
fs_Ωc_fun˘i⁄_t
 *
fs_Ωc_fun˘i⁄_föd
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, c⁄° *
«me
);

189 
fs_Ωc_fun˘i⁄_£t_id
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
, c⁄° **
«mes
, c⁄° *
ids
, 
size_t
 
Àn
);

190 
fs_Ωc_fun˘i⁄_qs‹t
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
);

191 
fs_Ωc_fun˘i⁄_t
 *
fs_Ωc_fun˘i⁄_b£¨ch
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, 
fs_¥Ÿocﬁ_id_t
 
fun˘i⁄_id
);

193 
fs_Ωc_fun˘i⁄_s‹t
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
);

194 
fs_Ωc_fun˘i⁄_t
 *
fs_Ωc_fun˘i⁄_©
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, 
fs_¥Ÿocﬁ_id_t
 
fun˘i⁄_id
);

196 
fs_Ωc_c_∑ck
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, *
°ru˘_vÆue
, 
fs_mbuf_t
 *
mbuf
);

197 * 
fs_Ωc_c_u≈ack
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
fs_mbuf_t
 *
mbuf
, 
fs_öbuf_t
 *
öbuf
);

199 
fs_Ωc_f‹óch_fun˘i⁄
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, (*
a˘i⁄
)(
fs_Ωc_fun˘i⁄_t
 *
fun
, *
ud©a
), *udata);

200 *
fs_Ωc_fõld_ty≥_«me
(
fs_Ωc_fõld_t
 *
fõld
);

202 
g_log_±o_íabÀ
;

203 
íabÀ_log_±o
(
íabÀ
);

204 
log_∑ck
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
fs_mbuf_t
 *
mbuf
);

205 
log_u≈ack
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
fs_öbuf_t
 *
öbuf
);

207 #i‡
deföed
(
__˝lu•lus
)

	@packages/fs_rpc_c.h

2 #i‚de‡
_FS_RPC_C_H


3 
	#_FS_RPC_C_H


	)

5 
	~"fs_Ωc.h
"

6 
	~"fs_Ωc_id.h
"

8 
fs_Ωc_˛ass_mëa_t
 
fs_Ωc_˛ass_mëas
[];

9 
fs_Ωc_fun˘i⁄_mëa_t
 
fs_Ωc_fun˘i⁄_mëas
[];

12 
	#FS_RPC_C_TYPE
 \

13 *
d©a
; \

14 
fs_Ωc_öt_t
 *
öç
; \

15 
fs_Ωc_°rög_t
 *
°rögp
; \

16 

	)

17 
	sfs_Ωc_¨øy_s
 {;

18 
fs_Ωc_size_t
 
	mn
;

20 
	mFS_RPC_C_TYPE


21 }
	mu
;

22 } 
	tfs_Ωc_¨øy_t
;

24 #ifde‡
__FªeBSD__


25 #ñi‡
MS_WINDOWS


	@packages/fs_rpc_id.h

1 #i‚de‡
_FS_RPC_ID_


2 
	#_FS_RPC_ID_


	)

4 
	#RPC_CLIENT_UPDATE_PTO
 1

	)

5 
	#RPC_SERVER_VERSION
 2

	)

6 
	#RPC_CLIENT_VERSION_RETURN
 3

	)

7 
	#RPC_SERVER_LOGIN
 64

	)

8 
	#RPC_SERVER_NEW_UID
 66

	)

	@packages/fs_rpc_lpc.h

2 #i‚de‡
_FS_RPC_LPC_H_


3 
	#_FS_RPC_LPC_H_


	)

5 
	~"fs_Ωc.h
"

6 
	~"fs_ùc.h
"

7 
	~"Õc.h
"

8 
	~"Õc_ö˛.h
"

11 
	~"¥ogøm.h
"

12 
	~"compûî.h
"

13 
	~"ma¸os.h
"

15 (*
	tΩc_Õc_func_t
)(
	t¨gc
, 
	tsvÆue_t
 *
	t¨gv
);

18 
fs_Ωc_èbÀ_t
 
Ωc_èbÀ
;

19 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
;

20 
Ωc_Õc_func_t
 
Ωc_ˇŒ_imp
;

21 
fs_mbuf_t
 
c_u≈ack_mbuf
;

22 } 
	tfs_Ωc_Õc_t
;

24 
fs_Ωc_Õc_t
 * 
	`fs_Ωc_Õc_¸óã
(c⁄° *
cfg
, 
Ωc_Õc_func_t
 
imp
);

25 
	`fs_Ωc_Õc_ˇŒed
(
id
, 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
fs_öbuf_t
 *
öbuf
);

26 
	`fs_Ωc_Õc_u≈ack
(
fs_Ωc_fõld_t
 *
fõld
, 
svÆue_t
 *
vÆue
, 
fõld_cou¡
, 
fs_öbuf_t
* 
öbuf
);

27 
	`fs_Ωc_Õc_∑ck
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
svÆue_t
 *
vÆue
, 
vÆue_cou¡
, 
fs_mbuf_t
 *
mbuf
);

29 
	`fs_Ωc_Õc_moduÀ_upd©e
(
obje˘_t
 *
obj
);

30 
	`fs_Ωc_di•©ch
(
fs_Ωc_Õc_t
 *
Ωc_Õc
, 
id
, 
fs_öbuf_t
 *
öbuf
);

31 
	`fs_Ωc_u£r_di•©ch
(
fs_Ωc_Õc_t
 *
Ωc_Õc
, 
uid
, 
fs_öbuf_t
 *
öbuf
);

32 
	`fs_Ωc_Õc_∑ck_¨g
(
¨gc
, 
svÆue_t
 *
¨gv
, 
fs_Ωc_Õc_t
 *
Ωc_Õc
, 
fs_√t_mbuf_t
 *
√tbuf
, *
rid
);

	@packages/fs_rpc_lpc_spec.h

2 
	~"../gømm¨/•ec.h
"

5 
fs_Ωc_ˇŒ
(|*, , ...);

6 
fs_Ωc_ˇŒ_lo›
(, , ...);

7 
fs_Ωc_x_ˇŒ
(, , , ...);

8 
fs_œ°_±o_time°amp
();

9 
fs_Ωc_make_cfg
(
m≠pög
 *, 
°rög
, string);

10 
fs_ex˛ude_°©s_±o
(*);

12 
fs_£t_vÆid©i⁄
(, , , );

13 
fs_vÆid©i⁄_°¨t
();

	@packages/game/fs_atom.c

13 
	~<°dlib.h
>

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 
	~"hash.h
"

17 
	~"fs_©om.h
"

20 
	#STR_SIZE
 16

	)

21 
	#ATOM_MAX_NUM
 4800

	)

22 
	#ATOM_REALLOC_NUM
 1024

	)

23 
	#ATOM_BUF_REALLOC_SIZE
 (
STR_SIZE
 * 1024)

	)

26 
fs_©om_èbÀ_t
 
	ggSysAtomTabÀ
;

29 
	#SåHash
(
s
Ë(
	`whash°r
((s), 20))

	)

32 
	#STR_ATOM
(
x
Ë(x->
©om
)

	)

33 
	#STR_POS
(
x
Ë(x->
°Ωos
)

	)

34 
	#STRING_LEN
(
x
Ë(x->
°æí
)

	)

35 
	#NEXT_NODE
(
x
Ë(x->
√xt
)

	)

37 
debug_mesßge
 (* 
fmt
, ...);

39 
ölöe
 
fs_©om_node_t
 *
	$fs_√w_©om_node
()

41  (
fs_©om_node_t
 *Ë
	`mÆloc
((fs_atom_node_t));

42 
	}
}

44 
ölöe
 
	$fs_‰ì_©om_node
(
fs_©om_node_t
 *
node
)

46 
	`‰ì
(
node
);

47 
	}
}

49 
ölöe
 
	$fs_öô_©om_èbÀ
(
fs_©om_èbÀ_t
 *
©
, 
©om_num
, 
°rsize
)

51 
bufsize
 = 
©om_num
 * 
°rsize
;

52 
hashsize
, 
i
;

54 
hashsize
 = 1;

55 ; 
hashsize
 < 
©om_num
; hashsize *= 2) ;

57 
©
->
©ombuf
 = (*Ë
	`mÆloc
(
bufsize
);

58 
©
->
bufsize
 = bufsize;

59 
©
->
buÂos
 = 0;

60 
©
->
©omid
 = 0;

62 
	`mem£t
(
©
->
©ombuf
, 0, 
bufsize
);

65 
©
->
hashtbl
 = (
fs_©om_node_t
 **)
	`mÆloc
(
hashsize
 * (fs_atom_node_t *));

66 i‡(!
©
->
hashtbl
) {

67 
	`debug_mesßge
("\natomÅable can't malloc, Check it!!!");

68 
	`‰ì
(
©
->
©ombuf
);

71 
©
->
hashsize
 = hashsize;

72 
i
 = 0; i < 
hashsize
; i++) {

73 
©
->
hashtbl
[
i
] = 
NULL
;

77 
©
->
nodes
 = (
fs_©om_node_t
 **)
	`mÆloc
(
©om_num
 * (fs_atom_node_t *));

79 
©
->
©omnum
 = 
©om_num
;

80 
i
 = 0; i < 
©om_num
; i++) {

81 
©
->
nodes
[
i
] = 
NULL
;

84 
©
->
öôed
 = 1;

86 
	}
}

88 
	$fs_deÁu…_öô_©om_èbÀ
()

90  
	`fs_öô_©om_èbÀ
(&
gSysAtomTabÀ
, 
ATOM_MAX_NUM
, 
STR_SIZE
);

91 
	}
}

93 
fs_©om_node_t
 *
	$_föd_©om_node
(
fs_©om_èbÀ_t
 *
©
, *
s
, 
h
, 
badd
)

95 
fs_©om_node_t
 *
cur
, *
¬
;

97 i‡(!
s
Ë 
NULL
;

99 
h
 = h & (
©
->
hashsize
 - 1);

101 
cur
 = 
©
->
hashtbl
[
h
];

103 
cur
) {

104 i‡(
	`°æí
(
s
Ë=
	`STRING_LEN
(
cur
) \

105 && !
	`°∫cmp
(
©
->
©ombuf
 + 
	`STR_POS
(
cur
), 
s
, 
	`STRING_LEN
(cur))) {

106  
cur
;

108 
cur
 = 
	`NEXT_NODE
(cur);

113 i‡(
badd
) {

114 i‡(
	`°æí
(
s
Ë>(
©
->
bufsize
 -át->
buÂos
) ) {

118 
©
->
bufsize
 +
ATOM_BUF_REALLOC_SIZE
;

119 
©
->
©ombuf
 = (*)
	`ªÆloc
◊t->©ombuf,át->
bufsize
);

122 
¬
 = 
	`fs_√w_©om_node
();

123 
¬
->
°æí
 = 
	`°æí
(
s
);

124 
¬
->
©om
 = ++(
©
->
©omid
);

125 
¬
->
°Ωos
 = 
©
->
buÂos
;

126 
¬
->
√xt
 = 
NULL
;

127 
	`°∫˝y
(
©
->
©ombuf
 +át->
buÂos
, 
s
, 
	`°æí
(s));

128 
©
->
©ombuf
[©->
buÂos
 + 
	`°æí
(
s
)] = '\0';

129 
©
->
buÂos
 +
	`°æí
(
s
) + 1;

131 i‡(!
©
->
hashtbl
[
h
]) {

132 
©
->
hashtbl
[
h
] = 
¬
;

134 
¬
->
√xt
 = 
©
->
hashtbl
[
h
];

135 
©
->
hashtbl
[
h
] = 
¬
;

138 i‡(
©
->
©omid
 >©->
©omnum
) {

140 
©
->
©omnum
 +
ATOM_REALLOC_NUM
;

141 
©
->
nodes
 = (
fs_©om_node_t
 **)
	`ªÆloc
◊t->nodes, (fs_©om_node_à*Ë*át->
©omnum
);

144 
©
->
nodes
[©->
©omid
-1] = 
¬
;

146  
¬
;

148  
NULL
;

149 
	}
}

151 
	$fs_©om_gë_°rög_©om
(*
°r
)

153 
fs_©om_node_t
 *
¬
 = 
	`_föd_©om_node
(&
gSysAtomTabÀ
, 
°r
, 
	`SåHash
(str), 1);

154 i‡(
¬
) {

155  
	`STR_ATOM
(
¬
);

158 
	}
}

160 
	$fs_©om_föd_°rög_©om
(*
°r
)

162 
fs_©om_node_t
 *
¬
 = 
	`_föd_©om_node
(&
gSysAtomTabÀ
, 
°r
, 
	`SåHash
(str), 0);

163 i‡(
¬
) {

164  
	`STR_ATOM
(
¬
);

167 
	}
}

169 *
	$fs_©om_gë_°rög_by_©om
(
©om
)

171 
fs_©om_èbÀ_t
 *
©
 = &
gSysAtomTabÀ
;

172 
pos
;

174 i‡(
©om
 <0 ||átom > 
©
->
©omnum
) {

178 i‡(!
©
->
nodes
[
©om
-1]) {

182 
pos
 = 
©
->
nodes
[
©om
-1]->
°Ωos
;

184  
©
->
©ombuf
 + 
pos
;

185 
	}
}

192 *
	$gí_°r
(
i
)

194 
	#BUF_LEN
 32

	)

195 *
buf
;

196 
buf
 = (*Ë
	`mÆloc
(
BUF_LEN
);

197 
	`¢¥ötf
(
buf
, 
BUF_LEN
, "ã°%d", 
i
);

198  
buf
;

199 
	}
}

201 
	#STR_REAL_NUM
 15600

	)

202 
	#STR_INIT_NUM
 128

	)

205 
	$maö
()

207 *
°r
;

208 
i
, 
©om
;

212 
	`fs_öô_©om_èbÀ
(&
gSysAtomTabÀ
, 
STR_INIT_NUM
, 
STR_SIZE
);

214 
i
 = 1;

216 
	`¥ötf
( "insertátom:\n" );

217  
i
 <
STR_REAL_NUM
 ) {

218 
°r
 = 
	`gí_°r
(
i
);

219 
©om
 = 
	`fs_©om_gë_°rög_©om
(
°r
);

220 
	`¥ötf
–"%s:%d,", 
°r
, 
©om
 );

221 
i
++;

224 
	`¥ötf
( "findátom:\n" );

226 
i
 = 0;

227  
i
 <
STR_REAL_NUM
 ) {

228 
°r
 = 
	`fs_©om_gë_°rög_by_©om
(
i
);

229 
	`¥ötf
–"%s:%d,", 
°r
, 
i
);

230 
i
++;

233 
	}
}

	@packages/game/fs_atom.h

1 #i‚de‡
_FS_ATOM_H_


2 
	#_FS_ATOM_H_


	)

5 
	~"hash.h
"

6 
	~<as£π.h
>

9 
	sfs_©om_node_s
 {

10 
	m©om
;

11 
	m°Ωos
;

12 
	m°æí
;

13 
fs_©om_node_s
 *
	m√xt
;

14 } 
	tfs_©om_node_t
;

16 
	sfs_©om_èbÀ_s
 {

18 *
	m©ombuf
;

19 
	mbufsize
;

20 
	mbuÂos
;

21 
	m©omid
;

23 
fs_©om_node_t
 **
	mhashtbl
;

24 
fs_©om_node_t
 **
	mnodes
;

25 
	mhashsize
;

26 
	m©omnum
;

27 
	möôed
;

29 } 
	tfs_©om_èbÀ_t
;

31 
fs_deÁu…_öô_©om_èbÀ
();

32 
fs_©om_gë_°rög_©om
(*
°r
);

33 
fs_©om_föd_°rög_©om
(*
°r
);

34 *
fs_©om_gë_°rög_by_©om
(
©om
);

	@packages/game/fs_callout.c

6 
	~"Õc_ö˛.h
"

7 
	~"e›î©‹s.h
"

9 
	~"Õc_¨gs_›.h
"

11 
	~"timeout.h
"

12 
	~"fs_ˇŒout.h
"

13 
	~"fs_maö.h
"

17 
	göãrvÆ
 = 0;

18 
	göôed
 = 0;

21 
cuºít_time
;

22 
gë_cuºít_time
();

24 
fs_≥ndög_ˇŒout_t
* 
	gÆl_ˇŒout
 = 
NULL
;

27 
timevÆ
 
	gœ°_upd©e_time
;

30 
	#MAX_ADD_TICK
 (1)

	)

32 
	$upd©e_˛ock
(* 
¨g
)

35 
timevÆ
 
now
;

36 
dñè
;

37 
addTick
;

40 
cuºít_time
 = 
	`gë_cuºít_time
();

42 
	`gëtimeofday
(&
now
, 
NULL
 );

44 
dñè
 = 1000000*(
now
.
tv_£c
 - 
œ°_upd©e_time
.tv_£cË+ (now.
tv_u£c
 -Üast_update_time.tv_usec);

45 
addTick
 = 0;

48  
dñè
 > 
öãrvÆ
 && 
addTick
 <
MAX_ADD_TICK
)

51 i‡–
	`timeout_h¨d˛ock_upd©e
() )

53 
	`so·˛ock
();

56 
œ°_upd©e_time
.
tv_£c
 +(
öãrvÆ
/1000000);

57 
œ°_upd©e_time
.
tv_u£c
 +(
öãrvÆ
%1000000);

59 
dñè
 -
öãrvÆ
;

61 
addTick
 ++;

65 if(
dñè
 > 
öãrvÆ
)

67 
œ°_upd©e_time
.
tv_£c
 = 
now
.tv_sec;

68 
œ°_upd©e_time
.
tv_u£c
 = 
now
.tv_usec;

70 
	`debug_mesßge
("WARNING:‰amêöãrvÆ is[%ld]us, bigÅh™áÅick.\n", 
dñè
);

72 
	}
}

74 
	$ˇŒout_öô
–
£c
, 
u£c
)

76 
timevÆ
 
≥riod
;

78 i‡(
öôed
)

80 
	`debug_mesßge
( "WARING:callout system is be initialized.\n" );

81 
	`put_numbî
(0);

85 
	`timeout_°¨tup
();

87 
≥riod
.
tv_£c
 = 
£c
;

88 
≥riod
.
tv_u£c
 = 
u£c
;

91 
öãrvÆ
 = (()
£c
Ë* 1000000 + (()
u£c
);

93 
	`gëtimeofday
(&
œ°_upd©e_time
, 
NULL
 );

96 
	`add_timî
(
≥riod
, 
upd©e_˛ock
, (*)
NULL
);

98 
	`debug_mesßge
("sy°em i†bêöôülized: i¡îvÆ=[%ld]us\n", 
öãrvÆ
);

100 
	}
}

103 
fs_≥ndög_ˇŒout_t
 * 
	$√w_ˇŒ
()

105 
fs_≥ndög_ˇŒout_t
 * 
ªt
;

107 
ªt
 = 
	`MALLOC
––
fs_≥ndög_ˇŒout_t
 ));

109 
ªt
->
dñ_Êg
 = 0;

111  
ªt
;

112 
	}
}

117 
	$‰ì_ˇŒed_ˇŒ
 (
fs_≥ndög_ˇŒout_t
* 
ˇŒ_out
)

120 i‡(
ˇŒ_out
->
ob
)

122 
	`‰ì_°rög
(
ˇŒ_out
->
fun˘i⁄
.
s
);

123 
	`‰ì_obje˘
(
ˇŒ_out
->
ob
, "free_call");

127 
	`‰ì_fu≈
(
ˇŒ_out
->
fun˘i⁄
.
f
);

130 
ˇŒ_out
->
fun˘i⁄
.
s
 = 0;

131 
ˇŒ_out
->
ob
 = 0;

133 
	`FREE
–
ˇŒ_out
 );

134 
	}
}

136 
	$‰ì_ˇŒ
 (
fs_≥ndög_ˇŒout_t
* 
ˇŒ_out
)

138 i‡(
ˇŒ_out
->
vs
)

140 
	`‰ì_¨øy
(
ˇŒ_out
->
vs
);

141 
ˇŒ_out
->
vs
 = 
NULL
;

143 
	`‰ì_ˇŒed_ˇŒ
(
ˇŒ_out
);

144 
	}
}

147 
timeout
 * 
	$√w_timeout
()

149 
timeout
 * 
d©a
;

150 
d©a
 = (
timeout
 *)
	`MALLOC
((timeout));

152 
	`bzîo
–
d©a
, (
timeout
) );

153  
d©a
;

154 
	}
}

157 
	$‰ì_timeout
(
timeout
 * 
d©a
)

159 
	`FREE
–
d©a
 );

160 
	}
}

162 
evÆ_co°
;

163 
max_co°
;

166 
	$run_Õc_func
–
timeout
 *Åimeout, * 
¨gs
 )

168 
fs_≥ndög_ˇŒout_t
 * 
ˇŒ_out
;

169 
îr‹_c⁄ãxt_t
 
ec⁄
;

171 
ˇŒ_out
 = (
fs_≥ndög_ˇŒout_t
 *)
¨gs
;

174 i‡–
ˇŒ_out
->
dñ_Êg
)

177 
	`HASH_DEL
(
Æl_ˇŒout
, 
ˇŒ_out
);

179 
	`‰ì_ˇŒ
–
ˇŒ_out
 );

180 
	`‰ì_timeout
(
timeout
);

185 i‡–
ˇŒ_out
->
ob
 && cÆl_out->ob->
Êags
 & 
O_DESTRUCTED
)

188 
	`HASH_DEL
(
Æl_ˇŒout
, 
ˇŒ_out
);

190 
	`‰ì_ˇŒ
–
ˇŒ_out
 );

191 
	`‰ì_timeout
(
timeout
);

196 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
))

198 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

202 
obje˘_t
 *
ob
;

203 
exåa
;

205 
ob
 = 
ˇŒ_out
->ob;

207 
comm™d_givî
 = 0;

210 i‡(
ˇŒ_out
->
vs
)

212 
¨øy_t
 *
vec
 = 
ˇŒ_out
->
vs
;

214 
svÆue_t
 *
svp
 = 
vec
->
ôem
 + vec->
size
;

217 
svp
-- > 
vec
->
ôem
)

219 i‡(
svp
->
ty≥
 =
T_OBJECT
 && (svp->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))

221 
	`‰ì_obje˘
(
svp
->
u
.
ob
, "call_out");

222 *
svp
 = 
c⁄°0
;

227 
exåa
 = 
ˇŒ_out
->
vs
->
size
;

228 
	`å™s„r_push_some_svÆues
(
ˇŒ_out
->
vs
->
ôem
, 
exåa
);

230 
	`‰ì_em±y_¨øy
(
ˇŒ_out
->
vs
);

231 
ˇŒ_out
->
vs
 = 
NULL
;

235 
exåa
 = 0;

239 
evÆ_co°
 = 
max_co°
;

241 i‡(
ˇŒ_out
->
ob
)

245 i‡(
ˇŒ_out
->
fun˘i⁄
.
s
[0] =
APPLY___INIT_SPECIAL_CHAR
)

247 
	`îr‹
("The functionÇame is illegal!\n");

250 
	`ß„_≠∂y
(
ˇŒ_out
->
fun˘i⁄
.
s
, cÆl_out->
ob
, 
exåa
, 
ORIGIN_CALL_OUT
);

254 
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
ˇŒ_out
->
fun˘i⁄
.
f
, 
exåa
);

259 
	`HASH_DEL
(
Æl_ˇŒout
, 
ˇŒ_out
);

262 
	`‰ì_ˇŒed_ˇŒ
(
ˇŒ_out
);

263 
timeout
->
to_¨g
 = 
NULL
;

264 
	`‰ì_timeout
(
timeout
);

265 
	}
}

268 
	gˇŒ_out_h™dÀr
 = 1;

271 
	$f_ˇŒ_out
()

274 
svÆue_t
 *
¨g
 = 
•
 - 
°_num_¨g
 + 1;

275 
num
 = 
°_num_¨g
 - 2;

276 
timeout
 * 
d©a
;

277 
ªt
, 
ticks
;

278 
fs_≥ndög_ˇŒout_t
 * 
ˇŒ_out
;

283 i‡(!(
cuºít_obje˘
->
Êags
 & 
O_DESTRUCTED
))

285 
svÆue_t
 * 
fun
;

286 
dñay
;

288 
ˇŒ_out
 = 
	`√w_ˇŒ
();

289 i‡–
ˇŒ_out
 =
NULL
)

292 
	`debug_mesßge
( "ERROR:callout memoryállocate failed\n" );

296 
•
 -
num
 + 1;

298 
	`‰ì_svÆue
(
•
, "call_out");

299 
	`put_numbî
(0);

303 
d©a
 = 
	`√w_timeout
();

304 i‡–
d©a
 =
NULL
)

307 
	`debug_mesßge
( "ERROR:timeout memoryállocate failed\n" );

311 
•
 -
num
 + 1;

313 
	`‰ì_svÆue
(
•
, "call_out");

314 
	`put_numbî
(0);

319 
fun
 = &
¨g
[0];

321 i‡(
fun
->
ty≥
 =
T_STRING
)

323 
ˇŒ_out
->
fun˘i⁄
.
s
 = 
	`make_sh¨ed_°rög
(
fun
->
u
.
°rög
);

324 
ˇŒ_out
->
ob
 = 
cuºít_obje˘
;

325 
	`add_ªf
(
cuºít_obje˘
, "call_out");

329 
ˇŒ_out
->
fun˘i⁄
.
f
 = 
fun
->
u
.
Â
;

330 
fun
->
u
.
Â
->
hdr
.
ªf
++;

331 
ˇŒ_out
->
ob
 = 
NULL
;

335 i‡(
num
 > 0)

337 
ˇŒ_out
->
vs
 = 
	`Æloˇã_em±y_¨øy
(
num
);

338 
	`mem˝y
(
ˇŒ_out
->
vs
->
ôem
, 
¨g
 + 2, (
svÆue_t
Ë* 
num
);

342 
ˇŒ_out
->
vs
 = 
NULL
;

345 
dñay
 = 
¨g
[1].
u
.
numbî
;

348 
ticks
 = ()(()
dñay
 * 1000000 / 
öãrvÆ
);

350 
d©a
->
to_¨g
 = 
ˇŒ_out
;

353 
ªt
 = 
ˇŒ_out_h™dÀr
 ++;

355 
ˇŒ_out
->
h™dÀr
 = 
ªt
;

358 
	`HASH_ADD_INT
(
Æl_ˇŒout
, 
h™dÀr
, 
ˇŒ_out
);

360 
	`_timeout_£t
(
d©a
, &
run_Õc_func
, 
ˇŒ_out
);

361 
	`_timeout_add
(
d©a
, 
ticks
);

363 
•
 -
num
 + 1;

368 
ªt
 = 0;

369 
	`p›_n_ñems
(
num
);

370 
•
--;

374 
	`‰ì_svÆue
(
•
, "call_out");

375 
	`put_numbî
(
ªt
);

377 
	}
}

379 
	$f_ªmove_ˇŒ_out
( )

381 
SET_ALL_ARGS


382 
h™dÀr
 = 
	`ARGS
(0)->
u
.
numbî
;

383 
fs_≥ndög_ˇŒout_t
* 
ˇŒout
;

384 
POP_ALL_ARGS


386 
	`HASH_FIND_INT
–
Æl_ˇŒout
, &
h™dÀr
, 
ˇŒout
 );

388 i‡–
ˇŒout
 =
NULL
 )

390 
	`push_numbî
(-1);

395 
ˇŒout
->
dñ_Êg
 = 1;

398 
	`push_numbî
(1);

399 
	}
}

	@packages/game/fs_callout.h

1 #i‚de‡
__FS_CALLOUT_H__


2 
	#__FS_CALLOUT_H__


	)

4 
	~"uthash.h
"

6 
	sfs_≥ndög_ˇŒout_s
 {

8 
	mh™dÀr
;

10 
	mdñ_Êg
;

12 
°rög_‹_func
 
	mfun˘i⁄
;

14 
obje˘_t
 *
	mob
;

16 
¨øy_t
 *
	mvs
;

18 
UT_hash_h™dÀ
 
	mhh
;

19 } 
	tfs_≥ndög_ˇŒout_t
;

23 
ˇŒout_öô
–
£c
, 
u£c
);

24 
upd©e_˛ock
(* 
¨g
);

	@packages/game/fs_char_ob.c

13 
	~"fs_ch¨_ob.h
"

14 
	~"fs_Õc_›.h
"

15 
	~"fs_log.h
"

16 
	~"fs_comm⁄.h
"

17 
	~"c⁄åib.h
"

19 
fs_ch¨_ob_m™agî_t
 
	ggpCh¨ObM™agî
[
T_CHAR_MAX
];

20 
	#IS_TYPE_VALID
(
t
Ë— < 
T_CHAR_MAX
 &&Å >0)

	)

22 
	$fs_öô_ch¨_ob
(
ty≥
, 
hsize
, 
ítsize
, 
°¨tid
, 
ídid
)

24 
fs_ch¨_ob_m™agî_t
 *
obm
;

26 i‡(!
	`IS_TYPE_VALID
(
ty≥
)) {

27 
	`log_îr‹
(
MOD_CHAR_OB
, "ch¨Åy≥[%d]ÇŸÉxi°!", 
ty≥
);

31 
obm
 = &
gpCh¨ObM™agî
[
ty≥
];

33 
obm
->
µoﬁ
 = 
	`fs_¸óã_mem‹y_poﬁ
(
ítsize
 + (
fs_ch¨_ob_t
), 
hsize
);

34 
obm
->
phtbl
 = 
	`fs_ht_¸óã_hash_èbÀ
(
hsize
);

35 
obm
->
°¨tid
 = startid;

36 
obm
->
ídid
 =Éndid;

37 
obm
->
curob
 = 
NULL
;

38 
obm
->
böô
 = 1;

39 
	}
}

41 
	$fs_dump_ch¨_ob
()

43 
fs_ch¨_ob_m™agî_t
 *
obm
;

45 
obm
 = &
gpCh¨ObM™agî
[
T_CHAR_ITEM
];

46 
	`fs_dump_mem_poﬁ_desc
(
obm
->
µoﬁ
, "item");

48 
obm
 = &
gpCh¨ObM™agî
[
T_CHAR_BEAST
];

49 
	`fs_dump_mem_poﬁ_desc
(
obm
->
µoﬁ
, "summon");

51 
obm
 = &
gpCh¨ObM™agî
[
T_CHAR_NPC
];

52 
	`fs_dump_mem_poﬁ_desc
(
obm
->
µoﬁ
, "npc");

53 
	}
}

55 
fs_ch¨_ob_t
 *
	$fs_√w_ch¨_ob
(
ty≥
, *
∑th
, 
m≠pög_t
 *
m
)

57 
fs_ch¨_ob_t
 * 
cob
;

58 
fs_Õc_obje˘_t
 *
oob
;

59 
fs_ch¨_ob_m™agî_t
 *
obm
;

61 
oob
 = 
	`fs_föd_Õc_obje˘
(
∑th
);

62 i‡(!
oob
) {

63 
	`log_îr‹
(
MOD_CHAR_OB
, "ch¨Ö©h[%d %s]ÇŸÉxi°!", 
ty≥
, 
∑th
);

64  
NULL
;

67 i‡(!
	`IS_TYPE_VALID
(
ty≥
)) {

68 
	`log_îr‹
(
MOD_CHAR_OB
, "ch¨Åy≥[%d]ÇŸÉxi°!", 
ty≥
);

69  
NULL
;

71 
obm
 = &
gpCh¨ObM™agî
[
ty≥
];

73 
cob
 = (
fs_ch¨_ob_t
 *Ë
	`fs_mÆloc_node
(
obm
->
µoﬁ
);

74 i‡(!
cob
) {

75  
NULL
;

77 
cob
->
id
 = ++
obm
->
°¨tid
;

78 
cob
->
oob
 = oob;

79 
cob
->
ßve_m≠
 = 
NULL
;

80 
cob
->
ãmp_m≠
 = 
NULL
;

82 
	`FS_HT_INSERT_INT
(
obm
->
phtbl
, 
cob
->
id
, cob);

84 i‡(
m
) {

85 
cob
->
ßve_m≠
 = 
m
;

86 
	`add_ªf
(
m
, "fs_new_char_ob");

89 
svÆue_t
 *
v
;

90 
v
 = 
	`ˇŒ_obje˘_func
(
oob
->
ob
, "SaveMap", "");

91 i‡–
v
 && 
	`IS_LPC_MAP
(v) ) {

92 
cob
->
ßve_m≠
 = 
	`dìp_c›y_m≠pög
(
	`LPC_MAP_VALUE
(
v
));

94 
cob
->
ßve_m≠
 = 
	`Æloˇã_m≠pög
(0);

97  
cob
;

98 
	}
}

100 
ölöe
 
fs_ch¨_ob_t
 *
	$fs_föd_ch¨_ob
(
ty≥
, 
id
)

102 
fs_ch¨_ob_m™agî_t
 *
obm
;

103 i‡(!
	`IS_TYPE_VALID
(
ty≥
)) {

104 
	`log_îr‹
(
MOD_CHAR_OB
, "ch¨Åy≥[%d,%d] c™'àföd!", 
ty≥
, 
id
);

105  
NULL
;

107 
obm
 = &
gpCh¨ObM™agî
[
ty≥
];

109 i‡(
obm
->
curob
 && (obm->curob->
id
 == id)) {

110  
obm
->
curob
;

112 
obm
->
curob
 = 
	`FS_HT_FIND_INT
(obm->
phtbl
, 
id
);

113  
obm
->
curob
;

114 
	}
}

116 
	$fs_‰ì_ch¨_ob
(
ty≥
, 
id
)

118 
fs_ch¨_ob_m™agî_t
 *
obm
;

119 
fs_ch¨_ob_t
 *
cob
;

120 i‡(!
	`IS_TYPE_VALID
(
ty≥
)) {

121 
	`log_îr‹
(
MOD_CHAR_OB
, "ch¨Åy≥[%d,%d] c™'à‰ì!", 
ty≥
, 
id
);

124 
obm
 = &
gpCh¨ObM™agî
[
ty≥
];

125 i‡((
cob
 = 
	`FS_HT_FIND_INT
(
obm
->
phtbl
, 
id
))) {

126 i‡(
cob
->
ßve_m≠
) {

127 
	`‰ì_m≠pög
(
cob
->
ßve_m≠
);

129 i‡(
cob
->
ãmp_m≠
) {

130 
	`‰ì_m≠pög
(
cob
->
ãmp_m≠
);

132 
	`FS_HT_REMOVE_INT
(
obm
->
phtbl
, 
id
);

133 
	`fs_‰ì_node
(
obm
->
µoﬁ
, 
cob
);

134 i‡(
obm
->
curob
 && (obm->curob->
id
 == id)) {

135 
obm
->
curob
 = 
NULL
;

138 
	}
}

140 
	#LPC_VAL_STR_LEN
 64

	)

141 
ölöe
 
	$_Õc_svÆue_2_°r
(
svÆue_t
 *
v
, *
buf
)

143 
	`mem£t
(
buf
, 0, (buf));

144 
v
->
ty≥
)

146 
T_NUMBER
:

147 
	`•rötf
(
buf
, "%d", 
v
->
u
.
numbî
);

149 
T_STRING
:

150 
	`•rötf
(
buf
, "%s", 
v
->
u
.
°rög
);

154 
	}
}

156 
svÆue_t
 * 
	$föd_ö_ßve_m≠_‰ì
(
fs_ch¨_ob_t
 *
cob
, 
svÆue_t
 *
key
)

158 
svÆue_t
 *
nvÆ
;

159 
fs_Õc_obje˘_t
 *
oob
;

161 i‡(!
cob
->
ßve_m≠
) {

162  
NULL
;

165 
oob
 = 
cob
->oob;

166 
nvÆ
 = 
	`föd_ö_m≠pög
(
cob
->
ßve_m≠
, 
key
);

168 i‡(
	`IS_NULL
(
nvÆ
Ë|| 
	`IS_LPC_UNDEF
(nval)) {

169 i‡(
oob
 && oob->
ßve_m≠
) {

170 
nvÆ
 = 
	`föd_ö_m≠pög
(
oob
->
ßve_m≠
, 
key
);

171 i‡(
	`IS_LPC_UNDEF
(
nvÆ
)) {

172  
NULL
;

174 
nvÆ
 = 
	`föd_f‹_ö£π
(
cob
->
ßve_m≠
, 
key
, 1);

176  
NULL
;

181 
	`£t_dúty_m≠
(
cob
->
ßve_m≠
, 
nvÆ
-1, 
DIRTY_SET
);

182 
	`‰ì_svÆue
(
nvÆ
, "find_in_save_map_free");

184  
nvÆ
;

185 
	}
}

188 
	$fs_£t_ãmp_m≠
(
ty≥
, 
id
, 
svÆue_t
 *
key
, svÆue_à*
vÆ
)

190 
svÆue_t
 *
nvÆ
;

191 
fs_ch¨_ob_t
 *
cob
;

193 
cob
 = 
	`fs_föd_ch¨_ob
(
ty≥
, 
id
);

195 i‡(!
cob
) {

198 i‡(!
cob
->
ãmp_m≠
) {

199 
cob
->
ãmp_m≠
 = 
	`Æloˇã_m≠pög
(0);

201 
nvÆ
 = 
	`föd_f‹_ö£π
(
cob
->
ãmp_m≠
, 
key
, 1);

203 
	`dìp_c›y_svÆue
(
vÆ
, 
nvÆ
);

206 
	}
}

208 
	$fs_£t_ßve_m≠
(
ty≥
, 
id
, 
svÆue_t
 *
key
, svÆue_à*
vÆ
)

210 
svÆue_t
 *
nvÆ
;

211 
fs_ch¨_ob_t
 *
cob
;

212 
fs_Õc_obje˘_t
 *
oob
;

213 
buf
[
LPC_VAL_STR_LEN
];

215 
cob
 = 
	`fs_föd_ch¨_ob
(
ty≥
, 
id
);

217 i‡(!
cob
) {

221 
oob
 = 
cob
->oob;

222 
nvÆ
 = 
	`föd_ö_ßve_m≠_‰ì
(
cob
, 
key
);

224 i‡(!
nvÆ
) {

225 
	`_Õc_svÆue_2_°r
(
key
, 
buf
);

226 
	`log_îr‹
–
MOD_ITEM
, "[%s]'†ßved key should bêöôed by \"SaveM≠\" o∏\"Ba£SaveM≠\" func, [%s]", 
oob
->
ob
 ? oob->ob->
«me
 : "nuŒ", 
buf
);

231 i‡(
	`IS_NULL
(
nvÆ
)) {

232 
	`_Õc_svÆue_2_°r
(
key
, 
buf
);

233 
	`log_îr‹
–
MOD_ITEM
, "[%s]'†ßved key should bêöôed by \"SaveM≠\" o∏\"Ba£SaveM≠\" func, [%s]", 
oob
->
ob
 ? oob->ob->
«me
 : "nuŒ", 
buf
);

237 
	`dìp_c›y_svÆue
(
vÆ
, 
nvÆ
);

240 
	}
}

242 
	$fs_£t_m≠
(
ty≥
, 
id
, 
svÆue_t
 *
key
, svÆue_à*
vÆ
)

244 
svÆue_t
 *
nvÆ
;

245 
fs_ch¨_ob_t
 *
cob
;

247 
cob
 = 
	`fs_föd_ch¨_ob
(
ty≥
, 
id
);

249 i‡(!
cob
) {

253 
nvÆ
 = 
	`föd_ö_ßve_m≠_‰ì
(
cob
, 
key
);

256 i‡(!
nvÆ
 || 
	`IS_NULL
(nval)) {

257 i‡(!
cob
->
ãmp_m≠
) {

258 
cob
->
ãmp_m≠
 = 
	`Æloˇã_m≠pög
(0);

260 
nvÆ
 = 
	`föd_f‹_ö£π
(
cob
->
ãmp_m≠
, 
key
, 1);

263 
	`assign_svÆue_no_‰ì
(
nvÆ
, 
vÆ
);

264 
	}
}

266 
svÆue_t
 *
	$fs_gë_ãmp_m≠
(
ty≥
, 
id
, 
svÆue_t
 *
key
)

268 
fs_ch¨_ob_t
 *
cob
;

269 
svÆue_t
 *
vÆ
 = &
c⁄°0u
;

271 i‡(!(
cob
 = 
	`fs_föd_ch¨_ob
(
ty≥
, 
id
))) {

272  
vÆ
;

275 i‡(
cob
->
ãmp_m≠
) {

276 
vÆ
 = 
	`föd_ö_m≠pög
(
cob
->
ãmp_m≠
, 
key
);

278  
vÆ
;

279 
	}
}

281 
svÆue_t
 *
	$fs_gë_ßve_m≠
(
ty≥
, 
id
, 
svÆue_t
 *
key
)

283 
fs_ch¨_ob_t
 *
cob
;

284 
svÆue_t
 *
vÆ
 = &
c⁄°0u
;

286 i‡(!(
cob
 = 
	`fs_föd_ch¨_ob
(
ty≥
, 
id
))) {

287  
vÆ
;

289 i‡(
cob
->
ßve_m≠
) {

290 
vÆ
 = 
	`föd_ö_m≠pög
(
cob
->
ßve_m≠
, 
key
);

292  
vÆ
;

293 
	}
}

	@packages/game/fs_char_ob.h

1 #i‚de‡
_FS_OB_MANAGER_H_


2 
	#_FS_OB_MANAGER_H_


	)

4 
	~"fs_hli°.h
"

5 
	~"fs_mem_poﬁ.h
"

6 
	~"fs_Õcob_èbÀ.h
"

9 
	mT_CHAR_ITEM
,

10 
	mT_CHAR_BEAST
,

11 
	mT_CHAR_NPC
,

12 
	mT_CHAR_MAX
,

15 
	sfs_ch¨_ob_s
 {

16 
	mid
;

17 
fs_Õc_obje˘_t
 *
	moob
;

18 
m≠pög_t
 *
	mßve_m≠
;

19 
m≠pög_t
 *
	mãmp_m≠
;

20 } 
	tfs_ch¨_ob_t
;

22 
	sfs_ch¨_ob_m™agî_s
 {

23 
fs_mem‹y_poﬁ_t
 *
	mµoﬁ
;

24 
fs_obj_hash_t
 *
	mphtbl
;

25 
fs_ch¨_ob_t
 *
	mcurob
;

26 
	m°¨tid
;

27 
	mídid
;

28 
	mböô
;

29 } 
	tfs_ch¨_ob_m™agî_t
;

31 
	#CHAR_OB_ENTRY
(
ob
Ë((obË+ 1)

	)

32 
	#CHAR_OB_ID
(
ob
Ë((ob)->
id
)

	)

33 
	#CHAR_OB_ORIG_OB
(
ob
Ë((ob)->
oob
)

	)

35 
fs_öô_ch¨_ob
(
ty≥
, 
hsize
, 
ítsize
, 
°¨tid
, 
ídid
);

36 
fs_ch¨_ob_t
 *
fs_föd_ch¨_ob
(
ty≥
, 
id
);

37 
fs_ch¨_ob_t
 *
fs_√w_ch¨_ob
(
ty≥
, *
∑th
, 
m≠pög_t
 *
m
);

38 
fs_‰ì_ch¨_ob
(
ty≥
, 
id
);

40 
m≠pög_t
 *
gë_ch¨_m≠
(
ty≥
, 
id
, 
ßved
);

42 
fs_£t_ãmp_m≠
(
ty≥
, 
id
, 
svÆue_t
 *
key
, svÆue_à*
vÆ
);

43 
fs_£t_ßve_m≠
(
ty≥
, 
id
, 
svÆue_t
 *
key
, svÆue_à*
vÆ
);

45 
fs_£t_m≠
(
ty≥
, 
id
, 
svÆue_t
 *
key
, svÆue_à*
vÆ
);

46 
svÆue_t
 *
fs_gë_ãmp_m≠
(
ty≥
, 
id
, svÆue_à*
key
);

47 
svÆue_t
 *
fs_gë_ßve_m≠
(
ty≥
, 
id
, svÆue_à*
key
);

48 
fs_dump_ch¨_ob
();

	@packages/game/fs_common.h

2 #i‚de‡
__COMMON_H__


3 
	#__COMMON_H__


	)

5 
	~"fs_©om.h
"

6 
	~"Õc_¨gs_›.h
"

10 
	#ITEM_START_ID
 0x50000000

	)

11 
	#ITEM_END_ID
 0x7FFFFFFF

	)

12 
	#ITEM_DIR
 "ch¨/ôem/"

	)

17 
	#SUMMON_START_ID
 0x40000000

	)

18 
	#SUMMON_END_ID
 0x50000000

	)

19 
	#SUMMON_PATH
 "ch¨/summ⁄/ba£_summ⁄.c"

	)

22 
	#NPC_START_ID
 0x20000000

	)

23 
	#NPC_END_ID
 0x40000000

	)

25 
	#MAX_ONLINE
 8000

	)

26 
	#MAX_ITEM
 (
MAX_ONLINE
 * 150)

	)

27 
	#MAX_SUMMON
 (
MAX_ONLINE
 * 15)

	)

28 
	#MAX_NPC
 (
MAX_ONLINE
 * 30)

	)

29 
	#MAX_TEAM
 
MAX_ONLINE


	)

31 
	#IS_ITEM
(
x
Ë(x >
ITEM_START_ID
 && x <
ITEM_END_ID
)

	)

34 
	#SYS_GET_STR_ATOM
(
x
Ë
	`fs_©om_gë_°rög_©om
(x)

	)

36 
	#SYS_FIND_STR_ATOM
(
x
Ë
	`fs_©om_föd_°rög_©om
(x)

	)

38 
	#TEMP_VAR
 1

	)

39 
	#PERM_VAR
 0

	)

41 
	#FS_GBL_KEY_LEN
 12

	)

42 
	#FS_MAX_PATH_LEN
 1024

	)

43 
	#FS_NAME_LEN
 32

	)

44 
	#FS_TITLE_LEN
 32

	)

	@packages/game/fs_data_map.c

11 
	~"fs_d©a_m≠.h
"

12 
	~"fs_©om.h
"

13 
	~"fs_hli°.h
"

14 
	~"fs_Õc_›.h
"

15 
	~"fs_comm⁄.h
"

16 
	~"fs_log.h
"

18 
debug_mesßge
 (*, ...);

20 
	#INIT_IDLE_BUCKET_MAX
 1024

	)

21 
	#INC_IDLE_NUM
 1024

	)

22 
	#DEFAULT_BUCKET_HSIZE
 16

	)

23 
	#DEFAULT_SCRIPT_BUCKET_HSIZE
 32

	)

25 
	#NODE_NOT_VALID
(
n
Ë(
node
 > 
gpBuckëM™agî
->
idÀ_max
 ||Çodê<0)

	)

27 
fs_bnode_vÆue_t
 
	gc⁄°NuŒVÆue
;

29 
fs_buckë_m™agî_t
 *
	ggpBuckëM™agî
;

30 
	gbInôed
 = 0;

32 
ölöe
 
£t_buckë_dúty
(
fs_buckë_node_t
 
node
);

34 
ölöe
 
fs_bnode_vÆue_t
 * 
	$NEW_DATA_VALUE
()

36 
fs_bnode_vÆue_t
 * 
v
 = (fs_bnode_vÆue_à*Ë
	`MALLOC
((fs_bnode_value_t));

37 
	`mem£t
(
v
, 0, (
fs_bnode_vÆue_t
));

38 
v
->
ty≥
 = 
T_VALUE_NULL
;

39  
v
;

40 
	}
}

42 
ölöe
 
	$FREE_DATA_VALUE
(
fs_bnode_vÆue_t
 * 
v
)

44 
	`FREE
(
v
);

45 
	}
}

47 
ölöe
 
fs_buckë_t
 * 
	$NEW_BUCKET
()

49  (
fs_buckë_t
 *Ë
	`MALLOC
((fs_bucket_t));

50 
	}
}

52 
ölöe
 
	$FREE_BUCKET
(
fs_buckë_t
 *
buckë
)

54 
	`FREE
(
buckë
);

55 
	}
}

57 
ölöe
 
fs_buckë_t
 *
	$_å™s_node_2_°ru˘
(
fs_buckë_node_t
 
node
)

59 i‡(
	`NODE_NOT_VALID
(
node
)Ë 
NULL
;

61  
gpBuckëM™agî
->
Æl_buckës
[
node
 - 1];

62 
	}
}

65 
ölöe
 
	$_mÆloc_idÀ_buckës
(
num
)

67 
cur
 = 
gpBuckëM™agî
->
idÀ_max
;

68 
max
;

70 i‡(!
cur
) {

71 
max
 = 
num
;

72 
gpBuckëM™agî
->
Æl_buckës
 = (
fs_buckë_t
 **Ë
	`MALLOC
((fs_buckë_à*Ë* 
max
 );

74 
max
 = 
cur
 + 
num
;

75 
gpBuckëM™agî
->
Æl_buckës
 = (
fs_buckë_t
 **Ë
	`REALLOC
(gpBuckëM™agî->Æl_buckës, (fs_buckë_à*Ë* 
max
);

78 
cur
 < 
max
) {

79 
gpBuckëM™agî
->
Æl_buckës
[
cur
] = 
NULL
;

81 
cur
++;

82 
gpBuckëM™agî
->
idÀ_°ack
->
	`push
(gpBuckëM™agî->idÀ_°ack, 
cur
);

84 
gpBuckëM™agî
->
idÀ_max
 = 
max
;

85 
	}
}

88 
ölöe
 
fs_buckë_node_t
 
	$_√w_buckë_node
(
hsize
)

90 
ªt
, 
idÀ
;

91 
fs_buckë_t
 *
db
;

93 
ªt
 = 
gpBuckëM™agî
->
idÀ_°ack
->
	`p›
(gpBuckëM™agî->idÀ_°ack, &
idÀ
);

95 i‡(!
ªt
) {

96 
	`debug_mesßge
( "FS_WARNING, bucket stack used out!" );

97 
	`_mÆloc_idÀ_buckës
(
INC_IDLE_NUM
);

98 
ªt
 = 
gpBuckëM™agî
->
idÀ_°ack
->
	`p›
(gpBuckëM™agî->idÀ_°ack, &
idÀ
);

99 i‡(!
ªt
) {

100 
	`debug_mesßge
( "FS_ERROR, bucket stack can't mallocÇew" );

105 i‡(
	`_å™s_node_2_°ru˘
(
idÀ
)) {

106 
	`debug_mesßge
("FS_ERROR, idÀ[%d] buckë i¢'ànuŒ!!", 
idÀ
);

110 
db
 = 
	`NEW_BUCKET
();

111 
db
->
ohash
 = 
	`fs_ht_¸óã_hash_èbÀ
(
hsize
);

112 
db
->
dúty
 = 0;

113 
gpBuckëM™agî
->
Æl_buckës
[
idÀ
 - 1] = 
db
;

115  
idÀ
;

116 
	}
}

119 
ölöe
 
	$_buckë_ªÀa£_vÆue
(
fs_bnode_vÆue_t
 *
d©a
)

121 
fs_buckë_t
 *
buckë
;

122 
fs_ht_node_t
 *
hnode
;

123 
fs_bnode_vÆue_t
 *
vob
;

125 i‡(!
d©a
 || d©a->
ty≥
 =
T_VALUE_NULL
 || d©a->ty≥ =
T_VALUE_INT
) {

128 
d©a
->
ty≥
)

130 
T_VALUE_STR
:

131 
	`FREE
(
d©a
->
u
.
°r
);

133 
T_VALUE_DMAP
:

134 
buckë
 = 
	`_å™s_node_2_°ru˘
(
d©a
->
u
.
bn
);

135 i‡(
buckë
) {

136 
	`FOR_EACH_HTABLE_OB
(
buckë
->
ohash
, 
hnode
)

138 
vob
 = (
fs_bnode_vÆue_t
 *Ë
hnode
->
ob
;

139 
	`_buckë_ªÀa£_vÆue
(
vob
);

142 
	`fs_‰ì_buckë
(
d©a
->
u
.
bn
);

147 
	}
}

149 
ölöe
 
fs_bnode_vÆue_t
 *
	$_föd_buckë_vÆue
(
fs_buckë_node_t
 
node
, 
fs_ht_key_t
 *
key
, 
doNew
)

151 
fs_bnode_vÆue_t
 *
vob
;

153 
fs_buckë_t
 *
buckë
 = 
	`_å™s_node_2_°ru˘
(
node
);

155 i‡(!
buckë
) {

156  
NULL
;

159 
vob
 = (
fs_bnode_vÆue_t
 *Ë
	`FS_HT_FIND
(
buckë
->
ohash
, 
key
);

160 i‡(!
vob
) {

161 i‡(
doNew
) {

162 
vob
 = 
	`NEW_DATA_VALUE
();

163 
	`FS_HT_INSERT
(
buckë
->
ohash
, 
key
, 
vob
);

165 
vob
 = 
NULL
;

168  
vob
;

169 
	}
}

171 
ölöe
 
	$£t_buckë_dúty
(
fs_buckë_node_t
 
node
)

173 
fs_buckë_t
 *
buckë
;

174 
buckë
 = 
	`_å™s_node_2_°ru˘
(
node
);

175 i‡(
buckë
Ëbuckë->
dúty
 = 1;

176 
	}
}

178 
	$i_£t_buckë_vÆue
(
fs_buckë_node_t
 
node
 , 
fs_ht_key_t
 *
htkey
, 
v
)

180 
fs_bnode_vÆue_t
 *
bv
 = 
	`_föd_buckë_vÆue
(
node
, 
htkey
, 1);

182 i‡(!
bv
) ;

184 
	`_buckë_ªÀa£_vÆue
(
bv
);

186 
	`£t_buckë_dúty
(
node
);

188 
bv
->
ty≥
 = 
T_VALUE_INT
;

189 
bv
->
u
.
num
 = 
v
;

190 
	}
}

192 
	$c_£t_buckë_vÆue
(
fs_buckë_node_t
 
node
, 
fs_ht_key_t
 *
htkey
, *
v
)

194 
size
;

195 *
ãmp
;

196 
fs_bnode_vÆue_t
 *
bv
 = 
	`_föd_buckë_vÆue
(
node
, 
htkey
, 1);

198 i‡(!
bv
) ;

200 
	`_buckë_ªÀa£_vÆue
(
bv
);

202 
	`£t_buckë_dúty
(
node
);

204 
bv
->
ty≥
 = 
T_VALUE_STR
;

205 
size
 = 
	`°æí
(
v
) + 1;

207 
ãmp
 = (*Ë
	`MALLOC
(
size
);

208 
	`°∫˝y
(
ãmp
, (*)
v
, 
size
);

209 
bv
->
u
.
°r
 = 
ãmp
;

210 
	}
}

213 
fs_buckë_node_t
 
	$≠≥nd_buckë_node
(
fs_buckë_node_t
 
node
, 
fs_ht_key_t
 *
htkey
)

215 
fs_buckë_node_t
 
chûd
;

216 
fs_bnode_vÆue_t
 *
bv
 = 
	`_föd_buckë_vÆue
(
node
, 
htkey
, 1);

218 i‡(!
bv
)  0;

220 i‡(
bv
->
ty≥
 =
T_VALUE_DMAP
) {

221  
bv
->
u
.
bn
;

224 
	`_buckë_ªÀa£_vÆue
(
bv
);

226 
	`£t_buckë_dúty
(
node
);

228 
chûd
 = 
	`_√w_buckë_node
(
DEFAULT_BUCKET_HSIZE
);

229 
bv
->
ty≥
 = 
T_VALUE_DMAP
;

230 
bv
->
u
.
bn

chûd
;

231  
chûd
;

232 
	}
}

234 
fs_bnode_vÆue_t
 *
	$gë_buckë_vÆue
(
fs_buckë_node_t
 
node
, 
fs_ht_key_t
 *
htkey
)

236  
	`_föd_buckë_vÆue
(
node
, 
htkey
, 0);

237 
	}
}

239 
ölöe
 
	$∑r£_svÆue_key
(
svÆue_t
 *
key
, 
fs_ht_key_t
 *
htkey
)

241 i‡(
	`IS_LPC_STR
(
key
)) {

242 
	`HT_SET_KEY_STR
(
htkey
, 
	`LPC_STR_VALUE
(
key
));

244 } i‡(
	`IS_LPC_INT
(
key
)) {

245 
	`HT_SET_KEY_INT
(
htkey
, 
	`LPC_INT_VALUE
(
key
));

249 
	}
}

252 
	$˛ór_buckë_dúty
(
fs_buckë_node_t
 
node
)

254 
fs_buckë_t
 *
buckë
;

255 
buckë
 = 
	`_å™s_node_2_°ru˘
(
node
);

256 i‡(
buckë
Ëbuckë->
dúty
 = 0;

257 
	}
}

259 
	$buckë_is_dúty
(
fs_buckë_node_t
 
node
)

261 
fs_buckë_t
 *
buckë
;

262 
buckë
 = 
	`_å™s_node_2_°ru˘
(
node
);

263  (
buckë
 && buckë->
dúty
 == 1);

264 
	}
}

266 
	$ªmove_buckë_key
(
fs_buckë_node_t
 
node
, 
fs_ht_key_t
 *
htkey
)

268 
fs_buckë_t
 *
buckë
;

269 
buckë
 = 
	`_å™s_node_2_°ru˘
(
node
);

271 i‡(
buckë
) {

272 
	`FS_HT_REMOVE
(
buckë
->
ohash
, 
htkey
);

274 
	}
}

278 
	$fs_sys_öô_buckë_m™agî
()

280 
gpBuckëM™agî
 = (
fs_buckë_m™agî_t
 *)
	`MALLOC
((fs_bucket_manager_t));

281 
gpBuckëM™agî
->
Æl_buckës
 = 
NULL
;

282 
gpBuckëM™agî
->
idÀ_°ack
 = 
NULL
;

283 
gpBuckëM™agî
->
idÀ_max
 = 0;

285 i‡(
	`öô_°ack_öt
(&
gpBuckëM™agî
->
idÀ_°ack
) != 1) {

286 
	`debug_mesßge
("bucket stack initÉrror\n");

287 
	`exô
(-1);

291 
c⁄°NuŒVÆue
.
ty≥
 = 
T_VALUE_NULL
;

292 
c⁄°NuŒVÆue
.
u
.
num
 = 0;

294 
	`_mÆloc_idÀ_buckës
(
INIT_IDLE_BUCKET_MAX
);

295 
	}
}

297 
	$fs_sys_ªÀa£_buckë_m™agî
()

299 
i
;

300 
i
 = 0;

301 
i
 < 
gpBuckëM™agî
->
idÀ_max
) {

302 
	`fs_‰ì_buckë
(
i
+1);

303 
i
++;

306 
	`‰ì_°ack_öt
(
gpBuckëM™agî
->
idÀ_°ack
);

307 
	`FREE
(
gpBuckëM™agî
->
Æl_buckës
);

308 
	`FREE
(
gpBuckëM™agî
);

309 
	}
}

311 
fs_buckë_node_t
 
	$fs_√w_buckë
(
hsize
)

313  
	`_√w_buckë_node
(
hsize
);

314 
	}
}

316 
	$fs_‰ì_buckë
(
fs_buckë_node_t
 
node
)

318 
fs_buckë_t
 *
buckë
;

320 i‡(
	`NODE_NOT_VALID
(
node
))  ;

322 
buckë
 = 
gpBuckëM™agî
->
Æl_buckës
[
node
 - 1];

324 i‡(
buckë
) {

325 
gpBuckëM™agî
->
idÀ_°ack
->
	`push
(gpBuckëM™agî->idÀ_°ack, 
node
);

326 
gpBuckëM™agî
->
Æl_buckës
[
node
 - 1] = 
NULL
;

327 
	`FREE_BUCKET
(
buckë
);

329 
	}
}

330 
m≠pög_t
 * 
	$fs_buckë_2_m≠
(
fs_buckë_node_t
 
node
)

332 
fs_buckë_t
 *
buckë
;

333 
fs_bnode_vÆue_t
 *
vob
;

334 
fs_ht_node_t
 *
hnode
;

335 *
°rkey
;

336 
svÆue_t
 *
knode
;

337 
m≠pög_t
 *
m≠
, *
chûd_m≠
;

338 
fs_ht_key_t
 *
htkey
;

340 i‡(
	`NODE_NOT_VALID
(
node
)) {

341  
NULL
;

344 
buckë
 = 
	`_å™s_node_2_°ru˘
(
node
);

346 i‡(
buckë
 && buckë->
ohash
) {

347 
m≠
 = 
	`Æloˇã_m≠pög
(
buckë
->
ohash
->
num
);

348 
	`FOR_EACH_HTABLE_OB
(
buckë
->
ohash
, 
hnode
)

350 
vob
 = (
fs_bnode_vÆue_t
 *Ë
hnode
->
ob
;

353 
htkey
 = (
fs_ht_key_t
 *)(&
hnode
->
hkey
);

354 
knode
 = 
NULL
;

356 
htkey
->
ty≥
) {

357 
T_HT_KEY_INT
:

358 
knode
 = 
	`m≠_ö£π_öt_key
(
m≠
, 
htkey
->
vÆ
);

360 
T_HT_KEY_ATOM
:

361 
°rkey
 = 
	`fs_©om_gë_°rög_by_©om
(
htkey
->
vÆ
);

362 i‡(
	`°æí
(
°rkey
)) {

363 
knode
 = 
	`m≠_ö£π_°r_key
(
m≠
, 
°rkey
);

369 i‡(!
knode
) {

374 
vob
->
ty≥
) {

375 
T_VALUE_INT
:

376 
	`£t_svÆue_numbî
(
knode
, 
	`BM_INT_VALUE
(
vob
));

378 
T_VALUE_STR
:

379 
	`£t_svÆue_sh¨ed_°rög
(
knode
, 
	`BM_STR_VALUE
(
vob
));

381 
T_VALUE_DMAP
:

382 
chûd_m≠
 = 
	`fs_buckë_2_m≠
(
	`BM_DMAP_VALUE
(
vob
));

383 i‡(
chûd_m≠
) {

384 
	`£t_svÆue_m≠pög
(
knode
, 
chûd_m≠
);

391  
m≠
;

393  
NULL
;

394 
	}
}

396 
	$buckë_£rül
(
fs_buckë_node_t
 
node
, *
buf
, 
Àn
)

398 
size
;

399 
svÆue_t
 
v
;

401 
m≠pög_t
 *
m
 = 
	`fs_buckë_2_m≠
(
node
);

403 i‡(!
m
)  0;

405 
	`TO_LPC_MAP
(
v
, 
m
);

406 
size
 = 
	`svÆue_ßve_size
(&
v
) + 1;

408 i‡(
size
 >
Àn
) {

409 
	`‰ì_m≠pög
(
m
);

413 *
	`ßve_v¨übÀ_2
(
svÆue_t
 *
v¨
, *
ªt
);

415 
	`ßve_v¨übÀ_2
(&
v
, 
buf
);

417 
	`‰ì_m≠pög
(
m
);

419 
	}
}

421 
	$fs_m≠_2_buckë
(
fs_buckë_node_t
 
node
, 
m≠pög_t
 *
m
)

423 
m≠pög_node_t
 *
ñt
, *
√…
;

424 
svÆue_t
 *
key
, *
vÆue
;

425 
chûdnode
;

426 
fs_ht_key_t
 
htkey
;

428 
j
 = ()
m
->
èbÀ_size
;

431 
ñt
 = 
m
->
èbÀ
[
j
];É…;É… = 
√…
)

433 
√…
 = 
ñt
->
√xt
;

434 
key
 = &
ñt
->
vÆues
[0];

435 
vÆue
 = &
ñt
->
vÆues
[1];

437 i‡(!
	`∑r£_svÆue_key
(
key
, &
htkey
)) {

442 
vÆue
->
ty≥
) {

443 
T_NUMBER
:

444 
	`i_£t_buckë_vÆue
(
node
, &
htkey
, 
	`LPC_INT_VALUE
(
vÆue
));

446 
T_STRING
:

447 
	`c_£t_buckë_vÆue
(
node
, &
htkey
, 
	`LPC_STR_VALUE
(
vÆue
));

449 
T_MAPPING
:

450 
chûdnode
 = 
	`≠≥nd_buckë_node
(
node
, &
htkey
);

451 
	`fs_m≠_2_buckë
(
chûdnode
, 
	`LPC_MAP_VALUE
(
vÆue
));

459 
j
--);

460 
	}
}

462 
	$buckë_un£rül
(
fs_buckë_node_t
 
node
, *
°r
)

464 
svÆue_t
 
v
;

465 
svÆue_t
 *
pv
 = &
v
;

467 i‡(
	`°æí
(
°r
) <= 1)  0;

469 
	`ª°‹e_v¨übÀ
(
pv
, 
°r
);

471 i‡(!
	`IS_LPC_MAP
(
pv
)) {

475 
	`fs_m≠_2_buckë
(
node
, 
	`LPC_MAP_VALUE
(
pv
));

477 
	}
}

480 
ölöe
 
fs_buckë_node_t
 
	$föd_buckë_node_by_∑th
(
fs_buckë_node_t
 
roŸ
, 
svÆue_t
 *
∑thkey
, 
doNew
)

482 
¨r_size
, 
i
;

483 
fs_buckë_node_t
 
node
;

484 
fs_bnode_vÆue_t
 *
bv
 = 
NULL
;

485 
svÆue_t
 *
ôem
;

486 *
ªt_vÆ
;

487 
fs_ht_key_t
 
htkey
;

489 i‡(!
	`IS_LPC_ARR
(
∑thkey
)) {

493 
¨r_size
 = 
	`LPC_ARR_SIZE
(
∑thkey
);

494 
node
 = 
roŸ
;

495 
i
 = 0;

496 
ªt_vÆ
 = 
NULL
;

498 
i
 < 
¨r_size
 && 
node
 ) {

499 i‡(
i
 =(
¨r_size
 - 1)) {

500  
node
;

502 
ôem
 = (
svÆue_t
 *Ë
	`LPC_ARR_ITEM
(
∑thkey
, 
i
);

503 i‡(
	`∑r£_svÆue_key
(
ôem
, &
htkey
)) {

504 i‡(
doNew
) {

505 
bv
 = 
	`_föd_buckë_vÆue
(
node
, &
htkey
, 0);

506 i‡(!
	`BM_IS_TYPE_VALUE
(
bv
, 
T_VALUE_DMAP
)) {

507 
node
 = 
	`≠≥nd_buckë_node
“ode, &
htkey
);

509 
node
 = 
	`BM_DMAP_VALUE
(
bv
);

513 
i
++;

516 
	}
}

518 
	$f‹óch_buckë_node
(
fs_buckë_node_t
 
node
, 
fs_buckë_hook_func_t
 
func
, *
¨g
)

520 
fs_buckë_t
 *
buckë
;

521 
fs_bnode_vÆue_t
 *
vob
;

522 
fs_ht_node_t
 *
hnode
;

524 i‡(
	`NODE_NOT_VALID
(
node
)) {

527 
buckë
 = 
	`_å™s_node_2_°ru˘
(
node
);

529 i‡(
buckë
) {

530 
	`FOR_EACH_HTABLE_OB
(
buckë
->
ohash
, 
hnode
)

532 
vob
 = (
fs_bnode_vÆue_t
 *Ë
hnode
->
ob
;

533 i‡(
	`func
(&
hnode
->
hkey
, 
vob
, 
¨g
)) {

538 
	}
}

540 
	$£t_Ãu_buckë
(
fs_buckë_node_t
 
node
)

542 
fs_buckë_t
 *
buckë
;

544 
buckë
 = 
	`_å™s_node_2_°ru˘
(
node
);

545 i‡(
buckë
) {

546 
	`fs_ht_£t_Ãu_hli°
(
buckë
->
ohash
);

548 
	}
}

554 
	$gë_buckë_svÆue
(
fs_buckë_node_t
 
roŸ
, 
svÆue_t
 *
∑thkey
, svÆue_à*
ªtvÆue
)

556 
fs_buckë_node_t
 
node
;

557 
fs_bnode_vÆue_t
 *
bv
 = 
NULL
;

558 
svÆue_t
 *
key
;

559 
ªt
;

560 
fs_ht_key_t
 
htkey
;

562 i‡(
	`IS_LPC_ARR
(
∑thkey
)) {

564 i‡(!(
node
 = 
	`föd_buckë_node_by_∑th
(
roŸ
, 
∑thkey
, 1))) {

567 
key
 = (
svÆue_t
 *Ë
	`LPC_ARR_ITEM
(
∑thkey
, 
	`LPC_ARR_SIZE
(pathkey) - 1);

569 
key
 = 
∑thkey
;

570 
node
 = 
roŸ
;

573 i‡(
	`∑r£_svÆue_key
(
key
, &
htkey
)) {

574 
bv
 = 
	`_föd_buckë_vÆue
(
node
, &
htkey
, 0);

577 i‡(!
bv
) {

582 
ªt
 = 0;

583 
bv
->
ty≥
) {

584 
T_VALUE_INT
:

585 
	`£t_svÆue_numbî
(
ªtvÆue
, 
	`BM_INT_VALUE
(
bv
));

586 
ªt
 = 1;

588 
T_VALUE_STR
:

589 
	`£t_svÆue_sh¨ed_°rög
(
ªtvÆue
, 
	`BM_STR_VALUE
(
bv
));

590 
ªt
 = 1;

595  
ªt
;

596 
	}
}

598 
	$£t_buckë_svÆue
(
fs_buckë_node_t
 
roŸ
, 
svÆue_t
 *
∑thkey
, svÆue_à*
vÆue
)

600 
fs_buckë_node_t
 
node
;

601 
svÆue_t
 *
key
;

602 
ªt
;

603 
fs_ht_key_t
 
htkey
;

605 i‡(
	`IS_LPC_ARR
(
∑thkey
)) {

607 i‡(!(
node
 = 
	`föd_buckë_node_by_∑th
(
roŸ
, 
∑thkey
, 1))) {

610 
key
 = (
svÆue_t
 *Ë
	`LPC_ARR_ITEM
(
∑thkey
, 
	`LPC_ARR_SIZE
(pathkey) - 1);

612 
key
 = 
∑thkey
;

613 
node
 = 
roŸ
;

616 
ªt
 = 0;

617 i‡(
	`∑r£_svÆue_key
(
key
, &
htkey
)) {

619 
vÆue
->
ty≥
) {

620 
T_NUMBER
:

621 
	`i_£t_buckë_vÆue
(
node
, &
htkey
, 
	`LPC_INT_VALUE
(
vÆue
));

622 
ªt
 = 1;

624 
T_STRING
:

625 
	`c_£t_buckë_vÆue
(
node
, &
htkey
, 
	`LPC_STR_VALUE
(
vÆue
));

626 
ªt
 = 1;

632  
ªt
;

633 
	}
}

635 
	$f_New_Buckë
()

637 
ªt
 = 
	`fs_√w_buckë
(
DEFAULT_SCRIPT_BUCKET_HSIZE
);

639 
	`push_numbî
(
ªt
);

640 
	}
}

642 
	$f_Fªe_Buckë
()

644 
svÆue_t
 *
buckë
 = (
•
--);

646 
	`fs_‰ì_buckë
(
	`LPC_INT_VALUE
(
buckë
));

647 
	}
}

649 
	$f_I_SëBuckë
()

651 
svÆue_t
 *
vÆue
 = (
•
--);

652 
svÆue_t
 *
∑thkey
 = (
•
--);

653 
svÆue_t
 *
buckë
 = (
•
--);

654 
roŸ
;

656 
roŸ
 = 
	`LPC_INT_VALUE
(
buckë
);

658 
	`£t_buckë_svÆue
(
roŸ
, 
∑thkey
, 
vÆue
);

660 
	`‰ì_svÆue
(
∑thkey
, "I_SetBucket");

661 
	`‰ì_svÆue
(
vÆue
, "I_SetBucket");

662 
	}
}

664 
	$f_C_SëBuckë
()

666 
svÆue_t
 *
vÆue
 = (
•
--);

667 
svÆue_t
 *
∑thkey
 = (
•
--);

668 
svÆue_t
 *
buckë
 = (
•
--);

669 
roŸ
;

671 
roŸ
 = 
	`LPC_INT_VALUE
(
buckë
);

673 
	`£t_buckë_svÆue
(
roŸ
, 
∑thkey
, 
vÆue
);

675 
	`‰ì_svÆue
(
∑thkey
, "C_SetBucket");

676 
	`‰ì_svÆue
(
vÆue
, "C_SetBucket");

677 
	}
}

679 
	$f_I_GëBuckë
()

681 
svÆue_t
 *
∑thkey
 = (
•
--);

682 
svÆue_t
 *
buckë
 = (
•
--);

683 
roŸ
;

684 
svÆue_t
 
vÆue
;

685 
svÆue_t
 *
pvÆue
 = &
vÆue
;

686 
ªt
;

688 
roŸ
 = 
	`LPC_INT_VALUE
(
buckë
);

690 
ªt
 = 
	`gë_buckë_svÆue
(
roŸ
, 
∑thkey
, 
pvÆue
);

692 
	`‰ì_svÆue
(
∑thkey
, "I_GetBucket");

694 i‡(
ªt
) {

695 i‡(
	`IS_LPC_INT
(
pvÆue
)) {

696 
	`push_svÆue
(
pvÆue
);

702 
	`push_svÆue
(&
c⁄°0u
);

703 
	}
}

705 
	$f_C_GëBuckë
()

707 
svÆue_t
 *
∑thkey
 = (
•
--);

708 
svÆue_t
 *
buckë
 = (
•
--);

709 
svÆue_t
 
vÆue
;

710 
svÆue_t
 *
pvÆue
 = &
vÆue
;

711 
ªt
, 
roŸ
;

713 
roŸ
 = 
	`LPC_INT_VALUE
(
buckë
);

715 
ªt
 = 
	`gë_buckë_svÆue
(
roŸ
, 
∑thkey
, 
pvÆue
);

717 
	`‰ì_svÆue
(
∑thkey
, "C_GetBucket");

719 i‡(
ªt
) {

720 i‡(
	`IS_LPC_STR
(
pvÆue
)) {

721 
	`push_svÆue
(
pvÆue
);

727 
	`push_svÆue
(&
c⁄°0u
);

728 
	}
}

731 
	$f_Buckë2M≠
()

733 
svÆue_t
 *
buckë
 = (
•
--);

735 
m≠pög_t
 *
ªt
;

737 
ªt
 = 
	`fs_buckë_2_m≠
(
	`LPC_INT_VALUE
(
buckë
));

739 i‡(!
ªt
) {

740 
	`push_svÆue
(&
c⁄°0u
);

743 
	`push_ª„d_m≠pög
(
ªt
);

744 
	}
}

	@packages/game/fs_data_map.h

1 #i‚de‡ 
_FS_DATA_MAP_H


2 
	#_FS_DATA_MAP_H


	)

4 
	~"Õc_ö˛.h
"

5 
	~"fs_hli°.h
"

6 
	~"°ack.h
"

9 
	mT_VALUE_NULL
 = 0,

10 
	mT_VALUE_INT
,

11 
	mT_VALUE_STR
,

12 
	mT_VALUE_DMAP


15 
	tfs_buckë_node_t
;

17 
	sfs_bnode_vÆue_s
 {

19 
	mty≥
;

21 
	mnum
;

22 *
	m°r
;

23 
fs_buckë_node_t
 
	mbn
;

24 }
	mu
 ;

26 } 
	tfs_bnode_vÆue_t
;

28 (*
	tfs_buckë_hook_func_t
)(
	tfs_ht_key_t
 *, 
	tfs_bnode_vÆue_t
 *, *);

30 
	sfs_buckë_s
 {

31 
fs_obj_hash_t
 *
ohash
;

32 
dúty
;

33 } 
	tfs_buckë_t
;

35 
	sfs_buckë_m™agî_s
 {

36 
fs_buckë_t
 **
Æl_buckës
;

37 
ST_I
 *
idÀ_°ack
;

38 
idÀ_max
;

39 } 
	tfs_buckë_m™agî_t
;

41 
	`i_£t_buckë_vÆue
(
fs_buckë_node_t
, 
fs_ht_key_t
 *, );

42 
	`c_£t_buckë_vÆue
(
fs_buckë_node_t
, 
fs_ht_key_t
 *, *);

43 
fs_buckë_node_t
 
	`≠≥nd_buckë_node
(fs_buckë_node_t, 
fs_ht_key_t
 *);

44 
fs_bnode_vÆue_t
 *
	`gë_buckë_vÆue
(
fs_buckë_node_t
, 
fs_ht_key_t
 *);

45 
	`gë_buckë_svÆue
(
fs_buckë_node_t
, 
svÆue_t
 *, svalue_t *);

46 
	`£t_buckë_svÆue
(
fs_buckë_node_t
, 
svÆue_t
 *, svalue_t *);

47 
fs_buckë_node_t
 
	`fs_√w_buckë
();

48 
	`fs_‰ì_buckë
(
fs_buckë_node_t
);

49 
	`ªmove_buckë_key
(
fs_buckë_node_t
, 
fs_ht_key_t
 *);

50 
	`buckë_£rül
(
fs_buckë_node_t
, *, );

51 
	`buckë_un£rül
(
fs_buckë_node_t
, *);

52 
	`f‹óch_buckë_node
(
fs_buckë_node_t
, 
fs_buckë_hook_func_t
, *);

53 
	`£t_Ãu_buckë
(
fs_buckë_node_t
);

54 
	`buckë_is_dúty
(
fs_buckë_node_t
);

55 
	`˛ór_buckë_dúty
(
fs_buckë_node_t
 
node
);

56 
	`fs_sys_öô_buckë_m™agî
();

57 
	`fs_sys_ªÀa£_buckë_m™agî
();

59 
	#BM_ASSERT_TYPE_VALUE
(
v
, 
t
, 
e
, 
r
Ë((!v || v->
ty≥
 !tË?É :Ñ)

	)

61 
	#BM_IS_TYPE_VALUE
(
v
, 
t
Ë(v && v->
ty≥
 =t)

	)

63 
	#BM_INT_VALUE
(
x
Ë(x->
u
.
num
)

	)

64 
	#BM_STR_VALUE
(
x
Ë(x->
u
.
°r
)

	)

65 
	#BM_DMAP_VALUE
(
x
Ë(x->
u
.
bn
)

	)

	@packages/game/fs_db.c

2 
	~"fs_maö.h
"

3 
	~"fs_db.h
"

4 
	~"fs_d©a_ßve.h
"

5 
	~"Õc_¨gs_›.h
"

6 
	~"fs_m¨shÆ.h
"

7 
	~"fs_hli°.h
"

8 
	~"fs_log.h
"

9 
	~"fs_comm.h
"

11 
	#SAVE_ALL
 0

	)

12 
	#SAVE_DIRTY
 1

	)

14 
	#LOAD_ASYNC
 0

	)

15 
	#LOAD_SYNC
 1

	)

17 
is_gamed_°¨t
;

18 
fs_√t_c⁄√˘i⁄_t
 *
dbd_c⁄n
;

19 
fs_iobuf_t
 *
dbd_io
;

20 
fs_obj_hash_t
 *
⁄löe_u£r_tbl
;

48 
	$öô_u£r_ßve_v¨
(
obje˘_t
 *
u£r_obj
)

51 
	}
}

55 
buf„r_t
 *
	$mbuf_to_buf„r
(
fs_mbuf_t
 *
mbuf
)

57 
°¨t
 = 0;

58 
buf„r_t
 *
buf
 = 
	`Æloˇã_buf„r
(
mbuf
->
d©a_size
);

60 
fs_mbuf_blk_t
 *
blk
;

61 
blk
 = 
mbuf
->
hód
; blk !
NULL
; blk = blk->
√xt
) {

62 
Àn
 = 
	`FS_MBUF_BLK_DATA_LEN
(
blk
);

63 
	`wrôe_buf„r
(
buf
, 
°¨t
, 
blk
->
hód
, 
Àn
);

64 
°¨t
 +
Àn
;

67  
buf
;

68 
	}
}

70 
	$f_fs_íabÀ_dúty_obje˘
()

72 
SET_ALL_ARGS


73 
obje˘_t
 *
obj
 = 
	`ARGS
(0)->
u
.
ob
;

74 
	`as£π
–0 =
	`db_obje˘_íabÀ_dúty
(
obj
));

75 
POP_ALL_ARGS


76 
	`push_numbî
(0);

77 
	}
}

79 
	$f_fs_m¨shÆ_dúty_obje˘
()

81 
fs_dbi_¨øy_t
 
¨r
;

82 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

84 
SET_ALL_ARGS


85 
obje˘_t
 *
obj
 = 
	`ARGS
(0)->
u
.
ob
;

86 
	`db_obje˘_m¨shÆ_dúty
(
obj
, &
¨r
);

87 
POP_ALL_ARGS


89 
buf„r_t
 *
buf
 = 
	`mbuf_to_buf„r
(&
¨r
.
mbuf
);

90 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

91 
	`push_ª„d_buf„r
(
buf
);

92 
	}
}

94 
	$f_fs_mîge_dúty_obje˘
()

96 
SET_ALL_ARGS


97 
buf„r_t
 *
buf
 = 
	`ARGS
(1)->
u
.buf;

99 
fs_dbi_¨øy_ôî_t
 
ôî
;

100 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, (*)
buf
->
ôem
, buf->
size
);

101 
	`mîge_dúty_db_obje˘_to_m≠
(
	`ARGS
(0), &
ôî
);

103 
POP_ALL_ARGS


104 
	}
}

106 
	$f_fs_íabÀ_dúty_m≠
()

108 
SET_ALL_ARGS


109 
	`begö_dúty_m™age_m≠
(
	`ARGS
(0), 
NULL
, NULL);

110 
POP_ALL_ARGS


111 
	`push_numbî
(0);

112 
	}
}

114 
	$f_fs_m¨shÆ_dúty_m≠
()

116 
fs_dbi_¨øy_t
 
¨r
;

117 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

119 
SET_ALL_ARGS


120 
	`fs_m¨shÆ_dúty_m≠
(
	`ARGS
(0), &
¨r
);

121 
POP_ALL_ARGS


123 
buf„r_t
 *
buf
 = 
	`mbuf_to_buf„r
(&
¨r
.
mbuf
);

124 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

125 
	`push_ª„d_buf„r
(
buf
);

126 
	}
}

128 
	$f_fs_mîge_dúty_m≠
()

130 
	}
}

132 
	$f_fs_m¨shÆ_m≠
()

134 
fs_dbi_¨øy_t
 
¨r
;

135 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

137 
SET_ALL_ARGS


138 
	`fs_m¨shÆ
(
	`ARGS
(0), &
¨r
);

139 
POP_ALL_ARGS


141 
buf„r_t
 *
buf
 = 
	`mbuf_to_buf„r
(&
¨r
.
mbuf
);

142 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

143 
	`push_ª„d_buf„r
(
buf
);

144 
	}
}

147 
	$log_de°ru˘ed_obj
(c⁄° * 
wh©
, 
svÆue_t
 *
k
, 
obje˘_t
 *
obj
)

149 i‡(
k
 =
NULL
 ) {

150 
	`log_îr‹
(
MOD_GAMED
, "îr‹ db obje˘ ha†bì¿de°ru˘ed:%s,NULL,%s", 
wh©
, 
obj
->
«me
);

154 
k
->
ty≥
) {

155 
T_NUMBER
:

156 
	`log_îr‹
(
MOD_GAMED
, "îr‹ db obje˘ ha†bì¿de°ru˘ed:%s,%d,%s", 
wh©
, 
k
->
u
.
numbî
, 
obj
->
«me
);

158 
T_STRING
:

159 
	`log_îr‹
(
MOD_GAMED
, "îr‹ db obje˘ ha†bì¿de°ru˘ed:%s,%s,%s", 
wh©
, 
k
->
u
.
°rög
, 
obj
->
«me
);

162 
	}
}

165 
	$f_fs_db_obje˘_√w
()

167 
ªt
 = 0;

168 
SET_ALL_ARGS


169 i‡(
is_gamed_°¨t
) {

170 
svÆue_t
 *
k
 = 
	`ARGS
(0);

171 
obje˘_t
 *
obj
 = 
	`ARGS
(1)->
u
.
ob
;

172 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

173 
ªt
 = -1;

174 
	`log_de°ru˘ed_obj
("√w", 
k
, 
obj
);

176 
	`fs_db_obje˘_£nd
(
dbd_c⁄n
, 
FS_GD_CMD_DB_OBJ_NEW
, 
k
, 
obj
);

179 
POP_ALL_ARGS


180 
	`push_numbî
(
ªt
);

181 
	}
}

184 
	$f_fs_db_obje˘_u∆ﬂd
()

186 
SET_ALL_ARGS


187 i‡(
is_gamed_°¨t
) {

188 
svÆue_t
 *
k
 = 
	`ARGS
(0);

189 
	`fs_db_obje˘_u∆ﬂd
(
dbd_c⁄n
, 
k
);

191 
POP_ALL_ARGS


192 
	`push_numbî
(0);

193 
	}
}

196 
	$f_fs_db_obje˘_ßve
()

199 
ªt
 = 0;

200 
SET_ALL_ARGS


201 i‡(
is_gamed_°¨t
) {

202 
svÆue_t
 *
k
 = 
	`ARGS
(0);

203 
obje˘_t
 *
obj
 = 
	`ARGS
(1)->
u
.
ob
;

204 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

205 
ªt
 = -1;

206 
	`log_de°ru˘ed_obj
("ßve", 
k
, 
obj
);

208 
mëhod
 = 
	`ARGS
(2)->
u
.
numbî
 =
SAVE_DIRTY
 ? 
FS_GD_CMD_DB_OBJ_DATA_DIRTY
: 
FS_GD_CMD_DB_OBJ_DATA
;

209 
	`fs_db_obje˘_£nd
(
dbd_c⁄n
, 
mëhod
, 
k
, 
obj
);

212 
POP_ALL_ARGS


213 
	`push_numbî
(
ªt
);

214 
	}
}

217 
	$f_fs_db_obje˘_ª«me
()

220 
ªt
 = 0;

221 
SET_ALL_ARGS


222 i‡(
is_gamed_°¨t
) {

223 
svÆue_t
 *
k
 = 
	`ARGS
(0);

224 
obje˘_t
 *
obj
 = 
	`ARGS
(1)->
u
.
ob
;

225 
svÆue_t
 *
√wk
 = 
	`ARGS
(2);

226 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

227 
ªt
 = -1;

228 
	`log_de°ru˘ed_obj
("ª«me", 
k
, 
obj
);

230 
	`fs_db_obje˘_ª«me
(
dbd_c⁄n
, 
k
, 
obj
, 
√wk
);

233 
POP_ALL_ARGS


234 
	`push_numbî
(
ªt
);

235 
	}
}

237 
	$f_fs_ßve_Æl_u£r
()

239 
SET_ALL_ARGS


240 
mëhod
 = 
	`ARGS
(0)->
u
.
numbî
 =
SAVE_DIRTY
 ? 
FS_GD_CMD_DB_OBJ_DATA_DIRTY
: 
FS_GD_CMD_DB_OBJ_DATA
;

241 
POP_ALL_ARGS


243 
fs_u£r_t
 *
u£r
;

244 
fs_db_obje˘_ödex_t
 *
ödex
 = 
NULL
;

245 
fs_ht_node_t
 *
hnode
;

246 
svÆue_t
 
key
 = 
c⁄°0
;

248 
	`£çro˘ôÀ
("-gamed %s", "saving user");

249 
	`TIME_TAG_BEGIN
(1, 
ßve_Æl_u£r
)

250 
	`FOR_EACH_HTABLE_OB
(
⁄löe_u£r_tbl
, 
hnode
) {

251 
u£r
 = (
fs_u£r_t
 *Ë
hnode
->
ob
;

252 i‡(
u£r
->
u£∫um
 > 0) {

253 
key
.
u
.
numbî
 = 
u£r
->
u£∫um
;

254 i‡(
u£r
->
u£r_obj
 =
NULL
) {

257 i‡(
u£r
->
u£r_obj
->
Êags
 & 
O_DESTRUCTED
) {

258 
	`log_de°ru˘ed_obj
("ßvêu£r", &
key
, 
u£r
->
u£r_obj
);

261 i‡(
ödex
 =
NULL
) {

262 
ödex
 = 
	`fs_db_obje˘_ödex_föd_‹_add
(
u£r
->
u£r_obj
);

264 
	`fs_db_obje˘_ßve
(
dbd_c⁄n
, 
mëhod
, &
key
, 
u£r
->
u£r_obj
, 
ödex
);

266 
	`Ârötf
(
°dîr
, "îr‹ skù savög bad u£∏uid=%d\n", 
u£r
->
u£∫um
);

269 
	`TIME_TAG_END
(1, 
ßve_Æl_u£r
, "cou¡=%d", 
	`FS_HT_COUNT
(
⁄löe_u£r_tbl
))

270 
	`ª°‹e_gamed_¥oc_tôÀ
();

272 
	`push_numbî
(0);

273 
	}
}

275 
	$f_fs_ßve_Æl_d©
()

277 
SET_ALL_ARGS


278 
m≠pög_t
 *
d©s
 = 
	`ARGS
(0)->
u
.
m≠
;

279 
mëhod
 = 
	`ARGS
(1)->
u
.
numbî
 =
SAVE_DIRTY
 ? 
FS_GD_CMD_DB_OBJ_DATA_DIRTY
: 
FS_GD_CMD_DB_OBJ_DATA
;

280 
svÆue_t
 *
k
, *
obj
;

281 
i
;

282 
fs_db_obje˘_ödex_t
 *
ödex
 = 
NULL
;

283 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

285 
	`£çro˘ôÀ
("-gamed %s", "saving dat");

286 
	`TIME_TAG_BEGIN
(1, 
ßve_Æl_d©
)

288 
i
 = 0, 
èbÀ
 = 
d©s
->èbÀ; i <d©s->
èbÀ_size
; i++) {

289 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

290 
k
 = 
ñt
->
vÆues
;

291 
obj
 = 
ñt
->
vÆues
 + 1;

292 i‡(
k
->
ty≥
 =
T_STRING
 && 
obj
->ty≥ =
T_OBJECT
) {

293 i‡(
obj
->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
) {

294 
	`log_de°ru˘ed_obj
("ßvêd©", 
k
, 
obj
->
u
.
ob
);

297 
ödex
 = 
	`fs_db_obje˘_ödex_föd_‹_add
(
obj
->
u
.
ob
);

298 
	`fs_db_obje˘_ßve
(
dbd_c⁄n
, 
mëhod
, 
k
, 
obj
->
u
.
ob
, 
ödex
);

300 
	`Ârötf
(
°dîr
, "error skip saving badÅype dat.%s:%s\n",

301 
	`ty≥_«me
(
k
->
ty≥
),Åy≥_«me(
obj
->type));

302 i‡(
k
->
ty≥
 =
T_STRING
 && 
obj
->ty≥ =
T_NUMBER
) {

303 
	`Ârötf
(
°dîr
, "error skip saving badÅype dat.%s:%d\n",

304 
k
->
u
.
°rög
, 
obj
->u.
numbî
);

309 
	`TIME_TAG_END
(1, 
ßve_Æl_d©
, "cou¡=%d", 
d©s
->
cou¡
)

311 
	`ª°‹e_gamed_¥oc_tôÀ
();

313 
POP_ALL_ARGS


314 
	`push_numbî
(0);

315 
	}
}

318 
	$f_fs_db_sync
()

320 
SET_ALL_ARGS


321 i‡(
is_gamed_°¨t
) {

322 
Êag
 = 
	`ARGS
(0)->
u
.
numbî
;

323 
fs_gd_hódî_t
 
hódî
;

324 
fs_dbi_¨øy_t
 
¨r
;

326 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

327 
	`fs_dbi_¨øy_push_öt
(&
¨r
, 
Êag
);

328 
	`FS_GD_SET_HEADER
(&
hódî
, 
FS_GD_CMD_SYNC
, 
FS_NULL_UID
, 0);

329 
	`fs_gd_£nd_cmd_mbuf
(
dbd_c⁄n
, &
hódî
, &
¨r
.
mbuf
);

330 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

332 
POP_ALL_ARGS


333 
	`push_numbî
(0);

334 
	}
}

336 
	$f_fs_db_gamed_exô
()

338 
SET_ALL_ARGS


339 i‡(
is_gamed_°¨t
) {

340 
fs_gd_hódî_t
 
hódî
;

341 
fs_dbi_¨øy_t
 
¨r
;

342 
	`fs_dbi_¨øy_c⁄°ru˘
(&
¨r
);

343 
	`FS_GD_SET_HEADER
(&
hódî
, 
FS_GD_CMD_GAMED_EXIT
, 
FS_NULL_UID
, 0);

344 
	`fs_gd_£nd_cmd_mbuf
(
dbd_c⁄n
, &
hódî
, &
¨r
.
mbuf
);

345 
	`fs_dbi_¨øy_de°ru˘
(&
¨r
);

347 
POP_ALL_ARGS


348 
	`push_numbî
(0);

349 
	}
}

353 
	$f_fs_db_obje˘_lﬂd
()

356 
ªt
 = -1;

357 
SET_ALL_ARGS


358 i‡(
is_gamed_°¨t
) {

359 
svÆue_t
 *
k
 = 
	`ARGS
(0);

360 
sync
 = 
	`ARGS
(1)->
u
.
numbî
;

361 
sid
 = 
	`ARGS
(2)->
u
.
numbî
;

362 
ªt
 = 
	`fs_db_obje˘_lﬂd
(
dbd_c⁄n
, 
k
, 
sync
, 
sid
);

364 
POP_ALL_ARGS


365 
	`push_numbî
(
ªt
);

366 
	}
}

368 
	$f_fs_dúty_mem_poﬁ_°©
()

370 
SET_ALL_ARGS


371 
	`dúty_mem_poﬁ_°©
();

372 
POP_ALL_ARGS


373 
	}
}

377 
	$f_fs_db_obje˘_ª°‹e
()

379 
SET_ALL_ARGS


380 i‡(
is_gamed_°¨t
) {

381 
sid
;

382 
obje˘_t
 *
obj
 = 
	`ARGS
(0)->
u
.
ob
;

383 
buf„r_t
 *
buf
 = 
	`ARGS
(1)->
u
.buf;

385 
db_key_t
 
key
;

386 
fs_dbi_¨øy_ôî_t
 
ôî
;

387 
fs_gd_hódî_t
 *
hódî
 = (*)
buf
->
ôem
;

389 i‡(
hódî
->
°©
 !
FS_GD_STAT_OK
) {

390 
îr‹
;

392 i‡(
obj
->
Êags
 & 
O_DESTRUCTED
) {

393 
	`log_de°ru˘ed_obj
("ª°‹e", 
NULL
, 
obj
);

394 
îr‹
;

397 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, 
buf
->
ôem
 + (
fs_gd_hódî_t
), buf->
size
 - (fs_gd_header_t));

398 
	`db_key_ªf
(
hódî
, &
ôî
, &
key
);

399 
sid
 = 
ôî
.
tv
->
numbî
.
n
;

400 
	`FS_DBI_ARRAY_ITER_NEXT
(&
ôî
);

401 
	`db_obje˘_unm¨shÆ
(
obj
, &
ôî
);

403 
POP_ALL_ARGS


404 
	`push_numbî
(0);

407 
îr‹
:

408 
POP_ALL_ARGS


409 
	`push_numbî
(-1);

410 
	}
}

412 
	$fs_db_obje˘_ªcv
(
fs_gd_hódî_t
 *
hódî
, *
d©a
, 
size_t
 
Àn
)

414 
fs_dbi_¨øy_ôî_t
 
ôî
;

415 
db_key_t
 
key
;

416 
°©
 = 
hódî
->stat;

417 
sid
;

420 
buf„r_t
 *
buf
 = 
	`Æloˇã_buf„r
((
fs_gd_hódî_t
Ë+ 
Àn
);

421 
	`wrôe_buf„r
(
buf
, 0, (*)
hódî
, (
fs_gd_hódî_t
));

422 
	`wrôe_buf„r
(
buf
, (
fs_gd_hódî_t
), 
d©a
, 
Àn
);

424 
	`FS_DBI_ARRAY_ITER_FIRST
(&
ôî
, 
d©a
, 
Àn
);

425 
	`db_key_ªf
(
hódî
, &
ôî
, &
key
);

426 
sid
 = 
ôî
.
tv
->
numbî
.
n
;

427 
	`FS_DBI_ARRAY_ITER_NEXT
(&
ôî
);

430 i‡(
	`DB_KEY_IS_INT
(&
key
)) {

431 
	`ˇŒ_s¸ùt_func
("rc/db", "⁄_db_obje˘_lﬂd", "iibi", 
°©
, 
	`DB_KEY_INT
(&
key
), 
buf
, 
sid
);

433 
	`ˇŒ_s¸ùt_func
("rc/db", "⁄_db_obje˘_lﬂd", "isbi", 
°©
, 
	`DB_KEY_STR
(&
key
), 
buf
, 
sid
);

436 
	`‰ì_buf„r
(
buf
);

438  
hódî
->
°©
;

439 
	}
}

	@packages/game/fs_db.h

2 #i‚de‡
_FS_DB_H


3 
	#_FS_DB_H


	)

5 
	~"Õc.h
"

6 
	~"Õc_ö˛.h
"

7 
	~"fs_u£r.h
"

8 
	~"fs_ùc.h
"

11 *
	m«me
;

12 
	mödex
;

13 } 
	tfs_obj_ßve_mëa_t
;

15 
	sfs_obj_ßve_v¨s_s
 {

16 
	m˙t
;

17 
fs_obj_ßve_mëa_t
 
	mmëa
[0];

18 } 
	tfs_obj_ßve_v¨s_t
;

20 *
d©_v¨_li°
;

21 *
u£r_v¨_li°
;

23 
fs_obj_ßve_v¨s_t
 *
fs_obj_ßve_v¨s_√w
(
obje˘_t
 *
obj
, *
v¨_li°
);

24 
fs_obj_ßve_v¨s_‰ì
(
fs_obj_ßve_v¨s_t
 *
ßve_v¨s
);

25 
fs_obj_ßve_v¨s_t
 *
fs_obj_ßve_v¨s_ª√w
(fs_obj_ßve_v¨s_à*
ßve_v¨s
, 
obje˘_t
 *
obj
, *
v¨_li°
);

27 
öô_u£r_ßve_v¨
(
obje˘_t
 *
u£r_obj
);

29 
fs_db_obje˘_ªcv
(
fs_gd_hódî_t
 *
hódî
, *
d©a
, 
size_t
 
Àn
);

	@packages/game/fs_hlist.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<as£π.h
>

19 
	~<sys/ty≥s.h
>

20 
	~"fs_mem_poﬁ.h
"

21 
	~"fs_hli°.h
"

22 
	~"hash.h
"

24 
debug_mesßge
 (*, ...);

26 
	göôed
 = 0;

27 
fs_mem‹y_poﬁ_t
 *
	ggpHli°NodePoﬁ
;

30 
	#POINTER_INT
 
öt64_t


	)

32 
	#COMBINE_INT
(
kt
, 
kv
Ë(((
POINTER_INT
)kà<< 32Ë| (POINTER_INT)(kv))

	)

34 
	#MAP_POINTER_HASH
(
x
Ë(((
POINTER_INT
)(xË>> 4Ë^ ((POINTER_INT)(xË& 0xFFFFFFF))

	)

36 
	#KEYHASH
(
kt
, 
kv
, 
m
Ë(
	`MAP_POINTER_HASH
(
	`COMBINE_INT
(kt,kv)Ë& (m->
hashsize
 -1))

	)

38 
	#_equÆ_hkey
(
k
, 
t
, 
v
Ë(k->
ty≥
=à&& k->
vÆ
 =v)

	)

40 
ölöe
 
	$fs_öô_hli°_poﬁ
()

42 
gpHli°NodePoﬁ
 = 
	`fs_¸óã_mem‹y_poﬁ
((
fs_ht_node_t
), 
MAX_HLIST_NODE_NUM
);

43 
öôed
 = 1;

44 
	}
}

46 
ölöe
 
fs_ht_node_t
 *
	$NEW_HT_NODE
()

48 i‡(!
öôed
) {

49 
	`fs_öô_hli°_poﬁ
();

51  
	`fs_mÆloc_node
(
gpHli°NodePoﬁ
);

52 
	}
}

54 
ölöe
 
	$FREE_HT_NODE
(
fs_ht_node_t
 *
node
)

56 
	`fs_‰ì_node
(
gpHli°NodePoﬁ
, 
node
);

57 
	}
}

59 
	$fs_dump_hli°_node
()

61 
	`fs_dump_mem_poﬁ_desc
(
gpHli°NodePoﬁ
, "hashÅableÇode");

62 
	}
}

64 
ölöe
 
	$_ö£π_li°_node
(
fs_obj_hash_t
 *
obh
, 
fs_ht_node_t
 *
node
)

67 i‡(!
obh
->
hód
) {

68 
node
->
Õªv
 = &(
obh
->
hód
);

70 
node
->
 ext
 = 
NULL
;

71 
obh
->
hód
 = 
node
;

72 
obh
->
èû
 = 
node
;

75 
node
->
 ext
 = 
obh
->
hód
;

76 
node
->
Õªv
 = &(
obh
->
hód
);

78 
obh
->
hód
->
Õªv
 = &(
node
->
 ext
);

79 
obh
->
hód
 = 
node
;

81 
	}
}

83 
ölöe
 
	$_ªmove_li°_node
(
fs_obj_hash_t
 *
obh
, 
fs_ht_node_t
 *
node
)

86 i‡(
obh
->
èû
 !
node
) {

87 *(
node
->
Õªv
Ënode->
 ext
;

88 
node
->
 ext
->
Õªv
 =Çode->lprev;

90 *(
node
->
Õªv
Ë
NULL
;

92 i‡(
node
->
Õªv
 =&(
obh
->
hód
)) {

93 
obh
->
èû
 = 
NULL
;

95 
obh
->
èû
 = (
fs_ht_node_t
 *)((*)(
node
->
Õªv
Ë- (*)(&((fs_ht_node_à*)0)->
 ext
));

98 
	}
}

102 
ölöe
 
fs_ht_node_t
 * 
	$fs_ht_föd_node
(
fs_obj_hash_t
 *
obh
, 
h
, 
kt
, 
kv
)

104 
fs_ht_node_t
* 
p
 = 
obh
->
node_hash
[
h
];

105 
fs_ht_key_t
 *
pk
;

107 
p
!=
NULL
) {

108 
pk
 = &
p
->
hkey
;

109 i‡(
	`_equÆ_hkey
(
pk
, 
kt
, 
kv
)) {

110  
p
;

112 
p
 =Ö->
√xt
;

114  
NULL
;

115 
	}
}

119 
ölöe
 
	$fs_ht_ö£π_node
(
fs_obj_hash_t
 *
obh
, 
h
, 
kt
, 
kv
, *
ob
)

121 i‡–!
obh
 || 
	`fs_ht_föd_node
(obh, 
h
, 
kt
, 
kv
Ë!
NULL
 ) {

126 
fs_ht_node_t
* 
p
 = 
	`NEW_HT_NODE
();

127 
	`as£π
(
p
!=
NULL
);

128 
p
->
hkey
.
ty≥
 = 
kt
;

129 
p
->
hkey
.
vÆ
 = 
kv
;

130 
p
->
√xt
 = 
obh
->
node_hash
[
h
] ;

132 
p
->
ob
 = ob ;

133 
obh
->
node_hash
[
h
] = 
p
 ;

134 
obh
->
num
 ++;

136 
	`_ö£π_li°_node
(
obh
, 
p
);

139 
	}
}

142 
ölöe
 
	$fs_ht_ªmove_node
(
fs_obj_hash_t
 *
obh
, 
h
, 
kt
, 
kv
)

144 
fs_ht_node_t
 *
¥e
, *
cur
;

145 
fs_ht_key_t
 *
pk
;

147 
cur
 = 
obh
->
node_hash
[
h
];

148 
¥e
 = 
cur
 ;

149 
cur
!=
NULL
){

150 
pk
 = &
cur
->
hkey
;

151 i‡(
	`_equÆ_hkey
(
pk
, 
kt
, 
kv
)) {

152 i‡–
cur
 =
obh
->
node_hash
[
h
] ) {

153 
obh
->
node_hash
[
h
] = 
cur
->
√xt
 ;

155 
¥e
->
√xt
 = 
cur
->next ;

158 
obh
->
num
--;

159 
	`_ªmove_li°_node
(
obh
, 
cur
);

160 
	`FREE_HT_NODE
(
cur
);

163 
¥e
 = 
cur
 ;

164 
cur
 = cur->
√xt
;

167 
	}
}

170 
fs_obj_hash_t
 *
	$fs_ht_¸óã_hash_èbÀ
(
tblsize
)

172 
x
, 
obj_hash_size
;

173 
fs_obj_hash_t
 *
obh
;

176 
obj_hash_size
 = 1 ;

177 ; 
obj_hash_size
 < 
tblsize
; obj_hash_size *= 2 ) ;

179 
obh
 = (
fs_obj_hash_t
 *Ë
	`mÆloc
((fs_obj_hash_t));

180 
obh
->
hashsize
 = 
obj_hash_size
;

181 
obh
->
node_hash
 = (
fs_ht_node_t
**Ë
	`mÆloc
(
obj_hash_size
 * (fs_ht_node_t *));

182 i‡(!
obh
->
node_hash
) {

183 
	`debug_mesßge
( "\nerror ----------------, ht can't malloc");

186 
obh
->
hód
 = 
NULL
;

187 
obh
->
èû
 = 
NULL
;

188 
obh
->
bÃu
 = 0;

189 
obh
->
num
 = 0;

190 
x
 = 0; x < 
obj_hash_size
; x++) {

191 
obh
->
node_hash
[
x
] = 
NULL
;

194  
obh
;

195 
	}
}

199 
	$fs_ht_£t_Ãu_hli°
(
fs_obj_hash_t
 *
obh
)

201 
obh
->
bÃu
 = 1;

202 
	}
}

205 
	$fs_ht_‰ì_hash_èbÀ
(
fs_obj_hash_t
 *
obh
)

207 
fs_ht_node_t
* 
p
 ;

208 
fs_ht_node_t
* 
cur
;

209 
i
 = 0 ;

210 
i
=0; i<
obh
->
hashsize
; ++i){

211 
p
 = 
obh
->
node_hash
[
i
] ;

212 
p
!=
NULL
){

213 
cur
 = 
p
 ;

214 
p
 =Ö->
√xt
;

215 
	`FREE_HT_NODE
(
cur
);

218 
	`‰ì
(
obh
);

219 
	`‰ì
(
obh
->
node_hash
);

220 
	}
}

223 
	$fs_ht_dump_hash_èbÀ
(
fs_obj_hash_t
 *
obh
)

225 
fs_ht_node_t
* 
p
 ;

226 
fs_ht_node_t
* 
cur
;

227 
i
 = 0 ;

228 
	`debug_mesßge
("\n ========================\n");

229 
	`debug_mesßge
("\¿hashÅbl: %d\n", 
obh
->
hashsize
);

230 
i
=0; i<
obh
->
hashsize
; ++i){

231 
p
 = 
obh
->
node_hash
[
i
] ;

232 i‡(
p
Ë
	`debug_mesßge
("\n---%d :", 
i
);

233 
p
!=
NULL
){

234 
cur
 = 
p
 ;

235 
p
 =Ö->
√xt
;

236 
	`debug_mesßge
–"\n------(%d,%d)", 
cur
->
hkey
.
ty≥
, cur->hkey.
vÆ
);

239 
	`debug_mesßge
("\n ========================\n");

240 
	}
}

242 *
	$fs_ht_föd_key
(
fs_obj_hash_t
 *
obh
, 
kt
, 
kv
)

244 
fs_ht_node_t
 *
n
 = 
	`fs_ht_föd_node
(
obh
, 
	`KEYHASH
(
kt
, 
kv
, obh), kt, kv);

246 i‡(
n
) {

247 i‡(
obh
->
bÃu
) {

248 
	`_ªmove_li°_node
(
obh
, 
n
);

249 
	`_ö£π_li°_node
(
obh
, 
n
);

251  
n
->
ob
;

254  
NULL
;

255 
	}
}

257 
	$fs_ht_ö£π_key
(
fs_obj_hash_t
 *
obh
, 
kt
, 
kv
, *
ob
)

259  
	`fs_ht_ö£π_node
(
obh
, 
	`KEYHASH
(
kt
, 
kv
, obh), kt, kv, 
ob
);

260 
	}
}

262 
	$fs_ht_ªmove_key
(
fs_obj_hash_t
 *
obh
, 
kt
, 
kv
)

264  
	`fs_ht_ªmove_node
(
obh
, 
	`KEYHASH
(
kt
, 
kv
, obh), kt, kv);

265 
	}
}

273 *
	$fs_ht_èû_node_ob
(
fs_obj_hash_t
 *
obh
)

275 i‡(
obh
->
èû
) {

276  
obh
->
èû
->
ob
;

278  
NULL
;

279 
	}
}

282 
	$fs_ht_ªmove_èû_node
(
fs_obj_hash_t
 *
obh
)

284 
kt
, 
kv
;

285 i‡(
obh
->
èû
) {

286 
kt
 = 
obh
->
èû
->
hkey
.
ty≥
;

287 
kv
 = 
obh
->
èû
->
hkey
.
vÆ
;

288 
	`fs_ht_ªmove_node
(
obh
, 
	`KEYHASH
(
kt
, 
kv
, obh), kt, kv);

290 
	}
}

294 
	$fs_ht_node_move_2_hód
(
fs_obj_hash_t
 *
obh
, 
fs_ht_node_t
 *
node
)

297 
	}
}

	@packages/game/fs_hlist.h

1 #i‚de‡
_OBJECT_H_


2 
	#_OBJECT_H_


	)

5 
	~"hash.h
"

6 
	~<as£π.h
>

8 
	#MAX_HLIST_NODE_NUM
 (1024 * 1024)

	)

11 
	mT_HT_KEY_NULL
 = 0,

12 
	mT_HT_KEY_INT
,

13 
	mT_HT_KEY_ATOM
,

16 
	sfs_ht_key_s
 {

17 
	mty≥
;

18 
	mvÆ
;

19 } 
	tfs_ht_key_t
;

22 
	sfs_ht_node_s
{

23 
fs_ht_key_t
 
	mhkey
;

24 * 
	mob
;

25 
fs_ht_node_s
 *
	m√xt
;

27 
fs_ht_node_s
 *
	m ext
;

28 
fs_ht_node_s
 **
	mÕªv
;

29 }
	tfs_ht_node_t
;

31 
	sfs_obj_hash_s
{

32 
fs_ht_node_t
 *
	mhód
;

33 
fs_ht_node_t
 *
	mèû
;

34 
fs_ht_node_t
 ** 
	mnode_hash
;

35 
	mhashsize
;

36 
	mnum
;

37 
	mbÃu
;

38 }
	tfs_obj_hash_t
;

41 
fs_obj_hash_t
 *
fs_ht_¸óã_hash_èbÀ
(
tblsize
);

44 
fs_ht_‰ì_hash_èbÀ
(
fs_obj_hash_t
 *
obh
);

47 
fs_ht_dump_hash_èbÀ
(
fs_obj_hash_t
 *
obh
);

49 *
fs_ht_föd_key
(
fs_obj_hash_t
 *
obh
, 
kt
, 
kv
);

50 
fs_ht_ö£π_key
(
fs_obj_hash_t
 *
obh
, 
kt
, 
kv
, *
ob
);

51 
fs_ht_ªmove_key
(
fs_obj_hash_t
 *
obh
, 
kt
, 
kv
);

52 
fs_ht_ªmove_èû_node
(
fs_obj_hash_t
 *
obh
);

53 
fs_ht_£t_Ãu_hli°
(
fs_obj_hash_t
 *
obh
);

54 
fs_dump_hli°_node
();

56 
	#HT_SET_KEY_INT
(
k
, 
i
) do {\

57 (
k
)->
ty≥
 = 
T_HT_KEY_INT
; \

58 (
k
)->
vÆ
 = 
i
; \

59 } 0)

	)

61 
	#HT_SET_KEY_STR
(
k
, 
i
) do {\

62 (
k
)->
ty≥
 = 
T_HT_KEY_ATOM
; \

63 (
k
)->
vÆ
 = 
	`SYS_GET_STR_ATOM
(
i
); \

64 } 0)

	)

66 
	#FS_HT_FIND_ATOM
(
obh
, 
k
Ë
	`fs_ht_föd_key
(obh, 
T_HLIST_KEY_ATOM
, k)

	)

67 
	#FS_HT_INSERT_ATOM
(
obh
, 
k
, 
ob
Ë
	`fs_ht_ö£π_key
(obh, 
T_HLIST_KEY_ATOM
, k, ob)

	)

68 
	#FS_HT_REMOVE_ATOM
(
obh
, 
k
Ë
	`fs_ht_ªmove_key
(obh, 
T_HLIST_KEY_ATOM
, k)

	)

70 
	#FS_HT_FIND_INT
(
obh
, 
k
Ë
	`fs_ht_föd_key
(obh, 
T_HT_KEY_INT
, k)

	)

71 
	#FS_HT_INSERT_INT
(
obh
, 
k
, 
ob
Ë
	`fs_ht_ö£π_key
(obh, 
T_HT_KEY_INT
, k, ob)

	)

72 
	#FS_HT_REMOVE_INT
(
obh
, 
k
Ë
	`fs_ht_ªmove_key
(obh, 
T_HT_KEY_INT
, k)

	)

74 
	#FS_HT_FIND
(
obh
, 
k
Ë
	`fs_ht_föd_key
(obh, k->
ty≥
, k->
vÆ
)

	)

75 
	#FS_HT_INSERT
(
obh
, 
k
, 
ob
Ë
	`fs_ht_ö£π_key
(obh, k->
ty≥
, k->
vÆ
, ob)

	)

76 
	#FS_HT_REMOVE
(
obh
, 
k
Ë
	`fs_ht_ªmove_key
(obh, k->
ty≥
, k->
vÆ
)

	)

78 
	#FS_HT_COUNT
(
obh
Ë(obh->
num
)

	)

80 
	#FOR_EACH_HTABLE_OB
(
obh
, 
ob
) \

81 i‡–
obh
 && obh->
hód
) \

82  
ob
 = 
obh
->
hód
; ob; ob = ob->
 ext
)

	)

	@packages/game/fs_int_array.h

1 #i‚de‡
_FS_INT_ARRAY_H_


2 
	#_FS_INT_ARRAY_H_


	)

4 
	#INT_ARRAY_INI_SIZE
 8

	)

9 
	#INIT_INT_ARRAY
(
v
, 
s
) \

11 
v
 = (
fs_öt_¨øy_t
 *Ë
	`ˇŒoc
(1, (fs_int_array_t)); \

12 
v
->
öç
 = (*Ë
	`ˇŒoc
(
s
, ()); \

13 
v
->
size
 = 
s
; \

14 
v
->
n
 = 0; \

15 } 0)

	)

18 
	#RESET_INT_ARRAY
(
v
) \

20 i‡(
v
Ëv->
n
 = 0; \

21 } 0)

	)

24 
	#ADD_INT_ARRAY
(
v
, 
e
) \

26 i‡(
v
) { \

27 i‡(
v
->
n
 >(v->
size
 - 1)) { \

28 
v
->
size
 = (v->sizê+ 
INT_ARRAY_INI_SIZE
); \

29 
v
->
öç
 = (*Ë
	`ªÆloc
(v->öç, v->
size
 * ()); \

31 
v
->
öç
[v->
n
++] = 
e
; \

32 
v
->
öç
[v->
n
] = 0; \

34 } 0)

	)

40 
	#SUB_INT_ARRAY
(
¨r
, 
vÆ
) { \

41 i‡(
¨r
 &&áº->
n
) { \

42 
ödex
, 
fix
 = -1; \

43 
ödex
 = 
¨r
->
n
 - 1; index >= 0; index--) { \

44 i‡(
¨r
->
öç
[
ödex
] =
vÆ
) { \

45 
fix
 = 
ödex
; \

49 i‡(
fix
 >= 0) { \

50 
ödex
 = 
fix
; index <
¨r
->
n
 - 1; index++) { \

51 
¨r
->
öç
[
ödex
] =árr->intp[index + 1]; \

53 
¨r
->
n
--; \

56 }

	)

58 
	#FREE_INT_ARRAY
(
v
) { \

59 i‡(
v
) { \

60 
	`‰ì
(
v
->
öç
); \

61 
	`‰ì
(
v
); \

63 }

	)

66 
	sfs_öt_¨øy_s
 {

67 
	msize
;

68 
	mn
;

69 *
	möç
;

70 } 
	tfs_öt_¨øy_t
;

72 
ã°_¨øy
();

	@packages/game/fs_item.c

1 
	~"fs_ôem.h
"

2 
	~"fs_hli°.h
"

3 
	~"fs_mem_poﬁ.h
"

4 
	~"fs_comm⁄.h
"

5 
	~"fs_Õc_›.h
"

6 
	~"fs_log.h
"

7 
	~"fs_ch¨_ob.h
"

9 
	$fs_sys_öô_ôem_moduÀ
(
max
, 
°¨tid
, 
ídid
)

11 
	`fs_öô_ch¨_ob
(
T_CHAR_ITEM
, 
max
, (
fs_ôem_obje˘_t
), 
°¨tid
, 
ídid
);

12 
	}
}

15 
	$fs_√w_ôem
(*
∑th
)

17 
fs_ch¨_ob_t
 * 
cob
;

18 
fs_Õc_obje˘_t
 * 
oob
;

20 
cob
 = 
	`fs_√w_ch¨_ob
(
T_CHAR_ITEM
, 
∑th
, 
NULL
);

22 i‡(
cob
) {

23 
oob
 = 
	`CHAR_OB_ORIG_OB
(
cob
);

26 
	`ˇŒ_obje˘_func
(
oob
->
ob
, "InôIãm", "i", 
	`CHAR_OB_ID
(
cob
));

28  
	`CHAR_OB_ID
(
cob
);

31 
	}
}

38 
	$fs_ª°‹e_ôem
(*
∑th
, 
m≠pög_t
 *
m
)

40 
fs_ch¨_ob_t
 * 
cob
;

41 
fs_Õc_obje˘_t
 * 
oob
;

43 
cob
 = 
	`fs_√w_ch¨_ob
(
T_CHAR_ITEM
, 
∑th
, 
m
);

45 i‡(
cob
) {

47 
oob
 = 
	`CHAR_OB_ORIG_OB
(
cob
);

48 
	`ˇŒ_obje˘_func
(
oob
->
ob
, "InôIãm", "i", 
	`CHAR_OB_ID
(
cob
));

49  
	`CHAR_OB_ID
(
cob
);

52 
	}
}

54 
	$fs_de°roy_ôem
(
ôemid
)

56 
	`fs_‰ì_ch¨_ob
(
T_CHAR_ITEM
, 
ôemid
);

57 
	}
}

59 
m≠pög_t
 *
	$fs_gë_ôem_m≠
(
ôemid
, 
ßved
)

61 
fs_ch¨_ob_t
 * 
cob
;

62 
cob
 = 
	`fs_föd_ch¨_ob
(
T_CHAR_ITEM
, 
ôemid
);

63 i‡(!
cob
) {

64  
NULL
;

66 i‡(
ßved
) {

67  
cob
->
ßve_m≠
;

69  
cob
->
ãmp_m≠
;

71 
	}
}

73 
ölöe
 
	$is_ôem_⁄löe
(
ôemid
)

75 if(
	`fs_föd_ch¨_ob
(
T_CHAR_ITEM
, 
ôemid
)) {

79 
	}
}

84 
	$f_√w_ôem
()

86 
SET_ALL_ARGS


87 
ôem
 = 
	`fs_√w_ôem
(
	`ARGS
(0)->
u
.
°rög
);

88 
POP_ALL_ARGS


90 
	`push_numbî
(
ôem
);

91 
	}
}

93 
	$f_ª°‹e_ôem
()

95 
SET_ALL_ARGS


96 
ôem
 = 
	`fs_ª°‹e_ôem
(
	`ARGS
(0)->
u
.
°rög
, ARGS(1)->u.
m≠
);

97 
POP_ALL_ARGS


99 
	`push_numbî
(
ôem
);

100 
	}
}

105 
	#SET_PERM_VAR
 { \

106 
SET_ALL_ARGS
 \

107 
	`fs_£t_ßve_m≠
(
T_CHAR_ITEM
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1), ARGS(2)); \

108 
POP_ALL_ARGS
 \

109 }

	)

111 
	#GET_PERM_VAR
 { \

112 
SET_ALL_ARGS
 \

113 
svÆue_t
 *
v
 = 
	`fs_gë_ßve_m≠
(
T_CHAR_ITEM
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

114 
POP_ALL_ARGS
 \

115 
	`push_svÆue
(
v
); \

116 }

	)

118 
	#SET_TEMP_VAR
 { \

119 
SET_ALL_ARGS
 \

120 
	`fs_£t_ãmp_m≠
(
T_CHAR_ITEM
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1), ARGS(2)); \

121 
POP_ALL_ARGS
 \

122 }

	)

124 
	#GET_TEMP_VAR
 { \

125 
SET_ALL_ARGS
 \

126 
svÆue_t
 *
v
 = 
	`fs_gë_ãmp_m≠
(
T_CHAR_ITEM
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

127 
POP_ALL_ARGS
 \

128 
	`push_svÆue
(
v
); \

129 }

	)

131 
	#SET_VAR
 { \

132 
SET_ALL_ARGS
 \

133 
	`fs_£t_m≠
(
T_CHAR_ITEM
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1), ARGS(2)); \

134 
POP_ALL_ARGS
 \

135 }

	)

137 
	#GET_VAR
 { \

138 
SET_ALL_ARGS
 \

139 
svÆue_t
 *
v
 = 
	`fs_gë_ßve_m≠
(
T_CHAR_ITEM
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

140 i‡(
	`IS_NULL
(
v
Ë|| 
	`IS_LPC_UNDEF
(v)) { \

141 
v
 = 
	`fs_gë_ãmp_m≠
(
T_CHAR_ITEM
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

143 
POP_ALL_ARGS
 \

144 
	`push_svÆue
(
v
); \

145 }

	)

148 
	$f_SëIãmSave
()

150 
SET_PERM_VAR


151 
	}
}

153 
	$f_GëIãmSave
()

155 
GET_PERM_VAR


156 
	}
}

161 
	$f_SëIãmTemp
()

163 
SET_TEMP_VAR


164 
	}
}

166 
	$f_GëIãmTemp
()

168 
GET_TEMP_VAR


169 
	}
}

173 
	$f_SëIãm
()

175 
SET_VAR


176 
	}
}

178 
	$f_GëIãm
()

180 
GET_VAR


181 
	}
}

185 
	$f_de°roy_ôem
()

187 
SET_ALL_ARGS


188 
	`fs_de°roy_ôem
(
	`ARGS
(0)->
u
.
numbî
);

189 
POP_ALL_ARGS


190 
	}
}

192 
	$f_is_ôem_⁄löe
()

194 
SET_ALL_ARGS


195 
ªt
 = 
	`is_ôem_⁄löe
(
	`ARGS
(0)->
u
.
numbî
);

196 
POP_ALL_ARGS


197 
	`push_numbî
(
ªt
);

198 
	}
}

201 
	$f_gë_ôem_m≠
()

203 
SET_ALL_ARGS


204 
m≠pög_t
 *
m
 = 
	`fs_gë_ôem_m≠
(
	`ARGS
(0)->
u
.
numbî
, ARGS(1)->u.number);

205 
POP_ALL_ARGS


207 i‡(!
m
) {

208 
	`push_svÆue
(&
c⁄°0u
);

211 
	`push_m≠pög
(
m
);

212 
	}
}

	@packages/game/fs_item.h

1 #i‚de‡
_FS_ITEM_H_


2 
	#_FS_ITEM_H_


	)

4 
	~"fs_ch¨_ob.h
"

5 
	~"fs_comm⁄.h
"

6 
	~"fs_¥›_key.h
"

8 
	sfs_ôem_obje˘_s
 {

10 } 
	gfs_ôem_obje˘_t
;

13 
fs_sys_öô_ôem_moduÀ
(
max
, 
°¨tid
, 
ídid
);

15 
fs_√w_ôem
(*
ty≥
);

17 
fs_gíî©e_ôem
(
m≠pög_t
 *
m
);

19 
fs_de°roy_ôem
(
ôemid
);

21 
ölöe
 
is_ôem_⁄löe
(
ôemid
);

	@packages/game/fs_lpcob_table.c

11 
	~"fs_Õcob_èbÀ.h
"

12 
	~"fs_©om.h
"

13 
	~"fs_Õc_›.h
"

14 
	~"fs_log.h
"

15 
	~"fs_comm⁄.h
"

16 
	~"c⁄åib.h
"

18 
	~"fs_Ωc_Õc.h
"

19 
	~"fs_u£r.h
"

20 
	~"fs_d©a_ßve.h
"

23 
	#SåHash
(
s
Ë(
	`whash°r
((s), 20))

	)

24 
	#CHAR_OB_HASH_SIZE
 2000

	)

26 
	gbInôed
 = 0;

27 
fs_ch¨_ob_htbl_t
 *
	ggpCh¨ObTbl
;

31 
fs_Õc_obje˘_t
* 
	$NEW_CHAR_OBJECT
()

33 
fs_Õc_obje˘_t
 * 
cob
 = 
	`ˇŒoc
(1, (fs_lpc_object_t));

36  
cob
;

37 
	}
}

47 
ölöe
 
	$_öô_Õcob_èbÀ
(
hsize
)

49 
i
;

50 
hashsize
 = 1;

51 ; 
hashsize
 < 
hsize
; hashsize *= 2) ;

53 
gpCh¨ObTbl
 = (
fs_ch¨_ob_htbl_t
 *Ë
	`mÆloc
((fs_char_ob_htbl_t));

55 
gpCh¨ObTbl
->
htbl
 = (
fs_Õc_obje˘_t
 **)
	`mÆloc
(
hashsize
 * (fs_lpc_object_t *));

57 
i
 = 0; i < 
hashsize
; i++) {

58 
gpCh¨ObTbl
->
htbl
[
i
] = 
NULL
;

60 
gpCh¨ObTbl
->
hsize
 = 
hashsize
;

61 
gpCh¨ObTbl
->
num
 = 0;

62 
	}
}

64 
ölöe
 
fs_Õc_obje˘_t
* 
	$_föd_Õc_obje˘
(
obje˘_t
* 
ob
, 
h
)

66 
fs_Õc_obje˘_t
 *
cur
;

67 
hash
 = 
h
 & (
gpCh¨ObTbl
->
hsize
 - 1);

69 
cur
 = 
gpCh¨ObTbl
->
htbl
[
hash
];

71 
cur
) {

72 i‡–
ob
 =
cur
->ob \

73 || (
	`°æí
(
cur
->
ob
->
«me
) == strlen(ob->name) \

74 && !
	`°rcmp
(
cur
->
ob
->
«me
, ob->name)) ) {

75  
cur
;

78 i‡(
cur
->
ob
->
Êags
 & 
O_DESTRUCTED
) {

80 
	`log_îr‹
–
MOD_CHAR_OB
, "ob i†de°roy: %s", 
cur
->
ob
->
«me
);

82 
cur
 = cur->
√xt
;

84  
NULL
;

85 
	}
}

87 
ölöe
 
	$_ö£π_Õc_obje˘
(
fs_Õc_obje˘_t
* 
cob
, 
h
)

89 
hash
 = 
h
 & (
gpCh¨ObTbl
->
hsize
 - 1);

91 i‡(!
gpCh¨ObTbl
->
htbl
[
hash
]) {

92 
gpCh¨ObTbl
->
htbl
[
hash
] = 
cob
;

94 
cob
->
√xt
 = 
gpCh¨ObTbl
->
htbl
[
hash
];

95 
gpCh¨ObTbl
->
htbl
[
hash
] = 
cob
;

97 
	}
}

99 
ölöe
 
	$_öô_Õc_obje˘
(
fs_Õc_obje˘_t
 *
cob
, 
obje˘_t
* 
ob
)

101 
svÆue_t
 *
v
;

103 
cob
->
ob
 = ob;

106 i‡(
cob
->
ßve_m≠
) {

107 
	`‰ì_m≠pög
(
cob
->
ßve_m≠
);

108 
cob
->
ßve_m≠
 = 
NULL
;

112 
v
 = 
	`ˇŒ_obje˘_func
(
ob
, "BaseSaveMap", "");

113 i‡–
v
 && 
	`IS_LPC_MAP
(v) ) {

114 
cob
->
ßve_m≠
 = 
	`dìp_c›y_m≠pög
(
	`LPC_MAP_VALUE
(
v
));

117 
v
 = 
	`ˇŒ_obje˘_func
(
ob
, "SaveMap", "");

118 i‡–
v
 && 
	`IS_LPC_MAP
(v) ) {

119 i‡(
cob
->
ßve_m≠
) {

120 
cob
->
ßve_m≠
 = 
	`add_m≠pög
(cob->ßve_m≠, 
	`LPC_MAP_VALUE
(
v
));

122 
cob
->
ßve_m≠
 = 
	`dìp_c›y_m≠pög
(
	`LPC_MAP_VALUE
(
v
));

125 
	}
}

127 
ölöe
 
fs_Õc_obje˘_t
* 
	$fs_föd_Õc_obje˘
(*
∑th
)

129 
obje˘_t
 *
ob
 = 
NULL
;

130 
fs_Õc_obje˘_t
 *
cob
;

131 
h
;

133 i‡(!
bInôed
)

135 
	`_öô_Õcob_èbÀ
(
CHAR_OB_HASH_SIZE
);

136 
bInôed
 = 1;

139 
ob
 = 
	`föd_obje˘
(
∑th
);

140 i‡(
ob
 =
NULL
) {

141 
	`log_îr‹
–
MOD_CHAR_OB
, "ˇn'àföd ob: %s", 
∑th
 );

142  
NULL
;

145 
h
 = 
	`SåHash
(
ob
->
«me
);

146 
cob
 = 
	`_föd_Õc_obje˘
(
ob
, 
h
);

148 i‡(!
cob
) {

149 
cob
 = 
	`NEW_CHAR_OBJECT
();

150 
	`_öô_Õc_obje˘
(
cob
, 
ob
);

151 
	`_ö£π_Õc_obje˘
(
cob
, 
h
);

153  
cob
;

154 
	}
}

157 
	$fs_upd©e_Õc_obje˘
(
obje˘_t
 *
ob
)

159 
fs_Õc_obje˘_t
 *
cob
;

161 i‡(!
bInôed
 || !
ob
 || (ob->
Êags
 & 
O_DESTRUCTED
))

166 
	`fs_u£r_obje˘_upd©e
–
ob
 );

168 
	`fs_Ωc_Õc_moduÀ_upd©e
(
ob
);

169 
	`fs_db_obje˘_moduÀ_upd©e
(
ob
);

171 
cob
 = 
	`_föd_Õc_obje˘
(
ob
, 
	`SåHash
(ob->
«me
));

173 i‡(
cob
) {

174 
	`_öô_Õc_obje˘
(
cob
, 
ob
);

176 
	}
}

180 
	$f_upd©e_Õc_obje˘
()

182 
SET_ALL_ARGS


183 
	`fs_upd©e_Õc_obje˘
(
	`ARGS
(0)->
u
.
ob
);

184 
POP_ALL_ARGS


185 
	}
}

	@packages/game/fs_lpcob_table.h

2 #i‚de‡
_FS_LPCOB_TABLE_H_


3 
	#_FS_LPCOB_TABLE_H_


	)

5 
	~"fs_hli°.h
"

6 
	~"fs_mem_poﬁ.h
"

7 
	~"Õc_ö˛.h
"

9 
	sfs_Õc_obje˘_s
 {

10 
obje˘_t
 *
	mob
;

12 
m≠pög_t
 *
	mßve_m≠
;

14 
fs_Õc_obje˘_s
 *
	m√xt
;

15 } 
	tfs_Õc_obje˘_t
;

17 
	sfs_ch¨_ob_htbl_s
 {

18 
fs_Õc_obje˘_t
 ** 
	mhtbl
;

19 
	mnum
;

20 
	mhsize
;

21 } 
	tfs_ch¨_ob_htbl_t
;

23 
fs_upd©e_Õc_obje˘
(
obje˘_t
 *);

24 
fs_Õc_obje˘_t
* 
fs_föd_Õc_obje˘
(*
∑th
);

	@packages/game/fs_main.c

8 
	~"fs_maö.h
"

9 
	~"fs_c⁄fig.h
"

10 
	~"fs_Ωc_Õc.h
"

11 
	~"fs_Ωc_c.h
"

12 
	~"fs_dbi.h
"

13 
	~"fs_ˇŒout.h
"

14 
	~"fs_u£r.h
"

15 
	~"hâp_Õc.h
"

16 
	~"fs_db.h
"

17 
	~"fs_ˇŒout.h
"

18 
	~"fs_cuæ.h
"

19 
	~"fs_dns.h
"

22 
	~"fs_comm.h
"

23 
	~"fs_ùc.h
"

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<as£π.h
>

29 
	~<uni°d.h
>

30 
	~<√töë/ö.h
>

31 
	~<sys/sockë.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<¨∑/öë.h
>

34 
	~<time.h
>

36 
	~"fs_comm⁄.h
"

37 
	~"fs_≈c.h
"

38 
	~"fs_summ⁄.h
"

39 
	~"fs_ôem.h
"

40 
	~"fs_log.h
"

41 
	~"fs_d©a_ßve.h
"

42 
	~"fs_ch¨_ob.h
"

43 
	~"fs_hli°.h
"

45 c⁄° 
	gbacklog
 = 15;

46 
size_t
 
	gmax_outbuf
 = (1.8 * 1024 * 1024 * 1024);

48 *
	g√td_ù
 = "127.0.0.1";

49 
	gdeÁu…_√td_p‹t
 = 60001;

51 *
	gdbd_ù
 = "127.0.0.1";

52 
	gdeÁu…_dbd_p‹t
 = 60010;

54 
fs_√t_c⁄√˘i⁄_t
 *
	g√td_c⁄n
 = 
NULL
;

55 
fs_√t_c⁄√˘i⁄_t
 *
	gdbd_c⁄n
 = 
NULL
;

57 
fs_√t_mbuf_t
 *
	gdb_√tbuf
 = 
NULL
;

59 
	gis_gamed_°¨t
 = 0;

60 
	gg_sync_dbd_fd
 = -1;

61 
evhâp
 *
	gg_hâpd
 = 
NULL
;

62 
time_t
 
	gœ°_±o_time°amp_ˇche
 = 0;

64 
fs_Ωc_Õc_t
 *
	ggamed_Ωc_Õc
 = 
NULL
;

66 
	#NETD_MBUF
(
c⁄n
Ë(&((
fs_ng_buf_t
*)c⁄n->
ud©a
)->
mbuf
)

	)

68 
	#PACKET_SIZE_PER_FRAME
 100

69 

	)

71 
öô_c⁄√˘
();

72 
shutdown_£rvî
();

77 
evít_ba£
 * 
	gev_ba£
;

95 
ölöe
 
fs_evtimî_t
* 
	$√w_evtimî_d©a
()

98  (
fs_evtimî_t
*)
	`MALLOC
( ( fs_evtimer_t ));

99 
	}
}

101 
ölöe
 
	$‰ì_evtimî_d©a
(
fs_evtimî_t
* 
evtimî
)

103 
	`FREE
–
evtimî
 ) ;

104 
	}
}

106 
	$timî_h™dÀr
(
fd
, 
ev√t
, *
¨g
)

108 
fs_evtimî_t
* 
evtimî_d©a
 = (fs_evtimî_t*)
¨g
;

110 i‡–
evtimî_d©a
->
ty≥
 =
TIMER_PERSIST
)

112 
	`add_timî
(
evtimî_d©a
->
≥riod
,Évtimî_d©a->
ˇŒback
,Évtimî_d©a->
¨g
);

115 (*
evtimî_d©a
->
ˇŒback
)”vtimî_d©a->
¨g
);

118 
	`‰ì_evtimî_d©a
–
evtimî_d©a
 );

119 
	}
}

122 
	$sig«l_dól
( )

142 
	}
}

145 
	$öô_libevít
()

148 
ev_ba£
 = 
	`evít_öô
();

150 
	`evít_ba£_¥i‹ôy_öô
(
ev_ba£
, 
FS_EV_PRIORITY_MAX
);

153 
	`sig«l_dól
();

156 
	}
}

163 
add_timî
(
timevÆ
 
≥riod
, (*
ˇŒback
)(*), * 
¨g
)

165 
evít
 * 
timî
;

166 
fs_evtimî_t
* 
evtimî_d©a
;

169 
evtimî_d©a
 = 
	`√w_evtimî_d©a
();

171 
timî
 = &
evtimî_d©a
->timer;

174 
evtimî_d©a
->
ty≥
 = 
TIMER_PERSIST
;

175 
evtimî_d©a
->
≥riod
.
tv_£c
 =Öeriod.tv_sec;

176 
evtimî_d©a
->
≥riod
.
tv_u£c
 =Öeriod.tv_usec;

177 
evtimî_d©a
->
ˇŒback
 = callback;

178 
evtimî_d©a
->
¨g
 =árg;

181 
	`evtimî_£t
(
timî
, 
timî_h™dÀr
, 
evtimî_d©a
);

184 
	`evít_¥i‹ôy_£t
(
timî
, 
FS_EV_PRIORITY_REMARK1
);

185 
	`evtimî_add
(
timî
, &
≥riod
);

189 
	}
}

196 
add_timî_⁄˚
(
timevÆ
 
≥riod
, (*
ˇŒback
)(*), * 
¨g
)

198 
evít
 * 
timî
;

199 
fs_evtimî_t
* 
evtimî_d©a
;

202 
evtimî_d©a
 = 
	`√w_evtimî_d©a
();

204 
timî
 = &
evtimî_d©a
->timer;

207 
evtimî_d©a
->
ty≥
 = 
TIMER_ONCE
;

208 
evtimî_d©a
->
≥riod
.
tv_£c
 =Öeriod.tv_sec;

209 
evtimî_d©a
->
≥riod
.
tv_u£c
 =Öeriod.tv_usec;

210 
evtimî_d©a
->
ˇŒback
 = callback;

211 
evtimî_d©a
->
¨g
 =árg;

214 
	`evtimî_£t
(
timî
, 
timî_h™dÀr
, 
evtimî_d©a
);

215 
	`evít_¥i‹ôy_£t
(
timî
, 
FS_EV_PRIORITY_CAL
);

217 
	`evtimî_add
(
timî
, &
≥riod
);

220 
	}
}

222 
	$ã°_timî
(* 
¨g
)

224 
this_time
 = (Ë
	`time
(
NULL
);

225 
	`¥ötf
–"I¿ã°_timî %d\n", 
this_time
 );

226 
	}
}

228 
	$ã°_timî_⁄˚
(* 
¨g
)

230 
this_time
 = (Ë
	`time
(
NULL
);

231 
	`¥ötf
–"I¿ã°_timî_⁄˚ %d\n", 
this_time
 );

232 
	}
}

237 
evÆ_co°
;

238 
max_co°
;

240 
	$maö_lo›
()

242 
ªt
;

243 
this_time
 = (Ë
	`time
(
NULL
);

246 
	`¥ötf
–"Begö LOOPÅimê%d\n", 
this_time
 );

251 
max_co°
 = 
MAX_COST
;

252 
evÆ_co°
 = 
max_co°
;

255 
ªt
 = 
	`evít_di•©ch
();

257 
	`¥ötf
("ªà%d\n", 
ªt
);

260 
	}
}

263 
	$f_maö_lo›
()

265 
	`maö_lo›
();

266 
	}
}

270 
	$a˘ive_˛o£_Æl_˛õ¡
()

272 
	}
}

274 
	$√td_öput_√w
(
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

276 
	`log_öfo
(
MOD_GAMED
, "√tdÇew u£∏uid:%d", 
hódî
->
u
.
uid
);

277 
	}
}

279 
√td_ªmove
(
fs_uid_t
 
uid
);

280 
	$√td_öput_ªmove
(
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

282 
	`√td_ªmove
(
hódî
->
u
.
uid
);

283 
	`log_öfo
(
MOD_GAMED
, "√td clo£Çew c⁄√˘i⁄:%d", 
hódî
->
u
.
uid
);

284 
	`ˇŒ_s¸ùt_func
("cmd/logö_gamed", "˛õ¡_c⁄√˘i⁄_˛o£_cb", "i", 
hódî
->
u
.
uid
);

285 
	}
}

287 
ölöe
 
	$fs_Ωc_c_ˇŒ
(
fs_ng_cmd_t
 
cmd
, 
fs_uid_t
 *
uidp
, 
uidc
, 
fs_¥Ÿocﬁ_id_t
 
pid
, *
vÆue
)

289 
fs_uid_t
 
uid
;

290 
fs_Ωc_fun˘i⁄_t
 *
fun
 = 
	`fs_Ωc_fun˘i⁄_©
(
gamed_Ωc_Õc
->
fun˘i⁄_èbÀ
, 
pid
);

291 i‡(
fun
 =
NULL
) {

292 
	`log_îr‹
(
MOD_GAMED
, "îr‹!Çÿsuch cÑp¯ˇŒ.pid:%d", 
pid
);

296 
	`fs_ng_buf_ª£t
(
√td_c⁄n
->
ud©a
);

297 
fs_mbuf_t
 *
mbuf
 = 
	`NETD_MBUF
(
√td_c⁄n
);

299 i‡(
cmd
 =
FS_NG_MULTICAST
) {

306 
	`FS_MBUF_ENQ
(
mbuf
, 
uidp
, 
uidc
 * (
fs_uid_t
));

307 
uid
 = 
uidc
;

309 
uid
 = *
uidp
;

312 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
pid
, 
fs_¥Ÿocﬁ_id_t
);

313 i‡(
	`fs_Ωc_c_∑ck
(
fun
, 
vÆue
, 
mbuf
)) {

317 
	`fs_ng_buf_£nd
(
√td_c⁄n
->
ud©a
, 
cmd
, 
uid
,Çetd_conn);

319 
	}
}

321 
	$fs_Ωc_c_mu…iˇ°
(
fs_uid_t
 *
uidp
, 
uidc
, 
fs_¥Ÿocﬁ_id_t
 
pid
, *
vÆue
)

323  
	`fs_Ωc_c_ˇŒ
(
FS_NG_MULTICAST
, 
uidp
, 
uidc
, 
pid
, 
vÆue
);

324 
	}
}

326 
	$fs_Ωc_c_uniˇ°
(
fs_uid_t
 
uid
, 
fs_¥Ÿocﬁ_id_t
 
pid
, *
vÆue
)

328  
	`fs_Ωc_c_ˇŒ
(
FS_NG_UNICAST
, &
uid
, 1, 
pid
, 
vÆue
);

329 
	}
}

331 
	$fs_Ωc_c_brﬂdˇ°
(
fs_¥Ÿocﬁ_id_t
 
pid
, *
vÆue
)

333 
fs_uid_t
 
uid
 = 
FS_BROADCAST_UID
;

334  
	`fs_Ωc_c_ˇŒ
(
FS_NG_BROADCAST
, &
uid
, 1, 
pid
, 
vÆue
);

335 
	}
}

337 
	$fs_game_logö_ok
(
fs_uid_t
 
uid
, 
u£∫um
 )

339 
	`fs_ng_£nd_cmd
(
√td_c⁄n
, 
FS_NG_LOGIN_OK
, 
uid
, 
NULL
, 0);

340 
	}
}

342 
	$fs_gamed_˛o£_uid_c⁄√˘i⁄
(
fs_uid_t
 
uid
)

344 
	`fs_ng_£nd_cmd
(
√td_c⁄n
, 
FS_NG_REMOVE
, 
uid
, 
NULL
, 0);

346 
	}
}

349 
	$√td_öput_u£r
(
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

351 
fs_öbuf_t
 
öbuf
;

352 
	`FS_INBUF_INIT
(&
öbuf
, 
buf
, 
Àn
);

353 
	`fs_Ωc_u£r_di•©ch
(
gamed_Ωc_Õc
, 
hódî
->
u
.
uid
, &
öbuf
);

354 
	}
}

356 
	$√td_öput_Ωc
(
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

358 
fs_öbuf_t
 
öbuf
;

359 
	`FS_INBUF_INIT
(&
öbuf
, 
buf
, 
Àn
);

360 
	`fs_Ωc_di•©ch
(
gamed_Ωc_Õc
, 
hódî
->
u
.
uid
, &
öbuf
);

361 
	}
}

365 
	$√td_öput
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
, *
ud©a
)

368 
hódî
->
cmd
) {

369 
FS_NG_NEW
:

370 
	`√td_öput_√w
(
hódî
, 
buf
, 
Àn
);

372 
FS_NG_REMOVE
:

373 
	`√td_öput_ªmove
(
hódî
, 
buf
, 
Àn
);

375 
FS_NG_USER
:

376 
	`√td_öput_u£r
(
hódî
, 
buf
, 
Àn
);

378 
FS_NG_RPC
:

379 
	`√td_öput_Ωc
(
hódî
, 
buf
, 
Àn
);

382 
	`log_îr‹
(
MOD_GAMED
, "√td i≈uàunknow cmd:%d", 
hódî
->
cmd
);

384 
	}
}

386 
	$√td_c⁄√˘i⁄_ªcv
(
buf„ªvít
 *
bu„v
, *
¨g
)

389 
œ°_±o_time°amp_ˇche
 = 
	`time
(
NULL
);

392 
size_t
 
bufsz
 = 0;

393 
size_t
 
∑ckë_sz
 = 0;

394 
fs_ng_hódî_t
 *
hódî
 = 
NULL
;

395 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
¨g
;

396 
˙t
 = 0;

398 (
bufsz
 = 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_INPUT
(
bu„v
))) > 0) {

399 i‡(
bufsz
 < (*
hódî
))

401 
hódî
 = (
fs_ng_hódî_t
 *)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bu„v
));

402 
∑ckë_sz
 = (*
hódî
Ë+ hódî->
∑ylﬂd_Àn
;

403 i‡(
bufsz
 < 
∑ckë_sz
)

406 
	`√td_öput
(
c⁄n
, 
hódî
, hódî + 1, hódî->
∑ylﬂd_Àn
, 
NULL
);

407 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bu„v
), 
∑ckë_sz
);

409 i‡(++
˙t
 >
PACKET_SIZE_PER_FRAME
) {

410 
	`upd©e_˛ock
(
NULL
);

411 
˙t
 = 0;

415 
	}
}

417 
	$√td_c⁄√˘i⁄_îr‹
(
buf„ªvít
 *
bu„v
, 
wh©
, *
¨g
)

419 
	`log_îr‹
(
MOD_GAMED
, "netd connectionÉrror. what:0x%02x,errno:%d,size=%lu\n",

420 
wh©
, 
î∫o
, 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
bu„v
)));

421 
	`shutdown_£rvî
();

422 
	}
}

425 
	$dbd_öput_Ωc
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

427 
fs_öbuf_t
 
öbuf
;

428 
	`FS_INBUF_INIT
(&
öbuf
, 
buf
, 
Àn
);

429 
	`fs_Ωc_di•©ch
(
gamed_Ωc_Õc
, 
hódî
->
uid
, &
öbuf
);

430 
	}
}

432 
	$dbd_öput
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_gd_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
, *
ud©a
)

435 *
d©a
 = 
hódî
->
∑ylﬂd_Àn
 =0 ? 
NULL
 : 
buf
;

436 
	`as£π
(
hódî
->
∑ylﬂd_Àn
 =
Àn
);

437 
hódî
->
cmd
) {

438 
FS_GD_CMD_DB_OBJ_DATA
:

439 
	`fs_db_obje˘_ªcv
(
hódî
, 
d©a
, 
Àn
);

441 
FS_GD_RPC
:

442 
	`dbd_öput_Ωc
(
c⁄n
, 
hódî
, 
d©a
, 
Àn
);

445 
	`log_îr‹
(
MOD_GAMED
, "dbd i≈uàunknow cmd:%d", 
hódî
->
cmd
);

447 
	}
}

449 
	$dbd_c⁄√˘i⁄_ªcv
(
buf„ªvít
 *
bu„v
, *
¨g
)

451 
	`READ_PACKET
(
fs_gd_hódî_t
, 
bu„v
, 
¨g
, 
dbd_öput
, 
NULL
);

452 
	}
}

454 
	$dbd_c⁄√˘i⁄_îr‹
(
buf„ªvít
 *
bu„v
, 
wh©
, *
¨g
)

456 
	`log_îr‹
(
MOD_GAMED
, "connection of dbdÉrror. what:0x%02x,errno:%d,size=%lu",

457 
wh©
, 
î∫o
, 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
bu„v
)));

458 
	`shutdown_£rvî
();

459 
	}
}

461 
	$shutdown_£rvî
()

463 i‡(
dbd_c⁄n
 !
NULL
) {

464 
	`fs_√t_£t_block
(
dbd_c⁄n
->
fd
, 
NULL
);

466 
	`ˇŒ_s¸ùt_func
("/rc/signal", "gamed_on_shutdown", "");

467 if(
dbd_c⁄n
 !
NULL
) {

468 
	`evbuf„r_wrôe
(
	`EVBUFFER_OUTPUT
(
dbd_c⁄n
->
bu„v
), dbd_c⁄n->
fd
);

471 
	`a˘ive_˛o£_Æl_˛õ¡
();

472 
	`fs_√t_mbuf_‰ì
(
db_√tbuf
);

474 i‡(
√td_c⁄n
 !
NULL
) {

475 
	`fs_ng_buf_de°roy
(
√td_c⁄n
->
ud©a
);

476 
	`fs_√t_c⁄√˘i⁄_de°roy
(
√td_c⁄n
);

477 
√td_c⁄n
 = 
NULL
;

480 i‡(
dbd_c⁄n
 !
NULL
) {

481 
	`fs_√t_c⁄√˘i⁄_de°roy
(
dbd_c⁄n
);

482 
dbd_c⁄n
 = 
NULL
;

485 i‡(
g_hâpd
 !
NULL
) {

486 
	`hâp_£rvî_de°roy
(
g_hâpd
);

490 
	`fs_db_obje˘_moduÀ_exô
();

491 
	`≠r_ãrmö©e
();

492 
	`fs_cuæ_deöô
();

493 
	`fs_dns_deöô
();

494 
	`evít_lo›exô
(
NULL
);

495 
	`log_îr‹
(
MOD_GAMED
, "exit for shutdow");

496 
	`exô
(0);

497 
	}
}

499 
	$öô_c⁄√˘
()

501 *
ù
 = 
	`fs_c⁄fig_gë_°rög
(
NETD_IP
);

502 
p‹t
 = 
	`fs_c⁄fig_gë_öt
(
NETD_PORT
);

503 i‡(
ù
 !
NULL
) {

504 
√td_ù
 = 
	`°rdup
(
ù
);

506 i‡(
p‹t
 >= 0) {

507 
deÁu…_√td_p‹t
 = 
p‹t
;

510 
ù
 = 
	`fs_c⁄fig_gë_°rög
(
DBD_IP
);

511 
p‹t
 = 
	`fs_c⁄fig_gë_öt
(
DBD_PORT
);

512 i‡(
ù
 !
NULL
) {

513 
dbd_ù
 = 
	`°rdup
(
ù
);

515 i‡(
p‹t
 >= 0) {

516 
deÁu…_dbd_p‹t
 = 
p‹t
;

520 
dbd_fd
 = 
	`fs_√t_c⁄√˘
(
dbd_ù
, 
deÁu…_dbd_p‹t
, 1);

521 i‡(
dbd_fd
 < 0) {

522 
	`log_îr‹
(
MOD_GAMED
, "exit for failÅo connect dbd");

523 
	`exô
(1);

525 
	`fs_√t_£t_n⁄block
(
dbd_fd
);

527 
dbd_c⁄n
 = 
	`fs_√t_c⁄√˘i⁄_√w
(
dbd_fd
, 
dbd_c⁄√˘i⁄_ªcv
, 
NULL
, 
dbd_c⁄√˘i⁄_îr‹
, 
max_outbuf
, NULL);

528 
	`log_öfo
(
MOD_GAMED
, "c⁄√˘Åÿasyn¯dbd ok:%d", 
dbd_fd
);

531 
	`log_öfo
(
MOD_GAMED
, "sleep for 3 secondes\n");

532 
	`¶ìp
(3);

534 
sync_dbd_fd
 = 
	`fs_√t_c⁄√˘
(
dbd_ù
, 
deÁu…_dbd_p‹t
, 1);

535 i‡(
sync_dbd_fd
 < 0) {

536 
	`log_îr‹
(
MOD_GAMED
, "exit for failÅo sync connect dbd\n");

537 
	`exô
(1);

539 
g_sync_dbd_fd
 = 
sync_dbd_fd
;

540 
	`log_öfo
(
MOD_GAMED
, "c⁄√˘Åÿsyn¯dbd ok:%d", 
sync_dbd_fd
);

543 
√td_fd
 = 
	`fs_√t_c⁄√˘
(
√td_ù
, 
deÁu…_√td_p‹t
, 1);

544 i‡(
√td_fd
 < 0) {

545 
	`log_îr‹
(
MOD_GAMED
, "exit for failÅo connectÇetd");

546 
	`exô
(1);

548 
	`fs_√t_£t_n⁄block
(
√td_fd
);

549 
√td_c⁄n
 = 
	`fs_√t_c⁄√˘i⁄_√w_ext
(
√td_fd
, 
√td_c⁄√˘i⁄_ªcv
, 
NULL
, 
√td_c⁄√˘i⁄_îr‹
,

550 
max_outbuf
, (
fs_ng_buf_t
));

551 
	`fs_ng_buf_öô
(
√td_c⁄n
->
ud©a
);

552 
	`log_öfo
(
MOD_GAMED
, "c⁄√˘Åÿasyn¯√td ok:%d", 
√td_fd
);

554 
hâp_p‹t
 = 
	`fs_c⁄fig_gë_öt
(
HTTPD_PORT
);

555 i‡(
hâp_p‹t
 > 0) {

557 i‡((
g_hâpd
 = 
	`hâp_£rvî_öô
(
ev_ba£
, "0.0.0.0", 
hâp_p‹t
)Ë=
NULL
) {

558 
	`log_îr‹
(
MOD_GAMED
, "öô hâ∞£rvîÉº‹.Ö‹t:%d", 
hâp_p‹t
);

559 
	`as£π
(0);

561 
	`log_öfo
(
MOD_GAMED
, "hâpdÜi°í on:%d", 
hâp_p‹t
);

563 
	}
}

567 
	$to_gamed
(
¨gc
, 
svÆue_t
 *
¨gv
)

569 
fs_¥Ÿocﬁ_id_t
 
pid
 = 
¨gv
[1].
u
.
numbî
;

570 
fs_uid_t
 
uid
;

571 
fs_ng_cmd_t
 
cmd
;

573 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = 
	`fs_Ωc_fun˘i⁄_©
(
gamed_Ωc_Õc
->
fun˘i⁄_èbÀ
, 
pid
);

574 i‡(
fun˘i⁄
 =
NULL
) {

575 
	`log_îr‹
(
MOD_GAMED
, "nÿsuchÑp¯fun˘i⁄ÅÿˇŒ.pid:%d", 
pid
);

579 
	`fs_ng_buf_ª£t
(
√td_c⁄n
->
ud©a
);

580 
fs_mbuf_t
 *
mbuf
 = 
	`NETD_MBUF
(
√td_c⁄n
);

582 
¨gv
[0].
ty≥
) {

583 
T_ARRAY
: {

584 
i
;

585 
¨øy_t
 *
uids
 = 
¨gv
[0].
u
.
¨r
;

586 
i
 = 0; i < 
uids
->
size
; ++i) {

587 
	`as£π
(
uids
->
ôem
[
i
].
ty≥
 & 
T_NUMBER
);

588 
uid
 = 
uids
->
ôem
[
i
].
u
.
numbî
;

589 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
uid
, 
fs_uid_t
);

591 
uid
 = 
uids
->
size
;

592 
cmd
 = 
FS_NG_MULTICAST
;

595 
T_NUMBER
:{

596 
uid
 = 
¨gv
[0].
u
.
numbî
;

597 
cmd
 = (
uid
 =
FS_BROADCAST_UID
Ë? 
FS_NG_BROADCAST
 : 
FS_NG_UNICAST
;

601 
	`log_îr‹
(
MOD_GAMED
, "badÅype uid forÑpc call");

607 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
pid
, 
fs_¥Ÿocﬁ_id_t
);

610 i‡(
	`fs_Ωc_Õc_∑ck
(
fun˘i⁄
, &
¨gv
[2], 
¨gc
 - 2, 
mbuf
)) {

614 
	`fs_ng_buf_£nd
(
√td_c⁄n
->
ud©a
, 
cmd
, 
uid
,Çetd_conn);

617 
	}
}

619 
	$to_dbd
(
¨gc
, 
svÆue_t
 *
¨gv
)

621 
gamed_id
;

622 i‡(
	`fs_Ωc_Õc_∑ck_¨g
(
¨gc
, 
¨gv
, 
gamed_Ωc_Õc
, 
db_√tbuf
, &
gamed_id
)) {

626 
	`FS_GD_SET_HEADER
((
fs_gd_hódî_t
*)
db_√tbuf
->
hód
, 
FS_GD_RPC
, 
gamed_id
, 
	`FS_NET_MBUF_PAYLOAD_LEN
(db_netbuf));

627 
	`fs_√t_mbuf_£nd
(
db_√tbuf
, 
dbd_c⁄n
);

629 
	}
}

632 
	$Ωc_ˇŒ_imp
(
¨gc
, 
svÆue_t
 *
¨gv
)

634 i‡(
¨gv
[0].
ty≥
 =
T_NUMBER
) {

635 
to
 = 
¨gv
[0].
u
.
numbî
;

636 i‡(
to
 =
FS_DBD_UID
) {

637  
	`to_dbd
(
¨gc
, 
¨gv
);

641  
	`to_gamed
(
¨gc
, 
¨gv
);

642 
	}
}

645 
	$f_fs_Ωc_x_ˇŒ
()

647 
SET_ALL_ARGS


648 
fs_uid_t
 
id
 = 
	`ARGS
(0)->
u
.
numbî
;

649 
ty≥
 = 
	`ARGS
(1)->
u
.
numbî
;

650 
fs_¥Ÿocﬁ_id_t
 
pid
 = 
	`ARGS
(2)->
u
.
numbî
;

651 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = 
	`fs_Ωc_fun˘i⁄_©
(
gamed_Ωc_Õc
->
fun˘i⁄_èbÀ
, 
pid
);

652 
fs_s˚√_íåy_t
 *
íåy
 = 
NULL
;

653 
fs_s˚√_t
 *
s˚√
 = 
NULL
;

654 
fs_uid_t
 *
∂ayîs
 = 
NULL
;

655 
∂ayî_num
 = 0;

657 i‡(
fun˘i⁄
 =
NULL
) {

658 
	`log_îr‹
(
MOD_GAMED
, "nÿsuchÑp¯fun˘i⁄ÅÿxˇŒ.pid:%d", 
pid
);

659 
íd
;

662 
	`fs_ng_buf_ª£t
(
√td_c⁄n
->
ud©a
);

663 
fs_mbuf_t
 *
mbuf
 = 
	`NETD_MBUF
(
√td_c⁄n
);

665 i‡(
ty≥
 !
T_RPC_X_SCENE


666 && 
ty≥
 !
T_RPC_X_SCENE_NOT_FIGHT


667 && 
ty≥
 !
T_RPC_X_ALL_USERS
) {

668 
íåy
 = 
	`fs_gë_u£r_íåy
(
id
);

669 i‡(!
íåy
) {

670 
íåy
 = 
	`fs_gë_≈c_íåy
(
id
);

671 i‡(!
íåy
) {

672 
íd
;

676 
ty≥
) {

677 
T_RPC_X_USR_FIELD_NOT_FIGHT
:

678 
∂ayîs
 = 
	`fs_gë_fõld_∂ayîs
(
íåy
, 1, &
∂ayî_num
);

680 
T_RPC_X_USR_FIELD
:

681 
∂ayîs
 = 
	`fs_gë_fõld_∂ayîs
(
íåy
, 0, &
∂ayî_num
);

683 
T_RPC_X_USR_SCENE_NOT_FIGHT
:

684 i‡(
íåy
->
mygrid
) {

685 
∂ayîs
 = 
NULL
;

687 
∂ayîs
 = 
	`fs_s˚√_∂ayîs
(
íåy
->
mygrid
->
s˚√
, 1, &
∂ayî_num
);

690 
T_RPC_X_USR_SCENE
:

691 i‡(
íåy
->
mygrid
) {

692 
∂ayîs
 = 
NULL
;

694 
∂ayîs
 = 
	`fs_s˚√_∂ayîs
(
íåy
->
mygrid
->
s˚√
, 0, &
∂ayî_num
);

697 
T_RPC_X_SCENE
:

698 
s˚√
 = 
	`fs_föd_s˚√_node
(
id
);

699 i‡(
s˚√
) {

700 
∂ayîs
 = 
	`fs_s˚√_∂ayîs
(
s˚√
, 0, &
∂ayî_num
);

703 
T_RPC_X_SCENE_NOT_FIGHT
:

704 
s˚√
 = 
	`fs_föd_s˚√_node
(
id
);

705 i‡(
s˚√
) {

706 
∂ayîs
 = 
	`fs_s˚√_∂ayîs
(
s˚√
, 1, &
∂ayî_num
);

709 
T_RPC_X_ALL_USERS
:

710 
∂ayîs
 = 
	`gë_Æl_u£rs
(&
∂ayî_num
);

713 
	`log_îr‹
(
MOD_GAMED
, "badÅype forÑpc x call");

714 
íd
;

718 i‡(
∂ayî_num
 =0 || 
∂ayîs
 =
NULL
)

719 
íd
;

721 
	`FS_MBUF_ENQ
(
mbuf
, 
∂ayîs
, (
∂ayî_num
 * (
fs_uid_t
)));

723 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
pid
, 
fs_¥Ÿocﬁ_id_t
);

725 i‡(
	`fs_Ωc_Õc_∑ck
(
fun˘i⁄
, 
	`ARGS
(3), 
°_num_¨g
 - 3, 
mbuf
)) {

726 
íd
;

728 
	`fs_ng_buf_£nd
(
√td_c⁄n
->
ud©a
, 
FS_NG_MULTICAST
 , 
∂ayî_num
,Çetd_conn);

730 
íd
:

731 
POP_ALL_ARGS


733 
	}
}

735 
	$lﬂd_c⁄fig
()

747 
£c
, 
u£c
;

748 
£c
 = 
	`fs_c⁄fig_gë_öt
(
SYSTEM_INTERVAL_SEC
);

749 
u£c
 = 
	`fs_c⁄fig_gë_öt
(
SYSTEM_INTERVAL_USEC
);

750 
	`ˇŒout_öô
–
£c
, 
u£c
 );

757 
max_⁄löe
, 
max_logö
;

759 
max_⁄löe
 = ()
	`fs_c⁄fig_gë_öt
(
MAX_ONLINE_KEY
);

760 
max_logö
 = ()
	`fs_c⁄fig_gë_öt
(
MAX_LOGIN_KEY
);

762 
	`Ârötf
–
°dîr
, "öô u£∏m™agê.......: max_⁄löe: %d, max_logö: %d", 
max_⁄löe
, 
max_logö
 );

764 
	`öô_u£r_mng
(
max_⁄löe
, 
max_logö
);

765 
	`¥ötf
( "done \n" );

773 
	}
}

775 
	$sig«l_evít
(
sig
, 
evty≥
, *
¨g
)

777 
	`log_öfo
(
MOD_GAMED
, "ˇtch sig«l:%d", 
sig
);

778 
	`ˇŒ_s¸ùt_func
("/rc/sig«l", "gamed_⁄_sig«l", "i", 
sig
);

779 i‡(
sig
 =
SIGINT
) {

780 
	`shutdown_£rvî
();

782 
	}
}

784 
	$emîgícy_öãºu±
(
sig
)

786 
	`log_îr‹
(
MOD_GAMED
, "emîgícy i¡îru±:%d", 
sig
);

787 
	}
}

789 
	$ª°‹e_gamed_¥oc_tôÀ
()

791 
	`£çro˘ôÀ
("-gamed_%s", 
	`fs_c⁄fig_gë_°rög
(
ENGINE_NAME
));

792 
	}
}

794 
öô_sockës
();

795 
	$moduÀ_öô_gamed
()

798 
	`dúty_mem_poﬁ_£tup
();

800 
	`öô_libevít
();

801 
	`öô_sig«l
(
sig«l_evít
, 
emîgícy_öãºu±
);

802 
	`fs_cuæ_öô
();

803 
	`fs_dns_öô
();

805 
	`öô_sockës
();

808 
	`lﬂd_c⁄fig
();

811 
	`≠r_öôülize
();

813 
max_⁄löe
 = ()
	`fs_c⁄fig_gë_öt
(
MAX_ONLINE_KEY
);

815 
	`fs_db_obje˘_moduÀ_öô
();

818 
	`fs_deÁu…_öô_©om_èbÀ
();

820 
	`fs_sys_öô_≈c_moduÀ
(
max_⁄löe
 * 60, 
NPC_START_ID
, 
NPC_END_ID
);

822 
	`fs_sys_öô_ôem_moduÀ
(
max_⁄löe
 * 300, 
ITEM_START_ID
, 
ITEM_END_ID
);

824 
	`fs_sys_öô_summ⁄_moduÀ
(
max_⁄löe
 * 30, 
SUMMON_START_ID
, 
SUMMON_END_ID
);

828 
	`fs_£t_log_swôch_Àvñ
(
LOG_ERROR
);

831 
	`fs_u£r_m™age_öô
();

832 
	`fs_u£r_m™age_öô
();

833 
	`ª°‹e_gamed_¥oc_tôÀ
();

834 
	}
}

836 
	$sy°em_°¨tup_gamed
()

839 
	`as£π
(
is_gamed_°¨t
 == 0);

841 
	`öô_c⁄√˘
();

843 
db_√tbuf
 = 
	`fs_√t_mbuf_√w
((
fs_gd_hódî_t
));

845 *
Ωc_cfg
 = 
	`fs_c⁄fig_gë_°rög
(
RPC_CFG
);

846 
gamed_Ωc_Õc
 = 
	`fs_Ωc_Õc_¸óã
(
Ωc_cfg
, 
Ωc_ˇŒ_imp
);

848 
is_gamed_°¨t
 = 1;

850 
	`ˇŒ_s¸ùt_func
("/rc/main", "main", "");

851 
	}
}

853 
	$f_dump_mem‹y_poﬁ
()

855 
SET_ALL_ARGS


857 
	`fs_dump_ch¨_ob
();

858 
	`fs_dump_hli°_node
();

860 
POP_ALL_ARGS


861 
	}
}

863 
	$f_gë_time_of_day
()

865 
timevÆ
 
nowvÆ
;

867 
¨øy_t
 *
vec
;

869 
SET_ALL_ARGS


871 
vec
 = 
	`Æloˇã_¨øy
(2);

873 
	`gëtimeofday
(&
nowvÆ
,0);

875 
vec
->
ôem
[0].
ty≥
 = 
T_NUMBER
;

876 
vec
->
ôem
[0].
u
.
numbî
 = 
nowvÆ
.
tv_£c
;

877 
vec
->
ôem
[1].
ty≥
 = 
T_NUMBER
;

878 
vec
->
ôem
[1].
u
.
numbî
 = 
nowvÆ
.
tv_u£c
 / 1000;

880 
POP_ALL_ARGS


882 
	`push_ª„d_¨øy
(
vec
);

883 
	}
}

886 
	$f_íabÀ_log_±o
()

888 
SET_ALL_ARGS


889 
	`íabÀ_log_±o
(
	`ARGS
(0)->
u
.
numbî
);

890 
POP_ALL_ARGS


891 
	}
}

	@packages/game/fs_main.h

3 #i‚de‡
__FS_MAIN_H__


4 
	#__FS_MAIN_H__


	)

6 
	~<°d.h
>

7 
	~<c⁄fig.h
>

8 
	~<evít.h
>

9 
	~<sig«l.h
>

10 
	~"Õc.h
"

11 
	~"Õc_ö˛.h
"

13 
shutdownOS
(
exô_code
);

14 
svÆue_t
 *
ˇŒ_s¸ùt_func
(*
obje˘Name
, *
funcName
, *
∑ømFmt
, ...);

28 
	#FS_EV_PRIORITY_MAX
 (5)

	)

29 
	#FS_EV_PRIORITY_SIG
 (0)

	)

30 
	#FS_EV_PRIORITY_REMARK1
 (1)

	)

31 
	#FS_EV_PRIORITY_NET
 (2)

	)

32 
	#FS_EV_PRIORITY_REMARK2
 (3)

	)

33 
	#FS_EV_PRIORITY_CAL
 (4)

	)

36 
	#T_RPC_X_USR_FIELD
 (1)

	)

37 
	#T_RPC_X_USR_SCENE
 (2)

	)

38 
	#T_RPC_X_USR_FIELD_NOT_FIGHT
 (3)

	)

39 
	#T_RPC_X_USR_SCENE_NOT_FIGHT
 (4)

	)

40 
	#T_RPC_X_SCENE
 (5)

	)

41 
	#T_RPC_X_ALL_USERS
 (6)

	)

42 
	#T_RPC_X_SCENE_NOT_FIGHT
 (7)

	)

49 
	#TIMER_PERSIST
 0

	)

50 
	#TIMER_ONCE
 1

	)

51 
	sfs_evtimî_s


53 
evít
 
	mtimî
;

55 
	mty≥
;

57 
timevÆ
 
	m≥riod
;

59 (*
	mˇŒback
) (*);

61 *
	m¨g
;

62 } 
	tfs_evtimî_t
;

65 
add_timî
(
timevÆ
 
tv
, (*
ˇŒback
Ë(*), *
¨g
);

67 
	`add_timî_⁄˚
(
timevÆ
 
tv
, (*
ˇŒback
Ë(*), *
¨g
);

68 
	`ª°‹e_gamed_¥oc_tôÀ
();

	@packages/game/fs_mem_pool.c

13 
	~<°dlib.h
>

14 
	~<°dio.h
>

15 
	~"fs_mem_poﬁ.h
"

16 
	~"fs_log.h
"

18 
	#INC_BASE_NUM
 3

	)

20 
	gmÆloc_mem‹y_size
 = 0;

22 
ölöe
 
	$_fs_‰ì_node_‰om_block
(
fs_mem‹y_block_t
 *
mbp
, *
node
)

24 
ít
;

26 i‡(!
mbp
)  0;

28 i‡(!
mbp
->
buff
)  0;

30 
ít
 = (
node
 - 
mbp
->
buff
Ë/ mbp->
ít_size
;

32 i‡(
ít
 < 0 ||É¡ > 
mbp
->
ít_num
) {

34 
	`log_îr‹
(
MOD_MEM_POOL
, "freeÉrror!");

39 i‡(
mbp
->
nodes
[
ít
] !
M_ALLOCATED
) {

40 
	`log_îr‹
(
MOD_MEM_POOL
, "notállocated!");

44 
mbp
->
nodes
[mbp->
èû
] = 
ít
;

45 
mbp
->
nodes
[
ít
] = 
M_EOM
;

46 
mbp
->
èû
 = 
ít
;

47 
mbp
->
u£d_num
 --;

49 
	}
}

51 
ölöe
 *
	$_fs_mÆloc_node_‰om_block
(
fs_mem‹y_block_t
 *
mbp
)

53 
off£t
;

54 
ít
;

56 i‡(!
mbp
Ë 
NULL
;

59 i‡(
mbp
->
hód
 =mbp->
èû
) {

60  
NULL
;

63 
ít
 = 
mbp
->
hód
;

65 
mbp
->
hód
 = mbp->
nodes
[
ít
];

66 
mbp
->
nodes
[
ít
] = 
M_ALLOCATED
;

67 
mbp
->
u£d_num
 ++;

69 
off£t
 = 
mbp
->
ít_size
 * 
ít
;

71  
mbp
->
buff
 + 
off£t
;

72 
	}
}

74 
ölöe
 
fs_mem‹y_block_t
 *
	$fs_¸óã_mem‹y_block
(
ít_size
, 
ít_num
)

76 
i
;

77 
fs_mem‹y_block_t
 *
mbp
;

79 
mbp
 = (
fs_mem‹y_block_t
 *Ë
	`mÆloc
((
fs_mem‹y_block_s
));

81 
mbp
->
ít_size
 =Ént_size;

82 
mbp
->
ít_num
 =Ént_num;

83 
mbp
->
u£d_num
 = 0;

87 
mbp
->
buff
 = (*Ë
	`mÆloc
(
ít_size
 * (
ít_num
 + 1));

89 i‡(!
mbp
->
buff
) {

90  
NULL
;

94 
mbp
->
nodes
 = 
	`mÆloc
((Ë* (
ít_num
 + 1));

96 i‡(!
mbp
->
nodes
) {

97  
NULL
;

100 
i
 = 0; i <
ít_num
; i++ ) {

101 
mbp
->
nodes
[
i
] = i+1;

103 
mbp
->
nodes
[
ít_num
] = 
M_EOM
;

104 
mbp
->
hód
 = 0;

105 
mbp
->
èû
 = 
ít_num
;

106 
mbp
->
blk_size
 = 
ít_size
 * (
ít_num
 + 1) + () * (ent_num + 1);

108 
mÆloc_mem‹y_size
 +
mbp
->
blk_size
;

111  
mbp
;

112 
	}
}

115 
fs_mem‹y_poﬁ_t
 *
	$fs_¸óã_mem‹y_poﬁ
(
ít_size
, 
ít_num
)

117 
fs_mem‹y_poﬁ_t
 *
mmp
;

118 
fs_mem‹y_block_t
 *
mbp
;

120 
mmp
 = (
fs_mem‹y_poﬁ_t
 *Ë
	`mÆloc
((
fs_mem‹y_poﬁ_s
));

121 
mbp
 = 
	`fs_¸óã_mem‹y_block
(
ít_size
, 
ít_num
);

123 
mbp
->
√xt
 = 
NULL
;

125 
mmp
->
ít_num
 =Ént_num;

126 
mmp
->
ít_size
 =Ént_size;

127 
mmp
->
hód
 = 
mbp
;

128 
mmp
->
èû
 = 
mbp
;

129 
mmp
->
poﬁ_size
 = 
mbp
->
blk_size
;

132  
mmp
;

133 
	}
}

135 * 
	$fs_mÆloc_node
(
fs_mem‹y_poﬁ_t
 *
mmp
)

137 
fs_mem‹y_block_t
 *
mbp
;

138 *
node
;

140 
mbp
 = 
mmp
->
hód
;

141 
mbp
) {

142 i‡–(
node
 = 
	`_fs_mÆloc_node_‰om_block
(
mbp
)) ) {

143  
node
;

145 
mbp
 = mbp->
√xt
;

150 
mbp
 = 
	`fs_¸óã_mem‹y_block
(
mmp
->
ít_size
, mmp->
ít_num
 / 3 + 1);

152 i‡(!
mbp
) {

153 
	`Ârötf
(
°dîr
, "addr: 0x%ld, c™'àmÆlo¯mem‹y block\n", (Ë&
mmp
);

154  
NULL
;

158 
mbp
->
√xt
 = 
NULL
;

159 
mmp
->
èû
->
√xt
 = 
mbp
;

160 
mmp
->
èû
 = 
mbp
;

161 
mmp
->
poﬁ_size
 +
mbp
->
blk_size
;

163 
node
 = 
	`_fs_mÆloc_node_‰om_block
(
mbp
);

167 i‡(!
node
) {

169 
	`Ârötf
(
°dîr
, "mallocÉrror!!!!!!!!\n");

171  
node
;

172 
	}
}

174 
	$fs_‰ì_node
(
fs_mem‹y_poﬁ_t
 *
mmp
, *
node
)

176 
fs_mem‹y_block_t
 *
mbp
;

178 
mbp
 = 
mmp
->
hód
;

179 
mbp
) {

180 i‡–
	`_fs_‰ì_node_‰om_block
(
mbp
, 
node
) ) {

183 
mbp
 = mbp->
√xt
;

186 
	}
}

189 
	$fs_dump_mem_poﬁ_desc
(
fs_mem‹y_poﬁ_t
 *
mmp
, *
desc
)

191 
fs_mem‹y_block_t
 *
mbp
;

193 
mbp
 = 
mmp
->
hód
;

195 
	`¥ötf
–"mem‹yÖoﬁ(%s): \n", 
desc
 );

197 
mbp
) {

198 
	`¥ötf
–"----ít_size: %d,É¡_num: %d, u£d_num: %d, size: %d\n", 
mbp
->
ít_size
, mbp->
ít_num
, mbp->
u£d_num
, mbp->
blk_size
);

199 
mbp
 = mbp->
√xt
;

201 
	`¥ötf
("----sizê: %d\n", 
mmp
->
poﬁ_size
);

202 
	`¥ötf
("----tŸÆ : %d\n", 
mÆloc_mem‹y_size
);

203 
	`fÊush
(
°dout
);

204 
	}
}

	@packages/game/fs_mem_pool.h

1 #i‚de‡
__MEM_POOL_H


2 
	#__MEM_POOL_H


	)

6 
	#M_ALLOCATED
 -1

	)

8 
	#M_EOM
 -2

	)

11 
	sfs_mem‹y_block_s
 {

13 
	mhód
;

14 
	mèû
;

15 *
	mnodes
;

16 * 
	mbuff
;

17 
	mít_num
;

18 
	mít_size
;

19 
	mu£d_num
;

21 
	mblk_size
;

23 
fs_mem‹y_block_s
 *
	m√xt
;

25 }
	tfs_mem‹y_block_t
;

28 
	sfs_mem‹y_poﬁ_s
 {

30 
fs_mem‹y_block_t
 *
	mhód
;

31 
fs_mem‹y_block_t
 *
	mèû
;

33 
	mít_size
;

34 
	mít_num
;

36 
	mpoﬁ_size
;

37 } 
	tfs_mem‹y_poﬁ_t
;

40 *
fs_mÆloc_node
(
fs_mem‹y_poﬁ_t
 *
mmp
);

41 
fs_‰ì_node
(
fs_mem‹y_poﬁ_t
 *
mmp
, *
node
);

42 
fs_mem‹y_poﬁ_t
 *
fs_¸óã_mem‹y_poﬁ
(
ít_size
, 
ít_num
);

43 
fs_dump_mem_poﬁ_desc
(
fs_mem‹y_poﬁ_t
 *
mmp
, *
desc
);

	@packages/game/fs_npc.c

1 
	~"fs_≈c.h
"

2 
	~"fs_hli°.h
"

3 
	~"fs_mem_poﬁ.h
"

4 
	~"fs_comm⁄.h
"

5 
	~"fs_Õc_›.h
"

6 
	~"fs_log.h
"

7 
	~"fs_ch¨_ob.h
"

8 
	~"fs_Ωc_c.h
"

10 
	$fs_sys_öô_≈c_moduÀ
(
max
, 
°¨tid
, 
ídid
)

12 
	`fs_öô_ch¨_ob
(
T_CHAR_NPC
, 
max
, (
fs_≈c_obje˘_t
), 
°¨tid
, 
ídid
);

13 
	}
}

15 
ölöe
 
	$_öô_≈c
(
fs_≈c_obje˘_t
 *
nob
, 
≈cid
)

22 
	}
}

25 
	$fs_√w_≈c
(*
∑th
)

27 
fs_ch¨_ob_t
 *
cob
;

28 
fs_Õc_obje˘_t
 *
oob
;

30 
cob
 = 
	`fs_√w_ch¨_ob
(
T_CHAR_NPC
, 
∑th
, 
NULL
);

32 i‡(
cob
) {

33 
oob
 = 
	`CHAR_OB_ORIG_OB
(
cob
);

35 
	`_öô_≈c
((
fs_≈c_obje˘_t
 *Ë
	`CHAR_OB_ENTRY
(
cob
), 
	`CHAR_OB_ID
(cob));

37 
	`ˇŒ_obje˘_func
(
oob
->
ob
, "öôNpc", "i", 
	`CHAR_OB_ID
(
cob
));

39  
	`CHAR_OB_ID
(
cob
);

42 
	}
}

49 
	$fs_ª°‹e_≈c
(*
∑th
, 
m≠pög_t
 *
m
)

51 
fs_ch¨_ob_t
 * 
cob
;

52 
fs_Õc_obje˘_t
 * 
oob
;

54 
cob
 = 
	`fs_√w_ch¨_ob
(
T_CHAR_NPC
, 
∑th
, 
m
);

56 i‡(
cob
) {

58 
oob
 = 
	`CHAR_OB_ORIG_OB
(
cob
);

59 
	`_öô_≈c
((
fs_≈c_obje˘_t
 *Ë
	`CHAR_OB_ENTRY
(
cob
), 
	`CHAR_OB_ID
(cob));

60 
	`ˇŒ_obje˘_func
(
oob
->
ob
, "öôNpc", "i", 
	`CHAR_OB_ID
(
cob
));

61  
	`CHAR_OB_ID
(
cob
);

64 
	}
}

66 
	$fs_de°roy_≈c
(
≈cid
)

68 
	`fs_‰ì_ch¨_ob
(
T_CHAR_NPC
, 
≈cid
);

69 
	}
}

71 
ölöe
 
fs_≈c_obje˘_t
 *
	$fs_≈c_obje˘
(
≈cid
)

73 
fs_ch¨_ob_t
 *
cob
;

75 
cob
 = 
	`fs_föd_ch¨_ob
(
T_CHAR_NPC
, 
≈cid
);

76 i‡(
cob
) {

77  (
fs_≈c_obje˘_t
 *Ë
	`CHAR_OB_ENTRY
(
cob
);

79  
NULL
;

80 
	}
}

82 
	$is_≈c_⁄löe
(
≈cid
)

84 
fs_ch¨_ob_t
 *
cob
;

85 
cob
 = 
	`fs_föd_ch¨_ob
(
T_CHAR_NPC
, 
≈cid
);

86 i‡(
cob
) {

90 
	}
}

92 
obje˘_t
 *
	$gë_≈c_Õcob
(
≈cid
)

94 
fs_ch¨_ob_t
 *
cob
;

96 
cob
 = 
	`fs_föd_ch¨_ob
(
T_CHAR_NPC
, 
≈cid
);

97 i‡(
cob
) {

98  ((
fs_Õc_obje˘_t
 *Ë
	`CHAR_OB_ORIG_OB
(
cob
))->
ob
;

100  
NULL
;

102 
	}
}

105 
svÆue_t
 * 
	$gë_≈c_¥›
(
≈cid
, 
svÆue_t
 *
key
)

107  
	`fs_gë_ãmp_m≠
(
T_CHAR_NPC
, 
≈cid
, 
key
);

108 
	}
}

110 
m≠pög_t
 *
	$fs_gë_≈c_m≠
(
≈cid
, 
ßved
)

112 
fs_ch¨_ob_t
 * 
cob
;

113 
cob
 = 
	`fs_föd_ch¨_ob
(
T_CHAR_NPC
, 
≈cid
);

114 i‡(!
cob
) {

115  
NULL
;

117 i‡(
ßved
) {

118  
cob
->
ßve_m≠
;

120  
cob
->
ãmp_m≠
;

122 
	}
}

124 
	$fs_£t_≈c_m≠
(
≈cid
, 
m≠pög_t
 *
m
, 
ßved
)

126 
fs_ch¨_ob_t
 * 
cob
;

127 
cob
 = 
	`fs_föd_ch¨_ob
(
T_CHAR_NPC
, 
≈cid
);

128 i‡(!
cob
) {

131 i‡(
ßved
) {

132 i‡(
cob
->
ßve_m≠
) {

133 
	`‰ì_m≠pög
(
cob
->
ßve_m≠
);

135 
cob
->
ßve_m≠
 = 
m
;

136 
	`add_ªf
(
m
, "setÇpc map");

138 i‡(
cob
->
ãmp_m≠
) {

139 
	`‰ì_m≠pög
(
cob
->
ãmp_m≠
);

141 
cob
->
ãmp_m≠
 = 
m
;

142 
	`add_ªf
(
m
, "setÇpc map");

144 
	}
}

149 
	#SET_PERM_VAR
 { \

150 
SET_ALL_ARGS
 \

151 
	`fs_£t_ßve_m≠
(
T_CHAR_NPC
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1), ARGS(2)); \

152 
POP_ALL_ARGS
 \

153 }

	)

155 
	#GET_PERM_VAR
 { \

156 
SET_ALL_ARGS
 \

157 
svÆue_t
 *
v
 = 
	`fs_gë_ßve_m≠
(
T_CHAR_NPC
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

158 
POP_ALL_ARGS
 \

159 
	`push_svÆue
(
v
); \

160 }

	)

162 
	#SET_TEMP_VAR
 { \

163 
SET_ALL_ARGS
 \

164 
	`fs_£t_ãmp_m≠
(
T_CHAR_NPC
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1), ARGS(2)); \

165 
POP_ALL_ARGS
 \

166 }

	)

168 
	#GET_TEMP_VAR
 { \

169 
SET_ALL_ARGS
 \

170 
svÆue_t
 *
v
 = 
	`fs_gë_ãmp_m≠
(
T_CHAR_NPC
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

171 
POP_ALL_ARGS
 \

172 
	`push_svÆue
(
v
); \

173 }

	)

175 
	$f_√w_≈c
()

177 
SET_ALL_ARGS


178 
≈cid
 = 
	`fs_√w_≈c
(
	`ARGS
(0)->
u
.
°rög
);

179 
POP_ALL_ARGS


181 
	`push_numbî
(
≈cid
);

182 
	}
}

184 
	$f_ª°‹e_≈c
()

186 
SET_ALL_ARGS


187 
≈c
 = 
	`fs_ª°‹e_≈c
(
	`ARGS
(0)->
u
.
°rög
, ARGS(1)->u.
m≠
);

188 
POP_ALL_ARGS


190 
	`push_numbî
(
≈c
);

191 
	}
}

193 
	$f_SëNpc
()

195 
SET_TEMP_VAR


196 
	}
}

198 
	$f_GëNpc
()

200 
GET_TEMP_VAR


201 
	}
}

203 
	$f_SëNpcSave
()

205 
SET_PERM_VAR


206 
	}
}

208 
	$f_GëNpcSave
()

210 
GET_PERM_VAR


211 
	}
}

214 
	$f_de°roy_≈c
()

216 
SET_ALL_ARGS


217 
	`fs_de°roy_≈c
(
	`ARGS
(0)->
u
.
numbî
);

218 
POP_ALL_ARGS


219 
	}
}

224 
	$f_is_≈c_⁄löe
()

226 
SET_ALL_ARGS


227 
ªt
 = 
	`is_≈c_⁄löe
(
	`ARGS
(0)->
u
.
numbî
);

228 
POP_ALL_ARGS


229 
	`push_numbî
(
ªt
);

230 
	}
}

233 
	$f_gë_≈c_m≠
()

235 
SET_ALL_ARGS


236 
m≠pög_t
 *
m
 = 
	`fs_gë_≈c_m≠
(
	`ARGS
(0)->
u
.
numbî
, ARGS(1)->u.number);

237 
POP_ALL_ARGS


239 i‡(!
m
) {

240 
	`push_svÆue
(&
c⁄°0u
);

243 
	`push_m≠pög
(
m
);

244 
	}
}

247 
	$f_£t_≈c_m≠
()

249 
SET_ALL_ARGS


250 
	`fs_£t_≈c_m≠
(
	`ARGS
(0)->
u
.
numbî
, ARGS(1)->u.
m≠
, ARGS(2)->u.number);

251 
POP_ALL_ARGS


252 
	}
}

	@packages/game/fs_npc.h

1 #i‚de‡
_FS_≈c_H_


2 
	#_FS_≈c_H_


	)

4 
	~"fs_ch¨_ob.h
"

5 
	~"fs_comm⁄.h
"

6 
	~"fs_¥›_key.h
"

10 
	sfs_aoi_¨ó_s
 {

11 
	mr
;

12 } 
	tfs_aoi_¨ó_t
;

15 
	sfs_≈c_obje˘_s
 {

16 } 
	gfs_≈c_obje˘_t
;

20 
fs_sys_öô_≈c_moduÀ
(
max
, 
°¨tid
, 
ídid
);

22 
fs_√w_≈c
(*
∑th
);

24 
fs_de°roy_≈c
(
≈cid
);

26 
svÆue_t
 * 
gë_≈c_¥›
(
≈cid
, svÆue_à*
key
);

28 
obje˘_t
 *
gë_≈c_Õcob
(
≈cid
);

	@packages/game/fs_prop_key.h

1 #i‚de‡
_FS_PROP_KEY_H_


2 
	#_FS_PROP_KEY_H_


	)

16 
	#K_USER_LAYOUT
 "œyout"

	)

17 
	#K_USER_DIR
 "dú"

	)

18 
	#K_USER_NAME
 "«me"

	)

19 
	#KT_USER_TITLE
 "tôÀ"

	)

20 
	#KT_USER_EFFECTS
 "ef„˘s"

	)

21 
	#KT_USER_NAME_COLOR
 "«meCﬁ‹"

	)

22 
	#KT_USER_TITLE_COLOR
 "tôÀCﬁ‹"

	)

25 
	#K_NPC_ICON
 "ic⁄"

	)

26 
	#K_NPC_NAME
 "«me"

	)

27 
	#K_NPC_TITLE
 "tôÀ"

	)

28 
	#K_NPC_VISIBLE
 "visibÀ"

	)

29 
	#K_NPC_EFFECTS
 "ef„˘s"

	)

30 
	#K_NPC_STORY_FLAG
 "°‹yFœg"

	)

31 
	#K_NPC_DIR
 "dú"

	)

32 
	#K_NPC_NAME_COLOR
 "«meCﬁ‹"

	)

33 
	#K_NPC_TITLE_COLOR
 "tôÀCﬁ‹"

	)

36 
	#K_SUMM_RES
 "ªs"

	)

37 
	#K_SUMM_NAME
 "«me"

	)

	@packages/game/fs_summon.c

1 
	~"fs_summ⁄.h
"

2 
	~"fs_hli°.h
"

3 
	~"fs_mem_poﬁ.h
"

4 
	~"fs_comm⁄.h
"

5 
	~"fs_Õc_›.h
"

6 
	~"fs_log.h
"

8 
	$fs_sys_öô_summ⁄_moduÀ
(
max
, 
°¨tid
, 
ídid
)

10 
	`fs_öô_ch¨_ob
(
T_CHAR_BEAST
, 
max
, (
fs_summ⁄_obje˘_t
), 
°¨tid
, 
ídid
);

11 
	}
}

14 
	$fs_√w_summ⁄
(*
∑th
)

16 
fs_ch¨_ob_t
 * 
cob
;

17 
fs_Õc_obje˘_t
 * 
oob
;

18 
fs_summ⁄_obje˘_t
 * 
sob
;

20 
cob
 = 
	`fs_√w_ch¨_ob
(
T_CHAR_BEAST
, 
∑th
, 
NULL
);

22 i‡(
cob
) {

23 
oob
 = 
	`CHAR_OB_ORIG_OB
(
cob
);

24 
sob
 = (
fs_summ⁄_obje˘_t
 *Ë
	`CHAR_OB_ENTRY
(
cob
);

25 
sob
->
ty≥
 = 
T_CHAR_SUMMON
;

27 
	`ˇŒ_obje˘_func
(
oob
->
ob
, "InôSumm⁄", "i", 
	`CHAR_OB_ID
(
cob
));

28  
	`CHAR_OB_ID
(
cob
);

31 
	}
}

38 
	$fs_ª°‹e_summ⁄
(*
∑th
, 
m≠pög_t
 *
m
)

40 
fs_ch¨_ob_t
 * 
cob
;

41 
fs_Õc_obje˘_t
 * 
oob
;

43 
cob
 = 
	`fs_√w_ch¨_ob
(
T_CHAR_BEAST
, 
∑th
, 
m
);

45 i‡(
cob
) {

47 
oob
 = 
	`CHAR_OB_ORIG_OB
(
cob
);

48 
	`ˇŒ_obje˘_func
(
oob
->
ob
, "InôSumm⁄", "i", 
	`CHAR_OB_ID
(
cob
));

49  
	`CHAR_OB_ID
(
cob
);

52 
	}
}

54 
	$fs_de°roy_summ⁄
(
summ⁄
)

56 
	`fs_‰ì_ch¨_ob
(
T_CHAR_BEAST
, 
summ⁄
);

57 
	}
}

60 
m≠pög_t
 *
	$fs_gë_summ⁄_m≠
(
summid
, 
ßved
)

62 
fs_ch¨_ob_t
 * 
cob
;

63 
cob
 = 
	`fs_föd_ch¨_ob
(
T_CHAR_BEAST
, 
summid
);

64 i‡(!
cob
) {

65  
NULL
;

67 i‡(
ßved
) {

68  
cob
->
ßve_m≠
;

70 if–!
cob
->
ãmp_m≠
 )

72 
cob
->
ãmp_m≠
 = 
	`Æloˇã_m≠pög
(0);

75  
cob
->
ãmp_m≠
;

77 
	}
}

79 
svÆue_t
 *
	$fs_gë_summ⁄_v¨
(
summid
, 
svÆue_t
 *
key
, 
ßved
)

81 
m≠pög_t
 *
d©a_m≠
;

82 
d©a_m≠
 = 
	`fs_gë_summ⁄_m≠
(
summid
, 
ßved
);

83 
svÆue_t
 *
v
;

85 i‡(!
d©a_m≠
) {

86  
NULL
;

89 
v
 = 
	`föd_ö_m≠pög
(
d©a_m≠
, 
key
);

90 i‡(
	`IS_NULL
(
v
Ë|| 
	`IS_LPC_UNDEF
(v)) {

91  
NULL
;

93  
v
;

94 
	}
}

96 
	$is_summ⁄_⁄löe
(
summid
)

98 
fs_ch¨_ob_t
 *
cob
;

99 
cob
 = 
	`fs_föd_ch¨_ob
(
T_CHAR_BEAST
, 
summid
);

100 i‡(
cob
) {

104 
	}
}

110 
	#SET_PERM_VAR
 { \

111 
SET_ALL_ARGS
 \

112 
	`fs_£t_ßve_m≠
(
T_CHAR_BEAST
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1), ARGS(2)); \

113 
POP_ALL_ARGS
 \

114 }

	)

116 
	#GET_PERM_VAR
 { \

117 
SET_ALL_ARGS
 \

118 
svÆue_t
 *
v
 = 
	`fs_gë_ßve_m≠
(
T_CHAR_BEAST
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

119 
POP_ALL_ARGS
 \

120 
	`push_svÆue
(
v
); \

121 }

	)

123 
	#SET_TEMP_VAR
 { \

124 
SET_ALL_ARGS
 \

125 
	`fs_£t_ãmp_m≠
(
T_CHAR_BEAST
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1), ARGS(2)); \

126 
POP_ALL_ARGS
 \

127 }

	)

129 
	#GET_TEMP_VAR
 { \

130 
SET_ALL_ARGS
 \

131 
svÆue_t
 *
v
 = 
	`fs_gë_ãmp_m≠
(
T_CHAR_BEAST
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

132 
POP_ALL_ARGS
 \

133 
	`push_svÆue
(
v
); \

134 }

	)

136 
	#SET_VAR
 { \

137 
SET_ALL_ARGS
 \

138 
	`fs_£t_m≠
(
T_CHAR_BEAST
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1), ARGS(2)); \

139 
POP_ALL_ARGS
 \

140 }

	)

142 
	#GET_VAR
 { \

143 
SET_ALL_ARGS
 \

144 
svÆue_t
 *
v
 = 
	`fs_gë_ßve_m≠
(
T_CHAR_BEAST
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

145 i‡(
	`IS_NULL
(
v
Ë|| 
	`IS_LPC_UNDEF
(v)) { \

146 
v
 = 
	`fs_gë_ãmp_m≠
(
T_CHAR_BEAST
, 
	`ARGS
(0)->
u
.
numbî
, ARGS(1)); \

148 
POP_ALL_ARGS
 \

149 
	`push_svÆue
(
v
); \

150 }

	)

152 
	$f_√w_summ⁄
()

154 
SET_ALL_ARGS


155 
summ⁄
 = 
	`fs_√w_summ⁄
(
	`ARGS
(0)->
u
.
°rög
);

156 
POP_ALL_ARGS


158 
	`push_numbî
(
summ⁄
);

159 
	}
}

161 
	$f_ª°‹e_summ⁄
()

163 
SET_ALL_ARGS


164 
summ⁄
 = 
	`fs_ª°‹e_summ⁄
(
	`ARGS
(0)->
u
.
°rög
, ARGS(1)->u.
m≠
);

165 
POP_ALL_ARGS


167 
	`push_numbî
(
summ⁄
);

168 
	}
}

170 
	$f_SëSumm⁄
()

172 
SET_VAR


173 
	}
}

175 
	$f_GëSumm⁄
()

177 
GET_VAR


178 
	}
}

180 
	$f_SëSumm⁄Temp
()

182 
SET_TEMP_VAR


183 
	}
}

185 
	$f_GëSumm⁄Temp
()

187 
GET_TEMP_VAR


188 
	}
}

191 
	$f_SëSumm⁄Save
()

193 
SET_PERM_VAR


194 
	}
}

196 
	$f_GëSumm⁄Save
()

198 
GET_PERM_VAR


199 
	}
}

201 
	$f_de°roy_summ⁄
()

203 
SET_ALL_ARGS


204 
	`fs_de°roy_summ⁄
(
	`ARGS
(0)->
u
.
numbî
);

205 
POP_ALL_ARGS


206 
	}
}

208 
	$f_is_summ⁄_⁄löe
()

210 
SET_ALL_ARGS


211 
ªt
 = 
	`is_summ⁄_⁄löe
(
	`ARGS
(0)->
u
.
numbî
);

212 
POP_ALL_ARGS


213 
	`push_numbî
(
ªt
);

214 
	}
}

217 
	$f_gë_summ⁄_m≠
()

219 
SET_ALL_ARGS


220 
m≠pög_t
 *
m
 = 
	`fs_gë_summ⁄_m≠
(
	`ARGS
(0)->
u
.
numbî
, ARGS(1)->u.number);

221 
POP_ALL_ARGS


222 i‡(!
m
) {

223 
	`push_svÆue
(&
c⁄°0u
);

226 
	`push_m≠pög
(
m
);

227 
	}
}

	@packages/game/fs_summon.h

1 #i‚de‡
_FS_SUMMON_H_


2 
	#_FS_SUMMON_H_


	)

4 
	~"fs_ch¨_ob.h
"

5 
	~"fs_comm⁄.h
"

8 
	mT_CHAR_NULL
,

9 
	mT_CHAR_SUMMON
,

10 
	mT_CHAR_BABY
,

13 
	sfs_summ⁄_obje˘_s
 {

15 
	mty≥
;

16 } 
	tfs_summ⁄_obje˘_t
;

19 
fs_sys_öô_summ⁄_moduÀ
(
max
, 
°¨tid
, 
ídid
);

21 
fs_√w_summ⁄
(*
∑th
);

23 
fs_gíî©e_summ⁄
(
m≠pög_t
 *
m
);

25 
fs_de°roy_summ⁄
(
summ⁄
);

27 
is_summ⁄_⁄löe
(
summid
);

29 
svÆue_t
 *
fs_gë_summ⁄_v¨
(
summid
, svÆue_à*
key
, 
ßved
);

	@packages/game/fs_team.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<sys/queue.h
>

11 
	~"fs_ãam.h
"

12 
	~"fs_Õc_›.h
"

13 
	~"fs_Õcob_èbÀ.h
"

14 
	~"fs_comm⁄.h
"

15 
	~"c⁄åib.h
"

16 
	~"fs_log.h
"

17 
	~"fs_aoi.h
"

18 
	~"fs_u£r.h
"

20 
	ggInôed
 = 0;

22 
fs_ãam_t
* 
	gãam_queue
;

23 
	$STAILQ_HEAD
(
ãam_queue_hód
,
fs_ãam_s
Ë
hód
;

25 
	$öô_ãam_moduÀ
()

27 
i
;

28 i‡(
gInôed
) ;

30 
	`STAILQ_INIT
(&
hód
);

32 
ãam_queue
 = (
fs_ãam_t
 *Ë
	`mÆloc
–(fs_ãam_tË* 
MAX_TEAM_NUM
 );

34 
i
 = 0; i < 
MAX_TEAM_NUM
; i++)

36 
ãam_queue
[
i
].
num
 = i + 1;

37 
ãam_queue
[
i
].
ãam_öfo
 = 
NULL
;

38 
	`STAILQ_INSERT_TAIL
(&
hód
, 
ãam_queue
 + 
i
, 
√xt
);

41 
gInôed
 = 1;

42 
	}
}

44 
ölöe
 
fs_ãam_t
* 
	$gë_ãam_node
(
ãamno
)

46 i‡(!
gInôed
Ë 
NULL
;

48 i‡(
ãamno
 > 
MAX_TEAM_NUM
 ||Åeamno <= 0 )

50  
NULL
;

52  
ãam_queue
 + 
ãamno
 - 1;

53 
	}
}

55 
m≠pög_t
* 
	$gë_ãam_öfo
(
ãamno
)

57 
fs_ãam_t
 * 
t
;

59 
t
 = 
	`gë_ãam_node
(
ãamno
);

61 i‡(
t
 !
NULL
)

63  
t
->
ãam_öfo
;

65  
NULL
;

66 
	}
}

68 
	$gë_ãam_Àadî
(
ãamno
)

70 
svÆue_t
 
ãmps
;

71 
svÆue_t
 *
svÀadî
;

72 
m≠pög_t
 *
m
;

74 
m
 = 
	`gë_ãam_öfo
(
ãamno
);

75 i‡(
m
 =
NULL
)  0;

77 
	`TO_LPC_STR
(
ãmps
, 
I_LEADER
);

78 
svÀadî
 = 
	`föd_ö_m≠pög
(
m
, &
ãmps
);

79 i‡(
	`IS_NULL
(
svÀadî
Ë|| !
	`IS_LPC_INT
(svleader)) {

82  
	`LPC_INT_VALUE
(
svÀadî
);

83 
	}
}

86 
	$is_ãam_ãmp_Àave
(
ãamno
, 
uid
)

88 
svÆue_t
 *
ªt
;

99 
ªt
 = 
	`ˇŒ_s¸ùt_func
("moduÀ/ãam", "IsTempLóve", "ii", 
ãamno
, 
uid
);

101 i‡(
	`IS_NULL
(
ªt
Ë|| !
	`IS_LPC_INT
(ret)) {

104  
	`LPC_INT_VALUE
(
ªt
);

105 
	}
}

108 
	$ö_ãam_íåy
(
uid
, 
fs_ãam_íåy_t
 *
ãam
)

110 
fs_s˚√_íåy_t
 *
íåy
;

111 
i
 = 0;

112 
i
 = 0; i < 
ãam
->
n
; i++) {

113 
íåy
 = 
ãam
->íåy[
i
];

114 i‡(
íåy
->
ow√r
 =
uid
) {

119 
	}
}

122 
	$is_ãam_Àadî
(
uid
, 
fs_ãam_íåy_t
 *
ãam
)

124  (
ãam
->
Àadî
->
ow√r
 =
uid
);

125 
	}
}

128 
	$gë_ãam_membîs
(
ãamno
, 
fs_ãam_íåy_t
 *
ãam
)

130 
svÆue_t
 
ãmps
;

131 
svÆue_t
 *
svÀadî
, *
svmembîs
, *
svmembî
;

132 
m≠pög_t
 *
m
;

133 
fs_u£r_t
 *
u£r
;

134 
i
, 
ö_num
, 
Àave_num
;

136 
m
 = 
	`gë_ãam_öfo
(
ãamno
);

137 i‡(
m
 =
NULL
)  0;

139 
	`TO_LPC_STR
(
ãmps
, 
I_LEADER
);

140 
svÀadî
 = 
	`föd_ö_m≠pög
(
m
, &
ãmps
);

141 i‡(
	`IS_NULL
(
svÀadî
Ë|| !
	`IS_LPC_INT
(svleader)) {

145 
	`TO_LPC_STR
(
ãmps
, 
LS_P2M
);

146 
svmembîs
 = 
	`föd_ö_m≠pög
(
m
, &
ãmps
);

148 i‡(
	`IS_NULL
(
svmembîs
Ë|| !
	`IS_LPC_ARR
(svmembîsË|| !
	`LPC_ARR_SIZE
(svmembers)) {

152 i‡(
	`LPC_ARR_SIZE
(
svmembîs
Ë> 
TEAM_NUM_MAX
) {

153 
	`log_îr‹
(
MOD_TEAM
, "ãam membî†%d i†m‹êth™ %d!", 
	`LPC_ARR_SIZE
(
svmembîs
), 
TEAM_NUM_MAX
);

157 
ö_num
 = 0;

158 
Àave_num
 = 0;

159 
ãam
->
Àadî
 = 
NULL
;

160 
i
 = 0; i < 
	`LPC_ARR_SIZE
(
svmembîs
); i++) {

161 
svmembî
 = 
	`LPC_ARR_ITEM
(
svmembîs
, 
i
);

162 
ãam
->
íåy
[
i
] = 
NULL
;

163 i‡(!
	`IS_LPC_INT
(
svmembî
Ë|| 
	`LPC_INT_VALUE
(svmember) <= 0) {

164 i‡(
	`LPC_INT_VALUE
(
svmembî
Ë< 0Ë
Àave_num
 += 1;

168 i‡(!(
u£r
 = 
	`FödU£rO∆öe
(
	`LPC_INT_VALUE
(
svmembî
)))) {

173 i‡(
	`LPC_INT_VALUE
(
svmembî
Ë=
svÀadî
->
u
.
numbî
) {

174 
ãam
->
Àadî
 = &
u£r
->
íåy
;

177 
ãam
->
íåy
[
ö_num
++] = &
u£r
->entry;

180 i‡(
ãam
->
Àadî
) {

181 
ãam
->
íåy
[
ö_num
++] =Åóm->
Àadî
;

183 i‡(!
ö_num
 || !
ãam
->
Àadî
) {

186 
ãam
->
n
 = 
ö_num
;

187 
ãam
->
is_fuŒ
 = ((
Àave_num
 + 
ö_num
Ë>
TEAM_NUM_MAX
) ? 1 : 0;

190 
	}
}

194 
	$¸óã_ãam
()

196 
fs_ãam_t
 * 
t
;

197 
fs_Õc_obje˘_t
 *
lob
;

199 i‡(!
gInôed
) {

200 
	`öô_ãam_moduÀ
();

203 
t
 = 
	`STAILQ_FIRST
(&
hód
);

204 
lob
 = 
	`fs_föd_Õc_obje˘
(
TEAM_MOD_PATH
);

206 i‡(
t
 =
NULL
 || !
lob
) {

209 
	`STAILQ_REMOVE
(&
hód
, 
t
, 
fs_ãam_s
, 
√xt
);

211 i‡(
lob
->
ßve_m≠
) {

213 
t
->
ãam_öfo
 = 
	`dìp_c›y_m≠pög
(
lob
->
ßve_m≠
);

215 
t
->
ãam_öfo
 = 
	`Æloˇã_m≠pög
(0);

217  
t
->
num
;

218 
	}
}

221 
	$dismiss_ãam
(
ãamno
)

223 
fs_ãam_t
 *
t
 = 
	`gë_ãam_node
(
ãamno
);

225 i‡(
t
 !
NULL
) {

227 
	`‰ì_m≠pög
–
t
->
ãam_öfo
 );

228 
t
->
ãam_öfo
 = 
NULL
;

229 
	`STAILQ_INSERT_TAIL
(&
hód
, 
t
, 
√xt
);

244 
	`debug_mesßge
–"\¡ómno:%d,ÇuŒ", 
ãamno
 );

246 
	}
}

278 
	$f_gë_ãam_m≠
()

280 
SET_ALL_ARGS


281 
m≠pög_t
 *
m
 = 
	`gë_ãam_öfo
(
	`ARGS
(0)->
u
.
numbî
);

282 
POP_ALL_ARGS


283 i‡(
m
) {

284 
	`push_m≠pög
(
m
);

286 
	`push_svÆue
(&
c⁄°0u
);

288 
	}
}

291 
	$f_√w_ãam
()

293 
SET_ALL_ARGS


294 
ãamno
 = 
	`¸óã_ãam
();

295 
POP_ALL_ARGS


296 
	`push_numbî
(
ãamno
);

297 
	}
}

300 
	$f_dismiss_ãam
()

302 
SET_ALL_ARGS


303 
	`dismiss_ãam
(
	`ARGS
(0)->
u
.
numbî
);

304 
POP_ALL_ARGS


305 
	}
}

	@packages/game/fs_team.h

1 #i‚de‡
_TEAM_H


2 
	#_TEAM_H


	)

4 
	~"Õc_ö˛.h
"

5 
	~"ãam_ma¸os.h
"

6 
	~"fs_ãam.h
"

7 
	~"fs_Ωc_c.h
"

8 
	~"fs_aoi.h
"

10 
	#MAX_USERS
 6500

	)

11 
	#MAX_TEAM_NUM
 
MAX_USERS


12 
	#TEAM_MOD_PATH
 "moduÀ/ãam.c"

	)

14 
	sfs_ãam_íåy_s
 {

15 
	mn
;

16 
	mis_fuŒ
;

17 
fs_s˚√_íåy_t
 *
	mÀadî
;

18 
fs_s˚√_íåy_t
 *
	míåy
[
TEAM_NUM_MAX
];

19 } 
	tfs_ãam_íåy_t
;

21 
	sfs_ãam_s
{

23 
STAILQ_ENTRY
(
fs_ãam_s
Ë
	m√xt
;

24 
m≠pög_t
 * 
	mãam_öfo
;

25 
	mnum
;

26 } 
	tfs_ãam_t
;

28 
gë_ãam_Àadî
(
ãamno
);

29 
gë_ãam_membîs
(
ãamno
, 
fs_ãam_íåy_t
 *
ãam
);

30 
is_ãam_ãmp_Àave
(
ãamno
, 
uid
);

31 
ö_ãam_íåy
(
uid
, 
fs_ãam_íåy_t
 *
ãam
);

32 
is_ãam_Àadî
(
uid
, 
fs_ãam_íåy_t
 *
ãam
);

	@packages/game/fs_user.h

5 #i‚de‡
__FS_USER_H__


6 
	#__FS_USER_H__


	)

8 
	~"Õc.h
"

9 
	~"Õc_ö˛.h
"

11 
	~"°ack.h
"

13 
	~"fs_¥›_key.h
"

15 
	#USER_OBJ
 "ch¨/u£r"

	)

16 
	#VALIDATE_MOVE_FREQ_MASK
 8

17 

	)

20 
	sfs_u£r_s
 {

22 
	mu£∫um
;

24 
	mödex
;

26 
	miFd
;

31 
	miFightög
;

33 
	miTómID
;

35 
	miTempLóve
;

37 
	miSèŒID
;

41 
obje˘_t
* 
	mu£r_obj
;

44 
time_t
 
	mœ°_±o_time°amp
;

48 
	m•ecific_±o_cou¡
;

49 
	m•ecific_±o_îr‹_cou¡
;

50 
	m•ecific_±o_thªshﬁd
;

51 
	m•ecific_±o_°ï
;

52 
	m•ecific_±o_mod
;

53 
	m•ecific_±o_°¨t
;

55 
	m«me_hash
;

56 
	mtôÀ_hash
;

57 
	m«me_tôÀ_hash
;

59 
	m∑πs_wóp⁄
;

60 } 
	tfs_u£r_t
;

62 
öô_u£r_mng
(
⁄löe
, 
logö
);

63 
obje˘_t
* 
GëU£rLpcObj
–
u£∫um
 );

64 
fs_u£r_t
* 
FödU£rO∆öe
–
u£∫um
 );

65 
svÆue_t
 * 
gë_u£r_¥›
(
fs_u£r_t
 *
u£r
, svÆue_à*
key
);

66 
svÆue_t
 * 
gë_u£r_ãmp_¥›
(
fs_u£r_t
 *
u£r
, svÆue_à*
key
);

67 
gë_u£r_ãamid
(
u£∫um
);

68 
fs_u£r_obje˘_upd©e
(
obje˘_t
 *
obj
);

69 *
gë_Æl_u£rs
(*
u£r_num
);

70 
fs_gamed_˛o£_uid_c⁄√˘i⁄
(
u£∫um
);

72 
öô_•ecific_±o_°©s
(
fs_u£r_t
 *
u£r
);

73 
£t_•ecific_±o_°©s
(
fs_u£r_t
 *
u£r
, 
thªshﬁd
, 
°ï
, 
mod
);

74 
•ecific_±o_°©s_°¨t
(
fs_u£r_t
 *
u£r
);

	@packages/game/fs_user_manage.c

3 
	~"fs_u£r.h
"

4 
	~"Õc_¨gs_›.h
"

5 
	~"fs_m¨shÆ.h
"

6 
	~"fs_comm.h
"

7 
	~"fs_d©a_ßve.h
"

8 
	~"fs_öt_¨øy.h
"

9 
	~"fs_db.h
"

10 
	~"fs_hli°.h
"

11 
	~"fs_mem_poﬁ.h
"

12 
	~"fs_comm⁄.h
"

14 
	~<sys/time.h
>

15 
	~<°dio.h
>

16 
	~<time.h
>

17 
	~<as£π.h
>

19 
is_gamed_°¨t
;

22 
	gmax_⁄löe
 = 0;

24 
	gmax_logö
 = 0;

26 
	gglobÆ_uidp
[
MAX_ONLINE
 * 2];

27 
	gglobÆ_uid_num
 = 0;

31 
fs_u£r_t
* 
	gÆl_u£rs
 = 
NULL
;

33 
ST_I
 *
	gnuŒ_u£rs_°ack
 = 
NULL
;

37 
fs_obj_hash_t
 *
	g⁄löe_u£r_tbl
;

43 
	$upd©e_max_logö
–
logö
 )

45 
i
;

46 i‡–
logö
 < 
max_logö
 )

48 
	`debug_mesßge
–"ERROR:√w max_logö i†smÆ»th™ old [%d].tÿ£à[%d]", 
max_logö
, 
logö
 );

52  
i
 = 
max_logö
; i < 
logö
; i ++)

55 if(
nuŒ_u£rs_°ack
->
	`push
“uŒ_u£rs_°ack, 
i
) != 1)

57 
	`debug_mesßge
("vfd sèck fuŒ, c™ÇŸÖush %d\n", 
i
);

58 
	`exô
(-12);

62 
max_logö
 = 
logö
;

63 
	}
}

66 
	$öô_u£r_mng
(
⁄löe
, 
logö
)

68 
size
;

70 
max_⁄löe
 = 
⁄löe
;

72 
	`as£π
(
logö
 <
max_⁄löe
);

74 i‡–
Æl_u£rs
 !
NULL
)

77 
	`debug_mesßge
( "WARNING: user manage system is initialized.\n" );

82 i‡(
	`öô_°ack_öt
(&
nuŒ_u£rs_°ack
) != 1)

84 
	`debug_mesßge
("user stack initÉrror\n");

85 
	`exô
(-11);

89 
obje˘_t
 *
u£r_obj
 = 
	`˛⁄e_obje˘
(
USER_OBJ
, 0);

90 i‡(
	`öô_u£r_ßve_v¨
(
u£r_obj
)) {

91 
	`Ârötf
(
°dîr
, "£tu∞u£∏ßvêv¨†îr‹ %s\n", 
USER_OBJ
);

92 
	`exô
(1);

98 
size
 = (
fs_u£r_t
Ë* 
max_⁄löe
;

99 
Æl_u£rs
 = (
fs_u£r_t
 *)
	`MALLOC
(
size
);

100 
	`bzîo
(
Æl_u£rs
, 
size
);

102 
⁄löe_u£r_tbl
 = 
	`fs_ht_¸óã_hash_èbÀ
(
⁄löe
);

105 
	`upd©e_max_logö
–
logö
 );

107 
	}
}

109 
	$de°roy_u£r
(
u£∫um
)

111 
fs_u£r_t
* 
u£r
 = 
	`FS_HT_FIND_INT
(
⁄löe_u£r_tbl
, 
u£∫um
);

112 i‡(
u£r
 !
NULL
) {

113 
	`fs_∂ayî_Àave_s˚√
(
u£∫um
);

116 
	`FS_HT_REMOVE_INT
(
⁄löe_u£r_tbl
, 
u£∫um
);

119 
	`de°ru˘_obje˘
(
u£r
->
u£r_obj
);

124 
nuŒ_u£rs_°ack
->
	`push
“uŒ_u£rs_°ack, 
u£r
->
ödex
);

128 
	}
}

135 
	$RemoveU£r
–
u£∫um
 )

137 
fs_u£r_t
* 
u£r
;

139 
u£r
 = 
	`FS_HT_FIND_INT
(
⁄löe_u£r_tbl
, 
u£∫um
);

142 i‡–
u£r
 =
NULL
 )

144 
	`¥ötf
("ÁûÅÿªmovêu£r:%d\n", 
u£∫um
);

149 i‡–
u£r
->
iFightög
 )

151 
svÆue_t
 *
ªt
;

153 
ªt
 = 
	`ˇŒ_s¸ùt_func
("moduÀ/fight/maö", "QuôInFight", "ii", 
u£r
->
iFightög
, 
u£∫um
 );

155 i‡(
ªt
 !
NULL
 &&Ñë->
ty≥
 =
T_NUMBER
 &&Ñë->
u
.
numbî
 == 1)

162 
	`ˇŒ_obje˘_func
(
u£r
->
u£r_obj
, "logout", "");

164 
	`debug_mesßge
–"ªmovêu£r: %d\n", 
u£∫um
 );

166  
	`de°roy_u£r
(
u£∫um
);

167 
	}
}

170 
fs_u£r_t
* 
	$FödU£rO∆öe
–
u£∫um
 )

172  
	`FS_HT_FIND_INT
(
⁄löe_u£r_tbl
, 
u£∫um
);

173 
	}
}

176 
obje˘_t
* 
	$GëU£rLpcObj
–
u£∫um
 )

178 
fs_u£r_t
* 
u£r
 = 
	`FödU£rO∆öe
–
u£∫um
 );

180 i‡–
u£r
 =
NULL
)

182  
NULL
;

185  
u£r
->
u£r_obj
;

186 
	}
}

189 
	$IsO∆öe
–
u£∫um
 )

191 
fs_u£r_t
* 
u£r
 = 
	`FödU£rO∆öe
–
u£∫um
 );

193 i‡–
u£r
 )

199 
	}
}

204 
svÆue_t
 * 
	$gë_u£r_¥›
(
fs_u£r_t
 *
u£r
, 
svÆue_t
 *
key
)

206 
svÆue_t
 *
vÆ
;

207 
svÆue_t
 *
¥›
 = 
	`föd_obje˘_v¨übÀ
(
u£r
->
u£r_obj
, "prop");

209 i‡(!
¥›
 ||Ör›->
ty≥
 !
T_MAPPING
) {

212  &
c⁄°0u
;

215 
vÆ
 = 
	`föd_ö_m≠pög
(
¥›
->
u
.
m≠
, 
key
);

216  
vÆ
;

217 
	}
}

219 
svÆue_t
 * 
	$gë_u£r_ãmp_¥›
(
fs_u£r_t
 *
u£r
, 
svÆue_t
 *
key
)

221 
svÆue_t
 *
vÆ
;

222 
svÆue_t
 *
¥›
 = 
	`föd_obje˘_v¨übÀ
(
u£r
->
u£r_obj
, "temp_var");

224 i‡(!
¥›
 ||Ör›->
ty≥
 !
T_MAPPING
) {

227  &
c⁄°0u
;

230 
vÆ
 = 
	`föd_ö_m≠pög
(
¥›
->
u
.
m≠
, 
key
);

231  
vÆ
;

232 
	}
}

234 
	$gë_u£r_ãamid
(
fs_uid_t
 
uid
)

236 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
uid
);

237 i‡(
u£r
) {

238  
u£r
->
iTómID
;

241 
	}
}

248 
	$√td_ªmove
(
fs_uid_t
 
uid
)

251 
	`RemoveU£r
(
uid
);

252 
	}
}

255 
	$to_√td_quô
–
u£∫um
 )

257 
	}
}

265 
	$f_gë_u£r
( )

267 
obje˘_t
* 
ªt
;

270 
u£∫um
;

273 
SET_ALL_ARGS
;

274 
u£∫um
 = 
	`ARGS
(0)->
u
.
numbî
;

275 
POP_ALL_ARGS
;

277 
ªt
 = 
	`GëU£rLpcObj
–
u£∫um
 );

279 i‡–
ªt
 )

281 
	`push_obje˘
–
ªt
 );

285 
	`push_numbî
(0);

286 
	}
}

290 
	$f_logout
()

292 
ªt
;

294 
u£∫um
 = 
•
->
u
.
numbî
;

296 
ªt
 = 
	`RemoveU£r
–
u£∫um
 );

298 
	`put_numbî
–
ªt
 );

299 
	}
}

302 
	$f_is_⁄löe
()

304 
ªt
;

305 
u£∫um
 = 
•
->
u
.
numbî
;

307 
ªt
 = 
	`IsO∆öe
(
u£∫um
);

309 
	`put_numbî
–
ªt
 );

310 
	}
}

313 
	$f_gë_u£r_ãamid
()

315 
SET_ALL_ARGS


316 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

317 
POP_ALL_ARGS


318 i‡(
u£r
) {

319 
	`push_numbî
(
u£r
->
iTómID
);

321 
	`push_svÆue
(&
c⁄°0u
);

323 
	}
}

326 
	$f_£t_u£r_ãamid
()

328 
SET_ALL_ARGS


329 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

330 
ãamno
 = 
	`ARGS
(1)->
u
.
numbî
;

331 i‡(
u£r
) {

332 
u£r
->
iTómID
 = 
ãamno
;

334 
POP_ALL_ARGS


335 
	}
}

338 
	$f_£t_u£r_ãmp_Àave
()

340 
SET_ALL_ARGS


341 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

342 
Êag
 = 
	`ARGS
(1)->
u
.
numbî
;

343 i‡(
u£r
) {

344 
u£r
->
iTempLóve
 = 
Êag
;

346 
POP_ALL_ARGS


347 
	}
}

350 
	$f_£t_u£r_Á˘i⁄
()

352 
SET_ALL_ARGS


353 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

354 
Á˘i⁄
 = 
	`ARGS
(1)->
u
.
numbî
;

355 
POP_ALL_ARGS


356 if–
u£r
 ){

357 
u£r
->
Á˘i⁄
 = faction;

359 
	}
}

361 
	$f_gë_u£r_Á˘i⁄
()

363 
SET_ALL_ARGS


364 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

365 
POP_ALL_ARGS


366 if(
u£r
){

367 
	`push_numbî
(
u£r
->
Á˘i⁄
);

369 
	`push_numbî
(0);

371 
	}
}

373 
	$f_£t_u£r_∑πs_equù
()

375 
SET_ALL_ARGS


376 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

377 
∑πs_wóp⁄
 = 
	`ARGS
(1)->
u
.
numbî
;

378 
POP_ALL_ARGS


379 if–
u£r
 ){

380 
u£r
->
∑πs_wóp⁄
 =Öarts_weapon;

382 
	}
}

384 
	$f_gë_u£r_pos
()

386 
SET_ALL_ARGS


387 
¨øy_t
 * 
v
;

388 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

389 
POP_ALL_ARGS


390 i‡(
u£r
) {

391 
v
 = 
	`Æloˇã_em±y_¨øy
(3);

392 
v
->
ôem
[0].
ty≥
 = 
T_NUMBER
;

393 
v
->
ôem
[1].
ty≥
 = 
T_NUMBER
;

394 
v
->
ôem
[2].
ty≥
 = 
T_NUMBER
;

395 
v
->
ôem
[0].
u
.
numbî
 = 
u£r
->
íåy
.
z
;

396 
v
->
ôem
[1].
u
.
numbî
 = 
u£r
->
íåy
.
x
;

397 
v
->
ôem
[2].
u
.
numbî
 = 
u£r
->
íåy
.
y
;

398 
	`push_ª„d_¨øy
(
v
);

400 
	`push_svÆue
(&
c⁄°0
);

402 
	}
}

406 
	$f_gë_u£r_x
()

408 
SET_ALL_ARGS


409 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

410 
POP_ALL_ARGS


411 i‡(
u£r
) {

412 
	`push_numbî
(
u£r
->
íåy
.
x
);

414 
	`push_svÆue
(&
c⁄°0
);

416 
	}
}

419 
	$f_gë_u£r_y
()

421 
SET_ALL_ARGS


422 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

423 
POP_ALL_ARGS


424 i‡(
u£r
) {

425 
	`push_numbî
(
u£r
->
íåy
.
y
);

427 
	`push_svÆue
(&
c⁄°0
);

429 
	}
}

432 
	$f_gë_u£r_s˚√
()

434 
SET_ALL_ARGS


435 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
	`ARGS
(0)->
u
.
numbî
);

436 
POP_ALL_ARGS


437 i‡(
u£r
) {

438 
	`push_numbî
(
u£r
->
íåy
.
z
);

440 
	`push_svÆue
(&
c⁄°0
);

442 
	}
}

445 
	$öô_•ecific_±o_°©s
(
fs_u£r_t
 *
u£r
)

447 
u£r
->
•ecific_±o_°¨t
 = 0;

448 
u£r
->
•ecific_±o_cou¡
 = 0;

449 
u£r
->
•ecific_±o_îr‹_cou¡
 = 0;

450 
u£r
->
•ecific_±o_thªshﬁd
 = 0;

451 
u£r
->
•ecific_±o_°ï
 = 0;

452 
u£r
->
•ecific_±o_mod
 = 1;

453 
	}
}

455 
	$£t_•ecific_±o_°©s
(
fs_u£r_t
 *
u£r
, 
thªshﬁd
, 
°ï
, 
mod
)

457 i‡(
mod
 == 0) {

458 
mod
 = 1;

460 
u£r
->
•ecific_±o_°¨t
 = 0;

461 
u£r
->
•ecific_±o_cou¡
 = 0;

462 
u£r
->
•ecific_±o_îr‹_cou¡
 = 0;

463 
u£r
->
•ecific_±o_thªshﬁd
 = 
thªshﬁd
;

464 
u£r
->
•ecific_±o_°ï
 = 
°ï
;

465 
u£r
->
•ecific_±o_mod
 = 
mod
;

466 
	}
}

468 
	$•ecific_±o_°©s_°¨t
(
fs_u£r_t
 *
u£r
)

470 
u£r
->
•ecific_±o_°¨t
 = 1;

471 
	}
}

473 
fs_u£r_t
 *
	$√w_u£r
(
fs_uid_t
 
uid
)

475 
ödex
;

476 
fs_u£r_t
 *
u£r
;

479 i‡(
nuŒ_u£rs_°ack
->
	`p›
“uŒ_u£rs_°ack, &
ödex
) == 0) {

480  
NULL
;

483 
u£r
 = &
Æl_u£rs
[
ödex
];

485 
	`mem£t
(
u£r
, 0x00, (
fs_u£r_t
));

487 
u£r
->
ödex
 = index;

488 
u£r
->
u£∫um
 = 
uid
;

489 
u£r
->
iFd
 = 0;

490 
u£r
->
iTómID
 = 0;

491 
u£r
->
iTempLóve
 = 0;

492 
u£r
->
run_°ï
 = 0;

493 
u£r
->
yöshí
 = 0;

494 
u£r
->
Á˘i⁄
 = 0;

498 
u£r
->
fﬁlow_summ⁄
 = 0;

499 
u£r
->
f‹bid_wÆk_time
 = 0;

500 
u£r
->
add_u£r_hook
 = 0;

502 
u£r
->
°©us
 = 0;

503 
u£r
->
°©us_£c
 = 0;

504 
u£r
->
°©us_èr
 = 0;

506 
u£r
->
wÆk_time_°amp
 = 0;

508 
u£r
->
œ°_±o_time°amp
 = 
	`time
(
NULL
);

510 
u£r
->
œ°_wÆk_time
 = 0;

511 
u£r
->
œ°_wÆk_°ï
 = 0;

513 
u£r
->
«me_hash
 = 0;

514 
u£r
->
tôÀ_hash
 = 0;

515 
u£r
->
«me_tôÀ_hash
 = 0;

517 
u£r
->
∑πs_wóp⁄
= 0;

518 
u£r
->
iFightög
 = 0;

520 
	`öô_•ecific_±o_°©s
(
u£r
);

522 
	`fs_öô_s˚√_íåy
(&
u£r
->
íåy
, 
T_ENTRY_USR
, 
uid
, user);

525 
	`FS_HT_INSERT_INT
(
⁄löe_u£r_tbl
, 
uid
, 
u£r
);

527 
u£r
->
u£r_obj
 = 
	`˛⁄e_obje˘
(
USER_OBJ
, 0);

530  
u£r
;

531 
	}
}

533 
fs_uid_t
 *
	$gë_Æl_u£rs
(*
u£r_num
)

535 
fs_u£r_t
 *
u£r
;

536 
fs_ht_node_t
 *
hnode
;

538 
globÆ_uid_num
 = 0;

540 
	`FOR_EACH_HTABLE_OB
(
⁄löe_u£r_tbl
, 
hnode
)

542 
u£r
 = (
fs_u£r_t
 *Ë
hnode
->
ob
;

543 
globÆ_uidp
[
globÆ_uid_num
++] = 
u£r
->
u£∫um
;

545 *
u£r_num
 = 
globÆ_uid_num
;

546  
globÆ_uidp
;

547 
	}
}

549 
	$⁄löe_u£r_åavî£
(
obje˘_t
 *
ob
, * 
fun˙ame
)

551 
fs_ht_node_t
 *
hnode
;

552 
fs_u£r_t
 *
u£r
;

553 
ödex
 = 0;

555 
	`FOR_EACH_HTABLE_OB
(
⁄löe_u£r_tbl
, 
hnode
)

557 
u£r
 = (
fs_u£r_t
 *Ë
hnode
->
ob
;

559 
	`ˇŒ_obje˘_func
(
ob
, 
fun˙ame
, "o", 
u£r
->
u£r_obj
);

561 
ödex
++;

563 
	}
}

567 
	$u£r_¸óã
(
fs_uid_t
 
uid
)

569 
fs_u£r_t
 *
u£r
;

571 i‡(
	`IsO∆öe
(
uid
)) {

575 
u£r
 = 
	`√w_u£r
(
uid
);

576 i‡(
u£r
 =
NULL
) {

586 
	}
}

588 
	$f_u£r_¸óã
()

590 
fs_uid_t
 
uid
 = 
•
->
u
.
numbî
;

591 
ªt
 = 
	`u£r_¸óã
(
uid
);

592 
	`put_numbî
(
ªt
);

593 
	}
}

595 
	$f_u£r_de°roy
()

597 
fs_uid_t
 
uid
 = 
•
->
u
.
numbî
;

598 
ªt
 = 
	`de°roy_u£r
(
uid
);

599 
	`put_numbî
(
ªt
);

600 
	}
}

602 
	$f_gamed_˛o£_uid_c⁄√˘i⁄
()

604 
fs_uid_t
 
uid
 = 
•
->
u
.
numbî
;

605 
ªt
 = 
	`fs_gamed_˛o£_uid_c⁄√˘i⁄
(
uid
);

606 
	`put_numbî
(
ªt
);

607 
	}
}

611 
	$fs_u£r_obje˘_upd©e
–
obje˘_t
 *
ob
 )

613 
u£rObjLí
 = 
	`°æí
–
USER_OBJ
 );

615 i‡(
	`°æí
(
ob
->
«me
Ë=
u£rObjLí
 && 
	`°∫cmp
–ob->«me, 
USER_OBJ
, strlen(USER_OBJ) ) == 0)

617 
fs_u£r_t
 *
u£r
;

618 
¥ogøm_t
 * 
tmpPr›
;

619 
fs_ht_node_t
 *
hnode
;

630 
	`FOR_EACH_HTABLE_OB
(
⁄löe_u£r_tbl
, 
hnode
)

632 
u£r
 = (
fs_u£r_t
 *Ë
hnode
->
ob
;

634 
tmpPr›
 = 
u£r
->
u£r_obj
->
¥og
;

635 
u£r
->
u£r_obj
->
¥og
 = 
ob
->prog;

637 
	`ª„ªn˚_¥og
(
u£r
->
u£r_obj
->
¥og
, "fs_user_object_update");

638 
	`‰ì_¥og
(
tmpPr›
, 1);

640 
	`Ârötf
(
°dîr
, "update user object ok!\n");

642 
	}
}

644 
add_timî
(
timevÆ
 
≥riod
, (*
ˇŒback
)(*), * 
¨g
);

646 
	$fs_u£r_m™age_öô
()

648 
timevÆ
 
tv
;

649 
tv
.
tv_£c
 = 1;

650 
tv
.
tv_u£c
 = 0;

653 
	}
}

656 
	$f_gë_u£r_fightid
( )

658 
SET_ALL_ARGS


659 
u£∫um
, 
ªs
 = 0;

660 
fs_u£r_t
 *
u£r
;

662 
u£∫um
 = 
	`ARGS
(0)->
u
.
numbî
;

663 
POP_ALL_ARGS


665 
u£r
 = 
	`FödU£rO∆öe
(
u£∫um
);

667 i‡(
u£r
) {

668 
ªs
 = 
u£r
->
iFightög
;

671 
	`push_numbî
–
ªs
 );

672 
	}
}

675 
	$f_£t_u£r_fightid
( )

677 
SET_ALL_ARGS


678 
u£∫um
, 
fightId
;

679 
fs_u£r_t
 *
u£r
;

681 
u£∫um
 = 
	`ARGS
(0)->
u
.
numbî
;

682 
fightId
 = 
	`ARGS
(1)->
u
.
numbî
;

684 
POP_ALL_ARGS


686 
u£r
 = 
	`FödU£rO∆öe
(
u£∫um
);

688 i‡(
u£r
) {

689 
u£r
->
iFightög
 = 
fightId
;

691 
	}
}

693 
	$f_gë_u£r_°Ælid
( )

695 
SET_ALL_ARGS


696 
u£∫um
, 
ªs
 = 0;

697 
fs_u£r_t
 *
u£r
;

699 
u£∫um
 = 
	`ARGS
(0)->
u
.
numbî
;

700 
POP_ALL_ARGS


702 
u£r
 = 
	`FödU£rO∆öe
(
u£∫um
);

704 i‡(
u£r
) {

705 
ªs
 = 
u£r
->
iSèŒID
;

708 
	`push_numbî
–
ªs
 );

709 
	}
}

711 
	$f_£t_u£r_°Ælid
( )

713 
SET_ALL_ARGS


714 
u£∫um
, 
°ÆlId
;

715 
fs_u£r_t
 *
u£r
;

717 
u£∫um
 = 
	`ARGS
(0)->
u
.
numbî
;

718 
°ÆlId
 = 
	`ARGS
(1)->
u
.
numbî
;

720 
POP_ALL_ARGS


722 
u£r
 = 
	`FödU£rO∆öe
(
u£∫um
);

724 i‡(
u£r
) {

725 
u£r
->
iSèŒID
 = 
°ÆlId
;

727 
	}
}

730 
	$f_gë_Æl_u£rs
()

732 
SET_ALL_ARGS


733 
size
 = 
	`FS_HT_COUNT
(
⁄löe_u£r_tbl
);

734 
ödex
 = 0;

735 
¨øy_t
 * 
v
;

736 
fs_u£r_t
 *
u£r
;

737 
fs_ht_node_t
 *
hnode
;

738 
is_uid
 = 
	`ARGS
(0)->
u
.
numbî
;

741 
POP_ALL_ARGS


743 i‡(!
size
)

745 
	`push_numbî
( 0 );

749 
v
 = 
	`Æloˇã_em±y_¨øy
(
size
);

751 
	`FOR_EACH_HTABLE_OB
(
⁄löe_u£r_tbl
, 
hnode
)

753 
u£r
 = (
fs_u£r_t
 *Ë
hnode
->
ob
;

754 i‡(
is_uid
) {

755 
v
->
ôem
[
ödex
].
ty≥
 = 
T_NUMBER
;

756 
v
->
ôem
[
ödex
].
u
.
numbî
 = 
u£r
->
u£∫um
;

759 
v
->
ôem
[
ödex
].
ty≥
 = 
T_OBJECT
;

760 
v
->
ôem
[
ödex
].
u
.
ob
 = 
u£r
->
u£r_obj
;

761 
	`add_ªf
(
u£r
->
u£r_obj
, "f_get_all_users");

764 
ödex
 ++;

768 
	`push_ª„d_¨øy
–
v
 );

769 
	}
}

771 
	$f_gë_⁄löe_cou¡
()

773 
SET_ALL_ARGS


774 
size
 = 
	`FS_HT_COUNT
(
⁄löe_u£r_tbl
);

775 
POP_ALL_ARGS


777 
	`push_numbî
–
size
 );

778 
	}
}

780 
	$f_gë_u£r_«me_tôÀ_hash
()

782 
SET_ALL_ARGS


783 
fs_u£r_t
 *
u£r
;

784 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

786 
POP_ALL_ARGS


787 
u£r
 = 
	`FödU£rO∆öe
(
uid
);

789 i‡(
u£r
) {

790 
	`push_numbî
(
u£r
->
«me_tôÀ_hash
);

792 
	`push_numbî
(0);

794 
	}
}

796 
	$f_£t_u£r_°©us
()

798 
SET_ALL_ARGS


799 
fs_u£r_t
 *
u£r
;

800 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

801 
°©us
 = 
	`ARGS
(1)->
u
.
numbî
;

802 
£c
 = 
	`ARGS
(2)->
u
.
numbî
;

803 
èrgë
 = 
	`ARGS
(3)->
u
.
numbî
;

804 
POP_ALL_ARGS


806 
u£r
 = 
	`FödU£rO∆öe
(
uid
);

808 i‡(
u£r
) {

809 
u£r
->
°©us
 = status;

810 
u£r
->
°©us_£c
 = 
£c
;

811 
u£r
->
°©us_èr
 = 
èrgë
;

813 
	}
}

815 
	$f_gë_u£r_°©us
()

817 
SET_ALL_ARGS


818 
¨øy_t
 * 
v
;

819 
fs_u£r_t
 *
u£r
;

820 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

821 
POP_ALL_ARGS


823 
u£r
 = 
	`FödU£rO∆öe
(
uid
);

825 i‡(
u£r
) {

826 
v
 = 
	`Æloˇã_em±y_¨øy
(3);

827 
v
->
ôem
[0].
ty≥
 = 
T_NUMBER
;

828 
v
->
ôem
[1].
ty≥
 = 
T_NUMBER
;

829 
v
->
ôem
[2].
ty≥
 = 
T_NUMBER
;

830 
v
->
ôem
[0].
u
.
numbî
 = 
u£r
->
°©us
;

831 
v
->
ôem
[1].
u
.
numbî
 = 
u£r
->
°©us_£c
;

832 
v
->
ôem
[2].
u
.
numbî
 = 
u£r
->
°©us_èr
;

834 
	`push_ª„d_¨øy
(
v
);

836 
	`push_svÆue
(&
c⁄°0
);

838 
	}
}

840 
	$f_£t_u£r_yöshí
()

842 
SET_ALL_ARGS


843 
fs_u£r_t
 *
u£r
;

844 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

845 
yöshí
 = 
	`ARGS
(1)->
u
.
numbî
;

847 
POP_ALL_ARGS


849 
u£r
 = 
	`FödU£rO∆öe
(
uid
);

851 i‡(
u£r
) {

852 
u£r
->
yöshí
 = yinshen;

854 
	}
}

857 
	$f_is_u£r_yöshí
()

859 
SET_ALL_ARGS


860 
fs_u£r_t
 *
u£r
;

861 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

863 
POP_ALL_ARGS


865 
u£r
 = 
	`FödU£rO∆öe
(
uid
);

867 i‡(
u£r
) {

868 
	`push_numbî
(
u£r
->
yöshí
);

871 
	`push_numbî
(0);

873 
	}
}

875 
	$f_upd©e_max_logö
()

877 
SET_ALL_ARGS


878 
maxLogö
 = 
	`ARGS
(0)->
u
.
numbî
;

880 
POP_ALL_ARGS


882 
	`upd©e_max_logö
(
maxLogö
);

883 
	}
}

886 
	$f_£t_f‹bid_wÆk_time
()

888 
SET_ALL_ARGS


889 
fs_u£r_t
 *
u£r
;

890 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

891 
time
 = 
	`ARGS
(1)->
u
.
numbî
;

893 
POP_ALL_ARGS


895 
u£r
 = 
	`FödU£rO∆öe
(
uid
);

897 i‡(
u£r
) {

898 
u£r
->
f‹bid_wÆk_time
 = 
time
;

900 
	}
}

903 
	$f_£t_add_u£r_hook
()

905 
SET_ALL_ARGS


906 
fs_u£r_t
 *
u£r
;

907 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

908 
hook
 = 
	`ARGS
(1)->
u
.
numbî
;

910 
POP_ALL_ARGS


912 
u£r
 = 
	`FödU£rO∆öe
(
uid
);

914 i‡(
u£r
) {

915 
u£r
->
add_u£r_hook
 = 
hook
;

917 
	}
}

919 
	$f_⁄löe_u£r_åavî£
()

921 
SET_ALL_ARGS


922 
obje˘_t
 *
ob
 = 
	`ARGS
(0)->
u
.ob;

923 * 
fun˙ame
 = 
	`ARGS
(1)->
u
.
°rög
;

924 
POP_ALL_ARGS


926 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

931 
	`⁄löe_u£r_åavî£
–
ob
, 
fun˙ame
 );

932 
	}
}

	@packages/game/team_macros.h

1 #i‚de‡
_TEAM_MACROS_H_


2 
	#_TEAM_MACROS_H_


	)

6 
	#TEAM_NUM_MAX
 5

	)

7 
	#TEAM_MEMBERS
 ({0,0,0,0,0,}Ë

	)

8 
	#TEAM_DEFAULT_NUM
 5

	)

10 
	#TEAM_REQ_MAX
 20

	)

11 
	#TEAM_INVITE_MAX
 10

	)

14 
	#ST_LEAVE
 (-1Ë

	)

15 
	#ST_IN
 (0Ë

	)

18 
	#K_POS
 "pos"

	)

19 
	#K_STATE
 "°©e"

	)

22 
	#I_TEAMNO
 "iTómNO"

	)

25 
	#I_LEADER
 "iLódî"

	)

26 
	#LS_MEMBERS
 "lsMembîs"

	)

27 
	#LS_P2M
 "lsP2M"

	)

28 
	#I_UPLIMIT
 "iUpLimô"

	)

29 
	#I_GRADE_MIN
 "iGødeMö"

	)

30 
	#I_GRADE_MAX
 "iGødeMax"

	)

31 
	#I_LINEUP
 "iLöeup"

	)

32 
	#LS_REQ_PLAYERS
 "lsReqPœyîs"

	)

	@packages/game/uthash.h

24 #i‚de‡
UTHASH_H


25 
	#UTHASH_H


	)

27 
	~<°rög.h
>

28 
	~<°ddef.h
>

34 #ifde‡
_MSC_VER


35 #i‡
_MSC_VER
 >1600 && 
deföed
(
__˝lu•lus
)

36 
	#DECLTYPE
(
x
Ë(
	`de˛ty≥
(x))

	)

38 
	#NO_DECLTYPE


	)

39 
	#DECLTYPE
(
x
)

	)

42 
	#DECLTYPE
(
x
Ë(
	`__ty≥of
(x))

	)

45 #ifde‡
NO_DECLTYPE


46 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

48 **
_da_d°
 = (**)(&(
d°
)); \

49 *
_da_d°
 = (*)(
§c
); \

50 } 0)

	)

52 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

54 (
d°
Ë
	`DECLTYPE
(d°)(
§c
); \

55 } 0)

	)

59 #ifde‡
_MSC_VER


60 
	tuöt32_t
;

62 
	~<öây≥s.h
>

65 
	#UTHASH_VERSION
 1.9.3

	)

67 
	#uthash_Áèl
(
msg
Ë
	`exô
(-1Ë

	)

68 
	#uthash_mÆloc
(
sz
Ë
	`mÆloc
(szË

	)

69 
	#uthash_‰ì
(
±r
,
sz
Ë
	`‰ì
’åË

	)

71 
	#uthash_n€x∑nd_fyi
(
tbl
Ë

	)

72 
	#uthash_ex∑nd_fyi
(
tbl
Ë

	)

75 
	#HASH_INITIAL_NUM_BUCKETS
 32

	)

76 
	#HASH_INITIAL_NUM_BUCKETS_LOG2
 5

	)

77 
	#HASH_BKT_CAPACITY_THRESH
 10

	)

80 
	#ELMT_FROM_HH
(
tbl
,
hhp
Ë((*)(((*)(hhp)Ë- (—bl)->
hho
)))

	)

82 
	#HASH_FIND
(
hh
,
hód
,
key±r
,
keyÀn
,
out
) \

84 
_hf_bkt
,
_hf_hashv
; \

85 
out
=
NULL
; \

86 i‡(
hód
) { \

87 
	`HASH_FCN
(
key±r
,
keyÀn
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hf_hashv
, 
_hf_bkt
); \

88 i‡(
	`HASH_BLOOM_TEST
((
hód
)->
hh
.
tbl
, 
_hf_hashv
)) { \

89 
	`HASH_FIND_IN_BKT
((
hód
)->
hh
.
tbl
, hh, (hód)->hh.tbl->
buckës
[ 
_hf_bkt
 ], \

90 
key±r
,
keyÀn
,
out
); \

93 } 0)

	)

95 #ifde‡
HASH_BLOOM


96 
	#HASH_BLOOM_BITLEN
 (1ULL << 
HASH_BLOOM
)

	)

97 
	#HASH_BLOOM_BYTELEN
 (
HASH_BLOOM_BITLEN
/8Ë+ ((HASH_BLOOM_BITLEN%8Ë? 1:0)

	)

98 
	#HASH_BLOOM_MAKE
(
tbl
) \

100 (
tbl
)->
bloom_nbôs
 = 
HASH_BLOOM
; \

101 (
tbl
)->
bloom_bv
 = (
uöt8_t
*)
	`uthash_mÆloc
(
HASH_BLOOM_BYTELEN
); \

102 i‡(!((
tbl
)->
bloom_bv
)Ë{ 
	`uthash_Áèl
( "out of memory"); } \

103 
	`mem£t
((
tbl
)->
bloom_bv
, 0, 
HASH_BLOOM_BYTELEN
); \

104 (
tbl
)->
bloom_sig
 = 
HASH_BLOOM_SIGNATURE
; \

105 } 0);

	)

107 
	#HASH_BLOOM_FREE
(
tbl
) \

109 
	`uthash_‰ì
((
tbl
)->
bloom_bv
, 
HASH_BLOOM_BYTELEN
); \

110 } 0);

	)

112 
	#HASH_BLOOM_BITSET
(
bv
,
idx
Ë(bv[(idx)/8] |(1U << ((idx)%8)))

	)

113 
	#HASH_BLOOM_BITTEST
(
bv
,
idx
Ë(bv[(idx)/8] & (1U << ((idx)%8)))

	)

115 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
) \

116 
	`HASH_BLOOM_BITSET
((
tbl
)->
bloom_bv
, (
hashv
 & (
uöt32_t
)((1ULL << (tbl)->
bloom_nbôs
Ë- 1)))

	)

118 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
) \

119 
	`HASH_BLOOM_BITTEST
((
tbl
)->
bloom_bv
, (
hashv
 & (
uöt32_t
)((1ULL << (tbl)->
bloom_nbôs
Ë- 1)))

	)

122 
	#HASH_BLOOM_MAKE
(
tbl
)

	)

123 
	#HASH_BLOOM_FREE
(
tbl
)

	)

124 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
)

	)

125 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
Ë(1)

	)

128 
	#HASH_MAKE_TABLE
(
hh
,
hód
) \

130 (
hód
)->
hh
.
tbl
 = (
UT_hash_èbÀ
*)
	`uthash_mÆloc
( \

131 (
UT_hash_èbÀ
)); \

132 i‡(!((
hód
)->
hh
.
tbl
)Ë{ 
	`uthash_Áèl
( "out of memory"); } \

133 
	`mem£t
((
hód
)->
hh
.
tbl
, 0, (
UT_hash_èbÀ
)); \

134 (
hód
)->
hh
.
tbl
->
èû
 = &((head)->hh); \

135 (
hód
)->
hh
.
tbl
->
num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS
; \

136 (
hód
)->
hh
.
tbl
->
log2_num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS_LOG2
; \

137 (
hód
)->
hh
.
tbl
->
hho
 = (*)(&(head)->hh) - (*)(head); \

138 (
hód
)->
hh
.
tbl
->
buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

139 
HASH_INITIAL_NUM_BUCKETS
*(
UT_hash_buckë
)); \

140 i‡(! (
hód
)->
hh
.
tbl
->
buckës
Ë{ 
	`uthash_Áèl
( "out of memory"); } \

141 
	`mem£t
((
hód
)->
hh
.
tbl
->
buckës
, 0, \

142 
HASH_INITIAL_NUM_BUCKETS
*(
UT_hash_buckë
)); \

143 
	`HASH_BLOOM_MAKE
((
hód
)->
hh
.
tbl
); \

144 (
hód
)->
hh
.
tbl
->
sig«tuª
 = 
HASH_SIGNATURE
; \

145 } 0)

	)

147 
	#HASH_ADD
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
) \

148 
	`HASH_ADD_KEYPTR
(
hh
,
hód
,&
add
->
fõld«me
,
keyÀn_ö
,add)

	)

150 
	#HASH_ADD_KEYPTR
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
add
) \

152 
_ha_bkt
; \

153 (
add
)->
hh
.
√xt
 = 
NULL
; \

154 (
add
)->
hh
.
key
 = (*)
key±r
; \

155 (
add
)->
hh
.
keyÀn
 = 
keyÀn_ö
; \

156 i‡(!(
hód
)) { \

157 
hód
 = (
add
); \

158 (
hód
)->
hh
.
¥ev
 = 
NULL
; \

159 
	`HASH_MAKE_TABLE
(
hh
,
hód
); \

161 (
hód
)->
hh
.
tbl
->
èû
->
√xt
 = (
add
); \

162 (
add
)->
hh
.
¥ev
 = 
	`ELMT_FROM_HH
((
hód
)->hh.
tbl
, (hód)->hh.tbl->
èû
); \

163 (
hód
)->
hh
.
tbl
->
èû
 = &((
add
)->hh); \

165 (
hód
)->
hh
.
tbl
->
num_ôems
++; \

166 (
add
)->
hh
.
tbl
 = (
hód
)->hh.tbl; \

167 
	`HASH_FCN
(
key±r
,
keyÀn_ö
, (
hód
)->
hh
.
tbl
->
num_buckës
, \

168 (
add
)->
hh
.
hashv
, 
_ha_bkt
); \

169 
	`HASH_ADD_TO_BKT
((
hód
)->
hh
.
tbl
->
buckës
[
_ha_bkt
],&(
add
)->hh); \

170 
	`HASH_BLOOM_ADD
((
hód
)->
hh
.
tbl
,(
add
)->hh.
hashv
); \

171 
	`HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
keyÀn_ö
); \

172 
	`HASH_FSCK
(
hh
,
hód
); \

173 } 0)

	)

175 
	#HASH_TO_BKT
–
hashv
, 
num_bkts
, 
bkt
 ) \

177 
bkt
 = ((
hashv
Ë& ((
num_bkts
) - 1)); \

178 } 0)

	)

192 
	#HASH_DELETE
(
hh
,
hód
,
dñ±r
) \

194 
_hd_bkt
; \

195 
UT_hash_h™dÀ
 *
_hd_hh_dñ
; \

196 i‡–((
dñ±r
)->
hh
.
¥ev
 =
NULL
Ë&& ((dñ±r)->hh.
√xt
 == NULL) ) { \

197 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

198 (
hód
)->
hh
.
tbl
->
num_buckës
*(
UT_hash_buckë
) ); \

199 
	`HASH_BLOOM_FREE
((
hód
)->
hh
.
tbl
); \

200 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

201 
hód
 = 
NULL
; \

203 
_hd_hh_dñ
 = &((
dñ±r
)->
hh
); \

204 i‡((
dñ±r
Ë=
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,(hód)->hh.tbl->
èû
)) { \

205 (
hód
)->
hh
.
tbl
->
èû
 = \

206 (
UT_hash_h™dÀ
*)((*)((
dñ±r
)->
hh
.
¥ev
) + \

207 (
hód
)->
hh
.
tbl
->
hho
); \

209 i‡((
dñ±r
)->
hh
.
¥ev
) { \

210 ((
UT_hash_h™dÀ
*)((*)((
dñ±r
)->
hh
.
¥ev
) + \

211 (
hód
)->
hh
.
tbl
->
hho
))->
√xt
 = (
dñ±r
)->hh.next; \

213 
	`DECLTYPE_ASSIGN
(
hód
,(
dñ±r
)->
hh
.
√xt
); \

215 i‡(
_hd_hh_dñ
->
√xt
) { \

216 ((
UT_hash_h™dÀ
*)((*)
_hd_hh_dñ
->
√xt
 + \

217 (
hód
)->
hh
.
tbl
->
hho
))->
¥ev
 = \

218 
_hd_hh_dñ
->
¥ev
; \

220 
	`HASH_TO_BKT
–
_hd_hh_dñ
->
hashv
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hd_bkt
); \

221 
	`HASH_DEL_IN_BKT
(
hh
,(
hód
)->hh.
tbl
->
buckës
[
_hd_bkt
], 
_hd_hh_dñ
); \

222 (
hód
)->
hh
.
tbl
->
num_ôems
--; \

224 
	`HASH_FSCK
(
hh
,
hód
); \

225 } 0)

	)

229 
	#HASH_FIND_STR
(
hód
,
föd°r
,
out
) \

230 
	`HASH_FIND
(
hh
,
hód
,
föd°r
,
	`°æí
(föd°r),
out
)

	)

231 
	#HASH_ADD_STR
(
hód
,
°rfõld
,
add
) \

232 
	`HASH_ADD
(
hh
,
hód
,
°rfõld
,
	`°æí
(
add
->°rfõld),add)

	)

233 
	#HASH_FIND_INT
(
hód
,
födöt
,
out
) \

234 
	`HASH_FIND
(
hh
,
hód
,
födöt
,(),
out
)

	)

235 
	#HASH_ADD_INT
(
hód
,
ötfõld
,
add
) \

236 
	`HASH_ADD
(
hh
,
hód
,
ötfõld
,(),
add
)

	)

237 
	#HASH_FIND_PTR
(
hód
,
föd±r
,
out
) \

238 
	`HASH_FIND
(
hh
,
hód
,
föd±r
,(*),
out
)

	)

239 
	#HASH_ADD_PTR
(
hód
,
±rfõld
,
add
) \

240 
	`HASH_ADD
(
hh
,
hód
,
±rfõld
,(*),
add
)

	)

241 
	#HASH_DEL
(
hód
,
dñ±r
) \

242 
	`HASH_DELETE
(
hh
,
hód
,
dñ±r
)

	)

247 #ifde‡
HASH_DEBUG


248 
	#HASH_OOPS
(...Ëdÿ{ 
	`Ârötf
(
°dîr
,
__VA_ARGS__
); 
	`exô
(-1); } 0)

	)

249 
	#HASH_FSCK
(
hh
,
hód
) \

251 
_bkt_i
; \

252 
_cou¡
, 
_bkt_cou¡
; \

253 *
_¥ev
; \

254 
UT_hash_h™dÀ
 *
_thh
; \

255 i‡(
hód
) { \

256 
_cou¡
 = 0; \

257  
_bkt_i
 = 0; _bkt_ò< (
hód
)->
hh
.
tbl
->
num_buckës
; _bkt_i++) { \

258 
_bkt_cou¡
 = 0; \

259 
_thh
 = (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
hh_hód
; \

260 
_¥ev
 = 
NULL
; \

261 
_thh
) { \

262 i‡(
_¥ev
 !(*)(
_thh
->
hh_¥ev
)) { \

263 
	`HASH_OOPS
("invalid hh_prev %p,áctual %p\n", \

264 
_thh
->
hh_¥ev
, 
_¥ev
 ); \

266 
_bkt_cou¡
++; \

267 
_¥ev
 = (*)(
_thh
); \

268 
_thh
 = _thh->
hh_√xt
; \

270 
_cou¡
 +
_bkt_cou¡
; \

271 i‡((
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
 !
_bkt_cou¡
) { \

272 
	`HASH_OOPS
("invalid bucket count %d,áctual %d\n", \

273 (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
, 
_bkt_cou¡
); \

276 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

277 
	`HASH_OOPS
("invalid hh item count %d,áctual %d\n", \

278 (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
 ); \

281 
_cou¡
 = 0; \

282 
_¥ev
 = 
NULL
; \

283 
_thh
 = &(
hód
)->
hh
; \

284 
_thh
) { \

285 
_cou¡
++; \

286 i‡(
_¥ev
 !=(*)(
_thh
->
¥ev
)) { \

287 
	`HASH_OOPS
("invalidÖrev %p,áctual %p\n", \

288 
_thh
->
¥ev
, 
_¥ev
 ); \

290 
_¥ev
 = (*)
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
, 
_thh
); \

291 
_thh
 = ( _thh->
√xt
 ? (
UT_hash_h™dÀ
*)((*)(_thh->next) + \

292 (
hód
)->
hh
.
tbl
->
hho
Ë: 
NULL
 ); \

294 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

295 
	`HASH_OOPS
("invalidápp item count %d,áctual %d\n", \

296 (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
 ); \

299 } 0)

	)

301 
	#HASH_FSCK
(
hh
,
hód
)

	)

307 #ifde‡
HASH_EMIT_KEYS


308 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
) \

310 
_kÀn
 = 
fõldÀn
; \

311 
	`wrôe
(
HASH_EMIT_KEYS
, &
_kÀn
, (_klen)); \

312 
	`wrôe
(
HASH_EMIT_KEYS
, 
key±r
, 
fõldÀn
); \

313 } 0)

	)

315 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
)

	)

319 #ifde‡
HASH_FUNCTION


320 
	#HASH_FCN
 
HASH_FUNCTION


	)

322 
	#HASH_FCN
 
HASH_JEN


	)

326 
	#HASH_BER
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

328 
_hb_keyÀn
=
keyÀn
; \

329 *
_hb_key
=(*)(
key
); \

330 (
hashv
) = 0; \

331 
_hb_keyÀn
--Ë{ (
hashv
Ë((hashvË* 33Ë+ *
_hb_key
++; } \

332 
bkt
 = (
hashv
Ë& (
num_bkts
-1); \

333 } 0)

	)

338 
	#HASH_SAX
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

340 
_sx_i
; \

341 *
_hs_key
=(*)(
key
); \

342 
hashv
 = 0; \

343 
_sx_i
=0; _sx_ò< 
keyÀn
; _sx_i++) \

344 
hashv
 ^(hashv << 5Ë+ (hashv >> 2Ë+ 
_hs_key
[
_sx_i
]; \

345 
bkt
 = 
hashv
 & (
num_bkts
-1); \

346 } 0)

	)

348 
	#HASH_FNV
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

350 
_‚_i
; \

351 *
_hf_key
=(*)(
key
); \

352 
hashv
 = 2166136261UL; \

353 
_‚_i
=0; _‚_ò< 
keyÀn
; _fn_i++) \

354 
hashv
 = (hashv * 16777619Ë^ 
_hf_key
[
_‚_i
]; \

355 
bkt
 = 
hashv
 & (
num_bkts
-1); \

356 } 0);

	)

358 
	#HASH_OAT
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

360 
_ho_i
; \

361 *
_ho_key
=(*)(
key
); \

362 
hashv
 = 0; \

363 
_ho_i
=0; _ho_ò< 
keyÀn
; _ho_i++) { \

364 
hashv
 +
_ho_key
[
_ho_i
]; \

365 
hashv
 += (hashv << 10); \

366 
hashv
 ^= (hashv >> 6); \

368 
hashv
 += (hashv << 3); \

369 
hashv
 ^= (hashv >> 11); \

370 
hashv
 += (hashv << 15); \

371 
bkt
 = 
hashv
 & (
num_bkts
-1); \

372 } 0)

	)

374 
	#HASH_JEN_MIX
(
a
,
b
,
c
) \

376 
a
 -
b
;á -
c
;á ^= ( c >> 13 ); \

377 
b
 -
c
; b -
a
; b ^= (á << 8 ); \

378 
c
 -
a
; c -
b
; c ^= ( b >> 13 ); \

379 
a
 -
b
;á -
c
;á ^= ( c >> 12 ); \

380 
b
 -
c
; b -
a
; b ^= (á << 16 ); \

381 
c
 -
a
; c -
b
; c ^= ( b >> 5 ); \

382 
a
 -
b
;á -
c
;á ^= ( c >> 3 ); \

383 
b
 -
c
; b -
a
; b ^= (á << 10 ); \

384 
c
 -
a
; c -
b
; c ^= ( b >> 15 ); \

385 } 0)

	)

387 
	#HASH_JEN
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

389 
_hj_i
,
_hj_j
,
_hj_k
; \

390 *
_hj_key
=(*)(
key
); \

391 
hashv
 = 0xfeedbeef; \

392 
_hj_i
 = 
_hj_j
 = 0x9e3779b9; \

393 
_hj_k
 = 
keyÀn
; \

394 
_hj_k
 >= 12) { \

395 
_hj_i
 +(
_hj_key
[0] + ( ()_hj_key[1] << 8 ) \

396 + ( ()
_hj_key
[2] << 16 ) \

397 + ( ()
_hj_key
[3] << 24 ) ); \

398 
_hj_j
 +(
_hj_key
[4] + ( ()_hj_key[5] << 8 ) \

399 + ( ()
_hj_key
[6] << 16 ) \

400 + ( ()
_hj_key
[7] << 24 ) ); \

401 
hashv
 +(
_hj_key
[8] + ( ()_hj_key[9] << 8 ) \

402 + ( ()
_hj_key
[10] << 16 ) \

403 + ( ()
_hj_key
[11] << 24 ) ); \

405 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

407 
_hj_key
 += 12; \

408 
_hj_k
 -= 12; \

410 
hashv
 +
keyÀn
; \

411  
_hj_k
 ) { \

412 11: 
hashv
 +–()
_hj_key
[10] << 24 ); \

413 10: 
hashv
 +–()
_hj_key
[9] << 16 ); \

414 9: 
hashv
 +–()
_hj_key
[8] << 8 ); \

415 8: 
_hj_j
 +–()
_hj_key
[7] << 24 ); \

416 7: 
_hj_j
 +–()
_hj_key
[6] << 16 ); \

417 6: 
_hj_j
 +–()
_hj_key
[5] << 8 ); \

418 5: 
_hj_j
 +
_hj_key
[4]; \

419 4: 
_hj_i
 +–()
_hj_key
[3] << 24 ); \

420 3: 
_hj_i
 +–()
_hj_key
[2] << 16 ); \

421 2: 
_hj_i
 +–()
_hj_key
[1] << 8 ); \

422 1: 
_hj_i
 +
_hj_key
[0]; \

424 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

425 
bkt
 = 
hashv
 & (
num_bkts
-1); \

426 } 0)

	)

429 #unde‡
gë16bôs


430 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
)Ë|| deföed(
__WATCOMC__
) \

431 || 
deföed
(
_MSC_VER
Ë|| deföed (
__BORLANDC__
Ë|| 
	$deföed
 (
__TURBOC__
)

432 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

435 #i‡!
	`deföed
 (
gë16bôs
)

436 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8) \

437 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

439 
	#HASH_SFH
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

441 *
_sfh_key
=(*)(
key
); \

442 
uöt32_t
 
_sfh_tmp
, 
_sfh_Àn
 = 
keyÀn
; \

444 
_sfh_ªm
 = 
_sfh_Àn
 & 3; \

445 
_sfh_Àn
 >>= 2; \

446 
hashv
 = 0xcafebabe; \

449 ;
_sfh_Àn
 > 0; _sfh_len--) { \

450 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

451 
_sfh_tmp
 = (
	`gë16bôs
 (
_sfh_key
+2Ë<< 11Ë^ 
hashv
; \

452 
hashv
 = (hashv << 16Ë^ 
_sfh_tmp
; \

453 
_sfh_key
 +2* (
uöt16_t
); \

454 
hashv
 += hashv >> 11; \

458 
_sfh_ªm
) { \

459 3: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

460 
hashv
 ^= hashv << 16; \

461 
hashv
 ^
_sfh_key
[ (
uöt16_t
)] << 18; \

462 
hashv
 += hashv >> 11; \

464 2: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

465 
hashv
 ^= hashv << 11; \

466 
hashv
 += hashv >> 17; \

468 1: 
hashv
 +*
_sfh_key
; \

469 
hashv
 ^= hashv << 10; \

470 
hashv
 += hashv >> 1; \

474 
hashv
 ^= hashv << 3; \

475 
hashv
 += hashv >> 5; \

476 
hashv
 ^= hashv << 4; \

477 
hashv
 += hashv >> 17; \

478 
hashv
 ^= hashv << 25; \

479 
hashv
 += hashv >> 6; \

480 
bkt
 = 
hashv
 & (
num_bkts
-1); \

481 
	}
} 0);

	)

483 #ifde‡
HASH_USING_NO_STRICT_ALIASING


494 #i‡(
deföed
(
__i386__
Ë|| deföed(
__x86_64__
))

495 
	#HASH_MUR
 
HASH_MUR_UNALIGNED


	)

497 
	#HASH_MUR
 
HASH_MUR_ALIGNED


	)

501 
	#HASH_MUR_UNALIGNED
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

503 c⁄° 
_mur_m
 = 0x5bd1e995; \

504 c⁄° 
_mur_r
 = 24; \

505 
hashv
 = 0xˇ„babê^ 
keyÀn
; \

506 *
_mur_key
 = (*)(
key
); \

507 
uöt32_t
 
_mur_tmp
, 
_mur_Àn
 = 
keyÀn
; \

509 ;
_mur_Àn
 >= 4; _mur_len-=4) { \

510 
_mur_tmp
 = *(
uöt32_t
 *)
_mur_key
; \

511 
_mur_tmp
 *
_mur_m
; \

512 
_mur_tmp
 ^_mur_tm∞>> 
_mur_r
; \

513 
_mur_tmp
 *
_mur_m
; \

514 
hashv
 *
_mur_m
; \

515 
hashv
 ^
_mur_tmp
; \

516 
_mur_key
 += 4; \

519 
_mur_Àn
) \

521 3: 
hashv
 ^
_mur_key
[2] << 16; \

522 2: 
hashv
 ^
_mur_key
[1] << 8; \

523 1: 
hashv
 ^
_mur_key
[0]; \

524 
hashv
 *
_mur_m
; \

527 
hashv
 ^= hashv >> 13; \

528 
hashv
 *
_mur_m
; \

529 
hashv
 ^= hashv >> 15; \

531 
bkt
 = 
hashv
 & (
num_bkts
-1); \

532 } 0)

	)

535 
	#HASH_MUR_ALIGNED
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

537 c⁄° 
_mur_m
 = 0x5bd1e995; \

538 c⁄° 
_mur_r
 = 24; \

539 
hashv
 = 0xˇ„babê^ (
keyÀn
); \

540 *
_mur_key
 = (*)(
key
); \

541 
uöt32_t
 
_mur_Àn
 = 
keyÀn
; \

542 
_mur_Æign
 = ()
_mur_key
 & 3; \

544 i‡(
_mur_Æign
 && (
_mur_Àn
 >= 4)) { \

545 
_mur_t
 = 0, 
_mur_d
 = 0; \

546 
_mur_Æign
) { \

547 1: 
_mur_t
 |
_mur_key
[2] << 16; \

548 2: 
_mur_t
 |
_mur_key
[1] << 8; \

549 3: 
_mur_t
 |
_mur_key
[0]; \

551 
_mur_t
 <<(8 * 
_mur_Æign
); \

552 
_mur_key
 +4-
_mur_Æign
; \

553 
_mur_Àn
 -4-
_mur_Æign
; \

554 
_mur_¶
 = 8 * (4-
_mur_Æign
); \

555 
_mur_§
 = 8 * 
_mur_Æign
; \

557 ;
_mur_Àn
 >= 4; _mur_len-=4) { \

558 
_mur_d
 = *(*)
_mur_key
; \

559 
_mur_t
 = (_mur_à>> 
_mur_§
Ë| (
_mur_d
 << 
_mur_¶
); \

560 
_mur_k
 = 
_mur_t
; \

561 
_mur_k
 *
_mur_m
; \

562 
_mur_k
 ^_mur_k >> 
_mur_r
; \

563 
_mur_k
 *
_mur_m
; \

564 
hashv
 *
_mur_m
; \

565 
hashv
 ^
_mur_k
; \

566 
_mur_t
 = 
_mur_d
; \

567 
_mur_key
 += 4; \

569 
_mur_d
 = 0; \

570 if(
_mur_Àn
 >
_mur_Æign
) { \

571 
_mur_Æign
) { \

572 3: 
_mur_d
 |
_mur_key
[2] << 16; \

573 2: 
_mur_d
 |
_mur_key
[1] << 8; \

574 1: 
_mur_d
 |
_mur_key
[0]; \

576 
_mur_k
 = (
_mur_t
 >> 
_mur_§
Ë| (
_mur_d
 << 
_mur_¶
); \

577 
_mur_k
 *
_mur_m
; \

578 
_mur_k
 ^_mur_k >> 
_mur_r
; \

579 
_mur_k
 *
_mur_m
; \

580 
hashv
 *
_mur_m
; \

581 
hashv
 ^
_mur_k
; \

582 
_mur_k
 +
_mur_Æign
; \

583 
_mur_Àn
 -
_mur_Æign
; \

585 
_mur_Àn
) \

587 3: 
hashv
 ^
_mur_key
[2] << 16; \

588 2: 
hashv
 ^
_mur_key
[1] << 8; \

589 1: 
hashv
 ^
_mur_key
[0]; \

590 
hashv
 *
_mur_m
; \

593 
_mur_Àn
) \

595 3: 
_mur_d
 ^
_mur_key
[2] << 16; \

596 2: 
_mur_d
 ^
_mur_key
[1] << 8; \

597 1: 
_mur_d
 ^
_mur_key
[0]; \

598 0: 
hashv
 ^(
_mur_t
 >> 
_mur_§
Ë| (
_mur_d
 << 
_mur_¶
); \

599 
hashv
 *
_mur_m
; \

603 
hashv
 ^= hashv >> 13; \

604 
hashv
 *
_mur_m
; \

605 
hashv
 ^= hashv >> 15; \

607 ;
_mur_Àn
 >= 4; _mur_len-=4) { \

608 
_mur_k
 = *(*)
_mur_key
; \

609 
_mur_k
 *
_mur_m
; \

610 
_mur_k
 ^_mur_k >> 
_mur_r
; \

611 
_mur_k
 *
_mur_m
; \

612 
hashv
 *
_mur_m
; \

613 
hashv
 ^
_mur_k
; \

614 
_mur_key
 += 4; \

616 
_mur_Àn
) \

618 3: 
hashv
 ^
_mur_key
[2] << 16; \

619 2: 
hashv
 ^
_mur_key
[1] << 8; \

620 1: 
hashv
 ^
_mur_key
[0]; \

621 
hashv
 *
_mur_m
; \

624 
hashv
 ^= hashv >> 13; \

625 
hashv
 *
_mur_m
; \

626 
hashv
 ^= hashv >> 15; \

628 
bkt
 = 
hashv
 & (
num_bkts
-1); \

629 } 0)

	)

633 
	#HASH_KEYCMP
(
a
,
b
,
Àn
Ë
	`memcmp
◊,b,Àn)

	)

636 
	#HASH_FIND_IN_BKT
(
tbl
,
hh
,
hód
,
key±r
,
keyÀn_ö
,
out
) \

638 i‡(
hód
.
hh_hód
Ë
	`DECLTYPE_ASSIGN
(
out
,
	`ELMT_FROM_HH
(
tbl
,head.hh_head)); \

639 
out
=
NULL
; \

640 
out
) { \

641 i‡(
out
->
hh
.
keyÀn
 =
keyÀn_ö
) { \

642 i‡((
	`HASH_KEYCMP
(
out
->
hh
.
key
,
key±r
,
keyÀn_ö
)) == 0) ; \

644 i‡(
out
->
hh
.
hh_√xt
Ë
	`DECLTYPE_ASSIGN
(out,
	`ELMT_FROM_HH
(
tbl
,out->hh.hh_next)); \

645 
out
 = 
NULL
; \

647 } 0)

	)

650 
	#HASH_ADD_TO_BKT
(
hód
,
addhh
) \

652 
hód
.
cou¡
++; \

653 (
addhh
)->
hh_√xt
 = 
hód
.
hh_hód
; \

654 (
addhh
)->
hh_¥ev
 = 
NULL
; \

655 i‡(
hód
.
hh_hód
Ë{ (hód).hh_hód->
hh_¥ev
 = (
addhh
); } \

656 (
hód
).
hh_hód
=
addhh
; \

657 i‡(
hód
.
cou¡
 >((hód.
ex∑nd_mu…
+1Ë* 
HASH_BKT_CAPACITY_THRESH
) \

658 && (
addhh
)->
tbl
->
n€x∑nd
 != 1) { \

659 
	`HASH_EXPAND_BUCKETS
((
addhh
)->
tbl
); \

661 } 0)

	)

664 
	#HASH_DEL_IN_BKT
(
hh
,
hód
,
hh_dñ
) \

665 (
hód
).
cou¡
--; \

666 i‡((
hód
).
hh_hód
 =
hh_dñ
) { \

667 (
hód
).
hh_hód
 = 
hh_dñ
->
hh_√xt
; \

669 i‡(
hh_dñ
->
hh_¥ev
) { \

670 
hh_dñ
->
hh_¥ev
->
hh_√xt
 = hh_del->hh_next; \

672 i‡(
hh_dñ
->
hh_√xt
) { \

673 
hh_dñ
->
hh_√xt
->
hh_¥ev
 = hh_del->hh_prev; \

674 }

	)

705 
	#HASH_EXPAND_BUCKETS
(
tbl
) \

707 
_he_bkt
; \

708 
_he_bkt_i
; \

709 
UT_hash_h™dÀ
 *
_he_thh
, *
_he_hh_nxt
; \

710 
UT_hash_buckë
 *
_he_√w_buckës
, *
_he_√wbkt
; \

711 
_he_√w_buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

712 2 * 
tbl
->
num_buckës
 * (
UT_hash_buckë
)); \

713 i‡(!
_he_√w_buckës
Ë{ 
	`uthash_Áèl
( "out of memory"); } \

714 
	`mem£t
(
_he_√w_buckës
, 0, \

715 2 * 
tbl
->
num_buckës
 * (
UT_hash_buckë
)); \

716 
tbl
->
idól_chaö_maxÀn
 = \

717 (
tbl
->
num_ôems
 >> (tbl->
log2_num_buckës
+1)) + \

718 ((
tbl
->
num_ôems
 & (—bl->
num_buckës
*2)-1)) ? 1 : 0); \

719 
tbl
->
n⁄idól_ôems
 = 0; \

720 
_he_bkt_i
 = 0; _he_bkt_ò< 
tbl
->
num_buckës
; _he_bkt_i++) \

722 
_he_thh
 = 
tbl
->
buckës
[ 
_he_bkt_i
 ].
hh_hód
; \

723 
_he_thh
) { \

724 
_he_hh_nxt
 = 
_he_thh
->
hh_√xt
; \

725 
	`HASH_TO_BKT
–
_he_thh
->
hashv
, 
tbl
->
num_buckës
*2, 
_he_bkt
); \

726 
_he_√wbkt
 = &(
_he_√w_buckës
[ 
_he_bkt
 ]); \

727 i‡(++(
_he_√wbkt
->
cou¡
Ë> 
tbl
->
idól_chaö_maxÀn
) { \

728 
tbl
->
n⁄idól_ôems
++; \

729 
_he_√wbkt
->
ex∑nd_mu…
 = _he_√wbkt->
cou¡
 / \

730 
tbl
->
idól_chaö_maxÀn
; \

732 
_he_thh
->
hh_¥ev
 = 
NULL
; \

733 
_he_thh
->
hh_√xt
 = 
_he_√wbkt
->
hh_hód
; \

734 i‡(
_he_√wbkt
->
hh_hód
Ë_he_√wbkt->hh_hód->
hh_¥ev
 = \

735 
_he_thh
; \

736 
_he_√wbkt
->
hh_hód
 = 
_he_thh
; \

737 
_he_thh
 = 
_he_hh_nxt
; \

740 
	`uthash_‰ì
–
tbl
->
buckës
,Åbl->
num_buckës
*(
UT_hash_buckë
) ); \

741 
tbl
->
num_buckës
 *= 2; \

742 
tbl
->
log2_num_buckës
++; \

743 
tbl
->
buckës
 = 
_he_√w_buckës
; \

744 
tbl
->
öeff_ex∑nds
 = (tbl->
n⁄idól_ôems
 > (tbl->
num_ôems
 >> 1)) ? \

745 (
tbl
->
öeff_ex∑nds
+1) : 0; \

746 i‡(
tbl
->
öeff_ex∑nds
 > 1) { \

747 
tbl
->
n€x∑nd
=1; \

748 
	`uthash_n€x∑nd_fyi
(
tbl
); \

750 
	`uthash_ex∑nd_fyi
(
tbl
); \

751 } 0)

	)

757 
	#HASH_SORT
(
hód
,
cmpf˙
Ë
	`HASH_SRT
(
hh
,hód,cmpf˙)

	)

758 
	#HASH_SRT
(
hh
,
hód
,
cmpf˙
) \

760 
_hs_i
; \

761 
_hs_lo›ög
,
_hs_nmîges
,
_hs_ösize
,
_hs_psize
,
_hs_qsize
; \

762 
UT_hash_h™dÀ
 *
_hs_p
, *
_hs_q
, *
_hs_e
, *
_hs_li°
, *
_hs_èû
; \

763 i‡(
hód
) { \

764 
_hs_ösize
 = 1; \

765 
_hs_lo›ög
 = 1; \

766 
_hs_li°
 = &((
hód
)->
hh
); \

767 
_hs_lo›ög
) { \

768 
_hs_p
 = 
_hs_li°
; \

769 
_hs_li°
 = 
NULL
; \

770 
_hs_èû
 = 
NULL
; \

771 
_hs_nmîges
 = 0; \

772 
_hs_p
) { \

773 
_hs_nmîges
++; \

774 
_hs_q
 = 
_hs_p
; \

775 
_hs_psize
 = 0; \

776  
_hs_i
 = 0; _hs_ò< 
_hs_ösize
; _hs_i++ ) { \

777 
_hs_psize
++; \

778 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
) ? \

779 ((*)((*)(
_hs_q
->
√xt
) + \

780 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

781 i‡(! (
_hs_q
) ) ; \

783 
_hs_qsize
 = 
_hs_ösize
; \

784 (
_hs_psize
 > 0Ë|| ((
_hs_qsize
 > 0Ë&& 
_hs_q
 )) { \

785 i‡(
_hs_psize
 == 0) { \

786 
_hs_e
 = 
_hs_q
; \

787 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
) ? \

788 ((*)((*)(
_hs_q
->
√xt
) + \

789 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

790 
_hs_qsize
--; \

791 } i‡–(
_hs_qsize
 =0Ë|| !(
_hs_q
) ) { \

792 
_hs_e
 = 
_hs_p
; \

793 
_hs_p
 = (
UT_hash_h™dÀ
*)((_hs_p->
√xt
) ? \

794 ((*)((*)(
_hs_p
->
√xt
) + \

795 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

796 
_hs_psize
--; \

798 
	`cmpf˙
(
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
,
_hs_p
)), \

799 
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
,
_hs_q
))) \

801 
_hs_e
 = 
_hs_p
; \

802 
_hs_p
 = (
UT_hash_h™dÀ
*)((_hs_p->
√xt
) ? \

803 ((*)((*)(
_hs_p
->
√xt
) + \

804 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

805 
_hs_psize
--; \

807 
_hs_e
 = 
_hs_q
; \

808 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
) ? \

809 ((*)((*)(
_hs_q
->
√xt
) + \

810 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

811 
_hs_qsize
--; \

813 i‡–
_hs_èû
 ) { \

814 
_hs_èû
->
√xt
 = ((
_hs_e
) ? \

815 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,
_hs_e
Ë: 
NULL
); \

817 
_hs_li°
 = 
_hs_e
; \

819 
_hs_e
->
¥ev
 = ((
_hs_èû
) ? \

820 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,
_hs_èû
Ë: 
NULL
); \

821 
_hs_èû
 = 
_hs_e
; \

823 
_hs_p
 = 
_hs_q
; \

825 
_hs_èû
->
√xt
 = 
NULL
; \

826 i‡–
_hs_nmîges
 <= 1 ) { \

827 
_hs_lo›ög
=0; \

828 (
hód
)->
hh
.
tbl
->
èû
 = 
_hs_èû
; \

829 
	`DECLTYPE_ASSIGN
(
hód
,
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
, 
_hs_li°
)); \

831 
_hs_ösize
 *= 2; \

833 
	`HASH_FSCK
(
hh
,
hód
); \

835 } 0)

	)

842 
	#HASH_SELECT
(
hh_d°
, 
d°
, 
hh_§c
, 
§c
, 
c⁄d
) \

844 
_§c_bkt
, 
_d°_bkt
; \

845 *
_œ°_ñt
=
NULL
, *
_ñt
; \

846 
UT_hash_h™dÀ
 *
_§c_hh
, *
_d°_hh
, *
_œ°_ñt_hh
=
NULL
; \

847 
±rdiff_t
 
_d°_hho
 = ((*)(&(
d°
)->
hh_d°
) - (*)(dst)); \

848 i‡(
§c
) { \

849 
_§c_bkt
=0; _§c_bkà< (
§c
)->
hh_§c
.
tbl
->
num_buckës
; _src_bkt++) { \

850 
_§c_hh
 = (
§c
)->
hh_§c
.
tbl
->
buckës
[
_§c_bkt
].
hh_hód
; \

851 
_§c_hh
; \

852 
_§c_hh
 = _§c_hh->
hh_√xt
) { \

853 
_ñt
 = 
	`ELMT_FROM_HH
((
§c
)->
hh_§c
.
tbl
, 
_§c_hh
); \

854 i‡(
	`c⁄d
(
_ñt
)) { \

855 
_d°_hh
 = (
UT_hash_h™dÀ
*)(((*)
_ñt
Ë+ 
_d°_hho
); \

856 
_d°_hh
->
key
 = 
_§c_hh
->key; \

857 
_d°_hh
->
keyÀn
 = 
_§c_hh
->keylen; \

858 
_d°_hh
->
hashv
 = 
_§c_hh
->hashv; \

859 
_d°_hh
->
¥ev
 = 
_œ°_ñt
; \

860 
_d°_hh
->
√xt
 = 
NULL
; \

861 i‡(
_œ°_ñt_hh
Ë{ _œ°_ñt_hh->
√xt
 = 
_ñt
; } \

862 i‡(!
d°
) { \

863 
	`DECLTYPE_ASSIGN
(
d°
,
_ñt
); \

864 
	`HASH_MAKE_TABLE
(
hh_d°
,
d°
); \

866 
_d°_hh
->
tbl
 = (
d°
)->
hh_d°
.tbl; \

868 
	`HASH_TO_BKT
(
_d°_hh
->
hashv
, _d°_hh->
tbl
->
num_buckës
, 
_d°_bkt
); \

869 
	`HASH_ADD_TO_BKT
(
_d°_hh
->
tbl
->
buckës
[
_d°_bkt
],_dst_hh); \

870 (
d°
)->
hh_d°
.
tbl
->
num_ôems
++; \

871 
_œ°_ñt
 = 
_ñt
; \

872 
_œ°_ñt_hh
 = 
_d°_hh
; \

877 
	`HASH_FSCK
(
hh_d°
,
d°
); \

878 } 0)

	)

880 
	#HASH_CLEAR
(
hh
,
hód
) \

882 i‡(
hód
) { \

883 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

884 (
hód
)->
hh
.
tbl
->
num_buckës
*(
UT_hash_buckë
)); \

885 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

886 (
hód
)=
NULL
; \

888 } 0)

	)

890 #ifde‡
NO_DECLTYPE


891 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

892 (
ñ
)=(
hód
), (*(**)(&(
tmp
)))=(*)((hód)?(hód)->
hh
.
√xt
:
NULL
); \

893 
ñ
; (ñ)=(
tmp
),(*(**)(&—mp)))=(*)(—mp)?—mp)->
hh
.
√xt
:
NULL
))

	)

895 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

896 (
ñ
)=(
hód
),(
tmp
)=
	`DECLTYPE
”l)((hód)?(hód)->
hh
.
√xt
:
NULL
); \

897 
ñ
; (ñ)=(
tmp
),—mp)=
	`DECLTYPE
”l)(—mp)?—mp)->
hh
.
√xt
:
NULL
))

	)

901 
	#HASH_COUNT
(
hód
Ë
	`HASH_CNT
(
hh
,hód)

	)

902 
	#HASH_CNT
(
hh
,
hód
Ë((hód)?((hód)->hh.
tbl
->
num_ôems
):0)

	)

904 
	sUT_hash_buckë
 {

905 
UT_hash_h™dÀ
 *
	mhh_hód
;

906 
	mcou¡
;

920 
	mex∑nd_mu…
;

922 } 
	tUT_hash_buckë
;

925 
	#HASH_SIGNATURE
 0xa0111„1

	)

926 
	#HASH_BLOOM_SIGNATURE
 0xb12220f2

	)

928 
	sUT_hash_èbÀ
 {

929 
UT_hash_buckë
 *
	mbuckës
;

930 
	mnum_buckës
, 
	mlog2_num_buckës
;

931 
	mnum_ôems
;

932 
UT_hash_h™dÀ
 *
	mèû
;

933 
±rdiff_t
 
	mhho
;

937 
	midól_chaö_maxÀn
;

942 
	mn⁄idól_ôems
;

950 
	möeff_ex∑nds
, 
	mn€x∑nd
;

952 
uöt32_t
 
	msig«tuª
;

953 #ifde‡
HASH_BLOOM


954 
uöt32_t
 
	mbloom_sig
;

955 
uöt8_t
 *
	mbloom_bv
;

956 
	mbloom_nbôs
;

959 } 
	tUT_hash_èbÀ
;

961 
	sUT_hash_h™dÀ
 {

962 
UT_hash_èbÀ
 *
	mtbl
;

963 *
	m¥ev
;

964 *
	m√xt
;

965 
UT_hash_h™dÀ
 *
	mhh_¥ev
;

966 
UT_hash_h™dÀ
 *
	mhh_√xt
;

967 *
	mkey
;

968 
	mkeyÀn
;

969 
	mhashv
;

970 } 
	tUT_hash_h™dÀ
;

	@packages/gettext.c

2 
	~<liböé.h
>

3 
	~<loˇÀ.h
>

5 
	~"Õc.h
"

6 
	~"Õc_ö˛.h
"

7 
	~"Õc_¨gs_›.h
"

8 
	~"fs_Õc_›.h
"

10 
	$f__
()

12 
SET_ALL_ARGS
;

13 *
msgid
 = 
	`ARGS
(0)->
u
.
°rög
;

14 *
msg
 = 
	`gëãxt
(
msgid
);

15 
POP_ALL_ARGS
;

16 
	`c›y_™d_push_°rög
(
msg
);

17 
	}
}

19 
	$f_öô_gëãxt
()

21 
SET_ALL_ARGS
;

22 *
domaö
 = 
	`ARGS
(0)->
u
.
°rög
;

23 *
böd_domaö
 = 
	`ARGS
(1)->
u
.
°rög
;

25 *
æoˇÀ
 = 
	`£éoˇÀ
(
LC_ALL
, "");

26 *
rböd
 = 
	`bödãxtdomaö
(
domaö
, 
böd_domaö
);

27 *
rdomaö
 = 
	`ãxtdomaö
(
domaö
);

28 
POP_ALL_ARGS
;

30 
svÆue_t
 *
v
;

31 
m≠pög_t
 *
m
 = 
	`Æloˇã_m≠pög
(1);

33 
v
 = 
	`m≠_ö£π_°r_key
(
m
, "locale");

34 i‡(
æoˇÀ
) {

35 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
(
æoˇÀ
, "init gettext"));

37 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
("", "init gettext"));

40 
v
 = 
	`m≠_ö£π_°r_key
(
m
, "binddomain");

41 i‡(
rböd
) {

42 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
(
rböd
, "init gettext"));

44 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
("", "init gettext"));

47 
v
 = 
	`m≠_ö£π_°r_key
(
m
, "domain");

48 i‡(
rdomaö
) {

49 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
(
rdomaö
, "init gettext"));

51 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
("", "init gettext"));

54 
	`push_ª„d_m≠pög
(
m
);

55 
	}
}

	@packages/http_lpc.c

6 
	~<sys/queue.h
>

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<°rög.h
>

11 
	~<î∫o.h
>

12 
	~<as£π.h
>

14 
	~"esˇ≥.h
"

15 
	~"Õc.h
"

17 
	~"Õc_ö˛.h
"

18 
	~"Õc_¨gs_›.h
"

19 
	~"fs_Õc_›.h
"

21 
	~"hâp_Õc.h
"

23 
	sfs_hâp_Õc_s
 {

24 
evhâp_cmd_ty≥
 
	mmëhod
;

25 
evhâp_c⁄√˘i⁄
 *
	mevc⁄
;

26 
evhâp_ªque°
 *
	mªq
;

28 
svÆue_t
 
	mfun˘i⁄
;

29 
svÆue_t
 
	m¨g
;

30 } 
	tfs_hâp_Õc_t
;

33 
hâp_ªq_d⁄e_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

35 
ölöe
 
	$fs_hâp_Õc_comm_‰ì
(
fs_hâp_Õc_t
 *
hâp
)

37 
	`‰ì_svÆue
(&
hâp
->
fun˘i⁄
, "http");

38 
	`‰ì_svÆue
(&
hâp
->
¨g
, "http");

39 
	`‰ì
(
hâp
);

40 
	}
}

43 
	$fs_hâp_Õc_‰ì
(
fs_hâp_Õc_t
 *
hâp
)

46 
	`evhâp_c⁄√˘i⁄_‰ì
(
hâp
->
evc⁄
);

47 
	`fs_hâp_Õc_comm_‰ì
(
hâp
);

48 
	}
}

50 
	$fs_hâp_Õc_îr‹_‰ì
(
fs_hâp_Õc_t
 *
hâp
)

52 i‡(
hâp
->
ªq
 !
NULL
)

53 
	`evhâp_ªque°_‰ì
(
hâp
->
ªq
);

54 i‡(
hâp
->
evc⁄
 !
NULL
)

55 
	`evhâp_c⁄√˘i⁄_‰ì
(
hâp
->
evc⁄
);

56 
	`fs_hâp_Õc_comm_‰ì
(
hâp
);

57 
	}
}

59 
fs_hâp_Õc_t
 *
	$fs_hâp_Õc_√w
(*
ho°
, 
p‹t
, 
evhâp_cmd_ty≥
 
mëhod
,

60 
svÆue_t
 *
fun˘i⁄
, svÆue_à*
¨g
)

62 
fs_hâp_Õc_t
 *
hâp
 = 
	`ˇŒoc
(1, (*http));

63 
hâp
->
mëhod
 = method;

64 
	`assign_svÆue
(&
hâp
->
fun˘i⁄
, function);

65 
	`assign_svÆue
(&
hâp
->
¨g
,árg);

67 
hâp
->
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
(
ho°
, 
p‹t
);

68 i‡(
hâp
->
evc⁄
 =
NULL
)

69 
îr‹
;

71 
hâp
->
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªq_d⁄e_cb
, http);

72 i‡(
hâp
->
ªq
 =
NULL
)

73 
îr‹
;

75  
hâp
;

76 
îr‹
:

77 
	`fs_hâp_Õc_îr‹_‰ì
(
hâp
);

78  
NULL
;

79 
	}
}

81 
	$hâp_add_hódî
(
fs_hâp_Õc_t
 *
hâp
, 
m≠pög_t
 *
hódî
)

83 
i
;

84 
m≠pög_node_t
 *
ñt
;

85 
svÆue_t
 *
k
, *
v
;

87 
i
 = 0; i <
hódî
->
èbÀ_size
; ++i) {

88 
ñt
 = 
hódî
->
èbÀ
[
i
];É… !
NULL
;É… =É…->
√xt
) {

89 
k
 = 
ñt
->
vÆues
;

90 
v
 = 
ñt
->
vÆues
 + 1;

91 i‡(
k
->
ty≥
 !
T_STRING
 || 
v
->type != T_STRING)

93 
	`evhâp_add_hódî
(
hâp
->
ªq
->
ouçut_hódîs
, 
k
->
u
.
°rög
, 
v
->u.string);

98 
	}
}

100 
evbuf„r
 *
	$ícode_∑øm
(
m≠pög_t
 *
∑øms
)

102 
i
, 
fú°
;

103 
m≠pög_node_t
 *
ñt
;

104 
svÆue_t
 *
k
, *
v
;

105 *
ícode_k
, *
ícode_v
;

107 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

108 
fú°
 = 1, 
i
 = 0; i <
∑øms
->
èbÀ_size
; ++i) {

109 
ñt
 = 
∑øms
->
èbÀ
[
i
];É… !
NULL
;É… =É…->
√xt
) {

110 
k
 = 
ñt
->
vÆues
;

111 
v
 = 
ñt
->
vÆues
 + 1;

112 i‡(
k
->
ty≥
 !
T_STRING
 || 
v
->type != T_STRING) {

113 
	`evbuf„r_‰ì
(
buf
);

114  
NULL
;

117 i‡(
fú°
)

118 
fú°
 = 0;

120 
	`evbuf„r_add
(
buf
, "&", 1);

122 
ícode_k
 = 
	`uæ_ósy_esˇ≥
(
k
->
u
.
°rög
, 0);

123 
ícode_v
 = 
	`uæ_ósy_esˇ≥
(
v
->
u
.
°rög
, 0);

124 
	`evbuf„r_add
(
buf
, 
ícode_k
, 
	`°æí
(encode_k));

125 
	`evbuf„r_add
(
buf
, "=", 1);

126 
	`evbuf„r_add
(
buf
, 
ícode_v
, 
	`°æí
(encode_v));

127 
	`‰ì
(
ícode_k
);

128 
	`‰ì
(
ícode_v
);

132  
buf
;

133 
	}
}

162 
	$hâp_add_po°_d©a
(
fs_hâp_Õc_t
 *
hâp
, *
d©a
, 
size_t
 
size
)

164 i‡(
d©a
 =
NULL
 || 
size
 == 0)

167 
	`evbuf„r_add
(
hâp
->
ªq
->
ouçut_buf„r
, 
d©a
, 
size
);

168 
	}
}

170 
	sfs_hâp_uri_s
 {

171 *
	mho°
;

172 
	mp‹t
;

173 *
	m∑th
;

174 } 
	tfs_hâp_uri_t
;

176 
	sfs_hâp_ªq_öfo_s
 {

177 
evhâp_cmd_ty≥
 
	mmëhod
;

178 
m≠pög_t
 *
	mhódî
;

179 *
	mpo°
;

180 
size_t
 
	mpo°_Àn
;

181 } 
	tfs_hâp_ªq_öfo_t
;

183 
	sfs_hâp_h™dÀr_s
 {

184 
svÆue_t
 *
	mfun˘i⁄
;

185 
svÆue_t
 *
	m¨g
;

186 } 
	tfs_hâp_h™dÀr_t
;

188 
	$hâp_ªque°
(
fs_hâp_uri_t
 *
uri
, 
fs_hâp_ªq_öfo_t
 *
ªq_öfo
, 
fs_hâp_h™dÀr_t
 *
h™dÀr
)

190 
fs_hâp_Õc_t
 *
hâp
 = 
	`fs_hâp_Õc_√w
(
uri
->
ho°
, uri->
p‹t
, 
ªq_öfo
->
mëhod
, 
h™dÀr
->
fun˘i⁄
, h™dÀr->
¨g
);

191 i‡(
hâp
 =
NULL
)

194 i‡(
	`hâp_add_hódî
(
hâp
, 
ªq_öfo
->
hódî
))

195 
îr‹
;

197 i‡(
ªq_öfo
->
mëhod
 =
EVHTTP_REQ_POST
)

198 
	`hâp_add_po°_d©a
(
hâp
, 
ªq_öfo
->
po°
,Ñeq_öfo->
po°_Àn
);

201 
evhâp_cmd_ty≥
 
mëhod
 = 
ªq_öfo
->mëhod =
EVHTTP_REQ_HEAD
 ? 
EVHTTP_REQ_GET
:Ñeq_info->method;

202 i‡(
	`evhâp_make_ªque°
(
hâp
->
evc⁄
, hâp->
ªq
, 
mëhod
, 
uri
->
∑th
)) {

205 
	`fs_hâp_Õc_‰ì
(
hâp
);

210 
îr‹
:

211 
	`fs_hâp_Õc_îr‹_‰ì
(
hâp
);

213 
	}
}

215 
m≠pög_t
 *
	$hâp_dump_hódî
(
fs_hâp_Õc_t
 *
hâp
)

217 *
°r
;

218 
evkeyvÆ
 *
hódî
;

219 
svÆue_t
 *
v
;

220 
svÆue_t
 
key
 = 
c⁄°0u
;

221 
svÆue_t
 
vÆue
 = 
c⁄°0u
;

222 
m≠pög_t
 *
m
 = 
	`Æloˇã_m≠pög
(1);

224 
	`TAILQ_FOREACH
(
hódî
, 
hâp
->
ªq
->
öput_hódîs
, 
√xt
) {

225 
°r
 = 
	`°rög_c›y
(
hódî
->
key
, "http dump header");

226 
	`£t_svÆue_mÆlo˚d_°rög
(&
key
, 
°r
);

227 
°r
 = 
	`°rög_c›y
(
hódî
->
vÆue
, "http dump header");

228 
	`£t_svÆue_mÆlo˚d_°rög
(&
vÆue
, 
°r
);

230 
v
 = 
	`föd_f‹_ö£π
(
m
, &
key
, 0);

231 
	`assign_svÆue
(
v
, &
vÆue
);

233 
	`‰ì_svÆue
(&
key
, "http dump header");

234 
	`‰ì_svÆue
(&
vÆue
, "http dump header");

237  
m
;

238 
	}
}

240 
	$hâp_ªq_d⁄e_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

242 
fs_hâp_Õc_t
 *
hâp
 = 
¨g
;

243 
¨gc
 = 3;

250 
	`push_svÆue
(&
hâp
->
¨g
);

252 
	`push_numbî
(
hâp
->
ªq
->
ª•⁄£_code
);

255 i‡(
hâp
->
mëhod
 =
EVHTTP_REQ_HEAD
) {

256 
m≠pög_t
 *
m
 = 
	`hâp_dump_hódî
(
hâp
);

257 
	`push_ª„d_m≠pög
(
m
);

263 
íd
 = '\0';

264 
	`evbuf„r_add
(
hâp
->
ªq
->
öput_buf„r
, &
íd
, (end));

265 *
°r
 = (*)
	`EVBUFFER_DATA
(
hâp
->
ªq
->
öput_buf„r
);

266 
	`c›y_™d_push_°rög
(
°r
);

269 
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
hâp
->
fun˘i⁄
.
u
.
Â
, 
¨gc
);

271 
	`fs_hâp_Õc_‰ì
(
hâp
);

272 
	}
}

274 
	#FS_HTTP_METHOD_GET
 0

	)

275 
	#FS_HTTP_METHOD_POST
 1

	)

276 
	#FS_HTTP_METHOD_HEAD
 2

	)

278 
	#FS_HTTP_ERROR_URI
 -2

	)

279 
	#FS_HTTP_ERROR_REQ_INFO
 -3

	)

280 
	#FS_HTTP_ERROR_HANDLER
 -4

	)

283 
ölöe
 
	$uri_öô
(
fs_hâp_uri_t
 *
uri
, 
¨øy_t
 *
¨g
)

285 
	#FS_URI_HOST_IDX
 0

	)

286 
	#FS_URI_PORT_IDX
 1

	)

287 
	#FS_URI_PATH_IDX
 2

	)

289 i‡(
¨g
->
size
 != 3) {

290 
îr‹
;

292 i‡(
¨g
->
ôem
[
FS_URI_HOST_IDX
].
ty≥
 !
T_STRING
) {

293 
îr‹
;

295 i‡(
¨g
->
ôem
[
FS_URI_PORT_IDX
].
ty≥
 !
T_NUMBER
) {

296 
îr‹
;

298 i‡(
¨g
->
ôem
[
FS_URI_PATH_IDX
].
ty≥
 !
T_STRING
) {

299 
îr‹
;

302 
uri
->
ho°
 = 
¨g
->
ôem
[
FS_URI_HOST_IDX
].
u
.
°rög
;

303 
uri
->
p‹t
 = 
¨g
->
ôem
[
FS_URI_PORT_IDX
].
u
.
numbî
;

304 
uri
->
∑th
 = 
¨g
->
ôem
[
FS_URI_PATH_IDX
].
u
.
°rög
;

307 
îr‹
:

308  
FS_HTTP_ERROR_URI
;

309 
	}
}

311 
ölöe
 
	$ªq_öfo_öô
(
fs_hâp_ªq_öfo_t
 *
ªq_öfo
, 
¨øy_t
 *
¨g
)

313 
	#FS_REQ_INFO_METHOD_IDX
 0

	)

314 
	#FS_REQ_INFO_HEADER_IDX
 1

	)

315 
	#FS_REQ_INFO_POST_IDX
 2

	)

317 i‡(
¨g
->
size
 != 2 &&árg->size != 3) {

318 
îr‹
;

320 i‡(
¨g
->
ôem
[
FS_REQ_INFO_METHOD_IDX
].
ty≥
 !
T_NUMBER
) {

321 
îr‹
;

323 i‡(
¨g
->
ôem
[
FS_REQ_INFO_HEADER_IDX
].
ty≥
 !
T_MAPPING
) {

324 
îr‹
;

327 
mëhod
 = 
¨g
->
ôem
[
FS_REQ_INFO_METHOD_IDX
].
u
.
numbî
;

328 
mëhod
) {

329 
FS_HTTP_METHOD_HEAD
:

330 
ªq_öfo
->
mëhod
 = 
EVHTTP_REQ_HEAD
;

332 
FS_HTTP_METHOD_POST
:

333 
ªq_öfo
->
mëhod
 = 
EVHTTP_REQ_POST
;

336 
ªq_öfo
->
mëhod
 = 
EVHTTP_REQ_GET
;

339 
ªq_öfo
->
hódî
 = 
¨g
->
ôem
[
FS_REQ_INFO_HEADER_IDX
].
u
.
m≠
;

341 i‡(
¨g
->
size
 == 3) {

342 i‡(
¨g
->
ôem
[
FS_REQ_INFO_POST_IDX
].
ty≥
 !
T_STRING
) {

343 
îr‹
;

345 
svÆue_t
 *
po°
 = &
¨g
->
ôem
[
FS_REQ_INFO_POST_IDX
];

346 
ªq_öfo
->
po°
 =Öo°->
u
.
°rög
;

347 
ªq_öfo
->
po°_Àn
 = 
	`SVALUE_STRLEN
(
po°
);

349 
ªq_öfo
->
po°
 = 
NULL
;

350 
ªq_öfo
->
po°_Àn
 = 0;

354 
îr‹
:

355  
FS_HTTP_ERROR_REQ_INFO
;

356 
	}
}

358 
ölöe
 
	$h™dÀr_öô
(
fs_hâp_h™dÀr_t
 *
h™dÀr
, 
¨øy_t
 *
¨g
)

360 
	#FS_HANDLER_FUNCTION_IDX
 0

	)

361 
	#FS_HANDLER_ARG_IDX
 1

	)

363 i‡(
¨g
->
size
 != 2) {

364 
îr‹
;

366 i‡(
¨g
->
ôem
[
FS_HANDLER_FUNCTION_IDX
].
ty≥
 !
T_FUNCTION
) {

367 
îr‹
;

371 
h™dÀr
->
fun˘i⁄
 = &
¨g
->
ôem
[
FS_HANDLER_FUNCTION_IDX
];

372 
h™dÀr
->
¨g
 = &¨g->
ôem
[
FS_HANDLER_ARG_IDX
];

375 
îr‹
:

376  
FS_HTTP_ERROR_HANDLER
;

377 
	}
}

379 
	$f_fs_hâp_ªque°
()

381 
fs_hâp_uri_t
 
uri
;

382 
fs_hâp_ªq_öfo_t
 
ªq_öfo
;

383 
fs_hâp_h™dÀr_t
 
h™dÀr
;

384 
ªt
 = -1;

386 
SET_ALL_ARGS
;

388 
¨øy_t
 *
¨g_uri
 = 
	`ARGS
(0)->
u
.
¨r
;

389 
¨øy_t
 *
¨g_ªq_öfo
 = 
	`ARGS
(1)->
u
.
¨r
;

390 
¨øy_t
 *
¨g_h™dÀr
 = 
	`ARGS
(2)->
u
.
¨r
;

392 i‡((
ªt
 = 
	`uri_öô
(&
uri
, 
¨g_uri
)))

393 
íd
;

394 i‡((
ªt
 = 
	`ªq_öfo_öô
(&
ªq_öfo
, 
¨g_ªq_öfo
)))

395 
íd
;

396 i‡((
ªt
 = 
	`h™dÀr_öô
(&
h™dÀr
, 
¨g_h™dÀr
)))

397 
íd
;

399 
ªt
 = 
	`hâp_ªque°
(&
uri
, &
ªq_öfo
, &
h™dÀr
);

400 
íd
:

401 
POP_ALL_ARGS
;

402 
	`push_numbî
(
ªt
);

403 
	}
}

405 
	$f_fs_uæ_ícode_m≠
()

407 
íd
 = '\0';

409 
SET_ALL_ARGS
;

411 
m≠pög_t
 *
∑øm
 = 
	`ARGS
(0)->
u
.
m≠
;

412 
evbuf„r
 *
d©a
 = 
	`ícode_∑øm
(
∑øm
);

413 
POP_ALL_ARGS
;

415 i‡(
d©a
 =
NULL
) {

416 
	`push_undeföed
();

420 
	`evbuf„r_add
(
d©a
, &
íd
, (end));

421 
	`c›y_™d_push_°rög
((*)
	`EVBUFFER_DATA
(
d©a
));

422 
	`evbuf„r_‰ì
(
d©a
);

423 
	}
}

425 
	$f_fs_uæ_ícode
()

427 
SET_ALL_ARGS
;

428 *
ícode
 = 
	`uæ_ósy_esˇ≥
(
	`ARGS
(0)->
u
.
°rög
, 0);

429 *
°r
 = 
	`°rög_c›y
(
ícode
, "httpÉncode");

430 
	`‰ì
(
ícode
);

431 
	`put_mÆlo˚d_°rög
(
°r
);

432 
	}
}

433 
	$f_fs_uæ_decode
()

435 
SET_ALL_ARGS
;

436 *
decode
 = 
	`uæ_ósy_u√sˇ≥
(
	`ARGS
(0)->
u
.
°rög
, 0, 
NULL
);

437 *
°r
 = 
	`°rög_c›y
(
decode
, "http decode");

438 
	`‰ì
(
decode
);

439 
	`put_mÆlo˚d_°rög
(
°r
);

440 
	}
}

455 
m≠pög_t
 *
	$keyvÆ_to_m≠pög
(
evkeyvÆq
 *
keyvÆs
)

457 
evkeyvÆ
 *
∑ú
;

458 
svÆue_t
 *
v
;

459 
m≠pög_t
 *
m
 = 
	`Æloˇã_m≠pög
(1);

461 
	`TAILQ_FOREACH
(
∑ú
, 
keyvÆs
, 
√xt
) {

462 
v
 = 
	`m≠_ö£π_°r_key
(
m
, 
∑ú
->
key
);

463 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
(
∑ú
->
vÆue
, "http server filter"));

466  
m
;

467 
	}
}

469 
m≠pög_t
 *
	$∑r£_d©a
(c⁄° *
d©a
)

471 
svÆue_t
 *
v
;

472 *
p
;

473 
m≠pög_t
 *
m
 = 
	`Æloˇã_m≠pög
(1);

474 *
ad©a
 = 
	`°rdup
(
d©a
);

476 
p
 = 
ad©a
;

477 
p
 !
NULL
 && *p != '\0') {

478 *
key
, *
vÆue
;

479 *
dkey
, *
dvÆue
;

480 *
¨gumít
 = 
	`°r£p
(&
p
, "&");

482 
vÆue
 = 
¨gumít
;

483 
key
 = 
	`°r£p
(&
vÆue
, "=");

484 i‡(
vÆue
 =
NULL
) {

488 
dkey
 = 
	`uæ_ósy_u√sˇ≥
(
key
, 0, 
NULL
);

489 
dvÆue
 = 
	`uæ_ósy_u√sˇ≥
(
vÆue
, 0, 
NULL
);

491 
v
 = 
	`m≠_ö£π_°r_key
(
m
, 
dkey
);

492 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
(
dvÆue
, "http serverÖarse data"));

494 
	`‰ì
(
dkey
);

495 
	`‰ì
(
dvÆue
);

498 
	`‰ì
(
ad©a
);

499  
m
;

500 
	}
}

502 
	$hâp_cb
(
evhâp_ªque°
 *
ªq
, *
hâp
)

504 
svÆue_t
 *
v
, *
ªt
;

505 
svÆue_t
 
¨g
;

506 
m≠pög_t
 *
md©a
;

507 
tmp
[512];

509 
m≠pög_t
 *
m
 = 
	`Æloˇã_m≠pög
(1);

510 
m≠pög_t
 *
ªque°
 = 
	`Æloˇã_m≠pög
(1);

513 
ªq
->
ty≥
) {

514 
EVHTTP_REQ_POST
:

515 
v
 = 
	`m≠_ö£π_°r_key
(
ªque°
, "method");

516 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
("POST", "http server"));

518 
EVHTTP_REQ_GET
:

519 
v
 = 
	`m≠_ö£π_°r_key
(
ªque°
, "method");

520 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
("GET", "http server"));

522 
EVHTTP_REQ_HEAD
:

524 
	`‰ì_m≠pög
(
m
);

525 
	`‰ì_m≠pög
(
ªque°
);

526 
	`evhâp_£nd_îr‹
(
ªq
, 501, "Not Implemented");

530 
v
 = 
	`m≠_ö£π_°r_key
(
ªque°
, "remote_host");

531 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
(
ªq
->
ªmŸe_ho°
, "http server"));

533 
v
 = 
	`m≠_ö£π_°r_key
(
ªque°
, "uri");

534 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
(
ªq
->
uri
, "http server"));

536 
	`mem£t
(
tmp
, 0, (tmp));

537 
	`•rötf
(
tmp
, "HTTP/%d.%d", 
ªq
->
maj‹
,Ñeq->
mö‹
);

538 
v
 = 
	`m≠_ö£π_°r_key
(
ªque°
, "version");

539 
	`£t_svÆue_mÆlo˚d_°rög
(
v
, 
	`°rög_c›y
(
tmp
, "http server"));

541 
v
 = 
	`m≠_ö£π_°r_key
(
m
, "request");

542 
	`£t_svÆue_m≠pög
(
v
, 
ªque°
);

545 
m≠pög_t
 *
hódî
 = 
	`keyvÆ_to_m≠pög
(
ªq
->
öput_hódîs
);

546 
v
 = 
	`m≠_ö£π_°r_key
(
m
, "header");

547 
	`£t_svÆue_m≠pög
(
v
, 
hódî
);

551 i‡(
ªq
->
ty≥
 =
EVHTTP_REQ_POST
) {

552 
Àn
 = 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
);

553 i‡(
Àn
 > 0) {

554 *
d©a
 = 
	`mÆloc
(
Àn
 + 1);

555 
	`mem˝y
(
d©a
, 
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
Àn
);

556 
d©a
[
Àn
] = '\0';

557 
md©a
 = 
	`∑r£_d©a
(
d©a
);

558 
v
 = 
	`m≠_ö£π_°r_key
(
m
, "data");

559 
	`£t_svÆue_m≠pög
(
v
, 
md©a
);

560 
	`‰ì
(
d©a
);

562 } i‡(
ªq
->
ty≥
 =
EVHTTP_REQ_GET
) {

563 *
quîy_öfo
 = 
	`°rchr
(
ªq
->
uri
, '?');

564 i‡(
quîy_öfo
 !
NULL
) {

565 
md©a
 = 
	`∑r£_d©a
(
quîy_öfo
 + 1);

566 
v
 = 
	`m≠_ö£π_°r_key
(
m
, "data");

567 
	`£t_svÆue_m≠pög
(
v
, 
md©a
);

571 
	`£t_svÆue_m≠pög
(&
¨g
, 
m
);

572 
ªt
 = 
	`ˇŒ_s¸ùt_func
("/rc/hâp", "HâpSîvîCB", "m", &
¨g
);

573 
	`‰ì_m≠pög
(
m
);

574 i‡(
ªt
 =
NULL
 || 
	`IS_LPC_UNDEF
‘ëË||Ñë->
ty≥
 !
T_STRING
) {

575 
	`evhâp_£nd_îr‹
(
ªq
, 500, "Internal Server Error");

577 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

578 
	`evbuf„r_add
(
evb
, 
ªt
->
u
.
°rög
, 
	`SVALUE_STRLEN
(ret));

579 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "ok", 
evb
);

580 
	`evbuf„r_‰ì
(
evb
);

583 
	}
}

585 
evhâp
 *
	$hâp_£rvî_öô
(
evít_ba£
 *
ba£
, *
ù
, 
p‹t
)

587 
evhâp
 *
myhâp
;

589 
myhâp
 = 
	`evhâp_√w
(
ba£
);

590 i‡(
	`evhâp_böd_sockë
(
myhâp
, 
ù
, 
p‹t
) == -1) {

591 
	`evhâp_‰ì
(
myhâp
);

592 
	`Ârötf
(
°dîr
, "hâ∞£rvî böd sockëÉº‹.ho°=%s,p‹t=%d\n", 
ù
, 
p‹t
);

593  
NULL
;

597 
	`evhâp_£t_gícb
(
myhâp
, 
hâp_cb
, myhttp);

599  
myhâp
;

600 
	}
}

602 
	$hâp_£rvî_de°roy
(
evhâp
 *
hâp
)

604 
	`evhâp_‰ì
(
hâp
);

605 
	}
}

	@packages/http_lpc.h

3 
	~<evít.h
>

4 
	~<evhâp.h
>

5 
evhâp
 *
hâp_£rvî_öô
(
evít_ba£
 *
ba£
, *
ù
, 
p‹t
);

6 
hâp_£rvî_de°roy
(
evhâp
 *
hâp
);

	@packages/kern_timeout.c

27 
	~<°dlib.h
>

29 
	~"timeout.h
"

30 
	~"queue.h
"

39 
	#BUCKETS
 1024

	)

40 
	#WHEELSIZE
 256

	)

41 
	#WHEELMASK
 255

	)

42 
	#WHEELBITS
 8

	)

44 
cúcq
 
	gtimeout_whìl
[
BUCKETS
];

45 
cúcq
 
	gtimeout_todo
;

47 
	#MASKWHEEL
(
whìl
, 
time
Ë((—imeË>> ((whìl)*
WHEELBITS
)Ë& 
WHEELMASK
)

	)

49 
	#BUCKET
(
ªl
, 
abs
) \

50 (
timeout_whìl
[ \

51 ((
ªl
Ë<(1 << (2*
WHEELBITS
))) \

52 ? ((
ªl
Ë<(1 << 
WHEELBITS
)) \

53 ? 
	`MASKWHEEL
(0, (
abs
)) \

54 : 
	`MASKWHEEL
(1, (
abs
)Ë+ 
WHEELSIZE
 \

55 : ((
ªl
Ë<(1 << (3*
WHEELBITS
))) \

56 ? 
	`MASKWHEEL
(2, (
abs
)Ë+ 2*
WHEELSIZE
 \

57 : 
	`MASKWHEEL
(3, (
abs
)Ë+ 3*
WHEELSIZE
])

	)

59 
	#MOVEBUCKET
(
whìl
, 
time
) \

60 
	`CIRCQ_APPEND
(&
timeout_todo
, \

61 &
timeout_whìl
[
	`MASKWHEEL
((
whìl
), (
time
)Ë+ (whìl)*
WHEELSIZE
])

	)

67 
	#CIRCQ_INIT
(
ñem
) do { \

68 (
ñem
)->
√xt
 = (elem); \

69 (
ñem
)->
¥ev
 = (elem); \

70 } 0)

	)

72 
	#CIRCQ_INSERT
(
ñem
, 
li°
) do { \

73 (
ñem
)->
¥ev
 = (
li°
)->prev; \

74 (
ñem
)->
√xt
 = (
li°
); \

75 (
li°
)->
¥ev
->
√xt
 = (
ñem
); \

76 (
li°
)->
¥ev
 = (
ñem
); \

77 } 0)

	)

79 
	#CIRCQ_APPEND
(
f°
, 
¢d
) do { \

80 i‡(!
	`CIRCQ_EMPTY
(
¢d
)) { \

81 (
f°
)->
¥ev
->
√xt
 = (
¢d
)->next;\

82 (
¢d
)->
√xt
->
¥ev
 = (
f°
)->prev;\

83 (
¢d
)->
¥ev
->
√xt
 = (
f°
); \

84 (
f°
)->
¥ev
 = (
¢d
)->prev; \

85 
	`CIRCQ_INIT
(
¢d
); \

87 } 0)

	)

89 
	#CIRCQ_REMOVE
(
ñem
) do { \

90 (
ñem
)->
√xt
->
¥ev
 = (elem)->prev; \

91 (
ñem
)->
¥ev
->
√xt
 = (elem)->next; \

92 
	`_Q_INVALIDATE
((
ñem
)->
¥ev
); \

93 
	`_Q_INVALIDATE
((
ñem
)->
√xt
); \

94 } 0)

	)

96 
	#CIRCQ_FIRST
(
ñem
Ë(”Àm)->
√xt
)

	)

98 
	#CIRCQ_EMPTY
(
ñem
Ë(
	`CIRCQ_FIRST
”ÀmË=”Àm))

	)

113 
	gticks
 = 0;

116 
	$timeout_°¨tup
()

118 
b
;

120 
	`CIRCQ_INIT
(&
timeout_todo
);

121 
b
 = 0; b < 
BUCKETS
; b++)

122 
	`CIRCQ_INIT
(&
timeout_whìl
[
b
]);

123 
	}
}

125 
_timeout_£t
(
timeout
 *
√w
, (*
‚
)(timeouà*, *), *
¨g
)

127 
√w
->
to_func
 = 
‚
;

128 
√w
->
to_¨g
 = 
¨g
;

130 
√w
->
to_Êags
 = 
TIMEOUT_INITIALIZED
;

131 
	}
}

134 
	$_timeout_add
(
timeout
 *
√w
, 
to_ticks
)

136 
ﬁd_time
;

138 #ifde‡
DIAGNOSTIC


139 i‡(!(
√w
->
to_Êags
 & 
TIMEOUT_INITIALIZED
))

140 
	`∑nic
("timeout_add:Çot initialized");

141 i‡(
to_ticks
 < 0)

142 
	`∑nic
("timeout_add:Åo_tick†(%dË< 0", 
to_ticks
);

146 
ﬁd_time
 = 
√w
->
to_time
;

149 
√w
->
to_time
 = 
to_ticks
 + 
ticks
;

152 
√w
->
to_Êags
 &~
TIMEOUT_TRIGGERED
;

159 i‡(
√w
->
to_Êags
 & 
TIMEOUT_ONQUEUE
) {

162 i‡(
√w
->
to_time
 - 
ticks
 < 
ﬁd_time
 -Åicks) {

163 
	`CIRCQ_REMOVE
(&
√w
->
to_li°
);

164 
	`CIRCQ_INSERT
(&
√w
->
to_li°
, &
timeout_todo
);

167 
√w
->
to_Êags
 |
TIMEOUT_ONQUEUE
;

168 
	`CIRCQ_INSERT
(&
√w
->
to_li°
, &
timeout_todo
);

171 
	}
}

173 
	$_timeout_dñ
(
timeout
 *
to
)

175 i‡(
to
->
to_Êags
 & 
TIMEOUT_ONQUEUE
) {

176 
	`CIRCQ_REMOVE
(&
to
->
to_li°
);

177 
to
->
to_Êags
 &~
TIMEOUT_ONQUEUE
;

179 
to
->
to_Êags
 &~
TIMEOUT_TRIGGERED
;

180 
	}
}

187 
	$timeout_h¨d˛ock_upd©e
()

189 
ªt
;

192 
ticks
++;

194 
	`MOVEBUCKET
(0, 
ticks
);

195 i‡(
	`MASKWHEEL
(0, 
ticks
) == 0) {

196 
	`MOVEBUCKET
(1, 
ticks
);

197 i‡(
	`MASKWHEEL
(1, 
ticks
) == 0) {

198 
	`MOVEBUCKET
(2, 
ticks
);

199 i‡(
	`MASKWHEEL
(2, 
ticks
) == 0)

200 
	`MOVEBUCKET
(3, 
ticks
);

204 
ªt
 = !
	`CIRCQ_EMPTY
(&
timeout_todo
);

206  (
ªt
);

207 
	}
}

209 
cuºít_time
;

210 
	$so·˛ock
()

212 
timeout
 *
to
;

213 (*
‚
)(
timeout
 *, *);

214 *
¨g
;

216 !
	`CIRCQ_EMPTY
(&
timeout_todo
)) {

218 
to
 = (
timeout
 *)
	`CIRCQ_FIRST
(&
timeout_todo
);

221 
	`CIRCQ_REMOVE
(&
to
->
to_li°
);

224 i‡(
to
->
to_time
 - 
ticks
 > 0) {

225 
	`CIRCQ_INSERT
(&
to
->
to_li°
,

226 &
	`BUCKET
((
to
->
to_time
 - 
ticks
),Åo->to_time));

228 #ifde‡
DEBUG


229 i‡(
to
->
to_time
 - 
ticks
 < 0)

230 
	`¥ötf
("timeouàdñayed %d\n", 
to
->
to_time
 -

231 
ticks
);

233 
to
->
to_Êags
 &~
TIMEOUT_ONQUEUE
;

234 
to
->
to_Êags
 |
TIMEOUT_TRIGGERED
;

236 
‚
 = 
to
->
to_func
;

237 
¨g
 = 
to
->
to_¨g
;

239 
	`‚
(
to
, 
¨g
);

247 
	}
}

	@packages/local_options.h

6 
	~"gømm¨/›ti⁄s.h
"

7 
	~"ö˛ude/cc.h
"

10 
	#PACKAGE_CONTRIB


	)

11 
	#PACKAGE_DEVELOP


	)

12 
	#PACKAGE_MATH


	)

13 
	#PACKAGE_SOCKETS


	)

28 
	#PACKAGE_FS_MAIN


	)

29 
	#PACKAGE_FS_RPC_LPC


	)

30 
	#PACKAGE_FS_NETD


	)

31 
	#PACKAGE_FS_HTTP_LPC


	)

32 
	#PACKAGE_FS_DBD


	)

33 
	#PACKAGE_FS_MYSQL


	)

	@packages/marshal.c

2 
	~"fs_m¨shÆ.h
"

4 
	~"fs_dbi.h
"

5 
	~"Õc.h
"

6 
	~"Õc_ö˛.h
"

8 
	~<as£π.h
>

10 
fs_m¨shÆ_¨øy
(
¨øy_t
 *
¨øy
, 
fs_dbi_¨øy_t
 *
¨r
);

12 
ölöe
 
	$fs_m¨shÆ_
(
svÆue_t
 *
vÆue
, 
fs_dbi_¨øy_t
 *
¨r
)

14 
ty≥
 = 
vÆue
->type;

16 i‡(
ty≥
 & 
T_NUMBER
) {

17 i‡(
vÆue
 =&
c⁄°0u
) {

18 
	`fs_dbi_¨øy_push_nû
(
¨r
);

21 
	`fs_dbi_¨øy_push_öt
(
¨r
, 
vÆue
->
u
.
numbî
);

23 } i‡(
ty≥
 & 
T_STRING
) {

24 
	`fs_dbi_¨øy_push_l°rög
(
¨r
, 
vÆue
->
u
.
°rög
, 
	`SVALUE_STRLEN
(value));

25 } i‡(
ty≥
 & 
T_MAPPING
) {

26 
	`fs_m¨shÆ_m≠pög
(
vÆue
->
u
.
m≠
, 
¨r
);

27 } i‡(
ty≥
 & 
T_ARRAY
) {

28 
	`fs_m¨shÆ_¨øy
(
vÆue
->
u
.
¨r
,árr);

29 } i‡(
ty≥
 & 
T_REAL
) {

30 
	`fs_dbi_¨øy_push_ªÆ
(
¨r
, 
vÆue
->
u
.
ªÆ
);

32 
	`Ârötf
(
°dîr
, "[wrôe_buf„r_mixed2_loˇl] unknow d©®ty≥ [%s]\n", 
	`ty≥_«me
(
ty≥
));

33 
	`as£π
(0);

35 
	}
}

37 
	$fs_m¨shÆ_m≠pög
(
m≠pög_t
 *
m≠
, 
fs_dbi_¨øy_t
 *
¨r
)

39 
i
;

40 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

42 
	`fs_dbi_¨øy_push_m≠pög
(
¨r
, 
m≠
->
cou¡
);

44 
i
 = 0, 
èbÀ
 = 
m≠
->èbÀ; i <m≠->
èbÀ_size
; i++) {

45 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

46 
	`fs_m¨shÆ_
(&
ñt
->
vÆues
[0], 
¨r
);

47 
	`fs_m¨shÆ_
(&
ñt
->
vÆues
[1], 
¨r
);

50 
	}
}

53 
	$fs_m¨shÆ_¨øy
(
¨øy_t
 *
¨øy
, 
fs_dbi_¨øy_t
 *
¨r
)

55 
i
;

57 
	`fs_dbi_¨øy_push_¨øy
(
¨r
, 
¨øy
->
size
);

58 
i
 = 0; i < 
¨øy
->
size
; i++)

59 
	`fs_m¨shÆ_
(&
¨øy
->
ôem
[
i
], 
¨r
);

60 
	}
}

62 
	$fs_m¨shÆ
(
svÆue_t
 *
vÆue
, 
fs_dbi_¨øy_t
 *
¨r
)

64 
	`fs_m¨shÆ_
(
vÆue
, 
¨r
);

65 
	}
}

68 
ölöe
 
fs_unm¨shÆ_
(
svÆue_t
 *
vÆue
, 
fs_dbi_¨øy_ôî_t
 *
ôî
);

70 
¨øy_t
 *
	$fs_unm¨shÆ_¨øy
(
fs_dbi_¨øy_ôî_t
 *
ôî
)

72 
i
;

73 
˙t
 = 
ôî
->
tv
->
¨r
.cnt;

74 
¨øy_t
 *
¨r
 = 
	`Æloˇã_¨øy
(
˙t
);

76 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

77 
i
 = 0; i < 
¨r
->
size
; i++)

78 
	`fs_unm¨shÆ_
(&
¨r
->
ôem
[
i
], 
ôî
);

80  
¨r
;

81 
	}
}

84 
m≠pög_t
 *
	$fs_unm¨shÆ_m≠pög
(
fs_dbi_¨øy_ôî_t
 *
ôî
)

86 
i
;

87 
svÆue_t
 
k
, *
v
;

88 
∑ú
 = 
ôî
->
tv
->
m≠
.pair;

89 
m≠pög_t
 *
m≠
 = 
	`Æloˇã_m≠pög
(
∑ú
);

91 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

92 
i
 = 0; i < 
∑ú
; ++i) {

93 
	`fs_unm¨shÆ_
(&
k
, 
ôî
);

94 
	`as£π
(
k
.
ty≥
 & 
T_NUMBER
 || k.ty≥ & 
T_REAL
 || k.ty≥ & 
T_STRING
);

95 
v
 = 
	`föd_f‹_ö£π
(
m≠
, &
k
, 0);

96 
	`fs_unm¨shÆ_
(
v
, 
ôî
);

99  
m≠
;

100 
	}
}

102 
ölöe
 
	$fs_unm¨shÆ_
(
svÆue_t
 *
vÆue
, 
fs_dbi_¨øy_ôî_t
 *
ôî
)

104 
fs_dbi_tvÆue_t
 *
tv
 = 
ôî
->tv;

106 
tv
->
comm⁄
.
ty≥
) {

107 
FS_DBI_NIL
:

108 
	`£t_svÆue_undeföed
(
vÆue
);

109 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

111 
FS_DBI_INT
: {

112 
	`£t_svÆue_numbî
(
vÆue
, 
tv
->
numbî
.
n
);

113 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

116 
FS_DBI_REAL
: {

117 
	`£t_svÆue_ªÆ
(
vÆue
, 
tv
->
ªÆ
.
r
);

118 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

121 
FS_DBI_STRING
: {

122 
Àn
 = 
tv
->
°rög
.len;

123 *
p
 = 
	`√w_°rög
(
Àn
, "unmarsh dbi");

124 
	`mem˝y
(
p
, 
tv
->
°rög
.
°r
, 
Àn
 + 1);

125 
p
[
Àn
] = '\0';

126 
	`£t_svÆue_mÆlo˚d_°rög
(
vÆue
, 
p
);

127 
	`FS_DBI_ARRAY_ITER_NEXT
(
ôî
);

130 
FS_DBI_ARRAY
: {

131 
¨øy_t
 *
¨r
 = 
	`fs_unm¨shÆ_¨øy
(
ôî
);

132 
	`£t_svÆue_¨øy
(
vÆue
, 
¨r
);

135 
FS_DBI_MAPPING
: {

136 
m≠pög_t
 *
m≠
 = 
	`fs_unm¨shÆ_m≠pög
(
ôî
);

137 
	`£t_svÆue_m≠pög
(
vÆue
, 
m≠
);

141 
	`as£π
(0);

143 
	}
}

147 
	$fs_unm¨shÆ
(
svÆue_t
 *
vÆue
, 
fs_dbi_¨øy_ôî_t
 *
ôî
)

149 
	`fs_unm¨shÆ_
(
vÆue
, 
ôî
);

150 
	}
}

	@packages/math.c

7 
	~<m©h.h
>

8 #ifde‡
LATTICE


9 
	~"/Õc_ö˛.h
"

11 
	~"ö˛ude/Õc_ö˛.h
"

14 #ifde‡
F_COS


15 
	$f_cos
()

17 
•
->
u
.
ªÆ
 = 
	`cos
(sp->u.real);

18 
	}
}

21 #ifde‡
F_SIN


22 
	$f_sö
()

24 
•
->
u
.
ªÆ
 = 
	`sö
(sp->u.real);

25 
	}
}

27 #ifde‡
F_TAN


28 
	$f_èn
()

33 
•
->
u
.
ªÆ
 = 
	`èn
(sp->u.real);

34 
	}
}

37 #ifde‡
F_ASIN


38 
	$f_asö
()

40 i‡(
•
->
u
.
ªÆ
 < - 1.0)

42 
	`îr‹
("math:ásin(x) with (x < -1.0)\n");

45 i‡(
•
->
u
.
ªÆ
 > 1.0)

47 
	`îr‹
("math:ásin(x) with (x > 1.0)\n");

50 
•
->
u
.
ªÆ
 = 
	`asö
(sp->u.real);

51 
	}
}

54 #ifde‡
F_ACOS


55 
	$f_acos
()

57 i‡(
•
->
u
.
ªÆ
 < - 1.0)

59 
	`îr‹
("math:ácos(x) with (x < -1.0)\n");

62 i‡(
•
->
u
.
ªÆ
 > 1.0)

64 
	`îr‹
("math:ácos(x) with (x > 1.0)\n");

67 
•
->
u
.
ªÆ
 = 
	`acos
(sp->u.real);

68 
	}
}

71 #ifde‡
F_ATAN


72 
	$f_©™
()

74 
•
->
u
.
ªÆ
 = 
	`©™
(sp->u.real);

75 
	}
}

78 #ifde‡
F_SQRT


79 
	$f_sqπ
()

81 i‡(
•
->
u
.
ªÆ
 < 0.0)

83 
	`îr‹
("math: sqrt(x) with (x < 0.0)\n");

86 
•
->
u
.
ªÆ
 = 
	`sqπ
(sp->u.real);

87 
	}
}

90 #ifde‡
F_LOG


91 
	$f_log
()

93 i‡(
•
->
u
.
ªÆ
 <= 0.0)

95 
	`îr‹
("math:Üog(x) with (x <= 0.0)\n");

98 
•
->
u
.
ªÆ
 = 
	`log
(sp->u.real);

99 
	}
}

102 #ifde‡
F_POW


103 
	$f_pow
()

105 (
•
 - 1)->
u
.
ªÆ
 = 
	`pow
( (sp - 1)->u.real, sp->u.real);

106 
•
--;

107 
	}
}

110 #ifde‡
F_EXP


111 
	$f_exp
()

113 
•
->
u
.
ªÆ
 = 
	`exp
(sp->u.real);

114 
	}
}

117 #ifde‡
F_FLOOR


118 
	$f_Êo‹
()

120 
•
->
u
.
ªÆ
 = 
	`Êo‹
(sp->u.real);

121 
	}
}

124 #ifde‡
F_CEIL


125 
	$f_˚û
()

127 
•
->
u
.
ªÆ
 = 
	`˚û
(sp->u.real);

128 
	}
}

132 #ifde‡
F_MAX


134 
	$f_max
()

136 
svÆue_t
 *
ßº
 = 
•
 - 
°_num_¨g
 + 1;

137 
¨øy_t
 *
¨r
 = 
ßº
->
u
.arr;

138 
max_ödex
 = 0;

139 
i
;

141 i‡(!
¨r
->
size
)

143 
	`îr‹
("Can't find max ofánÉmptyárray.\n");

146 i‡(
¨r
->
ôem
->
ty≥
 !
T_NUMBER
 &&áº->ôem->ty≥ !
T_REAL
 &&áº->ôem->ty≥ !
T_STRING
)

148 
	`îr‹
("Array must consist of ints, floats or strings.\n");

151 
i
 = 1; i < 
¨r
->
size
; i++)

154 
¨r
->
ôem
[
i
].
ty≥
)

156 
T_NUMBER
:

157 
¨r
->
ôem
[
max_ödex
].
ty≥
)

159 
T_NUMBER
:

160 i‡(
¨r
->
ôem
[
i
].
u
.
numbî
 >áº->ôem[
max_ödex
].u.number)

162 
max_ödex
 = 
i
;

165 
T_REAL
:

166 i‡(
¨r
->
ôem
[
i
].
u
.
numbî
 >áº->ôem[
max_ödex
].u.
ªÆ
)

168 
max_ödex
 = 
i
;

172 
	`îr‹
("Inhomogeneousárray.\n");

175 
T_REAL
:

176 
¨r
->
ôem
[
max_ödex
].
ty≥
)

178 
T_NUMBER
:

179 i‡(
¨r
->
ôem
[
i
].
u
.
ªÆ
 >áº->ôem[
max_ödex
].u.
numbî
)

181 
max_ödex
 = 
i
;

184 
T_REAL
:

185 i‡(
¨r
->
ôem
[
i
].
u
.
ªÆ
 >áº->ôem[
max_ödex
].u.real)

187 
max_ödex
 = 
i
;

191 
	`îr‹
("Inhomogeneousárray.\n");

194 
T_STRING
:

195 i‡(
¨r
->
ôem
[
max_ödex
].
ty≥
 !
T_STRING
)

197 
	`îr‹
("Inhomogeneousárray.\n");

199 i‡(
	`°rcmp
(
¨r
->
ôem
[
i
].
u
.
°rög
,áº->ôem[
max_ödex
].u.string) > 0)

201 
max_ödex
 = 
i
;

205 
	`îr‹
("Array must consist of ints, floats or strings.\n");

209 i‡(
°_num_¨g
 == 2)

211 i‡(
•
->
u
.
numbî
 != 0)

213 
	`p›_n_ñems
(2);

214 
	`push_numbî
(
max_ödex
);

218 
	`p›_°ack
();

221 
	`assign_svÆue_no_‰ì
(
•
, &
¨r
->
ôem
[
max_ödex
]);

222 
	`‰ì_¨øy
(
¨r
);

223 
	}
}

227 #ifde‡
F_MIN


229 
	$f_mö
()

231 
svÆue_t
 *
ßº
 = 
•
 - 
°_num_¨g
 + 1;

232 
¨øy_t
 *
¨r
 = 
ßº
->
u
.arr;

233 
mö_ödex
 = 0;

234 
i
;

236 i‡(!
¨r
->
size
)

238 
	`îr‹
("Can't find min ofánÉmptyárray.\n");

241 i‡(
¨r
->
ôem
->
ty≥
 !
T_NUMBER
 &&áº->ôem->ty≥ !
T_REAL
 &&áº->ôem->ty≥ !
T_STRING
)

243 
	`îr‹
("Array must consist of ints, floats or strings.\n");

246 
i
 = 1; i < 
¨r
->
size
; i++)

249 
¨r
->
ôem
[
i
].
ty≥
)

251 
T_NUMBER
:

252 
¨r
->
ôem
[
mö_ödex
].
ty≥
)

254 
T_NUMBER
:

255 i‡(
¨r
->
ôem
[
i
].
u
.
numbî
 <áº->ôem[
mö_ödex
].u.number)

257 
mö_ödex
 = 
i
;

260 
T_REAL
:

261 i‡(
¨r
->
ôem
[
i
].
u
.
numbî
 <áº->ôem[
mö_ödex
].u.
ªÆ
)

263 
mö_ödex
 = 
i
;

267 
	`îr‹
("Inhomogeneousárray.\n");

270 
T_REAL
:

271 
¨r
->
ôem
[
mö_ödex
].
ty≥
)

273 
T_NUMBER
:

274 i‡(
¨r
->
ôem
[
i
].
u
.
ªÆ
 <áº->ôem[
mö_ödex
].u.
numbî
)

276 
mö_ödex
 = 
i
;

279 
T_REAL
:

280 i‡(
¨r
->
ôem
[
i
].
u
.
ªÆ
 <áº->ôem[
mö_ödex
].u.real)

282 
mö_ödex
 = 
i
;

286 
	`îr‹
("Inhomogeneousárray.\n");

289 
T_STRING
:

290 i‡(
¨r
->
ôem
[
mö_ödex
].
ty≥
 !
T_STRING
)

292 
	`îr‹
("Inhomogeneousárray.\n");

294 i‡(
	`°rcmp
(
¨r
->
ôem
[
i
].
u
.
°rög
,áº->ôem[
mö_ödex
].u.string) < 0)

296 
mö_ödex
 = 
i
;

300 
	`îr‹
("Array must consist of ints, floats or strings.\n");

304 i‡(
°_num_¨g
 == 2)

306 i‡(
•
->
u
.
numbî
 != 0)

308 
	`p›_n_ñems
(2);

309 
	`push_numbî
(
mö_ödex
);

313 
	`p›_°ack
();

316 
	`assign_svÆue_no_‰ì
(
•
, &
¨r
->
ôem
[
mö_ödex
]);

317 
	`‰ì_¨øy
(
¨r
);

318 
	}
}

	@packages/math_spec.h

1 
	~"../gømm¨/•ec.h
"

3 
cos
();

4 
sö
();

5 
èn
();

6 
asö
();

7 
acos
();

8 
©™
();

9 
sqπ
();

10 
log
();

11 
pow
(, );

12 
exp
();

13 
Êo‹
();

14 
˚û
();

16 
mixed
 
max
(mixed *, | );

17 
mixed
 
mö
(mixed *, | );

	@packages/mkdir.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)mkdir.c 8.2 (Berkeley) 1/25/94";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/mkdir/mkdir.c,v 1.33.8.1 2009/04/15 03:14:26 kensmith Exp $");

44 
	~<sys/ty≥s.h
>

45 
	~<sys/°©.h
>

47 
	~<îr.h
>

48 
	~<î∫o.h
>

49 
	~<libgí.h
>

50 
	~<°dio.h
>

51 
	~<°dlib.h
>

52 
	~<°rög.h
>

53 
	~<sy£xôs.h
>

54 
	~<uni°d.h
>

56 
buûd
(*, 
mode_t
);

57 
ußge
();

59 
	gvÊag
;

62 
	$mkdú_maö
(
¨gc
, *
¨gv
[])

64 
ch
, 
exôvÆ
, 
suc˚ss
, 
pÊag
;

65 
mode_t
 
omode
;

66 *
£t
 = 
NULL
;

67 *
mode
;

69 
omode
 = 
pÊag
 = 0;

70 
mode
 = 
NULL
;

71 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "m:pv")) != -1)

72 
ch
) {

74 
mode
 = 
›èrg
;

77 
pÊag
 = 1;

80 
vÊag
 = 1;

84 
	`ußge
();

87 
¨gc
 -
›töd
;

88 
¨gv
 +
›töd
;

89 i‡(
¨gv
[0] =
NULL
)

90 
	`ußge
();

92 i‡(
mode
 =
NULL
) {

93 
omode
 = 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
;

95 i‡((
£t
 = 
	`£tmode
(
mode
)Ë=
NULL
)

96 
	`îrx
(1, "övÆid fûêmode: %s", 
mode
);

97 
omode
 = 
	`gëmode
(
£t
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

98 
	`‰ì
(
£t
);

101 
exôvÆ
 = 0; *
¨gv
 !
NULL
; ++argv) {

102 i‡(
pÊag
) {

103 
suc˚ss
 = 
	`buûd
(*
¨gv
, 
omode
);

104 } i‡(
	`mkdú
(*
¨gv
, 
omode
) < 0) {

105 i‡(
î∫o
 =
ENOTDIR
 ||Éºnÿ=
ENOENT
)

106 
	`w¨n
("%s", 
	`dú«me
(*
¨gv
));

108 
	`w¨n
("%s", *
¨gv
);

109 
suc˚ss
 = 0;

111 
suc˚ss
 = 1;

112 i‡(
vÊag
)

113 ()
	`¥ötf
("%s\n", *
¨gv
);

115 i‡(!
suc˚ss
)

116 
exôvÆ
 = 1;

125 i‡(
suc˚ss
 =1 && 
mode
 !
NULL
 && 
	`chmod
(*
¨gv
, 
omode
) == -1) {

126 
	`w¨n
("%s", *
¨gv
);

127 
exôvÆ
 = 1;

130 
	`exô
(
exôvÆ
);

131 
	}
}

139 
	$buûd
(*
∑th
, 
mode_t
 
omode
)

141 
°©
 
sb
;

142 
mode_t
 
numask
, 
oumask
;

143 
fú°
, 
œ°
, 
ªtvÆ
;

144 *
p
;

146 
p
 = 
∑th
;

147 
oumask
 = 0;

148 
ªtvÆ
 = 1;

149 i‡(
p
[0] == '/')

150 ++
p
;

151 
fú°
 = 1, 
œ°
 = 0; !œ° ; ++
p
) {

152 i‡(
p
[0] == '\0')

153 
œ°
 = 1;

154 i‡(
p
[0] != '/')

156 *
p
 = '\0';

157 i‡(!
œ°
 && 
p
[1] == '\0')

158 
œ°
 = 1;

159 i‡(
fú°
) {

172 
oumask
 = 
	`umask
(0);

173 
numask
 = 
oumask
 & ~(
S_IWUSR
 | 
S_IXUSR
);

174 ()
	`umask
(
numask
);

175 
fú°
 = 0;

177 i‡(
œ°
)

178 ()
	`umask
(
oumask
);

179 i‡(
	`mkdú
(
∑th
, 
œ°
 ? 
omode
 : 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
) < 0) {

180 i‡(
î∫o
 =
EEXIST
 ||Éºnÿ=
EISDIR
) {

181 i‡(
	`°©
(
∑th
, &
sb
) < 0) {

182 
	`w¨n
("%s", 
∑th
);

183 
ªtvÆ
 = 0;

185 } i‡(!
	`S_ISDIR
(
sb
.
°_mode
)) {

186 i‡(
œ°
)

187 
î∫o
 = 
EEXIST
;

189 
î∫o
 = 
ENOTDIR
;

190 
	`w¨n
("%s", 
∑th
);

191 
ªtvÆ
 = 0;

194 i‡(
œ°
)

195 
ªtvÆ
 = 2;

198 
ªtvÆ
 = 0;

201 } i‡(
vÊag
)

204 i‡(!
œ°
)

205 *
p
 = '/';

207 i‡(!
fú°
 && !
œ°
)

208 ()
	`umask
(
oumask
);

209  (
ªtvÆ
);

210 
	}
}

213 
	$ußge
()

216 ()
	`Ârötf
(
°dîr
,

218 
	`exô
 (
EX_USAGE
);

219 
	}
}

	@packages/mkdir.h

2 #i‚de‡
_FS_MKDIR_H


3 
	#_FS_MKDIR_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
buûd
(*
∑th
, 
mode_t
 
omode
);

	@packages/netd/netd_main.c

2 
	~"fs_c⁄fig.h
"

3 
	~"fs_comm.h
"

4 
	~"fs_ùc.h
"

5 
	~"fs_Ωc.h
"

6 
	~"fs_Ωc_Õc.h
"

7 
	~"fs_Ωc_c.h
"

8 
	~"fs_Ωc_id.h
"

9 
	~"Õc_¨gs_›.h
"

10 
	~"fs_log.h
"

11 
	~"yauthLib.h
"

14 
	~"z›í.h
"

16 
	~"hâp_Õc.h
"

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<as£π.h
>

22 
	~<›ís¶/rß.h
>

23 
	~<›ís¶/≥m.h
>

24 
	~<›ís¶/rc4.h
>

26 
	~<f˙é.h
>

27 
	~<uni°d.h
>

28 
	~<√töë/ö.h
>

29 
	~<sys/sockë.h
>

30 
	~<¨∑/öë.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/°©.h
>

34 
	#LZW_BITS
 12

	)

36 
	#MAX_CLIENT_PAYLOAD
 65535

	)

39 
auth_Êag
;

41 
evít_ba£
 * 
	gev_ba£
;

42 
evhâp
 *
	gauth_hâpd
 = 
NULL
;

44 
	#RSA_BUF_SIZE
 512

	)

45 
	#RSA_CHALLENGE_SIZE
 8

	)

46 
	#RC4_KEY_SIZE
 4

	)

48 
	grß_ªsu…_buf
[
RSA_BUF_SIZE
];

49 
RSA
 *
	g£rvî_¥ikey
 = 
NULL
;

50 
RSA
 *
	g˛õ¡_pubkey
 = 
NULL
;

54 
size_t
 
	g˛õ¡_max_outbuf
 = (512 * 1024 * 1024);

55 
size_t
 
	ggame_max_outbuf
 = (1.8 * 1024 * 1024 * 1024);

57 *
	ggame_ù
 = "127.0.0.1";

58 
	ggame_p‹t
 = 60001;

59 *
	g˛õ¡_ù
 = "0.0.0.0";

60 
	g˛õ¡_p‹t
 = 60000;

61 
	gho°_p‹t
 = 0;

62 c⁄° 
	gbacklog
 = 5120;

64 
	gho°_id
 = -1;

66 
fs_√t_ac˚±‹_t
 *
	ggame_ac˚±‹
 = 
NULL
;

67 
fs_√t_c⁄√˘i⁄_t
 *
	ggame_c⁄n
 = 
NULL
;

69 
fs_√t_ac˚±‹_t
 *
	g˛õ¡_ac˚±‹
 = 
NULL
;

71 
fs_vfd_t
 
	gc⁄n_Æloc_vfd
 = 
FS_CLIENT_START_VFD
;

74 
fs_Ωc_Õc_t
 *
	g√td_Ωc_Õc
 = 
NULL
;

76 
	gis_˛õ¡_£rvõ˚_›í
 = 0;

78 
	s˛õ¡_ba£_s
 {

79 
≠r_poﬁ_t
 *
	mpoﬁ
;

80 
≠r_hash_t
 *
	mc⁄n_hash
;

81 
≠r_hash_t
 *
	mu£r_hash
;

82 } 
	t˛õ¡_ba£_t
;

85 
	s˛õ¡_√t_°©_s
 {

86 
	mö_byã
;

87 
	mout_byã
;

88 
	m∑ckë
;

89 } 
	t˛õ¡_√t_°©_t
;

92 
	mLOGIN_ING
 = 0,

93 
	mLOGIN_OK
 = 1,

94 } 
	tgame_°©_t
;

97 
	mSESSION_VERIFY
 = 0,

98 
	mSESSION_SIGN
,

99 
	mSESSION_VERSION
,

100 
	mSESSION_TRAFFIC
,

101 } 
	t£ssi⁄_°©_t
;

103 
	#SESSION_STAT_READ_TIMEOUT_SEC
 15

	)

105 
	s˛õ¡_°©_s
 {

106 
fs_uid_t
 
	muid
;

107 
game_°©_t
 
	mgame_°©
;

108 
˛õ¡_√t_°©_t
 
	m√t_°©
;

109 
zwrôî_t
 
	mzwrôî
;

110 
	mù
[32];

111 
	md°ù
[32];

112 
	m£ssi⁄
[
RSA_CHALLENGE_SIZE
];

113 
£ssi⁄_°©_t
 
	ms°©
;

114 
RC4_KEY
 
	mrc4_key
;

115 } 
	t˛õ¡_°©_t
;

117 
	#CLIENT_UDATA
(
c⁄n
Ë((
˛õ¡_°©_t
*)((c⁄n)->
ud©a
))

	)

118 
	#CLIENT_GAME_STAT
(
c⁄n
Ë(
	`CLIENT_UDATA
(c⁄n)->
game_°©
)

	)

119 
	#CLIENT_UID
(
c⁄n
Ë(
	`CLIENT_UDATA
(c⁄n)->
uid
)

	)

120 
	#CLIENT_ZWRITER
(
c⁄n
Ë(
	`CLIENT_UDATA
(c⁄n)->
zwrôî
)

	)

122 
˛õ¡_ba£_t
 
	g˛õ¡_ba£
 = {
NULL
, NULL};

124 
	sho°_°©_s
 {

125 
	mhid
;

126 } 
	tho°_°©_t
;

128 
	#HOST_STAT
(
c⁄n
Ë((
ho°_°©_t
*)((c⁄n)->
ud©a
))

	)

129 
	#HOST_HID
(
c⁄n
Ë(
	`HOST_STAT
(c⁄n)->
hid
)

	)

131 
fs_√t_mbuf_t
 *
	g˛õ¡_Ωc_buf
;

132 
fs_√t_mbuf_t
 *
	ggamed_Ωc_buf
;

134 
	$˛o£_comm⁄
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
iß˘ive
)

136 
uid
 = 
	`CLIENT_UDATA
(
c⁄n
Ë? 
	`CLIENT_UID
(conn) : 0;

138 i‡(
iß˘ive
) {

139 
	`log_öfo
(
MOD_NETD
, "active close fd:%d,vfd:%d,uid:%d,conn_cnt:%d,user_cnt:%d",

140 
c⁄n
->
fd
, c⁄n->
vfd
, 
uid
,
	`≠r_hash_cou¡
(
˛õ¡_ba£
.
c⁄n_hash
),á¥_hash_cou¡(˛õ¡_ba£.
u£r_hash
));

142 
	`log_öfo
(
MOD_NETD
, "passive close fd:%d,vfd:%d,uid:%d,conn_cnt:%d,user_cnt:%d",

143 
c⁄n
->
fd
, c⁄n->
vfd
, 
uid
,
	`≠r_hash_cou¡
(
˛õ¡_ba£
.
c⁄n_hash
),á¥_hash_cou¡(˛õ¡_ba£.
u£r_hash
));

146 i‡(
auth_Êag
) {

147 
	`ˇŒ_s¸ùt_func
("cmd/auth_√td", "˛õ¡_c⁄√˘i⁄_˛o£_cb", "i", 
c⁄n
->
vfd
);

149 
	`ˇŒ_s¸ùt_func
("cmd/logö", "˛õ¡_c⁄√˘i⁄_˛o£_cb", "i", 
c⁄n
->
vfd
);

152 
	`≠r_hash_£t
(
˛õ¡_ba£
.
c⁄n_hash
, &
c⁄n
->
vfd
, (c⁄n->vfd), 
NULL
);

153 i‡(
	`CLIENT_UDATA
(
c⁄n
)) {

154 
	`≠r_hash_£t
(
˛õ¡_ba£
.
u£r_hash
, &
	`CLIENT_UID
(
c⁄n
), (
fs_uid_t
), 
NULL
);

157 
	`zwrôî_deöô
(&
	`CLIENT_ZWRITER
(
c⁄n
));

158 
	`fs_√t_c⁄√˘i⁄_de°roy
(
c⁄n
);

159 
	}
}

161 
	$∑ssive_˛o£_˛õ¡
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
)

163 
	`˛o£_comm⁄
(
c⁄n
, 0);

164 
	}
}

167 
	$a˘ive_˛o£_˛õ¡
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
)

169 
	`fs_√t_c⁄√˘i⁄_åy_Êush
(
c⁄n
);

170 
	`˛o£_comm⁄
(
c⁄n
, 1);

171 
	}
}

173 
	$a˘ive_˛o£_Æl_˛õ¡
()

175 
≠r_hash_ödex_t
 *
hi
;

176 *
c⁄n
;

178 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
˛õ¡_ba£
.
c⁄n_hash
); hi; hò
	`≠r_hash_√xt
(hi)) {

179 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
c⁄n
);

180 
	`a˘ive_˛o£_˛õ¡
(
c⁄n
);

182 
	}
}

185 
	$£nd_to_˛õ¡
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, *
buf
, 
size_t
 
Àn
)

187 i‡(
Àn
 > 0) {

188 
	`zwrôî_˛ór
(&
	`CLIENT_ZWRITER
(
c⁄n
));

189 
	`zwrôî_wrôe
(&
	`CLIENT_ZWRITER
(
c⁄n
), 
buf
, 
Àn
);

191 
	`fs_√t_c⁄√˘i⁄_£nd
(
c⁄n
, 
	`CLIENT_ZWRITER
(c⁄n).
zbuf
, CLIENT_ZWRITER(c⁄n).
zoff
);

193 
	}
}

196 
ölöe
 
	$to_˛õ¡
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, *
buf
, 
size_t
 
Àn
)

198 
fs_nc_hódî_t
 
hdr
;

199 
	`FS_NC_SET_HEADER
(&
hdr
, 
Àn
);

200 i‡(0 < 
	`fs_√t_c⁄√˘i⁄_£nd_∑ckë
(
c⁄n
, &
hdr
, (hdr), 
buf
, 
Àn
)) {

201 
	`log_îr‹
(
MOD_NETD
, "send client connÉrror");

203 
	}
}

205 
ölöe
 
	$vfd_to_˛õ¡
(
fs_vfd_t
 
vfd
, *
buf
, 
size_t
 
Àn
)

207 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
c⁄n_hash
, &
vfd
, (vfd));

208 i‡(
c⁄n
 !
NULL
) {

209 
	`to_˛õ¡
(
c⁄n
, 
buf
, 
Àn
);

213 
	}
}

215 
ölöe
 
	$uid_to_˛õ¡
(
fs_uid_t
 
uid
, *
buf
, 
size_t
 
Àn
)

217 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
u£r_hash
, &
uid
, (uid));

219 i‡(
c⁄n
 !
NULL
) {

220 
	`to_˛õ¡
(
c⁄n
, 
buf
, 
Àn
);

223 
	}
}

225 
ölöe
 
	$ud©a_to_gamed
(
fs_uid_t
 
uid
, *
buf
, 
size_t
 
Àn
)

227 
ªt
 = 
	`fs_ng_£nd_cmd
(
game_c⁄n
, 
FS_NG_USER
, 
uid
, 
buf
, 
Àn
);

228 i‡(
ªt
 < 0) {

229 
	`log_îr‹
(
MOD_NETD
, "send game connÉrror");

231  
ªt
;

232 
	}
}

234 
ölöe
 
	$√td_ˇŒ_gamed
(
fs_uid_t
 
uid
, *
buf
, 
size_t
 
Àn
)

236 
ªt
 = 
	`fs_ng_£nd_cmd
(
game_c⁄n
, 
FS_NG_RPC
, 
uid
, 
buf
, 
Àn
);

237 i‡(
ªt
 < 0) {

238 
	`log_îr‹
(
MOD_NETD
, "netdÅo gamed connÉrror");

240  
ªt
;

241 
	}
}

243 
	$˛õ¡_vîsi⁄
(
fs_vfd_t
 
vfd
, 
fs_¥Ÿocﬁ_id_t
 
pid
, *
buf
, 
size_t
 
Àn
)

245 
ªt
;

246 
fs_öbuf_t
 
öbuf
;

247 
	`FS_INBUF_INIT
(&
öbuf
, 
buf
, 
Àn
);

248 
ªt
 = 
	`fs_Ωc_di•©ch
(
√td_Ωc_Õc
, 
vfd
, &
öbuf
);

249  
ªt
;

250 
	}
}

253 
	#LOGIN_PTO_LIST
 \

254 
RPC_SERVER_VERSION
:\

255 
RPC_SERVER_LOGIN
:\

256 
RPC_SERVER_NEW_UID
:

	)

260 
	$˛õ¡_√td_hook
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_¥Ÿocﬁ_id_t
 
pid
, *
buf
, 
size_t
 
Àn
)

262 
fs_öbuf_t
 
öbuf
;

263 
	`FS_INBUF_INIT
(&
öbuf
, 
buf
, 
Àn
);

293 
pid
) {

294 
LOGIN_PTO_LIST
 {

295 
ªt
 = 
	`fs_Ωc_di•©ch
(
√td_Ωc_Õc
, 
c⁄n
->
vfd
, &
öbuf
);

296 i‡(
ªt
 < 0) {

297  
ªt
;

304 
	}
}

306 
	$gë_chÆÀnge
(*
buf
, 
Àn
)

308 *
r
;

309 *
p
;

310 
i
;

311 
f
 = 
Àn
 / ();

312 
m
 = 
Àn
 - 
f
 * ();

314 
i
 = 0, 
r
 = (*)
buf
; i < 
f
; ++i) {

315 *
r
++ = ()
	`ønd
();

318 
i
 = 0, 
p
 = (*)
r
; i < 
m
; ++i) {

319 *
p
++ = ()
	`ønd
();

322 
	}
}

324 
	$£t_ªad_timeout
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
timeout
)

328 
	`buf„ªvít_dißbÀ
(
c⁄n
->
bu„v
, 
EV_READ
);

329 
c⁄n
->
bu„v
->
timeout_ªad
 = 
timeout
;

330 
	`buf„ªvít_íabÀ
(
c⁄n
->
bu„v
, 
EV_READ
);

331 
	}
}

333 
	$˛õ¡_öput_di•©ch
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
fs_nc_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
, *
ud©a
)

337 
fs_√t_c⁄√˘i⁄_t
 *
exi°_c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
c⁄n_hash
, &
c⁄n
->
vfd
, (conn->vfd));

338 i‡(
exi°_c⁄n
 =
NULL
) {

339 
	`log_îr‹
(
MOD_NETD
, "di•©chÉº‹Çÿsuch c⁄¿vfd:%d", 
c⁄n
->
vfd
);

344 
	`as£π
(
exi°_c⁄n
 =
c⁄n
);

346 
	`CLIENT_UDATA
(
c⁄n
)->
s°©
) {

347 
SESSION_VERIFY
: {

348 
de˛í
 = 
	`RSA_public_de¸y±
(
Àn
, 
buf
, 
rß_ªsu…_buf
, 
˛õ¡_pubkey
, 
RSA_PKCS1_PADDING
);

349 i‡(
de˛í
 !
RSA_CHALLENGE_SIZE
 || 
	`memcmp
(
rß_ªsu…_buf
, 
	`CLIENT_UDATA
(
c⁄n
)->
£ssi⁄
, RSA_CHALLENGE_SIZE)) {

350 
	`log_îr‹
(
MOD_NETD
, "˛õ¡ bad ig«tuª vfd:%d,ù:%s", 
c⁄n
->
vfd
, 
	`CLIENT_UDATA
(c⁄n)->
ù
);

351 
îr‹
;

354 
	`CLIENT_UDATA
(
c⁄n
)->
s°©
 = 
SESSION_SIGN
;

356 
	`£t_ªad_timeout
(
c⁄n
, 0);

360 
SESSION_SIGN
: {

361 i‡(
Àn
 !
RSA_CHALLENGE_SIZE
) {

362 
	`log_îr‹
(
MOD_NETD
, "bad client challenge size vfd=%d,ip:%s,len:%lu",

363 
c⁄n
->
vfd
, 
	`CLIENT_UDATA
(c⁄n)->
ù
, 
Àn
);

364 
îr‹
;

366 
í˛í
 = 
	`RSA_¥iv©e_í¸y±
(
Àn
, 
buf
, 
rß_ªsu…_buf
, 
£rvî_¥ikey
, 
RSA_PKCS1_PADDING
);

367 
	`as£π
(
í˛í
 > 0);

368 
	`£nd_to_˛õ¡
(
c⁄n
, 
rß_ªsu…_buf
, 
í˛í
);

372 
	`gë_chÆÀnge
(
	`CLIENT_UDATA
(
c⁄n
)->
£ssi⁄
, 
RC4_KEY_SIZE
);

373 
í˛í
 = 
	`RSA_public_í¸y±
(
RC4_KEY_SIZE
, 
	`CLIENT_UDATA
(
c⁄n
)->
£ssi⁄
,

374 
rß_ªsu…_buf
, 
˛õ¡_pubkey
, 
RSA_PKCS1_PADDING
);

375 
	`£nd_to_˛õ¡
(
c⁄n
, 
rß_ªsu…_buf
, 
í˛í
);

376 
	`CLIENT_UDATA
(
c⁄n
)->
s°©
 = 
SESSION_VERSION
;

378 
	`RC4_£t_key
(&
	`CLIENT_UDATA
(
c⁄n
)->
rc4_key
, 
RC4_KEY_SIZE
, CLIENT_UDATA(c⁄n)->
£ssi⁄
);

381 
SESSION_VERSION
: {

382 
rc4buf
[
Àn
];

383 
	`RC4
(&
	`CLIENT_UDATA
(
c⁄n
)->
rc4_key
, 
Àn
, 
buf
, 
rc4buf
);

384 
fs_¥Ÿocﬁ_id_t
 *
pid
 = (fs_¥Ÿocﬁ_id_t*)
rc4buf
;

386 i‡(*
pid
 !
RPC_SERVER_VERSION
) {

387 
	`log_îr‹
(
MOD_NETD
, "recv client bad version vfd=%d,ip=%s,pid=%d",

388 
c⁄n
->
vfd
, 
	`CLIENT_UDATA
(c⁄n)->
ù
, *
pid
);

389 
îr‹
;

391 
	`CLIENT_UDATA
(
c⁄n
)->
s°©
 = 
SESSION_TRAFFIC
;

393 i‡(0 > 
	`˛õ¡_vîsi⁄
(
c⁄n
->
vfd
, *
pid
, 
rc4buf
, 
Àn
)) {

394 
îr‹
;

398 
SESSION_TRAFFIC
: {

399 
ªt
;

406 
fs_¥Ÿocﬁ_id_t
 *
pid
 = (fs_¥Ÿocﬁ_id_t*)
buf
;

407 
ªt
 = 
	`˛õ¡_√td_hook
(
c⁄n
, *
pid
, 
buf
, 
Àn
);

408 i‡(
ªt
 == 0) {

410 
	`ud©a_to_gamed
(
	`CLIENT_UID
(
c⁄n
), 
buf
, 
Àn
);

412 } if(
ªt
 == 1) {

415 
îr‹
;

420 
	`log_îr‹
(
MOD_NETD
, "îr‹ bad sèàvfd:%d,ù:%s", 
c⁄n
->
vfd
, 
	`CLIENT_UDATA
(c⁄n)->
ù
);

421 
îr‹
;

426 
îr‹
:

427 
	`a˘ive_˛o£_˛õ¡
(
c⁄n
);

428 
	`log_îr‹
(
MOD_NETD
, "˛o£ bad sèà˛õ¡.vfd:%d,ù:%s", 
c⁄n
->
vfd
, 
	`CLIENT_UDATA
(c⁄n)->
ù
);

430 
	}
}

438 
	$˛õ¡_c⁄√˘i⁄_ªcv
(
buf„ªvít
 *
bu„v
, *
¨g
)

441 
size_t
 
bufsz
 = 0;

442 
size_t
 
∑ckë_sz
 = 0;

443 
fs_nc_hódî_t
 *
hódî
 = 
NULL
;

444 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
¨g
;

445 
ªt
;

447 (
bufsz
 = 
	`EVBUFFER_LENGTH
(
	`EVBUFFER_INPUT
(
bu„v
))) > 0) {

448 i‡(
bufsz
 < (*
hódî
))

450 
hódî
 = (
fs_nc_hódî_t
 *)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bu„v
));

451 i‡(
hódî
->
∑ylﬂd_Àn
 > 
MAX_CLIENT_PAYLOAD
) {

452 
	`log_îr‹
(
MOD_NETD
, "˛o£ clõ¡Åoÿœrgê∑ckë vfd=%d,Àn=%u", 
c⁄n
->
vfd
, 
hódî
->
∑ylﬂd_Àn
);

453 
	`a˘ive_˛o£_˛õ¡
(
c⁄n
);

458 
∑ckë_sz
 = (*
hódî
Ë+ hódî->
∑ylﬂd_Àn
;

459 i‡(
bufsz
 < 
∑ckë_sz
)

462 
ªt
 = 
	`˛õ¡_öput_di•©ch
(
c⁄n
, 
hódî
, hódî + 1, hódî->
∑ylﬂd_Àn
, 
NULL
);

463 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bu„v
), 
∑ckë_sz
);

464 i‡(
ªt
 < 0) {

468 
	}
}

470 
	$˛õ¡_c⁄√˘i⁄_îr‹
(
buf„ªvít
 *
bu„v
, 
wh©
, *
¨g
)

481 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
¨g
;

482 
fs_√t_c⁄√˘i⁄_t
 *
exi°_c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
c⁄n_hash
, &
c⁄n
->
vfd
, (conn->vfd));

483 
	`as£π
(
exi°_c⁄n
 =
c⁄n
);

485 
	`log_öfo
(
MOD_NETD
, "client connection close vfd=%d,what=%02x,srcip=%s,dstip=%s",

486 
c⁄n
->
vfd
, 
wh©
, 
	`CLIENT_UDATA
(c⁄n)->
ù
, CLIENT_UDATA(c⁄n)->
d°ù
);

487 i‡(
	`CLIENT_UDATA
(
c⁄n
)) {

488 
fs_√t_c⁄√˘i⁄_t
 *
u£r_c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
u£r_hash
, &
	`CLIENT_UID
(
c⁄n
), (
fs_uid_t
));

489 i‡(
u£r_c⁄n
 !
NULL
) {

490 
	`fs_ng_£nd_cmd
(
game_c⁄n
, 
FS_NG_REMOVE
, 
	`CLIENT_UID
(
u£r_c⁄n
), 
NULL
, 0);

494 
	`∑ssive_˛o£_˛õ¡
(
exi°_c⁄n
);

495 
	}
}

498 
	$C™Ac˚±Ip
(*
ù
)

500 *
vÆid_ù
[] = {

502 
NULL
,

505 **
p
;

506 
ùÀn
 = 
	`°æí
(
ù
);

508 
p
 = 
vÆid_ù
; *∞!
NULL
; ++p) {

509 
√éí
 = 
	`°æí
(*
p
);

510 i‡(
√éí
 <
ùÀn
 && 0 =
	`memcmp
(
ù
, *
p
,Çetlen)) {

516 
	}
}

519 
	$˛õ¡_ac˚±
(
fd
, 
evty≥
, *
¨g
)

522 
sockaddr_ö
 
addr
;

523 
sockÀn_t
 
sockÀn
 = (
addr
);

524 
sockaddr_ö
 
d°addr
;

525 
sockÀn_t
 
d°sockÀn
 = (
d°addr
);

527 
c⁄n_fd
 = 
	`ac˚±
(
fd
, (
sockaddr
*)&
addr
, &
sockÀn
);

528 i‡(
c⁄n_fd
 < 0) {

529 
	`≥º‹
("clientácceptÉrror");

533 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`fs_√t_c⁄√˘i⁄_√w_ext
(
c⁄n_fd
, 
˛õ¡_c⁄√˘i⁄_ªcv
,

534 
NULL
, 
˛õ¡_c⁄√˘i⁄_îr‹
, 
˛õ¡_max_outbuf
, (
˛õ¡_°©_t
));

535 
c⁄n
->
vfd
 = 
c⁄n_Æloc_vfd
++;

536 
	`öë_¡ﬂ_r
(
addr
.
sö_addr
, 
	`CLIENT_UDATA
(
c⁄n
)->
ù
, (CLIENT_UDATA(conn)->ip));

538 i‡(0 =
	`gësock«me
(
c⁄n_fd
, (
sockaddr
*)&
d°addr
, &
d°sockÀn
)) {

539 
	`öë_¡ﬂ_r
(
d°addr
.
sö_addr
, 
	`CLIENT_UDATA
(
c⁄n
)->
d°ù
, (CLIENT_UDATA(conn)->dstip));

542 
	`fs_√t_£t_n⁄block
(
c⁄n_fd
);

543 
	`CLIENT_GAME_STAT
(
c⁄n
Ë
LOGIN_ING
;

545 
	`CLIENT_UDATA
(
c⁄n
)->
s°©
 = 
SESSION_TRAFFIC
;

546 
	`≠r_hash_£t
(
˛õ¡_ba£
.
c⁄n_hash
, &
c⁄n
->
vfd
, (conn->vfd), conn);

547 
	`log_öfo
(
MOD_NETD
, "accept client fs:%d,vfd:%d,srcip:%s,dstip:%s",

548 
c⁄n_fd
, 
c⁄n
->
vfd
, 
	`CLIENT_UDATA
(c⁄n)->
ù
, CLIENT_UDATA(c⁄n)->
d°ù
);

558 
	}
}

561 
	$game_öput_ªmove
(
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

565 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
u£r_hash
, &
hódî
->
u
.
uid
, (header->u.uid));

566 i‡(
c⁄n
 !
NULL
) {

567 
	`log_îr‹
(
MOD_NETD
, "gamê˛o£ clõ¡.vfd:%d,ù:%s", 
c⁄n
->
vfd
, 
	`CLIENT_UDATA
(c⁄n)->
ù
);

568 
	`a˘ive_˛o£_˛õ¡
(
c⁄n
);

570 
	}
}

572 
	$game_öput_uniˇ°
(
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

574 
hódî
->
u
.
uid
) {

575 
FS_NETD_UID
: {

576 
fs_öbuf_t
 
öbuf
;

577 
	`FS_INBUF_INIT
(&
öbuf
, 
buf
, 
Àn
);

578 
	`fs_Ωc_di•©ch
(
√td_Ωc_Õc
, 
hódî
->
u
.
uid
, &
öbuf
);

582 
	`uid_to_˛õ¡
(
hódî
->
u
.
uid
, 
buf
, 
Àn
);

584 
	}
}

586 
	$game_öput_mu…iˇ°
(
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

588 
i
;

589 
	`as£π
(
hódî
->
u
.
uid_cou¡
 >= 0);

591 
fs_uid_t
 *
uid
 = 
buf
;

592 *
∑ylﬂd
 = 
uid
 + 
hódî
->
u
.
uid_cou¡
;

593 
size_t
 
∑ylﬂd_Àn
 = 
Àn
 - ((*)
∑ylﬂd
 - (*)
buf
);

595 
fs_nc_hódî_t
 
hdr
;

596 
	`FS_NC_SET_HEADER
(&
hdr
, 
∑ylﬂd_Àn
);

599 
i
 = 0; i < 
hódî
->
u
.
uid_cou¡
; ++i, ++
uid
) {

600 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
u£r_hash
, 
uid
, (*uid));

601 i‡(
c⁄n
 !
NULL
) {

608 
	`to_˛õ¡
(
c⁄n
, 
∑ylﬂd
, 
∑ylﬂd_Àn
);

611 
	}
}

613 
	$game_öput_brﬂdˇ°
(
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
)

615 
≠r_hash_ödex_t
 *
hi
;

616 *
c⁄n
;

618 
fs_nc_hódî_t
 
hdr
;

619 
	`FS_NC_SET_HEADER
(&
hdr
, 
Àn
);

621 
hi
 = 
	`≠r_hash_fú°
(
NULL
, 
˛õ¡_ba£
.
u£r_hash
); hi; hò
	`≠r_hash_√xt
(hi)) {

622 
	`≠r_hash_this
(
hi
, 
NULL
, NULL, &
c⁄n
);

623 i‡(
	`CLIENT_GAME_STAT
((
fs_√t_c⁄√˘i⁄_t
*)
c⁄n
Ë=
LOGIN_OK
) {

630 
	`to_˛õ¡
(
c⁄n
, 
buf
, 
Àn
);

633 
	}
}

635 
	$game_öput_di•©ch
(
fs_√t_c⁄√˘i⁄_t
 * 
gc⁄n
, 
fs_ng_hódî_t
 *
hódî
, *
buf
, 
size_t
 
Àn
, *
ud©a
)

638 
hódî
->
cmd
) {

639 
FS_NG_REMOVE
:

640 
	`game_öput_ªmove
(
hódî
, 
buf
, 
Àn
);

642 
FS_NG_UNICAST
:

643 
	`game_öput_uniˇ°
(
hódî
, 
buf
, 
Àn
);

645 
FS_NG_MULTICAST
:

646 
	`game_öput_mu…iˇ°
(
hódî
, 
buf
, 
Àn
);

648 
FS_NG_BROADCAST
:

649 
	`game_öput_brﬂdˇ°
(
hódî
, 
buf
, 
Àn
);

652 
	`log_îr‹
(
MOD_NETD
, "gamêöpuàunknow cmd:%d", 
hódî
->
cmd
);

654 
	}
}

656 
	$game_c⁄√˘i⁄_ªcv
(
buf„ªvít
 *
bu„v
, *
¨g
)

658 
	`READ_PACKET
(
fs_ng_hódî_t
, 
bu„v
, 
¨g
, 
game_öput_di•©ch
, 
NULL
);

659 
	}
}

663 
	$˛o£_˛õ¡_£rvi˚
()

665 i‡(
is_˛õ¡_£rvõ˚_›í
) {

666 
	`log_öfo
(
MOD_NETD
, "close client service");

667 i‡(
game_c⁄n
 !
NULL
) {

668 
	`fs_√t_c⁄√˘i⁄_de°roy
(
game_c⁄n
);

669 
game_c⁄n
 = 
NULL
;

672 i‡(
˛õ¡_ac˚±‹
 !
NULL
) {

673 
	`fs_√t_ac˚±‹_de°roy
(
˛õ¡_ac˚±‹
);

674 
˛õ¡_ac˚±‹
 = 
NULL
;

677 
is_˛õ¡_£rvõ˚_›í
 = 0;

679 
	}
}

682 
	$game_c⁄√˘i⁄_îr‹
(
buf„ªvít
 *
bu„v
, 
wh©
, *
¨g
)

684 
	`log_îr‹
(
MOD_NETD
, "c⁄√˘i⁄ o‡gamedÉº‹:%d", 
wh©
);

685 
	`a˘ive_˛o£_Æl_˛õ¡
();

686 
	`˛o£_˛õ¡_£rvi˚
();

687 
	}
}

690 
	$›í_˛õ¡_£rvi˚
(
fd
)

692 i‡(!
is_˛õ¡_£rvõ˚_›í
) {

693 
	`log_öfo
(
MOD_NETD
, "open client service");

694 i‡(
game_c⁄n
 =
NULL
) {

696 
c⁄n_fd
 = 
	`ac˚±
(
fd
, 
NULL
, NULL);

697 i‡(
c⁄n_fd
 < 0) {

698 
	`≥º‹
("accept game connection");

701 
	`log_öfo
(
MOD_NETD
, "gamêac˚±:%d", 
c⁄n_fd
);

702 
	`fs_√t_£t_n⁄block
(
c⁄n_fd
);

703 
game_c⁄n
 = 
	`fs_√t_c⁄√˘i⁄_√w
(
c⁄n_fd
, 
game_c⁄√˘i⁄_ªcv
, 
NULL
,

704 
game_c⁄√˘i⁄_îr‹
, 
game_max_outbuf
, 
NULL
);

706 i‡(
˛õ¡_ac˚±‹
 =
NULL
) {

707 
	`log_öfo
(
MOD_NETD
, "li°í o¿˛õ¡:%s, %d", 
˛õ¡_ù
, 
˛õ¡_p‹t
);

708 
˛õ¡_fd
 = 
	`fs_√t_li°í
(
˛õ¡_ù
, 
˛õ¡_p‹t
, 
backlog
, 0);

709 i‡(
˛õ¡_fd
 < 0) {

710 
	`log_öfo
(
MOD_NETD
, "li°í o¿˛õ¡Éº‹:%s, %d", 
˛õ¡_ù
, 
˛õ¡_p‹t
);

713 
˛õ¡_ac˚±‹
 = 
	`fs_√t_ac˚±‹_√w
(
˛õ¡_fd
, 
˛õ¡_ac˚±
, 
NULL
);

717 
is_˛õ¡_£rvõ˚_›í
 = 1;

722 
	}
}

725 
	$game_ac˚±
(
fd
, 
evty≥
, *
¨g
)

727 i‡(0 > 
	`›í_˛õ¡_£rvi˚
(
fd
)) {

728 
c⁄n_fd
 = 
	`ac˚±
(
fd
, 
NULL
, NULL);

729 
	`log_îr‹
(
MOD_NETD
, "denyánother gamed connection");

731 
	`˛o£
(
c⁄n_fd
);

733 
	}
}

735 
	$shutdown_logic
()

737 
	`a˘ive_˛o£_Æl_˛õ¡
();

738 
	}
}

740 
	$√td_shutdown_d´m⁄
()

742 
	`shutdown_logic
();

743 
	`˛o£_˛õ¡_£rvi˚
();

745 i‡(
game_ac˚±‹
 !
NULL
)

746 
	`fs_√t_ac˚±‹_de°roy
(
game_ac˚±‹
);

750 i‡(
auth_hâpd
 !
NULL
) {

751 
	`hâp_£rvî_de°roy
(
auth_hâpd
);

754 
	`fs_√t_mbuf_‰ì
(
gamed_Ωc_buf
);

755 
	`fs_√t_mbuf_‰ì
(
˛õ¡_Ωc_buf
);

757 
	`≠r_poﬁ_de°roy
(
˛õ¡_ba£
.
poﬁ
);

759 
	`≠r_ãrmö©e
();

760 
	`evít_lo›exô
(
NULL
);

762 i‡(
£rvî_¥ikey
) {

763 
	`RSA_‰ì
(
£rvî_¥ikey
);

765 i‡(
˛õ¡_pubkey
) {

766 
	`RSA_‰ì
(
˛õ¡_pubkey
);

769 
	`exô
(0);

770 
	}
}

773 
	$mbuf_to_˛õ¡
(
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
, 
hódsize
, 
fs_mbuf_t
 *
mbuf
, 
buf„ªvít
 *
bu„v
)

775 i‡(
mbuf
->
d©a_size
 > 0) {

776 
fs_mbuf_blk_t
 *
blk
;

778 
zbuf
[
mbuf
->
d©a_size
];

779 
off
 = 0;

782 
blk
 = 
mbuf
->
hód
; blk !
NULL
; blk = blk->
√xt
) {

783 
Àn
 = 
	`FS_MBUF_BLK_DATA_LEN
(
blk
);

784 i‡(
Àn
 > 0) {

786 
	`mem˝y
(
zbuf
 + 
off
, 
blk
->
hód
, 
Àn
);

787 
off
 +
Àn
;

791 
d©asz
 = 
mbuf
->
d©a_size
 - 
hódsize
;

792 
	`zwrôî_˛ór
(&
	`CLIENT_ZWRITER
(
c⁄n
));

793 
	`zwrôî_wrôe
(&
	`CLIENT_ZWRITER
(
c⁄n
), 
zbuf
 + 
hódsize
, 
d©asz
);

796 
	`fs_√t_c⁄√˘i⁄_£nd
(
c⁄n
, 
	`CLIENT_ZWRITER
(c⁄n).
zbuf
, CLIENT_ZWRITER(c⁄n).
zoff
);

799  
mbuf
->
d©a_size
;

800 
	}
}

804 
	$Ωc_ˇŒ_˛õ¡
(
¨gc
, 
svÆue_t
 *
¨gv
)

806 
fs_vfd_t
 
vfd
;

807 i‡(
	`fs_Ωc_Õc_∑ck_¨g
(
¨gc
, 
¨gv
, 
√td_Ωc_Õc
, 
˛õ¡_Ωc_buf
, &
vfd
)) {

811 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
c⁄n_hash
, &
vfd
, (vfd));

812 i‡(
c⁄n
 =
NULL
) {

813 
	`log_îr‹
(
MOD_NETD
, "îr‹!Çÿ˛õ¡ vfd:%d", 
vfd
);

817 
	`FS_NC_SET_HEADER
((
fs_nc_hódî_t
*)
˛õ¡_Ωc_buf
->
hód
, 
	`FS_NET_MBUF_PAYLOAD_LEN
(client_rpc_buf));

818 
	`fs_√t_mbuf_£nd
(
˛õ¡_Ωc_buf
, 
c⁄n
);

821 
	}
}

823 
	$Ωc_ˇŒ_gamed
(
¨gc
, 
svÆue_t
 *
¨gv
)

825 
gamed_id
;

826 i‡(
	`fs_Ωc_Õc_∑ck_¨g
(
¨gc
, 
¨gv
, 
√td_Ωc_Õc
, 
gamed_Ωc_buf
, &
gamed_id
)) {

830 
	`FS_NG_SET_HEADER
(
gamed_Ωc_buf
->
hód
, 
FS_NG_RPC
, 
gamed_id
, 
	`FS_NET_MBUF_PAYLOAD_LEN
(gamed_rpc_buf));

831 
	`fs_√t_mbuf_£nd
(
gamed_Ωc_buf
, 
game_c⁄n
);

833 
	}
}

835 
	$Ωc_ˇŒ_imp
(
¨gc
, 
svÆue_t
 *
¨gv
)

837 i‡(
¨gv
[0].
ty≥
 !
T_NUMBER
) {

838 
	`log_îr‹
(
MOD_NETD
, "îr‹! wr⁄gÑp¯de°ö©i⁄Åy≥:%s", 
	`ty≥_«me
(
¨gv
[0].
ty≥
));

841 
to
 = 
¨gv
[0].
u
.
numbî
;

842 i‡(
to
 =
FS_GAMED_UID
) {

843  
	`Ωc_ˇŒ_gamed
(
¨gc
, 
¨gv
);

845  
	`Ωc_ˇŒ_˛õ¡
(
¨gc
, 
¨gv
);

847 
	}
}

850 
	$f_fs_is_uid_c⁄√˘ed
()

852 
SET_ALL_ARGS
;

853 
fs_uid_t
 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

854 
POP_ALL_ARGS
;

855 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
u£r_hash
, &
uid
, (uid));

856 
ªt
 = 
c⁄n
 =
NULL
 ? 0 : 1;

857 
	`push_numbî
(
ªt
);

858 
	}
}

860 
	$f_fs_˛o£_uid_c⁄√˘i⁄
()

862 
SET_ALL_ARGS
;

863 
fs_uid_t
 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

864 
POP_ALL_ARGS
;

865 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
u£r_hash
, &
uid
, (uid));

866 i‡(
c⁄n
 !
NULL
) {

867 
	`log_îr‹
(
MOD_NETD
, "˛o£ uid c⁄√˘i⁄.vfd:%d,ù:%s", 
c⁄n
->
vfd
, 
	`CLIENT_UDATA
(c⁄n)->
ù
);

868 
	`a˘ive_˛o£_˛õ¡
(
c⁄n
);

869 
	`push_numbî
(0);

871 
	`push_numbî
(-1);

873 
	}
}

875 
	$f_fs_˛o£_vfd_c⁄√˘i⁄
()

877 
SET_ALL_ARGS
;

878 
fs_vfd_t
 
vfd
 = 
	`ARGS
(0)->
u
.
numbî
;

879 
POP_ALL_ARGS
;

880 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
c⁄n_hash
, &
vfd
, (vfd));

881 i‡(
c⁄n
 !
NULL
) {

882 
	`log_îr‹
(
MOD_NETD
, "˛o£ vfd c⁄√˘i⁄.vfd:%d,ù:%s", 
c⁄n
->
vfd
, 
	`CLIENT_UDATA
(c⁄n)->
ù
);

883 
	`a˘ive_˛o£_˛õ¡
(
c⁄n
);

884 
	`push_numbî
(0);

886 
	`push_numbî
(-1);

888 
	}
}

890 
	$f_fs_gë_vfd_by_uid
()

892 
SET_ALL_ARGS
;

893 
fs_uid_t
 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

894 
POP_ALL_ARGS
;

895 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
u£r_hash
, &
uid
, (uid));

896 i‡(
c⁄n
 !
NULL
) {

897 
	`push_numbî
(
c⁄n
->
vfd
);

899 
	`push_numbî
(0);

901 
	}
}

903 
	$f_fs_gë_uid_by_vfd
()

905 
SET_ALL_ARGS
;

906 
fs_vfd_t
 
vfd
 = 
	`ARGS
(0)->
u
.
numbî
;

907 
POP_ALL_ARGS
;

908 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
c⁄n_hash
, &
vfd
, (vfd));

909 i‡(
c⁄n
 !
NULL
) {

910 
	`push_numbî
(
	`CLIENT_UID
(
c⁄n
));

912 
	`push_numbî
(0);

914 
	}
}

916 
	$f_fs_gë_ù_by_vfd
()

918 
SET_ALL_ARGS
;

919 
fs_vfd_t
 
vfd
 = 
	`ARGS
(0)->
u
.
numbî
;

920 
POP_ALL_ARGS
;

921 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
c⁄n_hash
, &
vfd
, (
fs_vfd_t
));

922 i‡(
c⁄n
 !
NULL
) {

923 
	`c›y_™d_push_°rög
(
	`CLIENT_UDATA
(
c⁄n
)->
ù
);

926 
	`push_numbî
(0);

928 
	}
}

930 
	$f_fs_√w_u£r
()

932 
SET_ALL_ARGS
;

933 
fs_vfd_t
 
vfd
 = 
	`ARGS
(0)->
u
.
numbî
;

934 
fs_uid_t
 
uid
 = 
	`ARGS
(1)->
u
.
numbî
;

935 
fs_√t_c⁄√˘i⁄_t
 *
c⁄n
 = 
	`≠r_hash_gë
(
˛õ¡_ba£
.
c⁄n_hash
, &
vfd
, (vfd));

936 i‡(
c⁄n
 !
NULL
) {

938 
	`CLIENT_GAME_STAT
(
c⁄n
Ë
LOGIN_OK
;

939 
	`CLIENT_UID
(
c⁄n
Ë
uid
;

940 
	`≠r_hash_£t
(
˛õ¡_ba£
.
u£r_hash
, &
	`CLIENT_UID
(
c⁄n
), (
fs_uid_t
), conn);

943 
POP_ALL_ARGS
;

944 
	}
}

947 
	$sig«l_evít
(
sig
, 
evty≥
, *
¨g
)

949 
	`log_öfo
(
MOD_NETD
, "√td c©ch sig«l:%d", 
sig
);

950 i‡(
sig
 =
SIGINT
) {

951 
	`exô
(0);

953 
	}
}

955 
	$emîgícy_öãºu±
(
sig
)

957 
	`log_îr‹
(
MOD_NETD
, "emîgícy i¡îru±:%d", 
sig
);

958 
	}
}

960 
	$öô
()

962 
ev_ba£
 = 
	`evít_öô
();

963 
	`öô_sig«l
(
sig«l_evít
, 
emîgícy_öãºu±
);

965 
	`≠r_öôülize
();

967 
˛õ¡_Ωc_buf
 = 
	`fs_√t_mbuf_√w
((
fs_nc_hódî_t
));

968 
gamed_Ωc_buf
 = 
	`fs_√t_mbuf_√w
((
fs_ng_hódî_t
));

970 
	`£çro˘ôÀ
("-√td_%s", 
	`fs_c⁄fig_gë_°rög
(
ENGINE_NAME
));

972 
	`≠r_poﬁ_¸óã
(&
˛õ¡_ba£
.
poﬁ
, 
NULL
);

973 
˛õ¡_ba£
.
c⁄n_hash
 = 
	`≠r_hash_make
(˛õ¡_ba£.
poﬁ
);

974 
˛õ¡_ba£
.
u£r_hash
 = 
	`≠r_hash_make
(˛õ¡_ba£.
poﬁ
);

977 
game_fd
 = 
	`fs_√t_li°í
(
game_ù
, 
game_p‹t
, 
backlog
, 0);

978 i‡(
game_fd
 < 0) {

979 
	`≥º‹
("listen for game");

980 
	`exô
(1);

982 
	`log_öfo
(
MOD_NETD
, "li°í o¿game:%s, %d", 
game_ù
, 
game_p‹t
);

983 
game_ac˚±‹
 = 
	`fs_√t_ac˚±‹_√w
(
game_fd
, 
game_ac˚±
, 
NULL
);

986 i‡(
ho°_p‹t
 > 0) {

988 i‡((
auth_hâpd
 = 
	`hâp_£rvî_öô
(
ev_ba£
, "0.0.0.0", 
ho°_p‹t
)Ë=
NULL
) {

989 
	`log_îr‹
(
MOD_NETD
, "öô hâ∞£rvîÉº‹.Ö‹t:%d", 
ho°_p‹t
);

990 
	`as£π
(0);

992 
	`log_öfo
(
MOD_NETD
, "hâ∞ho°Üi°í on:%d", 
ho°_p‹t
);

995 *
Ωc_cfg
 = 
	`fs_c⁄fig_gë_°rög
(
RPC_CFG
);

996 
√td_Ωc_Õc
 = 
	`fs_Ωc_Õc_¸óã
(
Ωc_cfg
, 
Ωc_ˇŒ_imp
);

998 
	}
}

1001 
	$£tup_c⁄fig
()

1003 *
gù
 = 
	`fs_c⁄fig_gë_°rög
(
NETD_IP
);

1004 i‡(
gù
 !
NULL
) {

1005 
game_ù
 = 
	`°rdup
(
gù
);

1008 
gp‹t
 = 
	`fs_c⁄fig_gë_öt
(
NETD_PORT
);

1009 i‡(
gp‹t
 >= 0) {

1010 
game_p‹t
 = 
gp‹t
;

1013 
˝‹t
 = 
	`fs_c⁄fig_gë_öt
(
NETD_OUTER_PORT
);

1014 i‡(
˝‹t
 >= 0) {

1015 
˛õ¡_p‹t
 = 
˝‹t
;

1018 
hp‹t
 = 
	`fs_c⁄fig_gë_öt
(
NETD_HOST_PORT
);

1019 
	`log_öfo
(
MOD_NETD
, "gë ho°Ö‹t:%d", 
hp‹t
);

1020 i‡(
hp‹t
 >= 0) {

1021 
ho°_p‹t
 = 
hp‹t
;

1024 
hid
 = 
	`fs_c⁄fig_gë_öt
(
HOST_ID
);

1025 i‡(
hid
 == 0) {

1026 
	`log_îr‹
(
MOD_NETD
, "haveÅo specifyÅhe host id");

1027 
	`as£π
(0);

1030 
ho°_id
 = 
hid
;

1032 
	`log_öfo
(
MOD_NETD
, "netd host_id:%d,client_ip:%s,client_port:%d,game_ip:%s,game_port:%d,host_port:%d",

1033 
ho°_id
, 
˛õ¡_ù
, 
˛õ¡_p‹t
, 
game_ù
, 
game_p‹t
, 
ho°_p‹t
);

1034 
	}
}

1036 
	$£tup_rß
()

1038 
FILE
 *
Âri
 = 
	`f›í
("etc/config/server_privatekey.pem", "r");

1039 
	`as£π
(
Âri
);

1040 
£rvî_¥ikey
 = 
	`RSA_√w
();

1041 
	`as£π
(
	`PEM_ªad_RSAPriv©eKey
(
Âri
, &
£rvî_¥ikey
, 
NULL
, NULL));

1042 
	`f˛o£
(
Âri
);

1045 
FILE
 *
Âub
 = 
	`f›í
("etc/config/client_publickey.pem", "r");

1046 
	`as£π
(
Âub
);

1047 
˛õ¡_pubkey
 = 
	`RSA_√w
();

1048 
	`as£π
(
	`PEM_ªad_RSA_PUBKEY
(
Âub
, &
˛õ¡_pubkey
, 
NULL
, NULL));

1049 
	`f˛o£
(
Âub
);

1050 
	}
}

1052 
	$moduÀ_öô_√td
()

1054 
	`£tup_c⁄fig
();

1055 
	`öô
();

1059 
£c
, 
u£c
;

1060 
£c
 = 
	`fs_c⁄fig_gë_öt
(
SYSTEM_INTERVAL_SEC
);

1061 
u£c
 = 
	`fs_c⁄fig_gë_öt
(
SYSTEM_INTERVAL_USEC
);

1062 
	`ˇŒout_öô
–
£c
, 
u£c
);

1063 
	`ˇŒout_öô
–
£c
, 
u£c
 );

1065 
	}
}

1067 
	$sy°em_°¨tup_√td
()

1069 
	`ˇŒ_s¸ùt_func
("/rc/netd_main", "main", "");

1070 
	`evít_di•©ch
();

1071 
	}
}

	@packages/rpc.c

3 
	~"fs_Ωc.h
"

4 
	~"fs_Ωc_c.h
"

5 
	~"fs_mbuf.h
"

8 
	~<°rög.h
>

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<˘y≥.h
>

12 
	~<as£π.h
>

14 
	#CHECK_BUFF
(
buf
, 
Àn
) do { \

15 i‡(
	`EVBUFFER_LENGTH
((
buf
)Ë< (()(
Àn
)))  -1; \

16 } 0)

	)

18 
	gg_log_±o_íabÀ
 = 0;

20 * 
	gty≥_«me
[] = {"rpc_int", "rpc_string", "rpc_class", "rpc_object",};

22 *
	$fs_Ωc_ty≥_«me
(
ty≥
)

24 i‡(
ty≥
 >0 &&Åy≥ < (
ty≥_«me
)/(*)) {

25  
ty≥_«me
[
ty≥
];

29 
	}
}

31 *
	$fs_Ωc_fõld_ty≥_«me
(
fs_Ωc_fõld_t
 *
fõld
)

33 
fõld
->
ty≥
) {

34 
FS_RPC_CLASS
:

35  
fõld
->
˛ass_±r
->
«me
;

37  
	`fs_Ωc_ty≥_«me
(
fõld
->
ty≥
);

39 
	}
}

41 
	$fs_Ωc_£t_˛ass_±r
(
fs_Ωc_èbÀ_t
 *
èbÀ
)

43 
i
, 
j
;

44 
fs_Ωc_˛ass_èbÀ_t
 *
˛ass_èbÀ
 = 
èbÀ
->class_table;

45 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
 = 
èbÀ
->function_table;

47 i‡(
˛ass_èbÀ
 =
NULL
) ;

49 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

50 
fs_Ωc_˛ass_t
 *
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

51 
j
 = 0; j < 
˛s
->
fõld_cou¡
; ++j) {

52 
fs_Ωc_fõld_t
 *
fõld
 = &
˛s
->fõld[
j
];

53 i‡(
fõld
->
˛ass_ödex
 >= 0)

54 
fõld
->
˛ass_±r
 = &
˛ass_èbÀ
->
Ωc_˛ass
[fõld->
˛ass_ödex
];

58 
i
 = 0; i < 
fun˘i⁄_èbÀ
->
ñts
; ++i) {

59 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
[
i
];

60 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

61 
j
 = 0; j < 
¨g_˛s
->
fõld_cou¡
; ++j) {

62 
fs_Ωc_fõld_t
 *
fõld
 = &
¨g_˛s
->fõld[
j
];

63 i‡(
fõld
->
˛ass_ödex
 >= 0)

64 
fõld
->
˛ass_±r
 = &
˛ass_èbÀ
->
Ωc_˛ass
[fõld->
˛ass_ödex
];

67 
	}
}

69 
	$˛ass_‰ì
(
fs_Ωc_˛ass_t
 *
˛s
)

71 i‡(
˛s
 !
NULL
) {

72 
i
;

73 
i
 = 0; i < 
˛s
->
fõld_cou¡
; ++i) {

74 
fs_Ωc_fõld_t
 *
fõld
 = &
˛s
->fõld[
i
];

75 
	`‰ì
(
fõld
->
«me
);

77 
	`‰ì
(
˛s
->
fõld
);

78 
	`‰ì
(
˛s
->
«me
);

80 
	}
}

82 
	$‰ì_fun˘i⁄
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
)

84 i‡(
fun˘i⁄
 !
NULL
) {

85 
	`‰ì
(
fun˘i⁄
->
moduÀ
);

86 
	`˛ass_‰ì
(&
fun˘i⁄
->
¨g_˛ass
);

88 
	}
}

90 
	$fs_Ωc_èbÀ_de°roy
(
fs_Ωc_èbÀ_t
 *
èbÀ
)

92 
i
;

93 
fs_Ωc_˛ass_èbÀ_t
 *
˛ass_èbÀ
 = 
èbÀ
->class_table;

94 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
 = 
èbÀ
->function_table;

96 i‡(
˛ass_èbÀ
 !
NULL
) {

97 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

98 
fs_Ωc_˛ass_t
 *
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

99 
	`˛ass_‰ì
(
˛s
);

101 
	`‰ì
(
˛ass_èbÀ
);

104 i‡(
fun˘i⁄_èbÀ
 !
NULL
) {

105 
i
 = 0; i < 
fun˘i⁄_èbÀ
->
ñts
; ++i) {

106 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
[
i
];

107 
	`‰ì_fun˘i⁄
(
fun˘i⁄
);

110 
	`‰ì
(
fun˘i⁄_èbÀ
);

113 
	`mem£t
(
èbÀ
, 0, (*table));

114 
	}
}

116 
fs_Ωc_f‹óch_fun˘i⁄
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, (*
a˘i⁄
)(
fs_Ωc_fun˘i⁄_t
 *
fun
, *
ud©a
), *udata)

118 
i
;

119 
i
 = 0; i < 
èbÀ
->
ñts
; ++i) {

120 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
èbÀ
->
Ωc_fun˘i⁄
[
i
];

121 if(
	`a˘i⁄
(
fun˘i⁄
, 
ud©a
) == 0)

124 
	}
}

126 * 
	$°ruµî
(*
low
)

128 *
p
;

129 
p
 = 
low
; *p != '\0';Ö++) {

130 *
p
 = 
	`touµî
(*p);

132  
low
;

133 
	}
}

135 
	$fs_Ωc_dump_fun˘i⁄_c_id
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
)

137 
FILE
 *
f
 ;

138 
˛o£
, 
i
;

140 i‡(
fûe
 =
NULL
) {

141 
f
 = 
°dout
;

142 
˛o£
 = 0;

144 
f
 = 
	`f›í
(
fûe
, "w");

145 
˛o£
 = 1;

148 i‡(
f
 =
NULL
) {

149 
	`≥º‹
("failÅo open file for dumping");

150 
	`Ârötf
(
°dîr
, "Áû fûe:%s\n", 
fûe
);

154 i‡(
èbÀ
 !
NULL
) {

155 
	`Ârötf
(
f
, "#ifndef _FS_RPC_ID_\n");

156 
	`Ârötf
(
f
, "#define _FS_RPC_ID_\n\n");

158 
i
 = 0; i < 
èbÀ
->
ñts
; ++i) {

159 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
èbÀ
->
Ωc_fun˘i⁄
[
i
];

160 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

161 i‡(
fun˘i⁄
->
fun˘i⁄_id
 < 
FS_RPC_LPC_PID_START
 ) {

162 
	`Ârötf
(
f
, "#deföê%†%d\n", 
	`°ruµî
(
¨g_˛s
->
«me
), 
fun˘i⁄
->
fun˘i⁄_id
);

166 
	`Ârötf
(
f
, "\n#endif /*_FS_RPC_ID_*/\n");

169 i‡(
˛o£
) {

170 
	`f˛o£
(
f
);

174 
	}
}

176 
	$fs_Ωc_dump_fun˘i⁄_id
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
)

178 
FILE
 *
f
 ;

179 
˛o£
, 
i
;

181 i‡(
fûe
 =
NULL
) {

182 
f
 = 
°dout
;

183 
˛o£
 = 0;

185 
f
 = 
	`f›í
(
fûe
, "w");

186 
˛o£
 = 1;

189 i‡(
f
 =
NULL
) {

190 
	`≥º‹
("failÅo open file for dumping");

191 
	`Ârötf
(
°dîr
, "Áû fûe:%s\n", 
fûe
);

195 i‡(
èbÀ
 !
NULL
) {

196 
	`Ârötf
(
f
, "#ifndef _FS_RPC_ID_\n");

197 
	`Ârötf
(
f
, "#define _FS_RPC_ID_\n\n");

199 
i
 = 0; i < 
èbÀ
->
ñts
; ++i) {

200 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
èbÀ
->
Ωc_fun˘i⁄
[
i
];

201 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

202 
	`Ârötf
(
f
, "#deföê%†%d\n", 
	`°ruµî
(
¨g_˛s
->
«me
), 
fun˘i⁄
->
fun˘i⁄_id
);

205 
	`Ârötf
(
f
, "\n#endif /*_FS_RPC_ID_*/\n");

208 i‡(
˛o£
) {

209 
	`f˛o£
(
f
);

213 
	}
}

215 
	$fs_Ωc_dump_cfg
(
fs_Ωc_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
)

217 
FILE
 *
f
 ;

218 
˛o£
, 
i
, 
j
;

219 
fs_Ωc_˛ass_èbÀ_t
 *
˛ass_èbÀ
 = 
èbÀ
->class_table;

220 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
 = 
èbÀ
->function_table;

222 i‡(
fûe
 =
NULL
) {

223 
f
 = 
°dout
;

224 
˛o£
 = 0;

226 
f
 = 
	`f›í
(
fûe
, "w");

227 
˛o£
 = 1;

230 i‡(
f
 =
NULL
) {

231 
	`≥º‹
("failÅo open file for dumping");

232 
	`Ârötf
(
°dîr
, "Áû fûe:%s\n", 
fûe
);

236 i‡(
˛ass_èbÀ
 !
NULL
) {

237 
	`Ârötf
(
f
, "˛ass_èbÀ_num:%d\n", 
˛ass_èbÀ
->
ñts
);

238 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

239 
fs_Ωc_˛ass_t
 *
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

240 
	`Ârötf
(
f
, "fõld_cou¡:%d,c_imp:%d,˛ass_«me=%s\n", 
˛s
->
fõld_cou¡
, cls->
c_imp
, cls->
«me
);

241 
j
 = 0; j < 
˛s
->
fõld_cou¡
; ++j) {

242 
fs_Ωc_fõld_t
 *
fõld
 = &
˛s
->fõld[
j
];

243 
	`Ârötf
(
f
, "field_type:%d,class_index:%d,array:%d,field_name:%s\n",

244 
fõld
->
ty≥
, fõld->
˛ass_ödex
, fõld->
¨øy
, fõld->
«me
);

249 i‡(
fun˘i⁄_èbÀ
 !
NULL
) {

250 
	`Ârötf
(
f
, "fun˘i⁄_èbÀ_num:%d\n", 
fun˘i⁄_èbÀ
->
ñts
);

251 
i
 = 0; i < 
fun˘i⁄_èbÀ
->
ñts
; ++i) {

252 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
[
i
];

253 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

254 
	`Ârötf
(
f
, "function_id:%d,c_imp:%d,arg_count:%d,module:%s,function_name:%s\n",

255 
fun˘i⁄
->
fun˘i⁄_id
, 
¨g_˛s
->
c_imp
,árg_˛s->
fõld_cou¡
, fun˘i⁄->
moduÀ
,árg_˛s->
«me
);

256 
j
 = 0; j < 
¨g_˛s
->
fõld_cou¡
; ++j) {

257 
fs_Ωc_fõld_t
 *
fõld
 = &
¨g_˛s
->fõld[
j
];

258 
	`Ârötf
(
f
, "arg_type:%d,class_index:%d,array:%d\n",

259 
fõld
->
ty≥
, fõld->
˛ass_ödex
, fõld->
¨øy
);

264 i‡(
˛o£
) {

265 
	`f˛o£
(
f
);

269 
	}
}

271 
	$dump_c_de˛¨©i⁄
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, *
köd
, 
FILE
 *
f
)

274 
i
;

275 
i
 = 0; i < 
èbÀ
->
ñts
; ++i) {

276 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
èbÀ
->
Ωc_fun˘i⁄
[
i
];

277 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

278 i‡(!
¨g_˛s
->
c_imp
)

281 i‡(
	`°r°r
(
¨g_˛s
->
«me
, 
köd
)) {

282 i‡(
	`FS_RPC_CHECK_C_DECL
(
¨g_˛s
))

283 
	`Ârötf
(
f
, "void %s(öt, %†*);\n", 
¨g_˛s
->
«me
,árg_˛s->
fõld
[1].
˛ass_±r
->name);

285 
	`Ârötf
(
°dîr
, "îr‹:%†¯Ω¯⁄lyác˚±Åwÿ¨gs\n", 
¨g_˛s
->
«me
);

288 
	}
}

290 
	$fs_Ωc_dump_c_h
(
fs_Ωc_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
)

292 
FILE
 *
f
 ;

293 
˛o£
, 
i
, 
j
;

294 
fs_Ωc_˛ass_èbÀ_t
 *
˛ass_èbÀ
 = 
èbÀ
->class_table;

295 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
 = 
èbÀ
->function_table;

297 i‡(
fûe
 =
NULL
) {

298 
f
 = 
°dout
;

299 
˛o£
 = 0;

301 
f
 = 
	`f›í
(
fûe
, "w");

302 
˛o£
 = 1;

305 i‡(
f
 =
NULL
) {

306 
	`≥º‹
("failÅo open file for dumpingÑpc c header");

307 
	`Ârötf
(
°dîr
, "Áû fûe:%s\n", 
fûe
);

311 
	`Ârötf
(
f
, "\n#ifndef _FS_RPC_C_H\n");

312 
	`Ârötf
(
f
, "#define _FS_RPC_C_H\n");

314 
	`Ârötf
(
f
, "\n#include \"fs_rpc.h\"");

315 
	`Ârötf
(
f
, "\n#include \"fs_rpc_id.h\"\n\n");

316 
	`Ârötf
(
f
, "extern fs_rpc_class_meta_t fs_rpc_class_metas[];\n");

317 
	`Ârötf
(
f
, "extern fs_rpc_function_meta_t fs_rpc_function_metas[];\n");

318 
	`Ârötf
(
f
, "\n");

320 i‡(
˛ass_èbÀ
 !
NULL
) {

322 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

323 
fs_Ωc_˛ass_t
 *
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

324 i‡(!
˛s
->
c_imp
) ;

325 
	`Ârötf
(
f
, "ty≥de‡°ru˘ %†%s;\n", 
˛s
->
«me
, cls->name);

329 
	`Ârötf
(
f
, "\n#define FS_RPC_C_TYPE \\\n");

330 
	`Ârötf
(
f
, "\tvoid *data;\t\\\n");

331 
	`Ârötf
(
f
, "\tfs_rpc_int_t *intp;\t\\\n");

332 
	`Ârötf
(
f
, "\tfs_rpc_string_t *stringp;\t\\\n");

334 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

335 
fs_Ωc_˛ass_t
 *
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

336 i‡(!
˛s
->
c_imp
) ;

337 i‡(
i
 < 
˛ass_èbÀ
->
ñts
 - 1) {

338 
	`Ârötf
(
f
, "\t%†*%•;\t\\\n", 
˛s
->
«me
, cls->name);

340 
	`Ârötf
(
f
, "\t%†*%•;\n", 
˛s
->
«me
, cls->name);

344 
	`Ârötf
(
f
, "\ntypedef struct fs_rpc_array_s {;\n");

345 
	`Ârötf
(
f
, "\tfs_rpc_size_tÇ;\n");

346 
	`Ârötf
(
f
, "\tunion {\n");

347 
	`Ârötf
(
f
, "\tFS_RPC_C_TYPE\n");

348 
	`Ârötf
(
f
, "\t}u;\n");

349 
	`Ârötf
(
f
, "} fs_rpc_array_t;\n\n");

352 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

353 
fs_Ωc_˛ass_t
 *
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

354 i‡(!
˛s
->
c_imp
) ;

355 
	`Ârötf
(
f
, "°ru˘ %†{\n", 
˛s
->
«me
);

356 
j
 = 0; j < 
˛s
->
fõld_cou¡
; ++j) {

357 
fs_Ωc_fõld_t
 *
fõld
 = &
˛s
->fõld[
j
];

358 i‡(
fõld
->
¨øy
 =
FS_RPC_ARRAY_VAR
) {

359 
fõld
->
ty≥
) {

360 
FS_RPC_INT
:

361 
	`Ârötf
(
f
, "\tfs_Ωc_¨øy_à%s;\n", 
fõld
->
«me
);

363 
FS_RPC_STRING
:

364 
	`Ârötf
(
f
, "\tfs_Ωc_¨øy_à%s;\n", 
fõld
->
«me
);

366 
FS_RPC_CLASS
:

367 
	`Ârötf
(
f
, "\tfs_Ωc_¨øy_à%s;\n", 
fõld
->
«me
);

371 
fõld
->
ty≥
) {

372 
FS_RPC_INT
:

373 
	`Ârötf
(
f
, "\töà%s;\n", 
fõld
->
«me
);

375 
FS_RPC_STRING
:

376 
	`Ârötf
(
f
, "\tfs_Ωc_°rög_à%s;\n", 
fõld
->
«me
);

378 
FS_RPC_CLASS
:

379 
	`Ârötf
(
f
, "\t%†%s;\n", 
fõld
->
˛ass_±r
->
«me
, field->name);

385 
	`Ârötf
(
f
, "};\n\n");

390 i‡(
fun˘i⁄_èbÀ
 !
NULL
) {

391 
	`Ârötf
(
f
, "#ifdef __FreeBSD__\n");

392 
	`dump_c_de˛¨©i⁄
(
fun˘i⁄_èbÀ
, 
FS_RPC_SERVER_PREFIX
, 
f
);

393 
	`Ârötf
(
f
, "#elif MS_WINDOWS\n");

394 
	`dump_c_de˛¨©i⁄
(
fun˘i⁄_èbÀ
, 
FS_RPC_CLIENT_PREFIX
, 
f
);

395 
	`Ârötf
(
f
, "#else\n");

396 
	`Ârötf
(
f
, "#error \"not supportÖlatform\"\n");

397 
	`Ârötf
(
f
, "#endif\n");

400 
	`Ârötf
(
f
, "\n#endif /*_FS_RPC_C_H*/\n");

402 i‡(
˛o£
) {

403 
	`f˛o£
(
f
);

407 
	}
}

410 
	$dump_c_fun˘i⁄_mëa
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, *
köd
, 
FILE
 *
f
)

413 
i
;

415 
	`Ârötf
(
f
, "fs_rpc_function_meta_t fs_rpc_function_metas[] = {\n");

416 
i
 = 0; i < 
èbÀ
->
ñts
; ++i) {

417 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
èbÀ
->
Ωc_fun˘i⁄
[
i
];

418 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

419 i‡(!
¨g_˛s
->
c_imp
)

422 
	`as£π
(
	`FS_RPC_CHECK_C_DECL
(
¨g_˛s
));

423 i‡(
	`°r°r
(
¨g_˛s
->
«me
, 
köd
)) {

424 
	`Ârötf
(
f
, "\t{\"%s\", (fs_Ωc_c_fun˘i⁄_t)%s,},\n", 
¨g_˛s
->
«me
,árg_cls->name);

427 
	`Ârötf
(
f
, "\t{NULL, NULL,},\n");

428 
	`Ârötf
(
f
, "};\n");

429 
	}
}

431 
	$fs_Ωc_dump_mëa
(
fs_Ωc_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
)

433 
FILE
 *
f
 ;

434 
˛o£
, 
i
, 
j
;

435 
fs_Ωc_˛ass_èbÀ_t
 *
˛ass_èbÀ
 = 
èbÀ
->class_table;

436 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
 = 
èbÀ
->function_table;

438 i‡(
fûe
 =
NULL
) {

439 
f
 = 
°dout
;

440 
˛o£
 = 0;

442 
f
 = 
	`f›í
(
fûe
, "w");

443 
˛o£
 = 1;

446 i‡(
f
 =
NULL
) {

447 
	`≥º‹
("failÅo open file for dumping");

448 
	`Ârötf
(
°dîr
, "Áû fûe:%s\n", 
fûe
);

453 
	`Ârötf
(
f
, "\n#include \"fs_rpc_c.h\"\n\n");

454 
	`Ârötf
(
f
, "\n");

456 i‡(
˛ass_èbÀ
 !
NULL
) {

458 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

459 
fs_Ωc_˛ass_t
 *
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

460 i‡(!
˛s
->
c_imp
)

464 
	`Ârötf
(
f
, "°©i¯fs_Ωc_fõld_mëa_à%s_fõlds[] = {\n", 
˛s
->
«me
);

465 
j
 = 0; j < 
˛s
->
fõld_cou¡
; ++j) {

466 
fs_Ωc_fõld_t
 *
fõld
 = &
˛s
->fõld[
j
];

468 
	`Ârötf
(
f
, "\t{\"%s\", off£tof(%s, %s),},\n", 
fõld
->
«me
, 
˛s
->name, field->name);

470 
	`Ârötf
(
f
, "};\n\n");

474 
	`Ârötf
(
f
, "fs_rpc_class_meta_t fs_rpc_class_metas[] = {\n");

475 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

476 
fs_Ωc_˛ass_t
 *
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

477 i‡(!
˛s
->
c_imp
)

479 *
˛¢ame
 = 
˛s
->
«me
;

482 
	`Ârötf
(
f
, "\t{\"%s\", sizeof(%s), %d, %s_fõlds,},\n", 
˛¢ame
, cl¢ame, 
˛s
->
fõld_cou¡
, clsname);

484 
	`Ârötf
(
f
, "\t{NULL, 0, 0, NULL,},\n");

485 
	`Ârötf
(
f
, "}; \n\n");

489 i‡(
fun˘i⁄_èbÀ
 !
NULL
) {

491 
	`Ârötf
(
f
, "#ifdef __FreeBSD__\n");

492 
	`dump_c_fun˘i⁄_mëa
(
fun˘i⁄_èbÀ
, 
FS_RPC_SERVER_PREFIX
, 
f
);

493 
	`Ârötf
(
f
, "#elif MS_WINDOWS\n");

494 
	`dump_c_fun˘i⁄_mëa
(
fun˘i⁄_èbÀ
, 
FS_RPC_CLIENT_PREFIX
, 
f
);

495 
	`Ârötf
(
f
, "#else\n");

496 
	`Ârötf
(
f
, "#error \"not supportÖlatform\"\n");

497 
	`Ârötf
(
f
, "#endif\n");

500 i‡(
˛o£
) {

501 
	`f˛o£
(
f
);

505 
	}
}

507 
	$fs_Ωc_dump_c
(
fs_Ωc_èbÀ_t
 *
èbÀ
, c⁄° *
hfûe
, c⁄° * 
cfûe
)

509 
	`fs_Ωc_£t_˛ass_±r
(
èbÀ
);

510 
	`fs_Ωc_dump_c_h
(
èbÀ
, 
hfûe
);

511 
	`fs_Ωc_dump_mëa
(
èbÀ
, 
cfûe
);

513 
	}
}

515 
fs_Ωc_˛ass_mëa_t
 *
	$föd_˛ass_mëa
(*
˛¢ame
)

517 
fs_Ωc_˛ass_mëa_t
 *
mëa
 = 
NULL
;

519 
mëa
 = 
fs_Ωc_˛ass_mëas
; mëa->
«me
 !
NULL
; ++meta) {

520 i‡(0 =
	`°rcmp
(
˛¢ame
, 
mëa
->
«me
)) {

521  
mëa
;

525  
NULL
;

526 
	}
}

528 
fs_Ωc_fun˘i⁄_mëa_t
 *
	$föd_fun˘i⁄_mëa
(*
fu¬ame
)

530 
fs_Ωc_fun˘i⁄_mëa_t
 *
mëa
 = 
NULL
;

532 
mëa
 = 
fs_Ωc_fun˘i⁄_mëas
; mëa->
«me
 !
NULL
; ++meta) {

533 i‡(0 =
	`°rcmp
(
fu¬ame
, 
mëa
->
«me
)) {

534  
mëa
;

538  
NULL
;

539 
	}
}

541 
	$fûl_mëa
(
fs_Ωc_èbÀ_t
 *
èbÀ
)

544 
i
, 
j
;

545 
fs_Ωc_˛ass_mëa_t
 *
˛ass_mëa
;

546 
fs_Ωc_fun˘i⁄_mëa_t
 *
fun˘i⁄_mëa
;

547 
fs_Ωc_fõld_mëa_t
 *
fõld_mëa
;

548 
fs_Ωc_˛ass_t
 *
˛s
;

550 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
 = 
èbÀ
->function_table;

551 
fs_Ωc_˛ass_èbÀ_t
 *
˛ass_èbÀ
 = 
èbÀ
->class_table;

553 i‡(
˛ass_èbÀ
 !
NULL
) {

557 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

558 
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

559 i‡(!
˛s
->
c_imp
)

561 
˛ass_mëa
 = 
	`föd_˛ass_mëa
(
˛s
->
«me
);

562 i‡(
˛ass_mëa
 =
NULL
) {

563 
	`Ârötf
(
°dîr
, "îr‹:nÿmëa˛as†f‹:%s\n", 
˛s
->
«me
);

565 
	`as£π
(
˛ass_mëa
);

567 
˛s
->
c_size
 = 
˛ass_mëa
->c_size;

568 
fõld_mëa
 = 
˛ass_mëa
->field_meta;

569 
j
 = 0; j < 
˛s
->
fõld_cou¡
; ++j) {

570 
˛s
->
fõld
[
j
].
c_off£t
 = 
fõld_mëa
[j].c_offset;

575 i‡(
fun˘i⁄_èbÀ
 !
NULL
) {

576 
i
 = 0; i < 
fun˘i⁄_èbÀ
->
ñts
; ++i) {

577 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
[
i
];

578 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

579 i‡(!
¨g_˛s
->
c_imp
)

582 
fun˘i⁄_mëa
 = 
	`föd_fun˘i⁄_mëa
(
¨g_˛s
->
«me
);

583 i‡(
fun˘i⁄_mëa
 !
NULL
)

584 
fun˘i⁄
->
c_fun˘i⁄
 = 
fun˘i⁄_mëa
->c_function;

587 
	}
}

589 
	$check_du∂iˇãd_«me
(
fs_Ωc_èbÀ_t
 *
èbÀ
)

591 
i
, 
j
;

592 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
 = 
èbÀ
->function_table;

593 
fs_Ωc_˛ass_èbÀ_t
 *
˛ass_èbÀ
 = 
èbÀ
->class_table;

594 
c
;

596 i‡(
˛ass_èbÀ
 !
NULL
) {

597 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

598 
fs_Ωc_˛ass_t
 *
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

599 
j
 = 0, 
c
 = 0; j < 
˛ass_èbÀ
->
ñts
; ++j) {

600 i‡(!
	`°rcmp
(
˛s
->
«me
, 
˛ass_èbÀ
->
Ωc_˛ass
[
j
].name))

601 
c
++;

603 i‡(
c
 > 1) {

604 
	`Ârötf
(
°dîr
, "îr‹!Ω¯de˛¨©i⁄ha†du∂iˇãd cœss:%s\n", 
˛s
->
«me
);

605 
	`as£π
(0);

610 i‡(
fun˘i⁄_èbÀ
 !
NULL
) {

611 
i
 = 0; i < 
fun˘i⁄_èbÀ
->
ñts
; ++i) {

612 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
[
i
];

613 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

614 
j
 = 0, 
c
 = 0; j < 
fun˘i⁄_èbÀ
->
ñts
; ++j) {

615 i‡(!
	`°rcmp
(
¨g_˛s
->
«me
, 
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
[
j
].
¨g_˛ass
.name))

616 
c
++;

618 i‡(
c
 > 1) {

619 
	`Ârötf
(
°dîr
, "îr‹!Ω¯de˛¨©i⁄ha†du∂iˇãd fun˘i⁄:%s\n", 
¨g_˛s
->
«me
);

620 
	`as£π
(0);

624 
	}
}

626 
	$check_Ωc_èbÀ
(
fs_Ωc_èbÀ_t
 *
èbÀ
)

628 
	`check_du∂iˇãd_«me
(
èbÀ
);

630 
i
, 
j
;

631 
fs_Ωc_˛ass_mëa_t
 *
˛ass_mëa
;

632 
fs_Ωc_fun˘i⁄_mëa_t
 *
fun˘i⁄_mëa
;

633 
fs_Ωc_fõld_mëa_t
 *
fõld_mëa
;

634 
fs_Ωc_˛ass_t
 *
˛s
;

636 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
 = 
èbÀ
->function_table;

637 
fs_Ωc_˛ass_èbÀ_t
 *
˛ass_èbÀ
 = 
èbÀ
->class_table;

639 i‡(
˛ass_èbÀ
 !
NULL
) {

640 
i
 = 0; i < 
˛ass_èbÀ
->
ñts
; ++i) {

641 
˛s
 = &
˛ass_èbÀ
->
Ωc_˛ass
[
i
];

642 i‡(!
˛s
->
c_imp
)

644 
˛ass_mëa
 = 
	`föd_˛ass_mëa
(
˛s
->
«me
);

645 
	`as£π
(
˛ass_mëa
);

646 
	`as£π
(0 =
	`°rcmp
(
˛ass_mëa
->
«me
, 
˛s
->name));

647 
	`as£π
(
˛ass_mëa
->
fõld_cou¡
 =
˛s
->field_count);

649 
	`as£π
(
˛s
->
c_size
 =
˛ass_mëa
->c_size);

650 
fõld_mëa
 = 
˛ass_mëa
->field_meta;

651 
j
 = 0; j < 
˛s
->
fõld_cou¡
; ++j) {

652 
	`as£π
(0 =
	`°rcmp
(
˛s
->
fõld
[
j
].
«me
, 
fõld_mëa
[j].name));

653 
	`as£π
(
˛s
->
fõld
[
j
].
c_off£t
 =
fõld_mëa
[j].c_offset);

658 i‡(
fun˘i⁄_èbÀ
 !
NULL
) {

659 
i
 = 0; i < 
fun˘i⁄_èbÀ
->
ñts
; ++i) {

660 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
[
i
];

661 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

662 i‡(!
¨g_˛s
->
c_imp
)

665 
fun˘i⁄_mëa
 = 
	`föd_fun˘i⁄_mëa
(
¨g_˛s
->
«me
);

666 i‡(
fun˘i⁄_mëa
 =
NULL
)

668 
	`as£π
(
fun˘i⁄
->
c_fun˘i⁄
 =
fun˘i⁄_mëa
->c_function);

672 
	`as£π
(
	`FS_RPC_CHECK_C_DECL
(
¨g_˛s
));

673 
˛s
 = 
	`FS_RPC_STRUCT_ARG
(
¨g_˛s
);

674 
˛ass_mëa
 = 
	`föd_˛ass_mëa
(
˛s
->
«me
);

677 
	`as£π
(
˛ass_mëa
);

678 
	`as£π
(
˛s
->
c_size
 =
˛ass_mëa
->c_size);

679 
	`as£π
(0 =
	`°rcmp
(
˛ass_mëa
->
«me
, 
˛s
->name));

680 
	`as£π
(
˛ass_mëa
->
fõld_cou¡
 =
˛s
->field_count);

682 
fõld_mëa
 = 
˛ass_mëa
->field_meta;

683 
j
 = 0; j < 
˛s
->
fõld_cou¡
; ++j) {

684 
	`as£π
(0 =
	`°rcmp
(
˛s
->
fõld
[
j
].
«me
, 
fõld_mëa
[j].name));

685 
	`as£π
(
˛s
->
fõld
[
j
].
c_off£t
 =
fõld_mëa
[j].c_offset);

690 
	}
}

692 
	$fs_Ωc_èbÀ_¸óã
(
fs_Ωc_èbÀ_t
 *
èbÀ
, c⁄° *
fûe
)

694 
FILE
 *
f
;

695 
i
, 
j
;

696 
tmp
;

697 
fs_Ωc_˛ass_èbÀ_t
 *
˘bl
;

698 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
·bl
;

699 
max
 = 2048;

700 
buf
[
max
];

701 
buf2
[
max
];

702 
	`mem£t
(
buf
, 0, 
max
);

703 
	`mem£t
(
buf2
, 0, 
max
);

705 
f
 = 
	`f›í
(
fûe
, "r");

706 i‡(
f
 =
NULL
) {

707 
	`≥º‹
("failÅo open file forÑeading.");

708 
	`Ârötf
(
°dîr
, "Áû fûe:%s\n", 
fûe
);

712 
	`fsˇnf
(
f
, "˛ass_èbÀ_num:%d\n", &
tmp
);

713 
˘bl
 = (
fs_Ωc_˛ass_èbÀ_t
*)
	`ˇŒoc
(1, (fs_Ωc_˛ass_èbÀ_tË+ (
fs_Ωc_˛ass_t
Ë* 
tmp
);

714 
˘bl
->
ñts
 = 
tmp
;

715 
˘bl
->
Ωc_˛ass
 = (
fs_Ωc_˛ass_t
*)((*)˘b»+ (
fs_Ωc_˛ass_èbÀ_t
));

717 
i
 = 0; i < 
˘bl
->
ñts
; ++i) {

718 
fs_Ωc_˛ass_t
 *
˛s
 = &
˘bl
->
Ωc_˛ass
[
i
];

719 
	`fsˇnf
(
f
, "fõld_cou¡:%d,c_imp:%d,˛ass_«me=%s\n", &
˛s
->
fõld_cou¡
, &˛s->
c_imp
, 
buf
);

720 
˛s
->
«me
 = 
	`°rdup
(
buf
);

721 
˛s
->
fõld
 = (
fs_Ωc_fõld_t
*)
	`ˇŒoc
(˛s->
fõld_cou¡
, (fs_rpc_field_t));

723 
j
 = 0; j < 
˛s
->
fõld_cou¡
; ++j) {

724 
fs_Ωc_fõld_t
 *
fõld
 = &
˛s
->fõld[
j
];

725 
fõld
->
∑ª¡
 = 
˛s
;

726 
	`mem£t
(
buf
, 0, 
max
);

727 
	`fsˇnf
(
f
, "field_type:%d,class_index:%d,array:%d,field_name:%s\n",

728 &
fõld
->
ty≥
, &fõld->
˛ass_ödex
, &fõld->
¨øy
, 
buf
);

729 
fõld
->
«me
 = 
	`°rdup
(
buf
);

733 
	`fsˇnf
(
f
, "fun˘i⁄_èbÀ_num:%d\n", &
tmp
);

734 
·bl
 = (
fs_Ωc_fun˘i⁄_èbÀ_t
*)
	`ˇŒoc
(1, (fs_Ωc_fun˘i⁄_èbÀ_tË+ (
fs_Ωc_fun˘i⁄_t
Ë* 
tmp
);

735 
·bl
->
ñts
 = 
tmp
;

736 
·bl
->
Ωc_fun˘i⁄
 = (
fs_Ωc_fun˘i⁄_t
*)((*)ftbl + (fs_rpc_function_t));

738 
i
 = 0; i < 
·bl
->
ñts
; ++i) {

739 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
·bl
->
Ωc_fun˘i⁄
[
i
];

740 
fs_Ωc_˛ass_t
 *
¨g_˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

741 
	`mem£t
(
buf
, 0, 
max
);

742 
	`mem£t
(
buf2
, 0, 
max
);

743 
	`fsˇnf
(
f
, "function_id:%d,c_imp:%d,arg_count:%d,module:%[^,]%*cfunction_name:%s\n",

744 &
fun˘i⁄
->
fun˘i⁄_id
, &
¨g_˛s
->
c_imp
, &¨g_˛s->
fõld_cou¡
, 
buf
, 
buf2
);

745 
fun˘i⁄
->
moduÀ
 = 
	`°rdup
(
buf
);

746 
¨g_˛s
->
«me
 = 
	`°rdup
(
buf2
);

747 
¨g_˛s
->
fõld
 = (
fs_Ωc_fõld_t
*)
	`ˇŒoc
◊rg_˛s->
fõld_cou¡
, (fs_rpc_field_t));

749 
j
 = 0; j < 
¨g_˛s
->
fõld_cou¡
; ++j) {

750 
fs_Ωc_fõld_t
 *
fõld
 = &
¨g_˛s
->fõld[
j
];

751 
fõld
->
∑ª¡
 = 
¨g_˛s
;

752 
	`fsˇnf
(
f
, "¨g_ty≥:%d,˛ass_ödex:%d,¨øy:%d\n", &
fõld
->
ty≥
, &fõld->
˛ass_ödex
, &fõld->
¨øy
);

756 
èbÀ
->
˛ass_èbÀ
 = 
˘bl
;

757 
èbÀ
->
fun˘i⁄_èbÀ
 = 
·bl
;

758 
	`fs_Ωc_£t_˛ass_±r
(
èbÀ
);

759 
	`fûl_mëa
(
èbÀ
);

760 
	`check_Ωc_èbÀ
(
èbÀ
);

761 
	`fs_Ωc_fun˘i⁄_s‹t
(
èbÀ
->
fun˘i⁄_èbÀ
);

763 
	`f˛o£
(
f
);

766 
	}
}

768 
fs_Ωc_˛ass_t
 *
	$fs_Ωc_˛ass
(
fs_Ωc_˛ass_èbÀ_t
 *
èbÀ
, 
ödex
)

770  (0 <
ödex
 && index < 
èbÀ
->
ñts
) ?

771 &
èbÀ
->
Ωc_˛ass
[
ödex
] : 
NULL
;

772 
	}
}

774 
fs_Ωc_fun˘i⁄_t
 *
	$fs_Ωc_fun˘i⁄
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, 
ödex
)

776  (0 <
ödex
 && index < 
èbÀ
->
ñts
) ?

777 &
èbÀ
->
Ωc_fun˘i⁄
[
ödex
] : 
NULL
;

778 
	}
}

781 
	$fs_Ωc_˛ass_ödex
(
fs_Ωc_˛ass_èbÀ_t
 *
èbÀ
, c⁄° *
«me
)

783 
i
;

784 i‡(
«me
 !
NULL
) {

785 
i
 = 0; i < 
èbÀ
->
ñts
; ++i) {

786 
fs_Ωc_˛ass_t
 *
˛s
 = &
èbÀ
->
Ωc_˛ass
[
i
];

787 i‡(0 =
	`°rcmp
(
˛s
->
«me
,Çame)) {

788  
i
;

794 
	}
}

797 
fs_Ωc_fun˘i⁄_t
 *
	$fs_Ωc_fun˘i⁄_föd
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
èbÀ
, c⁄° *
«me
)

799 
i
;

800 i‡(
«me
 !
NULL
) {

801 
i
 = 0; i < 
èbÀ
->
ñts
; ++i) {

802 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
èbÀ
->
Ωc_fun˘i⁄
[
i
];

803 i‡(0 =
	`°rcmp
(
fun˘i⁄
->
¨g_˛ass
.
«me
,Çame)) {

804  
fun˘i⁄
;

809  
NULL
;

810 
	}
}

813 
	$fs_Ωc_fun˘i⁄_£t_id
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
, c⁄° **
«mes
, c⁄° *
ids
, 
size_t
 
Àn
)

815 
size_t
 
i
;

816 
i
 = 0; i < 
Àn
; ++i) {

817 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = 
	`fs_Ωc_fun˘i⁄_föd
(
fun˘i⁄_èbÀ
, 
«mes
[
i
]);

818 i‡(
fun˘i⁄
 =
NULL
)

820 
fun˘i⁄
->
fun˘i⁄_id
 = 
ids
[
i
];

823 
	}
}

825 
	$s‹t_fun˘i⁄
(c⁄° *
a
, c⁄° *
b
)

827  ((
fs_Ωc_fun˘i⁄_t
*)
a
)->
fun˘i⁄_id
 - ((fs_Ωc_fun˘i⁄_t*)
b
)->function_id;

828 
	}
}

830 
	$fs_Ωc_fun˘i⁄_qs‹t
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
)

832 
	`qs‹t
(
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
, fun˘i⁄_èbÀ->
ñts
, (
fs_Ωc_fun˘i⁄_t
), 
s‹t_fun˘i⁄
);

833 
	}
}

835 
	$fs_Ωc_fun˘i⁄_s‹t
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
)

837 
	`fs_Ωc_fun˘i⁄_qs‹t
(
fun˘i⁄_èbÀ
);

838 i‡(
fun˘i⁄_èbÀ
->
ñts
 == 0) {

839 
fun˘i⁄_èbÀ
->
•¨£_ñts
 = 0;

840 
fun˘i⁄_èbÀ
->
•¨£_Ωc_fun˘i⁄
 = 
NULL
;

842 
fs_Ωc_fun˘i⁄_t
 *
œ°
 = &
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
[fun˘i⁄_èbÀ->
ñts
 - 1];

843 
fun˘i⁄_èbÀ
->
•¨£_ñts
 = 
œ°
->
fun˘i⁄_id
 + 1;

844 
fun˘i⁄_èbÀ
->
•¨£_Ωc_fun˘i⁄
 = 
	`ˇŒoc
(fun˘i⁄_èbÀ->
•¨£_ñts
, (
fs_Ωc_fun˘i⁄_t
));

846 
i
;

847 
i
 = 0; i < 
fun˘i⁄_èbÀ
->
ñts
; ++i) {

848 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
[
i
];

849 
fun˘i⁄_èbÀ
->
•¨£_Ωc_fun˘i⁄
[
fun˘i⁄
->
fun˘i⁄_id
] = function;

852 
	}
}

854 
	$£¨ch_fun˘i⁄
(c⁄° *
fun˘i⁄_id
, c⁄° *
fun˘i⁄
)

856  *(*)
fun˘i⁄_id
 - ((
fs_Ωc_fun˘i⁄_t
*)
fun˘i⁄
)->function_id;

857 
	}
}

859 
fs_Ωc_fun˘i⁄_t
 *
	$fs_Ωc_fun˘i⁄_b£¨ch
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
, 
fs_¥Ÿocﬁ_id_t
 
fun˘i⁄_id
)

861  (
fs_Ωc_fun˘i⁄_t
*)
	`b£¨ch
(&
fun˘i⁄_id
, 
fun˘i⁄_èbÀ
->
Ωc_fun˘i⁄
,

862 
fun˘i⁄_èbÀ
->
ñts
, (
fs_Ωc_fun˘i⁄_t
), 
£¨ch_fun˘i⁄
);

863 
	}
}

865 
fs_Ωc_fun˘i⁄_t
 *
	$fs_Ωc_fun˘i⁄_©
(
fs_Ωc_fun˘i⁄_èbÀ_t
 *
fun˘i⁄_èbÀ
, 
fs_¥Ÿocﬁ_id_t
 
fun˘i⁄_id
)

867 i‡(
fun˘i⁄_id
 >0 && fun˘i⁄_id < 
fun˘i⁄_èbÀ
->
•¨£_ñts
) {

868  
fun˘i⁄_èbÀ
->
•¨£_Ωc_fun˘i⁄
[
fun˘i⁄_id
];

870  
NULL
;

871 
	}
}

877 
ölöe
 
	$gë_fõld_size
(
fs_Ωc_fõld_t
 *
fõld
)

879 
fõld
->
ty≥
) {

880 
FS_RPC_INT
: {

881  (
fs_Ωc_öt_t
);

883 
FS_RPC_STRING
: {

884  (
fs_Ωc_°rög_t
);

886 
FS_RPC_CLASS
: {

887  
fõld
->
˛ass_±r
->
c_size
;

890 
	`as£π
(0);

893 
	}
}

895 
ölöe
 
u≈ack_°ru˘
(
fs_Ωc_fõld_t
 *
fõld
, 
fõld_cou¡
, 
fs_mbuf_t
 *
mbuf
, *
°ru˘_vÆue
, 
fs_öbuf_t
*
öbuf
);

897 
ölöe
 
	$u≈ack_fõld
(
fs_Ωc_fõld_t
 *
fõld
, 
fs_mbuf_t
 *
mbuf
, *
vÆue
, 
fs_öbuf_t
 *
öbuf
)

899 
fõld
->
ty≥
) {

900 
FS_RPC_INT
: {

901 
fs_Ωc_öt_t
 *
v
 = (fs_Ωc_öt_t*)
vÆue
;

902 
	`FS_INBUF_GET_TYPE
(
öbuf
, 
v
, 
fs_Ωc_öt_t
);

905 
FS_RPC_STRING
: {

906 
fs_Ωc_°rög_t
 *
±r
 = (fs_Ωc_°rög_t*)
vÆue
;

907 
	`FS_INBUF_GET_TYPE
(
öbuf
, &
±r
->
n
, 
fs_Ωc_size_t
);

908 i‡(
±r
->
n
 <= 0) {

909 
±r
->
°r
 = 
NULL
;

913 
	`FS_INBUF_CHECK
(
öbuf
, 
±r
->
n
);

914 
±r
->
°r
 = 
	`FS_MBUF_ALLOC
(
mbuf
, (±r->
n
 + 1)*(*ptr->str));

915 
	`FS_INBUF_GET_NO_CHECK
(
öbuf
, 
±r
->
°r
,Öå->
n
);

916 
±r
->
°r
[±r->
n
] = '\0';

920 
FS_RPC_CLASS
: {

921 
fs_Ωc_˛ass_t
 *
˛s
 = 
fõld
->
˛ass_±r
;

922 i‡(
	`u≈ack_°ru˘
(
˛s
->
fõld
, cls->
fõld_cou¡
, 
mbuf
, 
vÆue
, 
öbuf
))

930 
	}
}

932 
ölöe
 
	$u≈ack_°ru˘
(
fs_Ωc_fõld_t
 *
fõld
, 
fõld_cou¡
, 
fs_mbuf_t
 *
mbuf
, *
°ru˘_vÆue
, 
fs_öbuf_t
 *
öbuf
)

934 
i
;

935 
c
;

936 *
fõld_vÆue
;

937 
c
 = 0; c < 
fõld_cou¡
; ++c, ++
fõld
) {

938 
fõld_vÆue
 = 
°ru˘_vÆue
 + 
fõld
->
c_off£t
;

939 i‡(
fõld
->
¨øy
 =
FS_RPC_ARRAY_VAR
) {

941 
fs_Ωc_¨øy_t
 *
±r
 = (fs_Ωc_¨øy_t*)
fõld_vÆue
;

942 
	`FS_INBUF_GET_TYPE
(
öbuf
, &
±r
->
n
, 
fs_Ωc_size_t
);

944 i‡(
±r
->
n
 <= 0) {

945 
±r
->
u
.
d©a
 = 
NULL
;

947 *
d©a
;

949 
	`FS_INBUF_CHECK
(
öbuf
, 
±r
->
n
);

950 
size_t
 
fsz
 = 
	`gë_fõld_size
(
fõld
);

953 
±r
->
u
.
d©a
 = 
	`FS_MBUF_ALLOC
(
mbuf
,Öå->
n
 * 
fsz
);

954 
i
 = 0, 
d©a
 = (*)
±r
->
u
.d©a; i <Öå->
n
; ++i, d©®+
fsz
) {

955 i‡(
	`u≈ack_fõld
(
fõld
, 
mbuf
, 
d©a
, 
öbuf
))

961 i‡(
	`u≈ack_fõld
(
fõld
, 
mbuf
, 
fõld_vÆue
, 
öbuf
))

966 
	}
}

969 * 
	$fs_Ωc_c_u≈ack
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
fs_mbuf_t
 *
mbuf
, 
fs_öbuf_t
 *
öbuf
)

972 
fs_Ωc_˛ass_t
 *
˛s
 = 
	`FS_RPC_STRUCT_ARG
(&
fun˘i⁄
->
¨g_˛ass
);

975 *
°ru˘_vÆue
 = 
	`FS_MBUF_ALLOC
(
mbuf
, 
˛s
->
c_size
);

976 if(
	`u≈ack_°ru˘
(
˛s
->
fõld
, cls->
fõld_cou¡
, 
mbuf
, 
°ru˘_vÆue
, 
öbuf
))

977  
NULL
;

980  
°ru˘_vÆue
;

981 
	}
}

985 
ölöe
 
∑ck_°ru˘
(
fs_Ωc_fõld_t
 *
fõld
, 
fõld_cou¡
, *
°ru˘_vÆue
, 
fs_mbuf_t
 *
mbuf
);

987 
ölöe
 
	$∑ck_fõld
(
fs_Ωc_fõld_t
 *
fõld
, *
vÆue
, 
fs_mbuf_t
 *
mbuf
)

989 
fõld
->
ty≥
) {

990 
FS_RPC_INT
: {

991 
fs_Ωc_öt_t
 *
v
 = (fs_Ωc_öt_t*)
vÆue
;

992 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, 
v
, 
fs_Ωc_öt_t
);

996 
FS_RPC_STRING
: {

997 
fs_Ωc_°rög_t
 *
±r
 = (fs_Ωc_°rög_t*)
vÆue
;

998 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
±r
->
n
, 
fs_Ωc_size_t
);

999 
	`FS_MBUF_ENQ
(
mbuf
, 
±r
->
°r
,Öå->
n
);

1003 
FS_RPC_CLASS
: {

1004 
fs_Ωc_˛ass_t
 *
˛s
 = 
fõld
->
˛ass_±r
;

1006 i‡(
	`∑ck_°ru˘
(
˛s
->
fõld
, cls->
fõld_cou¡
, 
vÆue
, 
mbuf
)) {

1012 
	`as£π
(0);

1016 
	}
}

1018 
ölöe
 
	$∑ck_°ru˘
(
fs_Ωc_fõld_t
 *
fõld
, 
fõld_cou¡
, *
°ru˘_vÆue
, 
fs_mbuf_t
 *
mbuf
)

1020 
c
;

1021 
i
;

1022 *
fõld_vÆue
;

1023 
c
 = 0; c < 
fõld_cou¡
; ++c, ++
fõld
) {

1024 
fõld_vÆue
 = (*)
°ru˘_vÆue
 + 
fõld
->
c_off£t
;

1026 i‡(
fõld
->
¨øy
 =
FS_RPC_ARRAY_VAR
) {

1027 
size_t
 
fsz
;

1028 *
d©a
;

1029 
fs_Ωc_¨øy_t
 *
±r
 = (fs_Ωc_¨øy_t*)
fõld_vÆue
;

1030 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
±r
->
n
, 
fs_Ωc_size_t
);

1031 
fsz
 = 
	`gë_fõld_size
(
fõld
);

1032 
i
 = 0, 
d©a
 = (*)
±r
->
u
.d©a; i <Öå->
n
; ++i, d©®+
fsz
) {

1033 i‡(
	`∑ck_fõld
(
fõld
, 
d©a
, 
mbuf
)) {

1038 i‡(
	`∑ck_fõld
(
fõld
, 
fõld_vÆue
, 
mbuf
)) {

1044 
	}
}

1046 
	$log_∑ck
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
fs_mbuf_t
 *
mbuf
)

1048 i‡(
g_log_±o_íabÀ
) {

1049 
	`Ârötf
(
°dîr
, "rpcÖack infoÖid=%d,pname=%s,len=%u\n",

1050 
fun˘i⁄
->
fun˘i⁄_id
, fun˘i⁄->
¨g_˛ass
.
«me
, 
mbuf
->
d©a_size
);

1052 
	}
}

1054 
	$log_u≈ack
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
fs_öbuf_t
 *
öbuf
)

1056 i‡(
g_log_±o_íabÀ
) {

1057 
	`Ârötf
(
°dîr
, "rpc unpack infoÖid=%d,pname=%s,len=%u\n",

1058 
fun˘i⁄
->
fun˘i⁄_id
, fun˘i⁄->
¨g_˛ass
.
«me
, 
öbuf
->
size
);

1060 
	}
}

1062 
	$íabÀ_log_±o
(
íabÀ
)

1064 
g_log_±o_íabÀ
 = 
íabÀ
;

1065 
	}
}

1067 
	$fs_Ωc_c_∑ck
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, *
°ru˘_vÆue
, 
fs_mbuf_t
 *
mbuf
)

1069 
fs_Ωc_˛ass_t
 *
˛s
 = &
fun˘i⁄
->
¨g_˛ass
;

1071 
ªt
 = 
	`∑ck_°ru˘
(
˛s
->
fõld
 + 1, cls->
fõld_cou¡
 - 1, 
°ru˘_vÆue
, 
mbuf
);

1072 
	`log_∑ck
(
fun˘i⁄
, 
mbuf
);

1073  
ªt
;

1075 
	}
}

	@packages/rpc_c.c

2 
	~"fs_Ωc_c.h
"

5 
fs_Ωc_˛ass_mëa_t
 
	gfs_Ωc_˛ass_mëas
[] = {

6 {
NULL
, 0, 0, NULL,},

9 #ifde‡
__FªeBSD__


10 
fs_Ωc_fun˘i⁄_mëa_t
 
	gfs_Ωc_fun˘i⁄_mëas
[] = {

11 {
NULL
, NULL,},

13 #ñi‡
MS_WINDOWS


14 
fs_Ωc_fun˘i⁄_mëa_t
 
	gfs_Ωc_fun˘i⁄_mëas
[] = {

15 {
NULL
, NULL,},

	@packages/rpc_lpc.c

2 
	~"fs_mbuf.h
"

3 
	~"fs_Ωc_Õc.h
"

4 
	~"fs_Ωc_c.h
"

5 
	~"Õc_ö˛.h
"

6 
	~"öãΩªt.h
"

7 
	~"fs_ùc.h
"

8 
	~"fs_comm.h
"

9 
	~"fs_Õc_›.h
"

10 
	~"fs_Õc_ext.h
"

11 
	~"Õc_¨gs_›.h
"

12 
	~"game/fs_u£r.h
"

13 
	~"fs_Ωc_id.h
"

15 
	~<as£π.h
>

17 
evÆ_co°
;

19 
Ωc_Õc_func_t
 
	gg_Ωc_ˇŒ_imp
;

20 
fs_Ωc_èbÀ_t
 *
	gg_Ωc_èbÀ
;

23 
fs_Ωc_Õc_t
 *
	$fs_Ωc_Õc_¸óã
(c⁄° *
cfg
, 
Ωc_Õc_func_t
 
imp
)

25 
fs_Ωc_Õc_t
 * 
Ωc_Õc
 = 
	`ˇŒoc
(1, (fs_rpc_lpc_t));

26 
Ωc_Õc
->
Ωc_ˇŒ_imp
 = 
imp
;

27 
	`fs_mbuf_öô
(&
Ωc_Õc
->
c_u≈ack_mbuf
, 0);

28 
	`fs_Ωc_èbÀ_¸óã
(&
Ωc_Õc
->
Ωc_èbÀ
, 
cfg
);

29 
Ωc_Õc
->
fun˘i⁄_èbÀ
 =Ñpc_Õc->
Ωc_èbÀ
.function_table;

31 
g_Ωc_èbÀ
 = &
Ωc_Õc
->
Ωc_èbÀ
;

33 
g_Ωc_ˇŒ_imp
 = 
imp
;

34  
Ωc_Õc
;

35 
	}
}

37 
	$dump_fõld_îr‹
(
svÆue_t
 *
sv
, 
fs_Ωc_fõld_t
 *
fõld
)

39 i‡(
	`IS_LPC_UNDEF
(
sv
)) {

40 
	`Ârötf
(
°dîr
, "error!Öack undefined:%s->%s,expected:%s\n",

41 
fõld
->
∑ª¡
->
«me
, fõld->«me, 
	`fs_Ωc_fõld_ty≥_«me
(field));

43 
	`Ârötf
(
°dîr
, "error!Öack wrongÅype:%s->%s,expected:%s,given:%s\n",

44 
fõld
->
∑ª¡
->
«me
, fõld->«me, 
	`fs_Ωc_fõld_ty≥_«me
(fõld), 
	`ty≥_«me
(
sv
->
ty≥
));

46 
	}
}

48 
	#PACK_FIELD_ERROR
(
sv
, 
fõld
) do {\

49 
	`dump_fõld_îr‹
((
sv
), (
fõld
));\

51 } 0)

	)

53 
	#PACK_ARRAY_ERROR
(
sv
, 
fõld
) do {\

54 
	`Ârötf
(
°dîr
, "error!Öack wrongárray:%s->%s,expected:array of %s,given:%s\n", \

55 (
fõld
)->
∑ª¡
->
«me
, (fõld)->«me, 
	`fs_Ωc_fõld_ty≥_«me
(fõld), 
	`ty≥_«me
((
sv
)->
ty≥
));\

57 } 0)

	)

60 
	#PACK_CHECK_TYPE
(
sv
, 
Õ˘y≥
) do {\

61 i‡(!((
sv
)->
ty≥
 & 
Õ˘y≥
)) { \

62 
îr‹
; \

64 } 0)

	)

66 
ölöe
 
∑ck
(
fs_Ωc_fõld_t
 *
fõld
, 
svÆue_t
 *
vÆue
, 
fõld_cou¡
, 
fs_mbuf_t
 *
mbuf
);

68 
ölöe
 
	$∑ck_fõld
(
fs_Ωc_fõld_t
 *
fõld
, 
svÆue_t
 *
vÆue
, 
fs_mbuf_t
 *
mbuf
)

70 
fõld
->
ty≥
) {

71 
FS_RPC_INT
: {

72 
	`PACK_CHECK_TYPE
(
vÆue
, 
T_NUMBER
);

73 
fs_Ωc_öt_t
 
v
 = 
vÆue
->
u
.
numbî
;

74 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
v
, 
fs_Ωc_öt_t
);

78 
FS_RPC_STRING
: {

79 
	`PACK_CHECK_TYPE
(
vÆue
, 
T_STRING
);

80 
fs_Ωc_size_t
 
Àn
 = 
	`SVALUE_STRLEN
(
vÆue
);

81 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
Àn
, 
fs_Ωc_size_t
);

82 
	`FS_MBUF_ENQ
(
mbuf
, 
vÆue
->
u
.
°rög
, 
Àn
);

86 
FS_RPC_BUFFER
: {

87 
	`PACK_CHECK_TYPE
(
vÆue
, 
T_BUFFER
);

88 
fs_Ωc_size_t
 
Àn
 = 
vÆue
->
u
.
buf
->
size
;

89 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
Àn
, 
fs_Ωc_size_t
);

90 
	`FS_MBUF_ENQ
(
mbuf
, 
vÆue
->
u
.
buf
->
ôem
, 
Àn
);

93 
FS_RPC_CLASS
: {

94 
	`PACK_CHECK_TYPE
(
vÆue
, 
T_CLASS
);

95 
	`as£π
(
vÆue
->
u
.
¨r
->
size
 =
fõld
->
˛ass_±r
->
fõld_cou¡
);

97 i‡(
	`∑ck
(
fõld
->
˛ass_±r
->fõld, 
vÆue
->
u
.
¨r
->
ôem
, fõld->˛ass_±r->
fõld_cou¡
, 
mbuf
)) {

103 
	`Ârötf
(
°dîr
, "îr‹! unknow¿Õ¯Ω¯ty≥.Ωc_ty≥=%d,Õ˘y≥=%s\n", 
fõld
->
ty≥
, 
	`ty≥_«me
(
vÆue
->type));

109 
îr‹
:

110 
	`PACK_FIELD_ERROR
(
vÆue
, 
fõld
);

111 
	}
}

113 
ölöe
 
	$∑ck
(
fs_Ωc_fõld_t
 *
fõld
, 
svÆue_t
 *
vÆue
, 
fõld_cou¡
, 
fs_mbuf_t
 *
mbuf
)

115 
c
, 
i
;

116 
c
 = 0; c < 
fõld_cou¡
; ++c, ++
fõld
, ++
vÆue
) {

117 i‡(
fõld
->
¨øy
 =
FS_RPC_ARRAY_VAR
) {

118 i‡(
vÆue
->
ty≥
 & 
T_ARRAY
) {

119 
fs_Ωc_size_t
 
Àn
 = 
vÆue
->
u
.
¨r
->
size
;

120 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
Àn
, 
fs_Ωc_size_t
);

122 
i
 = 0; i < 
Àn
; ++i) {

123 i‡(
	`∑ck_fõld
(
fõld
, &
vÆue
->
u
.
¨r
->
ôem
[
i
], 
mbuf
))

127 
	`PACK_ARRAY_ERROR
(
vÆue
, 
fõld
);

130 i‡(
	`∑ck_fõld
(
fõld
, 
vÆue
, 
mbuf
))

136 
	}
}

139 
	$fs_Ωc_Õc_∑ck
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
svÆue_t
 *
vÆue
, 
vÆue_cou¡
, 
fs_mbuf_t
 *
mbuf
)

141 
fs_Ωc_˛ass_t
 *
¨g
 = &
fun˘i⁄
->
¨g_˛ass
;

143 i‡(
vÆue_cou¡
 =
¨g
->
fõld_cou¡
 - 1) {

144 i‡(
	`∑ck
(
¨g
->
fõld
 + 1, 
vÆue
, 
vÆue_cou¡
, 
mbuf
)) {

145 
	`Ârötf
(
°dîr
, "Õ¯∑ckÉº‹! fun˘i⁄:%s\n", 
¨g
->
«me
);

150 
	`Ârötf
(
°dîr
, "lpcÖackÉrror!árguments dismatch.function:%s,expect:%d,given:%d\n",

151 
¨g
->
«me
,árg->
fõld_cou¡
 - 1, 
vÆue_cou¡
);

157 
	`log_∑ck
(
fun˘i⁄
, 
mbuf
);

160 
	}
}

162 
ölöe
 
u≈ack
(
fs_Ωc_fõld_t
 *
fõld
, 
svÆue_t
 *
vÆue
, 
fõld_cou¡
, 
fs_öbuf_t
* 
öbuf
);

164 
ölöe
 
	$u≈ack_fõld
(
fs_Ωc_fõld_t
 *
fõld
, 
svÆue_t
 *
vÆue
, 
fs_öbuf_t
 *
öbuf
)

166 
fõld
->
ty≥
) {

167 
FS_RPC_INT
: {

169 
fs_Ωc_öt_t
 
v
;

170 
	`FS_INBUF_GET_TYPE
(
öbuf
, &
v
, 
fs_Ωc_öt_t
);

171 
	`£t_svÆue_numbî
(
vÆue
, 
v
);

174 
FS_RPC_STRING
: {

175 
fs_Ωc_size_t
 
Àn
 = 0;

177 
	`FS_INBUF_GET_TYPE
(
öbuf
, &
Àn
, 
fs_Ωc_size_t
);

179 
	`FS_INBUF_CHECK
(
öbuf
, 
Àn
);

180 *
p
 = 
	`√w_°rög
(
Àn
, "fsÑpc:pack");

181 
	`FS_INBUF_GET_NO_CHECK
(
öbuf
, 
p
, 
Àn
);

182 
p
[
Àn
] = '\0';

183 
	`£t_svÆue_mÆlo˚d_°rög
(
vÆue
, 
p
);

186 
FS_RPC_BUFFER
: {

187 
fs_Ωc_size_t
 
Àn
 = 0;

188 
	`FS_INBUF_GET_TYPE
(
öbuf
, &
Àn
, 
fs_Ωc_size_t
);

190 
	`FS_INBUF_CHECK
(
öbuf
, 
Àn
);

191 
buf„r_t
 *
buf
 = 
	`Æloˇã_buf„r
(
Àn
);

192 i‡(
buf
 =
NULL
) {

193 
	`Ârötf
(
°dîr
, "ÁûÅÿÆloˇã buf„∏whí u≈ackögÅy≥=%d,Àn=%u\n", 
fõld
->
ty≥
, 
Àn
);

196 
	`FS_INBUF_GET_NO_CHECK
(
öbuf
, 
buf
->
ôem
, 
Àn
);

197 
	`£t_svÆue_buf„r
(
vÆue
, 
buf
);

200 
FS_RPC_CLASS
: {

202 
¨øy_t
 *
˛s
 = 
	`Æloˇã_˛ass_by_size
(
fõld
->
˛ass_±r
->
fõld_cou¡
);

203 
	`£t_svÆue_˛ass
(
vÆue
, 
˛s
);

206 i‡(
	`u≈ack
(
fõld
->
˛ass_±r
->fõld, 
˛s
->
ôem
, fõld->˛ass_±r->
fõld_cou¡
, 
öbuf
))

211 
	`Ârötf
(
°dîr
, "u≈ack unknow¿ty≥=%d\n", 
fõld
->
ty≥
);

215 
	}
}

218 
ölöe
 
	$u≈ack
(
fs_Ωc_fõld_t
 *
fõld
, 
svÆue_t
 *
vÆue
, 
fõld_cou¡
, 
fs_öbuf_t
* 
öbuf
)

220 
c
, 
i
;

223 
c
 = 0; c < 
fõld_cou¡
; ++c, ++
fõld
, ++
vÆue
) {

224 i‡(
fõld
->
¨øy
 =
FS_RPC_ARRAY_VAR
) {

226 
fs_Ωc_size_t
 
Àn
 = 0;

227 
	`FS_INBUF_GET_TYPE
(
öbuf
, &
Àn
, 
fs_Ωc_size_t
);

229 
	`FS_INBUF_CHECK
(
öbuf
, 
Àn
);

230 
¨øy_t
 *
¨r
 = 
	`Æloˇã_¨øy
(
Àn
);

231 
	`£t_svÆue_¨øy
(
vÆue
, 
¨r
);

232 
i
 = 0; i < 
Àn
; ++i) {

233 i‡(
	`u≈ack_fõld
(
fõld
, &
¨r
->
ôem
[
i
], 
öbuf
))

237 i‡(
	`u≈ack_fõld
(
fõld
, 
vÆue
, 
öbuf
))

243 
	}
}

246 
	sΩc_Õc_ud©a_s
 {

247 
fu≈å_t
 *
	mΩcfun
;

248 } 
	tΩc_Õc_ud©a_t
;

250 
	#UDATA
(
ud©a
Ë((
Ωc_Õc_ud©a_t
*)(ud©a))

	)

252 
ölöe
 
fu≈å_t
 *
	$gë_moduÀ_fun˘i⁄
(*
moduÀ
, *
fu¬ame
)

254 
obje˘_t
 *
mod
 = 
	`föd_obje˘
(
moduÀ
);

255 i‡(
mod
 =
NULL
) {

256 
	`Ârötf
(
°dîr
, "nÿÕ¯Ω¯moduÀ obje˘:%s\n", 
moduÀ
);

257  
NULL
;

260 
fu≈å_t
 *
fu≈å
 = 
	`fs_make_lfun_fu≈
(
mod
, 
fu¬ame
, 
NULL
);

261 i‡(
fu≈å
 =
NULL
) {

262 
	`Ârötf
(
°dîr
, "nÿÕ¯Ω¯moduÀ obje˘ fun˘i⁄:%s,%s\n", 
moduÀ
, 
fu¬ame
);

263  
NULL
;

266  
fu≈å
;

267 
	}
}

269 
ölöe
 
fu≈å_t
 *
	$gë_Õc_Ωc_fun˘i⁄
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
)

271 i‡(
fun˘i⁄
->
ud©a
 !
NULL
) {

272 
fu≈å_t
 *
fu≈
 = 
	`UDATA
(
fun˘i⁄
->
ud©a
)->
Ωcfun
;

273 i‡((
fu≈
->
hdr
.
ow√r
->
Êags
 &
O_DESTRUCTED
)) {

274 
	`‰ì_fu≈
(
fu≈
);

275 
	`‰ì
(
fun˘i⁄
->
ud©a
);

276 
fun˘i⁄
->
ud©a
 = 
NULL
;

278  
fu≈
;

282 *
fu¬ame
 = 
fun˘i⁄
->
¨g_˛ass
.
«me
;

283 
fu≈å_t
 *
fu≈å
 = 
	`gë_moduÀ_fun˘i⁄
(
fun˘i⁄
->
moduÀ
, 
fu¬ame
);

284 i‡(
fu≈å
 =
NULL
) {

285 
	`Ârötf
(
°dîr
, "nÿÕ¯Ω¯moduÀ obje˘ fun˘i⁄:%s,%s\n", 
fun˘i⁄
->
moduÀ
, 
fu¬ame
);

286  
NULL
;

289 
fun˘i⁄
->
ud©a
 = 
	`ˇŒoc
(1, (
Ωc_Õc_ud©a_t
));

290 
	`UDATA
(
fun˘i⁄
->
ud©a
)->
Ωcfun
 = 
fu≈å
;

291 
	`Ârötf
(
°dîr
, "ö°Æ»Õ¯moduÀ obje˘ fun˘i⁄:%s,%s\n", 
fun˘i⁄
->
moduÀ
, 
fu¬ame
);

293  
	`UDATA
(
fun˘i⁄
->
ud©a
)->
Ωcfun
;

294 
	}
}

296 
	$Ωc_Õc_moduÀ_upd©e
(
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, *
d©a
)

298 
obje˘_t
 *
obj
 = 
d©a
;

299 *
fu¬ame
 = 
fun˘i⁄
->
¨g_˛ass
.
«me
;

300 i‡(
	`°rcmp
(
obj
->
«me
, 
fun˘i⁄
->
moduÀ
) == 0) {

301 i‡(
fun˘i⁄
->
ud©a
 !
NULL
) {

302 
fu≈å_t
 *
fu≈å
 = 
	`fs_make_lfun_fu≈
(
obj
, 
fu¬ame
, 
NULL
);

303 i‡(
fu≈å
 =
NULL
) {

304 
	`Ârötf
(
°dîr
, "upd©êîr‹.nÿΩ¯fun˘i⁄:%s,%s\n", 
fun˘i⁄
->
moduÀ
, 
fu¬ame
);

306 
	`‰ì_fu≈
(
	`UDATA
(
fun˘i⁄
->
ud©a
)->
Ωcfun
);

307 
	`UDATA
(
fun˘i⁄
->
ud©a
)->
Ωcfun
 = 
fu≈å
;

308 
	`Ârötf
(
°dîr
, "upd©êΩ¯fun˘i⁄:%s,%s\n", 
fun˘i⁄
->
moduÀ
, 
fu¬ame
);

311 
	`Ârötf
(
°dîr
, "skù upd©êΩ¯fun˘i⁄:%s,%s\n", 
fun˘i⁄
->
moduÀ
, 
fu¬ame
);

315 
	}
}

317 
	$fs_Ωc_Õc_moduÀ_upd©e
(
obje˘_t
 *
obj
)

319 
	`Ârötf
(
°dîr
, "åyÅÿupd©êΩ¯moduÀ obje˘:%s\n", 
obj
->
«me
);

320 
	`fs_Ωc_f‹óch_fun˘i⁄
(
g_Ωc_èbÀ
->
fun˘i⁄_èbÀ
, 
Ωc_Õc_moduÀ_upd©e
, 
obj
);

321 
	}
}

324 
obje˘_t
* 
GëU£rLpcObj
–
u£∫um
 );

325 
	$fs_Ωc_Õc_ˇŒed
(
id
, 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
, 
fs_öbuf_t
 *
öbuf
)

327 
fs_¥Ÿocﬁ_id_t
 
pid
 = 
fun˘i⁄
->
fun˘i⁄_id
;

328 
fu≈å_t
 *
func
 = 
	`gë_Õc_Ωc_fun˘i⁄
(
fun˘i⁄
);

329 i‡(
func
 =
NULL
) {

330 
	`Ârötf
(
°dîr
, "error missÑpc called id:%d,moduel:%s,function:%s,pid:%d\n",

331 
id
, 
fun˘i⁄
->
moduÀ
, fun˘i⁄->
¨g_˛ass
.
«me
, 
pid
);

337 
¨gc
 = 
fun˘i⁄
->
¨g_˛ass
.
fõld_cou¡
 - 1;

338 
fun˘i⁄
->
¨g_˛ass
.
fõld
[0].
ty≥
) {

339 
FS_RPC_OBJECT
: {

340 
obje˘_t
 * 
u£r_obj
 = 
	`GëU£rLpcObj
(
id
);

341 i‡(
u£r_obj
 =
NULL
) {

342 
	`Ârötf
(
°dîr
, "errorÑpcÜpcÇot user object id:%d,moduel:%s,function:%s\n",

343 
id
, 
fun˘i⁄
->
moduÀ
, fun˘i⁄->
¨g_˛ass
.
«me
);

346 
	`push_obje˘
(
u£r_obj
);

349 
FS_RPC_INT
:

351 
	`push_numbî
(
id
);

354 
	`push_undeföeds
(
¨gc
);

355 i‡(0 =
	`u≈ack
(
fun˘i⁄
->
¨g_˛ass
.
fõld
 + 1, 
•
 - 
¨gc
 + 1,árg¯, 
öbuf
)) {

358 
evÆ_co°
 = 
max_co°
;

362 i‡(
NULL
 =
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
func
, 
fun˘i⁄
->
¨g_˛ass
.
fõld_cou¡
)) {

363 
	`Ârötf
(
°dîr
, "errorÑpcÜpc called id:%d,moduel:%s,function:%s\n",

364 
id
, 
fun˘i⁄
->
moduÀ
, fun˘i⁄->
¨g_˛ass
.
«me
);

368 
	`p›_n_ñems
(
fun˘i⁄
->
¨g_˛ass
.
fõld_cou¡
);

369 
	`Ârötf
(
°dîr
, "errorÑpcÜpc unpack id:%d,moduel:%s,function:%s\n",

370 
id
, 
fun˘i⁄
->
moduÀ
, fun˘i⁄->
¨g_˛ass
.
«me
);

375 
	}
}

378 
	$fs_Ωc_di•©ch
(
fs_Ωc_Õc_t
 *
Ωc_Õc
, 
id
, 
fs_öbuf_t
 *
öbuf
)

380 
fs_¥Ÿocﬁ_id_t
 
pid
 = 0;

381 
	`FS_INBUF_GET_TYPE
(
öbuf
, &
pid
, 
fs_¥Ÿocﬁ_id_t
);

383 
fs_Ωc_fun˘i⁄_t
 *
func
 = 
	`fs_Ωc_fun˘i⁄_©
(
Ωc_Õc
->
fun˘i⁄_èbÀ
, 
pid
);

384 i‡(
func
 =
NULL
) {

385 
	`Ârötf
(
°dîr
, "îr‹Çÿfun˘i⁄ f‹Ñp¯id:%d,pid:%u\n", 
id
, 
pid
);

389 i‡(
func
->
¨g_˛ass
.
c_imp
) {

390 i‡(
func
->
c_fun˘i⁄
 =
NULL
) {

391 
	`Ârötf
(
°dîr
, "îr‹Çÿ¯fun˘i⁄ f‹Ñp¯id:%d,pid:%u\n", 
id
, 
pid
);

395 
	`fs_mbuf_ª£t
(&
Ωc_Õc
->
c_u≈ack_mbuf
);

396 *
d©a
 = 
	`fs_Ωc_c_u≈ack
(
func
, &
Ωc_Õc
->
c_u≈ack_mbuf
, 
öbuf
);

397 i‡(
d©a
 =
NULL
) {

398 
	`Ârötf
(
°dîr
, "îr‹ u≈ack cÇëw‹k d©®id:%d,pid:%u\n", 
id
, 
pid
);

402 
func
->
	`c_fun˘i⁄
(
id
, 
d©a
);

405  
	`fs_Ωc_Õc_ˇŒed
(
id
, 
func
, 
öbuf
);

407 
	}
}

409 
ölöe
 
	$check_•ecific_±o_°©s
(
fs_u£r_t
 *
u£r
, 
fs_Ωc_fun˘i⁄_t
 *
func
, 
pid
)

411 i‡(!
	`TEST_RPC_EXCLUDED_PTO
(
func
->
Êag
)) {

412 i‡(
u£r
->
•ecific_±o_°¨t
) {

413 
u£r
->
•ecific_±o_cou¡
++;

419 i‡(
u£r
->
•ecific_±o_cou¡
 =u£r->
•ecific_±o_thªshﬁd
) {

420 
√xt
;

422 
isok
 = 1;

423 i‡(!
isok
) {

424 
u£r
->
•ecific_±o_îr‹_cou¡
++;

428 
√xt
 = 2 + ((
u£r
->
•ecific_±o_thªshﬁd
 + u£r->
•ecific_±o_°ï
Ë% u£r->
•ecific_±o_mod
);

429 
u£r
->
•ecific_±o_°ï
 = u£r->
•ecific_±o_thªshﬁd
;

430 
u£r
->
•ecific_±o_thªshﬁd
 = 
√xt
;

431 
u£r
->
•ecific_±o_cou¡
 = 0;

434 
	`ˇŒ_s¸ùt_func
("module/validate.c", "spcecific_pto_stats_alarm", "oii",

435 
u£r
->
u£r_obj
, 
isok
, u£r->
•ecific_±o_îr‹_cou¡
);

450 
	}
}

452 
time_t
 
œ°_±o_time°amp_ˇche
;

453 
ölöe
 
	$⁄_u£r_ªcv_±o
(
fs_Ωc_fun˘i⁄_t
 *
func
, 
uid
, 
pid
)

455 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
uid
);

456 i‡(
u£r
 =
NULL
) {

457 
	`Ârötf
(
°dîr
, "îr‹Çÿu£robj f‹Ñp¯uid:%d,pid:%u\n", 
uid
, 
pid
);

460 
u£r
->
œ°_±o_time°amp
 = 
œ°_±o_time°amp_ˇche
;

461 
	`check_•ecific_±o_°©s
(
u£r
, 
func
, 
pid
);

462 
	}
}

466 
	$fs_Ωc_u£r_di•©ch
(
fs_Ωc_Õc_t
 *
Ωc_Õc
, 
uid
, 
fs_öbuf_t
 *
öbuf
)

468 
ªt
;

469 
fs_¥Ÿocﬁ_id_t
 
pid
 = 0;

470 
	`FS_INBUF_GET_TYPE
(
öbuf
, &
pid
, 
fs_¥Ÿocﬁ_id_t
);

472 
	`TIME_TAG_BEGIN
(
g_log_±o_íabÀ
, 
Ωc_ˇŒed
)

473 
fs_Ωc_fun˘i⁄_t
 *
func
 = 
	`fs_Ωc_fun˘i⁄_©
(
Ωc_Õc
->
fun˘i⁄_èbÀ
, 
pid
);

474 i‡(
func
 =
NULL
) {

475 
	`Ârötf
(
°dîr
, "îr‹Çÿfun˘i⁄ f‹Ñp¯uid:%d,pid:%u\n", 
uid
, 
pid
);

479 i‡(
func
->
¨g_˛ass
.
c_imp
) {

480 i‡(
func
->
c_fun˘i⁄
 =
NULL
) {

481 
	`Ârötf
(
°dîr
, "îr‹Çÿ¯fun˘i⁄ f‹Ñp¯uid:%d,pid:%u\n", 
uid
, 
pid
);

485 
	`fs_mbuf_ª£t
(&
Ωc_Õc
->
c_u≈ack_mbuf
);

486 *
d©a
 = 
	`fs_Ωc_c_u≈ack
(
func
, &
Ωc_Õc
->
c_u≈ack_mbuf
, 
öbuf
);

487 i‡(
d©a
 =
NULL
) {

488 
	`Ârötf
(
°dîr
, "îr‹ u≈ack cÇëw‹k d©®uid:%d,pid:%u\n", 
uid
, 
pid
);

492 
func
->
	`c_fun˘i⁄
(
uid
, 
d©a
);

493 
ªt
 = 0;

495 
ªt
 = 
	`fs_Ωc_Õc_ˇŒed
(
uid
, 
func
, 
öbuf
);

499 
	`TIME_TAG_END
(
g_log_±o_íabÀ
, 
Ωc_ˇŒed
,"fun_«me=%s,d©a_Àn=%u,uid=%d", 
func
->
¨g_˛ass
.
«me
, 
öbuf
->
size
, 
uid
);

501  
ªt
;

502 
	}
}

504 
	$fs_Ωc_Õc_∑ck_¨g
(
¨gc
, 
svÆue_t
 *
¨gv
, 
fs_Ωc_Õc_t
 *
Ωc_Õc
, 
fs_√t_mbuf_t
 *
√tbuf
, *
rid
)

507 
id
 = 
¨gv
[0].
u
.
numbî
;

508 
fs_¥Ÿocﬁ_id_t
 
pid
 = 
¨gv
[1].
u
.
numbî
;

510 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = 
	`fs_Ωc_fun˘i⁄_©
(
Ωc_Õc
->
fun˘i⁄_èbÀ
, 
pid
);

511 i‡(
fun˘i⁄
 =
NULL
) {

512 
	`Ârötf
(
°dîr
, "îr‹!ÇÿsuchÑp¯fun˘i⁄ÅÿˇŒ.pid:%d\n", 
pid
);

516 
	`fs_√t_mbuf_ª£t
(
√tbuf
);

517 
	`FS_MBUF_ENQ_TYPE
(&
√tbuf
->
mbuf
, &
pid
, 
fs_¥Ÿocﬁ_id_t
);

519 i‡(
	`fs_Ωc_Õc_∑ck
(
fun˘i⁄
, &
¨gv
[2], 
¨gc
 - 2, &
√tbuf
->
mbuf
)) {

523 *
rid
 = 
id
;

526 
	}
}

530 
	#SET_NO_CLASS_FIELD_TYPE
(
fõld
, 
t
) do {\

531 (
fõld
)->
ty≥
 = (
t
);\

532 (
fõld
)->
˛ass_ödex
 = 
FS_RPC_CLASS_INDEX_NOT
;\

533 } 0)

	)

535 
	$öô_fõld
(
fs_Ωc_fõld_t
 *
fõld
, 
fõld_ty≥
, 
fs_Ωc_˛ass_èbÀ_t
 *
˛ass_èbÀ
, 
¥ogøm_t
 *
¥og
, 
ödex
)

537 i‡((
fõld_ty≥
 & 
TYPE_MOD_ARRAY
) == TYPE_MOD_ARRAY) {

538 
fõld
->
¨øy
 = 
FS_RPC_ARRAY_VAR
;

539 
fõld_ty≥
 &~
TYPE_MOD_ARRAY
;

541 
fõld
->
¨øy
 = 
FS_RPC_ARRAY_NOT
;

543 i‡(
fõld_ty≥
 =
TYPE_ANY
) {

544 i‡(
ödex
 == 0) {

545 
	`SET_NO_CLASS_FIELD_TYPE
(
fõld
, 
FS_RPC_MIXED
);

547 
	`Ârötf
(
°dîr
, "mixedÅype must beÅhe firstárg\n");

550 } i‡(
fõld_ty≥
 =
TYPE_STRING
) {

551 
	`SET_NO_CLASS_FIELD_TYPE
(
fõld
, 
FS_RPC_STRING
);

552 } i‡(
fõld_ty≥
 =
TYPE_NUMBER
) {

553 
	`SET_NO_CLASS_FIELD_TYPE
(
fõld
, 
FS_RPC_INT
);

554 } i‡(
fõld_ty≥
 =
TYPE_BUFFER
) {

555 
	`SET_NO_CLASS_FIELD_TYPE
(
fõld
, 
FS_RPC_BUFFER
);

556 } i‡(
fõld_ty≥
 =
TYPE_OBJECT
) {

557 i‡(
ödex
 == 0) {

558 
	`SET_NO_CLASS_FIELD_TYPE
(
fõld
, 
FS_RPC_OBJECT
);

560 
	`Ârötf
(
°dîr
, "objectÅype must beÅhe firstárg\n");

563 } i‡(
	`IS_CLASS
(
fõld_ty≥
)) {

564 
¥og_˛ass_idx
 = 
	`CLASS_IDX
(
fõld_ty≥
);

565 
˛ass_def_t
 *
cd
 = &
¥og
->
˛as£s
[
¥og_˛ass_idx
];

566 
cidx
 = 
	`fs_Ωc_˛ass_ödex
(
˛ass_èbÀ
, 
¥og
->
°rögs
[
cd
->
«me
]);

567 
	`as£π
(
cidx
 >= 0);

568 
fõld
->
ty≥
 = 
FS_RPC_CLASS
;

569 
fõld
->
˛ass_ödex
 = 
cidx
;

575 
	}
}

577 
	$has_ßme_˛ass
(
fs_Ωc_˛ass_èbÀ_t
 * 
˛ass_èbÀ
, 
fs_Ωc_˛ass_t
 *
˛s
)

579 
ödex
 = 
	`fs_Ωc_˛ass_ödex
(
˛ass_èbÀ
, 
˛s
->
«me
);

580 
fs_Ωc_˛ass_t
 * 
exi°_˛ass
 = 
	`fs_Ωc_˛ass
(
˛ass_èbÀ
, 
ödex
);

581  
	`fs_Ωc_˛ass_ßme
(
˛s
, 
exi°_˛ass
);

582 
	}
}

584 
	$ex∑nd_˛ass_èbÀ
(
fs_Ωc_èbÀ_t
 *
èbÀ
, 
¥ogøm_t
 *
¥og
, 
cimp
)

586 
i
, 
j
;

587 
fs_Ωc_˛ass_èbÀ_t
 *
tbl
 = 
NULL
;

588 
add_˛ass
 = 
¥og
->
num_˛as£s
;

590 
	`as£π
(
¥og
->
num_˛as£s
 <= 32);

592 i‡(
èbÀ
->
˛ass_èbÀ
 =
NULL
) {

593 
tbl
 = 
	`ˇŒoc
(1, (
fs_Ωc_˛ass_èbÀ_t
Ë+ (
fs_Ωc_˛ass_t
Ë* 
add_˛ass
);

595 
tbl
 = 
	`ªÆloc
(
èbÀ
->
˛ass_èbÀ
,

596 (
fs_Ωc_˛ass_èbÀ_t
Ë+ (
fs_Ωc_˛ass_t
Ë* (
èbÀ
->
˛ass_èbÀ
->
ñts
 + 
add_˛ass
));

598 
tbl
->
Ωc_˛ass
 = (
fs_Ωc_˛ass_t
*)((*Èb»+ (
fs_Ωc_˛ass_èbÀ_t
));

599 
	`mem£t
(&
tbl
->
Ωc_˛ass
[tbl->
ñts
], 0, (
fs_Ωc_˛ass_t
Ë* 
add_˛ass
);

602 
i
 = 0; i < 
add_˛ass
; ++i) {

603 
˛ass_def_t
 *
cd
 = &
¥og
->
˛as£s
[
i
];

604 
fs_Ωc_˛ass_t
 *
˛ass
 = &
tbl
->
Ωc_˛ass
[tbl->
ñts
];

606 
˛ass
->
«me
 = 
	`°rdup
(
¥og
->
°rögs
[
cd
->name]);

607 
	`as£π
(
˛ass
->
«me
);

608 
˛ass
->
fõld_cou¡
 = 
cd
->
size
;

609 
˛ass
->
fõld
 = 
	`ˇŒoc
(˛ass->
fõld_cou¡
, (
fs_Ωc_fõld_t
));

610 
˛ass
->
c_imp
 = 
cimp
;

613 
j
 = 0; j < 
˛ass
->
fõld_cou¡
; ++j) {

614 
˛ass_membî_íåy_t
 *
cm
 = &
¥og
->
˛ass_membîs
[
cd
->
ödex
 + 
j
];

615 
fs_Ωc_fõld_t
 *
fõld
 = &
˛ass
->fõld[
j
];

616 
fõld
->
«me
 = 
	`°rdup
(
¥og
->
°rögs
[
cm
->name]);

617 
	`as£π
(
fõld
->
«me
);

618 i‡(0 > 
	`öô_fõld
(
fõld
, 
cm
->
ty≥
, 
tbl
, 
¥og
, 
j
)) {

619 
	`Ârötf
(
°dîr
, "error:rpcÑejectÅhe field.class:%s,field:%s,type=%d\n",

620 
˛ass
->
«me
, 
fõld
->«me, 
cm
->
ty≥
);

621 
îr‹
;

626 i‡(
	`has_ßme_˛ass
(
tbl
, 
˛ass
)) {

627 
	`Ârötf
(
°dîr
, "w¨n:Ω¯Æªady ha†thêßmê˛ass:%s\n", 
˛ass
->
«me
);

628 
	`˛ass_‰ì
(
˛ass
);

632 i‡(
	`fs_Ωc_˛ass_ödex
(
tbl
, 
˛ass
->
«me
) >= 0) {

633 
	`Ârötf
(
°dîr
, "îr‹:Ω¯ha†ßmê«mê˛ass:%s\n", 
˛ass
->
«me
);

634 
îr‹
;

636 
tbl
->
ñts
++;

641 
èbÀ
->
˛ass_èbÀ
 = 
tbl
;

644 
îr‹
:

645 
	`fs_Ωc_èbÀ_de°roy
(
èbÀ
);

647 
	}
}

649 *
	$√w_moduÀ_«me
(*
«me
)

651 *
ªt
;

652 
Àn
;

653 *
n
 = 
	`°rdup
(
«me
);

655 i‡(
n
[0] == '/')

656 
n
++;

657 
Àn
 = 
	`°æí
(
n
);

658 i‡(
Àn
 >= 2) {

659 i‡(
n
[
Àn
-2] == '.' &&Ç[len-1] == 'c')

660 
n
[
Àn
 - 2] = '\0';

662 
	`as£π
(
	`°æí
(
n
) > 0);

663 
ªt
 = 
	`°rdup
(
n
);

664 
	`‰ì
(
n
);

665  
ªt
;

666 
	}
}

669 
	midx
;

670 *
	m«me
;

671 } 
	ts‹t_fun˘i⁄_t
;

673 
	$s‹t_fun˘i⁄
(c⁄° *
a
, c⁄° *
b
)

675 c⁄° 
s‹t_fun˘i⁄_t
 *
Á
 = 
a
;

676 c⁄° 
s‹t_fun˘i⁄_t
 *
fb
 = 
b
;

677  
	`°rcmp
(
Á
->
«me
, 
fb
->name);

678 
	}
}

680 
	$ex∑nd_fun˘i⁄_èbÀ
(
fs_Ωc_èbÀ_t
 *
èbÀ
, 
¥ogøm_t
 *
¥og
, 
cimp
, *
moduÀ
, 
m≠pög_t
 *
°©ic_pids
)

682 
i
, 
j
, 
ﬁd_fun˘i⁄
;

683 
s‹t_fun˘i⁄_t
 *
s‹t
;

684 
fs_Ωc_fun˘i⁄_èbÀ_t
 *
tbl
 = 
NULL
;

685 
add_fun˘i⁄
 = 
¥og
->
num_fun˘i⁄s_deföed
;

687 
	`as£π
(
¥og
->
num_˛as£s
 <= 32);

689 
Õc_pid
 = 
FS_RPC_LPC_PID_START
;

692 i‡(
èbÀ
->
fun˘i⁄_èbÀ
 =
NULL
) {

693 
ﬁd_fun˘i⁄
 = 0;

694 
tbl
 = 
	`ˇŒoc
(1, (
fs_Ωc_fun˘i⁄_èbÀ_t
Ë+ (
fs_Ωc_fun˘i⁄_t
Ë* 
add_fun˘i⁄
);

695 
tbl
->
Ωc_fun˘i⁄
 = (
fs_Ωc_fun˘i⁄_t
*)((*Èb»+ (
fs_Ωc_fun˘i⁄_èbÀ_t
));

697 
ﬁd_fun˘i⁄
 = 
èbÀ
->
fun˘i⁄_èbÀ
->
ñts
;

698 
tbl
 = 
	`ªÆloc
(
èbÀ
->
fun˘i⁄_èbÀ
,

699 (
fs_Ωc_fun˘i⁄_èbÀ_t
)+(
fs_Ωc_fun˘i⁄_t
)*(
ﬁd_fun˘i⁄
 + 
add_fun˘i⁄
));

700 
tbl
->
Ωc_fun˘i⁄
 = (
fs_Ωc_fun˘i⁄_t
*)((*Èb»+ (
fs_Ωc_fun˘i⁄_èbÀ_t
));

701 
	`mem£t
(&
tbl
->
Ωc_fun˘i⁄
[tbl->
ñts
], 0, (
fs_Ωc_fun˘i⁄_t
Ë* 
add_fun˘i⁄
);

704 
s‹t
 = 
	`ˇŒoc
(
add_fun˘i⁄
, (*sort));

705 
i
 = 0; i < 
add_fun˘i⁄
; ++i) {

706 
compûî_fun˘i⁄_t
 *
cf
 = &
¥og
->
fun˘i⁄_èbÀ
[
i
];

707 
s‹t
[
i
].
idx
 = i;

708 
s‹t
[
i
].
«me
 = 
cf
->name;

710 
	`qs‹t
(
s‹t
, 
add_fun˘i⁄
, (*s‹t), 
s‹t_fun˘i⁄
);

712 
i
 = 0; i < 
add_fun˘i⁄
; ++i, 
tbl
->
ñts
++) {

713 
compûî_fun˘i⁄_t
 *
cf
 = &
¥og
->
fun˘i⁄_èbÀ
[
s‹t
[
i
].
idx
];

715 
ru¡ime_deföed_t
 *
rd
 = &
¥og
->
fun˘i⁄_off£ts
[
cf
->
ru¡ime_ödex
].
def
;

718 
ödex
 = 
ﬁd_fun˘i⁄
 + 
i
;

719 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = &
tbl
->
Ωc_fun˘i⁄
[
ödex
];

721 i‡(
°©ic_pids
 !
NULL
) {

722 
svÆue_t
 *
v
 = 
	`föd_°rög_ö_m≠pög
(
°©ic_pids
, 
cf
->
«me
);

729 i‡(
v
->
ty≥
 =
T_NUMBER
 && v !&
c⁄°0u
 && v !&
c⁄°0
) {

730 i‡(
v
->
u
.
numbî
 >
FS_RPC_LPC_PID_START
) {

731 
	`Ârötf
(
°dîr
, "°©i¯¥Ÿocﬁ id mu°Üess†th™ %d\n", 
FS_RPC_LPC_PID_START
);

732 
	`as£π
(0);

734 
fun˘i⁄
->
fun˘i⁄_id
 = 
v
->
u
.
numbî
;

737 
fun˘i⁄
->
fun˘i⁄_id
 = 
Õc_pid
++;

741 
fun˘i⁄
->
fun˘i⁄_id
 = 
Õc_pid
++;

744 i‡(
moduÀ
 =
NULL
) {

745 
fun˘i⁄
->
moduÀ
 = 
	`°rdup
("no_such_module");

747 
fun˘i⁄
->
moduÀ
 = 
	`√w_moduÀ_«me
(module);

750 
fs_Ωc_˛ass_t
 *
¨g_˛ass
 = &
fun˘i⁄
->arg_class;

751 
¨g_˛ass
->
«me
 = 
	`°rdup
(
cf
->name);

752 
¨g_˛ass
->
fõld_cou¡
 = 
rd
->
num_¨g
;

753 
¨g_˛ass
->
fõld
 = 
	`ˇŒoc
(
rd
->
num_¨g
, (
fs_Ωc_fõld_t
));

754 
¨g_˛ass
->
c_imp
 = 
cimp
;

756 i‡(
	`fs_Ωc_fun˘i⁄_föd
(
tbl
, 
¨g_˛ass
->
«me
)) {

757 
	`Ârötf
(
°dîr
, "îr‹:Ω¯ha†ßmê«mêfun˘i⁄:%s\n", 
¨g_˛ass
->
«me
);

758 
îr‹
;

761 
¨g_ty≥_°¨t
 = 
¥og
->
ty≥_°¨t
[
rd
->
f_ödex
];

762 
j
 = 0; j < 
rd
->
num_¨g
; ++j) {

763 
¨g_ty≥
 = 
¥og
->
¨gumít_ty≥s
[
¨g_ty≥_°¨t
 + 
j
];

765 
fs_Ωc_fõld_t
 *
fõld
 = &
¨g_˛ass
->fõld[
j
];

766 i‡(0 > 
	`öô_fõld
(
fõld
, 
¨g_ty≥
, 
èbÀ
->
˛ass_èbÀ
, 
¥og
, 
j
)) {

767 
	`Ârötf
(
°dîr
, "error:rpcÑejectÅheárg.function:%s,fieldÅype=%d\n",

768 
¨g_˛ass
->
«me
, 
¨g_ty≥
);

769 
îr‹
;

776 
èbÀ
->
fun˘i⁄_èbÀ
 = 
tbl
;

777 
	`‰ì
(
s‹t
);

780 
îr‹
:

781 
	`‰ì
(
s‹t
);

782 
	`fs_Ωc_èbÀ_de°roy
(
èbÀ
);

784 
	}
}

797 
	$f_fs_Ωc_make_cfg
()

799 
i
;

800 
¨øy_t
 *
de˛
 = (
•
-2)->
u
.
¨r
;

802 c⁄° *
Ωc_id
 = (
•
 - 1)->
u
.
°rög
;

803 c⁄° *
Ωc_cfg
 = 
•
->
u
.
°rög
;

805 
fs_Ωc_èbÀ_t
 
èbÀ
;

806 
obje˘_t
 *
hdrobj
 = 
NULL
, *
impobj
 = NULL;

807 
	`mem£t
(&
èbÀ
, 0, (table));

809 
i
 = 0; i < 
de˛
->
size
; ++i) {

810 
m≠pög_t
 *
moduÀ
 = 
de˛
->
ôem
[
i
].
u
.
m≠
;

811 
svÆue_t
 *
hódî
 = 
	`föd_°rög_ö_m≠pög
(
moduÀ
, "declare");

812 
svÆue_t
 *
imp
 = 
	`föd_°rög_ö_m≠pög
(
moduÀ
, "implement");

813 
svÆue_t
 *
cimp
 = 
	`föd_°rög_ö_m≠pög
(
moduÀ
, "c_implement");

814 
svÆue_t
 *
°©ic_±oid
 = 
	`föd_°rög_ö_m≠pög
(
moduÀ
, "static_ptoid");

815 
m≠pög_t
 *
°©ic_pids
 = (
°©ic_±oid
->
ty≥
 =
T_MAPPING
Ë? sètic_±oid->
u
.
m≠
 : 
NULL
;

817 i‡(
hódî
 =
NULL
 || 
imp
 =NULL|| hódî->
u
.
°rög
 == NULL) {

820 
iscimp
 = 
cimp
->
u
.
°rög
 !
NULL
;

823 
hdrobj
 = 
	`föd_obje˘
(
hódî
->
u
.
°rög
);

824 i‡(
hdrobj
 =
NULL
) {

825 
	`Ârötf
(
°dîr
, "Ω¯cfgÉº‹:nÿsuch hódî:%s\n", 
hódî
->
u
.
°rög
);

829 ()
impobj
;

840 i‡(0 > 
	`ex∑nd_˛ass_èbÀ
(&
èbÀ
, 
hdrobj
->
¥og
, 
iscimp
))

841 
îr‹
;

842 i‡(0 > 
	`ex∑nd_fun˘i⁄_èbÀ
(&
èbÀ
, 
hdrobj
->
¥og
, 
iscimp
, 
imp
->
u
.
°rög
, 
°©ic_pids
))

843 
îr‹
;

848 i‡(
èbÀ
.
fun˘i⁄_èbÀ
 !
NULL
) {

849 
	`fs_Ωc_fun˘i⁄_qs‹t
(
èbÀ
.
fun˘i⁄_èbÀ
);

851 
	`fs_Ωc_dump_cfg
(&
èbÀ
, 
Ωc_cfg
);

852 
	`fs_Ωc_dump_c
(&
èbÀ
, "../engine/packages/fs_rpc_c.h", "../engine/packages/rpc_c.c");

853 
	`fs_Ωc_dump_fun˘i⁄_id
(
èbÀ
.
fun˘i⁄_èbÀ
, 
Ωc_id
);

854 
	`fs_Ωc_dump_fun˘i⁄_c_id
(
èbÀ
.
fun˘i⁄_èbÀ
, "../engine/packages/fs_rpc_id.h");

855 
îr‹
:

856 
	`p›_n_ñems
(
°_num_¨g
);

857 
	`fs_Ωc_èbÀ_de°roy
(&
èbÀ
);

858 
	}
}

860 
	$f_fs_Ωc_ˇŒ
()

862 
SET_ALL_ARGS


863 
	`g_Ωc_ˇŒ_imp
(
°_num_¨g
, 
	`ARGS
(0));

864 
POP_ALL_ARGS
;

865 
	}
}

867 
	$f_fs_vÆid©i⁄_°¨t
()

869 
SET_ALL_ARGS


870 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

871 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
uid
);

872 i‡(
u£r
 !
NULL
) {

873 
	`•ecific_±o_°©s_°¨t
(
u£r
);

875 
POP_ALL_ARGS
;

876 
	}
}

878 
	$f_fs_£t_vÆid©i⁄
()

880 
SET_ALL_ARGS


881 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

882 
thªshﬁd
 = 
	`ARGS
(1)->
u
.
numbî
;

883 
°ï
 = 
	`ARGS
(2)->
u
.
numbî
;

884 
mod
 = 
	`ARGS
(3)->
u
.
numbî
;

885 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
uid
);

886 i‡(
u£r
 !
NULL
) {

887 
	`£t_•ecific_±o_°©s
(
u£r
, 
thªshﬁd
, 
°ï
, 
mod
);

889 
POP_ALL_ARGS
;

890 
	}
}

892 
	$f_fs_œ°_±o_time°amp
()

894 
time_t
 
°amp
 = 0;

895 
SET_ALL_ARGS


896 
uid
 = 
	`ARGS
(0)->
u
.
numbî
;

897 
fs_u£r_t
 *
u£r
 = 
	`FödU£rO∆öe
(
uid
);

898 i‡(
u£r
 !
NULL
) {

899 
°amp
 = 
u£r
->
œ°_±o_time°amp
;

901 
POP_ALL_ARGS
;

902 
	`push_numbî
(
°amp
);

903 
	}
}

905 
	$f_fs_ex˛ude_°©s_±o
()

907 
SET_ALL_ARGS


908 
svÆue_t
 *
sv
;

909 
¨øy_t
 *
¨r
 = 
	`ARGS
(0)->
u
.arr;

910 
i
;

911 
pid
;

912 
fs_Ωc_fun˘i⁄_t
 *
func
;

914 
i
 = 0; i < 
¨r
->
size
; ++i) {

915 
sv
 = &
¨r
->
ôem
[
i
];

916 i‡(
sv
->
ty≥
 !
T_NUMBER
) {

917 
	`Ârötf
(
°dîr
, "error badÅype forÉxludingÖto stats\n");

920 
pid
 = 
sv
->
u
.
numbî
;

921 
func
 = 
	`fs_Ωc_fun˘i⁄_©
(
g_Ωc_èbÀ
->
fun˘i⁄_èbÀ
, 
pid
);

922 i‡(
func
 !
NULL
) {

923 
	`SET_RPC_EXCLUDED_PTO
(
func
->
Êag
);

926 
	`Ârötf
(
°dîr
, "îr‹Çÿ±ÿtÿexludê°©†pid:%d\n", 
pid
);

930 
POP_ALL_ARGS
;

931 
	}
}

933 
fs_Ωc_Õc_t
 *
gamed_Ωc_Õc
;

934 
	$to_lo›
(
¨gc
, 
svÆue_t
 *
¨gv
)

936 
fs_uid_t
 
uid
 = 
¨gv
[0].
u
.
numbî
;

937 
fs_¥Ÿocﬁ_id_t
 
pid
 = 
¨gv
[1].
u
.
numbî
;

940 
fs_mbuf_t
 
mbufv¨
;

941 
fs_mbuf_t
 *
mbuf
 = &
mbufv¨
;

942 
	`fs_mbuf_öô
(
mbuf
, 0);

944 
fs_Ωc_fun˘i⁄_t
 *
fun˘i⁄
 = 
	`fs_Ωc_fun˘i⁄_©
(
g_Ωc_èbÀ
->
fun˘i⁄_èbÀ
, 
pid
);

945 i‡(
fun˘i⁄
 =
NULL
) {

946 
	`Ârötf
(
°dîr
, "nÿsuchÑp¯fun˘i⁄ÅÿˇŒ.pid:%d\n", 
pid
);

951 
	`FS_MBUF_ENQ_TYPE
(
mbuf
, &
pid
, 
fs_¥Ÿocﬁ_id_t
);

954 i‡(
	`fs_Ωc_Õc_∑ck
(
fun˘i⁄
, &
¨gv
[2], 
¨gc
 - 2, 
mbuf
)) {

955 
	`Ârötf
(
°dîr
, "rpc callÜoopÖackÉrror\n");

961 *
øwbuf
 = 
	`mÆloc
(
mbuf
->
d©a_size
);

962 
off
 = 0;

963 
fs_mbuf_blk_t
 *
blk
;

964 
blk
 = 
mbuf
->
hód
; blk !
NULL
; blk = blk->
√xt
) {

965 
Àn
 = 
	`FS_MBUF_BLK_DATA_LEN
(
blk
);

966 i‡(
Àn
 > 0) {

968 
	`mem˝y
(
øwbuf
 + 
off
, 
blk
->
hód
, 
Àn
);

969 
off
 +
Àn
;

973 
fs_öbuf_t
 
öbuf
;

974 
	`FS_INBUF_INIT
(&
öbuf
, 
øwbuf
, 
mbuf
->
d©a_size
);

975 
	`fs_Ωc_di•©ch
(
gamed_Ωc_Õc
, 
uid
, &
öbuf
);

976 
	`‰ì
(
øwbuf
);

979 
	`fs_mbuf_de°ru˘
(
mbuf
);

982 
	}
}

984 
	$f_fs_Ωc_ˇŒ_lo›
()

986 
SET_ALL_ARGS


987 
	`to_lo›
(
°_num_¨g
, 
	`ARGS
(0));

988 
POP_ALL_ARGS
;

989 
	}
}

1006 *
	gty≥_«me_tbl
[] = {

1020 
	$is_¨øy
(
ty≥
)

1022  
ty≥
 & 
TYPE_MOD_ARRAY
;

1023 
	}
}

1025 * 
	$my_ty≥_«me
(
ty≥
)

1027 i‡(
ty≥
 >0 &&Åy≥ < (
ty≥_«me_tbl
)/(*)) {

1028  
ty≥_«me_tbl
[
ty≥
];

1030 
	`¥ötf
("badÅy≥:%d\n", 
ty≥
);

1031 
	`¥ötf
("i†˛ass:%d\n", 
	`IS_CLASS
(
ty≥
));

1032 
	`¥ötf
("˛as†ödex:%d\n", 
	`CLASS_IDX
(
ty≥
));

1034  
NULL
;

1036 
	}
}

1038 
	$∑ck_ã°
()

1040 
obje˘_t
 *
obj
;

1041 
¥ogøm_t
 *
¥og
;

1042 
i
,
j
;

1044 *
fûe
 = "/rc/pack";

1045 
obj
 = 
	`föd_obje˘
(
fûe
);

1046 
¥og
 = 
obj
->prog;

1047 
	`¥ötf
("num cœss:%d\n", 
¥og
->
num_˛as£s
);

1048 
i
 = 0; i < 
¥og
->
num_˛as£s
; ++i) {

1049 
˛ass_def_t
 * 
cd
 = &
¥og
->
˛as£s
[
i
];

1050 
	`¥ötf
("˛as†«me:%s,ty≥:%s,size:%d,ödex:%d\n", 
¥og
->
°rögs
[
cd
->
«me
],

1051 
	`my_ty≥_«me
(
cd
->
ty≥
), cd->
size
, cd->
ödex
);

1052 
j
 = 0; j < 
cd
->
size
; ++j) {

1053 
˛ass_membî_íåy_t
 *
cm
 = &
¥og
->
˛ass_membîs
[
cd
->
ödex
 + 
j
];

1054 
	`¥ötf
("membîÇame:%s,ty≥:%s\n", 
¥og
->
°rögs
[
cm
->
«me
], 
	`my_ty≥_«me
(cm->
ty≥
));

1059 
	`¥ötf
("num deföed fun˘i⁄:%d\n", 
¥og
->
num_fun˘i⁄s_deföed
);

1060 
i
 = 0; i < 
¥og
->
num_fun˘i⁄s_deföed
; ++i) {

1061 
compûî_fun˘i⁄_t
 *
cf
 = &
¥og
->
fun˘i⁄_èbÀ
[
i
];

1062 
	`¥ötf
("deföed fun˘i⁄Çame=%s,Ñëu∫Åy≥=%s\n", 
cf
->
«me
, 
	`my_ty≥_«me
(cf->
ty≥
));

1063 
ru¡ime_deföed_t
 *
rd
 = &
¥og
->
fun˘i⁄_off£ts
[
cf
->
ru¡ime_ödex
].
def
;

1064 
	`¥ötf
("runtime defÇumárg=%d,ÇumÜocal=%d, index=%d, index=%d\n",

1065 
rd
->
num_¨g
,Ñd->
num_loˇl
,Ñd->
f_ödex
,
cf
->
ru¡ime_ödex
);

1066 
ty≥_°¨t
 = 
¥og
->ty≥_°¨t[
rd
->
f_ödex
];

1067 
	`¥ötf
("ty≥ sèπ index:%d\n", 
ty≥_°¨t
);

1068 
j
 = 0; j < 
rd
->
num_¨g
; ++j) {

1069 
	`¥ötf
("¨gÅy≥:%s\n", 
	`my_ty≥_«me
(
¥og
->
¨gumít_ty≥s
[
ty≥_°¨t
 + 
j
]));

1072 
	}
}

	@packages/socket_err.c

1 
	~"sockë_îr.h
"

3 *
	gîr‹_°rögs
[
ERROR_STRINGS
] =

	@packages/sockets.c

5 
	~<uni°d.h
>

6 
	~<√töë/ö.h
>

7 
	~<sys/sockë.h
>

8 
	~<sys/io˘l.h
>

9 
	~<√tdb.h
>

11 
	~"Õc_ö˛.h
"

12 
	~"Õc_¨gs_›.h
"

13 
	~"sockë_îr.h
"

14 
	~"Õc_sockë.h
"

15 
	~"°ack.h
"

16 
	~"e›î©‹s.h
"

20 
	#SC_FORCE
 1

	)

21 
	#SC_DO_CALLBACK
 2

	)

22 
	#SC_FINAL_CLOSE
 4

	)

24 
Õc_sockë_t
* 
	gÕc_socks
 = 
NULL
;

26 
ST_I
 *
	g‰ì_sockë_°ack
 = 
NULL
;

28 
ˇŒ_ˇŒback
(
obje˘_t
 *
ow√r_ob
, 
ˇŒback_t
* 
ˇŒback
, 
num_¨g
);

30 
	$öô_sockës
()

32 
size
, 
i
;

34 i‡–
Õc_socks
 !
NULL
)

37 
	`¥ötf
( "lpc sockets“—æ≠≥ı ºªØπ˝£¨«ÎŒ÷ÿ∏¥≥ı ºªØ\n" );

42 i‡(
	`öô_°ack_öt
(&
‰ì_sockë_°ack
) != 1)

44 
	`debug_mesßge
("sockets stack initÉrror\n");

45 
	`exô
(-11);

49 
size
 = (
Õc_sockë_t
Ë* 
MAX_LPC_SOCKET
;

50 
Õc_socks
 = (
Õc_sockë_t
*)
	`MALLOC
(
size
);

51 
	`bzîo
(
Õc_socks
, 
size
);

53  
i
 = 0; i < 
MAX_LPC_SOCKET
;i++)

55 
Õc_socks
[
i
].
ödex
 = i;

56 
Õc_socks
[
i
].
fd
 = -1;

58 
Õc_socks
[
i
].
°©e
 = 
CLOSED
;

60 
‰ì_sockë_°ack
->
	`push
–‰ì_sockë_°ack, 
i
 );

62 
	}
}

68 
INLINE
 
	$£t_sockë_n⁄blockög
 (
fd
, 
which
)

70 
ªsu…
;

72 
ªsu…
 = 
	`io˘l
(
fd
, 
FIONBIO
, &
which
);

74 i‡(
ªsu…
 == -1)

75 
	`¥ötf
("set_socket_nonblocking: ioctl\n");

77  
ªsu…
;

78 
	}
}

80 
	$˛ór_ˇŒback
–
ˇŒback_t
* 
ˇŒback
 )

82  
ˇŒback
->
func_ty≥
 )

84 
T_FUNCTION
:

85 
	`‰ì_fu≈
(
ˇŒback
->
fun˘i⁄
.
f
);

86 
ˇŒback
->
fun˘i⁄
.
f
 = 
NULL
;

88 
T_STRING
:

89 
	`‰ì_°rög
(
ˇŒback
->
fun˘i⁄
.
s
);

90 
ˇŒback
->
fun˘i⁄
.
s
 = 
NULL
;

92 
T_INVALID
:

95 
	`¥ötf
("socket_create: old closee_callback'sÅype is Error\n");

99 
ˇŒback
->
func_ty≥
 = 
T_INVALID
;

100 
ˇŒback
->
fun˘i⁄
.
s
 = 
NULL
;

101 
	}
}

103 
	$£t_˛o£_ˇŒback
(
i
, 
svÆue_t
 * 
˛o£_ˇŒback
)

106 
	`˛ór_ˇŒback
–&(
Õc_socks
[
i
].
˛o£_ˇŒback
));

108 i‡–
˛o£_ˇŒback
 )

110 
Õc_socks
[
i
].
˛o£_ˇŒback
.
func_ty≥
 = clo£_ˇŒback->
ty≥
;

111  
˛o£_ˇŒback
->
ty≥
)

113 
T_FUNCTION
:

114 
Õc_socks
[
i
].
˛o£_ˇŒback
.
fun˘i⁄
.
f
 = clo£_ˇŒback->
u
.
Â
;

115 
˛o£_ˇŒback
->
u
.
Â
->
hdr
.
ªf
++;

117 
T_STRING
:

118 
Õc_socks
[
i
].
˛o£_ˇŒback
.
fun˘i⁄
.
s
 = 
	`make_sh¨ed_°rög
(˛o£_ˇŒback->
u
.
°rög
);

121 
Õc_socks
[
i
].
ªad_ˇŒback
.
func_ty≥
 = 
T_INVALID
;

127 
	}
}

129 
	$£t_ªad_ˇŒback
(
i
, 
svÆue_t
 * 
ªad_ˇŒback
)

131 
	`˛ór_ˇŒback
–&(
Õc_socks
[
i
].
ªad_ˇŒback
));

133 i‡–
ªad_ˇŒback
 )

135 
Õc_socks
[
i
].
ªad_ˇŒback
.
func_ty≥
 =Ñód_ˇŒback->
ty≥
;

136  
ªad_ˇŒback
->
ty≥
)

138 
T_FUNCTION
:

139 
Õc_socks
[
i
].
ªad_ˇŒback
.
fun˘i⁄
.
f
 =Ñód_ˇŒback->
u
.
Â
;

140 
ªad_ˇŒback
->
u
.
Â
->
hdr
.
ªf
++;

142 
T_STRING
:

143 
Õc_socks
[
i
].
ªad_ˇŒback
.
fun˘i⁄
.
s
 = 
	`make_sh¨ed_°rög
‘ód_ˇŒback->
u
.
°rög
);

146 
Õc_socks
[
i
].
ªad_ˇŒback
.
func_ty≥
 = 
T_INVALID
;

152 
	}
}

154 
	$£t_⁄c⁄√˘_ˇŒback
(
i
, 
svÆue_t
 * 
⁄c⁄√˘_ˇŒback
)

156 
	`˛ór_ˇŒback
–&(
Õc_socks
[
i
].
⁄c⁄√˘_ˇŒback
) );

158 i‡–
⁄c⁄√˘_ˇŒback
 )

160  
⁄c⁄√˘_ˇŒback
->
ty≥
)

162 
T_FUNCTION
:

163 
Õc_socks
[
i
].
⁄c⁄√˘_ˇŒback
.
func_ty≥
 = onc⁄√˘_ˇŒback->
ty≥
;

164 
Õc_socks
[
i
].
⁄c⁄√˘_ˇŒback
.
fun˘i⁄
.
f
 = onc⁄√˘_ˇŒback->
u
.
Â
;

165 
⁄c⁄√˘_ˇŒback
->
u
.
Â
->
hdr
.
ªf
++;

167 
T_STRING
:

168 
Õc_socks
[
i
].
⁄c⁄√˘_ˇŒback
.
func_ty≥
 = onc⁄√˘_ˇŒback->
ty≥
;

169 
Õc_socks
[
i
].
⁄c⁄√˘_ˇŒback
.
fun˘i⁄
.
s
 = 
	`make_sh¨ed_°rög
(⁄c⁄√˘_ˇŒback->
u
.
°rög
);

172 
Õc_socks
[
i
].
⁄c⁄√˘_ˇŒback
.
func_ty≥
 = 
T_INVALID
;

178 
	}
}

180 
	$£t_li°í_ˇŒback
(
i
, 
svÆue_t
 * 
li°í_ˇŒback
)

183 
	`˛ór_ˇŒback
–&(
Õc_socks
[
i
].
li°í_ˇŒback
));

185 i‡–
li°í_ˇŒback
 )

187 
Õc_socks
[
i
].
li°í_ˇŒback
.
func_ty≥
 =Üi°í_ˇŒback->
ty≥
;

188  
li°í_ˇŒback
->
ty≥
)

190 
T_FUNCTION
:

191 
Õc_socks
[
i
].
li°í_ˇŒback
.
fun˘i⁄
.
f
 =Üi°í_ˇŒback->
u
.
Â
;

192 
li°í_ˇŒback
->
u
.
Â
->
hdr
.
ªf
++;

194 
T_STRING
:

195 
Õc_socks
[
i
].
li°í_ˇŒback
.
fun˘i⁄
.
s
 = 
	`make_sh¨ed_°rög
÷i°í_ˇŒback->
u
.
°rög
);

198 
Õc_socks
[
i
].
li°í_ˇŒback
.
func_ty≥
 = 
T_INVALID
;

204 
	}
}

213 
	$sockë_¸óã
(
svÆue_t
 * 
˛o£_ˇŒback
)

215 
ty≥
, 
i
, 
fd
, 
›tvÆ
;

217 
ty≥
 = 
SOCK_STREAM
;

219 
‰ì_sockë_°ack
->
	`p›
(‰ì_sockë_°ack, &
i
);

221 i‡(
i
 < 0)

223 
	`¥ötf
("ªÒ»°ø’œ–lpc socket ß∞‹£°£°£°\n");

224  
EESOCKET
;

227 
fd
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

228 i‡(
fd
 == -1) {

229 
	`¥ötf
("socket_create: socket\n");

230 
	`˛o£
(
fd
);

231 
‰ì_sockë_°ack
->
	`push
(‰ì_sockë_°ack, 
i
);

232  
EESOCKET
;

235 
›tvÆ
 = 1;

236 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
›tvÆ
, (optval)) == -1) {

237 
	`¥ötf
("socket_create: setsockopt\n");

238 
	`˛o£
(
fd
);

239 
‰ì_sockë_°ack
->
	`push
(‰ì_sockë_°ack, 
i
);

240  
EESETSOCKOPT
;

242 i‡(
	`£t_sockë_n⁄blockög
(
fd
, 1) == -1)

244 
	`¥ötf
("socket_create: set_socket_nonblocking\n");

245 
	`˛o£
(
fd
);

246 
‰ì_sockë_°ack
->
	`push
(‰ì_sockë_°ack, 
i
);

247  
EENONBLOCK
;

250 
Õc_socks
[
i
].
fd
 = fd;

252 
	`£t_˛o£_ˇŒback
(
i
, 
˛o£_ˇŒback
);

254 
Õc_socks
[
i
].
°©e
 = 
UNBOUND
;

257 
Õc_socks
[
i
].
ow√r_ob
 = 
cuºít_obje˘
;

259  
i
;

260 
	}
}

265 
	$sockë_wrôe
(
Õc_fd
, 
svÆue_t
 * 
mesßge
)

267 
Àn
, 
off
;

268 *
buf
;

270 i‡(
Õc_fd
 < 0 ||Üpc_fd >
MAX_LPC_SOCKET
)

271  
EEFDRANGE
;

273 i‡(
Õc_socks
[
Õc_fd
].
°©e
 =
CLOSED
 )

274  
EEBADF
;

276 i‡(
Õc_socks
[
Õc_fd
].
ow√r_ob
 !
cuºít_obje˘
)

277  
EESECURITY
;

279 i‡(
Õc_socks
[
Õc_fd
].
°©e
 !
DATA_XFER
)

280  
EENOTCONN
;

282 
mesßge
->
ty≥
) {

283 
T_BUFFER
:

284 
Àn
 = 
mesßge
->
u
.
buf
->
size
;

285 
buf
 = (*Ë
	`DMALLOC
(
Àn
, 
TAG_TEMPORARY
, "socket_write: T_BUFFER");

286 i‡(
buf
 =
NULL
)

287 
	`Áèl
("OSÉrror: Out of memory");

288 
	`mem˝y
(
buf
, 
mesßge
->
u
.buf->
ôem
, 
Àn
);

290 
T_STRING
:

291 
Àn
 = 
	`SVALUE_STRLEN
(
mesßge
);

292 
buf
 = (*Ë
	`DMALLOC
(
Àn
 + 1, 
TAG_TEMPORARY
, "socket_write: T_STRING");

293 i‡(
buf
 =
NULL
)

294 
	`Áèl
("OSÉrror: Out of memory");

297 
	`mem˝y
–
buf
, 
mesßge
->
u
.
°rög
, 
Àn
 );

300 
T_ARRAY
:

302 
i
, 
limô
;

303 
svÆue_t
 *
ñ
;

305 
Àn
 = 
mesßge
->
u
.
¨r
->
size
 * ();

306 
buf
 = (*Ë
	`DMALLOC
(
Àn
 + 1, 
TAG_TEMPORARY
, "socket_write: T_ARRAY");

307 i‡(
buf
 =
NULL
)

308 
	`Áèl
("OSÉrror: Out of memory");

309 
ñ
 = 
mesßge
->
u
.
¨r
->
ôem
;

310 
limô
 = 
Àn
 / ();

311 
i
 = 0; i < 
limô
; i++) {

312 
ñ
[
i
].
ty≥
) {

313 
T_NUMBER
:

314 
	`mem˝y
((*Ë&
buf
[
i
 * ()],

315 (*Ë&
ñ
[
i
].
u
.
numbî
, ());

317 
T_REAL
:

318 
	`mem˝y
((*Ë&
buf
[
i
 * ()], (*Ë&
ñ
[i].
u
.
ªÆ
,

328  
EETYPENOTSUPP
;

331 i‡–
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
 )

333 
off
 = 
	`buf„ªvít_wrôe
(
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
, 
buf
, 
Àn
);

337  
EESEND
;

340 i‡(
off
 == -1) {

341 
	`FREE
(
buf
);

342 
sockë_î∫o
)

344 
EWOULDBLOCK
:

345  
EEWOULDBLOCK
;

347 
	`¥ötf
("socket_write: sendÜine 348\n");

348  
EESEND
;

352 
	`FREE
(
buf
);

354  
EESUCCESS
;

355 
	}
}

359 
	$sockë_˛o£
(
Õc_fd
, 
Êags
)

363 i‡(
Õc_fd
 < 0 ||Üpc_fd >
MAX_LPC_SOCKET
)

364  
EEFDRANGE
;

365 i‡(
Õc_socks
[
Õc_fd
].
°©e
 =
CLOSED
)

366  
EEBADF
;

367 i‡(!(
Êags
 & 
SC_FORCE
Ë&& 
Õc_socks
[
Õc_fd
].
ow√r_ob
 !
cuºít_obje˘
)

368  
EESECURITY
;

370 i‡(
Êags
 & 
SC_DO_CALLBACK
) {

371 
	`push_numbî
(
Õc_fd
);

372 
	`ˇŒ_ˇŒback
(
Õc_socks
[
Õc_fd
].
ow√r_ob
, &÷pc_socks[Õc_fd].
˛o£_ˇŒback
), 1);

375 
	`£t_ªad_ˇŒback
(
Õc_fd
, 0);

376 
	`£t_⁄c⁄√˘_ˇŒback
(
Õc_fd
, 0);

377 
	`£t_˛o£_ˇŒback
(
Õc_fd
, 0);

380 i‡–
Õc_socks
[
Õc_fd
].
li°í_ev
 )

382 
	`evít_dñ
–
Õc_socks
[
Õc_fd
].
li°í_ev
 );

383 
	`FREE
–
Õc_socks
[
Õc_fd
].
li°í_ev
 );

386 i‡–
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
 )

388 
	`buf„ªvít_‰ì
–
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
 );

392 
	`˛o£
(
Õc_socks
[
Õc_fd
].
fd
Ë=-1 && 
sockë_î∫o
 =
EINTR
)

397 
Õc_socks
[
Õc_fd
].
fd
 = -1;

398 
Õc_socks
[
Õc_fd
].
°©e
 = 
CLOSED
;

401 
‰ì_sockë_°ack
->
	`push
–‰ì_sockë_°ack, 
Õc_fd
 );

403  
EESUCCESS
;

404 
	}
}

406 
	$ˇŒ_ˇŒback
(
obje˘_t
 *
ow√r_ob
, 
ˇŒback_t
* 
ˇŒback
, 
num_¨g
)

408 
ˇŒback
->
func_ty≥
)

410 
T_FUNCTION
:

411 
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
ˇŒback
->
fun˘i⁄
.
f
, 
num_¨g
);

413 
T_STRING
:

414 i‡(
ˇŒback
->
fun˘i⁄
.
s
[0] =
APPLY___INIT_SPECIAL_CHAR
)

415 
	`îr‹
("OSÉrror: Illegal functionÇame.\n");

416 
	`ß„_≠∂y
(
ˇŒback
->
fun˘i⁄
.
s
, 
ow√r_ob
, 
num_¨g
, 
ORIGIN_DRIVER
);

419 
	`p›_n_ñems
–
num_¨g
 );

423 
	}
}

425 
	$li°í_h™dÀr
(
fd
, 
evíây≥
, * 
¨gs
)

427 
Õc_sockë_t
* 
Õc_sock
 = (Õc_sockë_t*)
¨gs
;

429 
	`¥ötf
–"li°íed :%d\n", 
fd
);

433 
	`push_numbî
(
Õc_sock
->
ödex
);

434 
	`ˇŒ_ˇŒback
(
Õc_sock
->
ow√r_ob
, &÷pc_sock->
li°í_ˇŒback
), 1);

435 
	}
}

437 
	$ªad_h™dÀr
(
buf„ªvít
 * 
ev
, *
¨gs
)

439 
Õc_sockë_t
* 
Õc_sock
 = (Õc_sockë_t*)
¨gs
;

440 
evbuf„r
 *
buf„r
;

441 
bufsz
;

442 * 
p
;

444 
	`¥ötf
–"ªad :%d@%d\n", 
Õc_sock
->
fd
,Üpc_sock->
ödex
);

447 
buf„r
 = 
	`EVBUFFER_INPUT
(
ev
);

448 
bufsz
 = 
	`EVBUFFER_LENGTH
(
buf„r
);

451 
p
 = 
	`√w_°rög
(
bufsz
, "socketÑead_handler");

452 
	`evbuf„r_ªmove
(
buf„r
, 
p
, 
bufsz
);

453 
p
[
bufsz
] = '\0';

455 
	`push_numbî
(
Õc_sock
->
ödex
);

456 
	`push_mÆlo˚d_°rög
(
p
);

458 
	`ˇŒ_ˇŒback
(
Õc_sock
->
ow√r_ob
, &÷pc_sock->
ªad_ˇŒback
), 2);

460 
	`‰ì_°rög
–
p
 );

461 
	}
}

463 
	$wrôe_h™dÀr
(
buf„ªvít
 * 
ev
, *
¨gs
)

465 
Õc_sockë_t
* 
Õc_sock
 = (Õc_sockë_t*)
¨gs
;

467 
	`¥ötf
–"wrôê:%d@%d\n", 
Õc_sock
->
fd
,Üpc_sock->
ödex
);

470 i‡–
Õc_sock
->
c⁄√˘ed
 ) ;

472 
Õc_sock
->
c⁄√˘ed
 = 1;

474 
	`push_numbî
(
Õc_sock
->
ödex
);

476 
	`ˇŒ_ˇŒback
(
Õc_sock
->
ow√r_ob
, &÷pc_sock->
⁄c⁄√˘_ˇŒback
), 1);

477 
	}
}

479 
	$sockë_îr‹_h™dÀr
(
buf„ªvít
 * 
ev
, 
wh©
, *
¨gs
)

481 
	`¥ötf
(" In socket socket_error_handler\n" );

482 
	}
}

484 
	$c›y_˛o£_ˇŒback
(
to
, 
‰om
)

486 
	`˛ór_ˇŒback
–&(
Õc_socks
[
to
].
˛o£_ˇŒback
));

488 
Õc_socks
[
to
].
˛o£_ˇŒback
.
func_ty≥
 =Üpc_socks[
‰om
].close_callback.func_type;

490  
Õc_socks
[
‰om
].
˛o£_ˇŒback
.
func_ty≥
 )

492 
T_FUNCTION
:

493 
Õc_socks
[
to
].
˛o£_ˇŒback
.
fun˘i⁄
.
f
 =Üpc_socks[
‰om
].close_callback.function.f;

494 
Õc_socks
[
‰om
].
˛o£_ˇŒback
.
fun˘i⁄
.
f
->
hdr
.
ªf
++;

496 
T_STRING
:

497 
Õc_socks
[
to
].
˛o£_ˇŒback
.
fun˘i⁄
.
s
 = 
	`make_sh¨ed_°rög
÷pc_socks[
‰om
].close_callback.function.s);

500 
	}
}

506 
	$sockë_böd_™d_li°í
(
Õc_fd
, 
p‹t
, 
svÆue_t
 * 
li°í_ˇŒback
)

509 
sockÀn_t
 
Àn
;

510 
sockaddr_ö
 
sö
;

512 i‡(
Õc_fd
 < 0 ||Üpc_fd >
MAX_LPC_SOCKET
)

514  
EEFDRANGE
;

517 i‡(
Õc_socks
[
Õc_fd
].
°©e
 =
CLOSED
 )

519  
EEBADF
;

522 i‡(
Õc_socks
[
Õc_fd
].
ow√r_ob
 !
cuºít_obje˘
)

524  
EESECURITY
;

527 i‡(
Õc_socks
[
Õc_fd
].
°©e
 !
UNBOUND
)

529  
EEISBOUND
;

532 
sö
.
sö_Ámûy
 = 
AF_INET
;

533 
sö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

534 
sö
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
Ë
p‹t
);

536 i‡(
	`böd
(
Õc_socks
[
Õc_fd
].
fd
, (
sockaddr
 *Ë& 
sö
, (sin)) == -1)

538 
sockë_î∫o
)

540 
EADDRINUSE
:

541  
EEADDRINUSE
;

543 
	`¥ötf
("socket_bind: bind\n");

544  
EEBIND
;

548 
Àn
 = (
sö
);

549 i‡(
	`gësock«me
(
Õc_socks
[
Õc_fd
].
fd
, (
sockaddr
 *Ë&Õc_socks[Õc_fd].
l_addr
, &
Àn
) == -1)

551 
	`¥ötf
("socket_bind: getsockname\n");

552  
EEGETSOCKNAME
;

554 
Õc_socks
[
Õc_fd
].
°©e
 = 
BOUND
;

556 i‡(
	`li°í
(
Õc_socks
[
Õc_fd
].
fd
, 
BACKLOG
) == -1)

558 
	`¥ötf
("socket_listen:Üisten\n");

559  
EELISTEN
;

561 
Õc_socks
[
Õc_fd
].
°©e
 = 
LISTEN
;

563 
	`£t_li°í_ˇŒback
(
Õc_fd
, 
li°í_ˇŒback
);

567 i‡–
Õc_socks
[
Õc_fd
].
li°í_ev
 )

569 
	`evít_dñ
–
Õc_socks
[
Õc_fd
].
li°í_ev
 );

570 
	`FREE
–
Õc_socks
[
Õc_fd
].
li°í_ev
 );

573 
Õc_socks
[
Õc_fd
].
li°í_ev
 = (
evít
*Ë
	`MALLOC
( ( event));

575 
	`evít_£t
(
Õc_socks
[
Õc_fd
].
li°í_ev
,Üpc_socks[Õc_fd].
fd
, 
EV_READ
|
EV_PERSIST
, 
li°í_h™dÀr
, &(lpc_socks[lpc_fd]));

576 
	`evít_add
(
Õc_socks
[
Õc_fd
].
li°í_ev
, 
NULL
);

578  
EESUCCESS
;

579 
	}
}

583 
	$sockë_ac˚±
(
Õc_fd
, 
svÆue_t
* 
rcb
, svÆue_t* 
wcb
 )

585 
sockÀn_t
 
Àn
;

586 
ac˚±_fd
, 
i
;

587 
sockaddr_ö
 
sö
;

588 
ho°ít
 *
hp
;

590 i‡(
Õc_fd
 < 0 ||Üpc_fd >
MAX_LPC_SOCKET
)

591  
EEFDRANGE
;

592 i‡(
Õc_socks
[
Õc_fd
].
°©e
 =
CLOSED
)

593  
EEBADF
;

594 i‡(
Õc_socks
[
Õc_fd
].
ow√r_ob
 !
cuºít_obje˘
)

595  
EESECURITY
;

596 i‡(
Õc_socks
[
Õc_fd
].
°©e
 !
LISTEN
)

597  
EENOTLISTN
;

599 
Àn
 = (
sö
);

600 
ac˚±_fd
 = 
	`ac˚±
(
Õc_socks
[
Õc_fd
].
fd
, (
sockaddr
 *Ë& 
sö
, &
Àn
);

601 i‡(
ac˚±_fd
 == -1)

603 
sockë_î∫o
)

605 
EWOULDBLOCK
:

606  
EEWOULDBLOCK
;

607 
EINTR
:

608  
EEINTR
;

610 
	`¥ötf
("socket_accept:áccept\n");

611  
EEACCEPT
;

615 
‰ì_sockë_°ack
->
	`p›
(‰ì_sockë_°ack, &
i
);

617 i‡–
i
 < 0)

619 
	`˛o£
(
ac˚±_fd
);

620 
	`¥ötf
("socket_accept: Œﬁø’œ–lpc_fd\n");

621  
i
;

634 
Õc_socks
[
i
].
fd
 = 
ac˚±_fd
;

635 
Õc_socks
[
i
].
°©e
 = 
DATA_XFER
;

636 
Õc_socks
[
i
].
l_addr
 =Üpc_socks[
Õc_fd
].l_addr;

637 
Õc_socks
[
i
].
r_addr
 = 
sö
;

638 
Õc_socks
[
i
].
ow√r_ob
 = 
NULL
;

640 
hp
 = 
	`gëho°byaddr
((*Ë&
sö
.
sö_addr
.
s_addr
, (Ë(sö.sö_addr.s_addr), 
AF_INET
);

641 i‡(
hp
 !
NULL
)

643 
	`°∫˝y
(
Õc_socks
[
i
].
«me
, 
hp
->
h_«me
, 
ADDR_BUF_SIZE
);

644 
Õc_socks
[
i
].
«me
[
ADDR_BUF_SIZE
 - 1] = '\0';

648 
Õc_socks
[
i
].
«me
[0] = '\0';

651 
Õc_socks
[
i
].
ow√r_ob
 = 
cuºít_obje˘
;

653 
	`£t_ªad_ˇŒback
(
i
, 
rcb
);

654 
	`£t_⁄c⁄√˘_ˇŒback
(
i
, 
wcb
);

655 
	`c›y_˛o£_ˇŒback
(
i
, 
Õc_fd
);

657 i‡–
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
 )

659 
	`buf„ªvít_‰ì
–
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
 );

662 
Õc_socks
[
i
].
c⁄√˘_ev
 = 
	`buf„ªvít_√w
(
ac˚±_fd
, 
ªad_h™dÀr
, 
wrôe_h™dÀr
, 
sockë_îr‹_h™dÀr
, &(lpc_socks[i]) );

663 
	`buf„ªvít_íabÀ
(
Õc_socks
[
i
].
c⁄√˘_ev
, 
EV_READ
|
EV_WRITE
);

667  
i
;

668 
	}
}

673 
	$sockë_«me_to_sö
(* 
«me
, 
sockaddr_ö
 * 
sö
)

675 
p‹t
;

676 *
˝
, 
addr
[
ADDR_BUF_SIZE
];

678 
	`°∫˝y
(
addr
, 
«me
, 
ADDR_BUF_SIZE
);

679 
addr
[
ADDR_BUF_SIZE
 - 1] = '\0';

681 
˝
 = 
	`°rchr
(
addr
, ' ');

683 i‡(
˝
 =
NULL
)  0;

685 *
˝
 = '\0';

686 
p‹t
 = 
	`©oi
(
˝
 + 1);

688 
sö
->
sö_Ámûy
 = 
AF_INET
;

689 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
Ë
p‹t
);

690 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
addr
);

693 
	}
}

696 
	$sockë_c⁄√˘
(
Õc_fd
, * 
«me
, 
svÆue_t
* 
rcb
, svÆue_t* 
wcb
 )

698 i‡(
Õc_fd
 < 0 ||Üpc_fd >
MAX_LPC_SOCKET
)

699  
EEFDRANGE
;

700 i‡(
Õc_socks
[
Õc_fd
].
°©e
 =
CLOSED
)

701  
EEBADF
;

702 i‡(
Õc_socks
[
Õc_fd
].
ow√r_ob
 !
cuºít_obje˘
)

703  
EESECURITY
;

704 
Õc_socks
[
Õc_fd
].
°©e
)

706 
CLOSED
:

707 
UNBOUND
:

708 
BOUND
:

710 
LISTEN
:

711  
EEISLISTEN
;

712 
DATA_XFER
:

713  
EEISCONN
;

716 i‡(!
	`sockë_«me_to_sö
(
«me
, &
Õc_socks
[
Õc_fd
].
r_addr
))

717  
EEBADADDR
;

719 
	`£t_ªad_ˇŒback
(
Õc_fd
, 
rcb
);

720 
	`£t_⁄c⁄√˘_ˇŒback
(
Õc_fd
, 
wcb
);

724 i‡(
	`c⁄√˘
(
Õc_socks
[
Õc_fd
].
fd
, (
sockaddr
 *Ë&Üpc_socks[Õc_fd].
r_addr
, (
sockaddr_ö
)) == -1)

726 
sockë_î∫o
)

728 
EINTR
:

729  
EEINTR
;

730 
EADDRINUSE
:

731  
EEADDRINUSE
;

732 
EALREADY
:

733  
EEALREADY
;

734 
ECONNREFUSED
:

735  
EECONNREFUSED
;

736 
EINPROGRESS
:

739 
	`¥ötf
("socket_connect: connect\n");

740  
EECONNECT
;

743 
Õc_socks
[
Õc_fd
].
°©e
 = 
DATA_XFER
;

745 i‡–
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
 )

747 
	`buf„ªvít_‰ì
–
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
 );

750 
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
 = 
	`buf„ªvít_√w
÷pc_fd, 
ªad_h™dÀr
, 
wrôe_h™dÀr
, 
sockë_îr‹_h™dÀr
, &(lpc_socks[lpc_fd]) );

751 
	`buf„ªvít_íabÀ
(
Õc_socks
[
Õc_fd
].
c⁄√˘_ev
, 
EV_READ
|
EV_WRITE
);

754  
EESUCCESS
;

756 
	}
}

761 
	$gë_sockë_addªss
(
Õc_fd
, * 
addr
, * 
p‹t
)

763 i‡(
Õc_fd
 < 0 ||Üpc_fd >
MAX_LPC_SOCKET
) {

764 
addr
[0] = '\0';

765 *
p‹t
 = 0;

766  
EEFDRANGE
;

768 *
p‹t
 = (Ë
	`¡ohs
(
Õc_socks
[
Õc_fd
].
r_addr
.
sö_p‹t
);

769 
	`•rötf
(
addr
, "%s", 
	`öë_¡ﬂ
(
Õc_socks
[
Õc_fd
].
r_addr
.
sö_addr
));

770  
EESUCCESS
;

771 
	}
}

773 
	$f_sockë_¸óã
 ()

775 
SET_ALL_ARGS


776 
ªs
;

777 
svÆue_t
* 
cb
 = 
	`ARGS
(0);

778 
ªs
 = 
	`sockë_¸óã
(
cb
);

779 
POP_ALL_ARGS


781 
	`push_numbî
–
ªs
 );

782 
	}
}

784 
	$f_sockë_˛o£
 ()

786 
SET_ALL_ARGS


787 
Õc_fd
 = 
	`ARGS
(0)->
u
.
numbî
;

788 
ªs
;

790 
POP_ALL_ARGS


792 
ªs
 = 
	`sockë_˛o£
(
Õc_fd
, 0);

794 
	`push_numbî
–
ªs
 );

795 
	}
}

797 
	$f_sockë_addªss
 ()

799 
SET_ALL_ARGS


800 *
°r
;

801 
p‹t
;

802 
addr
[
ADDR_BUF_SIZE
];

803 
buf
[2 * 
ADDR_BUF_SIZE
];

804 
Õc_fd
 = 
	`ARGS
(0)->
u
.
numbî
;

806 
	`gë_sockë_addªss
(
Õc_fd
, 
addr
, &
p‹t
);

807 
	`•rötf
(
buf
, "%†%d", 
addr
, 
p‹t
);

808 
°r
 = 
	`°rög_c›y
(
buf
, "f_socket_address");

810 
POP_ALL_ARGS


812 
	`push_mÆlo˚d_°rög
(
°r
);

813 
	}
}

815 
	$f_sockë_böd_™d_li°í
 ()

817 
SET_ALL_ARGS


818 
Õc_fd
 = 
	`ARGS
(0)->
u
.
numbî
;

819 
p‹t
 = 
	`ARGS
(1)->
u
.
numbî
;

820 
svÆue_t
* 
cb
 = 
	`ARGS
(2);

821 
ªs
;

823 
ªs
 = 
	`sockë_böd_™d_li°í
(
Õc_fd
, 
p‹t
, 
cb
);

825 
POP_ALL_ARGS


827 
	`push_numbî
–
ªs
 );

828 
	}
}

830 
	$f_sockë_ac˚±
 ()

832 
SET_ALL_ARGS


833 
Õc_fd
 = 
	`ARGS
(0)->
u
.
numbî
;

834 
svÆue_t
* 
rcb
 = 
	`ARGS
(1);

835 
svÆue_t
* 
wcb
 = 
	`ARGS
(2);

836 
ªs
;

838 i‡(!(
rcb
->
ty≥
 & (
T_STRING
 | 
T_FUNCTION
))) {

839 
	`bad_¨g
(2, 
F_SOCKET_ACCEPT
);

842 i‡(!(
wcb
->
ty≥
 & (
T_STRING
 | 
T_FUNCTION
))) {

843 
	`bad_¨g
(3, 
F_SOCKET_ACCEPT
);

846 
ªs
 = 
	`sockë_ac˚±
(
Õc_fd
, 
rcb
, 
wcb
);

848 
POP_ALL_ARGS


850 
	`push_numbî
–
ªs
 );

851 
	}
}

853 
	$f_sockë_c⁄√˘
 ()

855 
SET_ALL_ARGS


856 
Õc_fd
 = 
	`ARGS
(0)->
u
.
numbî
;

857 * 
«me

	`ARGS
(1)->
u
.
°rög
;

858 
svÆue_t
* 
rcb
 = 
	`ARGS
(2);

859 
svÆue_t
* 
wcb
 = 
	`ARGS
(3);

860 
ªs
;

862 i‡(!(
rcb
->
ty≥
 & (
T_STRING
 | 
T_FUNCTION
))) {

863 
	`bad_¨g
(3, 
F_SOCKET_CONNECT
);

866 i‡(!(
wcb
->
ty≥
 & (
T_STRING
 | 
T_FUNCTION
))) {

867 
	`bad_¨g
(4, 
F_SOCKET_CONNECT
);

870 
ªs
 = 
	`sockë_c⁄√˘
(
Õc_fd
, 
«me
, 
rcb
, 
wcb
);

872 
POP_ALL_ARGS


874 
	`push_numbî
–
ªs
 );

875 
	}
}

877 
	$f_sockë_wrôe
 ()

879 
SET_ALL_ARGS


880 
Õc_fd
 = 
	`ARGS
(0)->
u
.
numbî
;

881 
svÆue_t
* 
msg
 = 
	`ARGS
(1);

882 
ªs
;

884 
ªs
 = 
	`sockë_wrôe
(
Õc_fd
, 
msg
);

886 
POP_ALL_ARGS


888 
	`push_numbî
–
ªs
 );

889 
	}
}

891 
	$f_dump_sockë_°©us
 ()

893 
SET_ALL_ARGS


894 
POP_ALL_ARGS


896 
	`push_c⁄°™t_°rög
("Not Support!!!");

897 
	}
}

	@packages/sockets_spec.h

1 
	~"../gømm¨/•ec.h
"

5 
sockë_¸óã
(
°rög
 | 
fun˘i⁄
 );

9 
sockë_böd_™d_li°í
(, , 
°rög
 | 
fun˘i⁄
 );

12 
sockë_ac˚±
(, 
°rög
 | 
fun˘i⁄
, string | function);

15 
sockë_c⁄√˘
(, 
°rög
, såög | 
fun˘i⁄
, string | function);

17 
sockë_wrôe
(, 
mixed
);

19 
sockë_˛o£
();

22 
°rög
 
sockë_addªss
();

24 
°rög
 
dump_sockë_°©us
();

	@packages/timeout.h

27 #i‚de‡
_SYS_TIMEOUT_H_


28 
	#_SYS_TIMEOUT_H_


	)

54 
	scúcq
 {

55 
cúcq
 *
	m√xt
;

56 
cúcq
 *
	m¥ev
;

59 
	stimeout
 {

60 
cúcq
 
	mto_li°
;

61 (*
	mto_func
)(
	mtimeout
 *,*);

62 *
	mto_¨g
;

63 
	mto_time
;

64 
	mto_Êags
;

70 
	#TIMEOUT_ONQUEUE
 2

	)

71 
	#TIMEOUT_INITIALIZED
 4

	)

72 
	#TIMEOUT_TRIGGERED
 8

	)

83 
_timeout_£t
(
timeout
 *, (*)(timeout *, *), *);

84 
	`_timeout_add
(
timeout
 *, );

85 
	`_timeout_dñ
(
timeout
 *);

87 
	`timeout_°¨tup
();

93 
	`timeout_h¨d˛ock_upd©e
();

94 
	`so·˛ock
();

	@packages/yauthLib.h

8 #i‚de‡
YAUTHDLIB_H_


9 
	#YAUTHDLIB_H_


	)

18 #i‚de‡
WIN32


19 
	~"°ddef.h
"

20 
	~"°döt.h
"

21 
	#DLL_EXPORT


	)

23 
	tuöt32_t
;

24 
	#DLL_EXPORT
 
	`_de˛•ec
(
dŒexp‹t
)

	)

27 
	#YAUTH_CONF_FILE
 "yauth.c⁄f"

	)

30 #ifde‡
__˝lu•lus


37 
DLL_EXPORT
 
YAuth_öô
();

39 
DLL_EXPORT
 
YAuth_˛ónUp
();

41 
DLL_EXPORT
 c⁄° * 
YAuth_gíReque°
(
uöt32_t
 
c⁄nId
);

43 
DLL_EXPORT
 
YAuth_vîifyTokí
(c⁄° *
tokí
, 
uöt32_t
 
c⁄nId
);

45 
DLL_EXPORT
 
YAuth_‰omHexToSå
(c⁄° *
hexSå
, *
outbuf
,
outbufsize
);

47 
DLL_EXPORT
 c⁄° * 
YAuth_gëAâribuã
(c⁄° * 
°r
, c⁄° * 
©åibuã
, *
buf
, 
size_t
 
buÊí
);

50 #ifde‡
__˝lu•lus


	@packages/z.c

2 
	~"z.h
"

3 
	~"z›í.h
"

5 
	~<°dlib.h
>

6 
	~<as£π.h
>

7 
	~<°dio.h
>

8 
	~<°rög.h
>

11 
	$zªadî_öô
(
zªadî_t
 *
ªadî
, 
bôs
)

13 
tŸÆ
 = 1024;

14 
s_z°©e
 *
unzù
 = 
	`z›í
("r", 
bôs
, 
ªadî
);

15 
	`as£π
(
unzù
);

17 
ªadî
->
unzù
 = unzip;

19 
ªadî
->
off
 = 0;

20 
ªadî
->
tŸÆ
 =Åotal;

21 
ªadî
->
buf
 = (*)
	`mÆloc
‘ódî->
tŸÆ
);

23 
ªadî
->
zoff
 = 0;

24 
ªadî
->
zÀn
 = 0;

25 
ªadî
->
ztŸÆ
 = 
tŸÆ
;

26 
ªadî
->
zbuf
 = (*)
	`mÆloc
‘ódî->
ztŸÆ
);

28 
ªadî
->
eob˙t
 = 0;

29 
ªadî
->
eobtŸÆ
 = 1;

30 
ªadî
->
eob
 = (*)
	`ˇŒoc
‘ódî->
eobtŸÆ
, (*reader->eob));

31 
	}
}

33 
	$zªadî_eob
(
zªadî_t
 *
ªadî
)

35 i‡(
ªadî
->
eobtŸÆ
 =ªadî->
eob˙t
) {

36 
ªadî
->
eobtŸÆ
 *= 2;

38 
ªadî
->
eob
 = (*)
	`ªÆloc
‘ódî->eob,Ñódî->
eobtŸÆ
 * (*reader->eob));

40 
ªadî
->
eob
[ªadî->
eob˙t
++] =Ñódî->
off
;

42 
	}
}

44 
	$zªadî_ouçut
(
zªadî_t
 *
ªadî
, 
c
)

46 i‡(
ªadî
->
off
 >ªadî->
tŸÆ
) {

47 
ªadî
->
tŸÆ
 *= 2;

49 
ªadî
->
buf
 = (*)
	`ªÆloc
‘ódî->buf,Ñódî->
tŸÆ
);

51 
ªadî
->
buf
[ªadî->
off
++] = 
c
;

52 
	}
}

55 
	$zªadî_deöô
(
zªadî_t
 *
ªadî
)

57 
	`‰ì
(
ªadî
->
buf
);

58 
	`‰ì
(
ªadî
->
eob
);

59 
	`‰ì
(
ªadî
->
zbuf
);

60 
	`z˛o£
(
ªadî
->
unzù
);

61 
	`‰ì
(
ªadî
->
unzù
);

62 
	}
}

64 
ª£åoff£t
(
s_z°©e
 *
zs
);

66 
	$zªadî_˛ór
(
zªadî_t
 *
ªadî
)

68 i‡(
ªadî
->
eob˙t
 > 0) {

69 
eob
 = 
ªadî
->eob[ªadî->
eob˙t
 - 1];

70 
sz
 = 
ªadî
->
off
 - 
eob
;

72 
	`memmove
(
ªadî
->
buf
,Ñódî->bu‡+ 
eob
, 
sz
);

73 
ªadî
->
off
 = 
sz
;

74 
ªadî
->
eob˙t
 = 0;

76 
	}
}

79 
	$zªadî_ªad
(
zªadî_t
 *
ªadî
, c⁄° *
zbuf
, 
zÀn
)

81 
zsz
 = 
ªadî
->
zÀn
 -Ñódî->
zoff
;

82 
	`memmove
(
ªadî
->
zbuf
,Ñódî->zbu‡+Ñódî->
zoff
, 
zsz
);

83 i‡((
ªadî
->
ztŸÆ
 - 
zsz
Ë< 
zÀn
) {

84 
ªadî
->
ztŸÆ
 +(
zÀn
 >Ñeader->ztotal ? zlen :Ñeader->ztotal);

86 
ªadî
->
zbuf
 = (*)
	`ªÆloc
‘ódî->zbuf,Ñódî->
ztŸÆ
);

88 
	`memmove
(
ªadî
->
zbuf
 + 
zsz
, zbuf, 
zÀn
);

89 
ªadî
->
zoff
 = 0;

90 
ªadî
->
zÀn
 = 
zsz
 + zlen;

91 
	`ª£åoff£t
(
ªadî
->
unzù
);

93 
	`zªad
(
ªadî
->
unzù
)) {

94 
	`zªadî_eob
(
ªadî
);

97  
ªadî
->
eob˙t
;

98 
	}
}

102 
	$zwrôî_öô
(
zwrôî_t
 *
wrôî
, 
bôs
)

104 
ztŸÆ
 =1024;

105 
s_z°©e
 *
zù
 = 
	`z›í
("w", 
bôs
, 
wrôî
);

106 
	`as£π
(
zù
);

108 
wrôî
->
zù
 = zip;

110 
wrôî
->
ztŸÆ
 = ztotal;

111 
wrôî
->
zoff
 = 0;

112 
wrôî
->
zbuf
 = (*)
	`mÆloc
(wrôî->
ztŸÆ
);

113 
	}
}

115 
	$zwrôî_deöô
(
zwrôî_t
 *
wrôî
)

117 
	`‰ì
(
wrôî
->
zbuf
);

118 
	`z˛o£
(
wrôî
->
zù
);

119 
	`‰ì
(
wrôî
->
zù
);

120 
	}
}

122 
	$zwrôî_˛ór
(
zwrôî_t
 *
wrôî
)

124 
wrôî
->
zoff
 = 0;

125 
	}
}

127 
	$zwrôî_fwrôe
(
zwrôî_t
 *
wrôî
, c⁄° *
±r
, 
sz
, 
nmemb
)

129 
size_t
 
Àn
 = 
sz
 * 
nmemb
;

130 
À·
 = 
wrôî
->
ztŸÆ
 - wrôî->
zoff
;

131 i‡(
À·
 < 
Àn
) {

132 
wrôî
->
ztŸÆ
 +(
Àn
 > writer->ztotal ?Üen : writer->ztotal);

133 
wrôî
->
zbuf
 = (*)
	`ªÆloc
(wrôî->zbuf, wrôî->
ztŸÆ
);

136 
	`mem˝y
(
wrôî
->
zbuf
 + wrôî->
zoff
, 
±r
, 
Àn
);

137 
wrôî
->
zoff
 +
Àn
;

140  
Àn
;

141 
	}
}

144 
	$zwrôî_wrôe
(
zwrôî_t
 *
wrôî
, c⁄° *
buf
, 
Àn
)

146 
w
 = 
	`zwrôe
(
wrôî
->
zù
, 
buf
, 
Àn
);

147  
w
;

148 
	}
}

153 #ifde‡
Z_TEST


154 
	~<°rög.h
>

155 
	~<as£π.h
>

156 
	~<time.h
>

157 
	~<°dio.h
>

158 
	~<sys/ty≥s.h
>

159 
	~<sys/uio.h
>

160 
	~<uni°d.h
>

163 *
	mbuf
;

164 
	mÀn
;

165 } 
	tpk_t
;

167 
	glöe
 = 0;

168 
	göbyãs
 = 0;

169 
	goutbyãs
 = 0;

171 
pk_t
 *
	$gë_pk
(
pk_t
 *
pk
, 
FILE
 *
fö
)

173 
pkÀn
 = 
	`ønd
()%320;

174 i‡(
pkÀn
 == 0) {

175 
pkÀn
 = 1;

178 *
buf
 = (*)
	`mÆloc
(
pkÀn
);

179 
g
;

182 i‡((
g
 = 
	`‰ód
(
buf
, 1, 
pkÀn
, 
fö
)) !=Öklen) {

183 
	`‰ì
(
buf
);

185  
NULL
;

188 
löe
++;

189 
öbyãs
 +
pkÀn
;

191 
pk
->
Àn
 = 
pkÀn
;

192 
pk
->
buf
 = buf;

193  
pk
;

194 
	}
}

196 
	$maö
()

198 
FILE
 *
fö
 = 
	`f›í
("/dev/stdin", "r");

200 
zwrôî_t
 
wrôî
;

201 
	`zwrôî_öô
(&
wrôî
, 12);

204 
zªadî_t
 
ªadî
;

205 
	`zªadî_öô
(&
ªadî
, 12);

207 
time_t
 
tm
 = 
	`time
(
NULL
);

208 
	`§™d
(
tm
);

210 
	#pknum
 20

	)

211 
pk_t
 
pks
[
pknum
];

212 
	`mem£t
(
pks
, 0, (pks));

214 
i
;

217 
i
 = 0; i < 
pknum
; ++i) {

218 
pk_t
 *
pk
 = 
	`gë_pk
(&
pks
[
i
], 
fö
);

219 i‡(
pk
 =
NULL
)

220 
íd
;

221 
	`zwrôî_wrôe
(&
wrôî
, 
pk
->
buf
,Ök->
Àn
);

224 
outbyãs
 +
wrôî
.
zoff
;

227 
wc
 = 0;

228 
w
 = 0;

229 
wc
 < 
wrôî
.
zoff
) {

230 
w
 = 
	`ønd
()%8;

231 i‡(
w
 == 0)

232 
w
 = 1;

234 
w
 = w > (
wrôî
.
zoff
 - 
wc
) ? (writer.zoff - wc): w;

236 
	`zªadî_ªad
(&
ªadî
, 
wrôî
.
zbuf
 + 
wc
, 
w
);

237 
wc
 +
w
;

240 
	`as£π
(
wc
 =
wrôî
.
zoff
);

245 
	`as£π
(
ªadî
.
eob˙t
 =
pknum
);

247 
°¨t
 = 0;

248 
i
 = 0; i < 
pknum
; ++i) {

250 
	`as£π
(
pks
[
i
].
Àn
 =
ªadî
.
eob
[i] - 
°¨t
);

251 
	`as£π
(
	`memcmp
(
pks
[
i
].
buf
, 
ªadî
.bu‡+ 
°¨t
,Öks[i].
Àn
) == 0);

252 
°¨t
 = 
ªadî
.
eob
[
i
];

256 
	`zwrôî_˛ór
(&
wrôî
);

257 
	`zªadî_˛ór
(&
ªadî
);

258 
i
 = 0; i < 
pknum
; ++i) {

259 i‡(
pks
[
i
].
buf
 !
NULL
) {

260 
	`‰ì
(
pks
[
i
].
buf
);

265 
	`zwrôî_deöô
(&
wrôî
);

266 
	`zªadî_deöô
(&
ªadî
);

268 
íd
:

271 
	}
}

	@packages/z.h

2 #i‚de‡
_Z_H_


3 
	#_Z_H_


	)

5 
	~<°dlib.h
>

9 *
	mbuf
;

10 
	moff
;

11 
	mtŸÆ
;

13 *
	mzbuf
;

14 
	mzÀn
;

15 
	mzoff
;

16 
	mztŸÆ
;

18 
s_z°©e
 *
	munzù
;

20 *
	meob
;

21 
	meob˙t
;

22 
	meobtŸÆ
;

23 } 
	tzªadî_t
;

25 
zªadî_öô
(
zªadî_t
 *
ªadî
, 
bôs
);

26 
zªadî_deöô
(
zªadî_t
 *
ªadî
);

27 
zªadî_˛ór
(
zªadî_t
 *
ªadî
);

28 
zªadî_ªad
(
zªadî_t
 *
ªadî
, c⁄° *
zbuf
, 
zÀn
);

30 
zªadî_ouçut
(
zªadî_t
 *
ªadî
, 
c
);

31 
zªadî_eob
(
zªadî_t
 *
ªadî
);

35 *
	mzbuf
;

36 
	mzoff
;

37 
	mztŸÆ
;

38 
s_z°©e
 *
	mzù
;

39 } 
	tzwrôî_t
;

42 
zwrôî_öô
(
zwrôî_t
 *
wrôî
, 
bôs
);

43 
zwrôî_deöô
(
zwrôî_t
 *
wrôî
);

44 
zwrôî_˛ór
(
zwrôî_t
 *
wrôî
);

45 
zwrôî_wrôe
(
zwrôî_t
 *
wrôî
, c⁄° *
buf
, 
Àn
);

46 
zwrôî_fwrôe
(
zwrôî_t
 *
wrôî
, c⁄° *
±r
, 
sz
, 
nmemb
);

	@packages/zopen.c

38 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

39 
	gsccsid
[] = "@(#)zopen.c 8.1 (Berkeley) 6/27/93";

70 
	~<˘y≥.h
>

71 
	~<î∫o.h
>

72 
	~<sig«l.h
>

73 
	~<°dio.h
>

74 
	~<°dlib.h
>

75 
	~<°rög.h
>

78 
	~<as£π.h
>

79 
	~"z›í.h
"

84 
	#BITS
 12

	)

96 #i‡
BITS
 == 14

97 
	#HSIZE
 18041

	)

98 #ñi‡
BITS
 == 13

99 
	#HSIZE
 9029

	)

100 #ñi‡
BITS
 <= 12

101 
	#HSIZE
 5021

	)

108 
	tcode_öt
;

109 
	tcou¡_öt
;

112 
	tu_ch¨
;

113 
	tu_sh‹t
;

114 
	tu_öt
;

117 
u_ch¨
 
	tch¨_ty≥
;

119 
	#BIT_MASK
 0x1‡

	)

120 
	#BLOCK_MASK
 0x80

	)

126 
	#INIT_BITS
 9

	)

128 
	#MAXCODE
(
n_bôs
Ë((1 << (n_bôs)Ë- 1)

	)

131 
	mS_START
, 
	mS_MIDDLE
, 
	mS_STREAMING
, 
	mS_EOB
,

132 } 
	t°©e_t
;

134 
	ss_z°©e
 {

136 
	mzs_mode
;

142 
°©e_t
 
	mzs_°©e
;

143 
u_öt
 
	mzs_n_bôs
;

144 
u_öt
 
	mzs_maxbôs
;

145 
code_öt
 
	mzs_maxcode
;

146 
code_öt
 
	mzs_maxmaxcode
;

147 
cou¡_öt
 
	mzs_hèb
 [
HSIZE
];

148 
u_sh‹t
 
	mzs_codëab
 [
HSIZE
];

149 
code_öt
 
	mzs_hsize
;

150 
code_öt
 
	mzs_‰ì_ít
;

155 
	mzs_block_com¥ess
;

156 
	mzs_˛ór_Êg
;

157 
	mzs_øtio
;

158 
cou¡_öt
 
	mzs_checkpoöt
;

159 
u_öt
 
	mzs_off£t
;

160 
	mzs_ö_cou¡
;

161 
	mzs_byãs_out
;

162 
	mzs_out_cou¡
;

163 
ch¨_ty≥
 
	mzs_buf
[
BITS
];

166 
	mzs_fcode
;

167 
code_öt
 
	mzs_ít
;

168 
code_öt
 
	mzs_hsize_ªg
;

169 
	mzs_hshi·
;

170 
zwrôî_t
 *
	mwrôî
;

171 } 
	mw
;

173 
ch¨_ty≥
 *
	mzs_°ackp
;

174 
	mzs_föch¨
;

175 
code_öt
 
	mzs_code
, 
	mzs_ﬁdcode
, 
	mzs_öcode
;

176 
	mzs_roff£t
, 
	mzs_size
;

177 
ch¨_ty≥
 
	mzs_gbuf
[
BITS
];

178 
zªadî_t
 *
	mªadî
;

179 
	m√edsz
;

180 } 
	mr
;

181 } 
	mu
;

186 
	#zmode
 
zs
->
zs_mode


	)

187 
	#°©e
 
zs
->
zs_°©e


	)

188 
	#n_bôs
 
zs
->
zs_n_bôs


	)

189 
	#maxbôs
 
zs
->
zs_maxbôs


	)

190 
	#maxcode
 
zs
->
zs_maxcode


	)

191 
	#maxmaxcode
 
zs
->
zs_maxmaxcode


	)

192 
	#hèb
 
zs
->
zs_hèb


	)

193 
	#codëab
 
zs
->
zs_codëab


	)

194 
	#hsize
 
zs
->
zs_hsize


	)

195 
	#‰ì_ít
 
zs
->
zs_‰ì_ít


	)

196 
	#block_com¥ess
 
zs
->
zs_block_com¥ess


	)

197 
	#˛ór_Êg
 
zs
->
zs_˛ór_Êg


	)

198 
	#øtio
 
zs
->
zs_øtio


	)

199 
	#checkpoöt
 
zs
->
zs_checkpoöt


	)

200 
	#off£t
 
zs
->
zs_off£t


	)

201 
	#ö_cou¡
 
zs
->
zs_ö_cou¡


	)

202 
	#byãs_out
 
zs
->
zs_byãs_out


	)

203 
	#out_cou¡
 
zs
->
zs_out_cou¡


	)

204 
	#buf
 
zs
->
zs_buf


	)

205 
	#fcode
 
zs
->
u
.
w
.
zs_fcode


	)

206 
	#hsize_ªg
 
zs
->
u
.
w
.
zs_hsize_ªg


	)

207 
	#ít
 
zs
->
u
.
w
.
zs_ít


	)

208 
	#hshi·
 
zs
->
u
.
w
.
zs_hshi·


	)

209 
	#°ackp
 
zs
->
u
.
r
.
zs_°ackp


	)

210 
	#föch¨
 
zs
->
u
.
r
.
zs_föch¨


	)

211 
	#code
 
zs
->
u
.
r
.
zs_code


	)

212 
	#ﬁdcode
 
zs
->
u
.
r
.
zs_ﬁdcode


	)

213 
	#öcode
 
zs
->
u
.
r
.
zs_öcode


	)

214 
	#roff£t
 
zs
->
u
.
r
.
zs_roff£t


	)

215 
	#size
 
zs
->
u
.
r
.
zs_size


	)

216 
	#gbuf
 
zs
->
u
.
r
.
zs_gbuf


	)

217 
	#zªadî
 
zs
->
u
.
r
.
ªadî


	)

218 
	#zwrôî
 
zs
->
u
.
w
.
wrôî


	)

230 
	#hèbof
(
i
Ë
hèb
[i]

	)

231 
	#codëabof
(
i
Ë
codëab
[i]

	)

233 
	#èb_¥efixof
(
i
Ë
	`codëabof
(i)

	)

234 
	#èb_suffixof
(
i
Ë((
ch¨_ty≥
 *)(
hèb
))[i]

	)

235 
	#de_°ack
 ((
ch¨_ty≥
 *)&
	`èb_suffixof
(1 << 
BITS
))

	)

238 #i‚de‡
CTASSERT


239 
	#CTASSERT
(
x
Ë
	`_CTASSERT
(x, 
__LINE__
)

	)

240 
	#_CTASSERT
(
x
, 
y
Ë
	`__CTASSERT
(x, y)

	)

241 
	#__CTASSERT
(
x
, 
y
Ë
	t__as£π
 ## 
	ty
[(xË? 1 : -1]

	)

244 
	tCTASSERT
((
	tHSIZE
 * (
	tcou¡_öt
Ë- (1 << 
	tBITS
Ë* (
	tch¨_ty≥
)) >= 1024 * 12);

246 
	#CHECK_GAP
 10000

	)

257 
	#FIRST
 258

	)

258 
	#EOB
 257

	)

259 
	#CLEAR
 256

	)

262 
˛_block
(
s_z°©e
 *);

263 
˛_hash
(
s_z°©e
 *, 
cou¡_öt
);

264 
code_öt
 
gëcode
(
s_z°©e
 *);

265 
ouçut
(
s_z°©e
 *, 
code_öt
);

294 
	$zwrôe
(
s_z°©e
 *
zs
, c⁄° *
wbp
, 
num
)

296 
code_öt
 
i
;

297 
c
, 
di•
;

298 c⁄° 
u_ch¨
 *
bp
;

299 
cou¡
;

301 i‡(
num
 == 0)

305 
cou¡
 = 
num
;

306 
bp
 = (c⁄° 
u_ch¨
 *)
wbp
;

308 i‡(
°©e
 =
S_MIDDLE
)

309 
middÀ
;

310 
°©e
 = 
S_MIDDLE
;

312 
maxmaxcode
 = 1L << 
maxbôs
;

314 
off£t
 = 0;

315 
byãs_out
 = 3;

316 
out_cou¡
 = 0;

317 
˛ór_Êg
 = 0;

318 
øtio
 = 0;

319 
ö_cou¡
 = 1;

320 
checkpoöt
 = 
CHECK_GAP
;

322 
‰ì_ít
 = ((
block_com¥ess
Ë? 
FIRST
 : 256);

325 
maxcode
 = 
	`MAXCODE
(
n_bôs
 = 
BITS
);

332 
hshi·
 = 0;

333 
fcode
 = ()
hsize
; fcode < 65536L; fcode *= 2L)

334 
hshi·
++;

335 
hshi·
 = 8 - hshift;

337 
hsize_ªg
 = 
hsize
;

338 
	`˛_hash
(
zs
, (
cou¡_öt
)
hsize_ªg
);

340 
middÀ
:

341 
ít
 = *
bp
++;

342 --
cou¡
;

344 
i
 = 0; 
cou¡
--;) {

345 
c
 = *
bp
++;

346 
ö_cou¡
++;

347 
fcode
 = ()((()
c
 << 
maxbôs
Ë+ 
ít
);

348 
i
 = ((
c
 << 
hshi·
Ë^ 
ít
);

350 i‡(
	`hèbof
(
i
Ë=
fcode
) {

351 
ít
 = 
	`codëabof
(
i
);

353 } i‡(()
	`hèbof
(
i
) < 0)

354 
nom©ch
;

355 
di•
 = 
hsize_ªg
 - 
i
;

356 i‡(
i
 == 0)

357 
di•
 = 1;

358 
¥obe
: i‡((
i
 -
di•
) < 0)

359 
i
 +
hsize_ªg
;

361 i‡(
	`hèbof
(
i
Ë=
fcode
) {

362 
ít
 = 
	`codëabof
(
i
);

365 i‡(()
	`hèbof
(
i
) >= 0)

366 
¥obe
;

367 
nom©ch
: i‡(
	`ouçut
(
zs
, (
code_öt
Ë
ít
) == -1)

369 
out_cou¡
++;

370 
ít
 = 
c
;

371 i‡(
‰ì_ít
 < 
maxmaxcode
) {

372 
	`codëabof
(
i
Ë
‰ì_ít
++;

373 
	`hèbof
(
i
Ë
fcode
;

374 } i‡((
cou¡_öt
)
ö_cou¡
 >=

375 
checkpoöt
 && 
block_com¥ess
) {

376 i‡(
	`˛_block
(
zs
) == -1)

383 i‡(
	`ouçut
(
zs
, (
code_öt
Ë
ít
) == -1) {

386 
out_cou¡
++;

389 i‡(
	`ouçut
(
zs
, (
code_öt
Ë
EOB
) == -1) {

393 i‡(
	`ouçut
(
zs
, (
code_öt
) -1) == -1) {

400  (
num
);

401 
	}
}

404 
	$z˛o£
(
s_z°©e
 *
zs
)

408 
	}
}

427 
ch¨_ty≥
 
	glmask
[9] =

429 
ch¨_ty≥
 
	grmask
[9] =

433 
	$ouçut
(
s_z°©e
 *
zs
, 
code_öt
 
ocode
)

436 
r_off
;

437 
u_öt
 
bôs
;

438 
ch¨_ty≥
 *
bp
;

440 
r_off
 = 
off£t
;

441 
bôs
 = 
n_bôs
;

442 
bp
 = 
buf
;

443 i‡(
ocode
 >= 0) {

445 
bp
 +(
r_off
 >> 3);

446 
r_off
 &= 7;

451 *
bp
 = (*b∞& 
rmask
[
r_off
]Ë| ((
ocode
 <<Ñ_offË& 
lmask
[r_off]);

452 
bp
++;

453 
bôs
 -(8 - 
r_off
);

454 
ocode
 >>8 - 
r_off
;

456 i‡(
bôs
 >= 8) {

457 *
bp
++ = 
ocode
;

458 
ocode
 >>= 8;

459 
bôs
 -= 8;

462 i‡(
bôs
)

463 *
bp
 = 
ocode
;

464 
off£t
 +
n_bôs
;

465 i‡(
off£t
 =(
n_bôs
 << 3)) {

466 
bp
 = 
buf
;

467 
bôs
 = 
n_bôs
;

468 
byãs_out
 +
bôs
;

470 i‡(
	`zwrôî_fwrôe
(
zwrôî
, 
bp
, (), 
bôs
) != bits)

472 
bp
 +
bôs
;

473 
bôs
 = 0;

474 
off£t
 = 0;

481 i‡((
˛ór_Êg
 > 0)) {

496 i‡(
˛ór_Êg
) {

498 
˛ór_Êg
 = 0;

511 i‡(
off£t
 > 0) {

513 
off£t
 = (offset + 7) / 8;

514 i‡(
	`zwrôî_fwrôe
(
zwrôî
, 
buf
, 1, 
off£t
) != offset)

516 
byãs_out
 +
off£t
;

518 
off£t
 = 0;

521 
	}
}

531 
	$zªad
(
s_z°©e
 *
zs
)

546 
°©e
) {

547 
S_START
:

548 
°©e
 = 
S_EOB
;

550 
S_MIDDLE
:

551 
middÀ
;

552 
S_STREAMING
:

553 
°ªamög
;

554 
S_EOB
:

555 
°ªam°¨t
;

560 
maxcode
 = 
	`MAXCODE
(
n_bôs
 = 
BITS
);

561 
code
 = 255; code >= 0; code--) {

562 
	`èb_¥efixof
(
code
) = 0;

563 
	`èb_suffixof
(
code
Ë(
ch¨_ty≥
) code;

565 
‰ì_ít
 = 
block_com¥ess
 ? 
FIRST
 : 256;

566 
°ackp
 = 
de_°ack
;

569 
°ªam°¨t
:

570 
ﬁdcode
 = 
	`gëcode
(
zs
);

571 i‡(
ﬁdcode
 == -1) {

575 
	`as£π
(
ﬁdcode
 !
EOB
);

576 
	`as£π
(
ﬁdcode
 !
CLEAR
);

577 
°©e
 = 
S_STREAMING
;

580 i‡(
ﬁdcode
 < 256) {

581 
föch¨
 = 
ﬁdcode
;

586 
	`zªadî_ouçut
(
zªadî
, 
föch¨
);

588 
code_
 = 
ﬁdcode
;

589 
code_
 >= 256) {

590 *
°ackp
++ = 
	`èb_suffixof
(
code_
);

591 
code_
 = 
	`èb_¥efixof
(code_);

593 *
°ackp
++ = 
föch¨
 = 
	`èb_suffixof
(
code_
);

602 
	`zªadî_ouçut
(
zªadî
, *--
°ackp
);

603 } 
°ackp
 > 
de_°ack
);

607 
°ªamög
:

608 (
code
 = 
	`gëcode
(
zs
)) > -1) {

610 i‡(
code
 =
EOB
) {

611 
°©e
 = 
S_EOB
;

618 i‡((
code
 =
CLEAR
Ë&& 
block_com¥ess
) {

619 
code
 = 255; code >= 0; code--)

620 
	`èb_¥efixof
(
code
) = 0;

621 
˛ór_Êg
 = 1;

622 
‰ì_ít
 = 
FIRST
 - 1;

623 i‡((
code
 = 
	`gëcode
(
zs
)) == -1) {

627 
öcode
 = 
code
;

630 i‡(
code
 >
‰ì_ít
) {

631 *
°ackp
++ = 
föch¨
;

632 
code
 = 
ﬁdcode
;

636 
code
 >= 256) {

637 *
°ackp
++ = 
	`èb_suffixof
(
code
);

638 
code
 = 
	`èb_¥efixof
(code);

640 *
°ackp
++ = 
föch¨
 = 
	`èb_suffixof
(
code
);

643 
middÀ
: do {

653 
	`zªadî_ouçut
(
zªadî
, *--
°ackp
);

654 } 
°ackp
 > 
de_°ack
);

657 i‡((
code
 = 
‰ì_ít
Ë< 
maxmaxcode
) {

658 
	`èb_¥efixof
(
code
Ë(
u_sh‹t
Ë
ﬁdcode
;

659 
	`èb_suffixof
(
code
Ë
föch¨
;

660 
‰ì_ít
 = 
code
 + 1;

664 
ﬁdcode
 = 
öcode
;

671 
	}
}

680 
code_öt


681 
	$gëcode
(
s_z°©e
 *
zs
)

683 
code_öt
 
gcode
;

684 
r_off
, 
bôs
;

685 
ch¨_ty≥
 *
bp
;

687 
bp
 = 
gbuf
;

688 i‡(
˛ór_Êg
 > 0 || 
roff£t
 >
size
 || 
‰ì_ít
 > 
maxcode
) {

703 i‡(
˛ór_Êg
 > 0) {

705 
˛ór_Êg
 = 0;

719 
À·b
 = (
zªadî
->
zÀn
 - zªadî->
zoff
);

720 
À·bôs
 = 
À·b
*8;

721 
tbôs
 = 
À·bôs
 - (
roff£t
&7);

723 i‡–
tbôs
< 
n_bôs
) {

727 
bp
 = (
ch¨_ty≥
*)
zªadî
->
zbuf
;

731 
r_off
 = 
roff£t
;

732 
bôs
 = 
n_bôs
;

735 
bp
 +(
r_off
 >> 3);

736 
r_off
 &= 7;

739 
gcode
 = (*
bp
++ >> 
r_off
);

740 
bôs
 -(8 - 
r_off
);

741 
r_off
 = 8 -Ñ_off;

744 i‡(
bôs
 >= 8) {

745 
gcode
 |*
bp
++ << 
r_off
;

746 
r_off
 += 8;

747 
bôs
 -= 8;

751 
gcode
 |(*
bp
 & 
rmask
[
bôs
]Ë<< 
r_off
;

752 
roff£t
 +
n_bôs
;

756 
zªadî
->
zoff
 = 
roff£t
/8;

757 i‡(
gcode
 =
EOB
) {

758 i‡(
roff£t
 & 7) {

759 
zªadî
->
zoff
++;

761 
roff£t
 = 8*((roffset + 7)/8);

765  (
gcode
);

766 
	}
}

769 
	$˛_block
(
s_z°©e
 *
zs
)

771 
øt
;

773 
checkpoöt
 = 
ö_cou¡
 + 
CHECK_GAP
;

775 i‡(
ö_cou¡
 > 0x007fffff) {

776 
øt
 = 
byãs_out
 >> 8;

777 i‡(
øt
 == 0)

778 
øt
 = 0x7fffffff;

780 
øt
 = 
ö_cou¡
 /Ñat;

782 
øt
 = (
ö_cou¡
 << 8Ë/ 
byãs_out
;

783 i‡(
øt
 > 
øtio
)

784 
øtio
 = 
øt
;

786 
øtio
 = 0;

787 
	`˛_hash
(
zs
, (
cou¡_öt
Ë
hsize
);

788 
‰ì_ít
 = 
FIRST
;

789 
˛ór_Êg
 = 1;

790 i‡(
	`ouçut
(
zs
, (
code_öt
Ë
CLEAR
) == -1)

794 
	}
}

797 
	$˛_hash
(
s_z°©e
 *
zs
, 
cou¡_öt
 
˛_hsize
)

799 
cou¡_öt
 *
hèb_p
;

800 
i
, 
m1
;

802 
m1
 = -1;

803 
hèb_p
 = 
hèb
 + 
˛_hsize
;

804 
i
 = 
˛_hsize
 - 16;

806 *(
hèb_p
 - 16Ë
m1
;

807 *(
hèb_p
 - 15Ë
m1
;

808 *(
hèb_p
 - 14Ë
m1
;

809 *(
hèb_p
 - 13Ë
m1
;

810 *(
hèb_p
 - 12Ë
m1
;

811 *(
hèb_p
 - 11Ë
m1
;

812 *(
hèb_p
 - 10Ë
m1
;

813 *(
hèb_p
 - 9Ë
m1
;

814 *(
hèb_p
 - 8Ë
m1
;

815 *(
hèb_p
 - 7Ë
m1
;

816 *(
hèb_p
 - 6Ë
m1
;

817 *(
hèb_p
 - 5Ë
m1
;

818 *(
hèb_p
 - 4Ë
m1
;

819 *(
hèb_p
 - 3Ë
m1
;

820 *(
hèb_p
 - 2Ë
m1
;

821 *(
hèb_p
 - 1Ë
m1
;

822 
hèb_p
 -= 16;

823 } (
i
 -= 16) >= 0);

824 
i
 += 16; i > 0; i--)

825 *--
hèb_p
 = 
m1
;

826 
	}
}

828 
s_z°©e
 *

829 
	$z›í
(c⁄° *
mode
, 
bôs
, *
z
)

831 
s_z°©e
 *
zs
;

833 i‡((
mode
[0] != 'r' && mode[0] != 'w') || mode[1] != '\0' ||

834 
bôs
 < 0 || bô†> 
BITS
) {

835  (
NULL
);

838 i‡((
zs
 = (
s_z°©e
*)
	`ˇŒoc
(1, (s_z°©e))Ë=
NULL
)

839  (
NULL
);

841 
maxbôs
 = 
bôs
 ? bô†: 
BITS
;

842 
maxmaxcode
 = 1L << 
maxbôs
;

843 
hsize
 = 
HSIZE
;

844 
‰ì_ít
 = 0;

845 
block_com¥ess
 = 
BLOCK_MASK
;

846 
˛ór_Êg
 = 0;

847 
øtio
 = 0;

848 
checkpoöt
 = 
CHECK_GAP
;

849 
ö_cou¡
 = 1;

850 
out_cou¡
 = 0;

851 
°©e
 = 
S_START
;

852 
roff£t
 = 0;

853 
size
 = 0;

856 *
mode
) {

858 
zmode
 = 'r';

859 
zªadî
 = (
zªadî_t
*)
z
;

860 
zs
->
u
.
r
.
√edsz
 = 0;

863 
zmode
 = 'w';

864 
zwrôî
 = (
zwrôî_t
*)
z
;

867  
zs
;

868 
	}
}

870 
	$ª£åoff£t
(
s_z°©e
 *
zs
)

872 
roff£t
 = (roffset & 7);

873 
	}
}

	@packages/zopen.h

29 #i‚de‡
_ZOPEN_H_


30 
	#_ZOPEN_H_


	)

32 
	~"z.h
"

34 
	gs_z°©e
;

36 
s_z°©e
 * 
z›í
(c⁄° *
mode
, 
bôs
, *
z
);

37 
z˛o£
(
s_z°©e
 *);

38 
zwrôe
(
s_z°©e
 *, const *, );

40 
zªad
(
s_z°©e
 *);

	@src/array.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"comm.h
"

5 
	#USE_POSIX_REGEXP


	)

6 #ifde‡
USE_POSIX_REGEXP


7 
	~<sys/ty≥s.h
>

8 
	~<ªgex.h
>

10 
	~"ªgexp.h
"

13 
	~"backíd.h
"

14 
	~"qs‹t.h
"

15 
	~"¨øy.h
"

16 
	~"md.h
"

17 
	~"dúty.h
"

25 #ifde‡
ARRAY_STATS


26 
	gnum_¨øys
;

27 
	gtŸÆ_¨øy_size
;

30 
INLINE_STATIC
 
buûtö_s‹t_¨øy_cmp_fwd
(
svÆue_t
 *, svalue_t*);

31 
INLINE_STATIC
 
buûtö_s‹t_¨øy_cmp_ªv
(
svÆue_t
 *, svalue_t*);

32 
INLINE_STATIC
 
s‹t_¨øy_cmp
(
svÆue_t
 *, svalue_t*);

33 
INLINE_STATIC
 
Æi°_cmp
(
svÆue_t
 *, svalue_t*);

40 
¨øy_t
 
	gthe_nuŒ_¨øy
 =

44 #ifde‡
DEBUG


59 
INLINE_STATIC
 
¨øy_t
 *
	$ALLOC_ARRAY
(
√Àm
)

61 
¨øy_t
 * 
tmp
 = (¨øy_à*)
	`DXALLOC
( (¨øy_tË+ (
svÆue_t
Ë* (
√Àm
 - 1), 
TAG_ARRAY
, "ALLOC_ARRAY");

62 
tmp
->
dúty_mng
 = 
NULL
;

63  
tmp
;

64 
	}
}

66 
INLINE_STATIC
 
¨øy_t
 *
	$RESIZE_ARRAY
(
¨øy_t
 *
vec
, 
√Àm
)

68 
¨øy_t
 *
tmp
 = (¨øy_à*)
	`DREALLOC
(
vec
,  (¨øy_tË+ (
svÆue_t
Ë* (
√Àm
 - 1), 
TAG_ARRAY
, "RESIZE_ARRAY");

69 
tmp
->
dúty_mng
 = 
NULL
;

70  
tmp
;

71 
	}
}

76 
¨øy_t
 *
	$Æloˇã_¨øy
(
n
)

78 
¨øy_t
 *
p
;

80 i‡(
n
 < 0 ||Ç > 
max_¨øy_size
)

84 
	`îr‹
("array size is Illegal.\n");

86 i‡(
n
 == 0)

88  &
the_nuŒ_¨øy
;

90 #ifde‡
ARRAY_STATS


91 
num_¨øys
++;

92 
tŸÆ_¨øy_size
 +(
¨øy_t
Ë+ (
svÆue_t
Ë*(
n
 - 1);

94 
p
 = 
	`ALLOC_ARRAY
(
n
);

95 
p
->
ªf
 = 1;

96 
p
->
size
 = 
n
;

97 
p
->
dúty_mng
 = 
NULL
;

99 
n
--)

101 
p
->
ôem
[
n
] = 
c⁄°0
;

103  
p
;

104 
	}
}

110 
¨øy_t
 *
	$Æloˇã_em±y_¨øy
(
n
)

112 
¨øy_t
 *
p
;

114 i‡(
n
 < 0 ||Ç > 
max_¨øy_size
)

116 
	`îr‹
("Array size is illegal.\n");

118 i‡(!
n
)

120  &
the_nuŒ_¨øy
;

122 #ifde‡
ARRAY_STATS


123 
num_¨øys
++;

124 
tŸÆ_¨øy_size
 +(
¨øy_t
Ë+ (
svÆue_t
)*(
n
 - 1);

126 
p
 = 
	`ALLOC_ARRAY
(
n
);

127 
p
->
ªf
 = 1;

128 
p
->
size
 = 
n
;

129 
p
->
dúty_mng
 = 
NULL
;

131  
p
;

132 
	}
}

138 
	$dóŒoc_¨øy
(
¨øy_t
 *
p
)

140 
i
;

142 i‡(
p
 =&
the_nuŒ_¨øy
)

147 
i
 = 
p
->
size
; i--;)

149 
	`‰ì_svÆue
(&
p
->
ôem
[
i
], "free_array");

152 #ifde‡
ARRAY_STATS


153 
num_¨øys
--;

154 
tŸÆ_¨øy_size
 -(
¨øy_t
Ë+ (
svÆue_t
Ë*(
p
->
size
 - 1);

158 
	`‰ì_dúty_¨r
(
p
);

160 
	`FREE
–(*)
p
);

161 
	}
}

167 
	$‰ì_¨øy
(
¨øy_t
 *
p
)

169 i‡(--(
p
->
ªf
) > 0)

175 
	`dóŒoc_¨øy
(
p
);

176 
	}
}

182 
	$‰ì_em±y_¨øy
(
¨øy_t
 *
p
)

184 i‡–(--(
p
->
ªf
Ë> 0Ë|| (∞=&
the_nuŒ_¨øy
) )

188 #ifde‡
ARRAY_STATS


189 
num_¨øys
--;

190 
tŸÆ_¨øy_size
 -(
¨øy_t
Ë+ (
svÆue_t
Ë*(
p
->
size
 - 1);

192 
	`FREE
–(*)
p
);

193 
	}
}

199 
¨øy_t
 *
	$ex∂ode_°rög
(*
°r
, 
¶í
, *
dñ
, 
Àn
)

201 *
p
, *
beg
, *
œ°dñ
 = (*)
NULL
;

202 
num
, 
j
, 
limô
;

203 
¨øy_t
 *
ªt
;

204 *
buff
, *
tmp
;

205 
sz
;

207 i‡(!
¶í
)

209  &
the_nuŒ_¨øy
;

213 i‡(
Àn
 == 0)

215 
sz
 = 1;

217 i‡(
¶í
 > 
max_¨øy_size
)

219 
¶í
 = 
max_¨øy_size
;

221 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
¶í
);

222 
j
 = 0; j < 
¶í
; j++)

224 
ªt
->
ôem
[
j
].
ty≥
 = 
T_STRING
;

225 
ªt
->
ôem
[
j
].
subty≥
 = 
STRING_MALLOC
;

226 
ªt
->
ôem
[
j
].
u
.
°rög
 = 
tmp
 = 
	`√w_°rög
(1, "explode_string:Åmp");

227 
tmp
[0] = 
°r
[
j
];

228 
tmp
[1] = '\0';

230  
ªt
;

232 i‡(
Àn
 == 1)

234 
dñimëî
;

236 
dñimëî
 = *
dñ
;

238 #i‚de‡
REVERSIBLE_EXPLODE_STRING


242 *
°r
 =
dñimëî
)

244 
°r
++;

245 
¶í
--;

246 i‡(
°r
[0] == '\0')

248  &
the_nuŒ_¨øy
;

250 #ifde‡
SANE_EXPLODE_STRING


258 
p
 = 
°r
, 
num
 = 0; *p;)

260 i‡(*
p
 =
dñimëî
)

262 
num
++;

263 
œ°dñ
 = 
p
;

265 
p
++;

272 
limô
 = 
max_¨øy_size
;

273 #ifde‡
REVERSIBLE_EXPLODE_STRING


274 
num
++;

275 
limô
--;

277 i‡(
œ°dñ
 !(
°r
 + 
¶í
 - 1) )

279 
num
++;

280 
limô
--;

283 i‡(
num
 > 
max_¨øy_size
)

285 
num
 = 
max_¨øy_size
;

287 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
num
);

288 
p
 = 
°r
, 
beg
 = så, 
num
 = 0; *∞&& (num < 
limô
);)

290 i‡(*
p
 =
dñimëî
)

295 
	`DEBUG_CHECK
(
num
 >
ªt
->
size
, "Index out of bounds !\n");

296 
sz
 = 
p
 - 
beg
;

297 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

298 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

299 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
buff
 = 
	`√w_°rög
(
p
 - 
beg
, "explode_string: buff");

301 
	`°∫˝y
(
buff
, 
beg
, 
p
 - beg);

302 
buff
[
p
 - 
beg
] = '\0';

303 
num
++;

304 
beg
 = ++
p
;

308 
p
++;

312 #ifde‡
REVERSIBLE_EXPLODE_STRING


313 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

314 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

315 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
	`°rög_c›y
(
beg
, "explode_string:Üast,Üen == 1");

318 i‡(*
beg
 != '\0')

320 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

321 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

322 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
	`°rög_c›y
(
beg
, "explode_string:Üast,Üen == 1");

325  
ªt
;

327 #i‚de‡
REVERSIBLE_EXPLODE_STRING


331 
	`°∫cmp
(
°r
, 
dñ
, 
Àn
) == 0)

333 
°r
 +
Àn
;

334 
¶í
 -
Àn
;

335 i‡(
°r
[0] == '\0')

337  &
the_nuŒ_¨øy
;

339 #ifde‡
SANE_EXPLODE_STRING


348 
p
 = 
°r
, 
num
 = 0; *p;)

350 i‡(
	`°∫cmp
(
p
, 
dñ
, 
Àn
) == 0)

352 
num
++;

353 
œ°dñ
 = 
p
;

354 
p
 +
Àn
;

358 
p
++;

366 #ifde‡
REVERSIBLE_EXPLODE_STRING


367 
num
++;

369 i‡–(
¶í
 <
Àn
Ë|| (
œ°dñ
 !(
°r
 + slen -Üen) ) )

371 
num
++;

374 i‡(
num
 > 
max_¨øy_size
)

376 
num
 = 
max_¨øy_size
;

378 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
num
);

379 
limô
 = 
max_¨øy_size
 - 1;

380 
p
 = 
°r
, 
beg
 = så, 
num
 = 0; *∞&& (num < 
limô
);)

382 i‡(
	`°∫cmp
(
p
, 
dñ
, 
Àn
) == 0)

384 i‡(
num
 >
ªt
->
size
)

388 
	`Áèl
("InÉxplode index is out of bounds !\n");

391 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

392 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

393 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
buff
 = 
	`√w_°rög
(
p
 - 
beg
, "explode_string: buff");

395 
	`°∫˝y
(
buff
, 
beg
, 
p
 - beg);

396 
buff
[
p
 - 
beg
] = '\0';

397 
num
++;

398 
beg
 = 
p
 + 
Àn
;

399 
p
 = 
beg
;

403 
p
++;

408 #ifde‡
REVERSIBLE_EXPLODE_STRING


409 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

410 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

411 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
	`°rög_c›y
(
beg
, "explode_string:Üast,Üen != 1");

413 i‡(*
beg
 != '\0')

415 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

416 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

417 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
	`°rög_c›y
(
beg
, "explode_string:Üast,Üen != 1");

420  
ªt
;

421 
	}
}

427 *
	$im∂ode_°rög
(
¨øy_t
 *
¨r
, *
dñ
, 
dñ_Àn
)

429 
size
, 
i
, 
num
;

430 *
p
, *
q
;

431 
svÆue_t
 *
sv
 = 
¨r
->
ôem
;

433 
i
 = 
¨r
->
size
, sizê0, 
num
 = 0; i--;)

435 i‡(
sv
[
i
].
ty≥
 =
T_STRING
)

437 
size
 +
	`SVALUE_STRLEN
(&
sv
[
i
]);

438 
num
++;

441 i‡(
num
 == 0)

443  
	`°rög_c›y
("", "implode_string");

446 
p
 = 
	`√w_°rög
(
size
 + (
num
 - 1Ë*
dñ_Àn
, "implode_string:Ö");

447 
q
 = 
p
;

448 
i
 = 0, 
num
 = 0; i < 
¨r
->
size
; i++)

450 i‡(
sv
[
i
].
ty≥
 =
T_STRING
)

452 i‡(
num
)

454 
	`°∫˝y
(
p
, 
dñ
, 
dñ_Àn
);

455 
p
 +
dñ_Àn
;

457 
size
 = 
	`SVALUE_STRLEN
(&
sv
[
i
]);

458 
	`°∫˝y
(
p
, 
sv
[
i
].
u
.
°rög
, 
size
);

459 
p
 +
size
;

460 
num
++;

463 *
p
 = 0;

464  
q
;

465 
	}
}

471 
	$im∂ode_¨øy
(
fu≈å_t
 *
Â
, 
¨øy_t
 *
¨r
, 
svÆue_t
 *
de°
, 
fú°_⁄_°ack
)

473 
i
 = 0, 
n
;

474 
svÆue_t
 *
v
;

476 i‡(
fú°_⁄_°ack
)

478 i‡(!(
n
 = 
¨r
->
size
) )

480 *
de°
 = *
•
--;

486 i‡(!(
n
 = 
¨r
->
size
) )

488 *
de°
 = 
c⁄°0
;

491 i‡(
n
 == 1)

493 
	`assign_svÆue_no_‰ì
(
de°
, &
¨r
->
ôem
[0]);

498 i‡(!
fú°_⁄_°ack
)

500 
	`push_svÆue
(&
¨r
->
ôem
[
i
++]);

505 
	`push_svÆue
(&
¨r
->
ôem
[
i
++]);

506 
v
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
Â
, 2);

507 i‡(!
v
)

509 *
de°
 = 
c⁄°0
;

512 i‡(
i
 < 
n
)

514 
	`push_svÆue
(
v
);

521 
	`assign_svÆue_no_‰ì
(
de°
, 
v
);

522 
	}
}

528 
¨øy_t
 *
	$¶i˚_¨øy
(
¨øy_t
 *
p
, 
‰om
, 
to
)

530 
˙t
;

531 
svÆue_t
 *
sv1
, *
sv2
;

533 i‡(
‰om
 < 0)

535 
‰om
 = 0;

537 i‡(
to
 >
p
->
size
)

539 
to
 = 
p
->
size
 - 1;

541 i‡(
‰om
 > 
to
)

543 
	`‰ì_¨øy
(
p
);

544  &
the_nuŒ_¨øy
;

547 i‡(!(--
p
->
ªf
) )

549 #ifde‡
ARRAY_STATS


550 
tŸÆ_¨øy_size
 +(
to
 - 
‰om
 + 1-
p
->
size
Ë*(
svÆue_t
);

552 i‡(
‰om
)

554 
sv1
 = 
p
->
ôem
 + 
‰om
;

555 
˙t
 = 
‰om
;

556 
˙t
--)

558 
	`‰ì_svÆue
(--
sv1
, "slice_array:2");

560 
˙t
 = 
to
 - 
‰om
 + 1;

561 
sv1
 = 
p
->
ôem
;

562 
sv2
 = 
p
->
ôem
 + 
‰om
;

563 
˙t
--)

565 *
sv1
++ = *
sv2
++;

570 
sv2
 = 
p
->
ôem
 + 
to
 + 1;

572 
˙t
 = (
p
->
size
 - 1Ë- 
to
;

573 
˙t
--)

575 
	`‰ì_svÆue
(
sv2
++, "slice_array:3");

577 
p
 = 
	`RESIZE_ARRAY
’, 
to
 - 
‰om
 + 1);

578 
p
->
size
 = 
to
 - 
‰om
 + 1;

579 
p
->
ªf
 = 1;

580  
p
;

584 
¨øy_t
 *
d
;

586 
d
 = 
	`Æloˇã_em±y_¨øy
(
to
 - 
‰om
 + 1);

587 
sv1
 = 
d
->
ôem
 - 
‰om
;

588 
sv2
 = 
p
->
ôem
;

589 
˙t
 = 
‰om
; c¡ <
to
; cnt++)

591 
	`assign_svÆue_no_‰ì
(
sv1
 + 
˙t
, 
sv2
 + cnt);

593  
d
;

595 
	}
}

600 
¨øy_t
 *
	$c›y_¨øy
(
¨øy_t
 *
p
)

602 
¨øy_t
 *
d
;

603 
n
;

604 
svÆue_t
 *
sv1
 = 
p
->
ôem
, *
sv2
;

606 
d
 = 
	`Æloˇã_em±y_¨øy
(
n
 = 
p
->
size
);

607 
sv2
 = 
d
->
ôem
;

608 
n
--)

610 
	`assign_svÆue_no_‰ì
(
sv2
 + 
n
, 
sv1
 +Ç);

612  
d
;

613 
	}
}

622 #ifde‡
F_FILTER


623 
	$fûãr_¨øy
(
svÆue_t
 *
¨g
, 
num_¨g
)

625 
¨øy_t
 *
vec
 = 
¨g
->
u
.
¨r
, *
r
;

626 
size
;

628 i‡–(
size
 = 
vec
->size) < 1)

630 
	`p›_n_ñems
(
num_¨g
 - 1);

635 *
Êags
;

636 
svÆue_t
 *
v
;

637 
ªs
 = 0, 
˙t
;

638 
fun˘i⁄_to_ˇŒ_t
 
·c
;

640 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_FILTER
);

642 
Êags
 = 
	`√w_°rög
(
size
, "TEMP: filter: flags");

643 
	`push_mÆlo˚d_°rög
(
Êags
);

645 
˙t
 = 0; c¡ < 
size
; cnt++)

647 
	`push_svÆue
(
vec
->
ôem
 + 
˙t
);

648 
v
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 1);

649 i‡(!
	`IS_ZERO
(
v
) )

651 
Êags
[
˙t
] = 1;

652 
ªs
++;

656 
Êags
[
˙t
] = 0;

659 
r
 = 
	`Æloˇã_em±y_¨øy
(
ªs
);

660 i‡(
ªs
)

662 
˙t
--)

664 i‡(
Êags
[
˙t
])

666 
	`assign_svÆue_no_‰ì
(&
r
->
ôem
[--
ªs
], 
vec
->ôem + 
˙t
);

671 
	`FREE_MSTR
(
Êags
);

672 
•
--;

673 
	`p›_n_ñems
(
num_¨g
 - 1);

674 
	`‰ì_¨øy
(
vec
);

675 
•
->
u
.
¨r
 = 
r
;

677 
	}
}

704 
	$ßmevÆ
(
svÆue_t
 *
¨g1
, svÆue_à*
¨g2
)

708 
	`DEBUG_CHECK
(!
¨g1
 || !
¨g2
, "error:NullÖointerÖassedÅo sameval.\n");

710 
¨g1
->
ty≥
 | 
¨g2
->type)

712 
T_NUMBER
:

713  
¨g1
->
u
.
numbî
 =
¨g2
->u.number;

714 
T_ARRAY
:

715 
T_CLASS
:

716  
¨g1
->
u
.
¨r
 =
¨g2
->u.arr;

717 
T_STRING
:

718 i‡(
	`SVALUE_STRLEN_DIFFERS
(
¨g1
, 
¨g2
) )

722  !
	`°rcmp
(
¨g1
->
u
.
°rög
, 
¨g2
->u.string);

723 
T_OBJECT
:

724  
¨g1
->
u
.
ob
 =
¨g2
->u.ob;

725 
T_MAPPING
:

726  
¨g1
->
u
.
m≠
 =
¨g2
->u.map;

727 
T_FUNCTION
:

728  
¨g1
->
u
.
Â
 =
¨g2
->u.fp;

729 
T_REAL
:

730  
¨g1
->
u
.
ªÆ
 =
¨g2
->u.real;

731 
T_BUFFER
:

732  
¨g1
->
u
.
buf
 =
¨g2
->u.buf;

735 
	}
}

741 #ifde‡
F_UNIQUE_ARRAY


743 
	sunique_s


745 
svÆue_t
 
	mm¨k
;

746 
	mcou¡
;

747 
unique_s
 *
	m√xt
;

748 *
	mödi˚s
;

749 } 
	tunique_t
;

751 
	sunique_li°_s


753 
unique_t
 *
	mhód
;

754 
unique_li°_s
 *
	m√xt
;

755 } 
	tunique_li°_t
;

757 
unique_li°_t
 *
	gg_u_li°
 = 0;

759 
	$unique_¨øy_îr‹_h™dÀr
()

761 
unique_li°_t
 *
u∆i°
 = 
g_u_li°
;

762 
unique_t
 *
u±r
 = 
u∆i°
->
hód
, *
≈å
;

764 
g_u_li°
 = g_u_li°->
√xt
;

765 
u±r
)

767 
≈å
 = 
u±r
->
√xt
;

768 
	`FREE
–(*)
u±r
->
ödi˚s
);

769 
	`‰ì_svÆue
(&
u±r
->
m¨k
, "unique_array_error_handler");

770 
	`FREE
–(*)
u±r
);

771 
u±r
 = 
≈å
;

773 
	`FREE
–(*)
u∆i°
);

774 
	}
}

776 
	$f_unique_¨øy
()

778 
¨øy_t
 *
v
, *
ªt
;

779 
size
, 
i
, 
numkeys
 = 0, *
öd
, 
num_¨g
 = 
°_num_¨g
;

780 
svÆue_t
 *
skùvÆ
, *
sv
, *
svp
;

781 
unique_li°_t
 *
u∆i°
;

782 
unique_t
 **
hód
, *
u±r
, *
≈å
;

783 
fu≈å_t
 *
Â
 = 0;

784 *
func
;

786 
size
 = (
v
 = (
•
 - 
num_¨g
 + 1)->
u
.
¨r
)->size;

787 i‡(!
size
)

789 i‡(
num_¨g
 == 3)

791 
	`‰ì_svÆue
(
•
--, "f_unique_array");

793 
	`‰ì_svÆue
(
•
--, "f_unique_array");

797 i‡(
num_¨g
 == 3)

799 
skùvÆ
 = 
•
;

800 i‡–(
•
 - 1)->
ty≥
 =
T_FUNCTION
)

802 
Â
 = (
•
 - 1)->
u
.fp;

806 
func
 = (
•
 - 1)->
u
.
°rög
;

811 
skùvÆ
 = &
c⁄°0
;

812 i‡(
•
->
ty≥
 =
T_FUNCTION
)

814 
Â
 = 
•
->
u
.fp;

818 
func
 = 
•
->
u
.
°rög
;

822 
u∆i°
 = 
	`ALLOCATE
(
unique_li°_t
, 
TAG_TEMPORARY
, "f_unique_array:1");

823 
u∆i°
->
√xt
 = 
g_u_li°
;

824 
u∆i°
->
hód
 = 0;

825 
hód
 = &
u∆i°
->head;

826 
g_u_li°
 = 
u∆i°
;

828 (++
•
)->
ty≥
 = 
T_ERROR_HANDLER
;

829 
•
->
u
.
îr‹_h™dÀr
 = 
unique_¨øy_îr‹_h™dÀr
;

831 
i
 = 0; i < 
size
; i++)

833 i‡(
Â
)

835 
	`push_svÆue
(
v
->
ôem
 + 
i
);

836 
sv
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
Â
, 1);

838 i‡–(
v
->
ôem
 + 
i
)->
ty≥
 =
T_OBJECT
)

840 
sv
 = 
	`≠∂y
(
func
, (
v
->
ôem
 + 
i
)->
u
.
ob
, 0, 
ORIGIN_EFUN
);

844 
sv
 = 0;

847 i‡(
sv
 && !
	`ßmevÆ
(sv, 
skùvÆ
) )

849 
u±r
 = *
hód
;

850 
u±r
)

852 i‡(
	`ßmevÆ
(
sv
, &
u±r
->
m¨k
) )

854 
u±r
->
ödi˚s
 = 
	`RESIZE
(u±r->ödi˚s, u±r->
cou¡
 + 1, , 
TAG_TEMPORARY
, "f_unique_array:2");

855 
u±r
->
ödi˚s
[u±r->
cou¡
++] = 
i
;

858 
u±r
 = u±r->
√xt
;

860 i‡(!
u±r
)

862 
numkeys
++;

863 
u±r
 = 
	`ALLOCATE
(
unique_t
, 
TAG_TEMPORARY
, "f_unique_array:3");

864 
u±r
->
ödi˚s
 = 
	`ALLOCATE
(, 
TAG_TEMPORARY
, "f_unique_array:4");

865 
u±r
->
cou¡
 = 1;

866 
u±r
->
ödi˚s
[0] = 
i
;

867 
u±r
->
√xt
 = *
hód
;

868 
	`assign_svÆue_no_‰ì
(&
u±r
->
m¨k
, 
sv
);

869 *
hód
 = 
u±r
;

874 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
numkeys
);

875 
u±r
 = *
hód
;

876 
svp
 = 
v
->
ôem
;

877 
numkeys
--)

879 
≈å
 = 
u±r
->
√xt
;

880 (
sv
 = 
ªt
->
ôem
 + 
numkeys
)->
ty≥
 = 
T_ARRAY
;

881 
sv
->
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(
i
 = 
u±r
->
cou¡
);

882 
skùvÆ
 = 
sv
->
u
.
¨r
->
ôem
 + 
i
;

883 
öd
 = 
u±r
->
ödi˚s
;

884 
i
--)

886 
	`assign_svÆue_no_‰ì
(--
skùvÆ
, 
svp
 + 
öd
[
i
]);

888 
	`FREE
–(*)
öd
);

889 
	`‰ì_svÆue
(&
u±r
->
m¨k
, "f_unique_array");

890 
	`FREE
–(*)
u±r
);

891 
u±r
 = 
≈å
;

894 
u∆i°
 = 
g_u_li°
->
√xt
;

895 
	`FREE
–(*)
g_u_li°
);

896 
g_u_li°
 = 
u∆i°
;

897 
•
--;

898 
	`p›_n_ñems
(
num_¨g
 - 1);

899 
	`‰ì_¨øy
(
v
);

900 
•
->
u
.
¨r
 = 
ªt
;

901 
	}
}

911 
¨øy_t
 *
	$add_¨øy
(
¨øy_t
 *
p
,áºay_à*
r
)

913 
˙t
, 
ªs
;

914 
¨øy_t
 *
d
;

920 i‡(
p
->
size
 == 0)

922 
p
->
ªf
--;

923  
r
->
ªf
 > 1 ? (r->ªf--, 
	`c›y_¨øy
(r) ):Ñ;

925 i‡(
r
->
size
 == 0)

927 
r
->
ªf
--;

928  
p
->
ªf
 > 1 ? (p->ªf--, 
	`c›y_¨øy
(p) ):Ö;

931 
ªs
 = 
p
->
size
 + 
r
->size;

932 i‡(
ªs
 < 0 ||Ñe†> 
max_¨øy_size
)

936 
	`îr‹
("result ofárrayáddition isÅoo greate.\n");

940 i‡–(
p
 =
r
Ë&& (p->
ªf
 == 2) )

942 
d
 = 
	`RESIZE_ARRAY
(
p
, 
ªs
);

943 i‡(!
d
)

947 
	`Áèl
("Out Of Memory.\n");

950 
˙t
 = 
d
->
size
; cnt--;)

952 
	`assign_svÆue_no_‰ì
(&
d
->
ôem
[--
ªs
], &d->ôem[
˙t
]);

954 #ifde‡
ARRAY_STATS


955 
tŸÆ_¨øy_size
 +(
svÆue_t
)*(
d
->
size
);

957 
d
->
ªf
 = 1;

958 
d
->
size
 <<= 1;

960  
d
;

964 i‡(
p
->
ªf
 == 1)

970 
d
 = 
	`RESIZE_ARRAY
(
p
, 
ªs
);

971 i‡(!
d
)

974 
	`Áèl
("Out Of Memory.\n");

977 #ifde‡
ARRAY_STATS


978 
tŸÆ_¨øy_size
 +(
svÆue_t
)*(
r
->
size
);

981 
d
->
size
 = 
ªs
;

986 
d
 = 
	`Æloˇã_em±y_¨øy
(
ªs
);

988 
˙t
 = 
p
->
size
; cnt--;)

990 
	`assign_svÆue_no_‰ì
(&
d
->
ôem
[
˙t
], &
p
->item[cnt]);

992 
p
->
ªf
--;

996 i‡(
r
->
ªf
 == 1)

998 
˙t
 = 
r
->
size
; cnt--;)

1000 
d
->
ôem
[--
ªs
] = 
r
->ôem[
˙t
];

1002 #ifde‡
ARRAY_STATS


1003 
num_¨øys
--;

1004 
tŸÆ_¨øy_size
 -(
¨øy_t
Ë+ (
svÆue_t
)*(
r
->
size
 - 1);

1006 
	`FREE
–(*)
r
);

1010 
˙t
 = 
r
->
size
; cnt--;)

1012 
	`assign_svÆue_no_‰ì
(&
d
->
ôem
[--
ªs
], &
r
->ôem[
˙t
]);

1014 
r
->
ªf
--;

1017  
d
;

1018 
	}
}

1023 #ifde‡
F_MAP


1024 
	$m≠_¨øy
(
svÆue_t
 *
¨g
, 
num_¨g
)

1026 
¨øy_t
 *
¨r
 = 
¨g
->
u
.arr;

1027 
¨øy_t
 *
r
;

1028 
size
;

1030 i‡–(
size
 = 
¨r
->size) < 1)

1032 
r
 = &
the_nuŒ_¨øy
;

1036 
fun˘i⁄_to_ˇŒ_t
 
·c
;

1037 
˙t
;

1038 
svÆue_t
 *
v
;

1040 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_MAP
);

1042 
r
 = 
	`Æloˇã_¨øy
(
size
);

1044 (++
•
)->
ty≥
 = 
T_ARRAY
;

1045 
•
->
u
.
¨r
 = 
r
;

1047 
˙t
 = 0; c¡ < 
size
; cnt++)

1049 
	`push_svÆue
(
¨r
->
ôem
 + 
˙t
);

1050 
v
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 1);

1051 i‡(
v
)

1053 
	`assign_svÆue_no_‰ì
(&
r
->
ôem
[
˙t
], 
v
);

1060 
•
--;

1063 
	`p›_n_ñems
(
num_¨g
);

1064 (++
•
)->
ty≥
 = 
T_ARRAY
;

1065 
•
->
u
.
¨r
 = 
r
;

1066 
	}
}

1068 
	$m≠_°rög
(
svÆue_t
 *
¨g
, 
num_¨g
)

1070 *
¨r
 = 
¨g
->
u
.
°rög
;

1071 *
p
;

1072 
fu≈å_t
 *
Â
 = 0;

1073 
numex
 = 0;

1074 
obje˘_t
 *
ob
 = 0;

1075 
svÆue_t
 *
exåa
 = 0;

1076 
svÆue_t
 *
v
 = 0;

1077 *
func
 = 0;

1084 
	`u∆ök_°rög_svÆue
(
¨g
);

1085 
¨r
 = 
¨g
->
u
.
°rög
;

1087 i‡(
¨g
[1].
ty≥
 =
T_FUNCTION
)

1089 
Â
 = 
¨g
[1].
u
.fp;

1090 i‡(
num_¨g
 > 2)

1092 
exåa
 = 
¨g
 + 2, 
numex
 = 
num_¨g
 - 2;

1097 
func
 = 
¨g
[1].
u
.
°rög
;

1098 i‡(
num_¨g
 < 3)

1100 
ob
 = 
cuºít_obje˘
;

1104 i‡(
¨g
[2].
ty≥
 =
T_OBJECT
)

1106 
ob
 = 
¨g
[2].
u
.ob;

1108 i‡(
¨g
[2].
ty≥
 =
T_STRING
)

1110 i‡–(
ob
 = 
	`föd_obje˘
(
¨g
[2].
u
.
°rög
ËË&& !
	`obje˘_visibÀ
(ob) )

1112 
ob
 = 0;

1115 i‡(
num_¨g
 > 3)

1117 
exåa
 = 
¨g
 + 3, 
numex
 = 
num_¨g
 - 3;

1119 i‡(!
ob
)

1122 
	`îr‹
("TheÅhirdárgument is bad.\n");

1127 
p
 = 
¨r
; *p;Ö++)

1129 
	`push_numbî
–(Ë*
p
);

1130 i‡(
numex
)

1132 
	`push_some_svÆues
(
exåa
, 
numex
);

1134 
v
 = 
Â
 ? 
	`ˇŒ_fun˘i⁄_poöãr
(Â, 
numex
 + 1): 
	`≠∂y
(
func
, 
ob
, 1+numex, 
ORIGIN_EFUN
);

1142 i‡(!
v
)

1146 i‡(
v
->
ty≥
 =
T_NUMBER
 && v->
u
.
numbî
 != 0)

1148 *
p
 = ( (Ë(
v
->
u
.
numbî
) );

1152 
	`p›_n_ñems
(
num_¨g
 - 1);

1154 
	}
}

1157 #ifde‡
F_SORT_ARRAY


1158 
fun˘i⁄_to_ˇŒ_t
 *
	gs‹t_¨øy_·c
;

1160 
	#COMPARE_NUMS
(
x
,
y
Ë(x < y ? -1 : (x > y ? 1 : 0))

	)

1162 
¨øy_t
 *
	$buûtö_s‹t_¨øy
(
¨øy_t
 *
öli°
, 
dú
)

1164 
	`quickS‹t
–(*)
öli°
->
ôem
, i∆i°->
size
, (öli°->ôem), (
dú
 < 0Ë? 
buûtö_s‹t_¨øy_cmp_ªv
 : 
buûtö_s‹t_¨øy_cmp_fwd
);

1166  
öli°
;

1167 
	}
}

1169 
INLINE_STATIC
 
	$buûtö_s‹t_¨øy_cmp_fwd
(
svÆue_t
 *
p1
, svÆue_à*
p2
)

1171 
p1
->
ty≥
 | 
p2
->type)

1173 
T_STRING
:

1175  
	`°rcmp
(
p1
->
u
.
°rög
, 
p2
->u.string);

1178 
T_NUMBER
:

1180  
	`COMPARE_NUMS
(
p1
->
u
.
numbî
, 
p2
->u.number);

1183 
T_REAL
:

1185  
	`COMPARE_NUMS
(
p1
->
u
.
ªÆ
, 
p2
->u.real);

1188 
T_ARRAY
:

1190 
¨øy_t
 *
v1
 = 
p1
->
u
.
¨r
, *
v2
 = 
p2
->u.arr;

1191 i‡(!
v1
->
size
 || !
v2
->size)

1194 
	`îr‹
("Can't haveÉmptyárray!\n");

1198 
v1
->
ôem
->
ty≥
 | 
v2
->item->type)

1200 
T_STRING
:

1202  
	`°rcmp
(
v1
->
ôem
->
u
.
°rög
, 
v2
->item->u.string);

1205 
T_NUMBER
:

1207  
	`COMPARE_NUMS
(
v1
->
ôem
->
u
.
numbî
, 
v2
->item->u.number);

1210 
T_REAL
:

1212  
	`COMPARE_NUMS
(
v1
->
ôem
->
u
.
ªÆ
, 
v2
->item->u.real);

1219 
	`îr‹
("cannot handleÅheárrays ofÅhisÅype!");

1227 
	`îr‹
("cannot handleÅheárrays ofÅhisÅype!");

1229 
	}
}

1231 
INLINE_STATIC
 
	$buûtö_s‹t_¨øy_cmp_ªv
(
svÆue_t
 *
p1
, svÆue_à*
p2
)

1233 
p1
->
ty≥
 | 
p2
->type)

1235 
T_STRING
:

1237  
	`°rcmp
(
p2
->
u
.
°rög
, 
p1
->u.string);

1240 
T_NUMBER
:

1242  
	`COMPARE_NUMS
(
p2
->
u
.
numbî
, 
p1
->u.number);

1245 
T_REAL
:

1247  
	`COMPARE_NUMS
(
p2
->
u
.
ªÆ
, 
p1
->u.real);

1250 
T_ARRAY
:

1252 
¨øy_t
 *
v1
 = 
p1
->
u
.
¨r
, *
v2
 = 
p2
->u.arr;

1253 i‡(!
v1
->
size
 || !
v2
->size)

1257 
	`îr‹
("Can't haveÉmptyárray!\n");

1261 
v1
->
ôem
->
ty≥
 | 
v2
->item->type)

1263 
T_STRING
:

1265  
	`°rcmp
(
v2
->
ôem
->
u
.
°rög
, 
v1
->item->u.string);

1268 
T_NUMBER
:

1270  
	`COMPARE_NUMS
(
v2
->
ôem
->
u
.
numbî
, 
v1
->item->u.number);

1273 
T_REAL
:

1275  
	`COMPARE_NUMS
(
v2
->
ôem
->
u
.
ªÆ
, 
v1
->item->u.real);

1281 
	`îr‹
("cannot handleárrays! \n");

1288 
	`îr‹
("cannot handle suchárrays! \n");

1290 
	}
}

1292 
INLINE_STATIC
 
	$s‹t_¨øy_cmp
(
svÆue_t
 *
p1
, svÆue_à*
p2
)

1294 
svÆue_t
 *
d
;

1296 
	`push_svÆue
(
p1
);

1297 
	`push_svÆue
(
p2
);

1299 
d
 = 
	`ˇŒ_efun_ˇŒback
(
s‹t_¨øy_·c
, 2);

1301 i‡(!
d
 || d->
ty≥
 !
T_NUMBER
)

1307  
d
->
u
.
numbî
;

1309 
	}
}

1311 
	$f_s‹t_¨øy
()

1313 
svÆue_t
 *
¨g
 = 
•
 - 
°_num_¨g
 + 1;

1314 
¨øy_t
 *
tmp
 = 
¨g
->
u
.
¨r
;

1315 
num_¨g
 = 
°_num_¨g
;

1317 
	`check_f‹_de°r
(
tmp
);

1319 
¨g
[1].
ty≥
)

1321 
T_NUMBER
:

1323 
tmp
 = 
	`buûtö_s‹t_¨øy
(
	`c›y_¨øy
—mp), 
¨g
[1].
u
.
numbî
);

1327 
T_FUNCTION
:

1328 
T_STRING
:

1338 
fun˘i⁄_to_ˇŒ_t
 
·c
, *
ﬁd_±r
;

1340 
ﬁd_±r
 = 
s‹t_¨øy_·c
;

1341 
s‹t_¨øy_·c
 = &
·c
;

1342 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_SORT_ARRAY
);

1344 
tmp
 = 
	`c›y_¨øy
(tmp);

1345 
	`quickS‹t
–(*)
tmp
->
ôem
,Åmp->
size
, —mp->ôem), 
s‹t_¨øy_cmp
);

1346 
s‹t_¨øy_·c
 = 
ﬁd_±r
;

1351 
	`p›_n_ñems
(
num_¨g
);

1352 (++
•
)->
ty≥
 = 
T_ARRAY
;

1353 
•
->
u
.
¨r
 = 
tmp
;

1354 
	}
}

1357 
INLINE_STATIC
 
	$Æi°_cmp
(
svÆue_t
 *
p1
, svÆue_à*
p2
)

1359 
d
;

1361 i‡–(
d
 = 
p1
->
u
.
numbî
 - 
p2
->u.number) )

1363  
d
;

1365 i‡–(
d
 = 
p1
->
ty≥
 - 
p2
->type) )

1367  
d
;

1370 
	}
}

1376 
INLINE_STATIC
 
svÆue_t
 *
	$Æi°_s‹t
(
¨øy_t
 *
öli°
)

1378 
size
, 
j
, 
curix
, 
∑rix
, 
chûd1
, 
chûd2
, 
Êag
;

1379 
svÆue_t
 *
sv_èb
, *
tmp
, *
èbÀ
, *
sv_±r
, 
vÆ
;

1380 *
°r
;

1382 i‡(!(
size
 = 
öli°
->size) )

1384  (
svÆue_t
*)
NULL
;

1386 i‡–(
Êag
 = (
öli°
->
ªf
 > 1) ) )

1388 
sv_èb
 = 
	`CALLOCATE
(
size
, 
svÆue_t
, 
TAG_TEMPORARY
, "alist_sort: sv_tab");

1389 
sv_±r
 = 
öli°
->
ôem
;

1390 
j
 = 0; j < 
size
; j++)

1392 i‡––(
tmp
 = (
sv_±r
 + 
j
Ë)->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

1394 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "alist_sort");

1395 
sv_èb
[
j
] = *
tmp
 = 
c⁄°0
;

1397 i‡–(
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
) )

1399 
sv_èb
[
j
].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
tmp
->u.string);

1400 (
tmp
 = 
sv_èb
 + 
j
)->
subty≥
 = 
STRING_SHARED
;

1401 
tmp
->
ty≥
 = 
T_STRING
;

1405 
	`assign_svÆue_no_‰ì
(
sv_èb
 + 
j
, 
tmp
);

1408 i‡–(
curix
 = 
j
) )

1410 
vÆ
 = *
tmp
;

1414 
∑rix
 = (
curix
 - 1) >> 1;

1415 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0)

1417 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1418 
sv_èb
[
∑rix
] = 
vÆ
;

1422  (
curix
 = 
∑rix
) );

1428 
sv_èb
 = 
öli°
->
ôem
;

1429 
j
 = 0; j < 
size
; j++)

1431 i‡––(
tmp
 = (
sv_èb
 + 
j
Ë)->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

1433 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "alist_sort");

1434 *
tmp
 = 
c⁄°0
;

1436 i‡–(
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
) )

1438 
°r
 = 
	`make_sh¨ed_°rög
(
tmp
->
u
.
°rög
);

1439 
	`‰ì_°rög_svÆue
(
tmp
);

1440 
tmp
->
u
.
°rög
 = 
°r
;

1441 
tmp
->
subty≥
 = 
STRING_SHARED
;

1444 i‡–(
curix
 = 
j
) )

1446 
vÆ
 = *
tmp
;

1450 
∑rix
 = (
curix
 - 1) >> 1;

1451 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0)

1453 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1454 
sv_èb
[
∑rix
] = 
vÆ
;

1458  (
curix
 = 
∑rix
) );

1463 
èbÀ
 = 
	`CALLOCATE
(
size
, 
svÆue_t
, 
TAG_TEMPORARY
, "alist_sort:Åable");

1465 
j
 = 0; j < 
size
; j++)

1467 
èbÀ
[
j
] = 
sv_èb
[0];

1469 
curix
 = 0;;)

1471 
chûd1
 = (
curix
 << 1) + 1;

1472 
chûd2
 = 
chûd1
 + 1;

1474 i‡(
chûd2
 < 
size
 && 
sv_èb
[chûd2].
ty≥
 !
T_INVALID
 && (sv_èb[
chûd1
].ty≥ =T_INVALID || 
	`Æi°_cmp
(sv_tab + child1, sv_tab + child2) > 0) )

1476 
chûd1
 = 
chûd2
;

1478 i‡(
chûd1
 < 
size
 && 
sv_èb
[chûd1].
ty≥
 !
T_INVALID
)

1480 
sv_èb
[
curix
] = sv_èb[
chûd1
];

1481 
curix
 = 
chûd1
;

1489 
sv_èb
[
curix
].
ty≥
 = 
T_INVALID
;

1492 i‡(
Êag
)

1494 
	`FREE
–(*)
sv_èb
);

1496  
èbÀ
;

1497 
	}
}

1503 
¨øy_t
 *
	$subåa˘_¨øy
(
¨øy_t
 *
möuíd
,áºay_à*
subåahíd
)

1505 
¨øy_t
 *
dif„ªn˚
;

1506 
svÆue_t
 *
sour˚
, *
de°
, *
svt
;

1507 
i
, 
size
, 
o
, 
d
, 
l
, 
h
, 
msize
;

1509 i‡(!(
size
 = 
subåahíd
->size) )

1511 
subåahíd
->
ªf
--;

1512  
möuíd
->
ªf
 > 1 ? (möuíd->ªf--, 
	`c›y_¨øy
(minuend) ): minuend;

1514 i‡(!(
msize
 = 
möuíd
->
size
) )

1516 
	`‰ì_¨øy
(
subåahíd
);

1517  &
the_nuŒ_¨øy
;

1519 
svt
 = 
	`Æi°_s‹t
(
subåahíd
);

1520 
dif„ªn˚
 = 
	`ALLOC_ARRAY
(
msize
);

1521 
sour˚
 = 
möuíd
->
ôem
, 
de°
 = 
dif„ªn˚
->ôem, 
i
 = 
msize
; i--; source++)

1524 
l
 = 0;

1525 
o
 = (
h
 = 
size
 - 1) >> 1;

1527 i‡–(
sour˚
->
ty≥
 =
T_OBJECT
Ë&& (sour˚->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

1529 
	`‰ì_obje˘
(
sour˚
->
u
.
ob
, "subtract_array");

1530 *
sour˚
 = 
c⁄°0
;

1532 i‡–(
sour˚
->
ty≥
 =
T_STRING
Ë&& !(sour˚->
subty≥
 =
STRING_SHARED
) )

1534 
svÆue_t
 
°mp
 =

1536 
T_STRING
, 
STRING_SHARED
,

1542 i‡(!(
°mp
.
u
.
°rög
 = 
	`föd°rög
(
sour˚
->u.string) ) )

1544 
	`assign_svÆue_no_‰ì
(
de°
++, 
sour˚
);

1547  (
d
 = 
	`Æi°_cmp
(&
°mp
, 
svt
 + 
o
) ) )

1549 i‡(
d
 < 0)

1551 
h
 = 
o
 - 1;

1555 
l
 = 
o
 + 1;

1557 i‡(
l
 > 
h
)

1559 
	`assign_svÆue_no_‰ì
(
de°
++, 
sour˚
);

1562 
o
 = (
l
 + 
h
) >> 1;

1567  (
d
 = 
	`Æi°_cmp
(
sour˚
, 
svt
 + 
o
) ) )

1569 i‡(
d
 < 0)

1571 
h
 = 
o
 - 1;

1575 
l
 = 
o
 + 1;

1577 i‡(
l
 > 
h
)

1579 
	`assign_svÆue_no_‰ì
(
de°
++, 
sour˚
);

1582 
o
 = (
l
 + 
h
) >> 1;

1586 
i
 = 
size
;

1587 
i
--)

1589 
	`‰ì_svÆue
(
svt
 + 
i
, "subtract_array");

1591 
	`FREE
–(*)
svt
);

1592 i‡(
subåahíd
->
ªf
 > 1)

1594 
subåahíd
->
ªf
--;

1598 #ifde‡
ARRAY_STATS


1599 
num_¨øys
--;

1600 
tŸÆ_¨øy_size
 -(
¨øy_t
Ë+ (
svÆue_t
Ë*(
size
 - 1);

1602 
	`FREE
–(*)
subåahíd
);

1604 
	`‰ì_¨øy
(
möuíd
);

1605 
msize
 = 
de°
 - 
dif„ªn˚
->
ôem
;

1606 i‡(!
msize
)

1608 
	`FREE
–(*)
dif„ªn˚
);

1609  &
the_nuŒ_¨øy
;

1611 
dif„ªn˚
 = 
	`RESIZE_ARRAY
(dif„ªn˚, 
msize
);

1612 
dif„ªn˚
->
size
 = 
msize
;

1613 
dif„ªn˚
->
ªf
 = 1;

1614 #ifde‡
ARRAY_STATS


1615 
tŸÆ_¨øy_size
 +(
¨øy_t
Ë+ (
svÆue_t
[1])*(
msize
 - 1);

1616 
num_¨øys
++;

1618  
dif„ªn˚
;

1619 
	}
}

1625 
¨øy_t
 *
	$öãr£˘_¨øy
(
¨øy_t
 *
a1
,áºay_à*
a2
)

1627 
¨øy_t
 *
a3
;

1628 
d
, 
l
, 
j
, 
i
, 
a1s
 = 
a1
->
size
, 
a2s
 = 
a2
->size, 
Êag
;

1629 
svÆue_t
 *
svt_1
, *
¡ab
, *
sv_èb
, *
sv_±r
, 
vÆ
, *
tmp
;

1630 
curix
, 
∑rix
, 
chûd1
, 
chûd2
;

1632 i‡(!
a1s
 || !
a2s
)

1634 
	`‰ì_¨øy
(
a1
);

1635 
	`‰ì_¨øy
(
a2
);

1636  &
the_nuŒ_¨øy
;

1639 
svt_1
 = 
	`Æi°_s‹t
(
a1
);

1640 i‡–(
Êag
 = (
a2
->
ªf
 > 1) ) )

1642 
sv_èb
 = 
	`CALLOCATE
(
a2s
, 
svÆue_t
, 
TAG_TEMPORARY
, "intersect_array: sv2_tab");

1643 
sv_±r
 = 
a2
->
ôem
;

1644 
j
 = 0; j < 
a2s
; j++)

1646 i‡––(
tmp
 = (
sv_±r
 + 
j
Ë)->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

1648 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "intersect_array");

1649 
sv_èb
[
j
] = *
tmp
 = 
c⁄°0
;

1651 i‡–(
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
) )

1653 
sv_èb
[
j
].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
tmp
->u.string);

1654 (
tmp
 = 
sv_èb
 + 
j
)->
subty≥
 = 
STRING_SHARED
;

1655 
tmp
->
ty≥
 = 
T_STRING
;

1659 
	`assign_svÆue_no_‰ì
(
sv_èb
 + 
j
, 
tmp
);

1662 i‡–(
curix
 = 
j
) )

1664 
vÆ
 = *
tmp
;

1668 
∑rix
 = (
curix
 - 1) >> 1;

1669 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0)

1671 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1672 
sv_èb
[
∑rix
] = 
vÆ
;

1676  (
curix
 = 
∑rix
) );

1682 *
°r
;

1684 
sv_èb
 = 
a2
->
ôem
;

1685 
j
 = 0; j < 
a2s
; j++)

1687 i‡––(
tmp
 = (
sv_èb
 + 
j
Ë)->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

1689 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "alist_sort");

1690 *
tmp
 = 
c⁄°0
;

1692 i‡–(
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
) )

1694 
°r
 = 
	`make_sh¨ed_°rög
(
tmp
->
u
.
°rög
);

1695 
	`‰ì_°rög_svÆue
(
tmp
);

1696 
tmp
->
u
.
°rög
 = 
°r
;

1697 
tmp
->
subty≥
 = 
STRING_SHARED
;

1700 i‡–(
curix
 = 
j
) )

1702 
vÆ
 = *
tmp
;

1706 
∑rix
 = (
curix
 - 1) >> 1;

1707 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0)

1709 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1710 
sv_èb
[
∑rix
] = 
vÆ
;

1714  (
curix
 = 
∑rix
) );

1719 
a3
 = 
	`ALLOC_ARRAY
(
a2s
);

1720 
¡ab
 = 
a3
->
ôem
;

1722 
l
 = 
i
 = 0;

1724 
j
 = 0; j < 
a2s
; j++)

1726 
vÆ
 = 
sv_èb
[0];

1728  (
d
 = 
	`Æi°_cmp
(&
vÆ
, &
svt_1
[
i
]) ) > 0)

1730 i‡(++
i
 >
a1s
)

1732 
£âÀ_busöess
;

1736 i‡(!
d
)

1738 
¡ab
[
l
++] = 
vÆ
;

1742 
	`‰ì_svÆue
(&
vÆ
, "intersect_array");

1745 
curix
 = 0;;)

1747 
chûd1
 = (
curix
 << 1) + 1;

1748 
chûd2
 = 
chûd1
 + 1;

1750 i‡(
chûd2
 < 
a2s
 && 
sv_èb
[chûd2].
ty≥
 !
T_INVALID
 && (sv_èb[
chûd1
].ty≥ =T_INVALID || 
	`Æi°_cmp
(sv_tab + child1, sv_tab + child2) > 0) )

1752 
chûd1
 = 
chûd2
;

1755 i‡(
chûd1
 < 
a2s
 && 
sv_èb
[chûd1].
ty≥
 !
T_INVALID
)

1757 
sv_èb
[
curix
] = sv_èb[
chûd1
];

1758 
curix
 = 
chûd1
;

1766 
sv_èb
[
curix
].
ty≥
 = 
T_INVALID
;

1769 
£âÀ_busöess
:

1771 
curix
 = 
a2s
;

1772 
curix
--)

1774 i‡(
sv_èb
[
curix
].
ty≥
 !
T_INVALID
)

1776 
	`‰ì_svÆue
(
sv_èb
 + 
curix
, "intersect_array:2");

1780 
i
 = 
a1s
;

1781 
i
--)

1783 
	`‰ì_svÆue
(
svt_1
 + 
i
, "intersect_array");

1785 
	`FREE
–(*)
svt_1
);

1787 i‡(
a1
->
ªf
 > 1)

1789 
a1
->
ªf
--;

1793 #ifde‡
ARRAY_STATS


1794 
num_¨øys
--;

1795 
tŸÆ_¨øy_size
 -(
¨øy_t
Ë+ (
svÆue_t
)*(
a1s
 - 1);

1797 
	`FREE
–(*)
a1
);

1800 i‡(
Êag
)

1802 
a2
->
ªf
--;

1803 
	`FREE
–(*)
sv_èb
);

1807 #ifde‡
ARRAY_STATS


1808 
num_¨øys
--;

1809 
tŸÆ_¨øy_size
 -(
¨øy_t
Ë+ (
svÆue_t
)*(
a2s
 - 1);

1811 
	`FREE
–(*)
a2
);

1813 
a3
 = 
	`RESIZE_ARRAY
◊3, 
l
);

1814 
a3
->
ªf
 = 1;

1815 
a3
->
size
 = 
l
;

1816 #ifde‡
ARRAY_STATS


1817 
tŸÆ_¨øy_size
 +(
¨øy_t
Ë+ (
l
 - 1Ë*(
svÆue_t
);

1818 
num_¨øys
++;

1820  
a3
;

1821 
	}
}

1827 #ifde‡
USE_POSIX_REGEXP


1828 
	#SUBLEN
 10

	)

1829 
	#ERR_STR_LEN
 256

	)

1832 
	$m©ch_sögÀ_ªgexp
(*
°r
, *
∑âîn
)

1834 #i‚de‡
USE_POSIX_REGEXP


1835 
ªgexp
 *
ªg
;

1836 
ªt
;

1838 
ªgexp_u£r
 = 
EFUN_REGEXP
;

1839 
ªg
 = 
	`_ªgcomp
–(*)
∑âîn
, 0);

1840 i‡(!
ªg
)

1842 
	`îr‹
(
ªgexp_îr‹
);

1844 
ªt
 = 
	`_ªgexec
(
ªg
, 
°r
);

1845 
	`FREE
–(*)
ªg
);

1846  
ªt
;

1849 
ªgex_t
 
ªg
;

1851 
îr
;

1852 
îrbuf1
[
ERR_STR_LEN
];

1853 
îrbuf2
[
ERR_STR_LEN
];

1854 
ªgm©ch_t
 
subs
[
SUBLEN
];

1856 
îr
 = 
	`ªgcomp
(&
ªg
, 
∑âîn
, 
REG_EXTENDED
 | 
REG_ICASE
);

1857 i‡(
îr
)

1860 
	`ªgîr‹
(
îr
, &
ªg
, 
îrbuf1
, (errbuf1) );

1861 
	`¢¥ötf
(
îrbuf2
, 
ERR_STR_LEN
, "QTZ_SîvîEngöe:ªgÉx∞comûêîr‹:|%s|\n", 
∑âîn
);

1862 
	`îr‹
(
îrbuf2
);

1867 
îr
 = 
	`ªgexec
(&
ªg
, 
°r
, (
size_t
)
SUBLEN
, 
subs
, 0);

1869 i‡(
îr
 =
REG_NOMATCH
)

1871 
	`ªg‰ì
(&
ªg
);

1874 i‡(
îr
)

1876 
	`ªgîr‹
(
îr
, &
ªg
, 
îrbuf1
, (errbuf1) );

1877 
	`¢¥ötf
(
îrbuf2
, 
ERR_STR_LEN
, "QTZ_SîvîEngöe:ªgÉx∞födÉº‹ %s\n", 
îrbuf1
);

1878 
	`îr‹
(
îrbuf2
);

1879 
	`ªg‰ì
(&
ªg
);

1882 
	`ªg‰ì
(&
ªg
);

1886 
	}
}

1892 
¨øy_t
 *
	$m©ch_ªgexp
(
¨øy_t
 *
v
, *
∑âîn
, 
Êag
)

1894 #i‚de‡
USE_POSIX_REGEXP


1895 
ªgexp
 *
ªg
;

1896 *
ªs
;

1897 
num_m©ch
, 
size
, 
m©ch
 = !(
Êag
 &2);

1898 
¨øy_t
 *
ªt
;

1899 
svÆue_t
 *
sv1
, *
sv2
;

1901 
ªgexp_u£r
 = 
EFUN_REGEXP
;

1902 i‡(!(
size
 = 
v
->size) )

1904  &
the_nuŒ_¨øy
;

1906 
ªg
 = 
	`_ªgcomp
–(*)
∑âîn
, 0);

1907 i‡(!
ªg
)

1909 
	`îr‹
(
ªgexp_îr‹
);

1911 
ªs
 = (*)
	`DMALLOC
(
size
, 
TAG_TEMPORARY
, "match_regexp:Ñes");

1912 
sv1
 = 
v
->
ôem
 + 
size
;

1913 
num_m©ch
 = 0;

1914 
size
--)

1916 i‡(!–(--
sv1
)->
ty≥
 =
T_STRING
Ë|| (
	`_ªgexec
(
ªg
, sv1->
u
.
°rög
Ë!
m©ch
) )

1918 
ªs
[
size
] = 0;

1922 
ªs
[
size
] = 1;

1923 
num_m©ch
++;

1927 
Êag
 &= 1;

1928 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
num_m©ch
 << 
Êag
);

1929 
sv2
 = 
ªt
->
ôem
 + (
num_m©ch
 << 
Êag
);

1930 
size
 = 
v
->size;

1931 
size
--)

1933 i‡(
ªs
[
size
])

1935 i‡(
Êag
)

1937 (--
sv2
)->
ty≥
 = 
T_NUMBER
;

1938 
sv2
->
u
.
numbî
 = 
size
 + 1;

1940 (--
sv2
)->
ty≥
 = 
T_STRING
;

1941 
sv1
 = 
v
->
ôem
 + 
size
;

1942 *
sv2
 = *
sv1
;

1943 i‡(
sv1
->
subty≥
 &
STRING_COUNTED
)

1945 
	`INC_COUNTED_REF
(
sv1
->
u
.
°rög
);

1946 
	`ADD_STRING
(
	`MSTR_SIZE
(
sv1
->
u
.
°rög
) );

1948 i‡(!--
num_m©ch
)

1954 
	`FREE
(
ªs
);

1955 
	`FREE
–(*)
ªg
);

1956  
ªt
;

1959 
ªgex_t
 
ªg
;

1961 
size
, 
num_m©ch
, 
îr
, 
m©ch
 = !(
Êag
 &2);

1962 *
ªs
;

1963 
îrbuf1
[
ERR_STR_LEN
];

1964 
îrbuf2
[
ERR_STR_LEN
];

1965 
ªgm©ch_t
 
subs
[
SUBLEN
];

1966 
svÆue_t
 *
sv1
, *
sv2
;

1967 
¨øy_t
 *
ªt
;

1970 i‡(!(
size
 = 
v
->size) )

1972  
	`Æloˇã_em±y_¨øy
(0);

1975 
îr
 = 
	`ªgcomp
(&
ªg
, 
∑âîn
, 
REG_EXTENDED
 | 
REG_ICASE
);

1976 i‡(
îr
)

1979 
	`ªgîr‹
(
îr
, &
ªg
, 
îrbuf1
, (errbuf1) );

1980 
	`¢¥ötf
(
îrbuf2
, 
ERR_STR_LEN
, "QTZ_SîvîEngöe:ªgÉx∞comûêîr‹ |%s|%d|\n", 
∑âîn
, 
îr
);

1981 
	`îr‹
(
îrbuf2
);

1982  
	`Æloˇã_em±y_¨øy
(0);

1985 
ªs
 = (*)
	`DMALLOC
(
size
, 
TAG_TEMPORARY
, "match_regexp:Ñes");

1988 
sv1
 = 
v
->
ôem
 + 
size
;

1990 
num_m©ch
 = 0;

1991 
size
--)

1993 i‡(!–(--
sv1
)->
ty≥
 =
T_STRING
) )

1995 
ªs
[
size
] = 0;

1999 
îr
 = 
	`ªgexec
(&
ªg
, 
sv1
->
u
.
°rög
, (
size_t
)
SUBLEN
, 
subs
, 0);

2000 i‡–(
îr
 =
REG_NOMATCH
Ë=
m©ch
)

2002 
ªs
[
size
] = 0;

2006 
ªs
[
size
] = 1;

2007 
num_m©ch
++;

2016 
Êag
 &= 1;

2017 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
num_m©ch
 << 
Êag
);

2018 
sv2
 = 
ªt
->
ôem
 + (
num_m©ch
 << 
Êag
);

2019 
size
 = 
v
->size;

2022 
size
--)

2024 i‡(
ªs
[
size
])

2026 i‡(
Êag
)

2028 (--
sv2
)->
ty≥
 = 
T_NUMBER
;

2029 
sv2
->
u
.
numbî
 = 
size
 + 1;

2031 (--
sv2
)->
ty≥
 = 
T_STRING
;

2032 
sv1
 = 
v
->
ôem
 + 
size
;

2033 *
sv2
 = *
sv1
;

2034 i‡(
sv1
->
subty≥
 &
STRING_COUNTED
)

2036 
	`INC_COUNTED_REF
(
sv1
->
u
.
°rög
);

2037 
	`ADD_STRING
(
	`MSTR_SIZE
(
sv1
->
u
.
°rög
) );

2039 i‡(!--
num_m©ch
)

2047 
	`ªg‰ì
(&
ªg
);

2050 
	`FREE
(
ªs
);

2052  
ªt
;

2054 
	}
}

2062 
¨øy_t
 *
	$dìp_öhîô_li°
(
obje˘_t
 *
ob
)

2064 
¨øy_t
 *
ªt
;

2065 
¥ogøm_t
 *
¥
, *
∂i°
[256];

2066 
û
, 
û2
, 
√xt
, 
cur
;

2068 
∂i°
[0] = 
ob
->
¥og
;

2069 
√xt
 = 1;

2070 
cur
 = 0;

2072 ; 
cur
 < 
√xt
 &&Çext < 256; cur++)

2074 
¥
 = 
∂i°
[
cur
];

2075 
û2
 = 0; il2 < ()
¥
->
num_öhîôed
; il2++)

2077 
∂i°
[
√xt
++] = 
¥
->
öhîô
[
û2
].
¥og
;

2081 
√xt
--;

2082 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
√xt
);

2084 
û
 = 0; i»< 
√xt
; il++)

2086 
¥
 = 
∂i°
[
û
 + 1];

2087 
ªt
->
ôem
[
û
].
ty≥
 = 
T_STRING
;

2088 
ªt
->
ôem
[
û
].
subty≥
 = 
STRING_MALLOC
;

2089 
ªt
->
ôem
[
û
].
u
.
°rög
 = 
	`add_¶ash
(
¥
->
«me
);

2091  
ªt
;

2092 
	}
}

2098 
¨øy_t
 *
	$öhîô_li°
(
obje˘_t
 *
ob
)

2100 
¨øy_t
 *
ªt
;

2101 
¥ogøm_t
 *
¥
, *
∂i°
[256];

2102 
û
, 
û2
, 
√xt
, 
cur
;

2104 
∂i°
[0] = 
ob
->
¥og
;

2105 
√xt
 = 1;

2106 
cur
 = 0;

2108 
¥
 = 
∂i°
[
cur
];

2109 
û2
 = 0; il2 < ()
¥
->
num_öhîôed
; il2++)

2111 
∂i°
[
√xt
++] = 
¥
->
öhîô
[
û2
].
¥og
;

2114 
√xt
--;

2115 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
√xt
);

2117 
û
 = 0; i»< 
√xt
; il++)

2119 
¥
 = 
∂i°
[
û
 + 1];

2120 
ªt
->
ôem
[
û
].
ty≥
 = 
T_STRING
;

2121 
ªt
->
ôem
[
û
].
subty≥
 = 
STRING_MALLOC
;

2122 
ªt
->
ôem
[
û
].
u
.
°rög
 = 
	`add_¶ash
(
¥
->
«me
);

2124  
ªt
;

2125 
	}
}

2131 
¨øy_t
 *
	$chûdªn
(*
°r
)

2133 
i
, 
j
;

2134 
t_sz
;

2135 
¶
, 
ﬁ
;

2136 
obje˘_t
 *
ob
;

2137 
obje˘_t
 **
tmp_chûdªn
;

2138 
¨øy_t
 *
ªt
;

2139 
di•œy_hiddí
;

2140 
tmpbuf
[
MAX_OBJECT_NAME_SIZE
];

2142 
di•œy_hiddí
 = - 1;

2143 i‡(!
	`°rù_«me
(
°r
, 
tmpbuf
, Åmpbuf) )

2145  &
the_nuŒ_¨øy
;

2148 
¶
 = 
	`°æí
(
tmpbuf
);

2150 i‡(!(
tmp_chûdªn
 = (
obje˘_t
 **)
	`DMALLOC
((obje˘_t*)*(
t_sz
 = 50), 
TAG_TEMPORARY
, "children:Åmp_children") ) )

2152  &
the_nuŒ_¨øy
;

2156 
i
 = 0, 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
)

2158 
ﬁ
 = 
	`°æí
(
ob
->
«me
);

2159 i‡––(
ﬁ
 =
¶
Ë|| ( (ﬁ > slË&& (
ob
->
«me
[¶] ='#'ËËË&& !
	`°∫cmp
(
tmpbuf
, ob->name, sl) )

2161 i‡(
ob
->
Êags
 &
O_HIDDEN
)

2163 i‡(
di•œy_hiddí
 == - 1)

2165 
di•œy_hiddí
 = 
	`vÆid_hide
(
cuºít_obje˘
);

2167 i‡(!
di•œy_hiddí
)

2172 
tmp_chûdªn
[
i
] = 
ob
;

2173 i‡–(++
i
 =
t_sz
Ë&& (!(
tmp_chûdªn
 = 
	`RESIZE
—mp_chûdªn, (t_sz +50), 
obje˘_t
 *, 
TAG_TEMPORARY
, "children:Åmp_children:Ñealloc") ) ) )

2177  &
the_nuŒ_¨øy
;

2181 i‡(
i
 > 
max_¨øy_size
)

2183 
i
 = 
max_¨øy_size
;

2185 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
i
);

2186 
j
 = 0; j < 
i
; j++)

2188 
ªt
->
ôem
[
j
].
ty≥
 = 
T_OBJECT
;

2189 
ªt
->
ôem
[
j
].
u
.
ob
 = 
tmp_chûdªn
[j];

2190 
	`add_ªf
(
tmp_chûdªn
[
j
], "children");

2192 
	`FREE
–(*)
tmp_chûdªn
);

2193  
ªt
;

2194 
	}
}

2200 #ifde‡
F_LIVINGS


2201 
¨øy_t
 *
	$livögs
()

2203 
nob
, 
≠∂y_vÆid_hide
, 
hide_is_vÆid
 = 0;

2204 
obje˘_t
 *
ob
, **
obèb
;

2205 
¨øy_t
 *
vec
;

2207 
nob
 = 0;

2208 
≠∂y_vÆid_hide
 = 1;

2210 
obèb
 = 
	`CALLOCATE
(
max_¨øy_size
, 
obje˘_t
 *, 
TAG_TEMPORARY
, "livings");

2212 
ob
 = 
obj_li°
; ob !
NULL
; ob = ob->
√xt_Æl
)

2214 i‡–(
ob
->
Êags
 &
O_ENABLE_COMMANDS
) == 0)

2218 i‡(
ob
->
Êags
 &
O_HIDDEN
)

2220 i‡(
≠∂y_vÆid_hide
)

2222 
≠∂y_vÆid_hide
 = 0;

2223 
hide_is_vÆid
 = 
	`vÆid_hide
(
cuºít_obje˘
);

2225 i‡(!
hide_is_vÆid
)

2230 i‡(
nob
 =
max_¨øy_size
)

2234 
obèb
[
nob
++] = 
ob
;

2237 
vec
 = 
	`Æloˇã_em±y_¨øy
(
nob
);

2238 --
nob
 >= 0)

2240 
vec
->
ôem
[
nob
].
ty≥
 = 
T_OBJECT
;

2241 
vec
->
ôem
[
nob
].
u
.
ob
 = 
obèb
[nob];

2242 
	`add_ªf
(
obèb
[
nob
], "livings");

2245 
	`FREE
(
obèb
);

2247  
vec
;

2248 
	}
}

2251 #ifde‡
F_OBJECTS


2252 
	$f_obje˘s
()

2254 *
func
 = 
NULL
;

2255 
obje˘_t
 *
ob
, **
tmp
;

2256 
¨øy_t
 *
ªt
;

2257 
fu≈å_t
 *
f
 = 0;

2258 
di•œy_hiddí
 = 0, 
t_sz
, 
i
, 
j
, 
num_¨g
 = 
°_num_¨g
;

2259 
svÆue_t
 *
v
;

2261 i‡(!
num_¨g
)

2263 
func
 = 0;

2265 i‡(
•
->
ty≥
 =
T_FUNCTION
)

2267 
f
 = 
•
->
u
.
Â
;

2271 
func
 = 
•
->
u
.
°rög
;

2274 i‡(!(
tmp
 = (
obje˘_t
 **)
	`√w_°rög
–(
t_sz
 = 1000) *(object_t*), "TMP: objects:Åmp") ) )

2277 
	`Áèl
("Out Of Memory!\n");

2280 
	`push_mÆlo˚d_°rög
–(*)
tmp
);

2282 
i
 = 0, 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
)

2284 i‡(
ob
->
Êags
 &
O_HIDDEN
)

2286 i‡(!
di•œy_hiddí
)

2288 
di•œy_hiddí
 = 1+!!
	`vÆid_hide
(
cuºít_obje˘
);

2290 i‡(!(
di•œy_hiddí
 &2) )

2295 i‡(
f
)

2297 
	`push_obje˘
(
ob
);

2298 
v
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
f
, 1);

2299 i‡(!
v
)

2301 
	`FREE_MSTR
–(*)
tmp
);

2302 
•
--;

2303 
	`‰ì_svÆue
(
•
, "f_objects");

2304 *
•
 = 
c⁄°0
;

2307 i‡(
v
->
ty≥
 =
T_NUMBER
 && !v->
u
.
numbî
)

2312 i‡(
func
)

2314 
	`push_obje˘
(
ob
);

2315 
v
 = 
	`≠∂y
(
func
, 
cuºít_obje˘
, 1, 
ORIGIN_EFUN
);

2316 i‡(!
v
)

2318 
	`FREE_MSTR
–(*)
tmp
);

2319 
•
--;

2320 
	`‰ì_svÆue
(
•
, "f_objects");

2321 *
•
 = 
c⁄°0
;

2324 i‡–(
v
->
ty≥
 =
T_NUMBER
Ë&& !v->
u
.
numbî
)

2330 
tmp
[
i
] = 
ob
;

2331 i‡(++
i
 =
t_sz
)

2333 i‡(!(
tmp
 = (
obje˘_t
 **)
	`exãnd_°rög
–(*Èmp, (
t_sz
 += 1000) *(object_t*) ) ) )

2335 
	`Áèl
("Out of memory!\n");

2339 
•
->
u
.
°rög
 = (*)
tmp
;

2343 i‡(
i
 > 
max_¨øy_size
)

2345 
i
 = 
max_¨øy_size
;

2347 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
i
);

2348 
j
 = 0; j < 
i
; j++)

2350 
ªt
->
ôem
[
j
].
ty≥
 = 
T_OBJECT
;

2351 
ªt
->
ôem
[
j
].
u
.
ob
 = 
tmp
[j];

2352 
	`add_ªf
(
tmp
[
j
], "objects");

2355 
	`FREE_MSTR
–(*)
tmp
);

2356 
•
--;

2357 
	`p›_n_ñems
(
num_¨g
);

2358 (++
•
)->
ty≥
 = 
T_ARRAY
;

2359 
•
->
u
.
¨r
 = 
ªt
;

2360 
	}
}

2363 #ifde‡
F_REG_ASSOC


2375 
¨øy_t
 *
	$ªg_assoc
(*
°r
, 
¨øy_t
 *
∑t
,áºay_à*
tok
, 
svÆue_t
 *
def
)

2377 
i
, 
size
;

2378 *
tmp
;

2379 
¨øy_t
 *
ªt
;

2381 
ªgexp_u£r
 = 
EFUN_REGEXP
;

2382 i‡–(
size
 = 
∑t
->sizeË!
tok
->size)

2384 
	`îr‹
("PatternándÅokenárray sizes must be identical.\n");

2387 
i
 = 0; i < 
size
; i++)

2389 i‡(!(
∑t
->
ôem
[
i
].
ty≥
 =
T_STRING
) )

2391 
	`îr‹
("Non-string found inÖatternárray.\n");

2395 
ªt
 = 
	`Æloˇã_em±y_¨øy
(2);

2397 i‡(
size
)

2399 
ªgexp
 **
rgµ
;

2400 
	sªg_m©ch


2402 
tok_i
;

2403 *
begö
, *
íd
;

2404 
ªg_m©ch
 *
√xt
;

2405 } *
rmp
 = (
ªg_m©ch
*)0, *
rmph
 = (reg_match*)0;

2406 
num_m©ch
 = 0, 
Àngth
;

2407 
svÆue_t
 *
sv1
, *
sv2
, *
sv
;

2408 
ödex
;

2409 
ªgexp
 *
tm¥eg
;

2410 *
œ°°¨t
, *
cuº°¨t
;

2412 
rgµ
 = 
	`CALLOCATE
(
size
, 
ªgexp
 *, 
TAG_TEMPORARY
, "reg_assoc :Ñgpp");

2413 
i
 = 0; i < 
size
; i++)

2415 i‡(!(
rgµ
[
i
] = 
	`_ªgcomp
–(*)
∑t
->
ôem
[i].
u
.
°rög
, 0) ) )

2417 
i
--)

2419 
	`FREE
–(*)
rgµ
[
i
]);

2421 
	`FREE
–(*)
rgµ
);

2422 
	`‰ì_em±y_¨øy
(
ªt
);

2423 
	`îr‹
(
ªgexp_îr‹
);

2427 
tmp
 = 
°r
;

2428 *
tmp
)

2435 
œ°°¨t
 = 0;

2436 
ödex
 = - 1;

2438 
i
 = 0; i < 
size
; i++)

2440 i‡(
	`_ªgexec
(
tm¥eg
 = 
rgµ
[
i
], 
tmp
) )

2442 
cuº°¨t
 = 
tm¥eg
->
°¨ç
[0];

2443 i‡(
tmp
 =
cuº°¨t
)

2445 
ödex
 = 
i
;

2448 i‡(!
œ°°¨t
 || 
cuº°¨t
 <Üaststart)

2450 
œ°°¨t
 = 
cuº°¨t
;

2451 
ödex
 = 
i
;

2456 i‡(
ödex
 >= 0)

2458 
num_m©ch
++;

2459 i‡(
rmp
)

2461 
rmp
->
√xt
 = 
	`ALLOCATE
(
ªg_m©ch
, 
TAG_TEMPORARY
, "reg_assoc :Ñmp->next");

2462 
rmp
 =Ñmp->
√xt
;

2466 
rmph
 = 
rmp
 = 
	`ALLOCATE
(
ªg_m©ch
, 
TAG_TEMPORARY
, "reg_assoc :Ñmp");

2468 
tm¥eg
 = 
rgµ
[
ödex
];

2469 
rmp
->
begö
 = 
tm¥eg
->
°¨ç
[0];

2470 
rmp
->
íd
 = 
tmp
 = 
tm¥eg
->
ídp
[0];

2471 
rmp
->
tok_i
 = 
ödex
;

2472 
rmp
->
√xt
 = (
ªg_m©ch
*)0;

2481 i‡(
rmp
->
begö
 =
tmp
 && (! *++tmp) )

2487 
sv
 = 
ªt
->
ôem
;

2488 
sv
->
ty≥
 = 
T_ARRAY
;

2489 
sv1
 = (
sv
->
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(2 *
num_m©ch
 + 1Ë)->
ôem
;

2491 
sv
++;

2492 
sv
->
ty≥
 = 
T_ARRAY
;

2493 
sv2
 = (
sv
->
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(2 *
num_m©ch
 + 1Ë)->
ôem
;

2495 
rmp
 = 
rmph
;

2497 
tmp
 = 
°r
;

2499 
num_m©ch
--)

2501 *
svtmp
;

2503 
Àngth
 = 
rmp
->
begö
 - 
tmp
;

2504 
sv1
->
ty≥
 = 
T_STRING
;

2505 
sv1
->
subty≥
 = 
STRING_MALLOC
;

2506 
svtmp
 = 
sv1
->
u
.
°rög
 = 
	`√w_°rög
(
Àngth
, "reg_assoc : sv1");

2507 
	`°∫˝y
(
svtmp
, 
tmp
, 
Àngth
);

2508 
svtmp
[
Àngth
] = 0;

2509 
sv1
++;

2510 
	`assign_svÆue_no_‰ì
(
sv2
++, 
def
);

2511 
tmp
 +
Àngth
;

2512 
Àngth
 = 
rmp
->
íd
 -Ñmp->
begö
;

2513 
sv1
->
ty≥
 = 
T_STRING
;

2514 
sv1
->
subty≥
 = 
STRING_MALLOC
;

2515 
svtmp
 = 
sv1
->
u
.
°rög
 = 
	`√w_°rög
(
Àngth
, "reg_assoc : sv1");

2516 
	`°∫˝y
(
svtmp
, 
tmp
, 
Àngth
);

2517 
svtmp
[
Àngth
] = 0;

2518 
sv1
++;

2519 
	`assign_svÆue_no_‰ì
(
sv2
++, &
tok
->
ôem
[
rmp
->
tok_i
]);

2520 
tmp
 +
Àngth
;

2521 
rmp
 =Ñmp->
√xt
;

2522 } 
sv1
->
ty≥
 = 
T_STRING
;

2523 
sv1
->
subty≥
 = 
STRING_MALLOC
;

2524 
sv1
->
u
.
°rög
 = 
	`°rög_c›y
(
tmp
, "reg_assoc");

2525 
	`assign_svÆue_no_‰ì
(
sv2
, 
def
);

2526 
i
 = 0; i < 
size
; i++)

2528 
	`FREE
–(*)
rgµ
[
i
]);

2530 
	`FREE
–(*)
rgµ
);

2532  (
rmp
 = 
rmph
) )

2534 
rmph
 = 
rmp
->
√xt
;

2535 
	`FREE
–(*)
rmp
);

2537  
ªt
;

2542 
svÆue_t
 *
ãmp
;

2543 
svÆue_t
 *
sv
;

2545 (
sv
 = 
ªt
->
ôem
)->
ty≥
 = 
T_ARRAY
;

2546 
ãmp
 = (
sv
->
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(1Ë)->
ôem
;

2547 
ãmp
->
subty≥
 = 
STRING_MALLOC
;

2548 
ãmp
->
ty≥
 = 
T_STRING
;

2549 
ãmp
->
u
.
°rög
 = 
	`°rög_c›y
(
°r
, "reg_assoc");

2550 
sv
 = &
ªt
->
ôem
[1];

2551 
sv
->
ty≥
 = 
T_ARRAY
;

2552 
	`assign_svÆue_no_‰ì
–(
sv
->
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(1Ë)->
ôem
, 
def
);

2553  
ªt
;

2555 
	}
}

	@src/avltree.c

38 
	~"°d.h
"

39 
	~"av…ªe.h
"

44 
•rout
(
åì
 **, *, *, (*) (), (*) () );

45 
dñëe
 (
åì
 **, (*) (), *, (*) (), *, *);

46 
dñ
(
åì
 **, *,Åree **, (*) (), *);

47 
bÆ™˚L
(
åì
 **, *);

48 
bÆ™˚R
(
åì
 **, *);

51 
	$åì_öô
(
åì
 **
µr_åì
)

53 *
µr_åì
 = 
NULL
;

55 
	}
}

62 *
	$åì_§ch
(
µr_åì
, 
pfi_com∑ª
, 
pc_u£r
)
åì
 *ppr_tree;

63 (*
pfi_com∑ª
) (*, *);

64 *
pc_u£r
;

66 
i_comp
;

68 
µr_åì
)

70 
i_comp
 = (*
pfi_com∑ª
Ë(
pc_u£r
, 
µr_åì
->
åì_p
);

71 i‡(
i_comp
 > 0)

73 
µr_åì
 =Ö¥_åì->
åì_r
;

76 i‡(
i_comp
 < 0)

78 
µr_åì
 =Ö¥_åì->
åì_l
;

84  
µr_åì
->
åì_p
;

90  
NULL
;

91 
	}
}

98 
	$åì_add
(
µr_åì
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_dñëe
)
åì
 **ppr_tree;

99 (*
pfi_com∑ª
) ();

100 *
pc_u£r
;

101 (*
pfi_dñëe
) ();

103 
i_bÆ™˚
 = 0;

105 
	`•rout
(
µr_åì
, 
pc_u£r
, &
i_bÆ™˚
, 
pfi_com∑ª
, 
pfi_dñëe
);

107 
	}
}

114 
	$•rout
(
µr
, 
pc_d©a
, 
pi_bÆ™˚
, 
pfi_com∑ª
, 
pfi_dñëe
)
åì
 **ppr;

115 *
pc_d©a
;

116 *
pi_bÆ™˚
;

117 (*
pfi_com∑ª
) (*, *);

118 (*
pfi_dñëe
) (*);

120 
åì
 *
p1
, *
p2
;

121 
cmp
;

127 i‡(! *
µr
)

129 *
µr
 = 
	`ALLOCATE
(
åì
, 
TAG_UID
, "sprout");

130 (*
µr
)->
åì_l
 = 
NULL
;

131 (*
µr
)->
åì_r
 = 
NULL
;

132 (*
µr
)->
åì_b
 = 0;

133 (*
µr
)->
åì_p
 = 
pc_d©a
;

134 *
pi_bÆ™˚
 = 1;

140 
cmp
 = (*
pfi_com∑ª
Ë(
pc_d©a
, (*
µr
)->
åì_p
);

145 i‡(
cmp
 < 0)

147 
	`•rout
(&(*
µr
)->
åì_l
, 
pc_d©a
, 
pi_bÆ™˚
, 
pfi_com∑ª
, 
pfi_dñëe
);

148 i‡(*
pi_bÆ™˚
)

151  (*
µr
)->
åì_b
)

155 (*
µr
)->
åì_b
 = 0;

156 *
pi_bÆ™˚
 = 0;

160 (*
µr
)->
åì_b
 = - 1;

164 
p1
 = (*
µr
)->
åì_l
;

165 i‡(
p1
->
åì_b
 == - 1)

168 (*
µr
)->
åì_l
 = 
p1
->
åì_r
;

169 
p1
->
åì_r
 = *
µr
;

170 (*
µr
)->
åì_b
 = 0;

171 *
µr
 = 
p1
;

176 
p2
 = 
p1
->
åì_r
;

177 
p1
->
åì_r
 = 
p2
->
åì_l
;

178 
p2
->
åì_l
 = 
p1
;

180 (*
µr
)->
åì_l
 = 
p2
->
åì_r
;

181 
p2
->
åì_r
 = *
µr
;

183 i‡(
p2
->
åì_b
 == - 1)

185 (*
µr
)->
åì_b
 = 1;

189 (*
µr
)->
åì_b
 = 0;

192 i‡(
p2
->
åì_b
 == 1)

194 
p1
->
åì_b
 = - 1;

198 
p1
->
åì_b
 = 0;

200 *
µr
 = 
p2
;

203 (*
µr
)->
åì_b
 = 0;

204 *
pi_bÆ™˚
 = 0;

212 i‡(
cmp
 > 0)

214 
	`•rout
(&(*
µr
)->
åì_r
, 
pc_d©a
, 
pi_bÆ™˚
, 
pfi_com∑ª
, 
pfi_dñëe
);

215 i‡(*
pi_bÆ™˚
)

218  (*
µr
)->
åì_b
)

220 - 1: (*
µr
)->
åì_b
 = 0;

221 *
pi_bÆ™˚
 = 0;

224 (*
µr
)->
åì_b
 = 1;

227 
p1
 = (*
µr
)->
åì_r
;

228 i‡(
p1
->
åì_b
 == 1)

231 (*
µr
)->
åì_r
 = 
p1
->
åì_l
;

232 
p1
->
åì_l
 = *
µr
;

233 (*
µr
)->
åì_b
 = 0;

234 *
µr
 = 
p1
;

239 
p2
 = 
p1
->
åì_l
;

240 
p1
->
åì_l
 = 
p2
->
åì_r
;

241 
p2
->
åì_r
 = 
p1
;

243 (*
µr
)->
åì_r
 = 
p2
->
åì_l
;

244 
p2
->
åì_l
 = *
µr
;

246 i‡(
p2
->
åì_b
 == 1)

248 (*
µr
)->
åì_b
 = - 1;

252 (*
µr
)->
åì_b
 = 0;

255 i‡(
p2
->
åì_b
 == - 1)

257 
p1
->
åì_b
 = 1;

261 
p1
->
åì_b
 = 0;

264 *
µr
 = 
p2
;

267 (*
µr
)->
åì_b
 = 0;

268 *
pi_bÆ™˚
 = 0;

276 *
pi_bÆ™˚
 = 0;

277 i‡(
pfi_dñëe
)

279 (*
pfi_dñëe
Ë–(*
µr
)->
åì_p
);

281 (*
µr
)->
åì_p
 = 
pc_d©a
;

283 
	}
}

290 
	$åì_dñëe
(
µr_p
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
)
åì
 **ppr_p;

291 (*
pfi_com∑ª
) ();

292 *
pc_u£r
;

293 (*
pfi_u¨
) ();

295 
i_bÆ™˚
 = 0, 
i_u¨_ˇŒed
 = 0;

297  
	`dñëe
 (
µr_p
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
, &
i_bÆ™˚
, &
i_u¨_ˇŒed
);

298 
	}
}

305 
	$dñëe
 (
µr_p
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
, 
pi_bÆ™˚
, 
pi_u¨_ˇŒed
)
åì
 **ppr_p;

306 (*
pfi_com∑ª
) (*, *);

307 *
pc_u£r
;

308 (*
pfi_u¨
) (*);

309 *
pi_bÆ™˚
;

310 *
pi_u¨_ˇŒed
;

312 
åì
 *
¥_q
;

313 
i_comp
, 
i_ªt
;

315 i‡(*
µr_p
 =
NULL
)

319 
i_comp
 = (*
pfi_com∑ª
Ë–(*
µr_p
)->
åì_p
, 
pc_u£r
);

320 i‡(
i_comp
 > 0)

322 
i_ªt
 = 
	`dñëe
 (&(*
µr_p
)->
åì_l
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
, 
pi_bÆ™˚
, 
pi_u¨_ˇŒed
);

323 i‡(*
pi_bÆ™˚
)

325 
	`bÆ™˚L
(
µr_p
, 
pi_bÆ™˚
);

328 i‡(
i_comp
 < 0)

330 
i_ªt
 = 
	`dñëe
 (&(*
µr_p
)->
åì_r
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
, 
pi_bÆ™˚
, 
pi_u¨_ˇŒed
);

331 i‡(*
pi_bÆ™˚
)

333 
	`bÆ™˚R
(
µr_p
, 
pi_bÆ™˚
);

338 
¥_q
 = *
µr_p
;

339 i‡(
¥_q
->
åì_r
 =
NULL
)

341 *
µr_p
 = 
¥_q
->
åì_l
;

342 *
pi_bÆ™˚
 = 1;

344 i‡(
¥_q
->
åì_l
 =
NULL
)

346 *
µr_p
 = 
¥_q
->
åì_r
;

347 *
pi_bÆ™˚
 = 1;

351 
	`dñ
(&
¥_q
->
åì_l
, 
pi_bÆ™˚
, &¥_q, 
pfi_u¨
, 
pi_u¨_ˇŒed
);

352 i‡(*
pi_bÆ™˚
)

354 
	`bÆ™˚L
(
µr_p
, 
pi_bÆ™˚
);

357 
	`FREE
(
¥_q
);

358 i‡(! *
pi_u¨_ˇŒed
 && 
pfi_u¨
)

360 (*
pfi_u¨
Ë(
¥_q
->
åì_p
);

362 
i_ªt
 = 1;

364  
i_ªt
;

365 
	}
}

372 
	$dñ
(
µr_r
, 
pi_bÆ™˚
, 
µr_q
, 
pfi_u¨
, 
pi_u¨_ˇŒed
)
åì
 **ppr_r;

373 *
pi_bÆ™˚
;

374 
åì
 **
µr_q
;

375 (*
pfi_u¨
) (*);

376 *
pi_u¨_ˇŒed
;

378 i‡–(*
µr_r
)->
åì_r
 !
NULL
)

380 
	`dñ
(&(*
µr_r
)->
åì_r
, 
pi_bÆ™˚
, 
µr_q
, 
pfi_u¨
, 
pi_u¨_ˇŒed
);

381 i‡(*
pi_bÆ™˚
)

383 
	`bÆ™˚R
(
µr_r
, 
pi_bÆ™˚
);

388 i‡(
pfi_u¨
)

390 (*
pfi_u¨
Ë–(*
µr_q
)->
åì_p
);

392 *
pi_u¨_ˇŒed
 = 1;

393 (*
µr_q
)->
åì_p
 = (*
µr_r
)->tree_p;

394 *
µr_q
 = *
µr_r
;

395 *
µr_r
 = (*µr_r)->
åì_l
;

396 *
pi_bÆ™˚
 = 1;

400 
	}
}

407 
	$bÆ™˚L
(
åì
 **
µr_p
, *
pi_bÆ™˚
)

409 
åì
 *
p1
, *
p2
;

410 
b1
, 
b2
;

412  (*
µr_p
)->
åì_b
)

414 - 1: (*
µr_p
)->
åì_b
 = 0;

417 (*
µr_p
)->
åì_b
 = 1;

418 *
pi_bÆ™˚
 = 0;

421 
p1
 = (*
µr_p
)->
åì_r
;

422 
b1
 = 
p1
->
åì_b
;

423 i‡(
b1
 >= 0)

425 (*
µr_p
)->
åì_r
 = 
p1
->
åì_l
;

426 
p1
->
åì_l
 = *
µr_p
;

427 i‡(
b1
 == 0)

429 (*
µr_p
)->
åì_b
 = 1;

430 
p1
->
åì_b
 = - 1;

431 *
pi_bÆ™˚
 = 0;

435 (*
µr_p
)->
åì_b
 = 0;

436 
p1
->
åì_b
 = 0;

438 *
µr_p
 = 
p1
;

442 
p2
 = 
p1
->
åì_l
;

443 
b2
 = 
p2
->
åì_b
;

444 
p1
->
åì_l
 = 
p2
->
åì_r
;

445 
p2
->
åì_r
 = 
p1
;

446 (*
µr_p
)->
åì_r
 = 
p2
->
åì_l
;

447 
p2
->
åì_l
 = *
µr_p
;

448 i‡(
b2
 == 1)

450 (*
µr_p
)->
åì_b
 = - 1;

454 (*
µr_p
)->
åì_b
 = 0;

456 i‡(
b2
 == - 1)

458 
p1
->
åì_b
 = 1;

462 
p1
->
åì_b
 = 0;

464 *
µr_p
 = 
p2
;

465 
p2
->
åì_b
 = 0;

469 
	}
}

476 
	$bÆ™˚R
(
åì
 **
µr_p
, *
pi_bÆ™˚
)

478 
åì
 *
p1
, *
p2
;

479 
b1
, 
b2
;

481  (*
µr_p
)->
åì_b
)

484 (*
µr_p
)->
åì_b
 = 0;

487 (*
µr_p
)->
åì_b
 = - 1;

488 *
pi_bÆ™˚
 = 0;

490 - 1: 
p1
 = (*
µr_p
)->
åì_l
;

491 
b1
 = 
p1
->
åì_b
;

492 i‡(
b1
 <= 0)

494 (*
µr_p
)->
åì_l
 = 
p1
->
åì_r
;

495 
p1
->
åì_r
 = *
µr_p
;

496 i‡(
b1
 == 0)

498 (*
µr_p
)->
åì_b
 = - 1;

499 
p1
->
åì_b
 = 1;

500 *
pi_bÆ™˚
 = 0;

504 (*
µr_p
)->
åì_b
 = 0;

505 
p1
->
åì_b
 = 0;

507 *
µr_p
 = 
p1
;

511 
p2
 = 
p1
->
åì_r
;

512 
b2
 = 
p2
->
åì_b
;

513 
p1
->
åì_r
 = 
p2
->
åì_l
;

514 
p2
->
åì_l
 = 
p1
;

515 (*
µr_p
)->
åì_l
 = 
p2
->
åì_r
;

516 
p2
->
åì_r
 = *
µr_p
;

517 i‡(
b2
 == - 1)

519 (*
µr_p
)->
åì_b
 = 1;

523 (*
µr_p
)->
åì_b
 = 0;

525 i‡(
b2
 == 1)

527 
p1
->
åì_b
 = - 1;

531 
p1
->
åì_b
 = 0;

533 *
µr_p
 = 
p2
;

534 
p2
->
åì_b
 = 0;

538 
	}
}

545 
	$åì_åav
(
µr_åì
, 
pfi_u¨
)
åì
 **ppr_tree;

546 (*
pfi_u¨
) (*);

548 i‡(! *
µr_åì
)

553 i‡(!
	`åì_åav
(&(**
µr_åì
).
åì_l
, 
pfi_u¨
) )

557 i‡(!(*
pfi_u¨
Ë–(**
µr_åì
).
åì_p
) )

561 i‡(!
	`åì_åav
(&(**
µr_åì
).
åì_r
, 
pfi_u¨
) )

566 
	}
}

573 
	$åì_mung
(
µr_åì
, 
pfi_u¨
)
åì
 **ppr_tree;

574 (*
pfi_u¨
) (*);

576 i‡(*
µr_åì
)

578 
	`åì_mung
(&(**
µr_åì
).
åì_l
, 
pfi_u¨
);

579 
	`åì_mung
(&(**
µr_åì
).
åì_r
, 
pfi_u¨
);

580 i‡(
pfi_u¨
)

582 (*
pfi_u¨
Ë–(**
µr_åì
).
åì_p
);

584 
	`FREE
(*
µr_åì
);

585 *
µr_åì
 = 
NULL
;

588 
	}
}

	@src/backend.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"backíd.h
"

4 
	~"comm.h
"

5 
	~"ª∂a˚_¥ogøm.h
"

6 
	~"debug.h
"

7 
	~"sw≠.h
"

8 
	~"p‹t.h
"

9 
	~"löt.h
"

10 
	~<sys/evít.h
>

12 #ifde‡
WIN32


13 
	~<¥o˚ss.h
>

14 
CDECL
 
Æ¨m_lo›
(*);

17 
îr‹_c⁄ãxt_t
 *
	gcuºít_îr‹_c⁄ãxt
 = 0;

22 
	gcuºít_time
;

24 
	ghóπ_bót_Êag
 = 0;

25 
obje˘_t
 *
	gcuºít_hóπ_bót
;

27 
	göã∫Æ_£rvî
 = 0;

39 
	$˛ór_°©e
()

41 
cuºít_obje˘
 = 0;

42 
comm™d_givî
 = 0;

43 
cuºít_öãø˘ive
 = 0;

44 
¥evious_ob
 = 0;

45 
cuºít_¥og
 = 0;

46 
ˇŒî_ty≥
 = 0;

47 
	`ª£t_machöe
(0);

48 
	}
}

50 
	$log⁄
(
obje˘_t
 *
ob
)

53 
	`≠∂y
(
APPLY_LOGON
, 
ob
, 0, 
ORIGIN_DRIVER
);

55 
	}
}

61 
	gevÆ_co°
;

62 
	gf‹bid_logö
;

63 
	gf‹bid_logö_Êag
;

80 
obje˘_t
 *
	mob
;

81 
	mhóπ_bót_ticks
;

82 
	mtime_to_hóπ_bót
;

83 } 
	thóπ_bót_t
;

85 
hóπ_bót_t
 *
	ghóπ_bóts
 = 0;

86 
	gmax_hóπ_bóts
 = 0;

87 
	ghóπ_bót_ödex
 = 0;

88 
	gnum_hb_objs
 = 0;

89 
	gnum_hb_to_do
 = 0;

91 
	gnum_hb_ˇŒs
 = 0;

92 
	g≥rc_hb_¥obes
 = 100.0;

94 
	$quîy_hóπ_bót
(
obje˘_t
 *
ob
)

96 
ödex
;

98 i‡(!(
ob
->
Êags
 &
O_HEART_BEAT
) )

102 
ödex
 = 
num_hb_objs
;

103 
ödex
--)

105 i‡(
hóπ_bóts
[
ödex
].
ob
 == ob)

107  
hóπ_bóts
[
ödex
].
time_to_hóπ_bót
;

111 
	}
}

118 
	$£t_hóπ_bót
(
obje˘_t
 *
ob
, 
to
)

120 
ödex
;

122 i‡(
ob
->
Êags
 &
O_DESTRUCTED
)

127 i‡(!
to
)

129 
num
;

131 
ödex
 = 
num_hb_objs
;

132 
ödex
--)

134 i‡(
hóπ_bóts
[
ödex
].
ob
 == ob)

139 i‡(
ödex
 < 0)

144 i‡(
num_hb_to_do
)

146 i‡(
ödex
 <
hóπ_bót_ödex
)

148 
hóπ_bót_ödex
--;

150 i‡(
ödex
 < 
num_hb_to_do
)

152 
num_hb_to_do
--;

156 i‡–(
num
 = (
num_hb_objs
 - (
ödex
 + 1) ) ) )

158 
	`memmove
(
hóπ_bóts
 + 
ödex
, hóπ_bót†+ (ödex + 1), 
num
 *(
hóπ_bót_t
) );

161 
num_hb_objs
--;

162 
ob
->
Êags
 &~
O_HEART_BEAT
;

166 i‡(
ob
->
Êags
 &
O_HEART_BEAT
)

168 i‡(
to
 < 0)

173 
ödex
 = 
num_hb_objs
;

174 
ödex
--)

176 i‡(
hóπ_bóts
[
ödex
].
ob
 == ob)

178 
hóπ_bóts
[
ödex
].
time_to_hóπ_bót
 = hóπ_bóts[ödex].
hóπ_bót_ticks
 = 
to
;

182 
	`DEBUG_CHECK
(
ödex
 < 0, "In heart_beatÜist couldn't findÉnabled object!\n");

186 
hóπ_bót_t
 *
hb
;

188 i‡(!
max_hóπ_bóts
)

190 
hóπ_bóts
 = 
	`CALLOCATE
(
max_hóπ_bóts
 = 
HEART_BEAT_CHUNK
, 
hóπ_bót_t
, 
TAG_HEART_BEAT
, "set_heart_beat: 1");

192 i‡(
num_hb_objs
 =
max_hóπ_bóts
)

194 
max_hóπ_bóts
 +
HEART_BEAT_CHUNK
;

195 
hóπ_bóts
 = 
	`RESIZE
(hóπ_bóts, 
max_hóπ_bóts
, 
hóπ_bót_t
, 
TAG_HEART_BEAT
, "set_heart_beat: 1");

198 
hb
 = &
hóπ_bóts
[
num_hb_objs
++];

199 
hb
->
ob
 = ob;

200 i‡(
to
 < 0)

202 
to
 = 1;

204 
hb
->
time_to_hóπ_bót
 = 
to
;

205 
hb
->
hóπ_bót_ticks
 = 
to
;

206 
ob
->
Êags
 |
O_HEART_BEAT
;

210 
	}
}

216 
	$hóπ_bót_°©us
(
outbuf„r_t
 *
ob
, 
vîbo£
)

218 
buf
[20];

220 i‡(
vîbo£
 == 1)

222 
	`outbuf_add
(
ob
, "**The information of object's heartbeat:**\n");

223 
	`outbuf_add
(
ob
, "*************************\n");

224 
	`outbuf_addv
(
ob
, "Numbî o‡hóπbóàobje˘s: %d, sèπs: %d\n", 
num_hb_objs
, 
num_hb_ˇŒs
);

228 
	`•rötf
(
buf
, "%.2f", 
≥rc_hb_¥obes
);

229 
	`outbuf_addv
(
ob
, "Pî˚¡agêo‡HB: %s\n", 
buf
);

232 
	}
}

236 
INLINE
 
	$ªmove_de°ru˘ed_obje˘s
()

238 
obje˘_t
 *
ob
, *
√xt
;

240 i‡(
obj_li°_ª∂a˚
)

242 
	`ª∂a˚_¥ogøms
();

244 
ob
 = 
obj_li°_de°ru˘
; ob; ob = 
√xt
)

246 
√xt
 = 
ob
->
√xt_Æl
;

247 
	`de°ru˘2
(
ob
);

249 
obj_li°_de°ru˘
 = 
NULL
;

250 
	}
}

252 
	glﬂd_av
 = 0.0;

254 
	$upd©e_lﬂd_av
()

256 
œ°_time
;

257 
n
;

258 
c
;

259 
acc
 = 0;

261 
acc
++;

262 i‡(
cuºít_time
 =
œ°_time
)

266 
n
 = 
cuºít_time
 - 
œ°_time
;

267 i‡(
n
 < 
NUM_CONSTS
)

269 
c
 = 
c⁄°s
[
n
];

273 
c
 = 
	`exp
–- 
n
 / 900.0);

275 
lﬂd_av
 = 
c
 *Üﬂd_av + 
acc
 *(1-cË/ 
n
;

276 
œ°_time
 = 
cuºít_time
;

277 
acc
 = 0;

278 
	}
}

280 
	gcompûe_av
 = 0.0;

282 
	$upd©e_compûe_av
(
löes
)

284 
œ°_time
;

285 
n
;

286 
c
;

287 
acc
 = 0;

289 
acc
 +
löes
;

290 i‡(
cuºít_time
 =
œ°_time
)

294 
n
 = 
cuºít_time
 - 
œ°_time
;

295 i‡(
n
 < 
NUM_CONSTS
)

297 
c
 = 
c⁄°s
[
n
];

301 
c
 = 
	`exp
–- 
n
 / 900.0);

303 
compûe_av
 = 
c
 * compûe_av + 
acc
 *(1-cË/ 
n
;

304 
œ°_time
 = 
cuºít_time
;

305 
acc
 = 0;

306 
	}
}

308 *
	$quîy_lﬂd_av
()

310 
buff
[100];

311 
	`•rötf
(
buff
, "%.2‡cmds/s, %.2‡löes/s", 
lﬂd_av
, 
compûe_av
);

312  (
buff
);

313 
	}
}

315 #ifde‡
F_HEART_BEATS


316 
¨øy_t
 *
	$gë_hóπ_bóts
()

318 
n
 = 
num_hb_objs
;

319 
hóπ_bót_t
 *
hb
 = 
hóπ_bóts
;

320 
¨øy_t
 *
¨r
;

322 
¨r
 = 
	`Æloˇã_em±y_¨øy
(
n
);

323 
n
--)

325 
¨r
->
ôem
[
n
].
ty≥
 = 
T_OBJECT
;

326 
¨r
->
ôem
[
n
].
u
.
ob
 = 
hb
->ob;

327 
	`add_ªf
(
hb
->
ob
, "get_heart_beats");

328 
hb
++;

330  
¨r
;

331 
	}
}

	@src/binaries.c

10 
	#SUPPRESS_COMPILER_INLINES


	)

11 
	~"°d.h
"

12 
	~"Õc_ö˛.h
"

13 
	~"fûe_ö˛.h
"

14 
	~"compûî.h
"

15 
	~"bö¨õs.h
"

16 
	~"Àx.h
"

17 
	~"backíd.h
"

18 
	~"sw≠.h
"

19 
	~"qs‹t.h
"

20 
	~"compûe_fûe.h
"

21 
	~"hash.h
"

23 
	~<time.h
>

24 
	~<°rög.h
>

27 #ifde‡
WIN32


28 
	~<dúe˘.h
>

31 #ifde‡
BINARIES


33 *
	gmagic_id
 = "QTZ_ServerEngine";

34 
time_t
 
	gdrivî_id
;

35 
time_t
 
	gc⁄fig_id
;

37 
	gdrivî_«me
[512];

39 
∑tch_out
(
¥ogøm_t
 *, *, );

40 
∑tch_ö
(
¥ogøm_t
 *, *, );

41 
°r_ˇ£_cmp
(*, *);

42 
check_times
(
time_t
, *);

43 
do_°©
(*, 
°©
 *, *);

45 *
	gtmp_gbl_«me
;

46 
	$comp_debug_mesßge
(*
«me
)

48 
	`debug_mesßge
("∂ó£ check : %†%s", 
tmp_gbl_«me
, 
«me
);

49 
	}
}

56 
	$do_°©
(*
‚ame
, 
°©
 *
°
, *
∑th«me
)

58 
i
;

59 
buf
[256];

61 i‡–(
i
 = 
	`°©
(
‚ame
, 
°
) ) != - 1)

63 i‡(
∑th«me
)

65 
	`°r˝y
(
∑th«me
, 
‚ame
);

67  
i
;

70 i‡(!
∑th«me
)

72 #ifde‡
LATTICE


73 i‡(
	`°rchr
(
CONFIG_FILE_DIR
, ':') )

75 
	`•rötf
(
buf
, "%s%s", 
CONFIG_FILE_DIR
, 
‚ame
);

80 
	`•rötf
(
buf
, "%s/%s", 
CONFIG_FILE_DIR
, 
‚ame
);

82 i‡–(
i
 = 
	`°©
(
buf
, 
°
) ) != - 1)

84  
i
;

88 #ifde‡
LATTICE


89 i‡(
	`°rchr
(
BIN_DIR
, ':') )

91 
	`•rötf
(
buf
, "%s%s", 
BIN_DIR
, 
‚ame
);

96 
	`•rötf
(
buf
, "%s/%s", 
BIN_DIR
, 
‚ame
);

99 i‡–(
i
 = 
	`°©
(
buf
, 
°
) ) != - 1)

101 i‡(
∑th«me
)

103 
	`°r˝y
(
∑th«me
, 
buf
);

105  
i
;

108 
	}
}

110 
	$ßve_bö¨y
(
¥ogøm_t
 *
¥og
, 
mem_block_t
 *
ö˛udes
, mem_block_à*
∑tches
)

112 
fûe_«me_buf
[200];

113 *
fûe_«me
 = 
fûe_«me_buf
;

114 
FILE
 *
f
;

115 
i
, 
tmp
;

117 
Àn
;

118 
¥ogøm_t
 *
p
;

119 
°©
 
°
;

138 
	`°r˝y
(
fûe_«me
, 
SAVE_BINARIES
);

139 i‡(
fûe_«me
[0] == '/')

141 
fûe_«me
++;

143 i‡(
	`°©
(
fûe_«me
, &
°
) == - 1)

147 
	`°rˇt
(
fûe_«me
, "/");

148 
	`°rˇt
(
fûe_«me
, 
¥og
->
«me
);

149 
Àn
 = 
	`°æí
(
fûe_«me
);

151 
fûe_«me
[
Àn
 - 1] = 'b';

153 i‡(!(
f
 = 
	`¸dú_f›í
(
fûe_«me
) ) )

158 i‡(
comp_Êag
)

160 
	`debug_mesßge
(" saving binary ... ");

161 #ifde‡
LATTICE


162 
	`fÊush
(
°dîr
);

169 i‡(
	`fwrôe
(
magic_id
, 
	`°æí
(magic_id), 1, 
f
Ë!1 || fwrôe–(*Ë&
drivî_id
,  drivî_id, 1, fË!1 || fwrôe–(*Ë&
c⁄fig_id
,  config_id, 1, f) != 1)

172 
	`debug_mesßge
("writeÉrror when saveÅo binary.\n");

173 
	`f˛o£
(
f
);

174 
	`u∆ök
(
fûe_«me
);

180 
Àn
 = 
ö˛udes
->
cuºít_size
;

181 
	`fwrôe
–(*Ë&
Àn
, Üí, 1, 
f
);

182 
	`fwrôe
(
ö˛udes
->
block
, in˛udes->
cuºít_size
, 1, 
f
);

187 
p
 = (
¥ogøm_t
*)
	`DXALLOC
(
¥og
->
tŸÆ_size
, 
TAG_TEMPORARY
, "save_binary");

189 
	`loˇã_out
(
¥og
);

190 
	`mem˝y
(
p
, 
¥og
,Örog->
tŸÆ_size
);

191 
	`loˇã_ö
(
¥og
);

192 i‡(
∑tches
->
cuºít_size
)

194 
	`loˇã_ö
(
p
);

195 
	`∑tch_out
(
p
, (*)
∑tches
->
block
,Ö©ches->
cuºít_size
 / () );

196 
	`loˇã_out
(
p
);

202 
Àn
 = 
	`SHARED_STRLEN
(
p
->
«me
);

203 
	`fwrôe
–(*Ë&
Àn
, Üí, 1, 
f
);

204 
	`fwrôe
(
p
->
«me
, (), 
Àn
, 
f
);

206 
	`fwrôe
–(*Ë&
p
->
tŸÆ_size
, Ö->tŸÆ_size, 1, 
f
);

207 
	`fwrôe
–(*)
p
,Ö->
tŸÆ_size
, 1, 
f
);

208 
	`FREE
(
p
);

209 
p
 = 
¥og
;

212 
i
 = 0; i < ()
p
->
num_öhîôed
; i++)

214 
Àn
 = 
	`SHARED_STRLEN
(
p
->
öhîô
[
i
].
¥og
->
«me
);

215 
	`fwrôe
–(*Ë&
Àn
, Üí, 1, 
f
);

216 
	`fwrôe
(
p
->
öhîô
[
i
].
¥og
->
«me
, (), 
Àn
, 
f
);

220 
i
 = 0; i < ()
p
->
num_°rögs
; i++)

222 
tmp
 = 
	`SHARED_STRLEN
(
p
->
°rögs
[
i
]);

223 i‡(
tmp
 > ()
USHRT_MAX
)

226 
	`f˛o£
(
f
);

227 
	`u∆ök
(
fûe_«me
);

229 
	`îr‹
("Can't saveÅooÜong string of binary.\n");

232 
Àn
 = 
tmp
;

233 
	`fwrôe
–(*Ë&
Àn
, Üí, 1, 
f
);

234 
	`fwrôe
(
p
->
°rögs
[
i
], (), 
Àn
, 
f
);

238 
i
 = 0; i < ()
p
->
num_v¨übÀs_deföed
; i++)

240 
Àn
 = 
	`SHARED_STRLEN
(
p
->
v¨übÀ_èbÀ
[
i
]);

241 
	`fwrôe
–(*Ë&
Àn
, Üí, 1, 
f
);

242 
	`fwrôe
(
p
->
v¨übÀ_èbÀ
[
i
], (), 
Àn
, 
f
);

246 
i
 = 0; i < ()
p
->
num_fun˘i⁄s_deföed
; i++)

248 
Àn
 = 
	`SHARED_STRLEN
(
p
->
fun˘i⁄_èbÀ
[
i
].
«me
);

249 
	`fwrôe
–(*Ë&
Àn
, Üí, 1, 
f
);

250 
	`fwrôe
(
p
->
fun˘i⁄_èbÀ
[
i
].
«me
, (), 
Àn
, 
f
);

254 i‡(
p
->
löe_öfo
)

256 
Àn
 = 
p
->
fûe_öfo
[0];

260 
Àn
 = 0;

262 
	`fwrôe
–(*Ë&
Àn
, Üí, 1, 
f
);

263 
	`fwrôe
–(*)
p
->
fûe_öfo
, 
Àn
, 1, 
f
);

268 
Àn
 = 
∑tches
->
cuºít_size
;

269 
	`fwrôe
–(*Ë&
Àn
, Üí, 1, 
f
);

270 
	`fwrôe
(
∑tches
->
block
,Ö©ches->
cuºít_size
, 1, 
f
);

272 
	`f˛o£
(
f
);

281 
	}
}

283 
¥ogøm_t
 *
	gcomp_¥og
;

285 
	$com∑ª_compûî_funcs
(*
x
, *
y
)

287 *
n1
 = 
comp_¥og
->
fun˘i⁄_èbÀ
[ *
x
].
«me
;

288 *
n2
 = 
comp_¥og
->
fun˘i⁄_èbÀ
[ *
y
].
«me
;

291 i‡(
n1
[0] == '#')

293 i‡(
n2
[0] == '#')

299 i‡(
n2
[0] == '#')

304 i‡(
n1
 < 
n2
)

308 i‡(
n1
 > 
n2
)

313 
	}
}

315 
	$s‹t_fun˘i⁄_èbÀ
(
¥ogøm_t
 *
¥og
)

317 *
ãmp
, *
övî£
, *
s‹âmp
, *
övtmp
;

318 
i
;

319 
num
 = 
¥og
->
num_fun˘i⁄s_deföed
;

321 i‡(!
num
)

326 
ãmp
 = 
	`CALLOCATE
(
num
, , 
TAG_TEMPORARY
, "copy_and_sort_function_table");

327 
i
 = 0; i < 
num
; i++)

329 
ãmp
[
i
] = i;

332 
comp_¥og
 = 
¥og
;

333 
	`quickS‹t
(
ãmp
, 
num
, (), 
com∑ª_compûî_funcs
);

335 
övî£
 = 
	`CALLOCATE
(
num
, , 
TAG_TEMPORARY
, "copy_and_sort_function_table");

336 
i
 = 0; i < 
num
; i++)

338 
övî£
[
ãmp
[
i
]] = i;

349 
s‹âmp
 = 
	`CALLOCATE
(
num
, , 
TAG_TEMPORARY
, "copy_and_sort_function_table");

350 
övtmp
 = 
	`CALLOCATE
(
num
, , 
TAG_TEMPORARY
, "copy_and_sort_function_table");

351 
i
 = 0; i < 
num
; i++)

353 
s‹âmp
[
i
] = 
ãmp
[i];

354 
övtmp
[
i
] = 
övî£
[i];

357 
i
 = 0; i < 
num
 - 1; i++)

361 
compûî_fun˘i⁄_t
 
c·
;

362 
whîe
 = 
s‹âmp
[
i
];

364 i‡(
i
 =
whîe
)

370 
c·
 = 
¥og
->
fun˘i⁄_èbÀ
[
i
];

371 
¥og
->
fun˘i⁄_èbÀ
[
i
] =Örog->fun˘i⁄_èbÀ[
whîe
];

372 
	`DEBUG_CHECK
(
s‹âmp
[
övtmp
[
i
]] != i, "sorttmp is messed up.");

373 
s‹âmp
[
övtmp
[
i
]] = 
whîe
;

374 
övtmp
[
whîe
] = invtmp[
i
];

375 
¥og
->
fun˘i⁄_èbÀ
[
whîe
] = 
c·
;

378 #ifde‡
COMPRESS_FUNCTION_TABLES


380 
com¥es£d_off£t_èbÀ_t
 *
c·p
 = 
¥og
->
fun˘i⁄_com¥es£d
;

381 
f_ov
 = 
c·p
->
fú°_ovîlﬂd
;

382 
f_def
 = 
c·p
->
fú°_deföed
;

383 
n_ov
 = 
f_def
 - 
c·p
->
num_com¥es£d
;

384 
n_def
 = 
¥og
->
num_fun˘i⁄s_tŸÆ
 - 
f_def
;

385 
n_ªÆ
 = 
f_def
 - 
c·p
->
num_dñëed
;

387 
i
 = 0; i < 
n_ov
; i++)

389 
j
 = 
c·p
->
ödex
[
i
];

390 
ri
 = 
f_ov
 + 
i
;

391 i‡(
j
 == 255)

395 i‡(!(
¥og
->
fun˘i⁄_Êags
[
ri
] &
NAME_INHERITED
) )

397 
ﬁdix
 = 
¥og
->
fun˘i⁄_off£ts
[
j
].
def
.
f_ödex
;

399 
	`DEBUG_CHECK
(
ﬁdix
 >
num
, "Function index is out of bounds");

400 
¥og
->
fun˘i⁄_off£ts
[
j
].
def
.
f_ödex
 = 
övî£
[
ﬁdix
];

403 
i
 = 0; i < 
n_def
; i++)

405 
ri
 = 
f_def
 + 
i
;

406 i‡(!(
¥og
->
fun˘i⁄_Êags
[
ri
] &
NAME_INHERITED
) )

408 
ﬁdix
 = 
¥og
->
fun˘i⁄_off£ts
[
n_ªÆ
 + 
i
].
def
.
f_ödex
;

411 
	`DEBUG_CHECK
(
ﬁdix
 >
num
, "Function index is out of bounds");

412 
¥og
->
fun˘i⁄_off£ts
[
n_ªÆ
 + 
i
].
def
.
f_ödex
 = 
övî£
[
ﬁdix
];

418 
num_ru¡ime
 = 
¥og
->
num_fun˘i⁄s_tŸÆ
;

419 
i
 = 0; i < 
num_ru¡ime
; i++)

421 i‡(!(
¥og
->
fun˘i⁄_Êags
[
i
] &
NAME_INHERITED
) )

423 
ﬁdix
 = 
¥og
->
fun˘i⁄_off£ts
[
i
].
def
.
f_ödex
;

426 
	`DEBUG_CHECK
(
ﬁdix
 >
num
, "Function index is out of bounds");

427 
¥og
->
fun˘i⁄_off£ts
[
i
].
def
.
f_ödex
 = 
övî£
[
ﬁdix
];

433 i‡(
¥og
->
ty≥_°¨t
)

435 
i
 = 0; i < 
num
; i++)

437 
¥og
->
ty≥_°¨t
[
i
] =Örog->ty≥_°¨t[
ãmp
[i]];

441 
	`FREE
(
s‹âmp
);

442 
	`FREE
(
övtmp
);

443 
	`FREE
(
ãmp
);

444 
	`FREE
(
övî£
);

445 
	}
}

447 
	#ALLOC_BUF
(
size
) \

448 i‡((
size
Ë> 
buf_size
Ë{ 
	`FREE
(
buf
); bu‡
	`DXALLOC
(buf_sizêsize, 
TAG_TEMPORARY
, "ALLOC_BUF"); }

	)

451 
	#OUT_OF_DATE
 0

	)

453 
¥ogøm_t
 *
	$öt_lﬂd_bö¨y
(*
«me
)

455 
fûe_«me_buf
[400];

456 *
buf
, *
öame
, *
fûe_«me
 = 
fûe_«me_buf
, *
fûe_«me_two
 = &file_name_buf[200];

457 
FILE
 *
f
;

458 
time_t
 
tmp_i
;

459 
i
, 
buf_size
, 
ûí
;

460 
time_t
 
mtime
;

462 
Àn
;

463 
¥ogøm_t
 *
p
, *
¥og
;

464 
obje˘_t
 *
ob
;

465 
°©
 
°
;

468 
num_∑r£_îr‹
 = 0;

470 
	`•rötf
(
fûe_«me
, "%s/%s", 
SAVE_BINARIES
, 
«me
);

471 i‡(
fûe_«me
[0] == '/')

473 
fûe_«me
++;

475 
Àn
 = 
	`°æí
(
fûe_«me
);

477 
fûe_«me
[
Àn
 - 1] = 'b';

479 i‡(
	`°©
(
fûe_«me
, &
°
) != - 1)

481 
mtime
 = 
°
.
°_mtime
;

485  
OUT_OF_DATE
;

488 i‡(!(
f
 = 
	`f›í
(
fûe_«me
, 
FOPEN_READ
) ) )

490  
OUT_OF_DATE
;

493 
tmp_gbl_«me
 = 
«me
;

509 i‡(
	`check_times
(
mtime
, 
«me
) == 0)

512 i‡(
comp_Êag
)

514 
	`comp_debug_mesßge
("source file isÇew.\n");

516 
	`f˛o£
(
f
);

517  
OUT_OF_DATE
;

518 } 
buf
 = 
	`DXALLOC
(
buf_size
 = 
SMALL_STRING_SIZE
, 
TAG_TEMPORARY
, "ALLOC_BUF");

524 i‡(
	`‰ód
(
buf
, 
	`°æí
(
magic_id
), 1, 
f
Ë!1 || 
	`°∫cmp
(buf, magic_id, strlen(magic_id) ) != 0)

526 i‡(
comp_Êag
)

528 
	`comp_debug_mesßge
("magic id isÉrror?\n");

530 
	`f˛o£
(
f
);

531 
	`FREE
(
buf
);

532  
OUT_OF_DATE
;

535 i‡–(
	`‰ód
–(*Ë&
tmp_i
, Åmp_i, 1, 
f
Ë!1 || 
drivî_id
 !=Åmp_i) )

537 i‡(
comp_Êag
)

539 
	`comp_debug_mesßge
("driver has changed!\n");

541 
	`f˛o£
(
f
);

542 
	`FREE
(
buf
);

543  
OUT_OF_DATE
;

547 
	`‰ód
((*Ë&
tmp_i
, Åmp_i, 1, 
f
);

552 
	`‰ód
–(*Ë&
Àn
, Üí, 1, 
f
);

553 
	`ALLOC_BUF
(
Àn
);

554 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

555 
öame
 = 
buf
; i«mê< bu‡+ 
Àn
; i«mê+
	`°æí
(iname) + 1)

557 i‡(
	`check_times
(
mtime
, 
öame
) == 0)

559 i‡(
comp_Êag
)

561 
	`comp_debug_mesßge
("include file change!\n");

563 
	`f˛o£
(
f
);

564 
	`FREE
(
buf
);

565  
OUT_OF_DATE
;

570 
	`‰ód
–(*Ë&
Àn
, Üí, 1, 
f
);

571 
	`ALLOC_BUF
(
Àn
 + 1);

572 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

573 
buf
[
Àn
] = '\0';

574 i‡(
	`°rcmp
(
«me
, 
buf
) != 0)

576 i‡(
comp_Êag
)

578 
	`debug_mesßge
("Thêbö¨yÇamêi†öc⁄si°íàwôh fûe: %†v†%s.\n", 
«me
, 
buf
);

580 
	`f˛o£
(
f
);

581 
	`FREE
(
buf
);

582  
OUT_OF_DATE
;

587 
	`‰ód
–(*Ë&
ûí
,  iÀn, 1, 
f
);

588 
p
 = (
¥ogøm_t
*)
	`DXALLOC
(
ûí
, 
TAG_PROGRAM
, "load_binary");

589 
	`‰ód
–(*)
p
, 
ûí
, 1, 
f
);

590 
	`loˇã_ö
(
p
);

591 
p
->
«me
 = 
	`make_sh¨ed_°rög
(name);

594 
i
 = 0; i < ()
p
->
num_öhîôed
; i++)

596 
check_ªt1
, 
check_ªt2
;

598 
	`‰ód
–(*Ë&
Àn
, Üí, 1, 
f
);

599 
	`ALLOC_BUF
(
Àn
 + 1);

600 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

601 
buf
[
Àn
] = '\0';

607 
	`•rötf
(
fûe_«me_two
, "%s/%s", 
SAVE_BINARIES
, 
buf
);

608 i‡(
fûe_«me_two
[0] == '/')

610 
fûe_«me_two
++;

612 
Àn
 = 
	`°æí
(
fûe_«me_two
);

613 
fûe_«me_two
[
Àn
 - 1] = 'b';

615 
check_ªt1
 = 
	`check_times
(
mtime
, 
buf
);

616 
check_ªt2
 = 
	`check_times
(
mtime
, 
fûe_«me_two
);

617 i‡(
check_ªt1
 == 0 ||

618 
check_ªt2
 == 0)

631 
	`comp_debug_mesßge
("Inherited source changed.\n");

633 
	`f˛o£
(
f
);

634 
	`‰ì_°rög
(
p
->
«me
);

635 
	`FREE
(
p
);

636 
	`FREE
(
buf
);

637  
OUT_OF_DATE
;

640 
ob
 = 
	`föd_obje˘2
(
buf
);

641 i‡(!
ob
)

643 i‡(
comp_Êag
)

647 
ob
 = 
	`föd_obje˘
(
buf
);

648 i‡(
ob
 =
NULL
)

650 
	`comp_debug_mesßge
("The inheritedÖrog is missed.\n");

653 
	`f˛o£
(
f
);

654 
	`‰ì_°rög
(
p
->
«me
);

655 
	`FREE
(
p
);

656 
öhîô_fûe
 = 
buf
;

659 
p
->
öhîô
[
i
].
¥og
 = 
ob
->prog;

663 
i
 = 0; i < ()
p
->
num_°rögs
; i++)

665 
	`‰ód
–(*Ë&
Àn
, Üí, 1, 
f
);

666 
	`ALLOC_BUF
(
Àn
 + 1);

667 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

668 
buf
[
Àn
] = '\0';

669 
p
->
°rögs
[
i
] = 
	`make_sh¨ed_°rög
(
buf
);

673 
i
 = 0; i < ()
p
->
num_v¨übÀs_deföed
; i++)

675 
	`‰ód
–(*Ë&
Àn
, Üí, 1, 
f
);

676 
	`ALLOC_BUF
(
Àn
 + 1);

677 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

678 
buf
[
Àn
] = '\0';

679 
p
->
v¨übÀ_èbÀ
[
i
] = 
	`make_sh¨ed_°rög
(
buf
);

683 
i
 = 0; i < ()
p
->
num_fun˘i⁄s_deföed
; i++)

685 
	`‰ód
–(*Ë&
Àn
, Üí, 1, 
f
);

686 
	`ALLOC_BUF
(
Àn
 + 1);

687 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

688 
buf
[
Àn
] = '\0';

689 
p
->
fun˘i⁄_èbÀ
[
i
].
«me
 = 
	`make_sh¨ed_°rög
(
buf
);

691 
	`s‹t_fun˘i⁄_èbÀ
(
p
);

694 
	`‰ód
–(*Ë&
Àn
, Üí, 1, 
f
);

695 
p
->
fûe_öfo
 = (*)
	`DXALLOC
(
Àn
, 
TAG_LINENUMBERS
, "load binary");

696 
	`‰ód
–(*)
p
->
fûe_öfo
, 
Àn
, 1, 
f
);

697 
p
->
löe_öfo
 = (*Ë&p->
fûe_öfo
[p->file_info[1]];

700 
	`‰ód
–(*Ë&
Àn
, Üí, 1, 
f
);

701 
	`ALLOC_BUF
(
Àn
);

702 
	`‰ód
(
buf
, 
Àn
, 1, 
f
);

704 
	`∑tch_ö
(
p
, (*)
buf
, 
Àn
 / () );

706 
	`f˛o£
(
f
);

707 
	`FREE
(
buf
);

712 
¥og
 = 
p
;

713 
¥og
->
id_numbî
 = 
	`gë_id_numbî
();

715 
tŸÆ_¥og_block_size
 +
¥og
->
tŸÆ_size
;

716 
tŸÆ_num_¥og_blocks
 += 1;

718 
	`sw≠_löe_numbîs
(
¥og
);

719 
	`ª„ªn˚_¥og
(
¥og
, "load_binary");

720 
i
 = 0; ()ò< 
¥og
->
num_öhîôed
; i++)

722 
	`ª„ªn˚_¥og
(
¥og
->
öhîô
[
i
].prog, "inheritance");

729  
¥og
;

730 
	}
}

732 
time_t
 
	$gë_compûe_time
()

734 
time_t
 
tvÆ
 = 0;

736 i‡(
tvÆ
)

738  
tvÆ
;

742 
tm
 
tmvÆ
;

743 
	`bzîo
(&
tmvÆ
, (tmval) );

744 i‡(
	`°Ωtime
(
__DATE__
 " " 
__TIME__
, "%b %ê%Y %T", &
tmvÆ
) )

746  (
tvÆ
 = 
	`mktime
(&
tmvÆ
) );

750  (
tvÆ
 = 0);

751 
	}
}

753 
	$öô_bö¨õs
(
¨gc
, **
¨gv
)

755 
°©
 
°
;

756 
¨g_id
, 
i
;

758 
drivî_id
 = 
	`gë_compûe_time
();

760 
¨g_id
 = 0;

761 
i
 = 1; i < 
¨gc
; i++)

763 i‡(
¨gv
[
i
][0] != '-')

765 i‡(
c⁄fig_id
)

769 i‡(
	`do_°©
(
¨gv
[
i
], &
°
, 0) != - 1)

771 
c⁄fig_id
 = 
°
.
°_mtime
;

775 
c⁄fig_id
 = 
cuºít_time
;

778 i‡(
¨gv
[
i
][1] == 'D' ||árgv[i][1] == 'm')

780 
¨g_id
 = (¨g_id << 1Ë^ 
	`whash°r
(
¨gv
[
i
] + 2, 32);

784 
c⁄fig_id
 ^(
¨g_id
 << (() *8) );

785 
	}
}

791 
	$check_times
(
time_t
 
mtime
, *
nm
)

793 
°©
 
°
;

795 #ifde‡
LATTICE


796 i‡(*
nm
 == '/')

798 
nm
++;

801 i‡(
	`°©
(
nm
, &
°
) == - 1)

805 i‡(
°
.
°_mtime
 > 
mtime
)

809 
	}
}

818 
	$∑tch_out
(
¥ogøm_t
 *
¥og
, *
∑tches
, 
Àn
)

820 
i
;

821 *
p
;

823 
p
 = 
¥og
->
¥ogøm
;

824 
Àn
 > 0)

826 
i
 = 
∑tches
[--
Àn
];

827 i‡(
p
[
i
] =
F_SWITCH
 &&Ö[i + 1] >> 4 != 0xf)

830 
off£t
, 
bªak_addr
;

831 *
s
;

834 
	`COPY_SHORT
(&
off£t
, 
p
 + 
i
 + 2);

835 
	`COPY_SHORT
(&
bªak_addr
, 
p
 + 
i
 + 4);

837 
off£t
 < 
bªak_addr
)

839 
	`COPY_PTR
(&
s
, 
p
 + 
off£t
);

844 i‡(
s
 == 0)

846 
s
 = (*Ë(
POINTER_INT
) - 1;

850 
s
 = (*Ë(
POINTER_INT
)
	`°‹e_¥og_°rög
(s);

852 
	`COPY_PTR
(
p
 + 
off£t
, &
s
);

853 
off£t
 +
SWITCH_CASE_SIZE
;

857 
	}
}

859 
	$°r_ˇ£_cmp
(*
a
, *
b
)

861 *
s1
, *
s2
;

863 
	`COPY_PTR
(&
s1
, 
a
);

864 
	`COPY_PTR
(&
s2
, 
b
);

866  
s1
 - 
s2
;

867 
	}
}

869 
	$∑tch_ö
(
¥ogøm_t
 *
¥og
, *
∑tches
, 
Àn
)

871 
i
;

872 *
p
;

874 
p
 = 
¥og
->
¥ogøm
;

875 
Àn
 > 0)

877 
i
 = 
∑tches
[--
Àn
];

878 i‡(
p
[
i
] =
F_SWITCH
 &&Ö[i + 1] >> 4 != 0xf)

881 
off£t
, 
°¨t
, 
bªak_addr
;

882 *
s
;

885 
	`COPY_SHORT
(&
off£t
, 
p
 + 
i
 + 2);

886 
	`COPY_SHORT
(&
bªak_addr
, 
p
 + 
i
 + 4);

888 
°¨t
 = 
off£t
;

889 
off£t
 < 
bªak_addr
)

891 
	`COPY_PTR
(&
s
, 
p
 + 
off£t
);

895 i‡(
s
 == (*) - 1)

897 
s
 = 0;

901 
s
 = 
¥og
->
°rögs
[(
POINTER_INT
)s];

903 
	`COPY_PTR
(
p
 + 
off£t
, &
s
);

904 
off£t
 +
SWITCH_CASE_SIZE
;

907 
	`quickS‹t
(&
p
[
°¨t
], (
bªak_addr
 - sèπË/ 
SWITCH_CASE_SIZE
, SWITCH_CASE_SIZE, 
°r_ˇ£_cmp
);

910 
	}
}

917 
FILE
 *
	$¸dú_f›í
(*
fûe_«me
)

919 *
p
;

920 
°©
 
°
;

921 
FILE
 *
ªt
;

927 i‡–(
ªt
 = 
	`f›í
(
fûe_«me
, "wb"ËË!
NULL
)

929  
ªt
;

930 } 
p
 = 
fûe_«me
;

932 *
p
 && (∞(*)
	`°rchr
(p, '/') ) )

934 *
p
 = '\0';

935 i‡(
	`°©
(
fûe_«me
, &
°
) == - 1)

938 i‡(
	`OS_mkdú
(
fûe_«me
, 0770) == - 1)

940 *
p
 = '/';

941  (
FILE
*)0;

944 *
p
 = '/';

945 
p
++;

948  
	`f›í
(
fûe_«me
, "wb");

949 
	}
}

	@src/bsdmalloc.c

34 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

35 
	gsccsid
[] = "@(#)malloc.c 5.11 (Berkeley) 2/23/91";

49 
	#IN_MALLOC_WRAPPER


	)

50 
	#NO_OPCODES


	)

51 
	~"°d.h
"

53 #unde‡
NULL


54 
	#NULL
 0

	)

56 #ifde‡
_SEQUENT_


57 
	tu_ch¨
;

58 
	tu_sh‹t
;

59 
	tu_öt
;

73 
	uovîhód


75 
ovîhód
 *
	mov_√xt
;

78 
u_ch¨
 
	movu_magic
;

79 
u_ch¨
 
	movu_ödex
;

80 #ifde‡
RCHECK


81 
u_sh‹t
 
	movu_rmagic
;

82 
u_öt
 
	movu_size
;

84 } 
	movu
;

85 
	#ov_magic
 
ovu
.
ovu_magic


	)

86 
	#ov_ödex
 
ovu
.
ovu_ödex


	)

87 
	#ov_rmagic
 
ovu
.
ovu_rmagic


	)

88 
	#ov_size
 
ovu
.
ovu_size


	)

91 
	#MAGIC
 0xe‡

	)

92 
	#RMAGIC
 0x5555

	)

94 #ifde‡
RCHECK


95 
	#RSLOP
  (
u_sh‹t
)

	)

97 
	#RSLOP
 0

	)

105 
	#NBUCKETS
 30

	)

106 
ovîhód
 *
	g√xtf
[
NBUCKETS
];

108 
	g∑gesz
;

109 
	g∑gebuckë
;

111 
m‹ec‹e
();

112 
födbuckë
(
ovîhód
 *, );

114 #ifde‡
DO_MSTATS


119 
u_öt
 
	gnmÆloc
[
NBUCKETS
];

123 #i‡
deföed
(
DEBUG
Ë|| deföed(
RCHECK
)

124 #ifde‡
__STDC__


125 
	#ASSERT
(
p
Ëi‡(!’)Ë
	`bŸch
(#p)

	)

127 
	#ASSERT
(
p
Ëi‡(!’)Ë
	`bŸch
("?")

	)

129 
	$bŸch
(*
s
)

131 
	`debug_mesßge
("\r\¿bŸch As£πi⁄ : %s\r\n", 
s
);

132 ()
	`fÊush
(
°dîr
);

133 
	`ab‹t
();

135 
	}
}

137 
	#ASSERT
(
p
)

	)

140 #ifde‡
mÆloc


142 #unde‡
mÆloc


144 *
	$bsdmÆloc_mÆloc
(
size_t
 
nbyãs
)

146 
ovîhód
 *
›
;

147 
buckë
, 
n
;

148 
amt
;

154 i‡(
∑gesz
 == 0)

156 #ifde‡
MEMPAGESIZE


157 
∑gesz
 = 
n
 = 
MEMPAGESIZE
;

159 
∑gesz
 = 
n
 = 
	`gë∑gesize
();

161 
›
 = (
ovîhód
*)
	`sbrk
(0);

162 
n
 =Ç - (*
›
) - ( ()op &(n - 1) );

163 i‡(
n
 < 0)

165 
n
 +
∑gesz
;

167 i‡(
n
)

169 i‡–(*)
	`sbrk
(
n
) == (*) - 1)

171  (
NULL
);

173 } 
buckë
 = 0;

174 
amt
 = 8;

175 
∑gesz
 > 
amt
)

177 
amt
 <<= 1;

178 
buckë
++;

180 
∑gebuckë
 = 
buckë
;

187 i‡(
nbyãs
 <(
n
 = 
∑gesz
 - (*
›
Ë- 
RSLOP
) )

189 #i‚de‡
RCHECK


190 
amt
 = 8;

191 
buckë
 = 0;

193 
amt
 = 16;

194 
buckë
 = 1;

196 
n
 = - ( ()(*
›
Ë+ 
RSLOP
);

200 
amt
 = 
∑gesz
;

201 
buckë
 = 
∑gebuckë
;

203 
nbyãs
 > 
amt
 + 
n
)

205 
amt
 <<= 1;

206 i‡(
amt
 == 0)

208  (
NULL
);

210 
buckë
++;

216 i‡–(
›
 = 
√xtf
[
buckë
]Ë=
NULL
)

218 
	`m‹ec‹e
(
buckë
);

219 i‡–(
›
 = 
√xtf
[
buckë
]Ë=
NULL
)

221  (
NULL
);

225 
√xtf
[
buckë
] = 
›
->
ov_√xt
;

226 
›
->
ov_magic
 = 
MAGIC
;

227 
›
->
ov_ödex
 = 
buckë
;

228 #ifde‡
DO_MSTATS


229 
nmÆloc
[
buckë
]++;

231 #ifde‡
RCHECK


235 
›
->
ov_size
 = (
nbyãs
 + 
RSLOP
 - 1) &~(RSLOP - 1);

236 
›
->
ov_rmagic
 = 
RMAGIC
;

237 *(
u_sh‹t
*Ë–(
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë
RMAGIC
;

239  ( (*Ë(
›
 + 1) );

240 
	}
}

245 
	$m‹ec‹e
(
buckë
)

247 
ovîhód
 *
›
;

248 
sz
;

249 
amt
;

250 
nblks
;

256 
sz
 = 1 << (
buckë
 + 3);

257 #ifde‡
DEBUG


258 
	`ASSERT
(
sz
 > 0);

260 i‡(
sz
 <= 0)

265 i‡(
sz
 < 
∑gesz
)

267 
amt
 = 
∑gesz
;

268 
nblks
 = 
amt
 / 
sz
;

272 
amt
 = 
sz
 + 
∑gesz
;

273 
nblks
 = 1;

275 
›
 = (
ovîhód
*)
	`sbrk
(
amt
);

277 i‡–()
›
 == - 1)

284 
√xtf
[
buckë
] = 
›
;

285 --
nblks
 > 0)

287 
›
->
ov_√xt
 = (
ovîhód
*Ë–(
ˇddr_t
)› + 
sz
);

288 
›
 = (
ovîhód
*Ë–(
ˇddr_t
)› + 
sz
);

290 
	}
}

296 
INLINE
 
	$bsdmÆloc_‰ì
(*
˝
)

298 
size
;

299 
ovîhód
 *
›
;

301 i‡(
˝
 =
NULL
)

305 
›
 = (
ovîhód
*Ë–(
ˇddr_t
)
˝
 - (overhead) );

306 #ifde‡
DEBUG


307 
	`ASSERT
(
›
->
ov_magic
 =
MAGIC
);

309 i‡(
›
->
ov_magic
 !
MAGIC
)

315 #ifde‡
RCHECK


316 
	`ASSERT
(
›
->
ov_rmagic
 =
RMAGIC
);

317 
	`ASSERT
(*(
u_sh‹t
*Ë–(
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë=
RMAGIC
);

319 
size
 = 
›
->
ov_ödex
;

320 
	`ASSERT
(
size
 < 
NBUCKETS
);

321 
›
->
ov_√xt
 = 
√xtf
[
size
];

322 
√xtf
[
size
] = 
›
;

323 #ifde‡
DO_MSTATS


324 
nmÆloc
[
size
]--;

326 
	}
}

339 
	gªÆloc_§chÀn
 = 4;

341 *
	$bsdmÆloc_ªÆloc
(*
˝
, 
size_t
 
nbyãs
)

343 
u_öt
 
⁄b
;

344 
i
;

345 
ovîhód
 *
›
;

346 *
ªs
;

347 
was_Ælo˚d
 = 0;

349 i‡(
˝
 =
NULL
)

351  (
	`bsdmÆloc_mÆloc
(
nbyãs
) );

353 
›
 = (
ovîhód
*Ë–(
ˇddr_t
)
˝
 - (overhead) );

354 i‡(
›
->
ov_magic
 =
MAGIC
)

356 
was_Ælo˚d
++;

357 
i
 = 
›
->
ov_ödex
;

373 i‡–(
i
 = 
	`födbuckë
(
›
, 1ËË< 0 && (òfödbuckë(›, 
ªÆloc_§chÀn
) ) < 0)

375 
i
 = 
NBUCKETS
;

378 
⁄b
 = 1 << (
i
 + 3);

379 i‡(
⁄b
 < 
∑gesz
)

381 
⁄b
 -(*
›
Ë+ 
RSLOP
;

385 
⁄b
 +
∑gesz
 - (*
›
Ë- 
RSLOP
;

388 i‡(
was_Ælo˚d
)

390 i‡(
i
)

392 
i
 = 1 << (i + 2);

393 i‡(
i
 < 
∑gesz
)

395 
i
 -(*
›
Ë+ 
RSLOP
;

399 
i
 +
∑gesz
 - (*
›
Ë- 
RSLOP
;

402 i‡(
nbyãs
 <
⁄b
 &&Çbyã†> 
i
)

404 #ifde‡
RCHECK


405 
›
->
ov_size
 = (
nbyãs
 + 
RSLOP
 - 1) &~(RSLOP - 1);

406 *(
u_sh‹t
*Ë–(
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë
RMAGIC
;

408  (
˝
);

412 
	`bsdmÆloc_‰ì
(
˝
);

415 i‡–(
ªs
 = 
	`bsdmÆloc_mÆloc
(
nbyãs
ËË=
NULL
)

417  (
NULL
);

419 i‡(
˝
 !
ªs
)

422 
	`mem˝y
(
ªs
, 
˝
, (
nbyãs
 < 
⁄b
) ?Çbytes : onb);

424  (
ªs
);

425 
	}
}

432 
	$födbuckë
(
ovîhód
 *
‰ìp
, 
§chÀn
)

434 
ovîhód
 *
p
;

435 
i
, 
j
;

437 
i
 = 0; i < 
NBUCKETS
; i++)

439 
j
 = 0;

440 
p
 = 
√xtf
[
i
];Ö && 
j
 !
§chÀn
;Ö =Ö->
ov_√xt
)

442 i‡(
p
 =
‰ìp
)

444  (
i
);

446 
j
++;

450 
	}
}

456 #ifde‡
DO_MSTATS


464 
	$show_m°©s
(
outbuf„r_t
 *
ob
, *
s
)

466 
i
, 
j
;

467 
ovîhód
 *
p
;

468 
tŸ‰ì
 = 0, 
tŸu£d
 = 0;

470 
	`outbuf_addv
(
ob
, "Sèti°ic†o‡Mem‹yáŒoˇti⁄ %s\nFªe:\t", 
s
);

471 
i
 = 0; i < 
NBUCKETS
; i++)

473 
j
 = 0, 
p
 = 
√xtf
[
i
];Ö;Ö =Ö->
ov_√xt
, j++)

475 
	`outbuf_addv
(
ob
, " %d", 
j
);

476 
tŸ‰ì
 +
j
 *(1 << (
i
 + 3) );

478 
	`outbuf_add
(
ob
, "\nUsed:\t");

479 
i
 = 0; i < 
NBUCKETS
; i++)

481 
	`outbuf_addv
(
ob
, " %d", 
nmÆloc
[
i
]);

482 
tŸu£d
 +
nmÆloc
[
i
]*(1 << (i + 3) );

485 
	`outbuf_addv
(
ob
, "\n\tTŸÆ i¿u£: %d, TŸÆ fªe: %d\n", 
tŸu£d
, 
tŸ‰ì
);

486 
	}
}

490 #ifde‡
ˇŒoc


492 #unde‡
ˇŒoc


494 
INLINE
 *
	$bsdmÆloc_ˇŒoc
(
size_t
 
num
, size_à
size
)

496 *
p
;

498 
size
 *
num
;

499 i‡–(
p
 = 
	`bsdmÆloc_mÆloc
(
size
) ) )

501 
	`mem£t
(
p
, 0, 
size
);

503  (
p
);

504 
	}
}

	@src/buffer.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"°øŒoc.h
"

5 
buf„r_t
 
	gnuŒ_buf
 =

10 #ifde‡
DEBUG


20 
INLINE
 
buf„r_t
 *
	$nuŒ_buf„r
()

22 
nuŒ_buf
.
ªf
++;

23  &
nuŒ_buf
;

24 
	}
}

26 
INLINE
 
	$‰ì_buf„r
(
buf„r_t
 *
b
)

28 
b
->
ªf
--;

30 i‡–(
b
->
ªf
 > 0Ë|| (b =&
nuŒ_buf
) )

34 
	`FREE
–(*)
b
);

35 
	}
}

37 
buf„r_t
 *
	$Æloˇã_buf„r
(
size
)

39 
buf„r_t
 *
buf
;

41 #i‚de‡
DISALLOW_BUFFER_TYPE


42 i‡–(
size
 < 0Ë|| (sizê> 
max_buf„r_size
) )

44 
	`îr‹
("Illegal buffer size.\n");

46 i‡(
size
 == 0)

48  
	`nuŒ_buf„r
();

51 
buf
 = (
buf„r_t
*)
	`DCALLOC
((buf„r_tË+ 
size
 - 1, 1, 
TAG_BUFFER
, "allocate_buffer");

52 
buf
->
size
 = size;

53 
buf
->
ªf
 = 1;

54  
buf
;

56  
NULL
;

58 
	}
}

64 
	$wrôe_buf„r
(
buf„r_t
 *
buf
, 
°¨t
, *
°r
, 
theLígth
)

66 
size
;

68 
size
 = 
buf
->size;

69 i‡(
°¨t
 < 0)

71 
°¨t
 = 
size
 + start;

72 i‡(
°¨t
 < 0)

81 i‡–(
°¨t
 + 
theLígth
Ë> 
size
)

85 
	`mem˝y
(
buf
->
ôem
 + 
°¨t
, 
°r
, 
theLígth
);

87 
	}
}

89 *
	$ªad_buf„r
(
buf„r_t
 *
b
, 
°¨t
, 
Àn
, *
æí
)

91 *
°r
;

92 
size
;

94 i‡(
Àn
 < 0)

99 
size
 = 
b
->size;

100 i‡(
°¨t
 < 0)

102 
°¨t
 = 
size
 + start;

103 i‡(
°¨t
 < 0)

108 i‡(
Àn
 == 0)

110 
Àn
 = 
size
;

112 i‡(
°¨t
 >()
size
)

116 i‡–(
°¨t
 + 
Àn
Ë> ()
size
)

118 
Àn
 = (
size
 - 
°¨t
);

120 
°r
 = (*)
b
->
ôem
 + 
°¨t
, 
size
 = 0; *°∏&& sizê< ()
Àn
; str++, size++)

122 
°r
 = 
	`√w_°rög
(
size
, "read_buffer: str");

123 
	`mem˝y
(
°r
, 
b
->
ôem
 + 
°¨t
, 
size
);

124 
°r
[ *
æí
 = 
size
] = '\0';

126  
°r
;

127 
	}
}

	@src/class.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

4 
	$dóŒoc_˛ass
(
¨øy_t
 *
p
)

6 
i
;

8 
i
 = 
p
->
size
; i--;)

10 
	`‰ì_svÆue
(&
p
->
ôem
[
i
], "dealloc_class");

12 
	`FREE
–(*)
p
);

13 
	}
}

19 
	$‰ì_˛ass
(
¨øy_t
 *
p
)

21 i‡(--(
p
->
ªf
) > 0)

26 
	`dóŒoc_˛ass
(
p
);

27 
	}
}

33 
¨øy_t
 *
	$Æloˇã_˛ass
(
˛ass_def_t
 *
˛d
, 
has_vÆues
)

35 
¨øy_t
 *
p
;

36 
n
 = 
˛d
->
size
;

38 
p
 = (
¨øy_t
*)
	`DXALLOC
(◊ºay_tË+ (
svÆue_t
)*(
n
 - 1), 
TAG_CLASS
, "allocate_class");

39 
p
->
ªf
 = 1;

40 
p
->
size
 = 
n
;

41 i‡(
has_vÆues
)

43 
n
--)

45 
p
->
ôem
[
n
] = *
•
--;

50 
n
--)

52 
p
->
ôem
[
n
] = 
c⁄°0
;

55  
p
;

56 
	}
}

62 
¨øy_t
 *
	$Æloˇã_˛ass_by_size
(
size
)

64 
¨øy_t
 *
p
;

66 
p
 = (
¨øy_t
*)
	`DXALLOC
(◊ºay_tË+ (
svÆue_t
)*(
size
 - 1), 
TAG_CLASS
, "allocate_class");

67 
p
->
ªf
 = 1;

68 
p
->
size
 = size;

70 
size
--)

72 
p
->
ôem
[
size
] = 
c⁄°0
;

75  
p
;

76 
	}
}

78 
¨øy_t
 *
	$Æloˇã_em±y_˛ass_by_size
(
size
)

80 
¨øy_t
 *
p
;

82 
p
 = (
¨øy_t
 *)
	`DXALLOC
(◊ºay_tË+ (
svÆue_t
Ë* (
size
 - 1), 
TAG_CLASS
, "allocate_class");

83 
p
->
ªf
 = 1;

84 
p
->
size
 = size;

86  
p
;

87 
	}
}

	@src/comm.c

6 
	~"°d.h
"

7 
	~"Õc_ö˛.h
"

8 
	~"≠∂õs.h
"

9 
	~"maö.h
"

10 
	~"comm.h
"

11 
	~"backíd.h
"

12 
	~"e›î©‹s.h
"

13 
	~"debug.h
"

14 
	~"fûe.h
"

16 
	#_debug
–
fmt
, 
¨gs
... )

	)

18 
	gtŸÆ_u£rs
 = 0;

19 
	gkq
;

20 
kevít
 *
	gevíéi°
;

23 
	$outbuf_zîo
(
outbuf„r_t
 *
outbuf
)

25 
outbuf
->
ªÆ_size
 = 0;

26 
outbuf
->
buf„r
 = 0;

27 
	}
}

29 
	$outbuf_exãnd
(
outbuf„r_t
 *
outbuf
, 
l
)

31 
limô
;

32 
	`DEBUG_CHECK
(
l
 < 0, "NegativeÜength!.\n");

34 i‡(
outbuf
->
buf„r
)

36 
limô
 = 
	`MSTR_SIZE
(
outbuf
->
buf„r
);

37 i‡(
outbuf
->
ªÆ_size
 + 
l
 > 
limô
)

39 i‡(
outbuf
->
ªÆ_size
 =
USHRT_MAX
)

46 
limô
 = (
outbuf
->
ªÆ_size
 + 
l
) *2;

47 i‡(
limô
 > 
USHRT_MAX
)

49 
limô
 = 
outbuf
->
ªÆ_size
 + 
l
;

50 i‡(
limô
 > 
USHRT_MAX
)

52 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, 
USHRT_MAX
);

53  
USHRT_MAX
 - 
outbuf
->
ªÆ_size
;

56 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, 
limô
);

61 
outbuf
->
buf„r
 = 
	`√w_°rög
(
l
, "outbuf_add");

62 
outbuf
->
ªÆ_size
 = 0;

64  
l
;

65 
	}
}

71 
	$outbuf_add
(
outbuf„r_t
 *
outbuf
, *
°r
)

73 
l
, 
limô
;

75 i‡(!
outbuf
)

79 
l
 = 
	`°æí
(
°r
);

80 i‡(
outbuf
->
buf„r
)

82 
limô
 = 
	`MSTR_SIZE
(
outbuf
->
buf„r
);

83 i‡(
outbuf
->
ªÆ_size
 + 
l
 > 
limô
)

85 i‡(
outbuf
->
ªÆ_size
 =
USHRT_MAX
)

92 
limô
 = (
outbuf
->
ªÆ_size
 + 
l
) *2;

93 i‡(
limô
 > 
USHRT_MAX
)

95 
limô
 = 
outbuf
->
ªÆ_size
 + 
l
;

96 i‡(
limô
 > 
USHRT_MAX
)

98 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, 
USHRT_MAX
);

99 
	`°∫˝y
(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
, 
°r
, 
USHRT_MAX
 - outbuf->real_size);

100 
outbuf
->
buf„r
[
USHRT_MAX
] = 0;

101 
outbuf
->
ªÆ_size
 = 
USHRT_MAX
;

105 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, 
limô
);

110 
outbuf
->
buf„r
 = 
	`√w_°rög
(
l
, "outbuf_add");

111 
outbuf
->
ªÆ_size
 = 0;

113 
	`°r˝y
(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
, 
°r
);

114 
outbuf
->
ªÆ_size
 +
l
;

115 
	}
}

121 
	$outbuf_addch¨
(
outbuf„r_t
 *
outbuf
, 
c
)

123 
limô
;

125 i‡(!
outbuf
)

130 i‡(
outbuf
->
buf„r
)

132 
limô
 = 
	`MSTR_SIZE
(
outbuf
->
buf„r
);

133 i‡(
outbuf
->
ªÆ_size
 + 1 > 
limô
)

135 i‡(
outbuf
->
ªÆ_size
 =
USHRT_MAX
)

142 
limô
 = (
outbuf
->
ªÆ_size
 + 1) *2;

143 i‡(
limô
 > 
USHRT_MAX
)

145 
limô
 = 
outbuf
->
ªÆ_size
 + 1;

146 i‡(
limô
 > 
USHRT_MAX
)

148 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, 
USHRT_MAX
);

149 *(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
Ë
c
;

150 
outbuf
->
buf„r
[
USHRT_MAX
] = 0;

151 
outbuf
->
ªÆ_size
 = 
USHRT_MAX
;

155 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, 
limô
);

160 
outbuf
->
buf„r
 = 
	`√w_°rög
(80, "outbuf_add");

161 
outbuf
->
ªÆ_size
 = 0;

163 *(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
++Ë
c
;

164 *(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
) = 0;

165 
	}
}

171 
	$outbuf_addv
(
outbuf„r_t
 *
outbuf
, *
f‹m©
, ...)

173 
buf
[
LARGEST_PRINTABLE_STRING
 + 1];

174 
va_li°
 
¨gs
;

175 
	`V_DCL
(*
f‹m©
);

176 
	`V_DCL
(
outbuf„r_t
 *
outbuf
);

178 
	`V_START
(
¨gs
, 
f‹m©
);

179 
	`V_VAR
(
outbuf„r_t
 *, 
outbuf
, 
¨gs
);

180 
	`V_VAR
(*, 
f‹m©
, 
¨gs
);

182 
	`v•rötf
(
buf
, 
f‹m©
, 
¨gs
);

183 
	`va_íd
(
¨gs
);

185 i‡(!
outbuf
)

190 
	`outbuf_add
(
outbuf
, 
buf
);

191 
	}
}

197 
	$outbuf_fix
(
outbuf„r_t
 *
outbuf
)

199 i‡(
outbuf
 && outbuf->
buf„r
)

201 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, outbuf->
ªÆ_size
);

203 
	}
}

209 
	$outbuf_push
(
outbuf„r_t
 *
outbuf
)

211 (++
•
)->
ty≥
 = 
T_STRING
;

212 i‡(
outbuf
 && outbuf->
buf„r
)

214 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, outbuf->
ªÆ_size
);

216 
•
->
subty≥
 = 
STRING_MALLOC
;

217 
•
->
u
.
°rög
 = 
outbuf
->
buf„r
;

221 
•
->
subty≥
 = 
STRING_CONSTANT
;

222 
•
->
u
.
°rög
 = "";

224 
	}
}

	@src/compiler.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"compûî.h
"

4 
	~"åìs.h
"

5 
	~"Àx.h
"

6 
	~"gíî©e.h
"

7 
	~"sw≠.h
"

8 
	~"s¸©ch∑d.h
"

9 
	~"qs‹t.h
"

10 
	~"fûe.h
"

11 
	~"bö¨õs.h
"

13 
	~"icode.h
"

15 
˛ón_∑r£r
();

16 
¥ﬁog
(, *);

17 
¥ogøm_t
 *
ïûog
();

18 
show_ovîlﬂd_w¨nögs
();

20 
	#CT
(
x
Ë(1 << (x))

	)

21 
	#CT_SIMPLE
(
x
Ë(
	`CT
(
TYPE_ANY
Ë| CT(x))

	)

23 
	gcom∑tibÀ
[11] =

27  
CT_SIMPLE
(
TYPE_NOVALUE
Ë| 
CT
(
TYPE_VOID
Ë| CT(
TYPE_NUMBER
),

28  
CT_SIMPLE
(
TYPE_VOID
Ë| 
CT
(
TYPE_NUMBER
),

29  
CT_SIMPLE
(
TYPE_NUMBER
)| 
CT
(
TYPE_REAL
),

30  
CT_SIMPLE
(
TYPE_STRING
),

31  
CT_SIMPLE
(
TYPE_OBJECT
),

32  
CT_SIMPLE
(
TYPE_MAPPING
),

33  
CT_SIMPLE
(
TYPE_FUNCTION
),

34  
CT_SIMPLE
(
TYPE_REAL
Ë| 
CT
(
TYPE_NUMBER
),

35  
CT_SIMPLE
(
TYPE_BUFFER
),

38 
	gis_ty≥
[11] =

42  
CT_SIMPLE
(
TYPE_NOVALUE
Ë| 
CT
(
TYPE_VOID
),

43  
CT_SIMPLE
(
TYPE_VOID
Ë| 
CT
(
TYPE_NOVALUE
),

44  
CT_SIMPLE
(
TYPE_NUMBER
),

45  
CT_SIMPLE
(
TYPE_STRING
),

46  
CT_SIMPLE
(
TYPE_OBJECT
),

47  
CT_SIMPLE
(
TYPE_MAPPING
),

48  
CT_SIMPLE
(
TYPE_FUNCTION
),

49  
CT_SIMPLE
(
TYPE_REAL
),

50  
CT_SIMPLE
(
TYPE_BUFFER
),

53 
mem_block_t
 
	gmem_block
[
NUMAREAS
];

55 
fun˘i⁄_c⁄ãxt_t
 
	gfun˘i⁄_c⁄ãxt
;

57 
	gexa˘_ty≥s
, 
	gglobÆ_modifõrs
;

59 
	gcuºít_ty≥
;

60 
	gv¨_deföed
;

62 
	gcuºít_block
;

63 *
	g¥og_code
;

64 *
	g¥og_code_max
;

66 
¥ogøm_t
 
	gNULL_¥ogøm
;

68 
¥ogøm_t
 *
	g¥og
;

70 
	g°rög_idx
[0x100];

71 
	g°rög_ègs
[0x20];

72 
	g‰ìd_°rög
;

74 *
	gty≥_of_loˇls
;

75 
idít_hash_ñem_t
 **
	gloˇls
;

76 *
	gru¡ime_loˇls
;

78 *
	gty≥_of_loˇls_±r
;

79 
idít_hash_ñem_t
 **
	gloˇls_±r
;

80 *
	gru¡ime_loˇls_±r
;

82 
	gloˇls_size
 = 0;

83 
	gty≥_of_loˇls_size
 = 0;

84 
	gcuºít_numbî_of_loˇls
 = 0;

85 
	gmax_num_loˇls
 = 0;

87 
	gcuºít_loˇl_cou¡
 = 0;

88 
	gloˇl_cou¡_°ack
[255];

89 
	gloˇl_cou¡_°ack_•
 = 0;

90 
	$push_loˇl_cou¡
(
vÆ
)

92 
loˇl_cou¡_°ack
[
loˇl_cou¡_°ack_•
++] = 
vÆ
;

93 
	}
}

94 
	$p›_loˇl_cou¡
()

96  
loˇl_cou¡_°ack
[--
loˇl_cou¡_°ack_•
];

97 
	}
}

100 *
	$gë_two_ty≥s
(*
whîe
, *
íd
, 
ty≥1
, 
ty≥2
)

102 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "( ");

103 
whîe
 = 
	`gë_ty≥_«me
(whîe, 
íd
, 
ty≥1
);

104 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "vs ");

105 
whîe
 = 
	`gë_ty≥_«me
(whîe, 
íd
, 
ty≥2
);

106 
whîe
 = 
	`°Ωut
(whîe, 
íd
, ")");

108  
whîe
;

109 
	}
}

115 
	$öô_loˇls
()

117 
ty≥_of_loˇls
 = 
	`CALLOCATE
(
CFG_MAX_LOCAL_VARIABLES
, , 
TAG_LOCALS
, "init_locals:1");

118 
loˇls
 = 
	`CALLOCATE
(
CFG_MAX_LOCAL_VARIABLES
, 
idít_hash_ñem_t
 *, 
TAG_LOCALS
, "init_locals:2");

119 
ru¡ime_loˇls
 = 
	`CALLOCATE
(
CFG_MAX_LOCAL_VARIABLES
, , 
TAG_LOCALS
, "init_locals:3");

120 
ty≥_of_loˇls_±r
 = 
ty≥_of_loˇls
;

121 
loˇls_±r
 = 
loˇls
;

122 
ru¡ime_loˇls_±r
 = 
ru¡ime_loˇls
;

123 
loˇls_size
 = 
ty≥_of_loˇls_size
 = 
CFG_MAX_LOCAL_VARIABLES
;

124 
cuºít_numbî_of_loˇls
 = 
max_num_loˇls
 = 0;

125 
	}
}

131 
	$‰ì_Æl_loˇl_«mes
()

133 
i
;

135 
i
 = 0; i < 
cuºít_numbî_of_loˇls
; i++)

137 
loˇls_±r
[
i
]->
£m_vÆue
--;

138 
loˇls_±r
[
i
]->
dn
.
loˇl_num
 = - 1;

140 
cuºít_numbî_of_loˇls
 = 0;

141 
max_num_loˇls
 = 0;

142 
	}
}

148 
	$dó˘iv©e_cuºít_loˇls
()

150 
i
;

152 
i
 = 0; i < 
cuºít_numbî_of_loˇls
; i++)

154 
ru¡ime_loˇls_±r
[
i
] = 
loˇls_±r
[i]->
dn
.
loˇl_num
;

155 
loˇls_±r
[
i
]->
dn
.
loˇl_num
 = - 1;

157 
	}
}

163 
	$ªa˘iv©e_cuºít_loˇls
()

165 
i
;

167 
i
 = 0; i < 
cuºít_numbî_of_loˇls
; i++)

169 
loˇls_±r
[
i
]->
dn
.
loˇl_num
 = 
ru¡ime_loˇls_±r
[i];

170 
loˇls_±r
[
i
]->
£m_vÆue
++;

172 
	}
}

178 
	$˛ón_up_loˇls
()

180 
off£t
;

182 
off£t
 = 
loˇls_±r
 + 
cuºít_numbî_of_loˇls
 - 
loˇls
;

183 
off£t
--)

185 
loˇls
[
off£t
]->
£m_vÆue
--;

186 
loˇls
[
off£t
]->
dn
.
loˇl_num
 = - 1;

188 
cuºít_numbî_of_loˇls
 = 0;

189 
max_num_loˇls
 = 0;

190 
loˇls_±r
 = 
loˇls
;

191 
ty≥_of_loˇls_±r
 = 
ty≥_of_loˇls
;

192 
ru¡ime_loˇls_±r
 = 
ru¡ime_loˇls
;

193 
	}
}

199 
	$p›_n_loˇls
(
num
)

201 
num
--)

203 
loˇls_±r
[--
cuºít_numbî_of_loˇls
]->
£m_vÆue
--;

204 
loˇls_±r
[
cuºít_numbî_of_loˇls
]->
dn
.
loˇl_num
 = - 1;

206 
	}
}

212 
	$add_loˇl_«me
(*
°r
, 
ty≥
)

214 i‡(
max_num_loˇls
 =
CFG_MAX_LOCAL_VARIABLES
)

216 
	`yyîr‹
("Too manyÜocal variables");

221 
idít_hash_ñem_t
 *
ihe
;

223 
ihe
 = 
	`föd_‹_add_idít
(
°r
, 
FOA_NEEDS_MALLOC
);

224 
ty≥_of_loˇls_±r
[
max_num_loˇls
] = 
ty≥
;

225 
loˇls_±r
[
cuºít_numbî_of_loˇls
++] = 
ihe
;

226 i‡(
ihe
->
dn
.
loˇl_num
 == - 1)

228 
ihe
->
£m_vÆue
++;

230  
ihe
->
dn
.
loˇl_num
 = 
max_num_loˇls
++;

232 
	}
}

238 
	$ªÆloˇã_loˇls
()

240 
off£t
;

241 
off£t
 = 
ty≥_of_loˇls_±r
 - 
ty≥_of_loˇls
;

242 
ty≥_of_loˇls
 = 
	`RESIZE
—y≥_of_loˇls, 
ty≥_of_loˇls_size
 +
CFG_MAX_LOCAL_VARIABLES
, , 
TAG_LOCALS
, "reallocate_locals:1");

243 
ty≥_of_loˇls_±r
 = 
ty≥_of_loˇls
 + 
off£t
;

244 
off£t
 = 
loˇls_±r
 - 
loˇls
;

245 
loˇls
 = 
	`RESIZE
÷oˇls, 
loˇls_size
, 
idít_hash_ñem_t
 *, 
TAG_LOCALS
, "reallocate_locals:2");

246 
loˇls_±r
 = 
loˇls
 + 
off£t
;

247 
ru¡ime_loˇls
 = 
	`RESIZE
‘u¡ime_loˇls, 
loˇls_size
, , 
TAG_LOCALS
, "reallocate_locals:3");

248 
ru¡ime_loˇls_±r
 = 
ru¡ime_loˇls
 + 
off£t
;

249 
	}
}

256 
	$c›y_v¨übÀs
(
¥ogøm_t
 *
‰om
, 
ty≥
)

258 
i
;

260 
i
 = 0; i < 
‰om
->
num_öhîôed
; i++)

262 
	`c›y_v¨übÀs
(
‰om
->
öhîô
[
i
].
¥og
, 
ty≥
 | from->öhîô[i].
ty≥_mod
);

264 
i
 = 0; i < 
‰om
->
num_v¨übÀs_deföed
; i++)

266 
t
 = 
‰om
->
v¨übÀ_ty≥s
[
i
] | 
ty≥
;

267 i‡(
t
 &
NAME_PUBLIC
)

269 
t
 &~
NAME_PRIVATE
;

272 
	`deföe_v¨übÀ
(
‰om
->
v¨übÀ_èbÀ
[
i
], 
t
,Å &
NAME_PRIVATE
);

274 
	}
}

280 
	$add_√w_fun˘i⁄_íåy
()

282 
ödex
 = 
mem_block
[
A_FUNCTION_FLAGS
].
cuºít_size
 / ();

284 
	`Æloˇã_ö_mem_block
(
A_RUNTIME_FUNCTIONS
, (
ru¡ime_fun˘i⁄_u
) );

285 
	`Æloˇã_ö_mem_block
(
A_FUNCTION_FLAGS
, () );

286 
	`Æloˇã_ö_mem_block
(
A_FUNCTION_DEFS
, (
compûî_ãmp_t
) );

288  
ödex
;

289 
	}
}

294 
	$c›y_fun˘i⁄
(
¥ogøm_t
 *
¥og
, 
ödex
,Örogøm_à*
deÂrog
, 
defödex
, 
ty≥mod
)

296 
idít_hash_ñem_t
 *
ihe
;

298 
whîe
 = 
	`add_√w_fun˘i⁄_íåy
();

299 
Êags
 = 
¥og
->
fun˘i⁄_Êags
[
ödex
];

300 
f
 = (
Êags
 &
NAME_MASK
Ë| 
NAME_DEF_BY_INHERIT
 | 
NAME_UNDEFINED
;

303 i‡(
f
 &
NAME_PRIVATE
)

305 
f
 |
NAME_HIDDEN
;

308 
f
 |
ty≥mod
;

310 i‡(
f
 &
NAME_PUBLIC
)

312 
f
 &~
NAME_PRIVATE
;

315 
	`FUNCTION_FLAGS
(
whîe
Ë
f
;

317 
	`FUNCTION_TEMP
(
whîe
)->
¥og
 = 
deÂrog
;

318 
	`FUNCTION_TEMP
(
whîe
)->
u
.
func
 = 
deÂrog
->
fun˘i⁄_èbÀ
 + 
defödex
;

320 
	`FUNCTION_RENTRY
(
whîe
)->
öh
.
off£t
 = 
NUM_INHERITS
 - 1;

321 
	`FUNCTION_RENTRY
(
whîe
)->
öh
.
fun˘i⁄_ödex_off£t
 = 
ödex
;

322 
	`FUNCTION_ALIAS
(
whîe
) = 1;

325 
ihe
 = 
	`föd_‹_add_idít
(
deÂrog
->
fun˘i⁄_èbÀ
[
defödex
].
«me
, 
FOA_GLOBAL_SCOPE
);

326 i‡(
ihe
->
dn
.
fun˘i⁄_num
 == - 1)

328 
ihe
->
£m_vÆue
++;

330 
ihe
->
dn
.
fun˘i⁄_num
 = 
whîe
;

331 
	}
}

337 
	$lookup_˛ass_membî
(
which
, *
«me
, *
ty≥
)

339 
i
;

340 
˛ass_def_t
 *
cd
;

341 
˛ass_membî_íåy_t
 *
cme
;

343 
cd
 = ( (
˛ass_def_t
*)
mem_block
[
A_CLASS_DEF
].
block
Ë+ 
which
;

344 
cme
 = ( (
˛ass_membî_íåy_t
*)
mem_block
[
A_CLASS_MEMBER
].
block
Ë+ 
cd
->
ödex
;

345 
i
 = 0; i < 
cd
->
size
; i++)

347 i‡(
	`°rcmp
(
	`PROG_STRING
(
cme
[
i
].
«me
),Çame) == 0)

352 i‡(
i
 =
cd
->
size
)

354 
buf
[256];

355 *
íd
 = 
	`EndOf
(
buf
);

356 *
p
;

358 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Class '");

359 
p
 = 
	`°Ωut
’, 
íd
, 
	`PROG_STRING
(
cd
->
«me
) );

360 
p
 = 
	`°Ωut
’, 
íd
, "' hasÇo member '");

361 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

362 
p
 = 
	`°Ωut
’, 
íd
, "'");

363 
	`yyîr‹
(
buf
);

364 i‡(
ty≥
)

366 *
ty≥
 = 
TYPE_ANY
;

372 i‡(
ty≥
)

374 *
ty≥
 = 
cme
[
i
].type;

376  
i
;

378 
	}
}

384 
∑r£_node_t
 *
	$ª‹dî_˛ass_vÆues
(
which
, 
∑r£_node_t
 *
node
)

386 
˛ass_def_t
 *
cd
;

387 
∑r£_node_t
 **
tmp
;

388 
i
;

390 
cd
 = ( (
˛ass_def_t
*)
mem_block
[
A_CLASS_DEF
].
block
Ë+ 
which
;

391 
tmp
 = 
	`CALLOCATE
(
cd
->
size
, 
∑r£_node_t
 *, 
TAG_COMPILER
, "reorder_class_values");

393 
i
 = 0; i < 
cd
->
size
; i++)

395 
tmp
[
i
] = 0;

398 
node
)

400 
i
 = 
	`lookup_˛ass_membî
(
which
, (*)
node
->
l
.
ex¥
, 0);

401 i‡(
i
 != - 1)

403 
tmp
[
i
] = 
node
->
v
.
ex¥
;

405 
node
 =Çode->
r
.
ex¥
;

407 
i
 = 
cd
->
size
;

408 
node
 = 0;

409 
i
--)

411 
∑r£_node_t
 *
√wnode
;

412 i‡(
tmp
[
i
])

414 
	`CREATE_STATEMENTS
(
√wnode
, 
tmp
[
i
], 
node
);

418 
	`CREATE_STATEMENTS
(
√wnode
, 0, 
node
);

419 
	`CREATE_NUMBER
(
√wnode
->
l
.
ex¥
, 0);

421 
node
 = 
√wnode
;

424 
	`FREE
(
tmp
);

425  
node
;

426 
	}
}

432 
	$c›y_°ru˘uªs
(
¥ogøm_t
 *
¥og
)

434 
˛ass_def_t
 *
sd
;

435 
˛ass_membî_íåy_t
 *
sme
;

436 
idít_hash_ñem_t
 *
ihe
;

437 *
°r
;

438 
sm_off
 = 
mem_block
[
A_CLASS_MEMBER
].
cuºít_size
 / (
˛ass_membî_íåy_t
);

439 
sd_off
 = 
mem_block
[
A_CLASS_DEF
].
cuºít_size
 / (
˛ass_def_t
);

440 
i
, 
num
 = 0;

442 
sd
 = (
˛ass_def_t
*)
	`Æloˇã_ö_mem_block
(
A_CLASS_DEF
, 
¥og
->
num_˛as£s
 *(class_def_t) );

443 
i
 = 0; i < 
¥og
->
num_˛as£s
; i++)

445 
sd
[
i
].
size
 = 
¥og
->
˛as£s
[i].size;

446 
num
 +
sd
[
i
].
size
;

447 
sd
[
i
].
ödex
 = 
¥og
->
˛as£s
[i].ödex + 
sm_off
;

448 
°r
 = 
¥og
->
°rögs
[¥og->
˛as£s
[
i
].
«me
];

449 
sd
[
i
].
«me
 = 
	`°‹e_¥og_°rög
(
°r
);

450 
ihe
 = 
	`föd_‹_add_idít
(
°r
, 
FOA_GLOBAL_SCOPE
);

451 i‡(
ihe
->
dn
.
˛ass_num
 == - 1)

453 
ihe
->
£m_vÆue
++;

459 
buf
[256];

460 *
íd
 = 
	`EndOf
(
buf
);

461 *
p
;

463 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine class ");

464 
p
 = 
	`°Ωut
’, 
íd
, 
°r
);

465 
	`yyîr‹
(
buf
);

467 
ihe
->
dn
.
˛ass_num
 = 
i
 + 
sd_off
;

470 
sme
 = (
˛ass_membî_íåy_t
*)
	`Æloˇã_ö_mem_block
(
A_CLASS_MEMBER
, (˛ass_membî_íåy_tË*
num
);

471 
num
--)

473 
sme
[
num
].
ty≥
 = 
¥og
->
˛ass_membîs
[num].type;

474 
sme
[
num
].
«me
 = 
	`°‹e_¥og_°rög
(
¥og
->
°rögs
[¥og->
˛ass_membîs
[num].name]);

476 
	}
}

482 
	sovlw¨n_s


484 
ovlw¨n_s
 *
	m√xt
;

485 *
	mfunc
;

486 *
	mw¨n
;

487 } 
	tovlw¨n_t
;

489 
ovlw¨n_t
 *
	govîlﬂd_w¨nögs
 = 0;

491 
	$ªmove_ovîlﬂd_w¨nögs
(*
func
)

493 
ovlw¨n_t
 **
p
;

494 
ovlw¨n_t
 *
tmp
;

496 
p
 = &
ovîlﬂd_w¨nögs
;

497 *
p
)

499 i‡(!
func
 || (*
p
)->func == func)

501 
	`FREE
–(*
p
)->
w¨n
);

502 
tmp
 = *
p
;

503 *
p
 = (*p)->
√xt
;

504 
	`FREE
(
tmp
);

508 
p
 = &(*p)->
√xt
;

511 
	}
}

517 
	$show_ovîlﬂd_w¨nögs
()

519 
ovlw¨n_t
 *
p
, *
√xt
;

520 
p
 = 
ovîlﬂd_w¨nögs
;

521 
p
)

523 
	`yyw¨n
(
p
->
w¨n
);

524 
	`FREE
(
p
->
w¨n
);

525 
√xt
 = 
p
->next;

526 
	`FREE
(
p
);

527 
p
 = 
√xt
;

529 
ovîlﬂd_w¨nögs
 = 0;

530 
	}
}

533 
	$ovîlﬂd_fun˘i⁄
(
¥ogøm_t
 *
¥og
, 
ödex
,Örogøm_à*
deÂrog
, 
defödex
, 
ﬁdödex
, 
ty≥mod
)

535 
Æüs
;

537 
ﬁdÊags
 = 
	`FUNCTION_FLAGS
(
ﬁdödex
);

538 
compûî_fun˘i⁄_t
 *
deföôi⁄
 = &
deÂrog
->
fun˘i⁄_èbÀ
[
defödex
];

539 
√wÊags
 = 
¥og
->
fun˘i⁄_Êags
[
ödex
];

542 i‡(!(
√wÊags
 &
NAME_NO_CODE
Ë&& 
	`REAL_FUNCTION
(
ﬁdÊags
Ë&& (ﬁdÊag†&
NAME_NO_MASK
) )

544 
buf
[256];

545 *
íd
 = 
	`EndOf
(
buf
);

546 *
p
;

548 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine 'nomask' function \"");

549 
p
 = 
	`°Ωut
’, 
íd
, 
deföôi⁄
->
«me
);

550 
p
 = 
	`°Ωut
’, 
íd
, "\"");

551 
	`yyîr‹
(
buf
);

564 i‡–(
¥agmas
 &
PRAGMA_WARNINGS
Ë&& 
	`REAL_FUNCTION
(
ﬁdÊags
Ë&& !(
√wÊags
 &
NAME_NO_CODE
Ë&& (ﬁdÊag†&
NAME_UNDEFINED
)

573 i‡(!(
ﬁdÊags
 &
NAME_PRIVATE
Ë&& !(
√wÊags
 &NAME_PRIVATE) )

575 
buf
[1024];

576 *
íd
 = 
	`EndOf
(
buf
);

577 *
p
;

578 
ovlw¨n_t
 *
ow
;

579 
¥ogøm_t
 *
deÂrog2
;

580 
defödex2
;

581 
ru¡ime_fun˘i⁄_u
 *
func_íåy
 = 
	`FUNCTION_RENTRY
(
ﬁdödex
);

582 
¥ogøm_t
 *
¥og2
 = 
	`INHERIT
(
func_íåy
->
öh
.
off£t
)->
¥og
;

584 
deÂrog2
 = 
¥og2
;

585 
defödex2
 = 
func_íåy
->
öh
.
fun˘i⁄_ödex_off£t
;

586 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
deÂrog2
, 
defödex2
);

588 
deÂrog2
->
fun˘i⁄_Êags
[
defödex2
] &
NAME_INHERITED
)

590 
deÂrog2
 = deÂrog2->
öhîô
[
func_íåy
->
öh
.
off£t
].
¥og
;

591 
defödex2
 = 
func_íåy
->
öh
.
fun˘i⁄_ödex_off£t
;

592 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
deÂrog2
, 
defödex2
);

595 
p
 = 
	`°Ωut
(
buf
, 
íd
, 
deföôi⁄
->
«me
);

596 
p
 = 
	`°Ωut
’, 
íd
, "() inherited from both /");

597 
p
 = 
	`°Ωut
’, 
íd
, 
deÂrog
->
«me
);

598 i‡(
¥og
 !
deÂrog
)

600 
p
 = 
	`°Ωut
’, 
íd
, " (via /");

601 
p
 = 
	`°Ωut
’, 
íd
, 
¥og
->
«me
);

602 
p
 = 
	`°Ωut
’, 
íd
, ")");

604 
p
 = 
	`°Ωut
’, 
íd
, "ánd /");

605 
p
 = 
	`°Ωut
’, 
íd
, 
deÂrog2
->
«me
);

606 i‡(
¥og2
 !
deÂrog2
)

608 
p
 = 
	`°Ωut
’, 
íd
, " (via /");

609 
p
 = 
	`°Ωut
’, 
íd
, 
¥og2
->
«me
);

610 
p
 = 
	`°Ωut
’, 
íd
, ")");

612 
p
 = 
	`°Ωut
’, 
íd
, "; usingÅhe definition in /");

613 
p
 = 
	`°Ωut
’, 
íd
, 
¥og
->
«me
);

614 
p
 = 
	`°Ωut
’, 
íd
, ".");

616 
ow
 = 
	`ALLOCATE
(
ovlw¨n_t
, 
TAG_COMPILER
, "overload warning");

617 
ow
->
√xt
 = 
ovîlﬂd_w¨nögs
;

618 
ow
->
func
 = 
deföôi⁄
->
«me
;

619 
ow
->
w¨n
 = 
	`Æloc_c°rög
(
buf
, "overload warning");

620 
ovîlﬂd_w¨nögs
 = 
ow
;

630 
Æüs
 = 
	`add_√w_fun˘i⁄_íåy
();

631 
	`FUNCTION_FLAGS
(
Æüs
Ë
NAME_INHERITED
 | 
NAME_ALIAS
;

632 
	`FUNCTION_RENTRY
(
Æüs
)->
öh
.
off£t
 = 
NUM_INHERITS
 - 1;

633 
	`FUNCTION_RENTRY
(
Æüs
)->
öh
.
fun˘i⁄_ödex_off£t
 = 
ödex
;

634 
	`FUNCTION_ALIAS
(
Æüs
Ë
ﬁdödex
;

635 
	`FUNCTION_TEMP
(
Æüs
)->
¥og
 = 
deÂrog
;

636 
	`FUNCTION_TEMP
(
Æüs
)->
u
.
func
 = 
deÂrog
->
fun˘i⁄_èbÀ
 + 
defödex
;

640 i‡–(
ﬁdÊags
 &
NAME_UNDEFINED
Ë&& (!(
√wÊags
 &
NAME_NO_CODE
) ) )

642 
f
 = (
¥og
->
fun˘i⁄_Êags
[
ödex
] &
NAME_MASK
Ë| 
NAME_DEF_BY_INHERIT
 | 
NAME_UNDEFINED
;

645 i‡(
f
 &
NAME_PRIVATE
)

647 
f
 |
NAME_HIDDEN
;

650 
f
 |
ty≥mod
;

652 i‡(
f
 &
NAME_PUBLIC
)

654 
f
 &~
NAME_PRIVATE
;

657 
	`FUNCTION_FLAGS
(
ﬁdödex
Ë
f
;

659 i‡(
	`FUNCTION_PROG
(
ﬁdödex
) == 0)

663 
	`COMPILER_FUNC
(
	`FUNCTION_TEMP
(
ﬁdödex
)->
u
.
ödex
)->
addªss
 = 
USHRT_MAX
;

665 
	`FUNCTION_TEMP
(
ﬁdödex
)->
¥og
 = 
deÂrog
;

666 
	`FUNCTION_TEMP
(
ﬁdödex
)->
u
.
func
 = 
deÂrog
->
fun˘i⁄_èbÀ
 + 
defödex
;

668 
	`FUNCTION_RENTRY
(
ﬁdödex
)->
öh
.
off£t
 = 
NUM_INHERITS
 - 1;

669 
	`FUNCTION_RENTRY
(
ﬁdödex
)->
öh
.
fun˘i⁄_ödex_off£t
 = 
ödex
;

672 i‡(!(
√wÊags
 &
NAME_ALIAS
) )

674 
	`FUNCTION_ALIAS
(
ﬁdödex
)++;

676 
	}
}

690 
	$c›y_fun˘i⁄s
(
¥ogøm_t
 *
‰om
, 
ty≥mod
)

692 
i
, 
öôülizî
 = - 1, 
num_fun˘i⁄s
 = 
‰om
->
num_fun˘i⁄s_tŸÆ
;

693 
idít_hash_ñem_t
 *
ihe
;

694 
num
;

696 i‡(
‰om
->
num_fun˘i⁄s_deföed
 && (‰om->
fun˘i⁄_èbÀ
[‰om->num_fun˘i⁄s_deföed - 1].
«me
[0] =
APPLY___INIT_SPECIAL_CHAR
) )

698 
öôülizî
 = --
num_fun˘i⁄s
;

701 
i
 = 0; i < 
num_fun˘i⁄s
; i++)

703 
¥ogøm_t
 *
¥og
 = 
‰om
;

704 
ödex
 = 
i
;

705 
ru¡ime_fun˘i⁄_u
 *
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
¥og
, 
ödex
);

706 
compûî_fun˘i⁄_t
 *
fu≈
;

709 
¥og
->
fun˘i⁄_Êags
[
ödex
] &
NAME_INHERITED
)

711 
¥og
 =Örog->
öhîô
[
func_íåy
->
öh
.
off£t
].prog;

712 
ödex
 = 
func_íåy
->
öh
.
fun˘i⁄_ödex_off£t
;

713 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
¥og
, 
ödex
);

717 
	`DEBUG_CHECK
(
func_íåy
->
def
.
f_ödex
 >
¥og
->
num_fun˘i⁄s_deföed
, "Index of founction out of bounds!");

718 
fu≈
 = 
¥og
->
fun˘i⁄_èbÀ
 + 
func_íåy
->
def
.
f_ödex
;

720 
ihe
 = 
	`lookup_idít
(
fu≈
->
«me
);

721 i‡(
ihe
 && ( (
num
 = ihe->
dn
.
fun˘i⁄_num
) != - 1) )

724 
	`ovîlﬂd_fun˘i⁄
(
‰om
, 
i
, 
¥og
, 
func_íåy
->
def
.
f_ödex
, 
num
, 
ty≥mod
);

728 
	`c›y_fun˘i⁄
(
‰om
, 
i
, 
¥og
, 
func_íåy
->
def
.
f_ödex
, 
ty≥mod
);

731  
öôülizî
;

732 
	}
}

738 
	$ty≥_îr‹
(*
°r
, 
ty≥
)

740 
buff
[256];

741 *
íd
 = 
	`EndOf
(
buff
);

742 *
p
;

744 
p
 = 
	`°Ωut
(
buff
, 
íd
, 
°r
);

745 
p
 = 
	`°Ωut
’, 
íd
, ": \"");

746 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
ty≥
);

747 
p
 = 
	`°Ωut
’, 
íd
, "\"");

748 
	`yyîr‹
(
buff
);

749 
	}
}

756 
	$com∑tibÀ_ty≥s
(
t1
, 
t2
)

758 
t1
 &~
NAME_TYPE_MOD
;

759 
t2
 &~
NAME_TYPE_MOD
;

760 i‡(
t1
 =
TYPE_ANY
 || 
t2
 == TYPE_ANY)

764 i‡–(
t1
 =(
TYPE_ANY
 | 
TYPE_MOD_ARRAY
Ë&& (
t2
 &TYPE_MOD_ARRAY) ) )

768 i‡–(
t2
 =(
TYPE_ANY
 | 
TYPE_MOD_ARRAY
Ë&& (
t1
 &TYPE_MOD_ARRAY) ) )

772 i‡(
t1
 &
TYPE_MOD_CLASS
)

774  
t1
 =
t2
;

776 i‡(
t1
 &
TYPE_MOD_ARRAY
)

778 i‡(!(
t2
 &
TYPE_MOD_ARRAY
) )

782  
t1
 =(
TYPE_MOD_ARRAY
 | 
TYPE_ANY
Ë|| 
t2
 == (TYPE_MOD_ARRAY | TYPE_ANY) || (t1 ==Å2);

784 i‡(
t2
 &
TYPE_MOD_ARRAY
)

788 i‡(
t1
 > 11)

792  
com∑tibÀ
[
t1
] &(1 << 
t2
);

793 
	}
}

796 
	$com∑tibÀ_ty≥s2
(
t1
, 
t2
)

798 
t1
 &~
NAME_TYPE_MOD
;

799 
t2
 &~
NAME_TYPE_MOD
;

800 i‡(
t1
 =
TYPE_ANY
 || 
t2
 == TYPE_ANY)

804 i‡–(
t1
 =(
TYPE_ANY
 | 
TYPE_MOD_ARRAY
Ë&& (
t2
 &TYPE_MOD_ARRAY) ) )

808 i‡–(
t2
 =(
TYPE_ANY
 | 
TYPE_MOD_ARRAY
Ë&& (
t1
 &TYPE_MOD_ARRAY) ) )

812 i‡(
t1
 &
TYPE_MOD_CLASS
)

814  
t1
 =
t2
;

816 i‡(
t1
 &
TYPE_MOD_ARRAY
)

818 i‡(!(
t2
 &
TYPE_MOD_ARRAY
) )

822  
t1
 =(
TYPE_MOD_ARRAY
 | 
TYPE_ANY
Ë|| 
t2
 == (TYPE_MOD_ARRAY | TYPE_ANY) || (t1 ==Å2);

824 i‡(
t2
 &
TYPE_MOD_ARRAY
)

828 i‡(
com∑tibÀ
[
t1
] &(1 << 
t2
) )

832  
com∑tibÀ
[
t2
] &(1 << 
t1
);

833 
	}
}

845 
	$föd_m©chög_fun˘i⁄
(
¥ogøm_t
 *
¥og
, *
«me
, 
∑r£_node_t
 *
node
)

847 
high
 = 
¥og
->
num_fun˘i⁄s_deföed
 - 1;

848 
low
 = 0;

849 
i
;

852 
high
 >
low
)

854 
mid
 = (
high
 + 
low
) / 2;

855 *
p
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].
«me
;

857 i‡(
«me
 < 
p
)

859 
high
 = 
mid
 - 1;

861 i‡(
«me
 > 
p
)

863 
low
 = 
mid
 + 1;

867 
öd
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].
ru¡ime_ödex
;

868 
Êags
 = 
¥og
->
fun˘i⁄_Êags
[
öd
];

869 i‡(
Êags
 &(
NAME_UNDEFINED
 | 
NAME_PROTOTYPE
 | 
NAME_INHERITED
) )

871 i‡(
Êags
 &
NAME_INHERITED
)

877 i‡(
Êags
 &
NAME_PRIVATE
)

882 
node
->
köd
 = 
NODE_CALL_2
;

883 
node
->
v
.
numbî
 = 
F_CALL_INHERITED
;

884 
node
->
l
.
numbî
 = 
öd
;

885 
node
->
ty≥
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].type;

891 
i
 = 
¥og
->
num_öhîôed
;

892 
i
--)

894 i‡(
	`föd_m©chög_fun˘i⁄
(
¥og
->
öhîô
[
i
].¥og, 
«me
, 
node
) )

896 i‡(
¥og
->
öhîô
[
i
].
ty≥_mod
 &
NAME_PRIVATE
)

901 
node
->
l
.
numbî
 +
¥og
->
öhîô
[
i
].
fun˘i⁄_ödex_off£t
;

906 
	}
}

912 
	$¨ønge_ˇŒ_öhîôed
(*
«me
, 
∑r£_node_t
 *
node
)

914 
öhîô_t
 *
ù
;

915 
num_öhîôs
, 
su≥r_Àngth
 = 0;

916 *
su≥r_«me
 = 0, *
p
, *
ªÆ_«me
 = 
«me
;

917 *
sh¨ed_°rög
;

918 
ªt
;

920 i‡(
ªÆ_«me
[0] == ':')

922 
su≥r_«me
 = 0;

923 
ªÆ_«me
 += 2;

924 
su≥r_Àngth
 = 0;

926 i‡–(
p
 = 
	`°rchr
(
ªÆ_«me
, ':') ) )

928 
su≥r_«me
 = 
«me
;

929 
ªÆ_«me
 = 
p
 + 2;

930 
su≥r_Àngth
 = 
ªÆ_«me
 - 
su≥r_«me
 - 2;

932 
num_öhîôs
 = 
NUM_INHERITS
;

934 i‡–(
sh¨ed_°rög
 = 
	`föd°rög
(
ªÆ_«me
) ) )

936 
ù
 = (
öhîô_t
*)
mem_block
[
A_INHERITS
].
block
;

937 ; 
num_öhîôs
 > 0; 
ù
++,Çum_inherits--)

939 
tmp
;

941 i‡(
su≥r_«me
)

943 
l
 = 
	`SHARED_STRLEN
(
ù
->
¥og
->
«me
);

945 i‡(
l
 - 2 < 
su≥r_Àngth
)

949 i‡(
	`°∫cmp
(
su≥r_«me
, 
ù
->
¥og
->
«me
 + 
l
 - 2-
su≥r_Àngth
, super_length) != 0 || !( (l - 2 == super_length) || ( (ip->prog->name +Ü - 3-super_length)[0] == '/') ) )

954 i‡–(
tmp
 = 
	`föd_m©chög_fun˘i⁄
(
ù
->
¥og
, 
sh¨ed_°rög
, 
node
) ) )

956 i‡(
tmp
 =- 1 || (
ù
->
ty≥_mod
 &
NAME_PRIVATE
) )

958 
	`yyîr‹
("Called function isÖrivate.");

960 
övÆid
;

963 
ªt
 = 
node
->
l
.
numbî
 + 
ù
->
fun˘i⁄_ödex_off£t
;

964 
node
->
l
.
numbî
 +–(
ù
 - (
öhîô_t
*)
mem_block
[
A_INHERITS
].
block
) << 16);

965  
ªt
;

970 
buff
[256];

971 *
íd
 = 
	`EndOf
(
buff
);

972 *
p
;

974 
p
 = 
	`°Ωut
(
buff
, 
íd
, "No such inherited function ");

975 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

976 
	`yyîr‹
(
buff
);

979 
övÆid
: 
node
->
köd
 = 
NODE_CALL_2
;

980 
node
->
v
.
numbî
 = 
F_CALL_INHERITED
;

981 
node
->
l
.
numbî
 = 0;

982 
node
->
ty≥
 = 
TYPE_ANY
;

985 
	}
}

996 
	$deföe_√w_fun˘i⁄
(*
«me
, 
num_¨g
, 
num_loˇl
, 
Êags
, 
ty≥
)

998 
ru¡ime_num
, 
num
 = 0;

999 
¨gumít_°¨t_ödex
;

1000 
idít_hash_ñem_t
 *
ihe
;

1001 
compûî_fun˘i⁄_t
 *
fu≈
 = 0;

1003 
ru¡ime_num
 = (
ihe
 = 
	`lookup_idít
(
«me
ËË? ihe->
dn
.
fun˘i⁄_num
: - 1;

1004 i‡(
ru¡ime_num
 >= 0)

1006 
ru¡ime_deföed_t
 *
fundeÂ
 = &
	`FUNCTION_DEF_RENTRY
(
ru¡ime_num
)->
def
;

1007 
funÊags
 = 
	`FUNCTION_FLAGS
(
ru¡ime_num
);

1008 
fu≈
 = 
	`FUNCTION_DEF
(
ru¡ime_num
);

1019 i‡(!(
funÊags
 &
NAME_UNDEFINED
Ë&& !(
Êags
 &
NAME_PROTOTYPE
) )

1021 
buff
[256];

1022 *
íd
 = 
	`EndOf
(
buff
);

1023 *
p
;

1025 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Redeclaration of function ");

1026 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

1027 
p
 = 
	`°Ωut
’, 
íd
, ".");

1028 
	`yyîr‹
(
buff
);

1042 i‡–(
funÊags
 &
NAME_NO_MASK
Ë&& !(funÊag†&
NAME_PROTOTYPE
Ë&& !(
Êags
 &NAME_PROTOTYPE) )

1044 
buf
[256];

1045 *
íd
 = 
	`EndOf
(
buf
);

1046 *
p
;

1048 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine 'nomask' function \"");

1049 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

1050 
p
 = 
	`°Ωut
’, 
íd
, "\"");

1051 
	`yyîr‹
(
buf
);

1055 i‡(
exa˘_ty≥s
 && (
funÊags
 &
NAME_PROTOTYPE
Ë&& 
fu≈
->
ty≥
 !
TYPE_UNKNOWN
)

1057 
i
;

1060 i‡(!(
Êags
 &
NAME_PROTOTYPE
) )

1062 i‡(
fundeÂ
->
num_¨g
 !num_¨g && !(
funÊags
 &
NAME_VARARGS
) )

1065 
	`yyîr‹
("ArgumentsÇumber disagrees withÖrevious definition.");

1067 i‡(!(
funÊags
 &
NAME_STRICT_TYPES
) )

1070 
	`yyîr‹
("Called functionÇ0ot compiled withÅypeÅesting.");

1074 i‡–(
ty≥
 &(~
NAME_TYPE_MOD
ËË!
fu≈
->type)

1076 
buff
[256];

1077 *
íd
 = 
	`EndOf
(
buff
);

1078 *
p
;

1080 
p
 = 
	`°Ωut
(
buff
, 
íd
, "ReturnÅype doesn't matchÖrototype ");

1081 
	`gë_two_ty≥s
(
p
, 
íd
, 
ty≥
 &(~
NAME_TYPE_MOD
), 
fu≈
->type);

1082 
	`yyw¨n
(
buff
);

1085 
i
 = 0; i < 
num_¨g
; i++)

1093 i‡(
Êags
 &
NAME_PROTOTYPE
)

1099 i‡(
¥agmas
 &
PRAGMA_WARNINGS
)

1101 
	`ªmove_ovîlﬂd_w¨nögs
(
fu≈
->
«me
);

1109 i‡(
	`FUNCTION_PROG
(
ru¡ime_num
) == 0)

1111 
num
 = 
	`FUNCTION_TEMP
(
ru¡ime_num
)->
u
.
ödex
;

1112 
fu≈
 = 
	`COMPILER_FUNC
(
num
);

1116 
fu≈
 = 0;

1119 i‡(!
fu≈
)

1121 
num
 = 
mem_block
[
A_COMPILER_FUNCTIONS
].
cuºít_size
 / (
compûî_fun˘i⁄_t
);

1122 
fu≈
 = (
compûî_fun˘i⁄_t
*)
	`Æloˇã_ö_mem_block
(
A_COMPILER_FUNCTIONS
, (compiler_function_t) );

1123 
fu≈
->
«me
 = 
	`make_sh¨ed_°rög
(name);

1124 
¨gumít_°¨t_ödex
 = 
INDEX_START_NONE
;

1125 
	`add_to_mem_block
(
A_ARGUMENT_INDEX
, (*Ë&
¨gumít_°¨t_ödex
, árgument_start_index);

1127 i‡(
ru¡ime_num
 == - 1)

1129 
ru¡ime_num
 = 
	`add_√w_fun˘i⁄_íåy
();

1130 
ihe
 = 
	`föd_‹_add_idít
(
fu≈
->
«me
, 
FOA_GLOBAL_SCOPE
);

1131 i‡(
ihe
->
dn
.
fun˘i⁄_num
 == - 1)

1133 
ihe
->
£m_vÆue
++;

1135 
ihe
->
dn
.
fun˘i⁄_num
 = 
ru¡ime_num
;

1136 
	`FUNCTION_ALIAS
(
ru¡ime_num
) = 0;

1139 
	`FUNCTION_TEMP
(
ru¡ime_num
)->
¥og
 = 0;

1140 
	`FUNCTION_TEMP
(
ru¡ime_num
)->
u
.
ödex
 = 
num
;

1142 i‡(
exa˘_ty≥s
)

1144 
Êags
 |
NAME_STRICT_TYPES
;

1146 
	`FUNCTION_FLAGS
(
ru¡ime_num
Ë(
ty≥
 &
NAME_TYPE_MOD
Ë| 
Êags
;

1148 
	`FUNCTION_RENTRY
(
ru¡ime_num
)->
def
.
num_loˇl
 =Çum_local;

1149 
	`FUNCTION_RENTRY
(
ru¡ime_num
)->
def
.
num_¨g
 =Çum_arg;

1150 
	`FUNCTION_RENTRY
(
ru¡ime_num
)->
def
.
f_ödex
 = 
num
;

1151 
	`FUNCTION_ALIAS
(
ru¡ime_num
)++;

1153 
fu≈
->
ty≥
 =Åy≥ &~
NAME_TYPE_MOD
;

1154 
fu≈
->
ru¡ime_ödex
 = 
ru¡ime_num
;

1155 
fu≈
->
addªss
 = 0;

1156 #ifde‡
PROFILE_FUNCTIONS


1157 
fu≈
->
ˇŒs
 = 0L;

1158 
fu≈
->
£lf
 = 0L;

1159 
fu≈
->
chûdªn
 = 0L;

1162 i‡(
exa˘_ty≥s
 && 
num_¨g
)

1164 *–(*)
mem_block
[
A_ARGUMENT_INDEX
].
block
 + 
num
Ëmem_block[
A_ARGUMENT_TYPES
].
cuºít_size
 / ();

1165 
	`add_to_mem_block
(
A_ARGUMENT_TYPES
, (*)
ty≥_of_loˇls_±r
, 
num_¨g
 *(*type_of_locals_ptr) );

1167  
num
;

1168 
	}
}

1174 
	$deföe_v¨übÀ
(*
«me
, 
ty≥
, 
hide
)

1176 
v¨übÀ_t
 *
dummy
;

1177 
n
;

1178 
idít_hash_ñem_t
 *
ihe
;

1180 
n
 = (
mem_block
[
A_VAR_TEMP
].
cuºít_size
 / (
v¨übÀ_t
) );

1182 
ihe
 = 
	`föd_‹_add_idít
(
«me
, 
FOA_GLOBAL_SCOPE
);

1183 i‡(
ihe
->
dn
.
globÆ_num
 == - 1)

1185 
ihe
->
£m_vÆue
++;

1186 
ihe
->
dn
.
globÆ_num
 = 
n
;

1187 i‡(
n
 >= 256)

1189 
	`yyîr‹
("Too many global variables");

1194 i‡(
	`VAR_TEMP
(
ihe
->
dn
.
globÆ_num
)->
ty≥
 &
NAME_NO_MASK
)

1196 
buf
[256];

1197 *
íd
 = 
	`EndOf
(
buf
);

1198 *
p
;

1200 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine 'nomask' variable \"");

1201 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

1202 
p
 = 
	`°Ωut
’, 
íd
, "\"");

1203 
	`yyîr‹
(
buf
);

1208 i‡(!(
	`VAR_TEMP
(
ihe
->
dn
.
globÆ_num
)->
ty≥
 &
NAME_STATIC
) )

1210 
ty≥
 |
NAME_STATIC
;

1216 i‡(!
hide
)

1218 
ihe
->
dn
.
globÆ_num
 = 
n
;

1222 
dummy
 = (
v¨übÀ_t
*)
	`Æloˇã_ö_mem_block
(
A_VAR_TEMP
, (variable_t) );

1223 
dummy
->
«me
 =Çame;

1224 
dummy
->
ty≥
 =Åype;

1226 i‡(
hide
)

1228 
dummy
->
ty≥
 |
NAME_HIDDEN
;

1231  
n
;

1232 
	}
}

1238 
	$deföe_√w_v¨übÀ
(*
«me
, 
ty≥
)

1240 
n
;

1241 *
ç
;

1242 **
≈
;

1244 
v¨_deföed
 = 1;

1245 
«me
 = 
	`make_sh¨ed_°rög
(name);

1246 
n
 = 
	`deföe_v¨übÀ
(
«me
, 
ty≥
, 0);

1247 
≈
 = (**)
	`Æloˇã_ö_mem_block
(
A_VAR_NAME
, (*) );

1248 *
≈
 = 
«me
;

1249 
ç
 = (*)
	`Æloˇã_ö_mem_block
(
A_VAR_TYPE
, () );

1250 *
ç
 = 
ty≥
;

1252  
n
;

1253 
	}
}

1259 *
	gcompûî_ty≥_«mes
[] =

1265 *
	$gë_ty≥_«me
(*
whîe
, *
íd
, 
ty≥
)

1267 
poöãr
 = 0;

1269 i‡(
ty≥
 &
NAME_STATIC
)

1271 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "static ");

1273 i‡(
ty≥
 &
NAME_NO_MASK
)

1275 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "nomask ");

1277 i‡(
ty≥
 &
NAME_PRIVATE
)

1279 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "private ");

1281 i‡(
ty≥
 &
NAME_PROTECTED
)

1283 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "protected ");

1285 i‡(
ty≥
 &
NAME_PUBLIC
)

1287 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "public ");

1289 i‡(
ty≥
 &
NAME_VARARGS
)

1291 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "varargs ");

1293 
ty≥
 &~
NAME_TYPE_MOD
;

1294 i‡(
ty≥
 &
TYPE_MOD_ARRAY
)

1296 
poöãr
 = 1;

1297 
ty≥
 &~
TYPE_MOD_ARRAY
;

1299 i‡(
ty≥
 &
TYPE_MOD_CLASS
)

1301 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "class ");

1303 i‡(
cuºít_fûe
)

1305 
whîe
 = 
	`°Ωut
(whîe, 
íd
, 
	`PROG_STRING
(
	`CLASS
(
ty≥
 &~
TYPE_MOD_CLASS
)->
«me
) );

1310 
	`DEBUG_CHECK
(
ty≥
 > 
compûî_ty≥_«mes
 /  compiler_type_names[0], "BadÅype\n");

1311 
whîe
 = 
	`°Ωut
(whîe, 
íd
, 
compûî_ty≥_«mes
[
ty≥
]);

1313 
whîe
 = 
	`°Ωut
(whîe, 
íd
, " ");

1314 i‡(
poöãr
)

1316 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "* ");

1318  
whîe
;

1319 
	}
}

1325 
	#STRING_HASH
(
v¨
,
°r
) \

1326 
v¨
 = ()
°r
 ^ ()str >> 16; \

1327 
v¨
 = (v¨ ^ v¨ >> 8Ë& 0xff;

	)

1329 
	$°‹e_¥og_°rög
(*
°r
)

1331 
i
, 
√xt
, *
√xt_èb
, *
idxp
;

1332 **
p
;

1333 
hash
, 
mask
, *
ègp
;

1335 
°r
 = 
	`make_sh¨ed_°rög
(str);

1336 
	`STRING_HASH
(
hash
, 
°r
);

1337 
idxp
 = &
°rög_idx
[
hash
];

1340 
mask
 = 1 << (
hash
 &7);

1341 
ègp
 = &
°rög_ègs
[
hash
 >> 3];

1343 
p
 = (**Ë&
	`PROG_STRING
(0);

1344 
√xt_èb
 = (*)
mem_block
[
A_STRING_NEXT
].
block
;

1346 i‡(*
ègp
 &
mask
)

1349 
i
 = *
idxp
; i >0; i = 
√xt_èb
[i])

1351 i‡(
p
[
i
] =
°r
)

1353 
	`‰ì_°rög
(
°r
);

1355 –(*)
mem_block
[
A_STRING_REFS
].
block
)[
i
]++;

1356  
i
;

1359 
√xt
 = *
idxp
;

1363 *
ègp
 |
mask
;

1364 
√xt
 = - 1;

1371 i‡(
‰ìd_°rög
 >= 0)

1374 
t›
;

1376 
i
 = 
‰ìd_°rög
;

1378 
t›
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 /  
°r
;

1379 
‰ìd_°rög
++; fªed_°rög < 
t›
; freed_string++)

1381 i‡(
p
[
‰ìd_°rög
] == 0)

1386 i‡(
‰ìd_°rög
 >
t›
)

1388 
‰ìd_°rög
 = - 1;

1394 
	`add_to_mem_block
(
A_STRINGS
, 0,  
°r
);

1395 
	`add_to_mem_block
(
A_STRING_NEXT
, 0, () );

1396 
	`add_to_mem_block
(
A_STRING_REFS
, 0, () );

1398 
i
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 /  
°r
 - 1;

1400 
	`PROG_STRING
(
i
Ë
°r
;

1401 –(*)
mem_block
[
A_STRING_NEXT
].
block
)[
i
] = 
√xt
;

1402 –(*)
mem_block
[
A_STRING_REFS
].
block
)[
i
] = 1;

1403 *
idxp
 = 
i
;

1404  
i
;

1405 
	}
}

1411 
	$‰ì_¥og_°rög
(
num
)

1413 
i
, 
¥v
, *
√xt_èb
, 
t›
, *
idxp
;

1414 **
p
, *
°r
;

1415 
hash
, 
mask
;

1417 
t›
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 / (*) - 1;

1418 i‡(
num
 < 0 ||Çum > 
t›
)

1420 
	`yyîr‹
("free_prog_string: index out ofÑange.\n");

1423 i‡(--–(*)
mem_block
[
A_STRING_REFS
].
block
)[
num
] >= 1)

1428 
p
 = (**)
mem_block
[
A_STRINGS
].
block
;

1429 
√xt_èb
 = (*)
mem_block
[
A_STRING_NEXT
].
block
;

1431 
°r
 = 
p
[
num
];

1432 
	`STRING_HASH
(
hash
, 
°r
);

1433 
idxp
 = &
°rög_idx
[
hash
];

1435 
¥v
 = - 1, 
i
 = *
idxp
; i !
num
;Örv = i, i = 
√xt_èb
[i])

1437 i‡(
i
 == - 1)

1440 
	`yyîr‹
("stringÇot inÖrogÅable.\n");

1445 i‡(
¥v
 == - 1)

1448 *
idxp
 = 
√xt_èb
[
i
];

1449 i‡(*
idxp
 == - 1)

1452 
mask
 = 1 << (
hash
 &7);

1453 
°rög_ègs
[
hash
 >> 3] &~
mask
;

1459 
√xt_èb
[
¥v
] =Çext_èb[
i
];

1462 
	`‰ì_°rög
(
°r
);

1463 
p
[
i
] = 0;

1464 i‡(
i
 !
t›
)

1466 i‡(
i
 < 
‰ìd_°rög
 || freed_string == - 1)

1468 
‰ìd_°rög
 = 
i
;

1474 
mem_block
[
A_STRINGS
].
cuºít_size
 - 
°r
;

1475 
mem_block
[
A_STRING_REFS
].
cuºít_size
 -= ();

1476 
mem_block
[
A_STRING_NEXT
].
cuºít_size
 -= ();

1478 
	}
}

1484 
	$vÆid©e_fun˘i⁄_ˇŒ
(
f
, 
∑r£_node_t
 *
¨gs
)

1486 
compûî_fun˘i⁄_t
 *
fu≈
 = 
	`FUNCTION_DEF
(
f
);

1487 
ru¡ime_deföed_t
 *
fundeÂ
 = &(
	`FUNCTION_DEF_RENTRY
(
f
)->
def
);

1488 
funÊags
 = 
	`FUNCTION_FLAGS
(
f
);

1489 
num_¨g
 = (
¨gs
 ?árgs->
köd
: 0);

1490 
num_v¨
 = 0;

1491 
∑r£_node_t
 *
≤
 = 
¨gs
;

1492 *
¨g_ty≥s
 = 0;

1493 
¥ogøm_t
 *
¥og
;

1495 
≤
)

1497 i‡(
≤
->
ty≥
 &1)

1499 
num_v¨
++;

1501 
≤
 =Ön->
r
.
ex¥
;

1505 i‡(
funÊags
 &
NAME_HIDDEN
)

1507 
buf
[256];

1508 *
íd
 = 
	`EndOf
(
buf
);

1509 *
p
;

1511 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo callÖrivate function '");

1512 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1513 
p
 = 
	`°Ωut
’, 
íd
, "'");

1514 
	`yyîr‹
(
buf
);

1520 i‡–(
funÊags
 &
NAME_UNDEFINED
Ë&& !(funÊag†&(
NAME_PROTOTYPE
 | 
NAME_DEF_BY_INHERIT
ËË&& 
exa˘_ty≥s
)

1522 
buf
[256];

1523 *
íd
 = 
	`EndOf
(
buf
);

1524 *
p
;

1526 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Function ");

1527 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1528 
p
 = 
	`°Ωut
’, 
íd
, " undefined");

1529 
	`yyîr‹
(
buf
);

1534 i‡(!(
funÊags
 &
NAME_VARARGS
Ë&& (funÊag†&
NAME_STRICT_TYPES
Ë&& 
exa˘_ty≥s
)

1536 
buff
[256];

1537 *
íd
 = 
	`EndOf
(
buff
);

1538 *
p
;

1540 i‡(
num_v¨
)

1542 
p
 = 
	`°Ωut
(
buff
, 
íd
, "IllegalÅoÖassá variableÇumber ofárgumentsÅoÇon-varargs function ");

1543 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1544 
p
 = 
	`°Ωut
’, 
íd
, "\n");

1545 
	`yyîr‹
(
buff
);

1548 i‡(
fundeÂ
->
num_¨g
 !=Çum_arg)

1550 
p
 = 
	`°Ωut
(
buff
, 
íd
, "WrongÇumber ofárgumentsÅo ");

1551 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1552 
p
 = 
	`°Ωut
’, 
íd
, "\n Expected: ");

1553 
p
 = 
	`°Ωut_öt
’, 
íd
, 
fundeÂ
->
num_¨g
);

1554 
p
 = 
	`°Ωut
’, 
íd
, " Got: ");

1555 
p
 = 
	`°Ωut_öt
’, 
íd
, 
num_¨g
);

1556 
	`yyîr‹
(
buff
);

1562 i‡–(
¥og
 = 
	`FUNCTION_PROG
(
f
) ) )

1564 
which
 = (
	`FUNCTION_TEMP
(
f
)->
u
.
func
 - 
¥og
->
fun˘i⁄_èbÀ
);

1565 i‡(
¥og
->
ty≥_°¨t
)

1567 
°¨t
 = 
¥og
->
ty≥_°¨t
[
which
];

1568 i‡(
°¨t
 !
INDEX_START_NONE
)

1570 
¨g_ty≥s
 = 
¥og
->
¨gumít_ty≥s
 + 
°¨t
;

1576 
which
 = 
	`FUNCTION_TEMP
(
f
)->
u
.
ödex
;

1577 
°¨t
 = *–(*)
mem_block
[
A_ARGUMENT_INDEX
].
block
 + 
which
);

1578 i‡(
°¨t
 !
INDEX_START_NONE
)

1580 
¨g_ty≥s
 = (*)
mem_block
[
A_ARGUMENT_TYPES
].
block
 + 
°¨t
;

1584 i‡(
exa˘_ty≥s
 && 
¨g_ty≥s
)

1586 
i
, 
tmp
;

1587 
∑r£_node_t
 *
íode
 = 
¨gs
;

1588 
‚¨g
 = 
fundeÂ
->
num_¨g
;

1590 i‡(
funÊags
 &
NAME_TRUE_VARARGS
)

1592 
‚¨g
--;

1595 
i
 = 0; i < 
‚¨g
 && i < 
num_¨g
; i++)

1597 i‡(
íode
->
ty≥
 &1)

1601 
tmp
 = 
íode
->
v
.
ex¥
->
ty≥
;

1603 i‡(!
	`com∑tibÀ_ty≥s
(
tmp
, 
¨g_ty≥s
[
i
]) )

1605 
buff
[256];

1606 *
íd
 = 
	`EndOf
(
buff
);

1607 *
p
;

1609 
p
 = 
	`°Ωut
(
buff
, 
íd
, "BadÅype forárgument ");

1610 
p
 = 
	`°Ωut_öt
’, 
íd
, 
i
 + 1);

1611 
p
 = 
	`°Ωut
’, 
íd
, " of ");

1612 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1613 
p
 = 
	`°Ωut
’, 
íd
, " ");

1614 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
¨g_ty≥s
[
i
], 
tmp
);

1615 
	`yyîr‹
(
buff
);

1617 
íode
 =Énode->
r
.
ex¥
;

1620  
fu≈
->
ty≥
;

1621 
	}
}

1627 
∑r£_node_t
 *
	$¥omŸe_to_Êﬂt
(
∑r£_node_t
 *
node
)

1629 
∑r£_node_t
 *
ex¥
;

1630 i‡(
node
->
köd
 =
NODE_NUMBER
)

1632 
node
->
köd
 = 
NODE_REAL
;

1633 
node
->
v
.
ªÆ
 =Çode->v.
numbî
;

1634  
node
;

1636 
ex¥
 = 
	`√w_node
();

1637 
ex¥
->
köd
 = 
NODE_EFUN
;

1638 
ex¥
->
v
.
numbî
 = 
F_TO_FLOAT
;

1639 
ex¥
->
ty≥
 = 
TYPE_REAL
;

1640 
ex¥
->
l
.
numbî
 = 1;

1641 
ex¥
->
r
.ex¥ = 
	`√w_node_no_löe
();

1642 
ex¥
->
r
.ex¥->
köd
 = 1;

1643 
ex¥
->
r
.ex¥->
l
.expr =Éxpr->r.expr;

1644 
ex¥
->
r
.ex¥->
ty≥
 = 0;

1645 
ex¥
->
r
.ex¥->
v
.ex¥ = 
node
;

1646 
ex¥
->
r
.expr->r.expr = 0;

1647  
ex¥
;

1648 
	}
}

1654 
∑r£_node_t
 *
	$¥omŸe_to_öt
(
∑r£_node_t
 *
node
)

1656 
∑r£_node_t
 *
ex¥
;

1657 i‡(
node
->
köd
 =
NODE_REAL
)

1659 
node
->
köd
 = 
NODE_NUMBER
;

1660 
node
->
v
.
numbî
 =Çode->v.
ªÆ
;

1661  
node
;

1663 
ex¥
 = 
	`√w_node
();

1664 
ex¥
->
köd
 = 
NODE_EFUN
;

1665 
ex¥
->
v
.
numbî
 = 
F_TO_INT
;

1666 
ex¥
->
ty≥
 = 
TYPE_NUMBER
;

1667 
ex¥
->
l
.
numbî
 = 1;

1668 
ex¥
->
r
.ex¥ = 
	`√w_node_no_löe
();

1669 
ex¥
->
r
.ex¥->
köd
 = 1;

1670 
ex¥
->
r
.ex¥->
l
.expr =Éxpr->r.expr;

1671 
ex¥
->
r
.ex¥->
ty≥
 = 0;

1672 
ex¥
->
r
.ex¥->
v
.ex¥ = 
node
;

1673 
ex¥
->
r
.expr->r.expr = 0;

1674  
ex¥
;

1675 
	}
}

1681 
∑r£_node_t
 *
	$do_¥omŸi⁄s
(
∑r£_node_t
 *
node
, 
ty≥
)

1683 i‡(
ty≥
 =
TYPE_REAL
)

1685 i‡(
node
->
ty≥
 =
TYPE_NUMBER
 ||Çode->
köd
 =
NODE_NUMBER
)

1687  
	`¥omŸe_to_Êﬂt
(
node
);

1690 i‡(
ty≥
 =
TYPE_NUMBER
 && 
node
->ty≥ =
TYPE_REAL
)

1692  
	`¥omŸe_to_öt
(
node
);

1694  
node
;

1695 
	}
}

1699 
∑r£_node_t
 *
	$throw_away_ˇŒ
(
∑r£_node_t
 *
≤
)

1701 
∑r£_node_t
 *
íode
;

1702 
∑r£_node_t
 *
ªt
 = 0;

1703 
∑r£_node_t
 *
¨g
;

1705 
íode
 = 
≤
->
r
.
ex¥
;

1706 
íode
)

1708 
¨g
 = 
	`ö£π_p›_vÆue
(
íode
->
v
.
ex¥
);

1709 i‡(
¨g
)

1712 i‡(
ªt
)

1714 
∑r£_node_t
 *
tmp
;

1715 
	`CREATE_STATEMENTS
(
tmp
, 
ªt
, 
¨g
);

1716 
ªt
 = 
tmp
;

1720 
ªt
 = 
¨g
;

1723 
íode
 =Énode->
r
.
ex¥
;

1725  
ªt
;

1726 
	}
}

1732 
∑r£_node_t
 *
	$throw_away_m≠pög
(
∑r£_node_t
 *
≤
)

1734 
∑r£_node_t
 *
íode
;

1735 
∑r£_node_t
 *
ªt
 = 0;

1736 
∑r£_node_t
 *
¨g
;

1738 
íode
 = 
≤
->
r
.
ex¥
;

1739 
íode
)

1741 
¨g
 = 
	`ö£π_p›_vÆue
(
íode
->
v
.
ex¥
->
l
.expr);

1742 i‡(
¨g
)

1745 i‡(
ªt
)

1747 
∑r£_node_t
 *
tmp
;

1748 
	`CREATE_STATEMENTS
(
tmp
, 
ªt
, 
¨g
);

1749 
ªt
 = 
tmp
;

1753 
ªt
 = 
¨g
;

1756 
¨g
 = 
	`ö£π_p›_vÆue
(
íode
->
v
.
ex¥
->
r
.expr);

1757 i‡(
¨g
)

1760 i‡(
ªt
)

1762 
∑r£_node_t
 *
tmp
;

1763 
	`CREATE_STATEMENTS
(
tmp
, 
ªt
, 
¨g
);

1764 
ªt
 = 
tmp
;

1768 
ªt
 = 
¨g
;

1771 
íode
 =Énode->
r
.
ex¥
;

1773  
ªt
;

1774 
	}
}

1780 
∑r£_node_t
 *
	$vÆid©e_efun_ˇŒ
(
f
, 
∑r£_node_t
 *
¨gs
)

1782 
num
 = 
¨gs
->
v
.
numbî
;

1783 
mö_¨g
, 
max_¨g
, 
def
, *
¨gp
;

1784 
num_v¨
 = 0;

1785 
∑r£_node_t
 *
≤
 = 
¨gs
->
r
.
ex¥
;

1787 
≤
)

1789 i‡(
≤
->
ty≥
 &1)

1791 
num_v¨
++;

1793 
≤
 =Ön->
r
.
ex¥
;

1796 i‡(
f
 != - 1)

1799 
¥edefs
[
f
].
tokí
)

1801 #ifde‡
F_SIZEOF


1802 
F_SIZEOF
:

1806 i‡(!
≤
 && 
num
 =1 && 
	`IS_NODE
(
¨gs
->
r
.
ex¥
->
v
.ex¥, 
NODE_CALL
, 
F_AGGREGATE
) )

1808 
∑r£_node_t
 *
ª∂
, *
ªt
, *
node
;

1810 
	`CREATE_NUMBER
(
node
, 
¨gs
->
r
.
ex¥
->
v
.ex¥->
l
.
numbî
);

1811 
ªt
 = 
	`throw_away_ˇŒ
(
¨gs
->
r
.
ex¥
->
v
.expr);

1812 i‡(
ªt
)

1814 
	`CREATE_TWO_VALUES
(
ª∂
, 
TYPE_NUMBER
, 
ªt
, 
node
);

1815  
ª∂
;

1819  
node
;

1825 
mö_¨g
 = 
¥edefs
[
f
].
mö_¨gs
;

1826 
max_¨g
 = 
¥edefs
[
f
].
max_¨gs
;

1828 
def
 = 
¥edefs
[
f
].
DeÁu…
;

1829 i‡(!
num_v¨
 && 
def
 !
DEFAULT_NONE
 && 
num
 =
mö_¨g
 - 1)

1831 
∑r£_node_t
 *
tmp
;

1832 
tmp
 = 
	`√w_node_no_löe
();

1833 
tmp
->
r
.
ex¥
 = 0;

1834 
tmp
->
ty≥
 = 0;

1835 
¨gs
->
l
.
ex¥
->
r
.ex¥ = 
tmp
;

1836 i‡(
def
 =
DEFAULT_THIS_OBJECT
)

1838 
tmp
->
v
.
ex¥
 = 
	`√w_node_no_löe
();

1839 
tmp
->
v
.
ex¥
->
köd
 = 
NODE_EFUN
;

1840 
tmp
->
v
.
ex¥
->v.
numbî
 = 
F_THIS_OBJECT
;

1841 
tmp
->
v
.
ex¥
->
l
.
numbî
 = 0;

1842 
tmp
->
v
.
ex¥
->
ty≥
 = 
TYPE_ANY
;

1843 
tmp
->
v
.
ex¥
->
r
.expr = 0;

1847 
	`CREATE_NUMBER
(
tmp
->
v
.
ex¥
, 
def
);

1849 
¨gs
->
v
.
numbî
++;

1850 
num
++;

1852 i‡(
num_v¨
 && 
max_¨g
 != - 1)

1854 
buff
[256];

1855 *
íd
 = 
	`EndOf
(
buff
);

1856 *
p
;

1858 
p
 = 
	`°Ωut
(
buff
, 
íd
, "IllegalÅoÖass variableÇumber ofárgumentsÅoÇon-varargsÉfun ");

1859 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

1860 
	`yyîr‹
(
buff
);

1861 
	`CREATE_ERROR
(
¨gs
);

1862  
¨gs
;

1864 i‡–(
num
 - 
num_v¨
Ë< 
mö_¨g
)

1866 
buff
[256];

1867 *
íd
 = 
	`EndOf
(
buff
);

1868 *
p
;

1870 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Too fewárgumentsÅo ");

1871 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

1872 
	`CREATE_ERROR
(
¨gs
);

1873 
	`yyîr‹
(
buff
);

1874  
¨gs
;

1876 i‡(
num
 > 
max_¨g
 && max_arg != - 1)

1878 
buff
[256];

1879 *
íd
 = 
	`EndOf
(
buff
);

1880 *
p
;

1882 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Too manyárgumentsÅo ");

1883 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

1884 
	`yyîr‹
(
buff
);

1885 
	`CREATE_ERROR
(
¨gs
);

1886  
¨gs
;

1888 i‡(
max_¨g
 !- 1 && 
exa˘_ty≥s
)

1893 
i
, 
¨gn
, 
tmp
;

1894 
buff
[256];

1895 *
íd
 = 
	`EndOf
(
buff
);

1896 *
p
;

1897 
∑r£_node_t
 *
íode
 = 
¨gs
;

1898 
¨gp
 = &
efun_¨g_ty≥s
[
¥edefs
[
f
].
¨g_ödex
];

1900 
¨gn
 = 0;árg¿< 
num
;árgn++)

1902 
íode
 =Énode->
r
.
ex¥
;

1903 i‡(
íode
->
ty≥
 &1)

1908 i‡(!
íode
->
v
.
ex¥
)

1912 
tmp
 = 
íode
->
v
.
ex¥
->
ty≥
;

1913 
i
 = 0; !
	`com∑tibÀ_ty≥s
(
tmp
, 
¨gp
[i]) &&árgp[i] != 0; i++)

1916 i‡(
¨gp
[
i
] == 0)

1918 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Badárgument ");

1919 
p
 = 
	`°Ωut_öt
’, 
íd
, 
¨gn
 + 1);

1920 
p
 = 
	`°Ωut
’, 
íd
, "ÅoÉfun ");

1921 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

1922 
p
 = 
	`°Ωut
’, 
íd
, "()");

1923 
	`yyîr‹
(
buff
);

1928 i‡(
tmp
 =
TYPE_NUMBER
 && 
¨gp
[
i
] =
TYPE_REAL
)

1930 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_NUMBER
; i++)

1932 i‡(!
¨gp
[
i
])

1934 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_Êﬂt
(enode->v.expr);

1937 i‡(
tmp
 =
TYPE_REAL
 && 
¨gp
[
i
] =
TYPE_NUMBER
)

1939 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_REAL
; i++)

1941 i‡(!
¨gp
[
i
])

1943 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_öt
(enode->v.expr);

1947 
¨gp
[
i
] != 0)

1949 
i
++;

1951 
¨gp
 +
i
 + 1;

1954 
¨gs
->
l
.
numbî
 = 
num
;

1955 
¨gs
->
v
.
numbî
 = 
¥edefs
[
f
].
tokí
;

1956 
¨gs
->
ty≥
 = 
¥edefs
[
f
].
ªt_ty≥
;

1957 i‡(
¨gs
->
ty≥
 =
TYPE_NOVALUE
)

1959 
¨gs
->
v
.
numbî
 +
NOVALUE_USED_FLAG
;

1960 
¨gs
->
ty≥
 = 
TYPE_VOID
;

1962 
¨gs
->
köd
 = 
NODE_EFUN
;

1966 
	`CREATE_ERROR
(
¨gs
);

1968  
¨gs
;

1969 
	}
}

1976 
	$swôch_to_block
(
block
)

1978 
UPDATE_PROGRAM_SIZE
;

1980 
¥og_code
 = 
mem_block
[
block
].block + mem_block[block].
cuºít_size
;

1981 
¥og_code_max
 = 
mem_block
[
block
].block + mem_block[block].
max_size
;

1982 
cuºít_block
 = 
block
;

1983 
	}
}

1989 
	$yyîr‹
(*
°r
)

1991 
num_∑r£_îr‹
;

1993 
fun˘i⁄_c⁄ãxt
.
num_∑ømëîs
 = - 1;

1994 i‡(
num_∑r£_îr‹
 > 5)

1998 
	`sm¨t_log
(
cuºít_fûe
, 
cuºít_löe
, 
°r
, 0);

1999 
num_∑r£_îr‹
++;

2000 
	}
}

2006 
	$yyw¨n
(*
°r
)

2008 i‡(!(
¥agmas
 &
PRAGMA_WARNINGS
) )

2013 
	`sm¨t_log
(
cuºít_fûe
, 
cuºít_löe
, 
°r
, 1);

2014 
	}
}

2019 
¥ogøm_t
 *
	$compûe_fûe
(
f
, *
«me
)

2021 
	`yy∑r£
();

2022 
gu¨d
 = 0;

2023 
¥ogøm_t
 *
¥og
;

2029 i‡(
gu¨d
)

2032 
	`îr‹
("Object can't beÜoaded during compilation.\n");

2034 
gu¨d
 = 1;

2036 
	`¥ﬁog
(
f
, 
«me
);

2037 
	`yy∑r£
();

2038 
¥og
 = 
	`ïûog
();

2040 
gu¨d
 = 0;

2041  
¥og
;

2042 
	}
}

2048 
	$gë_id_numbî
()

2050 
cuºít_id_numbî
 = 1;

2051  
cuºít_id_numbî
++;

2052 
	}
}

2058 
INLINE
 
	$c›y_ö
(
which
, **
°¨t
)

2060 *
block
;

2061 
size
;

2063 
size
 = 
mem_block
[
which
].
cuºít_size
;

2064 i‡(!
size
)

2069 
block
 = 
mem_block
[
which
].block;

2070 
	`mem˝y
(*
°¨t
, 
block
, 
size
);

2072 *
°¨t
 +
	`Æign
(
size
);

2073 
	}
}

2079 
	$com∑ª_compûî_funcs
(*
x
, *
y
)

2081 *
n1
 = 
	`COMPILER_FUNC
(*
x
)->
«me
;

2082 *
n2
 = 
	`COMPILER_FUNC
(*
y
)->
«me
;

2083 
•1
, 
•2
;

2088 i‡(
n1
[0] == '#')

2090 
•1
 = 1;

2092 i‡(
	`COMPILER_FUNC
(*
x
)->
addªss
 =
USHRT_MAX
)

2094 
•1
 = 2;

2098 
•1
 = 0;

2101 i‡(
n2
[0] == '#')

2103 
•2
 = 1;

2105 i‡(
	`COMPILER_FUNC
(*
y
)->
addªss
 =
USHRT_MAX
)

2107 
•2
 = 2;

2111 
•2
 = 0;

2114 i‡(
•1
 < 
•2
)

2118 i‡(
•1
 > 
•2
)

2123 i‡(
n1
 < 
n2
)

2127 i‡(
n1
 > 
n2
)

2133 
	}
}

2139 
	$c›y_™d_s‹t_fun˘i⁄_èbÀ
(
¥ogøm_t
 *
¥og
, **
p
)

2141 *
ãmp
, *
övî£
;

2142 
i
, 
num_ru¡ime
;

2143 
compûî_fun˘i⁄_t
 *
de°
 = (compûî_fun˘i⁄_t*Ë* 
p
;

2144 
num
, 
√w_num
;

2146 
num
 = 
mem_block
[
A_COMPILER_FUNCTIONS
].
cuºít_size
 / (
compûî_fun˘i⁄_t
);

2147 i‡(!
num
)

2149 
¥og
->
num_fun˘i⁄s_deföed
 = 0;

2153 
ãmp
 = 
	`CALLOCATE
(
num
, , 
TAG_TEMPORARY
, "copy_and_sort_function_table");

2154 
i
 = 0; i < 
num
; i++)

2156 
ãmp
[
i
] = i;

2159 
	`quickS‹t
(
ãmp
, 
num
, (), 
com∑ª_compûî_funcs
);

2161 
√w_num
 = 
num
;

2162 
√w_num
 && 
	`COMPILER_FUNC
(
ãmp
[√w_num - 1])->
addªss
 =
USHRT_MAX
)

2164 
√w_num
--;

2166 
¥og
->
num_fun˘i⁄s_deföed
 = 
√w_num
;

2168 
övî£
 = 
	`CALLOCATE
(
num
, , 
TAG_TEMPORARY
, "copy_and_sort_function_table");

2169 
i
 = 0; i < 
num
; i++)

2171 
övî£
[
ãmp
[
i
]] = i;

2174 
i
 = 0; i < 
√w_num
; i++)

2176 
de°
[
i
] = *
	`COMPILER_FUNC
(
ãmp
[i]);

2179 
num_ru¡ime
 = 
mem_block
[
A_RUNTIME_FUNCTIONS
].
cuºít_size
 / (
ru¡ime_fun˘i⁄_u
);

2180 #ifde‡
COMPRESS_FUNCTION_TABLES


2182 
com¥es£d_off£t_èbÀ_t
 *
c·p
 = (com¥es£d_off£t_èbÀ_t*)
mem_block
[
A_RUNTIME_COMPRESSED
].
block
;

2183 
f_ov
 = 
c·p
->
fú°_ovîlﬂd
;

2184 
f_def
 = 
c·p
->
fú°_deföed
;

2185 
n_ov
 = 
f_def
 - 
c·p
->
num_com¥es£d
;

2186 
n_def
 = 
¥og
->
num_fun˘i⁄s_tŸÆ
 - 
f_def
;

2187 
n_ªÆ
 = 
f_def
 - 
c·p
->
num_dñëed
;

2189 
i
 = 0; i < 
n_ov
; i++)

2191 
j
 = 
c·p
->
ödex
[
i
];

2192 
ri
 = 
f_ov
 + 
i
;

2193 i‡(
j
 == 255)

2197 i‡(!(
	`FUNCTION_FLAGS
(
ri
Ë&
NAME_INHERITED
) )

2200 
ﬁdix
 = 
	`FUNCTION_RENTRY
(
j
)->
def
.
f_ödex
;

2201 
	`DEBUG_CHECK
(
ﬁdix
 >
num
, "Function index out ofÑange");

2202 
	`FUNCTION_RENTRY
(
j
)->
def
.
f_ödex
 = 
övî£
[
ﬁdix
];

2205 
i
 = 0; i < 
n_def
; i++)

2207 
ri
 = 
f_def
 + 
i
;

2208 i‡(!(
	`FUNCTION_FLAGS
(
ri
Ë&
NAME_INHERITED
) )

2211 
ﬁdix
 = 
	`FUNCTION_RENTRY
(
n_ªÆ
 + 
i
)->
def
.
f_ödex
;

2213 
	`DEBUG_CHECK
(
ﬁdix
 >
num
, "Function index out of bounds");

2214 
	`FUNCTION_RENTRY
(
n_ªÆ
 + 
i
)->
def
.
f_ödex
 = 
övî£
[
ﬁdix
];

2219 
i
 = 0; i < 
num_ru¡ime
; i++)

2221 i‡(!(
	`FUNCTION_FLAGS
(
i
Ë&
NAME_INHERITED
) )

2223 
ﬁdix
 = 
	`FUNCTION_RENTRY
(
i
)->
def
.
f_ödex
;

2225 
	`DEBUG_CHECK
(
ﬁdix
 >
num
, "Function index out of bounds");

2226 
	`FUNCTION_RENTRY
(
i
)->
def
.
f_ödex
 = 
övî£
[
ﬁdix
];

2231 *
p
 +
	`Æign
(
√w_num
 *(
compûî_fun˘i⁄_t
) );

2233 i‡(
mem_block
[
A_ARGUMENT_TYPES
].
cuºít_size
)

2235 *
de°
;

2237 
¥og
->
¨gumít_ty≥s
 = (*Ë* 
p
;

2238 
	`c›y_ö
(
A_ARGUMENT_TYPES
, 
p
);

2240 
de°
 = 
¥og
->
ty≥_°¨t
 = (*Ë* 
p
;

2241 
i
 = 0; i < 
√w_num
; i++)

2243 
de°
[
i
] = *–(*)
mem_block
[
A_ARGUMENT_INDEX
].
block
 + 
ãmp
[i]);

2246 *
p
 +
	`Æign
(
√w_num
 *() );

2250 
¥og
->
¨gumít_ty≥s
 = 0;

2251 
¥og
->
ty≥_°¨t
 = 0;

2255 
i
 = 
√w_num
; i < 
num
; i++)

2257 
compûî_fun˘i⁄_t
 *
fu≈
 = 
	`COMPILER_FUNC
(
ãmp
[
i
]);

2258 i‡(
fu≈
->
«me
)

2260 
	`‰ì_°rög
(
fu≈
->
«me
);

2264 
	`FREE
(
ãmp
);

2265 
	`FREE
(
övî£
);

2266 
	}
}

2272 #ifde‡
COMPRESS_FUNCTION_TABLES


2273 
	#EXPECTED_INDEX
(
rfu
Ë(
	`INHERIT
‘fu->
öh
.
off£t
)->
fun˘i⁄_ödex_off£t
 +Ñfu->öh.fun˘i⁄_ödex_off£t)

	)

2275 
	$com¥ess_fun˘i⁄_èbÀs
()

2277 
com¥es£d_off£t_èbÀ_t
 *
c·p
;

2278 
ru¡ime_fun˘i⁄_u
 *
p
;

2279 
f_ov
, 
l_ov
, 
f_def
, 
n_def
, 
n_tŸ
, 
n_ov
, 
i
, 
j
;

2281 
n_tŸ
 = (
mem_block
[
A_RUNTIME_FUNCTIONS
].
cuºít_size
 / (
ru¡ime_fun˘i⁄_u
) );

2282 
f_def
 = 
n_tŸ
 - 1;

2283 
f_def
 >= 0)

2285 
ru¡ime_fun˘i⁄_u
 *
rfu
 = 
	`FUNCTION_RENTRY
(
f_def
);

2286 i‡–(
	`FUNCTION_FLAGS
(
f_def
Ë&
NAME_INHERITED
Ë&& f_de‡=
	`EXPECTED_INDEX
(
rfu
) )

2290 
f_def
--;

2292 
f_def
++;

2293 
n_def
 = 
n_tŸ
 - 
f_def
;

2295 
f_ov
 = 0;

2296 
f_ov
 < 
f_def
 && (
	`FUNCTION_FLAGS
(f_ovË&
NAME_INHERITED
) )

2298 
ru¡ime_fun˘i⁄_u
 *
rfu
 = 
	`FUNCTION_RENTRY
(
f_ov
);

2299 i‡(
f_ov
 !
	`EXPECTED_INDEX
(
rfu
) )

2303 
f_ov
++;

2306 
l_ov
 = 
f_def
 - 1;

2307 
l_ov
 > 
f_ov
 && (
	`FUNCTION_FLAGS
÷_ovË&
NAME_INHERITED
) )

2309 
ru¡ime_fun˘i⁄_u
 *
rfu
 = 
	`FUNCTION_RENTRY
(
l_ov
);

2310 i‡(
l_ov
 !
	`EXPECTED_INDEX
(
rfu
) )

2314 
l_ov
--;

2317 
n_ov
 = 
l_ov
 - 
f_ov
 + 1;

2318 
c·p
 = (
com¥es£d_off£t_èbÀ_t
*)
	`Æloˇã_ö_mem_block
(
A_RUNTIME_COMPRESSED
, (com¥es£d_off£t_èbÀ_tË+ (
n_ov
 - 1) );

2320 
c·p
->
fú°_deföed
 = 
f_def
;

2321 
c·p
->
fú°_ovîlﬂd
 = 
f_ov
;

2322 
c·p
->
num_com¥es£d
 = 
f_def
 - 
n_ov
;

2324 
i
 = 0, 
j
 = 0; i < 
n_ov
; i++)

2326 
ri
 = 
f_ov
 + 
i
;

2327 
ru¡ime_fun˘i⁄_u
 *
rfu
 = 
	`FUNCTION_RENTRY
(
ri
);

2328 i‡–(
	`FUNCTION_FLAGS
(
ri
Ë&
NAME_INHERITED
Ë&&Ñò=
	`EXPECTED_INDEX
(
rfu
) )

2330 
c·p
->
ödex
[
i
] = 255;

2334 
c·p
->
ödex
[
i
] = 
j
++;

2335 i‡(
j
 == 256)

2338 
c·p
->
fú°_deföed
 = 
f_def
 = 
f_ov
 + 
i
;

2339 
c·p
->
num_com¥es£d
 = 
i
;

2340 
j
 = 
i
; j < 
n_ov
; j++)

2342 
c·p
->
ödex
[
j
] = 255;

2344 
j
 = 255;

2349 
c·p
->
num_dñëed
 = c·p->
fú°_deföed
 - 
j
;

2352 i‡(
j
 + 
n_def
 == 0)

2354 
mem_block
[
A_RUNTIME_FUNCTIONS
].
cuºít_size
 = 0;

2356 i‡(
f_def
)

2358 
p
 = (
ru¡ime_fun˘i⁄_u
*)
	`DXALLOC
–(
j
 + 
n_def
Ë*‘u¡ime_fun˘i⁄_u), 
TAG_COMPILER
, "compress_function_table");

2359 
i
 = 0; i < 
n_ov
; i++)

2361 i‡(
c·p
->
ödex
[
i
] == 255)

2365 
p
[
c·p
->
ödex
[
i
]] = *
	`FUNCTION_RENTRY
(
f_ov
 + i);

2367 
i
 = 0; i < 
n_def
; i++)

2369 
p
[
i
 + 
j
] = *
	`FUNCTION_RENTRY
(
f_def
 + i);

2371 
	`FREE
(
mem_block
[
A_RUNTIME_FUNCTIONS
].
block
);

2372 
mem_block
[
A_RUNTIME_FUNCTIONS
].
block
 = (*)
p
;

2373 
mem_block
[
A_RUNTIME_FUNCTIONS
].
cuºít_size
 = (
j
 + 
n_def
Ë*(
ru¡ime_fun˘i⁄_u
);

2375 
	}
}

2381 
¥ogøm_t
 *
	$ïûog
()

2383 
size
, 
i
, 
 sz
, 
 off
;

2384 *
p
;

2385 
num_fun
;

2386 
idít_hash_ñem_t
 *
ihe
;

2387 
¥ogøm_t
 *
¥og
;

2389 i‡(
num_∑r£_îr‹
 > 0 || 
öhîô_fûe
)

2393 i‡(
¥agmas
 &
PRAGMA_WARNINGS
)

2395 
	`ªmove_ovîlﬂd_w¨nögs
(0);

2397 
	`˛ón_∑r£r
();

2398 
	`íd_√w_fûe
();

2399 
	`‰ì_°rög
(
cuºít_fûe
);

2400 
cuºít_fûe
 = 0;

2404 i‡(
¥agmas
 &
PRAGMA_WARNINGS
)

2406 
	`show_ovîlﬂd_w¨nögs
();

2413 
UPDATE_PROGRAM_SIZE
;

2415 i‡(
mem_block
[
A_INITIALIZER
].
cuºít_size
)

2417 
∑r£_node_t
 *
≤
;

2418 
fun
;

2420 
	`swôch_to_block
(
A_INITIALIZER
);

2421 
	`CREATE_RETURN
(
≤
, 0);

2422 
	`gíî©e
(
≤
);

2423 
	`swôch_to_block
(
A_PROGRAM
);

2424 
fun
 = 
	`deföe_√w_fun˘i⁄
(
APPLY___INIT
, 0, 0, 
NAME_STRICT_TYPES
 | 
NAME_PRIVATE
, 
TYPE_VOID
);

2425 
	`COMPILER_FUNC
(
fun
)->
addªss
 = 
CURRENT_PROGRAM_SIZE
;

2426 
	`gíî©e___INIT
();

2429 
	`gíî©e_föÆ_¥ogøm
(0);

2430 
UPDATE_PROGRAM_SIZE
;

2440 
num_fun
 = 
mem_block
[
A_RUNTIME_FUNCTIONS
].
cuºít_size
 / (
ru¡ime_fun˘i⁄_u
);

2441 
i
 = 0; i < 
num_fun
; i++)

2443 
funÊags
 = 
	`FUNCTION_FLAGS
(
i
);

2444 
ru¡ime_fun˘i⁄_u
 *
func
 = 
	`FUNCTION_RENTRY
(
i
);

2447 i‡–(
funÊags
 &
NAME_UNDEFINED
Ë&& (funÊag†&
NAME_DEF_BY_INHERIT
) )

2450 i‡(!(
funÊags
 &(
NAME_PROTOTYPE
 | 
NAME_ALIAS
) ) )

2452 
funÊags
 &~
NAME_UNDEFINED
;

2455 
	`FUNCTION_FLAGS
(
i
Ë
funÊags
 | 
NAME_INHERITED
;

2457 i‡(
funÊags
 &
NAME_ALIAS
)

2459 
which
 = 
	`FUNCTION_ALIAS
(
i
);

2460 i‡(!(
	`FUNCTION_FLAGS
(
which
Ë&
NAME_INHERITED
Ë|| 
	`FUNCTION_ALIAS
(which) >= 2)

2462 *
func
 = *
	`FUNCTION_RENTRY
(
which
);

2463 
	`FUNCTION_FLAGS
(
i
ËFUNCTION_FLAGS(
which
Ë| 
NAME_ALIAS
;

2467 
	`gíî©e_föÆ_¥ogøm
(1);

2469 
size
 = 
	`Æign
((
¥ogøm_t
) );

2472 i‡(!(
¥agmas
 &
PRAGMA_SAVE_TYPES
) )

2474 
mem_block
[
A_ARGUMENT_TYPES
].
cuºít_size
 = 0;

2476 i‡(!(
mem_block
[
A_ARGUMENT_TYPES
].
cuºít_size
) )

2478 
mem_block
[
A_ARGUMENT_INDEX
].
cuºít_size
 = 0;

2481 #ifde‡
COMPRESS_FUNCTION_TABLES


2482 
	`com¥ess_fun˘i⁄_èbÀs
();

2485 
i
 = 0; i < 
NUMPAREAS
; i++)

2486 i‡(
i
 !
A_LINENUMBERS
 && i !
A_FILE_INFO
)

2488 
size
 +
	`Æign
(
mem_block
[
i
].
cuºít_size
);

2491 
p
 = (*)
	`DXALLOC
(
size
, 
TAG_PROGRAM
, "epilog: 1");

2492 
¥og
 = (
¥ogøm_t
*)
p
;

2493 *
¥og
 = 
NULL_¥ogøm
;

2494 
¥og
->
tŸÆ_size
 = 
size
;

2495 
¥og
->
ªf
 = 0;

2496 
¥og
->
func_ªf
 = 0;

2497 
ihe
 = 
	`lookup_idít
("heart_beat");

2498 
¥og
->
hóπ_bót
 = (
ihe
 ? ihe->
dn
.
fun˘i⁄_num
: - 1);

2499 
¥og
->
«me
 = 
cuºít_fûe
;

2500 
cuºít_fûe
 = 0;

2502 
¥og
->
id_numbî
 = 
	`gë_id_numbî
();

2503 
tŸÆ_¥og_block_size
 +
¥og
->
tŸÆ_size
;

2504 
tŸÆ_num_¥og_blocks
 += 1;

2506 
¥og
->
löe_sw≠_ödex
 = - 1;

2510 
 off
 = 2+(
mem_block
[
A_FILE_INFO
].
cuºít_size
 / () );

2511 
 sz
 = 
 off
 * (Ë+ 
mem_block
[
A_LINENUMBERS
].
cuºít_size
;

2513 
¥og
->
fûe_öfo
 = (*)
	`DXALLOC
(
 sz
, 
TAG_LINENUMBERS
, "epilog");

2514 
¥og
->
fûe_öfo
[0] = ()
 sz
;

2515 
¥og
->
fûe_öfo
[1] = ()
 off
;

2517 
	`mem˝y
––(*Ë&
¥og
->
fûe_öfo
[2]), 
mem_block
[
A_FILE_INFO
].
block
, mem_block[A_FILE_INFO].
cuºít_size
);

2519 
¥og
->
löe_öfo
 = (*Ë(&¥og->
fûe_öfo
[
 off
]);

2520 
	`mem˝y
––(*Ë&
¥og
->
fûe_öfo
[
 off
]), 
mem_block
[
A_LINENUMBERS
].
block
, mem_block[A_LINENUMBERS].
cuºít_size
);

2522 
p
 +
	`Æign
((
¥ogøm_t
) );

2524 
¥og
->
¥ogøm
 = 
p
;

2525 
¥og
->
¥ogøm_size
 = 
mem_block
[
A_PROGRAM
].
cuºít_size
;

2526 
	`c›y_ö
(
A_PROGRAM
, &
p
);

2528 
¥og
->
num_fun˘i⁄s_tŸÆ
 = 
num_fun
;

2530 
¥og
->
fun˘i⁄_èbÀ
 = (
compûî_fun˘i⁄_t
*)
p
;

2531 
	`c›y_™d_s‹t_fun˘i⁄_èbÀ
(
¥og
, &
p
);

2535 
¥og
->
fun˘i⁄_off£ts
 = (
ru¡ime_fun˘i⁄_u
*)
p
;

2536 
	`c›y_ö
(
A_RUNTIME_FUNCTIONS
, &
p
);

2538 #ifde‡
COMPRESS_FUNCTION_TABLES


2539 
¥og
->
fun˘i⁄_com¥es£d
 = (
com¥es£d_off£t_èbÀ_t
*)
p
;

2540 
	`c›y_ö
(
A_RUNTIME_COMPRESSED
, &
p
);

2543 
¥og
->
fun˘i⁄_Êags
 = (*)
p
;

2544 
	`c›y_ö
(
A_FUNCTION_FLAGS
, &
p
);

2546 
¥og
->
˛as£s
 = (
˛ass_def_t
*)
p
;

2547 
¥og
->
num_˛as£s
 = 
mem_block
[
A_CLASS_DEF
].
cuºít_size
 / (
˛ass_def_t
);

2548 
	`c›y_ö
(
A_CLASS_DEF
, &
p
);

2550 
¥og
->
˛ass_membîs
 = (
˛ass_membî_íåy_t
*)
p
;

2551 
	`c›y_ö
(
A_CLASS_MEMBER
, &
p
);

2553 
¥og
->
°rögs
 = (**)
p
;

2554 
¥og
->
num_°rögs
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 / (*);

2555 
	`c›y_ö
(
A_STRINGS
, &
p
);

2557 
¥og
->
num_v¨übÀs_deföed
 = 
mem_block
[
A_VAR_NAME
].
cuºít_size
 / (*);

2558 
¥og
->
num_v¨übÀs_tŸÆ
 = 
mem_block
[
A_VAR_TEMP
].
cuºít_size
 / (
v¨übÀ_t
);

2560 
¥og
->
v¨übÀ_èbÀ
 = (**)
p
;

2561 
	`c›y_ö
(
A_VAR_NAME
, &
p
);

2562 
¥og
->
v¨übÀ_ty≥s
 = (*)
p
;

2563 
	`c›y_ö
(
A_VAR_TYPE
, &
p
);

2565 
¥og
->
num_öhîôed
 = 
mem_block
[
A_INHERITS
].
cuºít_size
 / (
öhîô_t
);

2566 i‡(
¥og
->
num_öhîôed
)

2568 
¥og
->
öhîô
 = (
öhîô_t
*)
p
;

2569 
	`c›y_ö
(
A_INHERITS
, &
p
);

2573 
¥og
->
öhîô
 = 0;

2576 #ifde‡
DEBUG


2577 i‡(
p
 - (*)
¥og
 !
size
)

2579 
	`Ârötf
(
°dîr
, "Progøm sizêmisˇlcuœãd f‹ /%s.\n", 
¥og
->
«me
);

2580 
	`Ârötf
(
°dîr
, "is: %ld,Éx≥˘ed: %i\n", (Ë(
p
 - (*)
¥og
), 
size
);

2583 #ifde‡
BINARIES


2584 i‡–(
¥agmas
 & 
PRAGMA_SAVE_BINARY
) )

2586 
	`ßve_bö¨y
(
¥og
, &
mem_block
[
A_INCLUDES
], &mem_block[
A_PATCH
]);

2590 
	`sw≠_löe_numbîs
(
¥og
);

2592 
i
 = 0; i < 
NUMAREAS
; i++)

2594 
	`FREE
–(*)
mem_block
[
i
].
block
);

2602 
	`ª„ªn˚_¥og
(
¥og
, "epilog");

2603 
i
 = 0; ()ò< 
¥og
->
num_öhîôed
; i++)

2605 
	`ª„ªn˚_¥og
(
¥og
->
öhîô
[
i
].prog, "inheritance");

2607 
	`ªÀa£_åì
();

2608 
	`s¸©ch_de°roy
();

2609 
	`˛ón_up_loˇls
();

2610 
	`‰ì_unu£d_idítifõrs
();

2611 
	`íd_√w_fûe
();

2613  
¥og
;

2614 
	}
}

2619 
	$¥ﬁog
(
f
, *
«me
)

2621 
i
;

2623 
fun˘i⁄_c⁄ãxt
.
num_∑ømëîs
 = - 1;

2624 
num_∑r£_îr‹
 = 0;

2625 
globÆ_modifõrs
 = 0;

2626 
v¨_deföed
 = 0;

2631 
i
 = 0; i < 
NUMAREAS
; i++)

2633 
mem_block
[
i
].
block
 = 
	`DXALLOC
(
START_BLOCK_SIZE
, 
TAG_COMPILER
, "prolog: 2");

2634 
mem_block
[
i
].
cuºít_size
 = 0;

2635 
mem_block
[
i
].
max_size
 = 
START_BLOCK_SIZE
;

2637 
	`mem£t
(
°rög_ègs
, 0, (string_tags) );

2638 
‰ìd_°rög
 = - 1;

2639 
	`öôülize_∑r£r
();

2641 
cuºít_fûe
 = 
	`make_sh¨ed_°rög
(
«me
);

2642 
cuºít_fûe_id
 = 
	`add_¥ogøm_fûe
(
«me
, 1);

2643 
	`°¨t_√w_fûe
(
f
);

2644 
	}
}

2649 
	$˛ón_∑r£r
()

2651 
i
, 
n
;

2652 
compûî_fun˘i⁄_t
 *
fu≈
;

2655 
	`ªÀa£_åì
();

2660 
i
 = 0; i < 
mem_block
[
A_COMPILER_FUNCTIONS
].
cuºít_size
 / (*
fu≈
); i++)

2662 
fu≈
 = 
	`COMPILER_FUNC
(
i
);

2663 i‡(
fu≈
->
«me
)

2665 
	`‰ì_°rög
(
fu≈
->
«me
);

2668 
n
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 / (*);

2669 
i
 = 0; i < 
n
; i++)

2671 
	`‰ì_°rög
(*–(**)
mem_block
[
A_STRINGS
].
block
 + 
i
) );

2673 
n
 = 
mem_block
[
A_VAR_NAME
].
cuºít_size
 / (*);

2674 
i
 = 0; i < 
n
; i++)

2676 
	`‰ì_°rög
(*–(**)
mem_block
[
A_VAR_NAME
].
block
 + 
i
) );

2679 
¥og
 = 0;

2680 
i
 = 0; i < 
NUMAREAS
; i++)

2682 
	`FREE
(
mem_block
[
i
].
block
);

2684 
	`˛ón_up_loˇls
();

2685 
	`s¸©ch_de°roy
();

2686 
	`‰ì_unu£d_idítifõrs
();

2687 
	}
}

2693 *
	$the_fûe_«me
(*
«me
)

2695 *
tmp
;

2696 
Àn
;

2698 
Àn
 = 
	`°æí
(
«me
);

2699 i‡(
Àn
 < 3)

2701  
	`°rög_c›y
(
«me
, "the_file_name");

2703 
tmp
 = 
	`√w_°rög
(
Àn
 - 1, "the_file_name");

2704 i‡(!
tmp
)

2706  
	`°rög_c›y
(
«me
, "the_file_name");

2708 
tmp
[0] = '/';

2709 
	`°∫˝y
(
tmp
 + 1, 
«me
, 
Àn
 - 2);

2710 
tmp
[
Àn
 - 1] = '\0';

2711  
tmp
;

2712 
	}
}

2718 
	$ˇ£_com∑ª
(
∑r£_node_t
 **
c1
,Ö¨£_node_à**
c2
)

2720 i‡–(*
c1
)->
köd
 =
NODE_DEFAULT
)

2724 i‡–(*
c2
)->
köd
 =
NODE_DEFAULT
)

2729  ( (*
c1
)->
r
.
numbî
 - (*
c2
)->r.number);

2730 
	}
}

2736 
	$°rög_ˇ£_com∑ª
(
∑r£_node_t
 **
c1
,Ö¨£_node_à**
c2
)

2738 
i1
, 
i2
;

2739 *
p1
, *
p2
;

2741 i‡–(*
c1
)->
köd
 =
NODE_DEFAULT
)

2745 i‡–(*
c2
)->
köd
 =
NODE_DEFAULT
)

2750 
i1
 = (*
c1
)->
r
.
numbî
;

2751 
i2
 = (*
c2
)->
r
.
numbî
;

2752 
p1
 = (
i1
 ? 
	`PROG_STRING
(i1): 0);

2753 
p2
 = (
i2
 ? 
	`PROG_STRING
(i2): 0);

2755  (
p1
 - 
p2
);

2756 
	}
}

2762 
	$¥ï¨e_ˇ£s
(
∑r£_node_t
 *
≤
, 
°¨t
)

2764 
∑r£_node_t
 **
˚_°¨t
, **
˚_íd
, **
˚
;

2765 
íd
, 
œ°_key
, 
this_key
;

2766 
dúe˘
 = 1;

2768 
˚_°¨t
 = (
∑r£_node_t
 **Ë&
mem_block
[
A_CASES
].
block
[
°¨t
];

2769 
íd
 = 
mem_block
[
A_CASES
].
cuºít_size
;

2770 
˚_íd
 = (
∑r£_node_t
 **Ë&
mem_block
[
A_CASES
].
block
[
íd
];

2772 i‡(
˚_°¨t
 =
˚_íd
)

2775 
≤
->
v
.
ex¥
 = 0;

2776 
mem_block
[
A_CASES
].
cuºít_size
 = 
°¨t
;

2780 i‡(
≤
->
köd
 =
NODE_SWITCH_STRINGS
)

2782 
	`quickS‹t
–(*)
˚_°¨t
, 
˚_íd
 - ce_°¨t, (
∑r£_node_t
*), 
°rög_ˇ£_com∑ª
);

2786 
	`quickS‹t
–(*)
˚_°¨t
, 
˚_íd
 - ce_°¨t, (
∑r£_node_t
*), 
ˇ£_com∑ª
);

2789 
˚
 = 
˚_°¨t
;

2790 i‡–(*
˚
)->
köd
 =
NODE_DEFAULT
)

2792 i‡(
˚
 + 1 =
˚_íd
)

2795 
≤
->
v
.
ex¥
 = *
˚
;

2796 (*
˚
)->
l
.
ex¥
 = 0;

2797 
mem_block
[
A_CASES
].
cuºít_size
 = 
°¨t
;

2800 
˚
++;

2801 (*(
˚
 - 1Ë)->
l
.
ex¥
 = *ce;

2803 i‡–(*
˚
)->
v
.
ex¥
)

2805 
œ°_key
 = (*
˚
)->
v
.
ex¥
->
r
.
numbî
;

2806 
dúe˘
 = 0;

2810 
œ°_key
 = (*
˚
)->
r
.
numbî
;

2812 
˚
++;

2813 
˚
 < 
˚_íd
)

2815 
this_key
 = (*
˚
)->
r
.
numbî
;

2816 i‡(
≤
->
köd
 =
NODE_SWITCH_RANGES
 && 
this_key
 <
œ°_key
)

2818 
buf
[1024];

2819 *
íd
 = 
	`EndOf
(
buf
);

2820 *
p
;

2821 *
f1
, *
f2
;

2822 
fi1
, 
fi2
;

2823 
l1
, 
l2
;

2826 
	`ßve_fûe_öfo
(
cuºít_fûe_id
, 
cuºít_löe
 - 
cuºít_löe_ßved
);

2827 
cuºít_löe_ßved
 = 
cuºít_löe
;

2829 
	`å™¶©e_absﬁuã_löe
–(*
˚
)->
löe
, (*)
mem_block
[
A_FILE_INFO
].
block
, &
fi1
, &
l1
);

2830 
	`å™¶©e_absﬁuã_löe
–(*(
˚
 - 1Ë)->
löe
, (*)
mem_block
[
A_FILE_INFO
].
block
, &
fi2
, &
l2
);

2831 
f1
 = 
	`PROG_STRING
(
fi1
);

2832 
f2
 = 
	`PROG_STRING
(
fi2
);

2834 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Overlapping cases: ");

2835 i‡(
f1
)

2837 
p
 = 
	`°Ωut
’, 
íd
, 
f1
);

2838 
p
 = 
	`°Ωut
’, 
íd
, ":");

2842 
p
 = 
	`°Ωut
’, 
íd
, "line ");

2844 
p
 = 
	`°Ωut
’, 
íd
, "ánd ");

2845 i‡(
f2
)

2847 
p
 = 
	`°Ωut
’, 
íd
, 
f2
);

2848 
p
 = 
	`°Ωut
’, 
íd
, ":");

2852 
p
 = 
	`°Ωut
’, 
íd
, "line ");

2854 
p
 = 
	`°Ωut
’, 
íd
, ".");

2855 
	`yyîr‹
(
buf
);

2857 (*(
˚
 - 1Ë)->
l
.
ex¥
 = *ce;

2858 i‡–(*
˚
)->
v
.
ex¥
)

2860 
œ°_key
 = (*
˚
)->
v
.
ex¥
->
r
.
numbî
;

2861 
dúe˘
 = 0;

2865 i‡(
œ°_key
 + 1 !
this_key
)

2867 
dúe˘
 = 0;

2869 
œ°_key
 = 
this_key
;

2871 
˚
++;

2873 (*(
˚_íd
 - 1Ë)->
l
.
ex¥
 = 0;

2874 i‡(
dúe˘
 && 
≤
->
köd
 =
NODE_SWITCH_NUMBERS
)

2876 
≤
->
köd
 = 
NODE_SWITCH_DIRECT
;

2878 
≤
->
v
.
ex¥
 = *(
˚_°¨t
);

2879 
mem_block
[
A_CASES
].
cuºít_size
 = 
°¨t
;

2880 
	}
}

2886 
	$ßve_fûe_öfo
(
fûe_id
, 
löes
)

2888 
fi
[2];

2890 
fi
[0] = 
löes
;

2891 
fi
[1] = 
fûe_id
;

2892 
	`add_to_mem_block
(
A_FILE_INFO
, (*Ë&
fi
[0], (fi) );

2893 
	}
}

2899 
	$add_¥ogøm_fûe
(*
«me
, 
t›
)

2901 i‡(!
t›
)

2903 
	`add_to_mem_block
(
A_INCLUDES
, 
«me
, 
	`°æí
(name) + 1);

2905  
	`°‹e_¥og_°rög
(
«me
) + 1;

2906 
	}
}

	@src/crypt.c

43 
	~<uni°d.h
>

44 
	~<md5.h
>

45 
	~"°d.h
"

46 
	~"p‹t.h
"

47 
	~"¸y±.h
"

49 #i‚de‡
mö


50 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

65 
	#MIRROR
(
l
Ë–÷Ë–(÷Ë<< 24Ë| ((÷Ë& 0x0000ff00Ë<< 8Ë| ((÷Ë& 0x00ff0000Ë>> 8Ë| (÷Ë>> 24ËË)

	)

69 
	#F
(
X
, 
Y
, 
Z
Ë(((X)&(Y))|((~(X))&(Z)))

	)

70 
	#G
(
X
, 
Y
, 
Z
Ë(((X)&(Z))|((~(Z))&(Y)))

	)

71 
	#H
(
X
, 
Y
, 
Z
Ë((X)^(Y)^(Z))

	)

72 
	#I
(
X
, 
Y
, 
Z
Ë((Y)^((X)|(~(Z))))

	)

75 
	#RLEFT
(
a
, 
n
Ë◊Ë((◊Ë<< (n)Ë| (◊Ë>> (32-“))))

	)

80 
UINT32
 
	gT
[64] =

89 
	$MD5Dige°
(
CONST
 
byã
 *
buf
,

90 
UINT32
 
buÊí
,

91 
byã
 *
Dige°


95 
	#OA
 0x67452301

	)

96 
	#OB
 0xefcdab89

	)

97 
	#OC
 0x98badc„

	)

98 
	#OD
 0x10325476

	)

100 
UINT32
 
A
 = 
OA
, 
B
 = 
OB
, 
C
 = 
OC
, 
D
 = 
OD
;

101 
UINT32
 
Block
[16];

103 i‡(
buÊí
 > 
MD5_MAXLEN
)

110 
	`mem£t
(
Block
, 0, (Block) );

111 
	`mem˝y
(
Block
, 
buf
, 
buÊí
);

113 
i
;

114 
i
 = 0; i <
buÊí
 / 4; i++)

116 
	`MIRROR
(
Block
[
i
]);

119 
Block
[
buÊí
 >> 2] |= 0x00000080 << (8 *(buflen % 4) );

120 
Block
[14] = 
buÊí
 << 3;

123 
	#Tr
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
i
, 
x
Ë◊Ë+
	`x
(b,c,dË+ 
Block
[k] + 
T
[(i)-1]; 
	`RLEFT
◊, s); (aË+(b);

	)

126 
	`Tr
(
A
, 
B
, 
C
, 
D
, 0, 7, 1, 
F
);

127 
	`Tr
(
D
, 
A
, 
B
, 
C
, 1, 12, 2, 
F
);

128 
	`Tr
(
C
, 
D
, 
A
, 
B
, 2, 17, 3, 
F
);

129 
	`Tr
(
B
, 
C
, 
D
, 
A
, 3, 22, 4, 
F
);

130 
	`Tr
(
A
, 
B
, 
C
, 
D
, 4, 7, 5, 
F
);

131 
	`Tr
(
D
, 
A
, 
B
, 
C
, 5, 12, 6, 
F
);

132 
	`Tr
(
C
, 
D
, 
A
, 
B
, 6, 17, 7, 
F
);

133 
	`Tr
(
B
, 
C
, 
D
, 
A
, 7, 22, 8, 
F
);

134 
	`Tr
(
A
, 
B
, 
C
, 
D
, 8, 7, 9, 
F
);

135 
	`Tr
(
D
, 
A
, 
B
, 
C
, 9, 12, 10, 
F
);

136 
	`Tr
(
C
, 
D
, 
A
, 
B
, 10, 17, 11, 
F
);

137 
	`Tr
(
B
, 
C
, 
D
, 
A
, 11, 22, 12, 
F
);

138 
	`Tr
(
A
, 
B
, 
C
, 
D
, 12, 7, 13, 
F
);

139 
	`Tr
(
D
, 
A
, 
B
, 
C
, 13, 12, 14, 
F
);

140 
	`Tr
(
C
, 
D
, 
A
, 
B
, 14, 17, 15, 
F
);

141 
	`Tr
(
B
, 
C
, 
D
, 
A
, 15, 22, 16, 
F
);

144 
	`Tr
(
A
, 
B
, 
C
, 
D
, 1, 5, 17, 
G
);

145 
	`Tr
(
D
, 
A
, 
B
, 
C
, 6, 9, 18, 
G
);

146 
	`Tr
(
C
, 
D
, 
A
, 
B
, 11, 14, 19, 
G
);

147 
	`Tr
(
B
, 
C
, 
D
, 
A
, 0, 20, 20, 
G
);

148 
	`Tr
(
A
, 
B
, 
C
, 
D
, 5, 5, 21, 
G
);

149 
	`Tr
(
D
, 
A
, 
B
, 
C
, 10, 9, 22, 
G
);

150 
	`Tr
(
C
, 
D
, 
A
, 
B
, 15, 14, 23, 
G
);

151 
	`Tr
(
B
, 
C
, 
D
, 
A
, 4, 20, 24, 
G
);

152 
	`Tr
(
A
, 
B
, 
C
, 
D
, 9, 5, 25, 
G
);

153 
	`Tr
(
D
, 
A
, 
B
, 
C
, 14, 9, 26, 
G
);

154 
	`Tr
(
C
, 
D
, 
A
, 
B
, 3, 14, 27, 
G
);

155 
	`Tr
(
B
, 
C
, 
D
, 
A
, 8, 20, 28, 
G
);

156 
	`Tr
(
A
, 
B
, 
C
, 
D
, 13, 5, 29, 
G
);

157 
	`Tr
(
D
, 
A
, 
B
, 
C
, 2, 9, 30, 
G
);

158 
	`Tr
(
C
, 
D
, 
A
, 
B
, 7, 14, 31, 
G
);

159 
	`Tr
(
B
, 
C
, 
D
, 
A
, 12, 20, 32, 
G
);

162 
	`Tr
(
A
, 
B
, 
C
, 
D
, 5, 4, 33, 
H
);

163 
	`Tr
(
D
, 
A
, 
B
, 
C
, 8, 11, 34, 
H
);

164 
	`Tr
(
C
, 
D
, 
A
, 
B
, 11, 16, 35, 
H
);

165 
	`Tr
(
B
, 
C
, 
D
, 
A
, 14, 23, 36, 
H
);

166 
	`Tr
(
A
, 
B
, 
C
, 
D
, 1, 4, 37, 
H
);

167 
	`Tr
(
D
, 
A
, 
B
, 
C
, 4, 11, 38, 
H
);

168 
	`Tr
(
C
, 
D
, 
A
, 
B
, 7, 16, 39, 
H
);

169 
	`Tr
(
B
, 
C
, 
D
, 
A
, 10, 23, 40, 
H
);

170 
	`Tr
(
A
, 
B
, 
C
, 
D
, 13, 4, 41, 
H
);

171 
	`Tr
(
D
, 
A
, 
B
, 
C
, 0, 11, 42, 
H
);

172 
	`Tr
(
C
, 
D
, 
A
, 
B
, 3, 16, 43, 
H
);

173 
	`Tr
(
B
, 
C
, 
D
, 
A
, 6, 23, 44, 
H
);

174 
	`Tr
(
A
, 
B
, 
C
, 
D
, 9, 4, 45, 
H
);

175 
	`Tr
(
D
, 
A
, 
B
, 
C
, 12, 11, 46, 
H
);

176 
	`Tr
(
C
, 
D
, 
A
, 
B
, 15, 16, 47, 
H
);

177 
	`Tr
(
B
, 
C
, 
D
, 
A
, 2, 23, 48, 
H
);

180 
	`Tr
(
A
, 
B
, 
C
, 
D
, 0, 6, 49, 
I
);

181 
	`Tr
(
D
, 
A
, 
B
, 
C
, 7, 10, 50, 
I
);

182 
	`Tr
(
C
, 
D
, 
A
, 
B
, 14, 15, 51, 
I
);

183 
	`Tr
(
B
, 
C
, 
D
, 
A
, 5, 21, 52, 
I
);

184 
	`Tr
(
A
, 
B
, 
C
, 
D
, 12, 6, 53, 
I
);

185 
	`Tr
(
D
, 
A
, 
B
, 
C
, 3, 10, 54, 
I
);

186 
	`Tr
(
C
, 
D
, 
A
, 
B
, 10, 15, 55, 
I
);

187 
	`Tr
(
B
, 
C
, 
D
, 
A
, 1, 21, 56, 
I
);

188 
	`Tr
(
A
, 
B
, 
C
, 
D
, 8, 6, 57, 
I
);

189 
	`Tr
(
D
, 
A
, 
B
, 
C
, 15, 10, 58, 
I
);

190 
	`Tr
(
C
, 
D
, 
A
, 
B
, 6, 15, 59, 
I
);

191 
	`Tr
(
B
, 
C
, 
D
, 
A
, 13, 21, 60, 
I
);

192 
	`Tr
(
A
, 
B
, 
C
, 
D
, 4, 6, 61, 
I
);

193 
	`Tr
(
D
, 
A
, 
B
, 
C
, 11, 10, 62, 
I
);

194 
	`Tr
(
C
, 
D
, 
A
, 
B
, 2, 15, 63, 
I
);

195 
	`Tr
(
B
, 
C
, 
D
, 
A
, 9, 21, 64, 
I
);

198 
A
 +
OA
;

199 
B
 +
OB
;

200 
C
 +
OC
;

201 
D
 +
OD
;

204 
	`MIRROR
(
A
);

205 
	`mem˝y
(
Dige°
, &
A
, (A) );

206 
	`MIRROR
(
B
);

207 
	`mem˝y
(&(
Dige°
[4]), &
B
, (B) );

208 
	`MIRROR
(
C
);

209 
	`mem˝y
(&(
Dige°
[8]), &
C
, (C) );

210 
	`MIRROR
(
D
);

211 
	`mem˝y
(&(
Dige°
[12]), &
D
, (D) );

214 
A
 = 
B
 = 
C
 = 
D
 = 195952365;

218 
	}
}

231 
	$ícode
(
byã
 *
whîe
, 
CONST
 byã *
d©a
, 
öputbyãs
)

233 
i
, 
w
 = 0;

236 
	#ENCODER_OFFSET
 96

	)

238 
i
 = 0; i < 
öputbyãs
; i++)

240 
whîe
[
i
 *2] = 
ENCODER_OFFSET
 + (
d©a
[i] &0x0f);

241 
whîe
[1+(
i
 *2)] = 
ENCODER_OFFSET
 + ( (
d©a
[i] >> 4) &0x0f);

242 
w
 += 2;

245  
w
;

246 
	}
}

249 
	$decode
(
byã
 *
whîe
, 
CONST
 byã *
°rög
, 
°rögbyãs
)

251 
i
;

253 
i
 = 0; i < 
°rögbyãs
; i += 2)

255 
whîe
[
i
 / 2] = (
°rög
[i] &0x0f) | ( (string[i + 1] &0x0f) << 4);

257 
	}
}

262 
	$gëß…
(
byã
 *
to
, 
CONST
 byã *
‰om
)

264 
i
;

269 
	#MAGIC_SALTSEP
 '!'

	)

271 i‡(
‰om
)

273 
byã
 
Dige°
[16];

275 i‡(
	`°æí
–(*)
‰om
Ë> 
MD5_SALTLEN
 *2)

277 i‡(
‰om
[2 *
MD5_SALTLEN
] =
MAGIC_SALTSEP
)

287 
	`decode
(
to
, 
‰om
, 
MD5_SALTLEN
 *2);

304 
	`cu°om_¸y±
–(*)
‰om
, 
MD5_VALID_SALT
, 
Dige°
);

305 
	`mem£t
(
to
, 
	`°æí
–(*)
‰om
), 
MD5_SALTLEN
);

306 
i
 = 0; i < (
Dige°
); i++)

308 
to
[
i
 % 
MD5_SALTLEN
] +
Dige°
[i];

315 
i
 = 0; i < 
MD5_SALTLEN
; i++)

317 
to
[
i
] = 
	`øndom_numbî
(256);

322 
	}
}

328 
	$¸unchbuf„r
(
byã
 *
buf
,

329 
SIGNED
 *
Àn
,

330 *
addôi⁄
,

331 
SIGNED
 
addÀn
,

332 
maxÀn


335 
u£d
;

337 
u£d
 = *
Àn
;

339 
addÀn
 > 0)

341 
byã
 
Dige°
[16];

342 
¸unched
;

345 i‡(
u£d
 > ()(
Dige°
) )

347 
	`MD5Dige°
(
buf
, 
u£d
, 
Dige°
);

348 
	`mem˝y
(
buf
, 
Dige°
, (Digest) );

349 
u£d
 = (
Dige°
);

353 
¸unched
 = 
	`mö
–(
maxÀn
 - 
u£d
), 
addÀn
);

354 
	`mem˝y
(&(
buf
[
u£d
]), 
addôi⁄
, 
¸unched
);

357 
u£d
 +
¸unched
;

358 
addôi⁄
 +
¸unched
;

359 
addÀn
 -
¸unched
;

362 *
Àn
 = 
u£d
;

365 
	}
}

381 *
	$cu°om_¸y±
(
CONST
 *
key
, CONST *
ß…
, 
byã
 *
øwout
)

383 
byã
 
Dige°
[16];

384 
byã
 
buf„r
[
MD5_MAXLEN
], 
abuf„r
[MD5_MAXLEN], 
theß…
[
MD5_SALTLEN
];

385 
SIGNED
 
u£d
 = 0, 
Àn
, 
i
;

386 
byã


389 
ªt
[(
MD5_SALTLEN
 *2Ë+ 1+((
Dige°
) *2) + 1];

394 
	`gëß…
(
theß…
, (
byã
*)
ß…
);

396 
	#ADDBUFFER
(
b
, 
l
Ëif(
u£d
 + (lË> ()(
buf„r
)Ë
	`¸unchbuf„r
(buf„r, &u£d, (*)(b), (l), (buf„r)); { 
	`mem˝y
(&(buf„r[u£d]), (b), (l)); u£d +÷); }

	)

398 
	`mem£t
(
buf„r
, 0, (buffer) );

401 
Àn
 = 
	`°æí
(
key
) + 1;

402 
	`ADDBUFFER
(
key
, 
Àn
);

403 
Àn
 = 
	`°æí
(
MD5_MAGIC
) + 1;

404 
	`ADDBUFFER
(
MD5_MAGIC
, 
Àn
);

406 
	`ADDBUFFER
(
theß…
, (thesalt) );

408 
	`mem˝y
(
abuf„r
, 
buf„r
, (abuffer) );

421 
Àn
 = 
	`°æí
(
key
);

422 
i
 = 3000+(11 *
Àn
); i > 0; i--)

424 i‡(!
	`MD5Dige°
(
abuf„r
, ◊buf„r), 
Dige°
) )

426  
NULL
;

428 
	`mem˝y
(&(
abuf„r
[(
i
 + 
Àn
Ë% (
MD5_MAXLEN
 - (
Dige°
) )]), Digest, (Digest) );

431 
	`ADDBUFFER
(
Dige°
, (Digest) );

434 i‡(!
	`MD5Dige°
(
buf„r
, (buf„r), 
Dige°
) )

436  
NULL
;

440 
	`mem£t
(
buf„r
, 0, (buffer) );

443 
Àn
 = 
	`ícode
(
ªt
, 
theß…
, (thesalt) );

444 
ªt
[
Àn
++] = 
MAGIC_SALTSEP
;

445 
Àn
 +
	`ícode
(&(
ªt
[Àn]), 
Dige°
, (Digest) );

446 
ªt
[
Àn
] = 0;

449 i‡(
øwout
)

451 
	`mem˝y
(
øwout
, 
Dige°
, (Digest) );

454  (*)
ªt
;

455 
	}
}

457 *
	$md5_dige°
(*
buf
, c⁄° *
öput
, 
size
)

460 
MD5_CTX
 
˘x
;

461 
	`MD5Inô
(&
˘x
);

462 
	`MD5Upd©e
(&
˘x
, (c⁄° *)
öput
, 
size
);

463 
	`MD5FöÆ
(
buf
, &
˘x
);

465  
buf
 + 
MD5_LEN
;

466 
	}
}

472 
	$hexícode
(c⁄° *
§c
, 
Àn
, *
de°
)

474 
i
;

475 
buf
[3];

476 
i
 = 0; i < 
Àn
; ++i)

478 
	`¢¥ötf
(
buf
, (buf), "%02x", 
§c
[
i
]);

479 
	`°∫˝y
(
de°
 + 
i
 * 2, 
buf
, 2);

481 
	}
}

487 
	$hexdecode
(c⁄° *
§c
, *
de°
, 
size
)

489 
Àn
 = 
	`°æí
(
§c
);

490 
buf
[3];

491 
i
;

493 i‡(
Àn
 % 2 != 0)

497 i‡(
Àn
 / 2 !
size
)

501 
i
 = 0; i < 
size
; ++i)

503 
	`°∫˝y
(
buf
, 
§c
 + 
i
 * 2, 2);

504 
buf
[2] = 0;

505 
de°
[
i
] = ()
	`°πoul
(
buf
, 
NULL
, 16);

508 
	}
}

	@src/debugmalloc.c

6 
	#IN_MALLOC_WRAPPER


	)

7 
	#NO_OPCODES


	)

8 
	~"°d.h
"

9 
	~"debugmÆloc.h
"

10 
	~"mÆloc.h
"

11 
	~"md.h
"

13 #unde‡
NOISY_MALLOC


15 #ifde‡
NOISY_MALLOC


16 
	#NOISY
(
x
Ë
	`¥ötf
(x)

	)

17 
	#NOISY1
(
x
,
y
Ë
	`¥ötf
(x,y)

	)

18 
	#NOISY2
(
x
,
y
,
z
Ë
	`¥ötf
(x,y,z)

	)

19 
	#NOISY3
(
w
,
x
,
y
,
z
Ë
	`¥ötf
(w,x,y,z)

	)

21 
	#NOISY
(
x
)

	)

22 
	#NOISY1
(
x
,
y
)

	)

23 
	#NOISY2
(
x
,
y
,
z
)

	)

24 
	#NOISY3
(
w
,
x
,
y
,
z
)

	)

27 
	s°©s_s


29 
	m‰ì_ˇŒs
, 
	mÆloc_ˇŒs
, 
	mªÆloc_ˇŒs
;

30 } 
	t°©s_t
;

32 
°©s_t
 
	g°©s
;

34 
	$debugmÆloc_öô
()

36 
°©s
.
‰ì_ˇŒs
 = 0;

37 
°©s
.
Æloc_ˇŒs
 = 0;

38 
°©s
.
ªÆloc_ˇŒs
 = 0;

39 
	`MDöô
();

40 
	}
}

46 
INLINE
 *
	$debugªÆloc
(*
±r
, 
size
, 
èg
, *
desc
)

48 *
tmp
;

50 i‡(
size
 <= 0)

52 
	`Áèl
("Illegal size !");

55 
	`NOISY3
("ªÆloc: %ò(%x), %s\n", 
size
, 
±r
, 
desc
);

56 
°©s
.
ªÆloc_ˇŒs
++;

57 
tmp
 = (
md_node_t
*)
±r
 - 1;

58 i‡(
	`MD‰ì
(
tmp
) )

60 
tmp
 = (*)
	`REALLOC
—mp, 
size
 + 
MD_OVERHEAD
);

61 
	`MDmÆloc
(
tmp
, 
size
, 
èg
, 
desc
);

62  (
md_node_t
*)
tmp
 + 1;

65 
	}
}

71 
INLINE
 *
	$debugmÆloc
(
size
, 
èg
, *
desc
)

73 *
tmp
;

75 i‡(
size
 <= 0)

77 
	`Áèl
("Illegal size !");

79 
°©s
.
Æloc_ˇŒs
++;

80 
tmp
 = (*)
	`MALLOC
(
size
 + 
MD_OVERHEAD
);

81 
	`MDmÆloc
(
tmp
, 
size
, 
èg
, 
desc
);

82 
	`NOISY3
("mÆloc: %ò(%x), %s\n", 
size
, (
md_node_t
*)
tmp
 + 1, 
desc
);

83  (
md_node_t
*)
tmp
 + 1;

84 
	}
}

90 
INLINE
 *
	$debugˇŒoc
(
nôems
, 
size
, 
èg
, *
desc
)

92 *
tmp
;

94 i‡(
size
 <= 0)

96 
	`Áèl
("Illegal size!");

99 
°©s
.
Æloc_ˇŒs
++;

100 
tmp
 = (*)
	`CALLOC
(
nôems
 *
size
 + 
MD_OVERHEAD
, 1);

101 
	`MDmÆloc
(
tmp
, 
nôems
 *
size
, 
èg
, 
desc
);

102 
	`NOISY3
("ˇŒoc: %ò(%x), %s\n", 
nôems
 *
size
, (
md_node_t
*)
tmp
 + 1, 
desc
);

103  (
md_node_t
*)
tmp
 + 1;

104 
	}
}

110 
INLINE
 
	$debug‰ì
(*
±r
)

112 
md_node_t
 *
tmp
;

114 
	`NOISY1
("‰ì (%x)\n", 
±r
);

115 
°©s
.
‰ì_ˇŒs
++;

116 
tmp
 = (
md_node_t
*)
±r
 - 1;

117 i‡(
	`MD‰ì
(
tmp
) )

119 
	`mem£t
(
±r
, 'x', 
tmp
->
size
);

120 
	`FREE
(
tmp
);

122 
	}
}

128 
	$dump_mÆloc_d©a
(
outbuf„r_t
 *
ob
)

130 
√t
;

132 
√t
 = 
°©s
.
Æloc_ˇŒs
 - sèts.
‰ì_ˇŒs
;

133 
	`outbuf_add
(
ob
, "using debug malloc:\n\n");

134 
	`outbuf_addv
(
ob
, "tŸÆ mÆloc'd: %10lu\n", 
tŸÆ_mÆlo˚d
);

135 
	`outbuf_addv
(
ob
, "high w©î m¨k: %10lu\n", 
hiw©î
);

136 
	`outbuf_addv
(
ob
, "ovîhód: %10lu\n", (
TABLESIZE
 *(
md_node_t
*ËË+ (
√t
 *
MD_OVERHEAD
) );

137 
	`outbuf_addv
(
ob
, "#Ælo¯ˇŒs: %10lu\n", 
°©s
.
Æloc_ˇŒs
);

138 
	`outbuf_addv
(
ob
, "#‰ì cÆls: %10lu\n", 
°©s
.
‰ì_ˇŒs
);

139 
	`outbuf_addv
(
ob
, "#Ælo¯- #‰ì: %10lu\n", 
√t
);

140 
	`outbuf_addv
(
ob
, "#ªÆlo¯ˇŒs: %10lu\n", 
°©s
.
ªÆloc_ˇŒs
);

141 
	}
}

	@src/dirty.c

4 
	~"dúty.h
"

5 
	~"Õc.h
"

6 
	~"Õc_ö˛.h
"

7 
	~"obje˘.h
"

8 
	~"mÆloc_ö˛.h
"

10 
	~<as£π.h
>

13 
	~"∑ckages/fs_mbuf.h
"

15 
fs_‰ì_¨øy_t
 
	gpoﬁ_key
;

16 
fs_‰ì_¨øy_t
 
	gpoﬁ_node
;

17 
fs_‰ì_¨øy_t
 
	gpoﬁ_m™age
;

18 
fs_‰ì_¨øy_t
 
	gpoﬁ_m™age_roŸ
;

20 
	#PAGE_ELEMENT_CNT
 8

21 

	)

22 
	#MEM_POOL_ALLOC
(
which
Ë
	`fs_‰ì_¨øy_Æloc
(&(which))

	)

23 
	#MEM_POOL_FREE
(
which
, 
±r
Ë
	`fs_‰ì_¨øy_‰ì
(&(which), (±r))

	)

27 
	$dúty_mem_poﬁ_£tup
()

29 
	`fs_‰ì_¨øy_öô
(&
poﬁ_key
, "dúty_key", (
dúty_key_t
), 
PAGE_ELEMENT_CNT
);

30 
	`fs_‰ì_¨øy_öô
(&
poﬁ_node
, "dúty_node", (
dúty_node_t
), 
PAGE_ELEMENT_CNT
);

31 
	`fs_‰ì_¨øy_öô
(&
poﬁ_m™age
, "dúty_m™age", (
dúty_m™age_t
), 
PAGE_ELEMENT_CNT
);

32 
	`fs_‰ì_¨øy_öô
(&
poﬁ_m™age_roŸ
, "dúty_m™age_roŸ", (
dúty_m™age_t
Ë+ (
dúty_roŸ_t
), 
PAGE_ELEMENT_CNT
);

33 
	}
}

35 
	$dúty_mem_poﬁ_˛ór
()

38 
	}
}

40 
	$dúty_mem_poﬁ_°©
()

42 
	`Ârötf
(
°dîr
, "dirty keyÅotal_size:%d,element_size:%d,total:%d,alloc:%d\n",

43 
poﬁ_key
.
mbuf
.
Æloc_size
,Öoﬁ_key.
ñemít_size
,

44 
poﬁ_key
.
ñemít_tŸÆ
,Öoﬁ_key.
ñemít_Æloc
);

45 
	`Ârötf
(
°dîr
, "dirtyÇodeÅotal_size:%d,element_size:%d,total:%d,alloc:%d\n",

46 
poﬁ_node
.
mbuf
.
Æloc_size
,Öoﬁ_node.
ñemít_size
,

47 
poﬁ_node
.
ñemít_tŸÆ
,Öoﬁ_node.
ñemít_Æloc
);

48 
	`Ârötf
(
°dîr
, "dirty manageÅotal_size:%d,element_size:%d,total:%d,alloc:%d\n",

49 
poﬁ_m™age
.
mbuf
.
Æloc_size
,Öoﬁ_m™age.
ñemít_size
,

50 
poﬁ_m™age
.
ñemít_tŸÆ
,Öoﬁ_m™age.
ñemít_Æloc
);

51 
	`Ârötf
(
°dîr
, "dirty manage_rootÅotal_size:%d,element_size:%d,total:%d,alloc:%d\n",

52 
poﬁ_m™age_roŸ
.
mbuf
.
Æloc_size
,Öoﬁ_m™age_roŸ.
ñemít_size
,

53 
poﬁ_m™age_roŸ
.
ñemít_tŸÆ
,Öoﬁ_m™age_roŸ.
ñemít_Æloc
);

54 
	}
}

56 
‰ì_dúty_m≠_ªcur£
(
m≠pög_t
 *
m≠
);

57 
‰ì_dúty_¨r_ªcur£
(
¨øy_t
 *
¨r
);

58 
˛ór_dúty_m≠_ªcur£
(
m≠pög_t
 *
m≠
);

59 
˛ór_dúty_¨r_ªcur£
(
¨øy_t
 *
¨r
);

60 
˛ór_dúty_m≠
(
m≠pög_t
 *
m≠
);

61 
˛ór_dúty_¨r
(
¨øy_t
 *
¨r
);

62 
as£π_©èch_dúty_¨r_ªcur£
(
svÆue_t
 *
sv¨r
);

63 
as£π_©èch_dúty_m≠_ªcur£
(
svÆue_t
 *
svm≠
);

65 
ölöe
 
	$‰ì_m≠_dúty_key
(
dúty_key_t
 *
dk
)

67 i‡(
dk
->
dúty_›
 =
DIRTY_DEL
) {

68 
	`‰ì_svÆue
(&
dk
->
key
.
dñ
, "dirtyÇodeÑelease");

70 
	`MEM_POOL_FREE
(
poﬁ_key
, 
dk
);

71 
	}
}

73 
ölöe
 
dúty_key_t
 *
	$√w_m≠_dúty_key
(
svÆue_t
 *
key
, 
›
)

75 
dúty_key_t
 *
dk
 = 
	`MEM_POOL_ALLOC
(
poﬁ_key
);

76 
dk
->
dúty_›
 = 
›
;

77 i‡(
dk
->
dúty_›
 =
DIRTY_DEL
) {

78 
	`£t_svÆue_undeföed
(&
dk
->
key
.
dñ
);

79 
	`assign_svÆue
(&
dk
->
key
.
dñ
, key);

81 
dk
->
key
.
m≠_key
 = key;

83  
dk
;

84 
	}
}

86 
ölöe
 
dúty_key_t
 *
	$√w_¨r_dúty_key
(
idx
, 
›
)

88 
dúty_key_t
 *
dk
 = 
	`MEM_POOL_ALLOC
(
poﬁ_key
);

89 
	`as£π
(
dk
->
dúty_›
 !
DIRTY_DEL
);

90 
dk
->
dúty_›
 = 
›
;

91 
dk
->
key
.
¨r_ödex
 = 
idx
;

92  
dk
;

93 
	}
}

95 
ölöe
 
	$‰ì_¨r_dúty_key
(
dúty_key_t
 *
dk
)

97 
	`MEM_POOL_FREE
(
poﬁ_key
, 
dk
);

98 
	}
}

100 
ölöe
 
	$ovîwrôe_m≠_dúty_key
(
dúty_key_t
 *
dk
, 
svÆue_t
 *
key
, 
›
)

102 i‡(
dk
->
dúty_›
 =
DIRTY_DEL
) {

103 
	`‰ì_svÆue
(&
dk
->
key
.
dñ
, "dirtyÇodeÑelease");

105 
dk
->
dúty_›
 = 
›
;

106 i‡(
dk
->
dúty_›
 =
DIRTY_DEL
) {

107 
	`assign_svÆue_no_‰ì
(&
dk
->
key
.
dñ
, key);

109 
dk
->
key
.
m≠_key
 = key;

111 
	}
}

113 
ölöe
 
	$ovîwrôe_¨r_dúty_key
(
dúty_key_t
 *
dk
, 
idx
, 
›
)

115 
dk
->
dúty_›
 = 
›
;

116 
dk
->
key
.
¨r_ödex
 = 
idx
;

117 
	}
}

119 
ölöe
 
	$dúty_roŸ_öô
(
dúty_roŸ_t
 *
dúty_roŸ
, 
svÆue_t
 *
roŸ
)

121 
	`TAILQ_INIT
(&
dúty_roŸ
->
dúty_node_li°
);

122 
dúty_roŸ
->
node_˙t
 = 0;

123 
	}
}

125 
ölöe
 
	$dúty_roŸ_add
(
dúty_roŸ_t
 *
dúty_roŸ
, 
dúty_node_t
 *
dúty_node
)

128 
	`TAILQ_INSERT_TAIL
(&
dúty_roŸ
->
dúty_node_li°
, 
dúty_node
, 
íåy
);

129 
dúty_roŸ
->
node_˙t
++;

130 
	}
}

132 
ölöe
 
	$dúty_roŸ_ªmove
(
dúty_roŸ_t
 *
dúty_roŸ
, 
dúty_node_t
 *
dúty_node
)

135 
	`TAILQ_REMOVE
(&
dúty_roŸ
->
dúty_node_li°
, 
dúty_node
, 
íåy
);

136 
dúty_roŸ
->
node_˙t
--;

137 
	}
}

139 
dúty_node_t
 *
	$√w_dúty_node
(
dúty_m™age_t
 *
mng
)

141 
dúty_node_t
 *
dúty_node
 = 
	`MEM_POOL_ALLOC
(
poﬁ_node
);

144 
dúty_node
->
key_˙t
 = 0;

145 
	`TAILQ_INIT
(&
dúty_node
->
dúty_key_li°
);

147 
dúty_m™age_t
 *
roŸ_mng
 = 
	`gë_m™age
(
mng
->
roŸ
);

148 
	`dúty_roŸ_add
(
roŸ_mng
->
dúty_roŸ
, 
dúty_node
);

150 
dúty_node
->
mng
 = mng;

151 
mng
->
dúty_node
 = dirty_node;

153  
dúty_node
;

154 
	}
}

156 
ölöe
 
	$de°roy_dúty_node
(
dúty_m™age_t
 *
mng
)

158 
dúty_roŸ_t
 *
dúty_roŸ
 = 
	`gë_m™age
(
mng
->
roŸ
)->dirty_root;

159 
	`dúty_roŸ_ªmove
(
dúty_roŸ
, 
mng
->
dúty_node
);

161 
mng
->
dúty_node
->mng = 
NULL
;

163 
	`MEM_POOL_FREE
(
poﬁ_node
, 
mng
->
dúty_node
);

164 
mng
->
dúty_node
 = 
NULL
;

165 
	}
}

167 
	$‰ì_dúty_node
(
dúty_m™age_t
 *
mng
)

169 
dúty_node_t
 *
dúty_node
 = 
mng
->dirty_node;

170 
dúty_key_t
 *
dk
, *
√xt
;

172 
mng
->
£lf
->
ty≥
) {

173 
T_MAPPING
:

174 
	`TAILQ_FOREACH_SAFE
(
dk
, &
dúty_node
->
dúty_key_li°
, 
íåy
, 
√xt
) {

175 
	`‰ì_m≠_dúty_key
(
dk
);

178 
T_ARRAY
:

179 
	`TAILQ_FOREACH_SAFE
(
dk
, &
dúty_node
->
dúty_key_li°
, 
íåy
, 
√xt
) {

180 
	`‰ì_¨r_dúty_key
(
dk
);

184 
	`as£π
(0);

187 
	`de°roy_dúty_node
(
mng
);

188 
	}
}

190 
	$dump_dúty_öfo
(
dúty_m™age_t
 *
dúty_mng
, 
dúty_key_t
 *
dkey
, 
svÆue_t
 *
vÆue
, *
msg
)

192 
svÆue_t
 *
roŸ
 = 
dúty_mng
->root;

193 
svÆue_t
 *
∑ª¡
 = 
dúty_mng
->parent;

194 
svÆue_t
 *
£lf
 = 
dúty_mng
->self;

196 i‡(
dkey
) {

197 i‡(
£lf
->
ty≥
 =
T_ARRAY
) {

198 
	`Ârötf
(
°dîr
, "%†¨∏dúty_key=%d\n\n", 
msg
, 
dkey
->
key
.
¨r_ödex
);

200 
	`Ârötf
(
°dîr
, "%†m≠ dúty_key=%s\n\n", 
msg
, 
	`ßve_v¨übÀ
(
dkey
->
key
.
m≠_key
));

204 
	`Ârötf
(
°dîr
, "%†dúty_vÆuêsvÆue=%p,p=%p,c⁄ã¡=%s\n\n", 
msg
, 
vÆue
, vÆue->
u
.
ª„d
, 
	`ßve_v¨übÀ
(value));

205 
	`Ârötf
(
°dîr
, "%†dbv¨ svÆue=%p,p=%p,c⁄ã¡=%s\n\n", 
msg
, 
roŸ
,ÑoŸ->
u
.
ª„d
, 
	`ßve_v¨übÀ
(root));

206 i‡(
∑ª¡
) {

207 
	`Ârötf
(
°dîr
, "%†∑ª¡ svÆue=%p,p=%p,c⁄ã¡=%s\n", 
msg
, 
∑ª¡
,Ö¨ít->
u
.
ª„d
, 
	`ßve_v¨übÀ
(parent));

208 i‡(
∑ª¡
->
ty≥
 =
T_ARRAY
) {

209 
idx
 = 
dúty_mng
->
£lf_key
.
¨r_ödex
;

210 
svÆue_t
 *
£lf_vÆue
 = &
∑ª¡
->
u
.
¨r
->
ôem
[
idx
];

211 
	`Ârötf
(
°dîr
, "%†¨∏£lf_key=%d\n\n", 
msg
, 
idx
);

212 
	`Ârötf
(
°dîr
, "%†¨∏£lf_vÆue=%p,p=%p\n\n", 
msg
, 
£lf_vÆue
, sñf_vÆue->
u
.
ª„d
);

214 
svÆue_t
 *
£lf_key
 = 
dúty_mng
->£lf_key.
m≠_key
;

215 
svÆue_t
 *
£lf_vÆue
 = 
£lf_key
 + 1;

216 
	`Ârötf
(
°dîr
, "%s map self_key=%p,p=%p,%s\n\n",

217 
msg
, 
£lf_key
, sñf_key->
u
.
ª„d
, 
	`ßve_v¨übÀ
(self_key));

218 
	`Ârötf
(
°dîr
, "%s map self_value=%p,p=%p,%s\n\n",

219 
msg
, 
£lf_vÆue
, sñf_vÆue->
u
.
ª„d
, 
	`ßve_v¨übÀ
(self_value));

222 
	`Ârötf
(
°dîr
, "%†£l‡svÆue=%p,p=%p,c⁄ã¡=%s\n\n", 
msg
, 
£lf
, sñf->
u
.
ª„d
, 
	`ßve_v¨übÀ
(self));

223 
	`Ârötf
(
°dîr
, "%†nuŒáºayÖ=%p\n\n", 
msg
, &
the_nuŒ_¨øy
);

224 
	}
}

226 
	$as£π_©èch
(
dúty_m™age_t
 *
dúty_mng
, 
dúty_key_t
 *
dkey
, 
svÆue_t
 *
vÆue
)

228 #ifde‡
DIRTY_DUMP_DEBUG


229 i‡(
vÆue
->
ty≥
 =
T_MAPPING
 || vÆue->ty≥ =
T_ARRAY
) {

230 
	`dump_dúty_öfo
(
dúty_mng
, 
dkey
, 
vÆue
, "tryássertáttach");

234 
vÆue
->
ty≥
) {

235 
T_MAPPING
:

236 
	`as£π_©èch_dúty_m≠_ªcur£
(
vÆue
);

238 
T_ARRAY
:

239 
	`as£π_©èch_dúty_¨r_ªcur£
(
vÆue
);

242 
	}
}

244 
	$as£π_dëach
(
›
, 
svÆue_t
 *
vÆue
)

246 i‡(
›
 !
DIRTY_ADD
) {

247 
vÆue
->
ty≥
) {

248 
T_MAPPING
:

249 #ifde‡
DIRTY_DUMP_DEBUG


250 
	`Ârötf
(
°dîr
, "detach map.op=%d,svalue:%p,p:%p,content:%s\n",

251 
›
, 
vÆue
, vÆue->
u
.
ª„d
, 
	`ßve_v¨übÀ
(value));

254 
T_ARRAY
:

255 #ifde‡
DIRTY_DUMP_DEBUG


256 
	`Ârötf
(
°dîr
, "detach map.op=%d,svalue:%p,p:%p,content:%s\n",

257 
›
, 
vÆue
, vÆue->
u
.
ª„d
, 
	`ßve_v¨übÀ
(value));

262 
	}
}

265 
ölöe
 
	$©èch_node
(
svÆue_t
 *
vÆue
, svÆue_à*
∑ª¡
, 
£lf_key_t
 *
£lf_key
)

267 (
vÆue
)->
ty≥
) {

268 
T_MAPPING
:

269 
	`begö_dúty_m™age_m≠
(
vÆue
, 
∑ª¡
, 
£lf_key
);

271 
T_ARRAY
:

272 
	`begö_dúty_m™age_¨øy
(
vÆue
, 
∑ª¡
, 
£lf_key
);

275 
	}
}

278 
	$˛ór_dúty_node
(
dúty_m™age_t
 *
mng
)

280 
dúty_key_t
 *
dk
, *
√xt
;

281 
dúty_node_t
 *
dúty_node
 = 
mng
->dirty_node;

282 
svÆue_t
 *
node
 = 
mng
->
£lf
;

284 
	`as£π
(
dúty_node
);

285 
node
->
ty≥
) {

286 
T_MAPPING
:

287 
	`TAILQ_FOREACH_SAFE
(
dk
, &
dúty_node
->
dúty_key_li°
, 
íåy
, 
√xt
) {

288 
dk
->
dúty_›
) {

289 
DIRTY_ADD
:

290 
DIRTY_SET
: {

291 
svÆue_t
 *
k
 = 
dk
->
key
.
m≠_key
;

292 
svÆue_t
 *
v
 = 
k
 + 1;

293 
£lf_key_t
 
£lf_key
;

294 
£lf_key
.
m≠_key
 = 
k
;

295 #ifde‡
DIRTY_MAP_CHECK


296 
	`as£π_©èch
(
mng
, 
dk
, 
v
);

298 
	`©èch_node
(
v
, 
node
, &
£lf_key
);

302 
	`‰ì_m≠_dúty_key
(
dk
);

305 
T_ARRAY
:

306 
	`TAILQ_FOREACH_SAFE
(
dk
, &
dúty_node
->
dúty_key_li°
, 
íåy
, 
√xt
) {

307 
dk
->
dúty_›
) {

308 
DIRTY_ADD
:

309 
DIRTY_SET
: {

310 
idx
 = 
dk
->
key
.
¨r_ödex
;

311 
svÆue_t
 *
v
 = &
node
->
u
.
¨r
->
ôem
[
idx
];

312 
£lf_key_t
 
£lf_key
;

313 
£lf_key
.
¨r_ödex
 = 
idx
;

314 #ifde‡
DIRTY_MAP_CHECK


315 
	`as£π_©èch
(
mng
, 
dk
, 
v
);

317 
	`©èch_node
(
v
, 
node
, &
£lf_key
);

321 
	`‰ì_¨r_dúty_key
(
dk
);

325 
	`as£π
(0);

328 
	`de°roy_dúty_node
(
mng
);

329 
	}
}

331 
dúty_key_t
 *
	$dúty_node_ö£π_m≠_key
(
dúty_node_t
* 
dúty_node
, 
svÆue_t
* 
key
, 
›
)

333 
dúty_key_t
 *
dk
 = 
	`√w_m≠_dúty_key
(
key
, 
›
);

334 
	`TAILQ_INSERT_TAIL
(&
dúty_node
->
dúty_key_li°
, 
dk
, 
íåy
);

335 
dúty_node
->
key_˙t
++;

336  
dk
;

337 
	}
}

339 
dúty_key_t
 *
	$dúty_node_ö£π_¨r_key
(
dúty_node_t
* 
dúty_node
, 
idx
, 
›
)

341 
dúty_key_t
 *
dk
 = 
	`√w_¨r_dúty_key
(
idx
, 
›
);

342 
	`TAILQ_INSERT_TAIL
(&
dúty_node
->
dúty_key_li°
, 
dk
, 
íåy
);

343 
dúty_node
->
key_˙t
++;

344  
dk
;

345 
	}
}

347 
dúty_key_t
 *
	$dúty_node_föd_m≠_key
(
dúty_node_t
 *
dúty_node
, 
svÆue_t
 *
key
)

349 
dúty_key_t
 *
dk
;

351 
	`TAILQ_FOREACH
(
dk
, &
dúty_node
->
dúty_key_li°
, 
íåy
) {

352 i‡(
dk
->
dúty_›
 =
DIRTY_DEL
) {

353 i‡(
	`ßmevÆ
(&
dk
->
key
.
dñ
, key)) {

354  
dk
;

357 i‡(
dk
->
key
.
m≠_key
 == key) {

358  
dk
;

363  
NULL
;

364 
	}
}

366 
dúty_key_t
 *
	$dúty_node_föd_¨r_key
(
dúty_node_t
 *
dúty_node
, 
idx
)

368 
dúty_key_t
 *
dk
;

369 
	`TAILQ_FOREACH
(
dk
, &
dúty_node
->
dúty_key_li°
, 
íåy
) {

370 i‡(
dk
->
key
.
¨r_ödex
 =
idx
) {

371  
dk
;

375  
NULL
;

376 
	}
}

380 
ölöe
 
	$dúty_m™age_öô
(
dúty_m™age_t
 *
mng
, 
svÆue_t
 *
£lf
, svÆue_à*
roŸ
, svÆue_à*
∑ª¡
, 
£lf_key_t
*
£lf_key
)

382 
mng
->
roŸ
 =Ñoot;

383 
mng
->
∑ª¡
 =Öarent;

384 
mng
->
£lf
 = self;

386 i‡(
£lf_key
) {

387 
mng
->
£lf_key
 = *self_key;

389 
	`mem£t
(&
mng
->
£lf_key
, 0, (
£lf_key_t
));

391 
mng
->
dúty_node
 = 
NULL
;

392 
	}
}

394 
	$‰ì_dúty_m™age
(
dúty_m™age_t
 *
mng
)

396 
is_roŸ
 = 
	`IS_DIRTY_ROOT
(
mng
);

397 i‡(
mng
->
dúty_node
) {

398 
	`‰ì_dúty_node
(
mng
);

400 
mng
->
roŸ
 = 
NULL
;

401 
mng
->
∑ª¡
 = 
NULL
;

402 
mng
->
£lf
 = 
NULL
;

404 i‡(
is_roŸ
) {

405 
	`MEM_POOL_FREE
(
poﬁ_m™age_roŸ
, 
mng
);

407 
	`MEM_POOL_FREE
(
poﬁ_m™age
, 
mng
);

409 
	}
}

411 
dúty_m™age_t
 *
	$√w_dúty_m™age
(
svÆue_t
 *
£lf
, svÆue_à*
∑ª¡
, 
£lf_key_t
 *
£lf_key
)

413 
dúty_m™age_t
 *
mng
;

415 i‡(
∑ª¡
 =
NULL
) {

416 
mng
 = 
	`MEM_POOL_ALLOC
(
poﬁ_m™age_roŸ
);

417 
	`dúty_m™age_öô
(
mng
, 
£lf
, sñf, 
NULL
, NULL);

418 
	`dúty_roŸ_öô
(
mng
->
dúty_roŸ
, 
£lf
);

420 
mng
 = 
	`MEM_POOL_ALLOC
(
poﬁ_m™age
);

421 
svÆue_t
 *
roŸ
 = 
	`gë_m™age
(
∑ª¡
)->root;

422 
	`dúty_m™age_öô
(
mng
, 
£lf
, 
roŸ
, 
∑ª¡
, 
£lf_key
);

425  
mng
;

426 
	}
}

428 
	$˛ór_dúty_m™age
(
dúty_m™age_t
 *
mng
)

430 i‡(
mng
 !
NULL
) {

431 i‡(
mng
->
dúty_node
) {

432 
	`˛ór_dúty_node
(
mng
);

437 
	}
}

440 
ölöe
 
	$dëach_node
(
›
, 
svÆue_t
 *
vÆue
)

445 #ifde‡
DIRTY_MAP_CHECK


446 
	`as£π_dëach
(
›
, 
vÆue
);

448 i‡(
›
 !
DIRTY_ADD
) {

449 
vÆue
->
ty≥
) {

450 
T_MAPPING
:

451 
	`‰ì_dúty_m≠_ªcur£
(
vÆue
->
u
.
m≠
);

453 
T_ARRAY
:

454 
	`‰ì_dúty_¨r_ªcur£
(
vÆue
->
u
.
¨r
);

458 
	}
}

460 
ölöe
 
	$m≠_ac˚±_dúty_key
(
m≠pög_t
 *
m≠
, 
svÆue_t
 *
key
, 
›
)

462 
dúty_m™age_t
 *
mng
 = 
m≠
->
dúty_mng
;

464 i‡(
mng
->
dúty_node
 =
NULL
) {

465 
	`√w_dúty_node
(
mng
);

470 
dúty_key_t
 *
dk
 = 
	`dúty_node_föd_m≠_key
(
mng
->
dúty_node
, 
key
);

471 i‡(
dk
 =
NULL
) {

472 
dk
 = 
	`dúty_node_ö£π_m≠_key
(
mng
->
dúty_node
, 
key
, 
›
);

473 
	`dëach_node
(
›
, 
key
 + 1);

475 
	`dëach_node
(
›
, 
key
 + 1);

476 
	`ovîwrôe_m≠_dúty_key
(
dk
, 
key
, 
›
);

478 
	}
}

480 
ölöe
 
	$¨r_ac˚±_dúty_key
(
¨øy_t
 *
¨r
, 
idx
, 
›
)

482 
dúty_m™age_t
 *
mng
 = 
¨r
->
dúty_mng
;

483 
	`as£π
(
›
 =
DIRTY_SET
);

486 i‡(
mng
->
dúty_node
 =
NULL
) {

487 
	`√w_dúty_node
(
mng
);

491 
dúty_key_t
 *
dk
 = 
	`dúty_node_föd_¨r_key
(
mng
->
dúty_node
, 
idx
);

492 i‡(
dk
 =
NULL
) {

493 
dk
 = 
	`dúty_node_ö£π_¨r_key
(
mng
->
dúty_node
, 
idx
, 
›
);

494 
	`dëach_node
(
›
, &
¨r
->
ôem
[
idx
]);

496 
	`dëach_node
(
›
, &
¨r
->
ôem
[
idx
]);

497 
	`ovîwrôe_¨r_dúty_key
(
dk
, 
idx
, 
›
);

499 
	}
}

501 
	$£t_dúty_m≠
(
m≠pög_t
 *
m≠
, 
svÆue_t
 *
key
, 
›
)

503 i‡(
m≠
->
dúty_mng
) {

504 
	`m≠_ac˚±_dúty_key
(
m≠
, 
key
, 
›
);

506 
	}
}

508 
	$£t_dúty_¨r
(
¨øy_t
 *
¨r
, 
idx
, 
›
)

510 i‡(
¨r
->
dúty_mng
) {

511 
	`¨r_ac˚±_dúty_key
(
¨r
, 
idx
, 
›
);

513 
	}
}

515 
	$˛ór_dúty_m≠
(
m≠pög_t
 *
m≠
)

517 i‡(
m≠
->
dúty_mng
) {

518 
	`˛ór_dúty_m™age
(
m≠
->
dúty_mng
);

520 
	}
}

522 
	$‰ì_dúty_m≠
(
m≠pög_t
 *
m≠
)

524 i‡(
m≠
->
dúty_mng
) {

525 
	`‰ì_dúty_m™age
(
m≠
->
dúty_mng
);

526 
m≠
->
dúty_mng
 = 
NULL
;

528 
	}
}

530 
	$˛ór_dúty_¨r
(
¨øy_t
 *
¨r
)

532 i‡(
¨r
->
dúty_mng
) {

533 
	`˛ór_dúty_m™age
(
¨r
->
dúty_mng
);

535 
	}
}

537 
	$‰ì_dúty_¨r
(
¨øy_t
 *
¨r
)

539 i‡(
¨r
->
dúty_mng
) {

540 
	`‰ì_dúty_m™age
(
¨r
->
dúty_mng
);

541 
¨r
->
dúty_mng
 = 
NULL
;

543 
	}
}

545 
	$as£π_©èch_dúty_m≠_ªcur£
(
svÆue_t
 *
svm≠
)

547 
èbÀ_size
, 
i
;

548 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

549 
svÆue_t
 *
vÆue
;

550 
m≠pög_t
 *
m≠
 = 
svm≠
->
u
.map;

552 
	`as£π
(
svm≠
->
ty≥
 =
T_MAPPING
);

554 i‡(
m≠
->
dúty_mng
) {

555 
	`dump_dúty_öfo
(
m≠
->
dúty_mng
, 
NULL
, 
svm≠
, "assert fail map from");

557 #ifde‡
DIRTY_DUMP_DEBUG


558 
	`Ârötf
(
°dîr
, "assert okáttach map svalue:%p,p:%p,content:%s\n",

559 
svm≠
, svm≠->
u
.
ª„d
, 
	`ßve_v¨übÀ
(svmap));

562 
	`as£π
(
m≠
->
dúty_mng
 =
NULL
);

564 
i
 = 0, 
èbÀ
 = 
m≠
->èbÀ, 
èbÀ_size
 = map->table_size; i <=Åable_size; i++) {

565 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

566 
vÆue
 = 
ñt
->
vÆues
 + 1;

567 
vÆue
->
ty≥
) {

568 
T_MAPPING
:

569 
	`as£π_©èch_dúty_m≠_ªcur£
(
vÆue
);

571 
T_ARRAY
:

572 
	`as£π_©èch_dúty_¨r_ªcur£
(
vÆue
);

577 
	}
}

579 
	$˛ór_dúty_m≠_ªcur£
(
m≠pög_t
 *
m≠
)

581 
èbÀ_size
, 
i
;

582 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

583 
svÆue_t
 *
vÆue
;

585 
	`˛ór_dúty_m≠
(
m≠
);

586 
i
 = 0, 
èbÀ
 = 
m≠
->èbÀ, 
èbÀ_size
 = map->table_size; i <=Åable_size; i++) {

587 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

588 
vÆue
 = 
ñt
->
vÆues
 + 1;

589 
vÆue
->
ty≥
) {

590 
T_MAPPING
:

591 
	`˛ór_dúty_m≠_ªcur£
(
vÆue
->
u
.
m≠
);

593 
T_ARRAY
:

594 
	`˛ór_dúty_¨r_ªcur£
(
vÆue
->
u
.
¨r
);

599 
	}
}

601 
	$‰ì_dúty_m≠_ªcur£
(
m≠pög_t
 *
m≠
)

603 
èbÀ_size
, 
i
;

604 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

605 
svÆue_t
 *
vÆue
;

607 
i
 = 0, 
èbÀ
 = 
m≠
->èbÀ, 
èbÀ_size
 = map->table_size; i <=Åable_size; i++) {

608 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

609 
vÆue
 = 
ñt
->
vÆues
 + 1;

610 
vÆue
->
ty≥
) {

611 
T_MAPPING
:

612 
	`‰ì_dúty_m≠_ªcur£
(
vÆue
->
u
.
m≠
);

614 
T_ARRAY
:

615 
	`‰ì_dúty_¨r_ªcur£
(
vÆue
->
u
.
¨r
);

622 
	`‰ì_dúty_m≠
(
m≠
);

623 
	}
}

626 
	$begö_dúty_m™age_m≠
(
svÆue_t
 *
svm≠
, svÆue_à*
∑ª¡
, 
£lf_key_t
 *
key
)

628 
èbÀ_size
, 
i
;

629 
m≠pög_node_t
 *
ñt
, **
èbÀ
;

630 
svÆue_t
 *
vÆue
;

631 
m≠pög_t
 *
m≠
;

633 i‡(
svm≠
->
ty≥
 !
T_MAPPING
) {

637 
m≠
 = 
svm≠
->
u
.map;

638 i‡(
m≠
->
dúty_mng
) {

642 
m≠
->
dúty_mng
 = 
	`√w_dúty_m™age
(
svm≠
, 
∑ª¡
, 
key
);

643 
i
 = 0, 
èbÀ
 = 
m≠
->èbÀ, 
èbÀ_size
 = map->table_size; i <=Åable_size; i++) {

644 
ñt
 = 
èbÀ
[
i
];É…;É… =É…->
√xt
) {

645 
£lf_key_t
 
£lf_key
;

646 
£lf_key
.
m≠_key
 = 
ñt
->
vÆues
;

647 
vÆue
 = 
ñt
->
vÆues
 + 1;

648 
vÆue
->
ty≥
) {

649 
T_MAPPING
:

650 
	`begö_dúty_m™age_m≠
(
vÆue
, 
svm≠
, &
£lf_key
);

652 
T_ARRAY
:

653 
	`begö_dúty_m™age_¨øy
(
vÆue
, 
svm≠
, &
£lf_key
);

658 
	}
}

660 
	$begö_dúty_m™age_¨øy
(
svÆue_t
 *
sv¨r
, svÆue_à*
∑ª¡
, 
£lf_key_t
 *
£lf_key
)

662 
i
;

663 
¨øy_t
 *
¨r
;

665 i‡(
sv¨r
->
ty≥
 !
T_ARRAY
) {

669 
¨r
 = 
sv¨r
->
u
.arr;

670 i‡(
¨r
->
dúty_mng
) {

674 
¨r
->
dúty_mng
 = 
	`√w_dúty_m™age
(
sv¨r
, 
∑ª¡
, 
£lf_key
);

675 
i
 = 0; i < 
¨r
->
size
; i++) {

676 
svÆue_t
 *
ôem
 = &
¨r
->ôem[
i
];

677 
£lf_key_t
 
£lf_key
;

678 
£lf_key
.
¨r_ödex
 = 
i
;

679 
ôem
->
ty≥
) {

680 
T_MAPPING
:

681 
	`begö_dúty_m™age_m≠
(
ôem
, 
sv¨r
, &
£lf_key
);

683 
T_ARRAY
:

684 
	`begö_dúty_m™age_¨øy
(
ôem
, 
sv¨r
, &
£lf_key
);

688 
	}
}

690 
	$as£π_©èch_dúty_¨r_ªcur£
(
svÆue_t
 *
sv¨r
)

692 
i
;

693 
svÆue_t
 *
ôem
;

694 
¨øy_t
 *
¨r
 = 
sv¨r
->
u
.arr;

696 
	`as£π
(
sv¨r
->
ty≥
 =
T_ARRAY
);

698 i‡(
sv¨r
->
u
.
¨r
 =&
the_nuŒ_¨øy
) {

702 i‡(
¨r
->
dúty_mng
) {

703 
	`dump_dúty_öfo
(
¨r
->
dúty_mng
, 
NULL
, 
sv¨r
, "assert failárr from");

705 #ifde‡
DIRTY_DUMP_DEBUG


706 
	`Ârötf
(
°dîr
, "as£π okáâacháº svÆue:%p,p:%p,c⁄ã¡:%s\n", 
sv¨r
, sv¨r->
u
.
ª„d
,
	`ßve_v¨übÀ
(svarr));

709 
	`as£π
(
¨r
->
dúty_mng
 =
NULL
);

711 
i
 = 0; i < 
¨r
->
size
; i++) {

712 
ôem
 = &
¨r
->ôem[
i
];

713 
ôem
->
ty≥
) {

714 
T_MAPPING
:

715 
	`as£π_©èch_dúty_m≠_ªcur£
(
ôem
);

717 
T_ARRAY
:

718 
	`as£π_©èch_dúty_¨r_ªcur£
(
ôem
);

722 
	}
}

724 
	$˛ór_dúty_¨r_ªcur£
(
¨øy_t
 *
¨r
)

726 
i
;

727 
svÆue_t
 *
ôem
;

729 
	`˛ór_dúty_¨r
(
¨r
);

730 
i
 = 0; i < 
¨r
->
size
; i++) {

731 
ôem
 = &
¨r
->ôem[
i
];

732 
ôem
->
ty≥
) {

733 
T_MAPPING
:

734 
	`˛ór_dúty_m≠_ªcur£
(
ôem
->
u
.
m≠
);

736 
T_ARRAY
:

737 
	`˛ór_dúty_¨r_ªcur£
(
ôem
->
u
.
¨r
);

741 
	}
}

743 
	$‰ì_dúty_¨r_ªcur£
(
¨øy_t
 *
¨r
)

745 
i
;

746 
svÆue_t
 *
ôem
;

748 
i
 = 0; i < 
¨r
->
size
; i++) {

749 
ôem
 = &
¨r
->ôem[
i
];

750 
ôem
->
ty≥
) {

751 
T_MAPPING
:

752 
	`‰ì_dúty_m≠_ªcur£
(
ôem
->
u
.
m≠
);

754 
T_ARRAY
:

755 
	`‰ì_dúty_¨r_ªcur£
(
ôem
->
u
.
¨r
);

761 
	`‰ì_dúty_¨r
(
¨r
);

762 
	}
}

765 
	$˛ór_dúty
(
svÆue_t
 *
vÆue
)

767 
dúty_m™age_t
 *
mng
 = 
	`gë_m™age
(
vÆue
);

768 i‡(
mng
 !
NULL
) {

769 
	`as£π
(
	`IS_DIRTY_ROOT
(
mng
));

770 
svÆue_t
 *
node
;

771 
dúty_node_t
 *
dúty_node
, *
√xt
;

772 
dúty_roŸ_t
 *
dúty_roŸ
 = 
mng
->dirty_root;

774 
	`TAILQ_FOREACH_SAFE
(
dúty_node
, &
dúty_roŸ
->
dúty_node_li°
, 
íåy
, 
√xt
) {

776 
node
 = 
dúty_node
->
mng
->
£lf
;

777 
node
->
ty≥
) {

778 
T_MAPPING
: {

779 
	`˛ór_dúty_m≠
(
node
->
u
.
m≠
);

782 
T_ARRAY
: {

783 
	`˛ór_dúty_¨r
(
node
->
u
.
¨r
);

789 
	}
}

	@src/disassembler.c

5 
	~"°d.h
"

6 
	~"Õc_ö˛.h
"

7 
	~"efuns_ö˛.h
"

8 
	~"simul_efun.h
"

9 
	~"comm.h
"

10 
	~"sw≠.h
"

11 
	~"Àx.h
"

12 
	~"fûe.h
"

13 
	~"¥ogøm.h
"

15 #ifde‡
F_DUMP_PROG


16 
dump_¥og
(
¥ogøm_t
 *, *, );

17 
dißs£mbÀ
(
FILE
 *, *, , , 
¥ogøm_t
*);

18 *
dißs£m_°rög
(*);

19 
CDECL
 
sh‹t_com∑ª
(
CONST
 *, CONST *);

20 
dump_löe_numbîs
(
FILE
 *, 
¥ogøm_t
*);

22 
	$f_dump_¥og
()

24 
¥ogøm_t
 *
¥og
;

25 *
whîe
;

26 
d
;

27 
obje˘_t
 *
ob
;

28 
«rg
 = 
°_num_¨g
;

30 i‡(
°_num_¨g
 == 2)

32 
ob
 = 
•
[ - 1].
u
.ob;

33 
d
 = 
•
->
u
.
numbî
;

34 
whîe
 = 0;

36 i‡(
°_num_¨g
 == 3)

38 
ob
 = 
•
[ - 2].
u
.ob;

39 
d
 = 
•
[ - 1].
u
.
numbî
;

40 
whîe
 = (
•
->
ty≥
 =
T_STRING
Ë? sp->
u
.
°rög
: 0;

44 
ob
 = 
•
->
u
.ob;

45 
d
 = 0;

46 
whîe
 = 0;

48 i‡(!(
¥og
 = 
ob
->prog) )

50 
	`îr‹
("NoÖrogram forÅhis object.\n");

54 i‡(!
whîe
)

56 
whîe
 = "/PROG_DUMP";

58 
	`dump_¥og
(
¥og
, 
whîe
, 
d
);

60 
	`p›_n_ñems
(
«rg
);

61 
	}
}

67 
	$dump_¥og
(
¥ogøm_t
 *
¥og
, *
‚
, 
Êags
)

69 *
‚ame
;

70 
FILE
 *
f
;

71 
i
, 
j
;

73 
‚ame
 = 
	`check_vÆid_∑th
(
‚
, 
cuºít_obje˘
, "dumpallobj", 1);

74 i‡(!
‚ame
)

76 
	`îr‹
("Wr⁄gÖ©h '%s' f‹ wrôög.\n", 
‚
);

79 
f
 = 
	`f›í
(
‚ame
, "w");

80 i‡(!
f
)

82 
	`îr‹
("C™'àtÿ›í '/%s' f‹ wrôög.\n", 
‚ame
);

85 
	`Ârötf
(
f
, "NAME: /%s\n", 
¥og
->
«me
);

86 
	`Ârötf
(
f
, "INHERITS:\n");

87 
	`Ârötf
(
f
, "\tname fio vio\n");

88 
	`Ârötf
(
f
, "\t---------------- --- ---\n");

89 
i
 = 0; i < ()
¥og
->
num_öhîôed
; i++)

91 
	`Ârötf
(
f
, "\t%-20† %5d %5d\n", 
¥og
->
öhîô
[
i
].¥og->
«me
, (Ìrog->öhîô[i].
fun˘i⁄_ödex_off£t
, (Ìrog->öhîô[i].
v¨übÀ_ödex_off£t
);

93 
	`Ârötf
(
f
, "PROGRAM:");

94 
i
 = 0; i < ()
¥og
->
¥ogøm_size
; i++)

96 i‡(
i
 % 16 == 0)

98 
	`Ârötf
(
f
, "\n\t%04x: ", ()
i
);

100 
	`Ârötf
(
f
, "%02d ", ()
¥og
->
¥ogøm
[
i
]);

102 
	`Âutc
('\n', 
f
);

103 
	`Ârötf
(
f
, "FUNCTIONS:\n");

104 
	`Ârötf
(
f
, "Çame offset flags fio #Üocals #árgs\n");

105 
	`Ârötf
(
f
, " --------------------- ------ ------- --- -------- ------\n");

106 
i
 = 0; i < 
¥og
->
num_fun˘i⁄s_tŸÆ
; i++)

108 
sÊags
[8];

109 
Êags
;

111 
Êags
 = 
¥og
->
fun˘i⁄_Êags
[
i
];

112 
sÊags
[0] = (
Êags
 &
NAME_INHERITED
) ? 'i' : '-';

113 
sÊags
[1] = (
Êags
 &
NAME_UNDEFINED
) ? 'u' : '-';

114 
sÊags
[2] = (
Êags
 &
NAME_STRICT_TYPES
) ? 's' : '-';

115 
sÊags
[3] = (
Êags
 &
NAME_PROTOTYPE
) ? 'p' : '-';

116 
sÊags
[4] = (
Êags
 &
NAME_DEF_BY_INHERIT
) ? 'd' : '-';

117 
sÊags
[5] = (
Êags
 &
NAME_ALIAS
) ? 'a' : '-';

118 
sÊags
[6] = (
Êags
 &
NAME_TRUE_VARARGS
) ? 'v' : '-';

119 
sÊags
[7] = '\0';

120 i‡(
Êags
 &
NAME_INHERITED
)

122 
ru¡ime_fun˘i⁄_u
 *
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
¥og
, 
i
);

123 
	`Ârötf
(
f
, "%4d: %-20† %5d %7†%5d\n", 
i
, 
	`fun˘i⁄_«me
(
¥og
, i), 
func_íåy
->
öh
.
off£t
, 
sÊags
, func_íåy->öh.
fun˘i⁄_ödex_off£t
);

127 
ru¡ime_fun˘i⁄_u
 *
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
¥og
, 
i
);

128 
	`Ârötf
(
f
, "%4d: %-20† %5d %7† %7d %5d\n", 
i
, 
	`fun˘i⁄_«me
(
¥og
, i), 
func_íåy
->
def
.
f_ödex
, 
sÊags
, func_íåy->def.
num_¨g
, func_íåy->def.
num_loˇl
);

131 
	`Ârötf
(
f
, "VARIABLES:\n");

132 
i
 = 0; i < ()
¥og
->
num_v¨übÀs_deföed
; i++)

134 
	`Ârötf
(
f
, "%4d: %-12s\n", 
i
, 
¥og
->
v¨übÀ_èbÀ
[i]);

136 
	`Ârötf
(
f
, "STRINGS:\n");

137 
i
 = 0; i < ()
¥og
->
num_°rögs
; i++)

139 
	`Ârötf
(
f
, "%4d: ", 
i
);

140 
j
 = 0; j < 32; j++)

142 
c
;

144 i‡(!(
c
 = 
¥og
->
°rögs
[
i
][
j
]) )

148 i‡(
c
 == '\n')

150 
	`Ârötf
(
f
, "\\n");

154 
	`Âutc
(
c
, 
f
);

157 
	`Âutc
('\n', 
f
);

160 i‡(
Êags
 &1)

162 
	`Ârötf
(
f
, "\n;;; *** Disassembly ***\n");

163 
	`dißs£mbÀ
(
f
, 
¥og
->
¥ogøm
, 0,Örog->
¥ogøm_size
,Örog);

165 i‡(
Êags
 &2)

167 
	`Ârötf
(
f
, "\n;;; *** Line Number Info ***\n");

168 
	`dump_löe_numbîs
(
f
, 
¥og
);

170 
	`f˛o£
(
f
);

171 
	}
}

173 *
	$dißs£m_°rög
(*
°r
)

175 
buf
[30];

176 *
b
;

177 
i
;

179 i‡(!
°r
)

184 
b
 = 
buf
;

185 
i
 = 0; i < 29; i++)

187 i‡(!
°r
[
i
])

191 i‡(
°r
[
i
] == '\n')

193 *
b
++ = '\\';

194 *
b
++ = 'n';

198 *
b
++ = 
°r
[
i
];

201 *
b
++ = 0;

202  
buf
;

203 
	}
}

205 
	#NUM_FUNS
 
¥og
->
num_fun˘i⁄s_tŸÆ


	)

206 
	#NUM_FUNS_D
 
¥og
->
num_fun˘i⁄s_deföed


	)

207 
	#VARS
 
¥og
->
v¨übÀ_«mes


	)

208 
	#NUM_VARS
 
¥og
->
num_v¨übÀs_tŸÆ


	)

209 
	#STRS
 
¥og
->
°rögs


	)

210 
	#NUM_STRS
 
¥og
->
num_°rögs


	)

211 
	#CLSS
 
¥og
->
˛as£s


	)

213 
CDECL
 
	$sh‹t_com∑ª
(
CONST
 *
a
, CONST *
b
)

215 
x
 = *(*)
a
;

216 
y
 = *(*)
b
;

218  
x
 - 
y
;

219 
	}
}

221 *
	gpushes
[] =

226 
	$dißs£mbÀ
(
FILE
 *
f
, *
code
, 
°¨t
, 
íd
, 
¥ogøm_t
 *
¥og
)

228 
i
, 
j
, 
ö°r
, 
ürg
, 
is_efun
;

229 
ßrg
;

230 
off£t
;

231 *
pc
, 
buff
[256];

232 
√xt_func
;

234 *
off£ts
;

236 i‡(
°¨t
 == 0)

239 
off£ts
 = (*)
	`mÆloc
(
NUM_FUNS_D
 *2 * () );

240 
i
 = 0; i < ()
NUM_FUNS_D
; i++)

242 i‡(
¥og
->
fun˘i⁄_Êags
[¥og->
fun˘i⁄_èbÀ
[
i
].
ru¡ime_ödex
] &(
NAME_INHERITED
 | 
NAME_NO_CODE
) )

244 
off£ts
[
i
 *2] = 
íd
 + 1;

248 
off£ts
[
i
 *2] = 
¥og
->
fun˘i⁄_èbÀ
[i].
addªss
;

250 
off£ts
[
i
 *2+1] = i;

252 #ifde‡
_SEQUENT_


253 
	`qs‹t
–(*Ë&
off£ts
[0],

255 
	`qs‹t
–(*Ë&
off£ts
[0],

257 
NUM_FUNS_D
, (Ë*2, 
sh‹t_com∑ª
); 
√xt_func
 = 0;

261 
off£ts
 = 0; 
√xt_func
 = - 1;

264 
pc
 = 
code
 + 
°¨t
;

266  (
pc
 - 
code
Ë< 
íd
)

268 i‡–(
√xt_func
 >0Ë&& ( (
pc
 - 
code
Ë>
off£ts
[next_func]) )

270 
	`Ârötf
(
f
, "\n;; Fun˘i⁄ %s\n", 
¥og
->
fun˘i⁄_èbÀ
[
off£ts
[
√xt_func
 + 1]].
«me
);Çext_fun¯+2; i‡“ext_fun¯>–()
NUM_FUNS_D
 *2) )next_func = - 1;

273 
	`Ârötf
(
f
, "%04x: ", (Ë(
pc
 - 
code
) );

275 
is_efun
 = (
ö°r
 = 
	`EXTRACT_UCHAR
(
pc
ËË>
BASE
;

277 
pc
++; 
buff
[0] = 0; 
ßrg
 = 0;

279 
ö°r
)

281 
F_PUSH
:

282 
	`Ârötf
(
f
, "push "); 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

283 
i
--)

285 
j
 = 
	`EXTRACT_UCHAR
(
pc
++); 
	`Ârötf
(
f
, "%†%i", 
pushes
[(j &
PUSH_WHAT
Ë>> 6], j &
PUSH_MASK
); i‡(
i
)fprintf(f, ", ");

289 
	`Ârötf
(
f
, "\n"); ;

291 
F_BRANCH_NE
:

292 
F_BRANCH_GE
:

293 
F_BRANCH_LE
:

294 
F_BRANCH_EQ
:

295 
F_BRANCH
:

296 
F_BRANCH_WHEN_ZERO
:

297 
F_BRANCH_WHEN_NON_ZERO
:

298 #ifde‡
F_LOR


299 
F_LOR
:

300 
F_LAND
:

302 
	`COPY_SHORT
(&
ßrg
, 
pc
); 
off£t
 = (p¯- 
code
Ë+ ()ßrg; 
	`•rötf
(
buff
, "%04x (%04x)", ()sarg, ()offset);Öc += 2; ;

304 
F_NEXT_FOREACH
:

305 
F_BBRANCH_LT
:

306 
	`COPY_SHORT
(&
ßrg
, 
pc
); 
off£t
 = (p¯- 
code
Ë- ()ßrg; 
	`•rötf
(
buff
, "%04x (%04x)", ()sarg, ()offset);Öc += 2; ;

308 
F_FOREACH
:

310 
tmp
[32]; 
Êags
 = 
	`EXTRACT_UCHAR
(
pc
++);

312 
	`•rötf
(
buff
, "(%sË%†%i", (
Êags
 &4Ë? "m≠pög" : "¨øy", (Êag†&1Ë? "globÆ" : "loˇl", 
	`EXTRACT_UCHAR
(
pc
++) ); if (flags &4)

314 
	`•rötf
(
tmp
, ", %†%i", (
Êags
 &2Ë? "globÆ" : "loˇl", 
	`EXTRACT_UCHAR
(
pc
++Ë); 
	`°rˇt
(
buff
,Åmp);

319 
F_BBRANCH_WHEN_ZERO
:

320 
F_BBRANCH_WHEN_NON_ZERO
:

321 
F_BBRANCH
:

322 
	`COPY_SHORT
(&
ßrg
, 
pc
); 
off£t
 = (p¯- 
code
Ë- ()ßrg; 
	`•rötf
(
buff
, "%04x (%04x)", ()sarg, ()offset);Öc += 2; ;

324 #ifde‡
F_JUMP


325 
F_JUMP
:

327 #ifde‡
F_JUMP_WHEN_ZERO


328 
F_JUMP_WHEN_ZERO
:

329 
F_JUMP_WHEN_NON_ZERO
:

331 
F_CATCH
:

332 
	`COPY_SHORT
(&
ßrg
, 
pc
); 
	`•rötf
(
buff
, "%04x", ()sarg);Öc += 2; ;

334 
F_AGGREGATE
:

335 
F_AGGREGATE_ASSOC
:

336 
	`COPY_SHORT
(&
ßrg
, 
pc
); 
	`•rötf
(
buff
, "%d", ()sarg);Öc += 2; ;

338 
F_MEMBER
:

339 
F_MEMBER_LVALUE
:

340 
	`•rötf
(
buff
, "%d", ()
	`EXTRACT_UCHAR
(
pc
++) ); ;

342 
F_EXPAND_VARARGS
:

344 
which
 = 
	`EXTRACT_UCHAR
(
pc
++); if (which)

346 
	`•rötf
(
buff
, "%d fromÅ› o‡°ack", 
which
);

350 
	`°r˝y
(
buff
, "top of stack");

355 
F_NEW_EMPTY_CLASS
:

356 
F_NEW_CLASS
:

358 
which
 = 
	`EXTRACT_UCHAR
(
pc
++);

360 
	`°r˝y
(
buff
, 
STRS
[
CLSS
[
which
].
«me
]); ;

363 
F_CALL_FUNCTION_BY_ADDRESS
:

364 
	`COPY_SHORT
(&
ßrg
, 
pc
);Ö¯+3; i‡(ßrg < 
NUM_FUNS
)
	`•rötf
(
buff
, "%-12†%5d", 
	`fun˘i⁄_«me
(
¥og
, sarg), ()sarg);

366 
	`•rötf
(
buff
, "<ouào‡øngê%d>", ()
ßrg
); ;

368 
F_CALL_INHERITED
:

370 
¥ogøm_t
 *
√w¥og
;

372 
√w¥og
 = (
¥og
->
öhîô
 + 
	`EXTRACT_UCHAR
(
pc
++Ë)->¥og; 
	`COPY_SHORT
(&
ßrg
,Öc);Ö¯+3; i‡(ßrg <Çew¥og->
num_fun˘i⁄s_tŸÆ
)
	`•rötf
(
buff
, "%30s::%-12†%5d",Çew¥og->
«me
, 
fun˘i⁄_«me


373 (
√w¥og
, 
ßrg
), ()sarg);

375 
	`•rötf
(
buff
, "<ouào‡øngêö %30†- %d>", 
√w¥og
->
«me
, ()
ßrg
); ;

377 
F_GLOBAL_LVALUE
:

378 
F_GLOBAL
:

379 i‡–(Ë(
ürg
 = 
	`EXTRACT_UCHAR
(
pc
ËË< 
NUM_VARS
)
	`•rötf
(
buff
, "%s", 
	`v¨übÀ_«me
(
¥og
, iarg) );

381 
	`•rötf
(
buff
, "<ouào‡øngê%d>", 
ürg
); 
pc
++; ;

383 
F_LOOP_INCR
:

384 
	`•rötf
(
buff
, "LV%d", 
	`EXTRACT_UCHAR
(
pc
Ë);Öc++; ; 
F_WHILE_DEC
:

385 
	`COPY_SHORT
(&
ßrg
, 
pc
 + 1); 
off£t
 = (p¯- 
code
Ë- ()ßrg; 
	`•rötf
(
buff
, "LV%d--, bønch %04x (%04x)", 
	`EXTRACT_UCHAR
(pc), ()sarg, ()offset);Öc += 3; ; 

386 
F_TRANSFER_LOCAL
:

387 
F_LOCAL
:

388 
F_LOCAL_LVALUE
:

389 
F_VOID_ASSIGN_LOCAL
:

390 
	`•rötf
(
buff
, "LV%d", 
	`EXTRACT_UCHAR
(
pc
Ë);Öc++; ; 
F_LOOP_COND_NUMBER
:

391 
i
 = 
	`EXTRACT_UCHAR
(
pc
++); 
	`COPY_INT
(&
ürg
,Öc);Ö¯+4; 
	`COPY_SHORT
(&
ßrg
,Öc); 
off£t
 = (p¯- 
code
Ë- ()ßrg;Ö¯+2; 
	`•rötf
(
buff
, "LV%d < %d bbranch_when_non_zero %04x (%04x)", i,

392 
ürg
, 
ßrg
, 
off£t
); ; 
F_LOOP_COND_LOCAL
:

393 
i
 = 
	`EXTRACT_UCHAR
(
pc
++); 
ürg
 = *pc++; 
	`COPY_SHORT
(&
ßrg
,Öc); 
off£t
 = (p¯- 
code
Ë- ()ßrg;Ö¯+2; 
	`•rötf
(
buff
, "LV%d < LV%d bbranch_when_non_zero %04x (%04x)", i, iarg, sarg,

394 
off£t
); ; 
F_STRING
:

395 
	`COPY_SHORT
(&
ßrg
, 
pc
); i‡(ßrg < 
NUM_STRS
)
	`•rötf
(
buff
, "\"%s\"", 
	`dißs£m_°rög
(
STRS
[sarg]) );

397 
	`•rötf
(
buff
, "<ouào‡øngê%d>", ()
ßrg
); 
pc
 +2; ; 
F_SHORT_STRING
:

398 i‡(
	`EXTRACT_UCHAR
(
pc
Ë< 
NUM_STRS
)
	`•rötf
(
buff
, "\"%s\"", 
	`dißs£m_°rög
(
STRS
[EXTRACT_UCHAR(pc)]) );

400 
	`•rötf
(
buff
, "<ouào‡øngê%d>", 
	`EXTRACT_UCHAR
(
pc
Ë);Öc++; ; 
F_SIMUL_EFUN
:

401 
	`COPY_SHORT
(&
ßrg
, 
pc
); 
	`•rötf
(
buff
, "\"%s\" %d", 
simuls
[ßrg].
func
->
«me
,Öc[2]);Öc += 3; ;

403 
F_FUNCTION_CONSTRUCTOR
:

404 
	`EXTRACT_UCHAR
(
pc
++) )

406 
FP_SIMUL
:

407 
	`LOAD_SHORT
(
ßrg
, 
pc
); 
	`•rötf
(
buff
, "<simul_efun> \"%s\"", 
simuls
[ßrg].
func
->
«me
); ; 
FP_EFUN
:

408 
	`LOAD_SHORT
(
ßrg
, 
pc
); 
	`•rötf
(
buff
, "<efun> %s", 
ö°rs
[ßrg].
«me
); ; 
FP_LOCAL
:

409 
	`LOAD_SHORT
(
ßrg
, 
pc
); i‡(ßrg < 
NUM_FUNS
)
	`•rötf
(
buff
, "<loˇl_fun> %s", 
	`fun˘i⁄_«me
(
¥og
, sarg) );

411 
	`•rötf
(
buff
, "<loˇl_fun> <ouào‡øngê%d>", ()
ßrg
); ; 
FP_FUNCTIONAL
:

412 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
: 
	`•rötf
(
buff
, "<fun˘i⁄Æ, %dárgs>\nCode:", ()
pc
[0]);Ö¯+3; ; 
FP_ANONYMOUS
:

413 
FP_ANONYMOUS
 | 
FP_NOT_BINDABLE
: 
	`COPY_SHORT
(&
ßrg
, &
pc
[2]); 
	`•rötf
(
buff
, "<™⁄ymou†fun˘i⁄, %dárgs, %dÜoˇls,Énd†© %04x>\nCode:", (Ìc[0], (Ìc[1], (Ë’¯+ 3+ßrg - 
code
)

414 ); 
pc
 += 4; ;

418 
F_NUMBER
:

419 
	`COPY_INT
(&
ürg
, 
pc
); 
	`•rötf
(
buff
, "%d", iarg);Öc += 4; ;

421 
F_REAL
:

423 
Árg
;

425 
	`COPY_FLOAT
(&
Árg
, 
pc
); 
	`•rötf
(
buff
, "%f", farg);Öc += 4; ;

428 
F_SSCANF
:

429 
F_PARSE_COMMAND
:

430 
F_BYTE
:

431 
	`•rötf
(
buff
, "%d", 
	`EXTRACT_UCHAR
(
pc
) );Öc++; ;

433 
F_NBYTE
:

434 
	`•rötf
(
buff
, "-%d", 
	`EXTRACT_UCHAR
(
pc
) );Öc++; ;

436 
F_SWITCH
:

438 
ây≥
; 
°abÀ
, 
ëabÀ
, 
def
; *
∑rg
;

440 
ây≥
 = 
	`EXTRACT_UCHAR
(
pc
); ( (*Ë&
°abÀ
)[0] =Öc[1]; ( (*Ë&°abÀ)[1] =Öc[2]; ( (*Ë&
ëabÀ
)[0] =Öc[3]; ( (*Ë&ëabÀ)[1] =Öc[4]; ( (*Ë&
def
)[0] =Öc[5]; ( (*) &def)

441 [1] = 
pc
[6]; 
	`Ârötf
(
f
, "swôch\n"); f¥ötf(f, "Åy≥: %02xÅabÀ: %04x-%04x deÊt: %04x\n", ()
ây≥
, ()
°abÀ
, ()
ëabÀ
, ()
def
);

443 
	`dißs£mbÀ
(
f
, 
code
, 
pc
 - codê+ 7, 
°abÀ
, 
¥og
);

446 
	`Ârötf
(
f
, " swôchÅabÀ (f‹ %04x)\n", (Ë(
pc
 - 
code
 - 1Ë); i‡(
ây≥
 == 0xfe)ttype = 0;

447 i‡(
ây≥
 >> 4 == 0xf)ttype = 1;

449 
ây≥
 = 2;

451 
pc
 = 
code
 + 
°abÀ
; i‡(
ây≥
 == 0)

453 
i
 = 0;

454 
pc
 < 
code
 + 
ëabÀ
 - 4)

456 
	`COPY_SHORT
(&
ßrg
, 
pc
); 
	`Ârötf
(
f
, "\t%2d: %04x\n", 
i
++, ()sarg);Öc += 2;

458 
	`COPY_INT
(&
ürg
, 
pc
); 
	`Ârötf
(
f
, "\tminval = %d\n", iarg);Öc += 4;

462 
pc
 < 
code
 + 
ëabÀ
)

464 
	`COPY_PTR
(&
∑rg
, 
pc
); 
	`COPY_SHORT
(&
ßrg
,Ö¯+ 
SIZEOF_PTR
); i‡(
ây≥
 == 1 || !parg)

466 
	`Ârötf
(
f
, "\t%-4ld\t%04x\n", ()
∑rg
, ()
ßrg
);

470 
	`Ârötf
(
f
, "\t\"%s\"\t%04x\n", 
	`dißs£m_°rög
(
∑rg
), ()
ßrg
);

472 
pc
 +2+
SIZEOF_PTR
;

477 
F_EFUNV
:

478 
	`•rötf
(
buff
, "%d", 
	`EXTRACT_UCHAR
(
pc
++Ë); 
ö°r
 = EXTRACT_UCHAR’c++Ë+ 
ONEARG_MAX
; ; 
F_EFUN0
:

479 
F_EFUN1
:

480 
F_EFUN2
:

481 
F_EFUN3
:

482 i‡(
ö°rs
[
ö°r
].
mö_¨g
 !ö°rs[ö°r].
max_¨g
)

484 
	`•rötf
(
buff
, "%d", 
ö°r
 - 
F_EFUN0
);

486 
ö°r
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
ONEARG_MAX
; ;

488 
	`Ârötf
(
f
, "%†%s\n", 
	`gë_f_«me
(
ö°r
), 
buff
);

491 i‡(
off£ts
)
	`‰ì
(offsets);

492 
	}
}

494 
	#INCLUDE_DEPTH
 10

	)

496 
	$dump_löe_numbîs
(
FILE
 *
f
, 
¥ogøm_t
 *
¥og
)

498 *
fi
; *
li_°¨t
; *
li_íd
; *
li
; 
addr
; 
sz
; 
s
;

500 i‡(!
¥og
->
löe_öfo
)

502 
	`lﬂd_löe_numbîs
(
¥og
); i‡(!¥og->
löe_öfo
)

504 
	`Ârötf
(
f
, "FailedÅoÜoadÜineÇumbers\n");  ;

508 
fi
 = 
¥og
->
fûe_öfo
; 
li_íd
 = (*Ë––(*)fiË+ fi[0]); 
li_°¨t
 = (*) (fi + fi[1]);

510 
fi
 +2; 
	`Ârötf
(
f
, "\nabsoluteÜine -> (file,Üine)Åable:\n");

511 
fi
 < (*)
li_°¨t
)

513 
	`Ârötf
(
f
, "%òlöe†‰om %ò[%s]\n", ()
fi
[0], ()fi[1], 
¥og
->
°rögs
[fi[1] - 1]); fi += 2;

516 
li
 = 
li_°¨t
; 
addr
 = 0; 
	`Ârötf
(
f
, "\naddress ->ábsoluteÜineÅable:\n");

517 
li
 < 
li_íd
)

519 
sz
 = *
li
++; 
	`COPY_SHORT
(&
s
,Üi);Üò+2; 
	`Ârötf
(
f
, "%4x-%4x: %i\n", 
addr
,áddr + sz - 1, ()s);áddr += sz;

521 
	}
}

	@src/dumpstat.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"comm.h
"

4 
	~"fûe.h
"

10 
	#DATASIZE_MAX_DEPTH
 20

	)

12 
sumSizes
(
m≠pög_t
 *, 
m≠pög_node_t
 *, *);

13 
svÆue_size
(
svÆue_t
 *, 
dïth
);

15 
	$sumSizes
(
m≠pög_t
 *
m
, 
m≠pög_node_t
 *
ñt
, *
ç
)

17 *
t
 = (*)
ç
;

19 ()
m
;

20 *
t
 +(
	`svÆue_size
(&
ñt
->
vÆues
[0], 0) + svalue_size(&elt->values[1], 0) );

21 *
t
 +(
m≠pög_node_t
);

23 
	}
}

29 
	$svÆue_size
(
svÆue_t
 *
v
, 
dïth
)

31 
i
, 
tŸÆ
;

33 i‡(
dïth
 > 
DATASIZE_MAX_DEPTH
)

38 
v
->
ty≥
)

40 
T_OBJECT
:

41 
T_REAL
:

42 
T_NUMBER
:

44 
T_STRING
:

45  (Ë(
	`°æí
(
v
->
u
.
°rög
) + 1);

46 
T_ARRAY
:

47 
T_CLASS
:

49 
tŸÆ
 = (
¨øy_t
Ë- (
svÆue_t
);

50 
i
 = 0; i < 
v
->
u
.
¨r
->
size
; i++)

52 
tŸÆ
 +
	`svÆue_size
(&
v
->
u
.
¨r
->
ôem
[
i
], 
dïth
 + 1Ë+ (
svÆue_t
);

54  
tŸÆ
;

55 
T_MAPPING
:

56 
tŸÆ
 = (
m≠pög_t
);

57 
	`m≠Tøvî£
(
v
->
u
.
m≠
, 
sumSizes
, &
tŸÆ
);

58  
tŸÆ
;

59 
T_FUNCTION
:

61 
svÆue_t
 
tmp
;

62 
tmp
.
ty≥
 = 
T_ARRAY
;

63 
tmp
.
u
.
¨r
 = 
v
->u.
Â
->
hdr
.
¨gs
;

65 i‡(
tmp
.
u
.
¨r
)

67 
tŸÆ
 = (Ë((
fu≈å_hdr_t
Ë+ 
	`svÆue_size
(&
tmp
, 
dïth
 + 1) );

71 
tŸÆ
 = (Ë((
fu≈å_hdr_t
) );

73 
v
->
u
.
Â
->
hdr
.
ty≥
)

75 
FP_EFUN
:

76 
tŸÆ
 +(
efun_±r_t
);

78 
FP_LOCAL
 | 
FP_NOT_BINDABLE
: 
tŸÆ
 +(
loˇl_±r_t
);

80 
FP_SIMUL
:

81 
tŸÆ
 +(
simul_±r_t
);

83 
FP_FUNCTIONAL
:

84 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
: 
tŸÆ
 +(
fun˘i⁄Æ_t
);

87  
tŸÆ
;

89 
T_BUFFER
:

91  (Ë((
buf„r_t
Ë+ 
v
->
u
.
buf
->
size
 - 1);

92 
T_ANY
:

95 
	`Áèl
("Wr⁄gÅy≥: %d\n", 
v
->
ty≥
);

99 
	}
}

105 
	$d©a_size
(
obje˘_t
 *
ob
)

107 
tŸÆ
 = 0, 
i
;

109 i‡(
ob
->
¥og
)

111 
i
 = 0; i < ()
ob
->
¥og
->
num_v¨übÀs_tŸÆ
; i++)

113 
tŸÆ
 +
	`svÆue_size
(&
ob
->
v¨übÀs
[
i
], 0Ë+ (
svÆue_t
);

116  
tŸÆ
;

117 
	}
}

123 
	$dump°©
(*
t‚
)

125 
FILE
 *
f
;

126 
obje˘_t
 *
ob
;

127 *
‚
;

128 
di•œy_hiddí
;

130 
‚
 = 
	`check_vÆid_∑th
(
t‚
, 
cuºít_obje˘
, "dumpallobj", 1);

132 i‡(!
‚
)

134 
	`debug_mesßge
("Wr⁄gÖ©h '/%s' f‹ wrôög.\n", 
‚
);

137 
f
 = 
	`f›í
(
‚
, "w");

138 i‡(!
f
)

140 
	`îr‹
("C™'àtÿ›í '/%s' f‹ wrôög.\n", 
‚
);

144 
di•œy_hiddí
 = - 1;

145 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
)

147 
tmp
;

149 i‡(
ob
->
Êags
 &
O_HIDDEN
)

151 i‡(
di•œy_hiddí
 == - 1)

153 
di•œy_hiddí
 = 
	`vÆid_hide
(
cuºít_obje˘
);

155 i‡(!
di•œy_hiddí
)

160 i‡(
ob
->
¥og
 && (ob->¥og->
ªf
 =1 || !(ob->
Êags
 &
O_CLONE
) ) )

162 
tmp
 = 
ob
->
¥og
->
tŸÆ_size
;

166 
tmp
 = 0;

168 
	`Ârötf
(
f
, "%-20†%luÑe‡%2d %†%†(%dË%s\n", 
ob
->
«me
, (Ë(
tmp
 + 
	`d©a_size
(obË+ (
obje˘_t
Ë), ob->
ªf
, ob->
Êags
 &
O_HEART_BEAT
 ? "HB" : " ", "--", 0, (ob

169 ->
sw≠_num
 >0Ë? ( (
ob
->
Êags
 &
O_SWAPPED
) ? "SWAPPED(out)": "SWAPPED(in)"): "");

171 
	`f˛o£
(
f
);

172 
	}
}

	@src/efuns_main.c

11 
	~<sys/ty≥s.h
>

12 
	~<ªgex.h
>

13 
	~"°d.h
"

14 
	~"Õc_ö˛.h
"

15 
	~"fûe_ö˛.h
"

16 
	~"mÆloc_ö˛.h
"

17 
	~"fûe.h
"

18 
	~"comm.h
"

19 
	~"•rötf.h
"

20 
	~"backíd.h
"

21 
	~"p‹t.h
"

22 
	~"sw≠.h
"

23 
	~"°r°r.h
"

24 
	~"ŸabÀ.h
"

25 
	~"e›î©‹s.h
"

26 
	~"ª˛aim.h
"

27 
	~"dump°©.h
"

28 
	~"efuns_maö.h
"

29 
	~"debug.h
"

30 
	~"md.h
"

32 
	~"¸y±.h
"

35 #ifde‡
WIN32


36 
	~<dúe˘.h
>

39 
	gˇŒ_‹igö
 = 0;

41 
obje˘_t
 *
	gob
;

43 
d©a_size
(
obje˘_t
 *
ob
);

44 
ªlﬂd_obje˘
(
obje˘_t
 *
obj
);

47 
game_lib_∑th
[];

51 
	#_debug
(
fmt
, 
¨gs
...)

	)

58 #ifde‡
F_GET_CURRENT_SP


59 
	$f_gë_cuºít_•
()

62 
	`put_numbî
–()
•
);

63 
	}
}

66 #ifde‡
F_ALLOCATE


67 
	$f_Æloˇã
()

69 
•
->
u
.
¨r
 = 
	`Æloˇã_¨øy
(•->u.
numbî
);

70 
•
->
ty≥
 = 
T_ARRAY
;

71 
	}
}

75 #ifde‡
F_ALLOCATE_MAPPING


76 
	$f_Æloˇã_m≠pög
()

78 
•
->
ty≥
 = 
T_MAPPING
;

79 
•
->
u
.
m≠
 = 
	`Æloˇã_m≠pög
(•->u.
numbî
);

80 
	}
}

83 #ifde‡
F_CACHE_STATS


84 
	$¥öt_ˇche_°©s
(
outbuf„r_t
 *
ob
)

86 
	`outbuf_add
(
ob
, "QTZ_ServerEngine:Function cache information\n");

87 
	`outbuf_add
(
ob
, "****Copy Right By QTZ*****\n");

88 
	`outbuf_addv
(
ob
, "%% cachêhôs: %10.2f\n", 100 *–()
≠∂y_low_ˇche_hôs
 / 
≠∂y_low_ˇŒ_Ÿhîs
) );

89 
	`outbuf_addv
(
ob
, "ˇŒ_Ÿhîs: %10lu\n", 
≠∂y_low_ˇŒ_Ÿhîs
);

90 
	`outbuf_addv
(
ob
, "ˇchêhôs: %10lu\n", 
≠∂y_low_ˇche_hôs
);

91 
	`outbuf_addv
(
ob
, "ˇchêsize: %10lu\n", 
APPLY_CACHE_SIZE
);

92 
	`outbuf_addv
(
ob
, "¶Ÿ†u£d: %10lu\n", 
≠∂y_low_¶Ÿs_u£d
);

93 
	`outbuf_addv
(
ob
, "%% slŸ†u£d: %10.2f\n", 100 *–()
≠∂y_low_¶Ÿs_u£d
 / 
APPLY_CACHE_SIZE
) );

94 
	`outbuf_addv
(
ob
, "cﬁlisi⁄s: %10lu\n", 
≠∂y_low_cﬁlisi⁄s
);

95 
	`outbuf_addv
(
ob
, "%% cﬁlisi⁄s: %10.2f\n", 100 *–()
≠∂y_low_cﬁlisi⁄s
 / 
≠∂y_low_ˇŒ_Ÿhîs
) );

96 
	}
}

98 
	$f_ˇche_°©s
()

100 
outbuf„r_t
 
ob
;

102 
	`outbuf_zîo
(&
ob
);

103 
	`¥öt_ˇche_°©s
(&
ob
);

104 
	`outbuf_push
(&
ob
);

105 
	}
}

108 #ifde‡
F_CALL_OTHER


110 
	$f_ˇŒ_Ÿhî
()

112 
svÆue_t
 *
¨g
;

113 *
fun˙ame
;

114 
i
;

115 
num_¨g
 = 
°_num_¨g
;

118 i‡(
cuºít_obje˘
->
Êags
 &
O_DESTRUCTED
)

121 
	`p›_n_ñems
(
num_¨g
);

122 
	`push_undeföed
();

125 
¨g
 = 
•
 - 
num_¨g
 + 1;

126 i‡(
¨g
[1].
ty≥
 =
T_STRING
)

128 
fun˙ame
 = 
¨g
[1].
u
.
°rög
;

133 
¨øy_t
 *
v
 = 
¨g
[1].
u
.
¨r
;

134 
svÆue_t
 *
sv
 = 0;

136 
	`check_f‹_de°r
(
v
);

137 i‡––(
i
 = 
v
->
size
Ë< 1Ë|| !–(
sv
 = v->
ôem
)->
ty≥
 =
T_STRING
) )

139 
	`îr‹
("QTZ_ServerEngine:\n Call_other: 1stÉlem ofárray forárg 2 must beá string\n");

141 
fun˙ame
 = 
sv
->
u
.
°rög
;

142 
num_¨g
 = 2+
	`mîge_¨g_li°s
“um_¨g - 2, 
v
, 1);

145 i‡(
¨g
[0].
ty≥
 =
T_OBJECT
)

147 
ob
 = 
¨g
[0].
u
.ob;

149 i‡(
¨g
[0].
ty≥
 =
T_ARRAY
)

151 
¨øy_t
 *
ªt
;

153 
ªt
 = 
	`ˇŒ_Æl_Ÿhî
(
¨g
[0].
u
.
¨r
, 
fun˙ame
, 
num_¨g
 - 2);

154 
	`p›_°ack
();

155 
	`‰ì_¨øy
(
¨g
->
u
.
¨r
);

156 
•
->
u
.
¨r
 = 
ªt
;

161 
obje˘_t
 *
ﬁd_ob
;

162 
ob
 = 
	`föd_obje˘
(
¨g
[0].
u
.
°rög
);

163 i‡(!(
ﬁd_ob
 = 
ob
Ë|| !
	`obje˘_visibÀ
(ob) )

165 
	`debug_mesßge
("[%s]C™'àföd obje˘", 
¨g
[0].
u
.
°rög
);

166 
	`îr‹
("Can't find object\n");

168 
ob
 = 
ﬁd_ob
;

171 
ˇŒ_‹igö
 = 
ORIGIN_CALL_OTHER
;

172 i‡(
	`≠∂y_low
(
fun˙ame
, 
ob
, 
num_¨g
 - 2) == 0)

175 i‡(
	`°rcmp
(
fun˙ame
, "???") != 0)

177 *
fûe
;

178 
löe
;

179 
	`gë_löe_numbî_öfo
(&
fûe
, &
löe
);

180 
	`debug_mesßge
("\n%†%d : obje˘[%s] func[%s]ÇŸÉxi°!\n", 
fûe
, 
löe
, 
ob
->
«me
, 
fun˙ame
);

182 
	`p›_2_ñems
();

183 
	`push_undeföed
();

190 
	`‰ì_svÆue
(--
•
, "f_call_other:1");

191 
	`‰ì_svÆue
(--
•
, "f_call_other:2");

192 *
•
 = *(sp + 2);

194 
	}
}

198 #i‡
deföed
(
F_CALL_STACK
Ë|| deföed(
F_ORIGIN
)

199 *
	$‹igö_«me
(
‹ig
)

202 
i
 = 0;

203 *
‹igös
[] =

207 
‹ig
 >>= 1)

209 
i
++;

211  
‹igös
[
i
];

212 
	}
}

215 #ifde‡
F_CALL_STACK


216 
	$f_ˇŒ_°ack
()

218 
i
, 
n
 = 
c•
 - &
c⁄åﬁ_°ack
[0] + 1;

219 
¨øy_t
 *
ªt
;

221 i‡(
•
->
u
.
numbî
 < 0 || sp->u.number > 3)

223 
	`îr‹
("QTZ_ServerEngine:Firstárgument of call_stack() is wrong.\n");

226 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
n
);

228 
•
->
u
.
numbî
)

231 
ªt
->
ôem
[0].
ty≥
 = 
T_STRING
;

232 
ªt
->
ôem
[0].
subty≥
 = 
STRING_MALLOC
;

233 
ªt
->
ôem
[0].
u
.
°rög
 = 
	`add_¶ash
(
cuºít_¥og
->
«me
);

234 
i
 = 1; i < 
n
; i++)

236 
ªt
->
ôem
[
i
].
ty≥
 = 
T_STRING
;

237 
ªt
->
ôem
[
i
].
subty≥
 = 
STRING_MALLOC
;

238 
ªt
->
ôem
[
i
].
u
.
°rög
 = 
	`add_¶ash
–(
c•
 - i + 1)->
¥og
->
«me
);

242 
ªt
->
ôem
[0].
ty≥
 = 
T_OBJECT
;

243 
ªt
->
ôem
[0].
u
.
ob
 = 
cuºít_obje˘
;

244 
	`add_ªf
(
cuºít_obje˘
, "f_call_stack: curr");

245 
i
 = 1; i < 
n
; i++)

247 
ªt
->
ôem
[
i
].
ty≥
 = 
T_OBJECT
;

248 
ªt
->
ôem
[
i
].
u
.
ob
 = (
c•
 - i + 1)->ob;

249 
	`add_ªf
–(
c•
 - 
i
 + 1)->
ob
, "f_call_stack");

253 
i
 = 0; i < 
n
; i++)

255 
ªt
->
ôem
[
i
].
ty≥
 = 
T_STRING
;

256 i‡––(
c•
 - 
i
)->
‰ameköd
 &
FRAME_MASK
Ë=
FRAME_FUNCTION
)

258 
¥ogøm_t
 *
¥og
 = (
i
 ? (
c•
 - i + 1)->¥og: 
cuºít_¥og
);

259 
ödex
 = (
c•
 - 
i
)->
‰
.
èbÀ_ödex
;

260 
compûî_fun˘i⁄_t
 *
cÂ
 = &
¥og
->
fun˘i⁄_èbÀ
[
ödex
];

262 
ªt
->
ôem
[
i
].
subty≥
 = 
STRING_SHARED
;

263 
ªt
->
ôem
[
i
].
u
.
°rög
 = 
cÂ
->
«me
;

264 
	`ªf_°rög
(
cÂ
->
«me
);

268 
ªt
->
ôem
[
i
].
subty≥
 = 
STRING_CONSTANT
;

269 
ªt
->
ôem
[
i
].
u
.
°rög
 = ( ( (
c•
 - i)->
‰ameköd
 &
FRAME_MASK
Ë=
FRAME_CATCH
) ? "CATCH" : "<function>";

274 
ªt
->
ôem
[0].
ty≥
 = 
T_STRING
;

275 
ªt
->
ôem
[0].
subty≥
 = 
STRING_CONSTANT
;

276 
ªt
->
ôem
[0].
u
.
°rög
 = 
	`‹igö_«me
(
ˇŒî_ty≥
);

278 
i
 = 1; i < 
n
; i++)

280 
ªt
->
ôem
[
i
].
ty≥
 = 
T_STRING
;

281 
ªt
->
ôem
[
i
].
subty≥
 = 
STRING_CONSTANT
;

282 
ªt
->
ôem
[
i
].
u
.
°rög
 = 
	`‹igö_«me
–(
c•
 - i + 1)->
ˇŒî_ty≥
);

286 
	`put_¨øy
(
ªt
);

287 
	}
}

290 #ifde‡
F_CAPITALIZE


291 
	$f_ˇpôÆize
()

293 i‡(
	`i¶owî
(
•
->
u
.
°rög
[0]) )

295 
	`u∆ök_°rög_svÆue
(
•
);

296 
•
->
u
.
°rög
[0] += 'A' - 'a';

298 
	}
}

301 #ifde‡
F_CHILDREN


302 
	$f_chûdªn
()

304 
¨øy_t
 *
vec
;

306 
vec
 = 
	`chûdªn
(
•
->
u
.
°rög
);

307 
	`‰ì_°rög_svÆue
(
•
);

308 
	`put_¨øy
(
vec
);

309 
	}
}

312 #ifde‡
F_CLASSP


313 
	$f_˛as•
()

315 i‡(
•
->
ty≥
 =
T_CLASS
)

317 
	`‰ì_˛ass
(
•
->
u
.
¨r
);

318 *
•
 = 
c⁄°1
;

322 
	`‰ì_svÆue
(
•
, "f_classp");

323 *
•
 = 
c⁄°0
;

325 
	}
}

328 #ifde‡
F_CLEAR_BIT


329 
	$f_˛ór_bô
()

331 *
°r
;

332 
Àn
, 
öd
, 
bô
;

334 i‡(
•
->
u
.
numbî
 > 
MAX_BITS
)

336 
	`îr‹
("QTZ_SîvîEngöe:Fun˘i⁄Ñeque°ed : %d > maximum bôs: %d\n", 
•
->
u
.
numbî
, 
MAX_BITS
);

338 
bô
 = (
•
--)->
u
.
numbî
;

339 i‡(
bô
 < 0)

341 
	`îr‹
("QTZ_ServerEngine:Badárgument 2 function.\n");

343 
öd
 = 
bô
 / 6;

344 
bô
 %= 6;

345 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

346 i‡(
öd
 >
Àn
)

351 
	`u∆ök_°rög_svÆue
(
•
);

352 
°r
 = 
•
->
u
.
°rög
;

354 i‡(
°r
[
öd
] > 0x3f + ' ' || str[ind] < ' ')

356 
	`îr‹
("QTZ_SîvîEngöe:Wr⁄g bôÖ©ã∫ i¿fun˘i⁄ ch¨a˘î %d\n", 
öd
);

358 
°r
[
öd
] = ( (°r[öd] - ' 'Ë&~(1 << 
bô
) ) + ' ';

359 
	}
}

362 #ifde‡
F_CLONEP


363 
	$f_˛⁄ï
()

365 i‡–(
•
->
ty≥
 =
T_OBJECT
Ë&& (•->
u
.
ob
->
Êags
 &
O_CLONE
) )

367 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_clonep");

368 *
•
 = 
c⁄°1
;

372 
	`‰ì_svÆue
(
•
, "f_clonep");

373 *
•
 = 
c⁄°0
;

375 
	}
}

378 #ifde‡
F_CLONE_OBJECT


379 
	$f_˛⁄e_obje˘
()

381 
svÆue_t
 *
¨g
 = 
•
 - 
°_num_¨g
 + 1;

383 
ob
 = 
	`˛⁄e_obje˘
(
¨g
->
u
.
°rög
, 
°_num_¨g
 - 1);

384 
	`‰ì_°rög_svÆue
(
•
);

385 i‡(
ob
)

387 
	`put_uƒe„d_unde°ed_obje˘
(
ob
, "f_clone_object");

391 *
•
 = 
c⁄°0
;

393 
	}
}

396 #ifde‡
F_CP


397 
	$f_˝
()

399 
i
;

401 
i
 = 
	`c›y_fûe
(
•
[ - 1].
u
.
°rög
, sp[0].u.string);

402 
	`‰ì_°rög_svÆue
(
•
--);

403 
	`‰ì_°rög_svÆue
(
•
);

404 
	`put_numbî
(
i
);

405 
	}
}

408 #ifde‡
F_CTIME


409 
	$f_˘ime
()

411 *
˝
, *
∆
, *
p
;

412 
l
;

414 
˝
 = 
	`time_°rög
–(*Ë&(
•
->
u
.
numbî
) );

416 i‡–(
∆
 = 
	`°rchr
(
˝
, '\n') ) )

418 
l
 = 
∆
 - 
˝
;

422 
l
 = 
	`°æí
(
˝
);

425 
p
 = 
	`√w_°rög
(
l
, "f_ctime");

426 
	`°∫˝y
(
p
, 
˝
, 
l
);

427 
p
[
l
] = '\0';

428 
	`put_mÆlo˚d_°rög
(
p
);

429 
	}
}

432 #ifde‡
F_DEEP_INHERIT_LIST


433 
	$f_dìp_öhîô_li°
()

435 
¨øy_t
 *
vec
;

437 #ifde‡
_USE_SWAP_H_


438 i‡(!(
•
->
u
.
ob
->
Êags
 &
O_SWAPPED
) )

440 
vec
 = 
	`dìp_öhîô_li°
(
•
->
u
.
ob
);

444 
vec
 = &
the_nuŒ_¨øy
;

447 
vec
 = 
	`dìp_öhîô_li°
(
•
->
u
.
ob
);

449 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_deep_inherit_list");

450 
	`put_¨øy
(
vec
);

451 
	}
}

454 #ifde‡
DEBUG_MACRO


455 #ifde‡
F_SET_DEBUG_LEVEL


456 
	$f_£t_debug_Àvñ
()

458 
debug_Àvñ
 = (
•
--)->
u
.
numbî
;

459 
	}
}

464 #ifde‡
F_DESTRUCT


465 
	$f_de°ru˘
()

467 
	`de°ru˘_obje˘
(
•
->
u
.
ob
);

468 
•
--;

469 
	}
}

472 #ifde‡
F_DUMPALLOBJ


473 
	$f_dum∑Œobj
()

475 i‡(
°_num_¨g
)

477 
	`dump°©
(
•
->
u
.
°rög
);

478 
	`‰ì_°rög_svÆue
(
•
--);

482 
	`dump°©
("/OBJ_DUMP");

484 
	}
}

487 #ifde‡
F_ERROR


488 
	$f_îr‹
()

490 
l
 = 
	`SVALUE_STRLEN
(
•
);

491 
îr_buf
[2048];

493 i‡(
•
->
u
.
°rög
[
l
 - 1] == '\n')

495 
l
--;

497 i‡(
l
 > 2045)

499 
l
 = 2045;

502 
îr_buf
[0] = '*';

503 
	`°∫˝y
(
îr_buf
 + 1, 
•
->
u
.
°rög
, 
l
);

504 
îr_buf
[
l
 + 1] = '\n';

505 
îr_buf
[
l
 + 2] = 0;

507 
	`îr‹_h™dÀr
(
îr_buf
);

508 
	}
}

512 #ifde‡
F_EXPLODE


513 
	$f_ex∂ode
()

515 
¨øy_t
 *
vec
;

516 
§c_Àn
 = 
	`SVALUE_STRLEN
(
•
 - 1);

517 
£p_Àn
 = 
	`SVALUE_STRLEN
(
•
);

519 
vec
 = 
	`ex∂ode_°rög
–(
•
 - 1)->
u
.
°rög
, 
§c_Àn
, sp->u.°rög, 
£p_Àn
);

520 
	`‰ì_°rög_svÆue
(
•
--);

521 
	`‰ì_°rög_svÆue
(
•
);

522 
	`put_¨øy
(
vec
);

523 
	}
}

526 #ifde‡
F_FILE_NAME


527 
	$f_fûe_«me
()

529 *
ªs
;

532 
ªs
 = (*)
	`add_¶ash
(
•
->
u
.
ob
->
«me
);

533 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_file_name");

534 
	`put_mÆlo˚d_°rög
(
ªs
);

535 
	}
}

538 #ifde‡
F_FILE_SIZE


539 
	$f_fûe_size
()

541 
i
 = 
	`fûe_size
(
•
->
u
.
°rög
);

542 
	`‰ì_°rög_svÆue
(
•
);

543 
	`put_numbî
(
i
);

544 
	}
}

547 #ifde‡
F_FILTER


548 
	$f_fûãr
()

550 
svÆue_t
 *
¨g
 = 
•
 - 
°_num_¨g
 + 1;

552 i‡(
¨g
->
ty≥
 =
T_MAPPING
)

554 
	`fûãr_m≠pög
(
¨g
, 
°_num_¨g
);

558 
	`fûãr_¨øy
(
¨g
, 
°_num_¨g
);

560 
	}
}

563 #ifde‡
F_FIND_OBJECT


564 
	$f_föd_obje˘
()

566 i‡–(
•
--)->
u
.
numbî
)

568 
ob
 = 
	`föd_obje˘
(
•
->
u
.
°rög
);

572 
ob
 = 
	`föd_obje˘2
(
•
->
u
.
°rög
);

574 
	`‰ì_°rög_svÆue
(
•
);

575 i‡(
ob
)

577 
obje˘_t
 *
ﬁd_ob
 = 
ob
;

579 i‡(
	`obje˘_visibÀ
(
ob
) )

582 
	`put_uƒe„d_unde°ed_obje˘
(
ﬁd_ob
, "find_object");

586 *
•
 = 
c⁄°0
;

591 *
•
 = 
c⁄°0
;

593 
	}
}

596 #ifde‡
F_FUNCTION_PROFILE


598 
	$f_fun˘i⁄_¥ofûe
()

600 
¨øy_t
 *
vec
;

601 
m≠pög_t
 *
m≠
;

602 
¥ogøm_t
 *
¥og
;

603 
nf
, 
j
;

605 
ob
 = 
•
->
u
.ob;

607 #ifde‡
_USE_SWAP_H_


608 i‡(
ob
->
Êags
 &
O_SWAPPED
)

610 
	`lﬂd_ob_‰om_sw≠
(
ob
);

613 
¥og
 = 
ob
->prog;

614 
nf
 = 
¥og
->
num_fun˘i⁄s_deföed
;

615 
vec
 = 
	`Æloˇã_em±y_¨øy
(
nf
);

616 
j
 = 0; j < 
nf
; j++)

618 
m≠
 = 
	`Æloˇã_m≠pög
(3);

619 
	`add_m≠pög_∑ú
(
m≠
, "ˇŒs", 
¥og
->
fun˘i⁄_èbÀ
[
j
].
ˇŒs
);

620 
	`add_m≠pög_∑ú
(
m≠
, "£lf", 
¥og
->
fun˘i⁄_èbÀ
[
j
].
£lf
 -Örog->fun˘i⁄_èbÀ[j].
chûdªn
);

621 
	`add_m≠pög_∑ú
(
m≠
, "chûdªn", 
¥og
->
fun˘i⁄_èbÀ
[
j
].
chûdªn
);

622 
	`add_m≠pög_sh¨ed_°rög
(
m≠
, "«me", 
¥og
->
fun˘i⁄_èbÀ
[
j
].
«me
);

623 
vec
->
ôem
[
j
].
ty≥
 = 
T_MAPPING
;

624 
vec
->
ôem
[
j
].
u
.
m≠
 = map;

626 
	`‰ì_obje˘
(
ob
, "f_function_profile");

627 
	`put_¨øy
(
vec
);

628 
	}
}

631 #ifde‡
F_GET_DIR


632 
	$f_gë_dú
()

634 
¨øy_t
 *
vec
;

636 
vec
 = 
	`gë_dú
–(
•
 - 1)->
u
.
°rög
, sp->u.
numbî
);

637 
	`‰ì_°rög_svÆue
(--
•
);

638 i‡(
vec
)

640 
	`put_¨øy
(
vec
);

644 *
•
 = 
c⁄°0
;

646 
	}
}

649 #ifde‡
F_IMPLODE


650 
	$f_im∂ode
()

652 
¨øy_t
 *
¨r
;

653 
Êag
;

654 
svÆue_t
 *
¨gs
;

656 i‡(
°_num_¨g
 == 3)

658 
¨gs
 = (
•
 - 2);

659 i‡(
¨gs
[1].
ty≥
 =
T_STRING
)

661 
	`îr‹
("ThirdárgumentÅo implode() is illegal with implode(array, string)\n");

663 
Êag
 = 1;

667 
¨gs
 = (
•
 - 1);

668 
Êag
 = 0;

670 
¨r
 = 
¨gs
->
u
.arr;

671 
	`check_f‹_de°r
(
¨r
);

673 i‡(
¨gs
[1].
ty≥
 =
T_STRING
)

676 *
°r
;

678 
°r
 = 
	`im∂ode_°rög
(
¨r
, 
•
->
u
.
°rög
, 
	`SVALUE_STRLEN
(sp) );

679 
	`‰ì_°rög_svÆue
(
•
--);

680 
	`‰ì_¨øy
(
¨r
);

681 
	`put_mÆlo˚d_°rög
(
°r
);

686 
fu≈å_t
 *
fu≈
 = 
¨gs
[1].
u
.
Â
;

689 
	`im∂ode_¨øy
(
fu≈
, 
¨r
, 
¨gs
, 
Êag
);

690 
•
--;

691 
	`‰ì_fu≈
(
fu≈
);

692 
	`‰ì_¨øy
(
¨r
);

694 
	}
}

697 #ifde‡
F_INHERITS


698 
	$öhîôs
(
¥ogøm_t
 *
¥og
,Örogøm_à*
thï
)

700 
j
, 
k
 = 
¥og
->
num_öhîôed
;

701 
¥ogøm_t
 *
pg
;

703 
j
 = 0; j < 
k
; j++)

705 i‡–(
pg
 = 
¥og
->
öhîô
[
j
].¥ogË=
thï
)

709 i‡(!
	`°rcmp
(
pg
->
«me
, 
thï
->name) )

713 i‡(
	`öhîôs
(
pg
, 
thï
) )

719 
	}
}

721 
	$f_öhîôs
()

723 
obje˘_t
 *
ob
, *
ba£
;

724 
i
;

726 
ba£
 = (
•
--)->
u
.
ob
;

727 
ob
 = 
	`föd_obje˘2
(
•
->
u
.
°rög
);

729 #ifde‡
_USE_SWAP_H_


730 i‡(!
ob
 || (ob->
Êags
 &
O_SWAPPED
) )

732 i‡(!
ob
)

735 
	`‰ì_obje˘
(
ba£
, "f_inherits");

736 
	`assign_svÆue
(
•
, &
c⁄°0
);

740 #ifde‡
_USE_SWAP_H_


741 i‡(
ba£
->
Êags
 &
O_SWAPPED
)

743 
	`lﬂd_ob_‰om_sw≠
(
ba£
);

746 
i
 = 
	`öhîôs
(
ba£
->
¥og
, 
ob
->prog);

747 
	`‰ì_obje˘
(
ba£
, "f_inherits");

748 
	`‰ì_°rög_svÆue
(
•
);

749 
	`put_numbî
(
i
);

750 
	}
}

753 #ifde‡
F_SHALLOW_INHERIT_LIST


754 
	$f_shÆlow_öhîô_li°
()

756 
¨øy_t
 *
vec
;

758 #ifde‡
_USE_SWAP_H_


759 i‡(!(
•
->
u
.
ob
->
Êags
 &
O_SWAPPED
) )

761 
vec
 = 
	`öhîô_li°
(
•
->
u
.
ob
);

765 
vec
 = &
the_nuŒ_¨øy
;

768 
vec
 = 
	`öhîô_li°
(
•
->
u
.
ob
);

770 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_inherit_list");

771 
	`put_¨øy
(
vec
);

772 
	}
}

775 #ifde‡
F_INTP


776 
	$f_öç
()

778 i‡(
•
->
ty≥
 =
T_NUMBER
)

780 
•
->
u
.
numbî
 = 1;

784 
	`‰ì_svÆue
(
•
, "f_intp");

785 
	`put_numbî
(0);

787 
	}
}

790 #ifde‡
F_FUNCTIONP


791 
	$f_fun˘i⁄p
()

793 
i
;

795 i‡(
•
->
ty≥
 =
T_FUNCTION
)

797 
i
 = 
•
->
u
.
Â
->
hdr
.
ty≥
;

798 i‡(
•
->
u
.
Â
->
hdr
.
¨gs
)

800 
i
 |
FP_HAS_ARGUMENTS
;

802 i‡(
•
->
u
.
Â
->
hdr
.
ow√r
->
Êags
 &
O_DESTRUCTED
)

804 
i
 |
FP_OWNER_DESTED
;

806 
	`‰ì_fu≈
(
•
->
u
.
Â
);

807 
	`put_numbî
(
i
);

810 
	`assign_svÆue
(
•
, &
c⁄°0
);

811 
	}
}

814 #ifde‡
F_KEYS


815 
	$f_keys
()

817 
¨øy_t
 *
vec
;

819 
vec
 = 
	`m≠pög_ödi˚s
(
•
->
u
.
m≠
);

820 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

821 
	`put_¨øy
(
vec
);

822 
	}
}

825 #ifde‡
F_VALUES


826 
	$f_vÆues
()

828 
¨øy_t
 *
vec
;

830 
vec
 = 
	`m≠pög_vÆues
(
•
->
u
.
m≠
);

831 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

832 
	`put_¨øy
(
vec
);

833 
	}
}

836 #ifde‡
F_LOWER_CASE


837 
	$f_lowî_ˇ£
()

839 *
°r
;

841 
°r
 = 
•
->
u
.
°rög
;

843 ; *
°r
; str++)

845 i‡(
	`isuµî
(*
°r
) )

847 
l
 = 
°r
 - 
•
->
u
.
°rög
;

848 
	`u∆ök_°rög_svÆue
(
•
);

849 
°r
 = 
•
->
u
.
°rög
 + 
l
;

850 *
°r
 += 'a' - 'A';

851 
°r
++; *str; str++)

853 i‡(
	`isuµî
(*
°r
) )

855 *
°r
 += 'a' - 'A';

861 
	}
}

864 #ifde‡
F_LPC_INFO


865 
	$f_Õc_öfo
()

867 
outbuf„r_t
 
out
;

869 
öãrÁ˚_t
 **
p
 = 
if_t_¨øy
;

870 
obje˘_t
 *
ob
;

872 
	`outbuf_zîo
(&
out
);

873 
	`outbuf_addv
(&
out
, "%30s Loaded Using compiledÖrogram\n", "Program");

874 *
p
)

876 
	`outbuf_addv
(&
out
, "%30s: ", (*
p
)->
‚ame
);

877 
ob
 = 
	`lookup_obje˘_hash
–(*
p
)->
‚ame
);

878 i‡(
ob
)

880 i‡(
ob
->
Êags
 &
O_COMPILED_PROGRAM
)

882 
	`outbuf_add
(&
out
, " No\n");

884 i‡(
ob
->
Êags
 &
O_SWAPPED
)

886 
	`outbuf_add
(&
out
, " Yes Swapped\n");

888 i‡(
ob
->
¥og
->
¥ogøm_size
 == 0)

890 
	`outbuf_add
(&
out
, " Yes Yes\n");

894 
	`outbuf_add
(&
out
, " Yes No\n");

899 
	`outbuf_add
(&
out
, "Something REALLY wierd happened;ÇoÑecord ofÅhe object.\n");

901 
p
++;

903 
	`outbuf_push
(&
out
);

904 
	}
}

907 #ifde‡
F_MALLOC_STATUS


908 
	$f_mÆloc_°©us
()

910 
outbuf„r_t
 
ob
;

912 
	`outbuf_zîo
(&
ob
);

914 #ifde‡
BSDMALLOC


915 
	`outbuf_add
(&
ob
, "Using BSD malloc");

917 #ifde‡
SMALLOC


918 
	`outbuf_add
(&
ob
, "Using Smalloc");

920 #ifde‡
SYSMALLOC


921 
	`outbuf_add
(&
ob
, "Using system malloc");

923 #ifde‡
DEBUGMALLOC


924 
	`outbuf_add
(&
ob
, ", wrapped with debugmalloc");

926 #ifde‡
WRAPPEDMALLOC


927 
	`outbuf_add
(&
ob
, ", wrapped with wrappedmalloc");

929 
	`outbuf_add
(&
ob
, ".\n");

930 #ifde‡
DO_MSTATS


931 
	`show_m°©s
(&
ob
, "malloc_status()");

933 #i‡(
	`deföed
(
WRAPPEDMALLOC
Ë|| deföed(
DEBUGMALLOC
))

934 
	`dump_mÆloc_d©a
(&
ob
);

936 
	`outbuf_push
(&
ob
);

937 
	}
}

940 #ifde‡
F_MAP_DELETE


941 
	$f_m≠_dñëe
()

943 
	`m≠pög_dñëe
–(
•
 - 1)->
u
.
m≠
, sp);

944 
	`p›_°ack
();

945 #i‚de‡
COMPAT_32


946 
	`‰ì_m≠pög
–(
•
--)->
u
.
m≠
);

948 
	}
}

951 #ifde‡
F_MAPP


952 
	$f_m≠p
()

954 i‡(
•
->
ty≥
 =
T_MAPPING
)

956 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

957 *
•
 = 
c⁄°1
;

961 
	`‰ì_svÆue
(
•
, "f_mapp");

962 *
•
 = 
c⁄°0
;

964 
	}
}

968 #ifde‡
F_MAP


969 
	$f_m≠
()

971 
svÆue_t
 *
¨g
 = 
•
 - 
°_num_¨g
 + 1;

973 i‡(
¨g
->
ty≥
 =
T_MAPPING
)

975 
	`m≠_m≠pög
(
¨g
, 
°_num_¨g
);

977 i‡(
¨g
->
ty≥
 =
T_ARRAY
)

979 
	`m≠_¨øy
(
¨g
, 
°_num_¨g
);

983 
	`m≠_°rög
(
¨g
, 
°_num_¨g
);

985 
	}
}

988 #ifde‡
F_FUNCTION_EXISTS


989 
	$f_fun˘i⁄_exi°s
 ()

991 *
°r
, *
ªs
;

992 
l
;

993 
obje˘_t
 *
ob
;

994 
Êag
 = 0;

996 i‡(
°_num_¨g
 > 1) {

997 i‡(
°_num_¨g
 > 2)

998 
Êag
 = (
•
--)->
u
.
numbî
;

999 
ob
 = (
•
--)->
u
.ob;

1000 
	`‰ì_obje˘
(
ob
, "f_function_exists");

1002 i‡(
cuºít_obje˘
->
Êags
 & 
O_DESTRUCTED
) {

1003 
	`‰ì_°rög_svÆue
(
•
);

1004 *
•
 = 
c⁄°0
;

1007 
ob
 = 
cuºít_obje˘
;

1010 
°r
 = 
	`fun˘i⁄_exi°s
(
•
->
u
.
°rög
, 
ob
, 
Êag
);

1011 
	`‰ì_°rög_svÆue
(
•
);

1012 i‡(
°r
) {

1013 
l
 = 
	`SHARED_STRLEN
(
°r
) - 2;

1014 
ªs
 = 
	`√w_°rög
(
l
 + 1, "function_exists");

1015 
ªs
[0] = '/';

1016 
	`°∫˝y
(
ªs
 + 1, 
°r
, 
l
);

1017 
ªs
[
l
 + 1] = 0;

1019 
•
->
subty≥
 = 
STRING_MALLOC
;

1020 
•
->
u
.
°rög
 = 
ªs
;

1021 } *
•
 = 
c⁄°0
;

1022 
	}
}

1037 #ifde‡
F_MEMBER_ARRAY


1038 
	$f_membî_¨øy
()

1040 
¨øy_t
 *
v
;

1041 
i
;

1043 i‡(
°_num_¨g
 > 2)

1045 
i
 = (
•
--)->
u
.
numbî
;

1046 i‡(
i
 < 0)

1048 
	`bad_¨g
(3, 
F_MEMBER_ARRAY
);

1053 
i
 = 0;

1056 i‡(
•
->
ty≥
 =
T_STRING
)

1058 *
ªs
;

1059 
	`CHECK_TYPES
(
•
 - 1, 
T_NUMBER
, 1, 
F_MEMBER_ARRAY
);

1060 i‡(
i
 > ()
	`SVALUE_STRLEN
(
•
) )

1062 
	`îr‹
("QTZ_ServerEngine:IndexÅo start search is > stringÜength.\n");

1064 i‡–(
ªs
 = 
	`°rchr
(
•
->
u
.
°rög
 + 
i
, (• - 1)->u.
numbî
) ) )

1066 
i
 = 
ªs
 - 
•
->
u
.
°rög
;

1070 
i
 = - 1;

1072 
	`‰ì_°rög_svÆue
(
•
--);

1076 
size
 = (
v
 = 
•
->
u
.
¨r
)->size;

1077 
svÆue_t
 *
sv
;

1078 
svÆue_t
 *
föd
;

1079 
Êí
 = 0;

1081 
föd
 = (
•
 - 1);

1083 i‡(
föd
->
ty≥
 =
T_STRING
)

1086 i‡(
föd
->
subty≥
 &
STRING_COUNTED
)

1088 
Êí
 = 
	`MSTR_SIZE
(
föd
->
u
.
°rög
);

1092 
Êí
 = 0;

1096 ; 
i
 < 
size
; i++)

1098 
föd
->
ty≥
 | (
sv
 = 
v
->
ôem
 + 
i
)->type)

1100 
T_STRING
:

1101 i‡(
Êí
 && (
sv
->
subty≥
 &
STRING_COUNTED
Ë&& fÀ¿!
	`MSTR_SIZE
(sv->
u
.
°rög
) )

1105 i‡(
	`°rcmp
(
föd
->
u
.
°rög
, 
sv
->u.string) )

1110 
T_NUMBER
:

1111 i‡(
föd
->
u
.
numbî
 =
sv
->u.number)

1116 
T_REAL
:

1117 i‡(
föd
->
u
.
ªÆ
 =
sv
->u.real)

1122 
T_ARRAY
:

1123 i‡(
föd
->
u
.
¨r
 =
sv
->u.arr)

1128 
T_OBJECT
:

1130 i‡(
sv
->
u
.
ob
->
Êags
 &
O_DESTRUCTED
)

1132 
	`assign_svÆue
(
sv
, &
c⁄°0
);

1135 i‡(
föd
->
u
.
ob
 =
sv
->u.ob)

1141 
T_MAPPING
:

1142 i‡(
föd
->
u
.
m≠
 =
sv
->u.map)

1147 
T_FUNCTION
:

1148 i‡(
föd
->
u
.
Â
 =
sv
->u.fp)

1153 
T_BUFFER
:

1154 i‡(
föd
->
u
.
buf
 =
sv
->u.buf)

1160 i‡(
sv
->
ty≥
 =
T_OBJECT
 && sv->
u
.
ob
->
Êags
 &
O_DESTRUCTED
)

1162 
	`assign_svÆue
(
sv
, &
c⁄°0
);

1163 i‡(
föd
->
ty≥
 =
T_NUMBER
 && !föd->
u
.
numbî
)

1172 i‡(
i
 =
size
)

1174 
i
 = - 1;

1177 
	`‰ì_¨øy
(
v
);

1178 
	`‰ì_svÆue
(
föd
, "f_member_array");

1179 
•
--;

1181 
	`put_numbî
(
i
);

1182 
	}
}

1185 #ifde‡
F_MKDIR


1186 
	$f_mkdú
()

1188 *
∑th
;

1190 
∑th
 = 
	`check_vÆid_∑th
(
•
->
u
.
°rög
, 
cuºít_obje˘
, "mkdir", 1);

1191 i‡(!
∑th
 || 
	`OS_mkdú
(path, 0770) == - 1)

1193 
	`‰ì_°rög_svÆue
(
•
);

1194 *
•
 = 
c⁄°0
;

1198 
	`‰ì_°rög_svÆue
(
•
);

1199 *
•
 = 
c⁄°1
;

1201 
	}
}

1204 #ifde‡
F_MOVE_OBJECT


1205 
	$f_move_obje˘
()

1207 
obje˘_t
 *
o1
, *
o2
;

1210 i‡(
•
->
ty≥
 =
T_OBJECT
)

1212 
o2
 = 
•
->
u
.
ob
;

1216 i‡(!(
o2
 = 
	`föd_obje˘
(
•
->
u
.
°rög
ËË|| !
	`obje˘_visibÀ
(o2) )

1218 
	`îr‹
("QTZ_ServerEngine: couldÇot find destination\n");

1222 i‡–(
o1
 = 
cuºít_obje˘
)->
Êags
 &
O_DESTRUCTED
)

1224 
	`îr‹
("QTZ_ServerEngine:can't moveá destructed object\n");

1227 
	`move_obje˘
(
o1
, 
o2
);

1228 
	`p›_°ack
();

1229 
	}
}

1232 #ifde‡
F_OBJECTP


1233 
	$f_obje˘p
()

1235 i‡(
•
->
ty≥
 =
T_OBJECT
)

1237 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_objectp");

1238 *
•
 = 
c⁄°1
;

1242 
	`‰ì_svÆue
(
•
, "f_objectp");

1243 *
•
 = 
c⁄°0
;

1245 
	}
}

1248 #ifde‡
F_OPCPROF


1249 
	$f_›˝rof
()

1251 i‡(
°_num_¨g
 == 1)

1253 
	`›cdump
(
•
->
u
.
°rög
);

1254 
	`‰ì_°rög_svÆue
(
•
--);

1258 
	`›cdump
("/OPCPROF");

1260 
	}
}

1263 #ifde‡
F_ORIGIN


1264 
	$f_‹igö
()

1266 
	`push_c⁄°™t_°rög
(
	`‹igö_«me
(
ˇŒî_ty≥
) );

1267 
	}
}

1270 #ifde‡
F_POINTERP


1271 
	$f_poöãΩ
()

1273 i‡(
•
->
ty≥
 =
T_ARRAY
)

1275 
	`‰ì_¨øy
(
•
->
u
.
¨r
);

1276 *
•
 = 
c⁄°1
;

1280 
	`‰ì_svÆue
(
•
, "f_pointerp");

1281 *
•
 = 
c⁄°0
;

1283 
	}
}

1286 #ifde‡
F_PREVIOUS_OBJECT


1287 
	$f_¥evious_obje˘
()

1289 
c⁄åﬁ_°ack_t
 *
p
;

1290 
i
;

1292 i‡–(
i
 = 
•
->
u
.
numbî
) > 0)

1294 i‡(
i
 >
CFG_MAX_CALL_DEPTH
)

1296 
•
->
u
.
numbî
 = 0;

1299 
ob
 = 0;

1300 
p
 = 
c•
;

1303 i‡–(
p
->
‰ameköd
 &
FRAME_OB_CHANGE
Ë&& !(--
i
) )

1305 
ob
 = 
p
->
¥ev_ob
;

1310 --
p
 >
c⁄åﬁ_°ack
);

1312 i‡(
i
 == - 1)

1314 
¨øy_t
 *
v
;

1316 
i
 = 
¥evious_ob
 ? 1 : 0;

1317 
p
 = 
c•
;

1320 i‡–(
p
->
‰ameköd
 &
FRAME_OB_CHANGE
Ë&&Ö->
¥ev_ob
)

1322 
i
++;

1326 --
p
 >
c⁄åﬁ_°ack
);

1327 
v
 = 
	`Æloˇã_em±y_¨øy
(
i
);

1328 
p
 = 
c•
;

1329 i‡(
¥evious_ob
)

1331 i‡(!(
¥evious_ob
->
Êags
 &
O_DESTRUCTED
) )

1333 
v
->
ôem
[0].
ty≥
 = 
T_OBJECT
;

1334 
v
->
ôem
[0].
u
.
ob
 = 
¥evious_ob
;

1335 
	`add_ªf
(
¥evious_ob
, "previous_object(-1)");

1339 
v
->
ôem
[0] = 
c⁄°0
;

1341 
i
 = 1;

1345 
i
 = 0;

1349 i‡–(
p
->
‰ameköd
 &
FRAME_OB_CHANGE
Ë&& (
ob
 =Ö->
¥ev_ob
) )

1351 i‡(!(
ob
->
Êags
 &
O_DESTRUCTED
) )

1353 
v
->
ôem
[
i
].
ty≥
 = 
T_OBJECT
;

1354 
v
->
ôem
[
i
].
u
.
ob
 = ob;

1355 
	`add_ªf
(
ob
, "previous_object(-1)");

1359 
v
->
ôem
[
i
] = 
c⁄°0
;

1361 
i
++;

1365 --
p
 >
c⁄åﬁ_°ack
);

1366 
	`put_¨øy
(
v
);

1369 i‡(
i
 < 0)

1371 
	`îr‹
("QTZ_ServerEngine:BadÇegativeárgumentÅoÖrevious_object()\n");

1375 
ob
 = 
¥evious_ob
;

1377 i‡(!
ob
 || (ob->
Êags
 &
O_DESTRUCTED
) )

1379 
•
->
u
.
numbî
 = 0;

1383 
	`put_uƒe„d_unde°ed_obje˘
(
ob
, "previous_object()");

1385 
	}
}

1388 #ifde‡
F_PRINTF


1389 
	$f_¥ötf
()

1391 i‡(
•
->
ty≥
 =
T_STRING
)

1393 
	`¥ötf
("%s", 
•
->
u
.
°rög
);

1394 
	`‰ì_°rög_svÆue
(
•
);

1395 
•
 = sp - 1;

1397 
	}
}

1400 #ifde‡
F_QUERY_LOAD_AVERAGE


1401 
	$f_quîy_lﬂd_avîage
()

1403 
	`c›y_™d_push_°rög
(
	`quîy_lﬂd_av
() );

1404 
	}
}

1407 #ifde‡
F_GET_VERB


1408 
	$f_gë_vîb
()

1410 i‡(!
œ°_vîb
)

1412 
	`push_numbî
(0);

1415 
	`sh¨e_™d_push_°rög
(
œ°_vîb
);

1416 
	}
}

1419 #ifde‡
F_RANDOM


1420 
	$f_øndom
()

1422 i‡(
•
->
u
.
numbî
 <= 0)

1424 
•
->
u
.
numbî
 = 0;

1427 
•
->
u
.
numbî
 = 
	`øndom_numbî
(sp->u.number);

1428 
	}
}

1431 #ifde‡
F_READ_BYTES


1432 
	$f_ªad_byãs
()

1434 *
°r
;

1435 
°¨t
 = 0, 
Àn
 = 0, 
æí
 = 0, 
num_¨g
 = 
°_num_¨g
;

1436 
svÆue_t
 *
¨g
;

1438 
¨g
 = 
•
 - 
num_¨g
 + 1;

1439 i‡(
num_¨g
 > 1)

1441 
°¨t
 = 
¨g
[1].
u
.
numbî
;

1443 i‡(
num_¨g
 == 3)

1445 
Àn
 = 
¨g
[2].
u
.
numbî
;

1447 
°r
 = 
	`ªad_byãs
(
¨g
[0].
u
.
°rög
, 
°¨t
, 
Àn
, &
æí
);

1448 
	`p›_n_ñems
(
num_¨g
);

1449 i‡(
°r
 == 0)

1451 
	`push_numbî
(0);

1455 
	`push_mÆlo˚d_°rög
(
°r
);

1457 
	}
}

1460 #ifde‡
F_READ_FILE


1461 
	$f_ªad_fûe
()

1463 *
°r
;

1464 
°¨t
, 
Àn
;

1466 i‡(
°_num_¨g
 == 3)

1468 
Àn
 = (
•
--)->
u
.
numbî
;

1472 
Àn
 = 0;

1474 i‡(
°_num_¨g
 > 1)

1476 
°¨t
 = (
•
--)->
u
.
numbî
;

1480 
°¨t
 = 0;

1483 
°r
 = 
	`ªad_fûe
(
•
->
u
.
°rög
, 
°¨t
, 
Àn
);

1484 
	`‰ì_°rög_svÆue
(
•
);

1485 i‡(!
°r
)

1487 *
•
 = 
c⁄°0
;

1491 
•
->
subty≥
 = 
STRING_MALLOC
;

1492 
•
->
u
.
°rög
 = 
°r
;

1494 
	}
}

1497 #ifde‡
F_REGEXP


1498 
	$f_ªgexp
()

1500 
¨øy_t
 *
v
;

1501 
Êag
;

1503 i‡(
°_num_¨g
 > 2)

1505 i‡(!(
•
->
ty≥
 =
T_NUMBER
) )

1507 
	`îr‹
("QTZ_ServerEngine:Bad 3rdárgumentÅo fucnciton\n");

1509 i‡(
•
[ - 2].
ty≥
 =
T_STRING
)

1511 
	`îr‹
("QTZ_ServerEngine:Bad 3rdárgument for function\n");

1513 
Êag
 = (
•
--)->
u
.
numbî
;

1517 
Êag
 = 0;

1519 i‡(
•
[ - 1].
ty≥
 =
T_STRING
)

1521 
Êag
 = 
	`m©ch_sögÀ_ªgexp
–(
•
 - 1)->
u
.
°rög
, sp->u.string);

1522 
	`‰ì_°rög_svÆue
(
•
--);

1523 
	`‰ì_°rög_svÆue
(
•
);

1524 
	`put_numbî
(
Êag
);

1528 
v
 = 
	`m©ch_ªgexp
–(
•
 - 1)->
u
.
¨r
, sp->u.
°rög
, 
Êag
);

1529 
	`‰ì_°rög_svÆue
(
•
--);

1530 
	`‰ì_¨øy
(
•
->
u
.
¨r
);

1531 
•
->
u
.
¨r
 = 
v
;

1533 
	}
}

1536 #ifde‡
F_RENAME


1537 
	$f_ª«me
()

1539 
i
;

1541 
i
 = 
	`do_ª«me
–(
•
 - 1)->
u
.
°rög
, sp->u.°rög, 
F_RENAME
);

1542 
	`‰ì_°rög_svÆue
(
•
--);

1543 
	`‰ì_°rög_svÆue
(
•
);

1544 
	`put_numbî
(
i
);

1545 
	}
}

1549 #ifde‡
F_REPLACE_STRING


1570 
	$f_ª∂a˚_°rög
()

1572 
∂í
, 
æí
, 
dÀn
, 
¶í
, 
fú°
, 
œ°
, 
cur
, 
j
;

1574 *
∑âîn
;

1575 *
ª∂a˚
;

1576 *
§c
, *
d°1
, *
d°2
;

1577 
svÆue_t
 *
¨g
;

1578 
skù_èbÀ
[256];

1579 *
¶imô
 = 0;

1580 *
Êimô
 = 0;

1581 *
˛imô
 = 0;

1582 
¥obe
 = 0;

1583 
skù
 = 0;

1585 
max_°rög_Àngth
 = 200000;

1587 i‡(
°_num_¨g
 > 5)

1589 
	`îr‹
("QTZ_ServerEngine:Too manyárgsÅo function.\n");

1590 
	`p›_n_ñems
(
°_num_¨g
);

1594 
¨g
 = 
•
 - 
°_num_¨g
 + 1;

1595 
§c
 = 
¨g
->
u
.
°rög
;

1596 
fú°
 = 0;

1597 
œ°
 = 0;

1599 i‡(
°_num_¨g
 >= 4)

1601 
	`CHECK_TYPES
–(
¨g
 + 3), 
T_NUMBER
, 4, 
F_REPLACE_STRING
);

1602 
fú°
 = (
¨g
 + 3)->
u
.
numbî
;

1604 i‡(
°_num_¨g
 == 4)

1606 
œ°
 = 
fú°
;

1607 
fú°
 = 0;

1609 i‡(
°_num_¨g
 == 5)

1611 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 5, 
F_REPLACE_STRING
);

1613 
œ°
 = 
•
->
u
.
numbî
;

1617 i‡(!
œ°
)

1619 
œ°
 = 
max_°rög_Àngth
;

1622 i‡(
fú°
 > 
œ°
)

1625 
	`p›_n_ñems
(
°_num_¨g
 - 1);

1628 
∑âîn
 = (
¨g
 + 1)->
u
.
°rög
;

1629 
∂í
 = 
	`SVALUE_STRLEN
(
¨g
 + 1);

1630 i‡(!
∂í
)

1632 
	`p›_n_ñems
(
°_num_¨g
 - 1);

1636 
ª∂a˚
 = (
¨g
 + 2)->
u
.
°rög
;

1637 
æí
 = 
	`SVALUE_STRLEN
(
¨g
 + 2);

1638 
dÀn
 = 0;

1639 
cur
 = 0;

1641 i‡(
æí
 <
∂í
)

1644 
	`u∆ök_°rög_svÆue
(
¨g
);

1645 
§c
 = 
¨g
->
u
.
°rög
;

1650 i‡(
∂í
 > 1)

1653 
j
 = 0; j < 256; j++)

1655 
skù_èbÀ
[
j
] = 
∂í
;

1657 
j
 = 0; j < 
∂í
; j++)

1659 
skù_èbÀ
[()
∑âîn
[
j
]] = 
∂í
 - j - 1;

1661 
¶í
 = 
	`SVALUE_STRLEN
(
¨g
);

1662 
¶imô
 = 
§c
 + 
¶í
;

1663 
Êimô
 = 
¶imô
 - 
∂í
 + 1;

1664 
¥obe
 = 
∂í
 - 1;

1667 i‡(
æí
 <
∂í
)

1670 
d°2
 = 
d°1
 = 
¨g
->
u
.
°rög
;

1672 i‡(
∂í
 > 1)

1675 
§c
 < 
Êimô
)

1677 i‡–(
skù
 = 
skù_èbÀ
[()
§c
[
¥obe
]]) )

1679 
˛imô
 = 
d°2
 + 
skù
; d°2 < climô; *d°2++ = *
§c
++)

1682 i‡(
	`memcmp
(
§c
, 
∑âîn
, 
∂í
) == 0)

1684 
cur
++;

1685 i‡–(
cur
 >
fú°
Ë&& (cu∏<
œ°
) )

1687 i‡(
æí
)

1689 
	`mem˝y
(
d°2
, 
ª∂a˚
, 
æí
);

1690 
d°2
 +
æí
;

1692 
§c
 +
∂í
;

1693 i‡(
cur
 =
œ°
)

1700 
	`mem˝y
(
d°2
, 
§c
, 
∂í
);

1701 
d°2
 +
∂í
;

1702 
§c
 +
∂í
;

1707 *
d°2
++ = *
§c
++;

1710 
	`mem˝y
(
d°2
, 
§c
, 
¶imô
 - src);

1711 
d°2
 +(
¶imô
 - 
§c
);

1712 *
d°2
 = 0;

1713 
¨g
->
u
.
°rög
 = 
	`exãnd_°rög
(
d°1
, 
d°2
 - dst1);

1720 i‡(
æí
)

1722 *
§c
)

1724 i‡(*
§c
 =*
∑âîn
)

1726 
cur
++;

1728 i‡(
cur
 >
fú°
 && cu∏<
œ°
)

1730 *
§c
 = *
ª∂a˚
;

1733 
§c
++;

1739 *
§c
)

1741 i‡(*
§c
++ =*
∑âîn
)

1743 
cur
++;

1744 i‡(
cur
 >
fú°
)

1746 
d°2
 = 
§c
 - 1;

1747 *
§c
)

1749 i‡(*
§c
 =*
∑âîn
)

1751 
cur
++;

1752 i‡(
cur
 <
œ°
)

1754 
§c
++;

1759 *
§c
)

1761 *
d°2
++ = *
§c
++;

1766 *
d°2
++ = *
§c
++;

1768 *
d°2
 = 0;

1769 
¨g
->
u
.
°rög
 = 
	`exãnd_°rög
(
d°1
, 
d°2
 - dst1);

1776 
	`p›_n_ñems
(
°_num_¨g
 - 1);

1781 
d°2
 = 
d°1
 = 
	`√w_°rög
(
max_°rög_Àngth
, "f_replace_string: 2");

1783 i‡(
∂í
 > 1)

1785 
§c
 < 
Êimô
)

1787 i‡–(
skù
 = 
skù_èbÀ
[()
§c
[
¥obe
]]) )

1789 
˛imô
 = 
d°2
 + 
skù
; d°2 < climô; *d°2++ = *
§c
++)

1793 i‡(
	`memcmp
(
§c
, 
∑âîn
, 
∂í
) == 0)

1795 
cur
++;

1796 i‡–(
cur
 >
fú°
Ë&& (cu∏<
œ°
) )

1798 i‡(
max_°rög_Àngth
 - 
dÀn
 <
æí
)

1800 
	`p›_n_ñems
(
°_num_¨g
);

1801 
	`push_svÆue
(&
c⁄°0u
);

1802 
	`FREE_MSTR
(
d°1
);

1805 
	`mem˝y
(
d°2
, 
ª∂a˚
, 
æí
);

1806 
d°2
 +
æí
;

1807 
dÀn
 +
æí
;

1808 
§c
 +
∂í
;

1809 i‡(
cur
 =
œ°
)

1816 
dÀn
 +
∂í
;

1817 i‡(
max_°rög_Àngth
 - 
dÀn
 <= 0)

1819 
	`p›_n_ñems
(
°_num_¨g
);

1820 
	`push_svÆue
(&
c⁄°0u
);

1822 
	`FREE_MSTR
(
d°1
);

1825 
	`mem˝y
(
d°2
, 
§c
, 
∂í
);

1826 
d°2
 +
∂í
;

1827 
§c
 +
∂í
;

1832 i‡(
max_°rög_Àngth
 - 
dÀn
 <= 1)

1834 
	`p›_n_ñems
(
°_num_¨g
);

1835 
	`push_svÆue
(&
c⁄°0u
);

1837 
	`FREE_MSTR
(
d°1
);

1840 *
d°2
++ = *
§c
++;

1841 
dÀn
++;

1844 i‡(
max_°rög_Àngth
 - 
dÀn
 <(
¶imô
 - 
§c
) )

1846 
	`p›_n_ñems
(
°_num_¨g
);

1847 
	`push_svÆue
(&
c⁄°0u
);

1848 
	`FREE_MSTR
(
d°1
);

1851 
	`mem˝y
(
d°2
, 
§c
, 
¶imô
 - src);

1852 
d°2
 +(
¶imô
 - 
§c
);

1858 *
§c
 != '\0')

1860 i‡(*
§c
 =*
∑âîn
)

1862 
cur
++;

1863 i‡(
cur
 >
fú°
 && cu∏<
œ°
)

1865 i‡(
æí
 != 0)

1867 i‡(
max_°rög_Àngth
 - 
dÀn
 <
æí
)

1869 
	`p›_n_ñems
(
°_num_¨g
);

1870 
	`push_svÆue
(&
c⁄°0u
);

1871 
	`FREE_MSTR
(
d°1
);

1874 
	`°∫˝y
(
d°2
, 
ª∂a˚
, 
æí
);

1875 
d°2
 +
æí
;

1876 
dÀn
 +
æí
;

1878 
§c
++;

1882 i‡(
max_°rög_Àngth
 - 
dÀn
 <= 1)

1884 
	`p›_n_ñems
(
°_num_¨g
);

1885 
	`push_svÆue
(&
c⁄°0u
);

1886 
	`FREE_MSTR
(
d°1
);

1889 *
d°2
++ = *
§c
++;

1890 
dÀn
++;

1893 *
d°2
 = '\0';

1895 
	`p›_n_ñems
(
°_num_¨g
);

1899 
	`push_mÆlo˚d_°rög
(
	`exãnd_°rög
(
d°1
, 
d°2
 - dst1) );

1901 
	}
}

1904 
	#ERR_STR_LEN
 256

	)

1905 *
	$_Dofût
(*
msg
, *
∑âîn
, *
ª∂a˚
)

1907 
ªgex_t
 
r
;

1908 
ªgm©ch_t
 
m©ch
;

1909 
ªsu…
[1024];

1910 *
p
, *
t
, 
îrbuf1
[
ERR_STR_LEN
], 
îrbuf2
[ERR_STR_LEN];

1911 
size_t
 
pos
 = 0, 
Àn
 = 
	`°æí
(
ª∂a˚
);

1912 
îr
;

1914 
t
 = 
msg
;

1916 
	`mem£t
(
ªsu…
, 0, (result) );

1918 
îr
 = 
	`ªgcomp
(&
r
, 
∑âîn
, 
REG_EXTENDED
);

1920 i‡(
îr
)

1922 
	`ªgîr‹
(
îr
, &
r
, 
îrbuf1
, (errbuf1) );

1923 
	`¢¥ötf
(
îrbuf2
, 
ERR_STR_LEN
, "QTZ_SîvîEngöe:ªgÉx∞comûêîr‹:|%s|\n", 
∑âîn
);

1924 
	`îr‹
(
îrbuf2
);

1925  
msg
;

1928 
	`ªgexec
(&
r
, 
t
, 1, &
m©ch
, 0) == 0)

1931 
	`mem˝y
(
ªsu…
 + 
pos
, 
t
, 
m©ch
.
rm_so
);

1932 
pos
 +
m©ch
.
rm_so
;

1933 
	`mem˝y
(
ªsu…
 + 
pos
, 
ª∂a˚
, 
Àn
);

1934 
pos
 +
Àn
;

1935 
t
 +
m©ch
.
rm_eo
;

1939 
	`mem˝y
(
ªsu…
 + 
pos
, 
t
, 
	`°æí
(t) );

1941 
Àn
 = 
pos
 + 
	`°æí
(
t
);

1943 
ªsu…
[
Àn
] = '\0';

1945 
p
 = 
	`√w_°rög
(
Àn
, "_Dofilt");

1946 
	`°∫˝y
(
p
, 
ªsu…
, 
Àn
);

1947 
p
[
Àn
] = '\0';

1950 
	`ªg‰ì
(&
r
);

1951  
p
;

1952 
	}
}

1955 
	$f_ª∂a˚_°rög_ªg
()

1957 *
°r
 = 
NULL
, *
∑âîn
 = NULL, *
ª∂a˚
 = NULL;

1958 *
ªsu…
;

1960 
ª∂a˚
 = 
•
->
u
.
°rög
;

1961 
∑âîn
 = (
•
 - 1)->
u
.
°rög
;

1962 
°r
 = (
•
 - 2)->
u
.
°rög
;

1964 
ªsu…
 = 
	`_Dofût
(
°r
, 
∑âîn
, 
ª∂a˚
);

1966 
	`‰ì_°rög_svÆue
(
•
--);

1967 
	`‰ì_°rög_svÆue
(
•
--);

1968 
	`‰ì_°rög_svÆue
(
•
);

1970 
	`put_mÆlo˚d_°rög
(
ªsu…
);

1971 
	}
}

1973 #ifde‡
F_RESTORE_OBJECT


1974 
	$f_ª°‹e_obje˘
()

1976 
Êag
;

1978 
Êag
 = (
°_num_¨g
 > 1Ë? (
•
--)->
u
.
numbî
: 0;

1979 
Êag
 = 
	`ª°‹e_obje˘
(
cuºít_obje˘
, 
•
->
u
.
°rög
, flag);

1980 
	`‰ì_°rög_svÆue
(
•
);

1981 
	`put_numbî
(
Êag
);

1982 
	}
}

1986 #ifde‡
F_RESTORE_VARIABLE


1987 
	$f_ª°‹e_v¨übÀ
()

1989 
svÆue_t
 
v
;

1991 
	`u∆ök_°rög_svÆue
(
•
);

1992 
v
.
ty≥
 = 
T_NUMBER
;

1994 
	`ª°‹e_v¨übÀ
(&
v
, 
•
->
u
.
°rög
);

1995 
	`FREE_MSTR
(
•
->
u
.
°rög
);

1996 *
•
 = 
v
;

1997 
	}
}

2000 #ifde‡
F_RM


2001 
	$f_rm
()

2003 
i
;

2005 
i
 = 
	`ªmove_fûe
(
•
->
u
.
°rög
);

2006 
	`‰ì_°rög_svÆue
(
•
);

2007 
	`put_numbî
(
i
);

2008 
	}
}

2011 #ifde‡
F_RMDIR


2012 
	$f_rmdú
()

2014 *
∑th
;

2016 
∑th
 = 
	`check_vÆid_∑th
(
•
->
u
.
°rög
, 
cuºít_obje˘
, "rmdir", 1);

2017 i‡(!
∑th
 || 
	`rmdú
(path) == - 1)

2019 
	`‰ì_°rög_svÆue
(
•
);

2020 *
•
 = 
c⁄°0
;

2024 
	`‰ì_°rög_svÆue
(
•
);

2025 *
•
 = 
c⁄°1
;

2027 
	}
}

2030 #ifde‡
F_SAVE_OBJECT


2031 
	$f_ßve_obje˘
()

2033 
Êag
;

2035 
Êag
 = (
°_num_¨g
 =2Ë&& (
•
--)->
u
.
numbî
;

2036 
Êag
 = 
	`ßve_obje˘
(
cuºít_obje˘
, 
•
->
u
.
°rög
, flag);

2037 
	`‰ì_°rög_svÆue
(
•
);

2038 
	`put_numbî
(
Êag
);

2039 
	}
}

2042 #ifde‡
F_SAVE_VARIABLE


2043 
	$f_ßve_v¨übÀ
()

2045 *
p
;

2047 
p
 = 
	`ßve_v¨übÀ
(
•
);

2048 
	`p›_°ack
();

2049 
	`push_mÆlo˚d_°rög
(
p
);

2050 
	}
}

2053 #ifde‡
F_SET_EVAL_LIMIT


2057 
	$f_£t_evÆ_limô
()

2059 
•
->
u
.
numbî
)

2062 
•
->
u
.
numbî
 = 
evÆ_co°
 = 
max_co°
;

2065 
•
->
u
.
numbî
 = 
evÆ_co°
;

2068 
•
->
u
.
numbî
 = 
max_co°
;

2071 
max_co°
 = 
•
->
u
.
numbî
;

2074 
	}
}

2077 #ifde‡
F_SET_BIT


2078 
	$f_£t_bô
()

2080 *
°r
;

2081 
Àn
, 
ﬁd_Àn
, 
öd
, 
bô
;

2083 i‡(
•
->
u
.
numbî
 > 
MAX_BITS
)

2086 
	`îr‹
("QTZ_SîvîEngöe:fun˘i⁄ bôÑeque°ed: %d > maximum bôs: %d\n", 
•
->
u
.
numbî
, 
MAX_BITS
);

2088 
bô
 = (
•
--)->
u
.
numbî
;

2089 i‡(
bô
 < 0)

2091 
	`îr‹
("QTZ_ServerEngine:Bad 3rdárgumentÅo function.\n");

2093 
öd
 = 
bô
 / 6;

2094 
bô
 %= 6;

2095 
ﬁd_Àn
 = 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

2096 i‡(
öd
 >
Àn
)

2098 
Àn
 = 
öd
 + 1;

2100 i‡(
öd
 < 
ﬁd_Àn
)

2102 
	`u∆ök_°rög_svÆue
(
•
);

2103 
°r
 = 
•
->
u
.
°rög
;

2107 
°r
 = 
	`√w_°rög
(
Àn
, "f_set_bit: str");

2108 
°r
[
Àn
] = '\0';

2109 i‡(
ﬁd_Àn
)

2111 
	`mem˝y
(
°r
, 
•
->
u
.
°rög
, 
ﬁd_Àn
);

2113 i‡(
Àn
 > 
ﬁd_Àn
)

2115 
	`mem£t
(
°r
 + 
ﬁd_Àn
, ' ', 
Àn
 - old_len);

2117 
	`‰ì_°rög_svÆue
(
•
);

2118 
•
->
subty≥
 = 
STRING_MALLOC
;

2119 
•
->
u
.
°rög
 = 
°r
;

2122 i‡(
°r
[
öd
] > 0x3f + ' ' || str[ind] < ' ')

2124 
	`îr‹
("QTZ_SîvîEngöe:Bad bôÖ©ã∫ i¿th© fu˙ti⁄ ch¨a˘î %d\n", 
öd
);

2126 
°r
[
öd
] = ( (°r[öd] - ' 'Ë| (1 << 
bô
) ) + ' ';

2127 
	}
}

2130 #ifde‡
F_SET_HEART_BEAT


2131 
	$f_£t_hóπ_bót
()

2133 
	`£t_hóπ_bót
(
cuºít_obje˘
, (
•
--)->
u
.
numbî
);

2134 
	}
}

2136 #ifde‡
F_GET_HEART_BEAT


2138 
	$f_gë_hóπ_bót
()

2140 
	`‰ì_obje˘
(
ob
 = 
•
->
u
.ob, "f_get_heart_beat");

2141 
	`put_numbî
(
	`quîy_hóπ_bót
(
ob
) );

2142 
	}
}

2145 #ifde‡
F_SHUTDOWN


2146 
	$f_shutdown
()

2148 
	`shutdownOS
(
°_num_¨g
 ? 
•
->
u
.
numbî
: (*++• = 
c⁄°0
, 0) );

2149 
	}
}

2152 #ifde‡
F_SIZEOF


2153 
	$f_sizeof
()

2155 
i
;

2157 
•
->
ty≥
)

2159 
T_CLASS
:

2160 
i
 = 
•
->
u
.
¨r
->
size
;

2161 
	`‰ì_˛ass
(
•
->
u
.
¨r
);

2163 
T_ARRAY
:

2164 
i
 = 
•
->
u
.
¨r
->
size
;

2165 
	`‰ì_¨øy
(
•
->
u
.
¨r
);

2167 
T_MAPPING
:

2168 
i
 = 
•
->
u
.
m≠
->
cou¡
;

2169 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

2171 
T_BUFFER
:

2172 
i
 = 
•
->
u
.
buf
->
size
;

2173 
	`‰ì_buf„r
(
•
->
u
.
buf
);

2175 
T_STRING
:

2176 
i
 = 
	`SVALUE_STRLEN
(
•
);

2177 
	`‰ì_°rög_svÆue
(
•
);

2180 
i
 = 0;

2181 
	`‰ì_svÆue
(
•
, "f_sizeof");

2183 
•
->
ty≥
 = 
T_NUMBER
;

2184 
•
->
u
.
numbî
 = 
i
;

2185 
	}
}

2188 #ifde‡
F_SPRINTF


2189 
	$f_•rötf
()

2191 *
s
;

2192 
num_¨g
 = 
°_num_¨g
;

2194 
s
 = 
	`°rög_¥öt_f‹m©ãd
–(
•
 - 
num_¨g
 + 1)->
u
.
°rög
,Çum_arg - 1, sp -Çum_arg + 2);

2195 
	`p›_n_ñems
(
num_¨g
);

2197 (++
•
)->
ty≥
 = 
T_STRING
;

2198 i‡(!
s
)

2200 
•
->
subty≥
 = 
STRING_CONSTANT
;

2201 
•
->
u
.
°rög
 = "";

2205 
•
->
subty≥
 = 
STRING_MALLOC
;

2206 
•
->
u
.
°rög
 = 
s
;

2208 
	}
}

2212 #ifde‡
F_STAT


2213 
	$f_°©
()

2215 
°©
 
buf
;

2216 *
∑th
;

2217 
¨øy_t
 *
v
;

2219 
∑th
 = 
	`check_vÆid_∑th
–(--
•
)->
u
.
°rög
, 
cuºít_obje˘
, "stat", 0);

2220 i‡(!
∑th
)

2222 
	`‰ì_°rög_svÆue
(
•
);

2223 *
•
 = 
c⁄°0
;

2225 } i‡(
	`°©
(
∑th
, &
buf
) != - 1)

2227 i‡(
buf
.
°_mode
 &
S_IFREG
)

2230 
v
 = 
	`Æloˇã_em±y_¨øy
(3);

2231 
v
->
ôem
[0].
ty≥
 = 
T_NUMBER
;

2232 
v
->
ôem
[0].
u
.
numbî
 = 
buf
.
°_size
;

2233 
v
->
ôem
[1].
ty≥
 = 
T_NUMBER
;

2234 
v
->
ôem
[1].
u
.
numbî
 = 
buf
.
°_mtime
;

2235 
v
->
ôem
[2].
ty≥
 = 
T_NUMBER
;

2236 
ob
 = 
	`föd_obje˘2
(
∑th
);

2237 i‡(
ob
 && !
	`obje˘_visibÀ
(ob) )

2239 
ob
 = 0;

2241 i‡(
ob
)

2243 
v
->
ôem
[2].
u
.
numbî
 = 
ob
->
lﬂd_time
;

2247 
v
->
ôem
[2].
u
.
numbî
 = 0;

2249 
	`‰ì_°rög_svÆue
(
•
);

2250 
	`put_¨øy
(
v
);

2254 
v
 = 
	`gë_dú
(
•
->
u
.
°rög
, (• + 1)->u.
numbî
);

2255 
	`‰ì_°rög_svÆue
(
•
);

2256 i‡(
v
)

2258 
	`put_¨øy
(
v
);

2262 *
•
 = 
c⁄°0
;

2264 
	}
}

2267 #ifde‡
F_SUBSTR


2268 
	$f_sub°r
()

2270 *
big
, *
lôée
, *
pos
, *
ch
;

2271 
buf
[2];

2272 
i
, 
j
, 
k
;

2273 
bÀn
, 
Œí
;

2275 
•
--;

2276 
big
 = (
•
 - 1)->
u
.
°rög
;

2277 
bÀn
 = 
	`SVALUE_STRLEN
(
•
 - 1);

2278 i‡(
•
->
ty≥
 =
T_NUMBER
)

2280 
lôée
 = 
buf
;

2281 i‡–(
buf
[0] = ()
•
->
u
.
numbî
) )

2283 
Œí
 = 1;

2287 
Œí
 = 0;

2292 
lôée
 = 
•
->
u
.
°rög
;

2293 
Œí
 = 
	`SVALUE_STRLEN
(
•
);

2296 i‡(!
Œí
 || 
bÀn
 <Ülen)

2298 
pos
 = 
NULL
;

2301 i‡(!–(
•
 + 1)->
u
.
numbî
) )

2303 i‡(!
lôée
[1])

2306 
pos
 = 
	`°rchr
(
big
, ()
lôée
[0]);

2310 
pos
 = 
big
; *pos != 0;Öos++)

2312 
ch
 = 
pos
, 
j
 = 0; *ch !0 && j < 
Œí
; ch++, j++)

2314 i‡(*
ch
 !
lôée
[
j
])

2319 i‡(
j
 =
Œí
)

2323 i‡–(Ë*
pos
 > 128 && () *pos < 0XFE)

2326 
pos
++;

2329 i‡(*
pos
 == 0)

2331 
pos
 = 
NULL
;

2339 i‡(!
lôée
[1])

2342 
pos
 = 
	`°ºchr
(
big
, ()
lôée
[0]);

2346 
pos
 = 
NULL
;

2347 
i
 = 
bÀn
; i >
Œí
; i--)

2350 
j
 = 
i
 - 
Œí
, 
k
 = 0; j != i && k <Ülen; j++, k++)

2352 i‡(
big
[
j
] !
lôée
[
k
])

2357 i‡(
k
 =
Œí
)

2359 
pos
 = 
big
 + 
i
 - 
Œí
;

2362 i‡–()
big
[
i
 - 1] > 128 && ()big[i - 1] < 0XFE)

2364 
i
--;

2370 i‡(!
pos
)

2372 
i
 = - 1;

2376 
i
 = (Ë(
pos
 - 
big
);

2378 i‡(
•
->
ty≥
 =
T_STRING
)

2380 
	`‰ì_°rög_svÆue
(
•
);

2382 
	`‰ì_°rög_svÆue
(--
•
);

2383 
	`put_numbî
(
i
);

2384 
	}
}

2387 #ifde‡
F_STRSRCH


2398 
	$f_°r§ch
()

2400 *
big
, *
lôée
, *
pos
;

2401 
buf
[2];

2402 
i
, 
bÀn
, 
Œí
;

2404 
•
--;

2405 
big
 = (
•
 - 1)->
u
.
°rög
;

2406 
bÀn
 = 
	`SVALUE_STRLEN
(
•
 - 1);

2407 i‡(
•
->
ty≥
 =
T_NUMBER
)

2409 
lôée
 = 
buf
;

2410 i‡–(
buf
[0] = ()
•
->
u
.
numbî
) )

2412 
Œí
 = 1;

2416 
Œí
 = 0;

2421 
lôée
 = 
•
->
u
.
°rög
;

2422 
Œí
 = 
	`SVALUE_STRLEN
(
•
);

2425 i‡(!
Œí
 || 
bÀn
 <Ülen)

2427 
pos
 = 
NULL
;

2431 i‡(!–(
•
 + 1)->
u
.
numbî
) )

2433 i‡(!
lôée
[1])

2435 
pos
 = 
	`°rchr
(
big
, ()
lôée
[0]);

2439 
pos
 = (*)
	`_°r°r
(
big
, 
lôée
);

2445 i‡(!
lôée
[1])

2447 
pos
 = 
	`°ºchr
(
big
, ()
lôée
[0]);

2451 
c
 = *
lôée
;

2453 
pos
 = 
big
 + 
bÀn
;

2454 
pos
 -
Œí
;

2459 i‡(*
pos
 =
c
)

2465 --
pos
 >
big
);

2466 i‡(*
pos
 !
c
)

2468 
pos
 = 
NULL
;

2471 
i
 = 1; 
lôée
[i] && (
pos
[i] ==Üittle[i]); i++)

2473 i‡(!
lôée
[
i
])

2479 --
pos
 >
big
)

2484 i‡(!
pos
)

2486 
i
 = - 1;

2490 
i
 = (Ë(
pos
 - 
big
);

2492 i‡(
•
->
ty≥
 =
T_STRING
)

2494 
	`‰ì_°rög_svÆue
(
•
);

2496 
	`‰ì_°rög_svÆue
(--
•
);

2497 
	`put_numbî
(
i
);

2498 
	}
}

2502 #ifde‡
F_STRCMP


2503 
	$f_°rcmp
()

2505 
i
;

2507 
i
 = 
	`°rcmp
–(
•
 - 1)->
u
.
°rög
, sp->u.string);

2508 
	`‰ì_°rög_svÆue
(
•
--);

2509 
	`‰ì_°rög_svÆue
(
•
);

2510 
	`put_numbî
(
i
);

2511 
	}
}

2514 #ifde‡
F_STRINGP


2515 
	$f_°rögp
()

2517 i‡(
•
->
ty≥
 =
T_STRING
)

2519 
	`‰ì_°rög_svÆue
(
•
);

2520 *
•
 = 
c⁄°1
;

2524 
	`‰ì_svÆue
(
•
, "f_stringp");

2525 *
•
 = 
c⁄°0
;

2527 
	}
}

2530 #ifde‡
F_BUFFERP


2531 
	$f_buf„Ω
()

2533 i‡(
•
->
ty≥
 =
T_BUFFER
)

2535 
	`‰ì_buf„r
(
•
->
u
.
buf
);

2536 *
•
 = 
c⁄°1
;

2540 
	`‰ì_svÆue
(
•
, "f_bufferp");

2541 *
•
 = 
c⁄°0
;

2543 
	}
}

2546 #ifde‡
F_SWAP


2547 
	$f_sw≠
()

2549 
obje˘_t
 *
ob
 = 
•
->
u
.ob;

2550 
c⁄åﬁ_°ack_t
 *
p
;

2553 i‡(!(
ob
->
Êags
 &
O_SWAPPED
Ë&& (ob !
cuºít_obje˘
) )

2555 
p
 = 
c•
;Ö >
c⁄åﬁ_°ack
;Ö--)

2556 i‡(
ob
 =
c•
->ob)

2558 
	`p›_°ack
();

2561 ()
	`sw≠
(
•
->
u
.
ob
);

2564 
	`p›_°ack
();

2565 
	}
}

2568 #ifde‡
F_TELL_OBJECT


2569 
	$f_ãŒ_obje˘
()

2571 
	`ãŒ_obje˘
–(
•
 - 1)->
u
.
ob
, sp->u.
°rög
);

2572 
	`‰ì_°rög_svÆue
(
•
--);

2573 
	`p›_°ack
();

2574 
	}
}

2577 #ifde‡
F_TELL_ROOM


2578 
	$f_ãŒ_room
()

2580 
¨øy_t
 *
avoid
;

2581 
num_¨g
 = 
°_num_¨g
;

2582 
svÆue_t
 *
¨g
 = 
•
 - 
num_¨g
 + 1;

2584 i‡(
¨g
->
ty≥
 =
T_OBJECT
)

2586 
ob
 = 
¨g
[0].
u
.ob;

2591 
ob
 = 
	`föd_obje˘
(
¨g
[0].
u
.
°rög
);

2592 i‡(!
ob
 || !
	`obje˘_visibÀ
(ob) )

2594 
	`îr‹
("QTZ_ServerEngine:Bad 1stárgumentÅo function\n");

2598 i‡(
num_¨g
 == 2)

2600 
avoid
 = &
the_nuŒ_¨øy
;

2604 
avoid
 = 
¨g
[2].
u
.
¨r
;

2607 
	`ãŒ_room
(
ob
, &
¨g
[1], 
avoid
);

2608 
	`‰ì_¨øy
(
avoid
);

2609 
	`‰ì_svÆue
(
¨g
 + 1, "f_tell_room");

2610 
	`‰ì_svÆue
(
¨g
, "f_tell_room");

2611 
•
 = 
¨g
 - 1;

2612 
	}
}

2615 #ifde‡
F_TEST_BIT


2616 
	$f_ã°_bô
()

2618 
öd
 = (
•
--)->
u
.
numbî
;

2620 i‡(
öd
 / 6 >()
	`SVALUE_STRLEN
(
•
) )

2622 
	`‰ì_°rög_svÆue
(
•
);

2623 *
•
 = 
c⁄°0
;

2626 i‡(
öd
 < 0)

2628 
	`îr‹
("Bad 2ndárgumentÅo function.\n");

2630 i‡–(
•
->
u
.
°rög
[
öd
 / 6] - ' ') &(1 << (ind % 6) ) )

2632 
	`‰ì_°rög_svÆue
(
•
);

2633 *
•
 = 
c⁄°1
;

2637 
	`‰ì_°rög_svÆue
(
•
);

2638 *
•
 = 
c⁄°0
;

2640 
	}
}

2643 #ifde‡
F_NEXT_BIT


2644 
	$f_√xt_bô
()

2646 
°¨t
 = (
•
--)->
u
.
numbî
;

2647 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

2648 
which
 = 0;

2649 
bô
 = 0;

2650 
vÆue
 = 0;

2652 i‡(!
Àn
 || 
°¨t
 / 6 >=Üen)

2654 
	`‰ì_°rög_svÆue
(
•
);

2655 
	`put_numbî
( - 1);

2659 i‡(
°¨t
 > 0)

2661 i‡(
°¨t
 % 6 == 5)

2663 
which
 = (
°¨t
 / 6) + 1;

2664 
vÆue
 = 
•
->
u
.
°rög
[
which
] - ' ';

2669 
which
 = 
°¨t
 / 6;

2670 
bô
 = 0x3‡- ( (1 << ( (
°¨t
 % 6) + 1) ) - 1);

2671 
vÆue
 = (
•
->
u
.
°rög
[
which
] - ' 'Ë&
bô
;

2676 
which
 = 0;

2677 
vÆue
 = *
•
->
u
.
°rög
 - ' ';

2682 i‡(
vÆue
)

2684 i‡(
vÆue
 &0x07)

2686 i‡(
vÆue
 &0x01)

2688 
bô
 = 
which
 * 6;

2690 i‡(
vÆue
 &0x02)

2692 
bô
 = 
which
 * 6+1;

2694 i‡(
vÆue
 &0x04)

2696 
bô
 = 
which
 * 6+2;

2700 i‡(
vÆue
 &0x38)

2702 i‡(
vÆue
 &0x08)

2704 
bô
 = 
which
 * 6+3;

2706 i‡(
vÆue
 &0x10)

2708 
bô
 = 
which
 * 6+4;

2710 i‡(
vÆue
 &0x20)

2712 
bô
 = 
which
 * 6+5;

2717 
which
++;

2718 i‡(
which
 =
Àn
)

2720 
bô
 = - 1;

2723 
vÆue
 = 
•
->
u
.
°rög
[
which
] - ' ';

2726 
	`‰ì_°rög_svÆue
(
•
);

2727 
	`put_numbî
(
bô
);

2728 
	}
}

2731 #ifde‡
F_THIS_OBJECT


2732 
	$f_this_obje˘
()

2734 i‡(
cuºít_obje˘
->
Êags
 &
O_DESTRUCTED
)

2737 *++
•
 = 
c⁄°0
;

2741 
	`push_obje˘
(
cuºít_obje˘
);

2743 
	}
}

2746 #ifde‡
F_THROW


2747 
	$f_throw
()

2749 
	`‰ì_svÆue
(&
ˇtch_vÆue
, "f_throw");

2750 
ˇtch_vÆue
 = *
•
--;

2751 
	`throw_îr‹
();

2752 
	}
}

2755 #ifde‡
F_TIME


2756 
	$f_time
()

2758 
	`push_numbî
(
cuºít_time
);

2759 
	}
}

2762 #ifde‡
F_TO_FLOAT


2763 
	$f_to_Êﬂt
()

2765 
ãmp
 = 0;

2767 
•
->
ty≥
)

2769 
T_NUMBER
:

2770 
•
->
ty≥
 = 
T_REAL
;

2771 
•
->
u
.
ªÆ
 = ()•->u.
numbî
;

2773 
T_STRING
:

2774 
	`ssˇnf
(
•
->
u
.
°rög
, "%lf", &
ãmp
);

2775 
	`‰ì_°rög_svÆue
(
•
);

2776 
•
->
ty≥
 = 
T_REAL
;

2777 
•
->
u
.
ªÆ
 = 
ãmp
;

2779 
	}
}

2782 #ifde‡
F_TO_INT


2783 
	$f_to_öt
()

2785 
•
->
ty≥
)

2787 
T_REAL
:

2788 
•
->
ty≥
 = 
T_NUMBER
;

2789 
•
->
u
.
numbî
 = ()•->u.
ªÆ
;

2791 
T_STRING
:

2793 
ãmp
;

2795 
ãmp
 = 
	`©oi
(
•
->
u
.
°rög
);

2796 
	`‰ì_°rög_svÆue
(
•
);

2797 
•
->
u
.
numbî
 = 
ãmp
;

2798 
•
->
ty≥
 = 
T_NUMBER
;

2801 
T_BUFFER
:

2802 i‡(
•
->
u
.
buf
->
size
 < () )

2804 
	`‰ì_buf„r
(
•
->
u
.
buf
);

2805 *
•
 = 
c⁄°0
;

2809 
ho°öt
, 
√töt
;

2811 
	`mem˝y
–(*Ë&
√töt
, 
•
->
u
.
buf
->
ôem
, () );

2812 
ho°öt
 = 
	`¡ohl
(
√töt
);

2813 
	`‰ì_buf„r
(
•
->
u
.
buf
);

2814 
	`put_numbî
(
ho°öt
);

2817 
	}
}

2820 #ifde‡
F_TYPEOF


2821 
	$f_ty≥of
()

2823 *
t
 = 
	`ty≥_«me
(
•
->
ty≥
);

2825 
	`‰ì_svÆue
(
•
, "f_typeof");

2826 
	`put_c⁄°™t_°rög
(
t
);

2827 
	}
}

2830 #ifde‡
F_UNDEFINEDP


2831 
	$f_undeföedp
()

2833 i‡(
•
->
ty≥
 =
T_NUMBER
)

2835 i‡(!
•
->
u
.
numbî
 && (•->
subty≥
 =
T_UNDEFINED
) )

2837 *
•
 = 
c⁄°1
;

2841 *
•
 = 
c⁄°0
;

2846 
	`‰ì_svÆue
(
•
, "f_undefinedp");

2847 *
•
 = 
c⁄°0
;

2849 
	}
}

2852 #ifde‡
F_UPTIME


2853 
	$f_u±ime
()

2855 
	`push_numbî
(
cuºít_time
 - 
boŸ_time
);

2856 
	}
}

2859 #ifde‡
F_VIRTUALP


2860 
	$f_vútuÆp
()

2862 
i
;

2864 
i
 = ()
•
->
u
.
ob
->
Êags
 &
O_VIRTUAL
;

2865 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_virtualp");

2866 
	`put_numbî
(
i
 != 0);

2867 
	}
}

2870 #ifde‡
F_WRITE_BYTES


2871 
	$f_wrôe_byãs
()

2873 
i
 = 0;

2875 
•
->
ty≥
)

2877 
T_NUMBER
:

2879 
√töt
;

2880 *
√tbuf
;

2882 i‡(!
•
->
u
.
numbî
)

2884 
	`bad_¨g
(3, 
F_WRITE_BYTES
);

2886 
√töt
 = 
	`ht⁄l
(
•
->
u
.
numbî
);

2888 
√tbuf
 = (*Ë&
√töt
;

2889 
i
 = 
	`wrôe_byãs
–(
•
 - 2)->
u
.
°rög
, (• - 1)->u.
numbî
, 
√tbuf
, () );

2893 
T_BUFFER
:

2895 
i
 = 
	`wrôe_byãs
–(
•
 - 2)->
u
.
°rög
, (• - 1)->u.
numbî
, (*)•->u.
buf
->
ôem
, sp->u.buf->
size
);

2899 
T_STRING
:

2901 
i
 = 
	`wrôe_byãs
–(
•
 - 2)->
u
.
°rög
, (• - 1)->u.
numbî
, sp->u.°rög, 
	`SVALUE_STRLEN
(sp) );

2907 
	`bad_¨gumít
(
•
, 
T_BUFFER
 | 
T_STRING
 | 
T_NUMBER
, 3, 
F_WRITE_BYTES
);

2910 
	`‰ì_svÆue
(
•
--, "f_write_bytes");

2911 
	`‰ì_°rög_svÆue
(--
•
);

2912 
	`put_numbî
(
i
);

2913 
	}
}

2916 #ifde‡
F_WRITE_FILE


2917 
	$f_wrôe_fûe
()

2919 
Êags
 = 0;

2921 i‡(
°_num_¨g
 == 3)

2923 
Êags
 = (
•
--)->
u
.
numbî
;

2925 
Êags
 = 
	`wrôe_fûe
–(
•
 - 1)->
u
.
°rög
, sp->u.string, flags);

2926 
	`‰ì_°rög_svÆue
(
•
--);

2927 
	`‰ì_°rög_svÆue
(
•
);

2928 
	`put_numbî
(
Êags
);

2929 
	}
}

2932 #ifde‡
F_DUMP_FILE_DESCRIPTORS


2933 
	$f_dump_fûe_des¸ùt‹s
()

2935 
outbuf„r_t
 
out
;

2937 
	`outbuf_zîo
(&
out
);

2938 
	`dump_fûe_des¸ùt‹s
(&
out
);

2939 
	`outbuf_push
(&
out
);

2940 
	}
}

2943 #ifde‡
F_RECLAIM_OBJECTS


2944 
	$f_ª˛aim_obje˘s
()

2946 
	`push_numbî
(
	`ª˛aim_obje˘s
() );

2947 
	}
}

2950 #ifde‡
F_MEMORY_INFO


2951 
	$f_mem‹y_öfo
()

2953 
mem
;

2955 i‡(
°_num_¨g
 == 0)

2957 
ªs
, 
tŸ
;

2959 i‡(
ª£rved_¨ó
)

2961 
ªs
 = 
RESERVED_SIZE
;

2965 
ªs
 = 0;

2967 
tŸ
 = 
tŸÆ_¥og_block_size
 +

2968 #ifde‡
ARRAY_STATS


2969 
tŸÆ_¨øy_size
 +

2971 
tŸÆ_m≠pög_size
 + 
tŸ_Æloc_obje˘_size
 + 
tŸ_Æloc_£¡í˚
 *(
£¡í˚_t
Ë+ 
tŸÆ_u£rs
 *(
öãø˘ive_t
Ë+ 
	`show_ŸabÀ_°©us
(0, - 1Ë+ 
	`hóπ_bót_°©us
(0, - 1Ë+ 
	`add_°rög_°©us
(0, - 1Ë+ 
ªs
;

2972 
	`push_numbî
(
tŸ
);

2975 i‡(
•
->
ty≥
 !
T_OBJECT
)

2977 
	`bad_¨gumít
(
•
, 
T_OBJECT
, 1, 
F_MEMORY_INFO
);

2979 
ob
 = 
•
->
u
.ob;

2980 i‡(
ob
->
¥og
 && (ob->¥og->
ªf
 =1 || !(ob->
Êags
 &
O_CLONE
) ) )

2982 
mem
 = 
ob
->
¥og
->
tŸÆ_size
;

2986 
mem
 = 0;

2988 
mem
 +(
	`d©a_size
(
ob
Ë+ (
obje˘_t
) );

2989 
	`‰ì_obje˘
(
ob
, "f_memory_info");

2990 
	`put_numbî
(
mem
);

2991 
	}
}

2994 #ifde‡
F_FLOATP


2995 
	$f_Êﬂç
()

2997 i‡(
•
->
ty≥
 =
T_REAL
)

2999 
•
->
ty≥
 = 
T_NUMBER
;

3000 
•
->
u
.
numbî
 = 1;

3004 
	`‰ì_svÆue
(
•
, "f_floatp");

3005 *
•
 = 
c⁄°0
;

3007 
	}
}

3010 #ifde‡
F_SAVE_FUNC


3011 
	$f_ßve_func
()

3013 i‡(
FP
 !
NULL
)

3015 
	`‰ì_fu≈
(
FP
);

3018 
FP
 = (
•
)->
u
.
Â
;

3020 
	`put_numbî
(
FP
->
hdr
.
ªf
);

3021 
	}
}

3025 #ifde‡
F_RUN_FUNC


3026 
	$f_run_func
()

3028 
svÆue_t
 *
v
;

3030 i‡(
FP
 =
NULL
)

3032 
	`p›_n_ñems
(
°_num_¨g
);

3033 
•
++;

3034 *
•
 = 
c⁄°0
;

3038 
v
 = 
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
FP
, 
°_num_¨g
);

3039 
•
++;

3040 i‡(
v
 =
NULL
)

3042 *
•
 = 
c⁄°0
;

3046 *
•
 = *
v
;

3048 
	}
}

3051 #ifde‡
F_ALLOCATE_BUFFER


3052 
	$f_Æloˇã_buf„r
()

3054 
buf„r_t
 *
buf
;

3056 
•
--;

3057 
buf
 = 
	`Æloˇã_buf„r
(
•
->
u
.
numbî
);

3058 i‡(
buf
)

3060 
	`p›_°ack
();

3062 
	`push_ª„d_buf„r
(
buf
);

3066 
	`assign_svÆue
(
•
, &
c⁄°0
);

3068 
	}
}

3072 #ifde‡
F_READ_BUFFER


3073 
	$f_ªad_buf„r
()

3075 *
°r
;

3076 
°¨t
 = 0, 
Àn
 = 0, 
æí
 = 0, 
num_¨g
 = 
°_num_¨g
;

3077 
‰om_fûe
 = 0;

3078 
svÆue_t
 *
¨g
 = 
•
 - 
num_¨g
 + 1;

3080 i‡(
num_¨g
 > 1)

3082 
°¨t
 = 
¨g
[1].
u
.
numbî
;

3083 i‡(
num_¨g
 == 3)

3085 
Àn
 = 
¨g
[2].
u
.
numbî
;

3088 i‡(
¨g
[0].
ty≥
 =
T_STRING
)

3090 
‰om_fûe
 = 1;

3091 
°r
 = 
	`ªad_byãs
(
¨g
[0].
u
.
°rög
, 
°¨t
, 
Àn
, &
æí
);

3096 
°r
 = 
	`ªad_buf„r
(
¨g
[0].
u
.
buf
, 
°¨t
, 
Àn
, &
æí
);

3098 
	`p›_n_ñems
(
num_¨g
);

3099 i‡(
°r
 == 0)

3101 
	`push_numbî
(0);

3103 i‡(
‰om_fûe
)

3106 
buf„r_t
 *
buf
;

3108 
buf
 = 
	`Æloˇã_buf„r
(
æí
);

3109 
	`mem˝y
(
buf
->
ôem
, 
°r
, 
æí
);

3110 (++
•
)->
u
.
buf
 = buf;

3111 
•
->
ty≥
 = 
T_BUFFER
;

3112 
	`FREE_MSTR
(
°r
);

3117 
	`push_mÆlo˚d_°rög
(
°r
);

3119 
	}
}

3122 #ifde‡
F_WRITE_BUFFER


3123 
	$f_wrôe_buf„r
()

3125 
i
 = 0;

3127 i‡–(
•
 - 2)->
ty≥
 =
T_STRING
)

3129 
	`f_wrôe_byãs
();

3133 
•
->
ty≥
)

3135 
T_NUMBER
:

3137 
√töt
;

3138 *
√tbuf
;

3140 
√töt
 = 
	`ht⁄l
(
•
->
u
.
numbî
);

3142 
√tbuf
 = (*Ë&
√töt
;

3143 
i
 = 
	`wrôe_buf„r
–(
•
 - 2)->
u
.
buf
, (• - 1)->u.
numbî
, 
√tbuf
, () );

3147 
T_BUFFER
:

3149 
i
 = 
	`wrôe_buf„r
–(
•
 - 2)->
u
.
buf
, (• - 1)->u.
numbî
, (*)•->u.buf->
ôem
, sp->u.buf->
size
);

3153 
T_STRING
:

3155 
i
 = 
	`wrôe_buf„r
–(
•
 - 2)->
u
.
buf
, (• - 1)->u.
numbî
, sp->u.
°rög
, 
	`SVALUE_STRLEN
(sp) );

3161 
	`bad_¨gumít
(
•
, 
T_BUFFER
 | 
T_STRING
 | 
T_NUMBER
, 3, 
F_WRITE_BUFFER
);

3164 
	`‰ì_svÆue
(
•
--, "f_write_buffer");

3165 
	`‰ì_svÆue
(--
•
, "f_write_buffer");

3167 
	`put_numbî
(
i
);

3168 
	}
}

3173 
	$f_md5_hexdige°
()

3175 *
öput_°r
 = 0, *
p
 = 0;

3176 
buf
[17];

3178 
öput_°r
 = 
•
->
u
.
°rög
;

3180 
	`md5_dige°
(
buf
, 
öput_°r
, 
	`°æí
(input_str) );

3182 
buf
[16] = 0;

3183 
p
 = 
	`√w_°rög
(32, "f_md5_hexdigest");

3185 
	`hexícode
(
buf
, 16, 
p
);

3186 
p
[32] = '\0';

3188 
	`put_mÆlo˚d_°rög
(
p
);

3189 
	}
}

3191 #ifde‡
F_KEYS_BY_VALUE


3192 
	$f_keys_by_vÆue
()

3194 
i
,
j
,
m
,
n
;

3195 
svÆue_t
 
sv_Tmp
,*
sv_K
,*
sv_V
;

3196 
¨øy_t
 *
vec_K
,*
vec_V
;

3198 
vec_K
 = 
	`m≠pög_ödi˚s
(
•
->
u
.
m≠
);

3199 
vec_V
 = 
	`m≠pög_vÆues
(
•
->
u
.
m≠
);

3200 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

3202 
m
 = 
vec_K
->
size
;

3203 
n
 = 
vec_V
->
size
;

3204 i‡–
m
 !
n
 )

3206 
	`put_numbî
(0);

3210 
sv_K
 = 
vec_K
->
ôem
;

3211 
sv_V
 = 
vec_V
->
ôem
;

3212 
i
=
n
-1;i>0;i--)

3214 
j
=0;j<
i
;j++)

3216 i‡–
sv_V
[
j
].
u
.
numbî
 > sv_V[j+1].u.number )

3218 
sv_Tmp
 = 
sv_V
[
j
];

3219 
sv_V
[
j
] = sv_V[j+1];

3220 
sv_V
[
j
+1] = 
sv_Tmp
;

3222 
sv_Tmp
 = 
sv_K
[
j
];

3223 
sv_K
[
j
] = sv_K[j+1];

3224 
sv_K
[
j
+1] = 
sv_Tmp
;

3229 
	`put_¨øy
(
vec_K
);

3230 
	}
}

3237 
	$f_os_comm™d
()

3240 *
cmd
 = (
•
--)->
u
.
°rög
;

3241 *
∑øm
 = (
•
--)->
u
.
°rög
;

3242 *
s¸ùt
 = (
•
--)->
u
.
°rög
;

3243 
fuŒ_∑th
[256];

3245 i‡(
	`°rcmp
(
cmd
, "") == 0) {

3246 
	`¢¥ötf
(
fuŒ_∑th
, 256, "%s%†%s", 
game_lib_∑th
, 
s¸ùt
, 
∑øm
);

3248 
	`¢¥ötf
(
fuŒ_∑th
, 256, "%†%s%†%s", 
cmd
, 
game_lib_∑th
, 
s¸ùt
, 
∑øm
);

3251 
	`debug_mesßge
("excuã cmd: %s\n", 
fuŒ_∑th
);

3253 
	`sy°em
(
fuŒ_∑th
);

3265 
	`‰ì_°rög_svÆue
(
•
 + 3);

3266 
	`‰ì_°rög_svÆue
(
•
 + 2);

3267 
	`‰ì_°rög_svÆue
(
•
 + 1);

3268 
	}
}

3270 * 
c⁄fig_fûe
;

3271 
	$f_gë_c⁄fig_fûe
()

3273 i‡–
c⁄fig_fûe
 =
NULL
)

3275 
	`c›y_™d_push_°rög
( "" );

3279 
	`c›y_™d_push_°rög
–
c⁄fig_fûe
 );

3281 
	}
}

3283 
auth_Êag
;

3284 
	$f_is_auth_£rvî
()

3286 
	`push_numbî
(
auth_Êag
);

3287 
	}
}

3289 #ifde‡
F_LPC_GC


3290 
ªmove_de°ru˘ed_obje˘s
();

3291 
obje˘_t
 *
obj_li°_de°ru˘
;

3292 
	$f_Õc_gc
()

3294 
∑øm
 = (
•
--)->
u
.
numbî
;

3297 ()
∑øm
;

3299 i‡–
obj_li°_de°ru˘
 )

3301 
	`ªmove_de°ru˘ed_obje˘s
();

3303 
	}
}

3307 
	$f_fs_mem‹y_öfo
()

3309 
outbuf„r_t
 
out
;

3310 
ªs
, 
tŸ
 = 0;

3311 
tmp
;

3313 
	`outbuf_zîo
(&
out
);

3316 i‡(
ª£rved_¨ó
)

3318 
ªs
 = 
RESERVED_SIZE
;

3322 
ªs
 = 0;

3324 
tmp
 = 
tŸÆ_¥og_block_size
;

3326 
	`outbuf_addv
(&
out
, "tŸÆ_¥og_block_sizê%d\n", 
tmp
);

3328 
tŸ
 +
tmp
;

3329 #ifde‡
ARRAY_STATS


3330 
tmp
 = 
tŸÆ_¨øy_size
;

3331 
	`outbuf_addv
(&
out
, "tŸÆ_¨øy_sizê%d\n", 
tmp
);

3332 
tŸ
 +
tmp
;

3334 
tmp
 = 
tŸÆ_m≠pög_size
 ;

3335 
	`outbuf_addv
(&
out
, "tŸÆ_m≠pög_sizê%d\n", 
tmp
);

3336 
tŸ
 +
tmp
;

3338 
tmp
 = 
tŸ_Æloc_obje˘_size
;

3339 
	`outbuf_addv
(&
out
, "tŸ_Æloc_obje˘_sizê%d\n", 
tmp
);

3340 
tŸ
 +
tmp
;

3342 
tmp
 = 
tŸ_Æloc_£¡í˚
 *(
£¡í˚_t
) ;

3343 
	`outbuf_addv
(&
out
, "tŸ_Æloc_£¡í˚ *sizeof(£¡í˚_tË%d\n", 
tmp
);

3344 
tŸ
 +
tmp
;

3346 
tmp
 = 
tŸÆ_u£rs
 *(
öãø˘ive_t
);

3347 
	`outbuf_addv
(&
out
, "tŸÆ_u£r†*sizeof(öãø˘ive_tË%d\n", 
tmp
);

3348 
tŸ
 +
tmp
;

3350 
tmp
 = 
	`show_ŸabÀ_°©us
(&
out
, 1) ;

3351 
	`outbuf_addv
(&
out
, "show_ŸabÀ_°©us(&out, 1Ë%d\n", 
tmp
);

3352 
tŸ
 +
tmp
;

3354 
tmp
 = 
	`hóπ_bót_°©us
(&
out
, 1) ;

3355 
	`outbuf_addv
(&
out
, "hóπ_bót_°©us(&out, 1Ë%d\n", 
tmp
);

3356 
tŸ
 +
tmp
;

3358 
tmp
 = 
	`add_°rög_°©us
(&
out
, 1) ;

3359 
	`outbuf_addv
(&
out
, "add_°rög_°©us(&out, 1Ë%d\n", 
tmp
);

3360 
tŸ
 +
tmp
;

3362 
tmp
 = 
ªs
;

3363 
	`outbuf_addv
(&
out
, "ª†%d\n", 
tmp
);

3364 
tŸ
 +
tmp
;

3366 
	`outbuf_addv
(&
out
, "================================================================================\n");

3368 
	`outbuf_addv
(&
out
, "tŸ = %d\n", 
tŸ
);

3370 
	`outbuf_push
(&
out
);

3373 
	}
}

	@src/efuns_port.c

10 
	~"°d.h
"

11 
	~"Õc_ö˛.h
"

12 
	~"fûe_ö˛.h
"

13 
	~"debug.h
"

14 
	~"löt.h
"

15 
	~"ö˛ude/loˇ…ime.h
"

16 
	~"p‹t.h
"

17 
	~"¸y±.h
"

20 #i‡(
deföed
(
TIMES
Ë&& !deföed(
RUSAGE
))

22 
	~<limôs.h
>

25 #ifde‡
F_CRYPT


26 
	#SALT_LEN
 8

	)

28 
	$f_¸y±
()

30 *
ªs
, *
p
, 
ß…
[
SALT_LEN
 + 1];

31 *
choi˚
 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./";

33 i‡(
•
->
ty≥
 =
T_STRING
 && 
	`SVALUE_STRLEN
(sp) >= 2)

35 
p
 = 
•
->
u
.
°rög
;

39 
i
;

41 
i
 = 0; i < 
SALT_LEN
; i++)

43 
ß…
[
i
] = 
choi˚
[
	`øndom_numbî
(
	`°æí
(choice) )];

46 
ß…
[
SALT_LEN
] = 0;

47 
p
 = 
ß…
;

50 
ªs
 = 
	`°rög_c›y
(
	`CRYPT
–(
•
 - 1)->
u
.
°rög
, 
p
), "f_crypt");

51 
	`p›_°ack
();

52 
	`‰ì_°rög_svÆue
(
•
);

53 
•
->
subty≥
 = 
STRING_MALLOC
;

54 
•
->
u
.
°rög
 = 
ªs
;

55 
	}
}

58 #ifde‡
F_OLDCRYPT


59 
	$f_ﬁd¸y±
()

61 *
ªs
, 
ß…
[3];

62 *
choi˚
 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./";

64 i‡(
•
->
ty≥
 =
T_STRING
 && 
	`SVALUE_STRLEN
(sp) >= 2)

66 
ß…
[0] = 
•
->
u
.
°rög
[0];

67 
ß…
[1] = 
•
->
u
.
°rög
[1];

68 
	`‰ì_°rög_svÆue
(
•
--);

72 
ß…
[0] = 
choi˚
[
	`øndom_numbî
(
	`°æí
(choice) )];

73 
ß…
[1] = 
choi˚
[
	`øndom_numbî
(
	`°æí
(choice) )];

74 
	`p›_°ack
();

76 
ß…
[2] = 0;

77 
ªs
 = 
	`°rög_c›y
(
	`CRYPT
(
•
->
u
.
°rög
, 
ß…
), "f_crypt");

78 
	`‰ì_°rög_svÆue
(
•
);

79 
•
->
subty≥
 = 
STRING_MALLOC
;

80 
•
->
u
.
°rög
 = 
ªs
;

81 
	}
}

84 #ifde‡
F_LOCALTIME


87 
	$f_loˇ…ime
()

89 
tm
 *tm;

90 
¨øy_t
 *
vec
;

91 
time_t
 
…
;

93 #ifde‡
£quít


94 
timez⁄e
 
tz
;

97 
…
 = 
•
->
u
.
numbî
;

98 
tm
 = 
	`loˇ…ime
(&
…
);

100 
vec
 = 
	`Æloˇã_em±y_¨øy
(10);

101 
vec
->
ôem
[
LT_SEC
].
ty≥
 = 
T_NUMBER
;

102 
vec
->
ôem
[
LT_SEC
].
u
.
numbî
 = 
tm
->
tm_£c
;

103 
vec
->
ôem
[
LT_MIN
].
ty≥
 = 
T_NUMBER
;

104 
vec
->
ôem
[
LT_MIN
].
u
.
numbî
 = 
tm
->
tm_mö
;

105 
vec
->
ôem
[
LT_HOUR
].
ty≥
 = 
T_NUMBER
;

106 
vec
->
ôem
[
LT_HOUR
].
u
.
numbî
 = 
tm
->
tm_hour
;

107 
vec
->
ôem
[
LT_MDAY
].
ty≥
 = 
T_NUMBER
;

108 
vec
->
ôem
[
LT_MDAY
].
u
.
numbî
 = 
tm
->
tm_mday
;

109 
vec
->
ôem
[
LT_MON
].
ty≥
 = 
T_NUMBER
;

110 
vec
->
ôem
[
LT_MON
].
u
.
numbî
 = 
tm
->
tm_m⁄
;

111 
vec
->
ôem
[
LT_YEAR
].
ty≥
 = 
T_NUMBER
;

112 
vec
->
ôem
[
LT_YEAR
].
u
.
numbî
 = 
tm
->
tm_yór
 + 1900;

113 
vec
->
ôem
[
LT_WDAY
].
ty≥
 = 
T_NUMBER
;

114 
vec
->
ôem
[
LT_WDAY
].
u
.
numbî
 = 
tm
->
tm_wday
;

115 
vec
->
ôem
[
LT_YDAY
].
ty≥
 = 
T_NUMBER
;

116 
vec
->
ôem
[
LT_YDAY
].
u
.
numbî
 = 
tm
->
tm_yday
;

117 
vec
->
ôem
[
LT_GMTOFF
].
ty≥
 = 
T_NUMBER
;

118 
vec
->
ôem
[
LT_ZONE
].
ty≥
 = 
T_STRING
;

119 
vec
->
ôem
[
LT_ZONE
].
subty≥
 = 
STRING_MALLOC
;

120 #i‡
	`deföed
(
BSD42
Ë|| deföed(
≠ﬁlo
Ë|| deföed(
_AUX_SOURCE
) \

121 || 
	`deföed
(
OLD_ULTRIX
)

123 
vec
->
ôem
[
LT_GMTOFF
].
u
.
numbî
 = 0;

124 
vec
->
ôem
[
LT_ZONE
].
ty≥
 = 
T_NUMBER
;

125 
vec
->
ôem
[
LT_ZONE
].
u
.
numbî
 = 0;

127 #i‡
	`deföed
(
£quít
)

128 
vec
->
ôem
[
LT_GMTOFF
].
u
.
numbî
 = 0;

129 
	`gëtimeofday
(
NULL
, &
tz
);

130 
vec
->
ôem
[
LT_GMTOFF
].
u
.
numbî
 = 
tz
.
tz_möuãswe°
;

131 
vec
->
ôem
[
LT_ZONE
].
u
.
°rög
 = 
	`°rög_c›y
(
	`timez⁄e
(
tz
.
tz_möuãswe°
, 
tm
->
tm_isd°
), "f_localtime");

133 #i‡(
	`deföed
(
hpux
Ë|| deföed(
_SEQUENT_
Ë|| deföed(
_AIX
Ë|| deföed(
SunOS_5
) \

134 || 
	`deföed
(
SVR4
Ë|| deföed(
sgi
Ë|| deföed(
löux
Ë|| deföed(
¸ay
) \

135 || 
	`deföed
(
LATTICE
Ë|| deföed(
SCO
) )

136 i‡(!
tm
->
tm_isd°
)

138 
vec
->
ôem
[
LT_GMTOFF
].
u
.
numbî
 = 
timez⁄e
; vec->ôem[
LT_ZONE
].u.
°rög
 = 
	`°rög_c›y
(
tz«me
[0], "f_localtime");

142 #i‡(
	`deföed
(
_AIX
Ë|| deföed(
hpux
Ë|| deföed(
löux
Ë|| deföed(
¸ay
) \

143 || 
	`deföed
(
LATTICE
Ë)
vec
->
ôem
[
LT_GMTOFF
].
u
.
numbî
 = 
timez⁄e
;

145 
vec
->
ôem
[
LT_GMTOFF
].
u
.
numbî
 = 
Ætz⁄e
;

147 
vec
->
ôem
[
LT_ZONE
].
u
.
°rög
 = 
	`°rög_c›y
(
tz«me
[1], "f_localtime");

150 #i‚de‡
WIN32


151 
vec
->
ôem
[
LT_GMTOFF
].
u
.
numbî
 = 
tm
->
tm_gmtoff
; vec->ôem[
LT_ZONE
].u.
°rög
 = 
	`°rög_c›y
—m->
tm_z⁄e
, "f_localtime");

153 
vec
->
ôem
[
LT_GMTOFF
].
u
.
numbî
 = 
_timez⁄e
; vec->ôem[
LT_ZONE
].u.
°rög
 = 
	`°rög_c›y
(
_tz«me
[
_daylight
 ? 1 : 0], "f_localtime");

158 
	`put_¨øy
(
vec
);

159 
	}
}

162 #ifde‡
F_RUSAGE


163 #ifde‡
WIN32


164 
	$f_rußge
()

167 
	`îr‹
("QTZ_ServerEngine:Functi doÇot supported under Windows.\n");

168 
	}
}

171 #ifde‡
RUSAGE


172 
	$f_rußge
()

174 
rußge
 
rus
; 
m≠pög_t
 *
m
; 
u£πime
, 
°ime
; 
maxrss
;

176 i‡(
	`gërußge
(
RUSAGE_SELF
, &
rus
) < 0)

178 
m
 = 
	`Æloˇã_m≠pög
(0);

183 
u£πime
 = 
rus
.
ru_utime
.
tv_£c
 * 1000+rus.ru_utime.
tv_u£c
 / 1000; 
°ime
 =Ñus.
ru_°ime
.tv_sec * 1000+rus.ru_stime.tv_usec / 1000;

185 
u£πime
 = 
rus
.
ru_utime
.
tv_£c
 * 1000+rus.ru_utime.
tv_n£c
 / 1000000; 
°ime
 =Ñus.
ru_°ime
.tv_sec * 1000+rus.ru_stime.tv_nsec / 1000000;

187 
maxrss
 = 
rus
.
ru_maxrss
;

188 #ifde‡
sun


189 
maxrss
 *
	`gë∑gesize
() / 1024;

191 
m
 = 
	`Æloˇã_m≠pög
(16); 
	`add_m≠pög_∑ú
(m, "utime", 
u£πime
);ádd_m≠pög_∑ú(m, "°ime", 
°ime
);ádd_m≠pög_∑ú(m, "maxrss", 
maxrss
);ádd_m≠pög_∑ú(m, "ixrss", 
rus
.
ru_ixrss
);

192 
	`add_m≠pög_∑ú
(
m
, "idrss", 
rus
.
ru_idrss
);ádd_m≠pög_∑ú(m, "i§ss",Ñus.
ru_i§ss
);ádd_m≠pög_∑ú(m, "möÊt",Ñus.
ru_möÊt
);ádd_mapping_pair(m, "majflt",

193 
rus
.
ru_majÊt
); 
	`add_m≠pög_∑ú
(
m
, "nsw≠",Ñus.
ru_nsw≠
);ádd_m≠pög_∑ú(m, "öblock",Ñus.
ru_öblock
);ádd_m≠pög_∑ú(m, "oublock",Ñus.
ru_oublock
); 
add_m≠pög_∑ú


194 (
m
, "msg¢d", 
rus
.
ru_msg¢d
); 
	`add_m≠pög_∑ú
(m, "msgrcv",Ñus.
ru_msgrcv
);ádd_m≠pög_∑ú(m, "nsig«ls",Ñus.
ru_nsig«ls
);ádd_m≠pög_∑ú(m, "nvcsw",Ñus.
ru_nvcsw
);

195 
	`add_m≠pög_∑ú
(
m
, "nivcsw", 
rus
.
ru_nivcsw
);

197 
	`push_ª„d_m≠pög
(
m
);

198 
	}
}

201 #ifde‡
GET_PROCESS_STATS


202 
	$f_rußge
()

204 
¥o˚ss_°©s
 
ps
; 
m≠pög_t
 *
m
; 
utime
, 
°ime
, 
maxrss
;

206 i‡(
	`gë_¥o˚ss_°©s
(
NULL
, 
PS_SELF
, &
ps
, NULLË=- 1)
m
 = 
	`Æloˇã_m≠pög
(0);

209 
utime
 = 
ps
.
ps_utime
.
tv_£c
 * 1000+ps.ps_utime.
tv_u£c
 / 1000; 
°ime
 =Ös.
ps_°ime
.tv_£¯* 1000+ps.ps_°ime.tv_u£¯/ 1000; 
maxrss
 =Ös.
ps_maxrss
 * 
	`gë∑gesize
() / 1024;

211 
m
 = 
	`Æloˇã_m≠pög
(19); 
	`add_m≠pög_∑ú
(m, "utime", 
utime
);ádd_m≠pög_∑ú(m, "°ime", 
°ime
);ádd_m≠pög_∑ú(m, "maxrss", 
maxrss
);ádd_m≠pög_∑ú(m, "∑geö", 
ps
.
ps_∑geö
);

212 
	`add_m≠pög_∑ú
(
m
, "ª˛aim", 
ps
.
ps_ª˛aim
);ádd_m≠pög_∑ú(m, "zîofûl",Ös.
ps_zîofûl
);ádd_m≠pög_∑ú(m, "pffö¸",Ös.
ps_pffö¸
);ádd_mapping_pair(m, "pffdecr",

213 
ps
.
ps_pffde¸
); 
	`add_m≠pög_∑ú
(
m
, "sw≠",Ös.
ps_sw≠
);ádd_m≠pög_∑ú(m, "sysˇŒ",Ös.
ps_sysˇŒ
);ádd_m≠pög_∑ú(m, "vﬁcsw",Ös.
ps_vﬁcsw
);ádd_mapping_pair(m,

214 "övﬁcsw", 
ps
.
ps_övﬁcsw
); 
	`add_m≠pög_∑ú
(
m
, "sig«l",Ös.
ps_sig«l
);ádd_m≠pög_∑ú(m, "Ãód",Ös.
ps_Ãód
);ádd_m≠pög_∑ú(m, "lwrôe",Ös.
ps_lwrôe
);

215 
	`add_m≠pög_∑ú
(
m
, "bªad", 
ps
.
ps_bªad
);ádd_m≠pög_∑ú(m, "bwrôe",Ös.
ps_bwrôe
);ádd_m≠pög_∑ú(m, "phªad",Ös.
ps_phªad
);ádd_mapping_pair(m, "phwrite",

216 
ps
.
ps_phwrôe
);

217 } 
	`push_ª„d_m≠pög
(
m
);

218 
	}
}

221 #ifde‡
TIMES


228 
	$f_rußge
()

230 
m≠pög_t
 *
m
; 
tms
 
t
;

232 
	`times
(&
t
); 
m
 = 
	`Æloˇã_m≠pög
(2); 
	`add_m≠pög_∑ú
(m, "utime",Å.
tms_utime
 *1000 / 
CLK_TCK
);ádd_m≠pög_∑ú(m, "°ime",Å.
tms_°ime
 *1000 / CLK_TCK); 
	`push_ª„d_m≠pög
(m);

233 
	}
}

237 #ifde‡
LATTICE


239 
	$f_rußge
()

241 
m≠pög_t
 *
m
; 
i
; 
˛ock
[2];

243 
i
 = 
	`timî
(
˛ock
);

244 
m
 = 
	`Æloˇã_m≠pög
(2); 
	`add_m≠pög_∑ú
(m, "utime", 
i
 ? 0 : 
˛ock
[0] *1000+˛ock[1] / 1000);ádd_m≠pög_∑ú(m, "°ime", i ? 0 : clock[0] *1000+˛ock[1] / 1000); 
	`push_ª„d_m≠pög
(m);

245 
	}
}

259 #ifde‡
F_MALLOC_CHECK


264 
	$f_mÆloc_check
()

266 
	`push_numbî
(
	`NXMÆlocCheck
() );

267 
	}
}

270 #ifde‡
F_MALLOC_DEBUG


274 
	$f_mÆloc_debug
()

276 
Àvñ
;

278 
Àvñ
 = 
•
->
u
.
numbî
; if (level < 0)

280 
rc
;

282 
rc
 = 
	`mÆloc_debug
(0); 
	`mÆloc_sögÀthªaded
(); 
•
->
u
.
numbî
 =Ñc;

286 
•
->
u
.
numbî
 = 
	`mÆloc_debug
(
Àvñ
);

288 
	}
}

	@src/eoperators.c

6 
	#SUPPRESS_COMPILER_INLINES


	)

7 
	~"°d.h
"

8 
	~"Õc_ö˛.h
"

9 
	~"efuns_ö˛.h
"

10 
	~"Àx.h
"

11 
	~"backíd.h
"

12 
	~"e›î©‹s.h
"

13 
	~"sw≠.h
"

14 
	~"compûî.h
"

15 
	~"simul_efun.h
"

17 
INLINE
 
	$dóŒoc_fu≈
(
fu≈å_t
 *
Â
)

19 
	`‰ì_obje˘
(
Â
->
hdr
.
ow√r
, "free_funp");

20 i‡(
Â
->
hdr
.
¨gs
)

22 
	`‰ì_¨øy
(
Â
->
hdr
.
¨gs
);

24 i‡–(
Â
->
hdr
.
ty≥
 &0x0fË=
FP_FUNCTIONAL
)

26 
Â
->
f
.
fun˘i⁄Æ
.
¥og
->
func_ªf
--;

27 #ifde‡
DEBUG


28 i‡(
d_Êag
)

32 
	`¥ötf
("QTZ_SîvîEngöe:Sub fun˘i⁄Ñe‡/%s:Çow %i\n", 
Â
->
f
.
fun˘i⁄Æ
.
¥og
->
«me
, fp->f.fun˘i⁄Æ.¥og->
func_ªf
);

35 i‡(
Â
->
f
.
fun˘i⁄Æ
.
¥og
->
func_ªf
 =0 && fp->f.fun˘i⁄Æ.¥og->
ªf
 == 0)

37 
	`dóŒoˇã_¥ogøm
(
Â
->
f
.
fun˘i⁄Æ
.
¥og
);

40 
	`FREE
(
Â
);

41 
	}
}

47 
INLINE
 
	$‰ì_fu≈
(
fu≈å_t
 *
Â
)

49 
Â
->
hdr
.
ªf
--;

50 i‡(
Â
->
hdr
.
ªf
 > 0)

54 
	`dóŒoc_fu≈
(
Â
);

55 
	}
}

61 
INLINE
 
	$f_™d
()

63 i‡(
•
->
ty≥
 =
T_ARRAY
 && (sp - 1)->type == T_ARRAY)

65 
•
--;

66 
•
->
u
.
¨r
 = 
	`öãr£˘_¨øy
( (sp + 1)->u.arr, sp->u.arr);

69 
	`CHECK_TYPES
(
•
 - 1, 
T_NUMBER
, 1, 
F_AND
);

70 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_AND
);

71 
•
--;

72 
•
->
u
.
numbî
 &= (sp + 1)->u.number;

73 
•
->
subty≥
 = 0;

74 
	}
}

80 
INLINE
 
	$f_™d_eq
()

82 
svÆue_t
 *
¨gp
;

84 i‡–(
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

86 
	`îr‹
("BadÜeftÅypeÅo &=\n");

88 i‡–(--
•
)->
ty≥
 !
T_NUMBER
)

90 
	`îr‹
("BadÑightÅypeÅo &=\n");

92 
•
->
u
.
numbî
 = 
¨gp
->u.number &= sp->u.number;

93 
•
->
subty≥
 = 0;

94 
	}
}

100 
INLINE
 
	$f_div_eq
()

102 
svÆue_t
 *
¨gp
 = (
•
--)->
u
.
lvÆue
;

104 
¨gp
->
ty≥
 | 
•
->type)

107 
T_NUMBER
:

109 i‡(!
•
->
u
.
numbî
)

112 
	`îr‹
("QTZ_ServerEngine:Division wrong\n");

114 
•
->
u
.
numbî
 = 
¨gp
->u.number /= sp->u.number;

115 
•
->
subty≥
 = 0;

119 
T_REAL
:

121 i‡(
•
->
u
.
ªÆ
 == 0.0)

124 
	`îr‹
("QTZ_ServerEngine:Division wrong!\n");

126 
•
->
u
.
ªÆ
 = 
¨gp
->u.real /= sp->u.real;

130 
T_NUMBER
 | 
T_REAL
:

132 i‡(
•
->
ty≥
 =
T_NUMBER
)

134 i‡(!
•
->
u
.
numbî
)

137 
	`îr‹
("QTZ_ServerEngine:Division wrong\n");

139 
•
->
u
.
ªÆ
 = 
¨gp
->u.ªÆ /•->u.
numbî
;

140 
•
->
ty≥
 = 
T_REAL
;

144 i‡(
•
->
u
.
ªÆ
 == 0.0)

147 
	`îr‹
("QTZ_ServerEngine:Division\n");

149 
•
->
u
.
ªÆ
 = 
¨gp
->u.
numbî
 /= sp->u.real;

156 i‡(!(
•
->
ty≥
 &(
T_NUMBER
 | 
T_REAL
) ) )

158 
	`îr‹
("BadÑightÅypeÅo /=\n");

163 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo /=\n");

167 
	}
}

173 
INLINE
 
	$f_eq
()

175 
i
;

177 
•
->
ty≥
 | (sp - 1)->type)

179 
T_NUMBER
:

181 --
•
;

182 
•
->
u
.
numbî
 = sp->u.number == (sp + 1)->u.number;

183 
•
->
subty≥
 = 0;

187 
T_REAL
:

189 --
•
;

190 
•
->
ty≥
 = 
T_NUMBER
;

191 
•
->
u
.
numbî
 = sp->u.
ªÆ
 == (sp + 1)->u.real;

192 
•
->
subty≥
 = 0;

196 
T_NUMBER
 | 
T_REAL
:

198 i‡–(--
•
)->
ty≥
 =
T_NUMBER
)

200 
•
->
u
.
numbî
 = sp->u.numbî =(• + 1)->u.
ªÆ
;

204 
•
->
u
.
numbî
 = sp->u.
ªÆ
 == (sp + 1)->u.number;

205 
•
->
ty≥
 = 
T_NUMBER
;

207 
•
->
subty≥
 = 0;

211 
T_ARRAY
:

213 
i
 = (
•
 - 1)->
u
.
¨r
 == sp->u.arr;

214 
	`‰ì_¨øy
–(
•
--)->
u
.
¨r
);

215 
	`‰ì_¨øy
(
•
->
u
.
¨r
);

219 
T_MAPPING
:

221 
i
 = (
•
 - 1)->
u
.
m≠
 == sp->u.map;

222 
	`‰ì_m≠pög
–(
•
--)->
u
.
m≠
);

223 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

227 
T_STRING
:

229 i‡(
	`SVALUE_STRLEN_DIFFERS
(
•
 - 1, sp) )

231 
i
 = 0;

235 
i
 = !
	`°rcmp
–(
•
 - 1)->
u
.
°rög
, sp->u.string);

237 
	`‰ì_°rög_svÆue
(
•
--);

238 
	`‰ì_°rög_svÆue
(
•
);

242 
T_OBJECT
:

244 
i
 = (
•
 - 1)->
u
.
ob
 == sp->u.ob;

245 
	`‰ì_obje˘
–(
•
--)->
u
.
ob
, "f_eq: 1");

246 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_eq: 2");

250 
T_FUNCTION
:

252 
i
 = (
•
 - 1)->
u
.
Â
 == sp->u.fp;

253 
	`‰ì_fu≈
–(
•
--)->
u
.
Â
);

254 
	`‰ì_fu≈
(
•
->
u
.
Â
);

257 
T_BUFFER
:

259 
i
 = (
•
 - 1)->
u
.
buf
 == sp->u.buf;

260 
	`‰ì_buf„r
–(
•
--)->
u
.
buf
);

261 
	`‰ì_buf„r
(
•
->
u
.
buf
);

265 
	`p›_°ack
();

266 
	`‰ì_svÆue
(
•
, "f_eq");

267 
i
 = 0;

270 
	`put_numbî
(
i
);

271 
	}
}

277 
INLINE
 
	$f_ge
()

279 
i
 = 
•
->
ty≥
;

280  (--
•
)->
ty≥
 | 
i
)

282 
T_NUMBER
:

283 
•
->
u
.
numbî
 = sp->u.number >= (sp + 1)->u.number;

284 
•
->
subty≥
 = 0;

286 
T_REAL
:

287 
i
 = 
•
->
u
.
ªÆ
 >= (sp + 1)->u.real;

288 
	`put_numbî
(
i
);

290 
T_NUMBER
 | 
T_REAL
: i‡(
i
 == T_NUMBER)

292 
•
->
ty≥
 = 
T_NUMBER
;

293 
•
->
u
.
numbî
 = sp->u.
ªÆ
 >= (sp + 1)->u.number;

297 
•
->
u
.
numbî
 = sp->u.numbî >(• + 1)->u.
ªÆ
;

299 
•
->
subty≥
 = 0;

301 
T_STRING
:

302 
i
 = 
	`°rcmp
(
•
->
u
.
°rög
, (sp + 1)->u.string) >= 0;

303 
	`‰ì_°rög_svÆue
(
•
 + 1);

304 
	`‰ì_°rög_svÆue
(
•
);

305 
	`put_numbî
(
i
);

309  (
•
++)->
ty≥
)

311 
T_NUMBER
:

312 
T_REAL
:

313 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_GE
);

314 
T_STRING
:

315 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_GE
);

317 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_STRING
 | 
T_REAL
, 1, 
F_GE
);

321 
	}
}

327 
INLINE
 
	$f_gt
()

329 
i
 = 
•
->
ty≥
;

330  (--
•
)->
ty≥
 | 
i
)

332 
T_NUMBER
:

333 
•
->
u
.
numbî
 = sp->u.number > (sp + 1)->u.number;

334 
•
->
subty≥
 = 0;

336 
T_REAL
:

337 
•
->
u
.
numbî
 = sp->u.
ªÆ
 > (sp + 1)->u.real;

338 
•
->
ty≥
 = 
T_NUMBER
;

339 
•
->
subty≥
 = 0;

341 
T_NUMBER
 | 
T_REAL
: i‡(
i
 == T_NUMBER)

343 
•
->
ty≥
 = 
T_NUMBER
;

344 
•
->
u
.
numbî
 = sp->u.
ªÆ
 > (sp + 1)->u.number;

348 
•
->
u
.
numbî
 = sp->u.numbî > (• + 1)->u.
ªÆ
;

350 
•
->
subty≥
 = 0;

352 
T_STRING
:

353 
i
 = 
	`°rcmp
(
•
->
u
.
°rög
, (sp + 1)->u.string) > 0;

354 
	`‰ì_°rög_svÆue
(
•
 + 1);

355 
	`‰ì_°rög_svÆue
(
•
);

356 
	`put_numbî
(
i
);

360  (
•
++)->
ty≥
)

362 
T_NUMBER
:

363 
T_REAL
:

364 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_GT
);

365 
T_STRING
:

366 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_GT
);

368 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_REAL
 | 
T_STRING
, 1, 
F_GT
);

372 
	}
}

378 
INLINE
 
	$f_À
()

380 
i
 = 
•
->
ty≥
;

381  (--
•
)->
ty≥
 | 
i
)

383 
T_NUMBER
:

384 
•
->
u
.
numbî
 = sp->u.number <= (sp + 1)->u.number;

387 
T_REAL
:

388 
•
->
u
.
numbî
 = sp->u.
ªÆ
 <= (sp + 1)->u.real;

389 
•
->
ty≥
 = 
T_NUMBER
;

392 
T_NUMBER
 | 
T_REAL
: i‡(
i
 == T_NUMBER)

394 
•
->
ty≥
 = 
T_NUMBER
;

395 
•
->
u
.
numbî
 = sp->u.
ªÆ
 <= (sp + 1)->u.number;

399 
•
->
u
.
numbî
 = sp->u.numbî <(• + 1)->u.
ªÆ
;

403 
T_STRING
:

404 
i
 = 
	`°rcmp
(
•
->
u
.
°rög
, (sp + 1)->u.string) <= 0;

405 
	`‰ì_°rög_svÆue
(
•
 + 1);

406 
	`‰ì_°rög_svÆue
(
•
);

407 
•
->
ty≥
 = 
T_NUMBER
;

408 
•
->
u
.
numbî
 = 
i
;

413  (
•
++)->
ty≥
)

415 
T_NUMBER
:

416 
T_REAL
:

417 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_LE
);

419 
T_STRING
:

420 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_LE
);

423 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_STRING
 | 
T_REAL
, 1, 
F_LE
);

427 
•
->
subty≥
 = 0;

428 
	}
}

434 
INLINE
 
	$f_…
()

436 
i
 = 
•
->
ty≥
;

437 
i
 | (--
•
)->
ty≥
)

439 
T_NUMBER
:

440 
•
->
u
.
numbî
 = sp->u.number < (sp + 1)->u.number;

442 
T_REAL
:

443 
•
->
u
.
numbî
 = sp->u.
ªÆ
 < (sp + 1)->u.real;

444 
•
->
ty≥
 = 
T_NUMBER
;

446 
T_NUMBER
 | 
T_REAL
: i‡(
i
 == T_NUMBER)

448 
•
->
ty≥
 = 
T_NUMBER
;

449 
•
->
u
.
numbî
 = sp->u.
ªÆ
 < (sp + 1)->u.number;

453 
•
->
u
.
numbî
 = sp->u.numbî < (• + 1)->u.
ªÆ
;

456 
T_STRING
:

457 
i
 = (
	`°rcmp
(
•
->
u
.
°rög
, (sp + 1)->u.string) < 0);

458 
	`‰ì_°rög_svÆue
(
•
 + 1);

459 
	`‰ì_°rög_svÆue
(
•
);

460 
•
->
ty≥
 = 
T_NUMBER
;

461 
•
->
u
.
numbî
 = 
i
;

464  (
•
++)->
ty≥
)

466 
T_NUMBER
:

467 
T_REAL
:

468 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_LT
);

469 
T_STRING
:

470 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_LT
);

472 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_STRING
 | 
T_REAL
, 1, 
F_LT
);

475 
•
->
subty≥
 = 0;

476 
	}
}

482 
INLINE
 
	$f_lsh
()

484 
	`CHECK_TYPES
–(
•
 - 1), 
T_NUMBER
, 1, 
F_LSH
);

485 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_LSH
);

486 
•
--;

487 
•
->
u
.
numbî
 <<= (sp + 1)->u.number;

488 
	}
}

494 
INLINE
 
	$f_lsh_eq
()

496 
svÆue_t
 *
¨gp
;

499 i‡–(
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

502 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo <<=\n");

504 i‡–(--
•
)->
ty≥
 !
T_NUMBER
)

507 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo <<=\n");

509 
•
->
u
.
numbî
 = 
¨gp
->u.number <<= sp->u.number;

510 
•
->
subty≥
 = 0;

511 
	}
}

517 
INLINE
 
	$f_mod_eq
()

519 
svÆue_t
 *
¨gp
;

521 i‡–(
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

524 
	`îr‹
("BadÅypeÅo %=\n");

526 i‡–(--
•
)->
ty≥
 !
T_NUMBER
)

530 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo %=\n");

532 i‡(
•
->
u
.
numbî
 == 0)

535 
	`îr‹
("QTZ_ServerEngine:Modulo wrong\n");

537 
•
->
u
.
numbî
 = 
¨gp
->u.number %= sp->u.number;

538 
•
->
subty≥
 = 0;

539 
	}
}

545 
INLINE
 
	$f_mu…_eq
()

547 
svÆue_t
 *
¨gp
 = (
•
--)->
u
.
lvÆue
;

549 
¨gp
->
ty≥
 | 
•
->type)

551 
T_NUMBER
:

553 
•
->
u
.
numbî
 = 
¨gp
->u.number *= sp->u.number;

554 
•
->
subty≥
 = 0;

558 
T_REAL
:

560 
•
->
u
.
ªÆ
 = 
¨gp
->u.real *= sp->u.real;

564 
T_NUMBER
 | 
T_REAL
:

566 i‡(
•
->
ty≥
 =
T_NUMBER
)

568 
•
->
ty≥
 = 
T_REAL
;

569 
•
->
u
.
ªÆ
 = 
¨gp
->u.ªÆ *•->u.
numbî
;

573 
•
->
u
.
ªÆ
 = 
¨gp
->u.
numbî
 *= sp->u.real;

578 
T_MAPPING
:

580 
m≠pög_t
 *
m
 = 
	`compo£_m≠pög
(
¨gp
->
u
.
m≠
, 
•
->u.map, 0);

581 
	`p›_°ack
();

582 
	`push_m≠pög
(
m
);

583 
	`assign_svÆue
(
¨gp
, 
•
);

589 i‡(!(
•
->
ty≥
 &(
T_NUMBER
 | 
T_REAL
 | 
T_MAPPING
) ) )

591 
	`îr‹
("BadÑightÅypeÅo *=\n");

596 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo *=\n");

600 
	}
}

607 
INLINE
 
	$f_√
()

609 
i
;

611 
•
->
ty≥
 | (sp - 1)->type)

613 
T_NUMBER
:

615 --
•
;

616 
•
->
u
.
numbî
 = sp->u.number != (sp + 1)->u.number;

617 
•
->
subty≥
 = 0;

621 
T_REAL
:

623 --
•
;

624 
•
->
ty≥
 = 
T_NUMBER
;

625 
•
->
u
.
numbî
 = sp->u.
ªÆ
 != (sp + 1)->u.real;

626 
•
->
subty≥
 = 0;

630 
T_NUMBER
 | 
T_REAL
:

632 i‡–(--
•
)->
ty≥
 =
T_NUMBER
)

634 
•
->
u
.
numbî
 = sp->u.numbî !(• + 1)->u.
ªÆ
;

638 
•
->
u
.
numbî
 = sp->u.
ªÆ
 != (sp + 1)->u.number;

639 
•
->
ty≥
 = 
T_NUMBER
;

641 
•
->
subty≥
 = 0;

645 
T_ARRAY
:

647 
i
 = (
•
 - 1)->
u
.
¨r
 != sp->u.arr;

648 
	`‰ì_¨øy
–(
•
--)->
u
.
¨r
);

649 
	`‰ì_¨øy
(
•
->
u
.
¨r
);

653 
T_MAPPING
:

655 
i
 = (
•
 - 1)->
u
.
m≠
 != sp->u.map;

656 
	`‰ì_m≠pög
–(
•
--)->
u
.
m≠
);

657 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

661 
T_STRING
:

663 i‡(
	`SVALUE_STRLEN_DIFFERS
(
•
 - 1, sp) )

665 
i
 = 1;

669 
i
 = !!
	`°rcmp
–(
•
 - 1)->
u
.
°rög
, sp->u.string);

671 
	`‰ì_°rög_svÆue
(
•
--);

672 
	`‰ì_°rög_svÆue
(
•
);

676 
T_OBJECT
:

678 
i
 = (
•
 - 1)->
u
.
ob
 != sp->u.ob;

679 
	`‰ì_obje˘
–(
•
--)->
u
.
ob
, "f_ne: 1");

680 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_ne: 2");

684 
T_FUNCTION
:

686 
i
 = (
•
 - 1)->
u
.
Â
 != sp->u.fp;

687 
	`‰ì_fu≈
–(
•
--)->
u
.
Â
);

688 
	`‰ì_fu≈
(
•
->
u
.
Â
);

692 
T_BUFFER
:

694 
i
 = (
•
 - 1)->
u
.
buf
 != sp->u.buf;

695 
	`‰ì_buf„r
–(
•
--)->
u
.
buf
);

696 
	`‰ì_buf„r
(
•
->
u
.
buf
);

701 
	`p›_°ack
();

702 
	`‰ì_svÆue
(
•
, "f_ne");

703 
i
 = 1;

705 
•
->
ty≥
 = 
T_NUMBER
;

706 
•
->
subty≥
 = 0;

707 
•
->
u
.
numbî
 = 
i
;

708 
	}
}

714 
INLINE
 
	$f_‹
()

716 
	`CHECK_TYPES
–(
•
 - 1), 
T_NUMBER
, 1, 
F_OR
);

717 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_OR
);

718 
•
--;

719 
•
->
u
.
numbî
 |= (sp + 1)->u.number;

720 
	}
}

726 
INLINE
 
	$f_‹_eq
()

728 
svÆue_t
 *
¨gp
;

730 i‡–(
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

733 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo |=\n");

735 i‡–(--
•
)->
ty≥
 !
T_NUMBER
)

738 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo |=\n");

740 
•
->
u
.
numbî
 = 
¨gp
->u.number |= sp->u.number;

741 
•
->
subty≥
 = 0;

742 
	}
}

748 
INLINE
 
	$f_ønge
(
code
)

750 
‰om
, 
to
, 
Àn
;

752 i‡–(
•
 - 2)->
ty≥
 !
T_NUMBER
)

755 
	`îr‹
("QTZ_ServerEngine:ThatÇeedsáÇumber.\n");

757 i‡–(
•
 - 1)->
ty≥
 !
T_NUMBER
)

760 
	`îr‹
("QTZ_ServerEngine:ThatÇeedsáÇumber.\n");

763 
•
->
ty≥
)

765 
T_STRING
:

767 *
ªs
 = 
•
->
u
.
°rög
;

769 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

770 
to
 = (--
•
)->
u
.
numbî
;

771 i‡(
code
 &0x01)

773 
to
 = 
Àn
 -Åo;

775 #ifde‡
OLD_RANGE_BEHAVIOR


776 i‡(
to
 < 0)

778 
to
 +
Àn
;

781 
‰om
 = (--
•
)->
u
.
numbî
;

782 i‡(
code
 &0x10)

784 
‰om
 = 
Àn
 - from;

786 #ifde‡
OLD_RANGE_BEHAVIOR


787 i‡(
‰om
 < 0)

789 
‰om
 +
Àn
;

792 i‡(
‰om
 < 0)

794 
‰om
 = 0;

797 i‡(
to
 < 
‰om
 || from >
Àn
)

799 
	`‰ì_°rög_svÆue
(
•
 + 2);

800 
•
->
ty≥
 = 
T_STRING
;

801 
•
->
subty≥
 = 
STRING_CONSTANT
;

802 
•
->
u
.
°rög
 = "";

806 i‡(
to
 >
Àn
 - 1)

808 
	`put_mÆlo˚d_°rög
(
	`°rög_c›y
(
ªs
 + 
‰om
, "f_range") );

812 *
tmp
;

813 
tmp
 = 
	`√w_°rög
(
to
 - 
‰om
 + 1, "f_range");

814 
	`°∫˝y
(
tmp
, 
ªs
 + 
‰om
, 
to
 - from + 1);

815 
tmp
[
to
 - 
‰om
 + 1] = '\0';

816 
	`put_mÆlo˚d_°rög
(
tmp
);

818 
	`‰ì_°rög_svÆue
(
•
 + 2);

821 
T_BUFFER
:

823 
buf„r_t
 *
rbuf
 = 
•
->
u
.
buf
;

825 
Àn
 = 
rbuf
->
size
;

826 
to
 = (--
•
)->
u
.
numbî
;

827 i‡(
code
 &0x01)

829 
to
 = 
Àn
 -Åo;

831 #ifde‡
OLD_RANGE_BEHAVIOR


832 i‡(
to
 < 0)

834 
to
 +
Àn
;

837 
‰om
 = (--
•
)->
u
.
numbî
;

838 i‡(
code
 &0x10)

840 
‰om
 = 
Àn
 - from;

842 #ifde‡
OLD_RANGE_BEHAVIOR


843 i‡(
‰om
 < 0)

845 i‡–(
‰om
 +
Àn
) < 0)

847 
‰om
 = 0;

851 i‡(
‰om
 < 0)

853 
‰om
 = 0;

856 i‡(
to
 < 
‰om
 || from >
Àn
)

858 
	`‰ì_buf„r
(
rbuf
);

859 
	`put_buf„r
(
	`nuŒ_buf„r
() );

862 i‡(
to
 >
Àn
)

864 
to
 = 
Àn
 - 1;

867 
buf„r_t
 *
nbuf
 = 
	`Æloˇã_buf„r
(
to
 - 
‰om
 + 1);

868 
	`mem˝y
(
nbuf
->
ôem
, 
rbuf
->ôem + 
‰om
, 
to
 - from + 1);

869 
	`‰ì_buf„r
(
rbuf
);

870 
	`put_buf„r
(
nbuf
);

875 
T_ARRAY
:

877 
¨øy_t
 *
v
 = 
•
->
u
.
¨r
;

878 
to
 = (--
•
)->
u
.
numbî
;

879 i‡(
code
 &0x01)

881 
to
 = 
v
->
size
 -Åo;

883 
‰om
 = (--
•
)->
u
.
numbî
;

884 i‡(
code
 &0x10)

886 
‰om
 = 
v
->
size
 - from;

888 
	`put_¨øy
(
	`¶i˚_¨øy
(
v
, 
‰om
, 
to
) );

894 
	`îr‹
("QTZ_ServerEngine:BadárgumentÅoÅhat operator.\n");

896 
	}
}

902 
INLINE
 
	$f_exåa˘_ønge
(
code
)

904 
‰om
, 
Àn
;

906 i‡–(
•
 - 1)->
ty≥
 !
T_NUMBER
)

909 
	`îr‹
("QTZ_ServerEngine:ThatÇeedsáÇumber.\n");

912 
•
->
ty≥
)

914 
T_STRING
:

916 *
ªs
 = 
•
->
u
.
°rög
;

918 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

919 
‰om
 = (--
•
)->
u
.
numbî
;

920 i‡(
code
)

922 
‰om
 = 
Àn
 - from;

924 #ifde‡
OLD_RANGE_BEHAVIOR


925 i‡(
‰om
 < 0)

927 i‡–(
‰om
 +
Àn
) < 0)

929 
‰om
 = 0;

933 i‡(
‰om
 < 0)

935 
‰om
 = 0;

938 i‡(
‰om
 >
Àn
)

940 
•
->
ty≥
 = 
T_STRING
;

941 
•
->
subty≥
 = 
STRING_CONSTANT
;

942 
•
->
u
.
°rög
 = "";

946 
	`put_mÆlo˚d_°rög
(
	`°rög_c›y
(
ªs
 + 
‰om
, "f_extract_range") );

948 
	`‰ì_°rög_svÆue
(
•
 + 1);

951 
T_BUFFER
:

953 
buf„r_t
 *
rbuf
 = 
•
->
u
.
buf
;

954 
buf„r_t
 *
nbuf
;

957 
Àn
 = 
rbuf
->
size
;

958 
‰om
 = (--
•
)->
u
.
numbî
;

959 i‡(
code
)

961 
‰om
 = 
Àn
 - from;

963 #ifde‡
OLD_RANGE_BEHAVIOR


964 i‡(
‰om
 < 0)

966 i‡–(
‰om
 +
Àn
) < 0)

968 
‰om
 = 0;

972 i‡(
‰om
 < 0)

974 
‰om
 = 0;

977 i‡(
‰om
 > 
Àn
)

979 
‰om
 = 
Àn
;

981 
nbuf
 = 
	`Æloˇã_buf„r
(
Àn
 - 
‰om
);

982 
	`mem˝y
(
nbuf
->
ôem
, 
rbuf
->ôem + 
‰om
, 
Àn
 - from);

983 
	`‰ì_buf„r
(
rbuf
);

984 
	`put_buf„r
(
nbuf
);

988 
T_ARRAY
:

990 
¨øy_t
 *
v
 = 
•
->
u
.
¨r
;

991 
‰om
 = (--
•
)->
u
.
numbî
;

992 i‡(
code
)

994 
‰om
 = 
v
->
size
 - from;

996 
	`put_¨øy
(
	`¶i˚_¨øy
(
v
, 
‰om
, v->
size
 - 1) );

1002 
	`îr‹
("QTZ_ServerEngine:BadárgumentÅoÅhat operator.\n");

1004 
	}
}

1010 
INLINE
 
	$f_rsh
()

1012 
	`CHECK_TYPES
–(
•
 - 1), 
T_NUMBER
, 1, 
F_RSH
);

1013 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_RSH
);

1014 
•
--;

1015 
•
->
u
.
numbî
 >>= (sp + 1)->u.number;

1016 
	}
}

1022 
INLINE
 
	$f_rsh_eq
()

1024 
svÆue_t
 *
¨gp
;

1026 i‡–(
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

1029 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo >>=\n");

1031 i‡–(--
•
)->
ty≥
 !
T_NUMBER
)

1035 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo >>=\n");

1037 
•
->
u
.
numbî
 = 
¨gp
->u.number >>= sp->u.number;

1038 
•
->
subty≥
 = 0;

1039 
	}
}

1045 
INLINE
 
	$f_sub_eq
()

1047 
svÆue_t
 *
¨gp
 = (
•
--)->
u
.
lvÆue
;

1049 
¨gp
->
ty≥
 | 
•
->type)

1051 
T_NUMBER
:

1053 
•
->
u
.
numbî
 = 
¨gp
->u.number -= sp->u.number;

1054 
•
->
subty≥
 = 0;

1058 
T_REAL
:

1060 
•
->
u
.
ªÆ
 = 
¨gp
->u.real -= sp->u.real;

1064 
T_NUMBER
 | 
T_REAL
:

1066 i‡(
•
->
ty≥
 =
T_NUMBER
)

1068 
•
->
ty≥
 = 
T_REAL
;

1069 
•
->
u
.
ªÆ
 = 
¨gp
->u.ªÆ -•->u.
numbî
;

1073 
•
->
u
.
ªÆ
 = 
¨gp
->u.
numbî
 -= sp->u.real;

1078 
T_ARRAY
:

1080 
•
->
u
.
¨r
 = 
¨gp
->u.¨∏
	`subåa˘_¨øy
(argp->u.arr, sp->u.arr);

1081 
•
->
u
.
¨r
->
ªf
++;

1087 i‡(!(
•
->
ty≥
 &(
T_NUMBER
 | 
T_REAL
 | 
T_ARRAY
) ) )

1089 
	`îr‹
("BadÑightÅypeÅo -=\n");

1091 i‡(!(
¨gp
->
ty≥
 &(
T_NUMBER
 | 
T_REAL
 | 
T_ARRAY
) ) )

1093 
	`îr‹
("BadÜeftÅypeÅo -=\n");

1098 
	`îr‹
("QTZ_ServerEngine:ArgumentsÅo -= .\n");

1102 
	}
}

1132 
	#SW_TYPE
 0

	)

1133 
	#SW_TABLE
 1

	)

1134 
	#SW_ENDTAB
 3

	)

1135 
	#SW_DEFAULT
 5

	)

1138 
	#L_LOWER
 0

	)

1139 
	#L_TYPE
 ((*))

	)

1140 
	#L_UPPER
 (
SWITCH_CASE_SIZE
)

	)

1141 
	#L_ADDR
 (
SWITCH_CASE_SIZE
 + (*))

	)

1142 
	#U_LOWER
 (-
SWITCH_CASE_SIZE
)

	)

1143 
	#U_TYPE
 (-
SWITCH_CASE_SIZE
 + (*))

	)

1144 
	#U_UPPER
 0

	)

1145 
	#U_ADDR
 ((*))

	)

1147 
INLINE
 
	$f_swôch
()

1149 
off£t
, 
íd_off
;

1150 
d
;

1151 
POINTER_INT
 
s
 = 0;

1152 
POINTER_INT
 
r
;

1153 
i
;

1154 *
l
, *
íd_èb
;

1155 
off_èb
[] =

1157 0 *
SWITCH_CASE_SIZE
, 1 *SWITCH_CASE_SIZE, 3 *SWITCH_CASE_SIZE, 7 *SWITCH_CASE_SIZE, 15 *SWITCH_CASE_SIZE, 31 *SWITCH_CASE_SIZE, 63 *SWITCH_CASE_SIZE, 127 *SWITCH_CASE_SIZE, 255 *SWITCH_CASE_SIZE,

1158 511 *
SWITCH_CASE_SIZE
, 1023 *SWITCH_CASE_SIZE, 2047 *SWITCH_CASE_SIZE, 4095 *SWITCH_CASE_SIZE, 8191 *SWITCH_CASE_SIZE,

1161 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_TABLE
);

1162 
	`COPY_SHORT
(&
íd_off
, 
pc
 + 
SW_ENDTAB
);

1163 i‡–(
i
 = 
	`EXTRACT_UCHAR
(
pc
) >> 4) != 0xf)

1167 i‡(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
)

1170 
s
 = 0;

1171 
•
--;

1173 i‡(
•
->
ty≥
 =
T_STRING
)

1175 i‡(
•
->
subty≥
 =
STRING_SHARED
)

1177 
s
 = (
POINTER_INT
)
•
->
u
.
°rög
;

1178 
	`‰ì_°rög
(
•
->
u
.
°rög
);

1179 
•
--;

1183 
s
 = (
POINTER_INT
)
	`föd°rög
(
•
->
u
.
°rög
);

1184 
	`‰ì_°rög_svÆue
(
•
--);

1186 i‡(
s
 == 0)

1192 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

1193 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

1199 
	`bad_¨gumít
(
•
, 
T_STRING
, 1, 
F_SWITCH
);

1205 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 1, 
F_SWITCH
);

1206 
s
 = (
•
--)->
u
.
numbî
;

1207 
i
 = ()
pc
[0] &0xf;

1209 
íd_èb
 = 
cuºít_¥og
->
¥ogøm
 + 
íd_off
;

1214 i‡(
i
 >= 14)

1216 i‡(
i
 == 14)

1219 
l
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

1220 
	`COPY_INT
(&
d
, 
íd_èb
 - 4);

1222 i‡(
s
 >
d
 && 
l
 + (†(†- dË*(ËË< (
íd_èb
 - 4) )

1224 
	`COPY_SHORT
(&
off£t
, &
l
[
s
]);

1225 i‡(
off£t
)

1227 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

1232 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

1233 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

1239 
	`Áèl
("QTZ_ServerEngine:switchÅable format don't support.\n");

1249 
l
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
 + 
off_èb
[
i
];

1250 
d
 = (Ë(
off_èb
[
i
] + 
SWITCH_CASE_SIZE
) >> 1;

1251 i‡(
d
 < 
SWITCH_CASE_SIZE
)

1253 
d
 = 0;

1257 
	`COPY_PTR
(&
r
, 
l
);

1258 i‡(
s
 < 
r
)

1260 i‡(
d
 < 
SWITCH_CASE_SIZE
)

1264 
	`COPY_SHORT
(&
off£t
, 
l
 + 
U_TYPE
);

1265 i‡(
off£t
 <= 1)

1267 
	`COPY_PTR
(&
r
, 
l
 + 
U_LOWER
);

1268 i‡(
s
 >
r
)

1271 
	`COPY_SHORT
(&
off£t
, 
l
 + 
U_ADDR
);

1272 i‡(!
off£t
)

1275 
l
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
 + (
s
 - 
r
) *();

1276 
	`COPY_SHORT
(&
off£t
, 
l
);

1282 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

1288 
l
 -
d
;

1289 
d
 >>= 1;

1292 i‡(
s
 > 
r
)

1294 i‡(
d
 < 
SWITCH_CASE_SIZE
)

1297 
	`COPY_SHORT
(&
off£t
, 
l
 + 
L_TYPE
);

1298 i‡(
off£t
 <= 1)

1300 
	`COPY_PTR
(&
r
, 
l
 + 
L_UPPER
);

1301 i‡(
s
 <
r
)

1304 
	`COPY_SHORT
(&
off£t
, 
l
 + 
L_ADDR
);

1305 i‡(!
off£t
)

1308 
l
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
 + (
s
 - 
r
) *();

1309 
	`COPY_SHORT
(&
off£t
, 
l
);

1315 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

1321 
l
 +
d
;

1323 
l
 >
íd_èb
)

1325 
d
 >>= 1;

1326 i‡(
d
 < 
SWITCH_CASE_SIZE
)

1328 
d
 = 0;

1331 
l
 -
d
;

1333 i‡(
l
 =
íd_èb
)

1336 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

1339 
d
 >>= 1;

1345 
	`COPY_SHORT
(&
off£t
, 
l
 + 
U_ADDR
);

1347 i‡(!
l
[
U_TYPE
] && !l[U_TYPE + 1])

1350 
	`COPY_PTR
(&
r
, 
l
 + 
U_LOWER
);

1351 
l
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
 + (
s
 - 
r
) *();

1352 
	`COPY_SHORT
(&
off£t
, 
l
);

1354 i‡(
off£t
 <= 1)

1356 
	`COPY_SHORT
(&
off£t
, 
l
 + 
L_ADDR
);

1357 i‡(!
off£t
)

1360 
l
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

1361 
	`COPY_SHORT
(&
off£t
, 
l
);

1368 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

1369 
	}
}

1375 
	$ˇŒ_simul_efun
(
ödex
, 
num_¨g
)

1377 
obje˘_t
 *
simul_efun_ob
;

1378 
compûî_fun˘i⁄_t
 *
fu≈
;

1380 i‡(
cuºít_obje˘
->
Êags
 &
O_DESTRUCTED
)

1383 
	`p›_n_ñems
(
num_¨g
);

1384 
	`push_undeföed
();

1388 i‡(
simuls
[
ödex
].
func
)

1393 #ifde‡
_USE_SWAP_H_


1394 
	`DEBUG_CHECK
(
simul_efun_ob
->
Êags
 &
O_SWAPPED
, "Simulefun object swapped!\n");

1396 
simul_efun_ob
->
time_of_ªf
 = 
cuºít_time
;

1397 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
 | 
FRAME_OB_CHANGE
);

1398 
ˇŒî_ty≥
 = 
ORIGIN_SIMUL_EFUN
;

1399 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
;

1400 
cuºít_¥og
 = 
simul_efun_ob
->
¥og
;

1401 
fu≈
 = 
	`£tup_√w_‰ame
(
simuls
[
ödex
].index);

1402 
¥evious_ob
 = 
cuºít_obje˘
;

1403 
cuºít_obje˘
 = 
simul_efun_ob
;

1404 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
fu≈
->
addªss
);

1409 
	`îr‹
("Function isÇotá simul_efun.\n");

1411 
	}
}

1417 
INLINE
 
	$f_x‹
()

1419 
	`CHECK_TYPES
–(
•
 - 1), 
T_NUMBER
, 1, 
F_XOR
);

1420 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_XOR
);

1421 
•
--;

1422 
•
->
u
.
numbî
 ^= (sp + 1)->u.number;

1423 
	}
}

1429 
INLINE
 
	$f_x‹_eq
()

1431 
svÆue_t
 *
¨gp
;

1433 i‡–(
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

1436 
	`îr‹
("QTZ_ServerEngine:BadÅypeÅo ^=\n");

1438 i‡–(--
•
)->
ty≥
 !
T_NUMBER
)

1441 
	`îr‹
("BadÅypeÅo ^=\n");

1443 
•
->
u
.
numbî
 = 
¨gp
->u.number ^= sp->u.number;

1444 
•
->
subty≥
 = 0;

1445 
	}
}

1451 
INLINE
 
fu≈å_t
 *
	$make_efun_fu≈
(
›code
, 
svÆue_t
 *
¨gs
)

1453 
fu≈å_t
 *
Â
;

1455 
Â
 = (
fu≈å_t
*)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
efun_±r_t
), 
TAG_FUNP
, "make_efun_funp");

1456 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

1457 
	`add_ªf
(
cuºít_obje˘
, "make_efun_funp");

1458 
Â
->
hdr
.
ty≥
 = 
FP_EFUN
;

1460 
Â
->
f
.
efun
.
ödex
 = 
›code
;

1462 i‡(
¨gs
->
ty≥
 =
T_ARRAY
)

1464 
Â
->
hdr
.
¨gs
 =árgs->
u
.
¨r
;

1465 
¨gs
->
u
.
¨r
->
ªf
++;

1469 
Â
->
hdr
.
¨gs
 = 0;

1472 
Â
->
hdr
.
ªf
 = 1;

1473  
Â
;

1474 
	}
}

1480 
INLINE
 
fu≈å_t
 *
	$make_lfun_fu≈
(
ödex
, 
svÆue_t
 *
¨gs
)

1482 
fu≈å_t
 *
Â
;

1484 
Â
 = (
fu≈å_t
*)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
loˇl_±r_t
), 
TAG_FUNP
, "make_efun_funp");

1485 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

1486 
	`add_ªf
(
cuºít_obje˘
, "make_efun_funp");

1487 
Â
->
hdr
.
ty≥
 = 
FP_LOCAL
 | 
FP_NOT_BINDABLE
;

1489 
Â
->
f
.
loˇl
.
ödex
 = index + 
fun˘i⁄_ödex_off£t
;

1491 i‡(
¨gs
->
ty≥
 =
T_ARRAY
)

1493 
Â
->
hdr
.
¨gs
 =árgs->
u
.
¨r
;

1494 
¨gs
->
u
.
¨r
->
ªf
++;

1498 
Â
->
hdr
.
¨gs
 = 0;

1501 
Â
->
hdr
.
ªf
 = 1;

1502  
Â
;

1503 
	}
}

1509 
INLINE
 
fu≈å_t
 *
	$make_simul_fu≈
(
ödex
, 
svÆue_t
 *
¨gs
)

1511 
fu≈å_t
 *
Â
;

1513 
Â
 = (
fu≈å_t
*)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
simul_±r_t
), 
TAG_FUNP
, "make_efun_funp");

1514 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

1515 
	`add_ªf
(
cuºít_obje˘
, "make_efun_funp");

1516 
Â
->
hdr
.
ty≥
 = 
FP_SIMUL
;

1518 
Â
->
f
.
simul
.
ödex
 = index;

1520 i‡(
¨gs
->
ty≥
 =
T_ARRAY
)

1522 
Â
->
hdr
.
¨gs
 =árgs->
u
.
¨r
;

1523 
¨gs
->
u
.
¨r
->
ªf
++;

1527 
Â
->
hdr
.
¨gs
 = 0;

1530 
Â
->
hdr
.
ªf
 = 1;

1531  
Â
;

1532 
	}
}

1538 
INLINE
 
fu≈å_t
 *
	$make_fun˘i⁄Æ_fu≈
(
num_¨g
, 
num_loˇl
, 
Àn
, 
svÆue_t
 *
¨gs
, 
Êag
)

1540 
fu≈å_t
 *
Â
;

1542 
Â
 = (
fu≈å_t
*)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
fun˘i⁄Æ_t
), 
TAG_FUNP
, "make_functional_funp");

1543 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

1544 
	`add_ªf
(
cuºít_obje˘
, "make_functional_funp");

1545 
Â
->
hdr
.
ty≥
 = 
FP_FUNCTIONAL
 + 
Êag
;

1547 
cuºít_¥og
->
func_ªf
++;

1548 #ifde‡
DEBUG


1549 i‡(
d_Êag
)

1552 
	`¥ötf
("QTZ_SîvîEngöe:Add fun˘i⁄Ñe‡/%s:Çow %i\n", 
cuºít_¥og
->
«me
, cuºít_¥og->
func_ªf
);

1556 
Â
->
f
.
fun˘i⁄Æ
.
¥og
 = 
cuºít_¥og
;

1557 
Â
->
f
.
fun˘i⁄Æ
.
off£t
 = 
pc
 - 
cuºít_¥og
->
¥ogøm
;

1558 
Â
->
f
.
fun˘i⁄Æ
.
num_¨g
 =Çum_arg;

1559 
Â
->
f
.
fun˘i⁄Æ
.
num_loˇl
 =Çum_local;

1560 
Â
->
f
.
fun˘i⁄Æ
.
fio
 = 
fun˘i⁄_ödex_off£t
;

1561 
Â
->
f
.
fun˘i⁄Æ
.
vio
 = 
v¨übÀ_ödex_off£t
;

1562 
pc
 +
Àn
;

1564 i‡(
¨gs
 &&árgs->
ty≥
 =
T_ARRAY
)

1566 
Â
->
hdr
.
¨gs
 =árgs->
u
.
¨r
;

1567 
¨gs
->
u
.
¨r
->
ªf
++;

1568 
Â
->
f
.
fun˘i⁄Æ
.
num_¨g
 +
¨gs
->
u
.
¨r
->
size
;

1572 
Â
->
hdr
.
¨gs
 = 0;

1575 
Â
->
hdr
.
ªf
 = 1;

1576  
Â
;

1577 
	}
}

1583 
INLINE
 
	$push_ª„d_fu≈
(
fu≈å_t
 *
Â
)

1585 
•
++;

1586 
•
->
ty≥
 = 
T_FUNCTION
;

1587 
•
->
u
.
Â
 = fp;

1588 
	}
}

1594 
INLINE
 
	$push_fu≈
(
fu≈å_t
 *
Â
)

1596 
•
++;

1597 
•
->
ty≥
 = 
T_FUNCTION
;

1598 
•
->
u
.
Â
 = fp;

1599 
Â
->
hdr
.
ªf
++;

1600 
	}
}

1606 
INLINE
 
	$f_fun˘i⁄_c⁄°ru˘‹
()

1608 
fu≈å_t
 *
Â
 = 0;

1609 
köd
;

1610 
ödex
;

1612 
köd
 = 
	`EXTRACT_UCHAR
(
pc
++);

1614 
köd
)

1616 
FP_EFUN
:

1617 
	`LOAD_SHORT
(
ödex
, 
pc
);

1618 
Â
 = 
	`make_efun_fu≈
(
ödex
, 
•
);

1619 
	`p›_°ack
();

1621 
FP_LOCAL
:

1622 
	`LOAD_SHORT
(
ödex
, 
pc
);

1623 
Â
 = 
	`make_lfun_fu≈
(
ödex
, 
•
);

1624 
	`p›_°ack
();

1626 
FP_SIMUL
:

1627 
	`LOAD_SHORT
(
ödex
, 
pc
);

1628 
Â
 = 
	`make_simul_fu≈
(
ödex
, 
•
);

1629 
	`p›_°ack
();

1631 
FP_FUNCTIONAL
:

1632 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

1634 
num_¨g
;

1636 
num_¨g
 = 
	`EXTRACT_UCHAR
(
pc
++);

1637 
	`LOAD_SHORT
(
ödex
, 
pc
);

1638 
Â
 = 
	`make_fun˘i⁄Æ_fu≈
(
num_¨g
, 0, 
ödex
, 
•
, 
köd
 &
FP_NOT_BINDABLE
);

1639 
	`p›_°ack
();

1642 
FP_ANONYMOUS
:

1643 
FP_ANONYMOUS
 | 
FP_NOT_BINDABLE
:

1645 
num_¨g
, 
loˇls
;

1647 
num_¨g
 = 
	`EXTRACT_UCHAR
(
pc
++);

1648 
loˇls
 = 
	`EXTRACT_UCHAR
(
pc
++);

1649 
	`LOAD_SHORT
(
ödex
, 
pc
);

1650 
Â
 = 
	`make_fun˘i⁄Æ_fu≈
(
num_¨g
, 
loˇls
, 
ödex
, 0, 
köd
 &
FP_NOT_BINDABLE
);

1655 
	`Áèl
("Can'tÇot make unknownÅype of functionÖointer.\n");

1657 
	`push_ª„d_fu≈
(
Â
);

1658 
	}
}

1664 
INLINE
 
	$f_evÆu©e
()

1666 
svÆue_t
 *
v
;

1667 
svÆue_t
 *
¨g
 = 
•
 - 
°_num_¨g
 + 1;

1669 i‡(
¨g
->
ty≥
 !
T_FUNCTION
)

1671 
	`p›_n_ñems
(
°_num_¨g
 - 1);

1674 i‡(
cuºít_obje˘
->
Êags
 &
O_DESTRUCTED
)

1676 
	`p›_n_ñems
(
°_num_¨g
);

1677 
	`push_undeföed
();

1680 
v
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
¨g
->
u
.
Â
, 
°_num_¨g
 - 1);

1681 
	`‰ì_fu≈
(
¨g
->
u
.
Â
);

1682 
	`assign_svÆue_no_‰ì
(
•
, 
v
);

1683 
	}
}

1689 
INLINE
 
	$f_ssˇnf
()

1691 
svÆue_t
 *
Â
;

1692 
i
;

1693 
num_¨g
;

1698 
num_¨g
 = 
	`EXTRACT_UCHAR
(
pc
);

1699 
pc
++;

1706 
Â
 = 
•
;

1707 
•
 +
num_¨g
 + 1;

1708 *
•
 = *(
Â
--);

1709 *(
•
 - 1Ë*(
Â
);

1711 
Â
->
ty≥
 = 
T_NUMBER
;

1717 
i
 = 1; i <
num_¨g
; i++)

1719 
Â
[
i
].
ty≥
 = 
T_INVALID
;

1725 
i
 = 
	`öãr_ssˇnf
(
•
 - 2, s∞- 1, sp, 
num_¨g
);

1730 
	`p›_2_ñems
();

1735 
Â
->
u
.
numbî
 = 
i
;

1736 
Â
->
subty≥
 = 0;

1737 
	}
}

	@src/file.c

6 
	~"°d.h
"

7 
	~"Õc_ö˛.h
"

8 
	~"fûe_ö˛.h
"

9 
	~"comm.h
"

10 
	~"°r°r.h
"

11 
	~"fûe.h
"

12 
	~"Àx.h
"

13 
	~"p‹t.h
"

20 #ifde‡
INCL_SYS_SYSMACROS_H


22 #ifde‡
maj‹


23 #unde‡
maj‹


25 #ifde‡
mö‹


26 #unde‡
mö‹


28 #ifde‡
makedev


29 #unde‡
makedev


31 
	~<sys/sysma¸os.h
>

35 c⁄° 
sys_√º
;

37 
ÀgÆ_∑th
(*);

39 
m©ch_°rög
(*, *);

40 
c›y
(*
‰om
, *
to
);

41 
do_move
(*
‰om
, *
to
, 
Êag
);

42 
p°rcmp
(
CONST
 *, CONST *);

43 
∑ºcmp
(
CONST
 *, CONST *);

44 
ícode_°©
(
svÆue_t
 *, , *, 
°©
*);

46 
	#MAX_LINES
 50

	)

51 
	$p°rcmp
(
CONST
 *
p1
, CONST *
p2
)

53 
svÆue_t
 *
x
 = (svÆue_t*)
p1
;

54 
svÆue_t
 *
y
 = (svÆue_t*)
p2
;

56  
	`°rcmp
(
x
->
u
.
°rög
, 
y
->u.string);

57 
	}
}

59 
	$∑ºcmp
(
CONST
 *
p1
, CONST *
p2
)

61 
svÆue_t
 *
x
 = (svÆue_t*)
p1
;

62 
svÆue_t
 *
y
 = (svÆue_t*)
p2
;

64  
	`°rcmp
(
x
->
u
.
¨r
->
ôem
[0].u.
°rög
, 
y
->u.arr->item[0].u.string);

65 
	}
}

71 
	$ícode_°©
(
svÆue_t
 *
vp
, 
Êags
, *
°r
, 
°©
 *
°
)

73 i‡(
Êags
 == - 1)

75 
¨øy_t
 *
v
 = 
	`Æloˇã_em±y_¨øy
(3);

77 
v
->
ôem
[0].
ty≥
 = 
T_STRING
;

78 
v
->
ôem
[0].
subty≥
 = 
STRING_MALLOC
;

79 
v
->
ôem
[0].
u
.
°rög
 = 
	`°rög_c›y
(
°r
, "encode_stat");

80 
v
->
ôem
[1].
ty≥
 = 
T_NUMBER
;

81 
v
->
ôem
[1].
u
.
numbî
 = ( (
°
->
°_mode
 &
S_IFDIR
Ë? - 2: st->
°_size
);

82 
v
->
ôem
[2].
ty≥
 = 
T_NUMBER
;

83 
v
->
ôem
[2].
u
.
numbî
 = 
°
->
°_mtime
;

84 
vp
->
ty≥
 = 
T_ARRAY
;

85 
vp
->
u
.
¨r
 = 
v
;

89 
vp
->
ty≥
 = 
T_STRING
;

90 
vp
->
subty≥
 = 
STRING_MALLOC
;

91 
vp
->
u
.
°rög
 = 
	`°rög_c›y
(
°r
, "encode_stat");

93 
	}
}

117 
	#MAX_FNAME_SIZE
 255

	)

118 
	#MAX_PATH_LEN
 1024

	)

119 
¨øy_t
 *
	$gë_dú
(*
∑th
, 
Êags
)

121 
¨øy_t
 *
v
;

122 
i
, 
cou¡
 = 0;

123 
DIR
 *
dúp
;

124 
«mñí
, 
do_m©ch
 = 0;

126 #ifde‡
USE_STRUCT_DIRENT


127 
dúít
 *
de
;

129 
dúe˘
 *
de
;

131 
°©
 
°
;

132 *
ídãmp
;

133 
ãmµ©h
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

134 
ªgexµ©h
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

135 *
p
;

137 i‡(!
∑th
)

142 
∑th
 = 
	`check_vÆid_∑th
’©h, 
cuºít_obje˘
, "stat", 0);

144 i‡(
∑th
 == 0)

149 i‡(
	`°æí
(
∑th
) < 2)

151 #i‚de‡
LATTICE


152 
ãmµ©h
[0] = 
∑th
[0] ?Öath[0]: '.';

154 
ãmµ©h
[0] = 
∑th
[0];

156 
ãmµ©h
[1] = '\000';

157 
p
 = 
ãmµ©h
;

161 
	`°∫˝y
(
ãmµ©h
, 
∑th
, 
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 1);

162 
ãmµ©h
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 1] = '\0';

167 i‡–(
p
 = 
	`°ºchr
(
ãmµ©h
, '/') ) == 0)

169 
p
 = 
ãmµ©h
;

171 i‡(
p
[0] == '/' && ( (p[1] == '.' &&Ö[2] == '\0') ||Ö[1] == '\0') )

173 *
p
 = '\0';

177 i‡(
	`°©
(
ãmµ©h
, &
°
) < 0)

179 i‡(*
p
 == '\0')

183 i‡(
p
 !
ãmµ©h
)

185 
	`°æ˝y
(
ªgexµ©h
, 
p
 + 1, (regexppath) );

186 *
p
 = '\0';

190 
	`°æ˝y
(
ªgexµ©h
, 
p
, (regexppath) );

191 #i‚de‡
LATTICE


192 
	`°æ˝y
(
ãmµ©h
, ".", (temppath) );

194 
	`°æ˝y
(
ãmµ©h
, "", (temppath) );

197 
do_m©ch
 = 1;

199 i‡(*
p
 !'\0' && 
	`°rcmp
(
ãmµ©h
, ".") )

201 i‡(*
p
 == '/' && *(p + 1) != '\0')

203 
p
++;

205 
v
 = 
	`Æloˇã_em±y_¨øy
(1);

206 
	`ícode_°©
(&
v
->
ôem
[0], 
Êags
, 
p
, &
°
);

207  
v
;

212 i‡–(
dúp
 = 
	`›ídú
(
ãmµ©h
) ) == 0)

220 
de
 = 
	`ªaddú
(
dúp
); de; de =Ñeaddir(dirp) )

222 #ifde‡
USE_STRUCT_DIRENT


223 
«mñí
 = 
	`°æí
(
de
->
d_«me
);

225 
«mñí
 = 
de
->
d_«mÀn
;

227 i‡(!
do_m©ch
 && (
	`°rcmp
(
de
->
d_«me
, ".") == 0 || strcmp(de->d_name, "..") == 0) )

231 i‡(
do_m©ch
 && !
	`m©ch_°rög
(
ªgexµ©h
, 
de
->
d_«me
) )

235 
cou¡
++;

236 i‡(
cou¡
 >
MAX_ARRAY_SIZE
)

245 
v
 = 
	`Æloˇã_em±y_¨øy
(
cou¡
);

246 i‡(
cou¡
 == 0)

249 
	`˛o£dú
(
dúp
);

250  
v
;

252 
	`ªwöddú
(
dúp
);

253 
ídãmp
 = 
ãmµ©h
 + 
	`°æí
(temppath);

255 #ifde‡
LATTICE


256 i‡(
ídãmp
 !
ãmµ©h
)

259 
	`°rˇt
(
ídãmp
++, "/");

262 
i
 = 0, 
de
 = 
	`ªaddú
(
dúp
); i < 
cou¡
; de =Ñeaddir(dirp) )

264 #ifde‡
USE_STRUCT_DIRENT


265 
«mñí
 = 
	`°æí
(
de
->
d_«me
);

267 
«mñí
 = 
de
->
d_«mÀn
;

269 i‡(!
do_m©ch
 && (
	`°rcmp
(
de
->
d_«me
, ".") == 0 || strcmp(de->d_name, "..") == 0) )

273 i‡(
do_m©ch
 && !
	`m©ch_°rög
(
ªgexµ©h
, 
de
->
d_«me
) )

277 
de
->
d_«me
[
«mñí
] = '\0';

278 i‡(
Êags
 == - 1)

284 
	`°r˝y
(
ídãmp
, 
de
->
d_«me
);

285 
	`°©
(
ãmµ©h
, &
°
);

287 
	`ícode_°©
(&
v
->
ôem
[
i
], 
Êags
, 
de
->
d_«me
, &
°
);

288 
i
++;

290 
	`˛o£dú
(
dúp
);

293 
	`qs‹t
–(*)
v
->
ôem
, 
cou¡
,  v->ôem[0], (
Êags
 =- 1Ë? 
∑ºcmp
 : 
p°rcmp
);

294  
v
;

295 
	}
}

301 
	$ªmove_fûe
(*
∑th
)

303 
∑th
 = 
	`check_vÆid_∑th
’©h, 
cuºít_obje˘
, "remove_file", 1);

305 i‡(
∑th
 == 0)

309 i‡(
	`u∆ök
(
∑th
) == - 1)

314 
	}
}

319 
	$ÀgÆ_∑th
(*
∑th
)

321 *
p
;

323 i‡(
∑th
 =
NULL
)

327 i‡(
∑th
[0] == '/')

335 i‡(
	`°rchr
(
∑th
, '#') )

339 
p
 = 
∑th
;

340 
p
)

343 i‡(
p
[0] == '.')

345 i‡(
p
[1] == '\0')

350 i‡(
p
[1] == '.')

353 
p
++;

355 i‡(
p
[1] == '/' ||Ö[1] == '\0')

361 
p
 = (*)
	`_°r°r
(p, "/.");

362 i‡(
p
)

364 
p
++;

368 #i‡
	`deföed
(
AMIGA
Ë|| deföed(
LATTICE
)

378 i‡(
	`°rchr
(
∑th
, ':') )

384 
	}
}

390 
	$sm¨t_log
(*
îr‹_fûe
, 
löe
, *
wh©
, 
Êag
)

392 *
buff
;

393 
svÆue_t
 *
mªt
;

394 
¥agmas
;

396 
buff
 = (*)
	`DMALLOC
(
	`°æí
(
îr‹_fûe
Ë+ såÀn(
wh©
Ë+ ( (
¥agmas
 &
PRAGMA_ERROR_CONTEXT
Ë? 100 : 40), 
TAG_TEMPORARY
, "smart_log: 1");

398 i‡(
Êag
)

400 
	`•rötf
(
buff
, "%†löê%d: W¨nög: %s", 
îr‹_fûe
, 
löe
, 
wh©
);

404 
	`•rötf
(
buff
, "%†löê%d: %s", 
îr‹_fûe
, 
löe
, 
wh©
);

407 i‡(
¥agmas
 &
PRAGMA_ERROR_CONTEXT
)

409 *
ls
 = 
	`°ºchr
(
buff
, '\n');

410 *
tmp
;

411 i‡(
ls
)

413 
tmp
 = 
ls
 + 1;

414 *
tmp
 && 
	`is•a˚
(*tmp) )

416 
tmp
++;

418 i‡(! *
tmp
)

420 *
ls
 = 0;

423 
	`°rˇt
(
buff
, 
	`show_îr‹_c⁄ãxt
() );

427 
	`°rˇt
(
buff
, "\n");

430 i‡(
Êag
)

432 
	`•rötf
(
buff
, "%†löê%d: W¨nög: %s%s", 
îr‹_fûe
, 
löe
, 
wh©
, (
¥agmas
 &
PRAGMA_ERROR_CONTEXT
Ë? 
	`show_îr‹_c⁄ãxt
(): "\n");

436 
	`•rötf
(
buff
, "%†löê%d: %s%s", 
îr‹_fûe
, 
löe
, 
wh©
, (
¥agmas
 &
PRAGMA_ERROR_CONTEXT
Ë? 
	`show_îr‹_c⁄ãxt
(): "\n");

439 
	`sh¨e_™d_push_°rög
(
îr‹_fûe
);

440 
	`c›y_™d_push_°rög
(
buff
);

441 
mªt
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_LOG_ERROR
, 2);

442 i‡(!
mªt
 || mªà=(
svÆue_t
*) - 1)

444 
	`debug_mesßge
("%s", 
buff
);

446 
	`FREE
(
buff
);

447 
	}
}

452 
	$wrôe_fûe
(*
fûe
, *
°r
, 
Êags
)

454 
FILE
 *
f
;

456 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "write_file", 1);

457 i‡(!
fûe
)

461 
f
 = 
	`f›í
(
fûe
, (
Êags
 &1) ? "w" : "a");

462 i‡(
f
 == 0)

465 
	`îr‹
("QTZ_SîvîEngöe:Nÿ≥rmissi⁄†f‹ o≥nög fûê/%†f‹ %s.\n\"%s\"\n", 
fûe
, (
Êags
 &1Ë? "ovîwrôe" : "≠≥nd", 
	`p‹t_°ªº‹
(
î∫o
) );

467 
	`fwrôe
(
°r
, 
	`°æí
(°r), 1, 
f
);

468 
	`f˛o£
(
f
);

470 
	}
}

472 *
	$ªad_fûe
(*
fûe
, 
°¨t
, 
Àn
)

474 
°©
 
°
;

475 
FILE
 *
f
;

476 *
°r
, *
íd
;

477 *
p
, *
p2
;

478 
size
;

480 i‡(
Àn
 < 0)

484 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "read_file", 0);

486 i‡(!
fûe
)

494 i‡(
	`°©
(
fûe
, &
°
Ë=- 1 || (°.
°_mode
 &
S_IFDIR
) )

499 
f
 = 
	`f›í
(
fûe
, 
FOPEN_READ
);

500 i‡(
f
 == 0)

505 #i‚de‡
LATTICE


506 i‡(
	`f°©
(
	`fûío
(
f
), &
°
) == - 1)

509 
	`Áèl
("QTZ_ServerEngine:CouldÇot operate onán open file.\n");

513 
size
 = 
°
.
°_size
;

514 i‡(
size
 > 
READ_FILE_MAX_SIZE
)

516 i‡(
°¨t
 || 
Àn
)

518 
size
 = 
READ_FILE_MAX_SIZE
;

522 
	`f˛o£
(
f
);

526 i‡(
°¨t
 < 1)

528 
°¨t
 = 1;

530 i‡(!
Àn
)

532 
Àn
 = 
READ_FILE_MAX_SIZE
;

534 
°r
 = 
	`√w_°rög
(
size
, "read_file: str");

535 
°r
[
size
] = '\0';

536 i‡(!
size
)

539 
	`f˛o£
(
f
);

540  
°r
;

545 i‡–(
	`‰ód
(
°r
, 
size
, 1, 
f
) != 1) || !size)

547 
	`f˛o£
(
f
);

548 
	`FREE_MSTR
(
°r
);

552 i‡(
size
 > 
°
.
°_size
)

554 
size
 = 
°
.
°_size
;

557 
°
.
°_size
 -
size
;

558 
íd
 = 
°r
 + 
size
;

559 
p
 = 
°r
; --
°¨t
 && (
p2
 = (*)
	`memchr
’, '\n', 
íd
 -Ö) );)

561 
p
 = 
p2
 + 1;

565 
°¨t
 > 1);

567 i‡(
Àn
 !
READ_FILE_MAX_SIZE
 || 
°
.
°_size
)

569 
p2
 = 
°r
; 
p
 !
íd
;)

571 
c
;

573 
c
 = *
p
++;

574 *
p2
++ = 
c
;

575 i‡(
c
 == '\n')

577 i‡(!--
Àn
)

582 i‡(
c
 == '\0')

584 
	`f˛o£
(
f
);

585 
	`FREE_MSTR
(
°r
);

587 
	`îr‹
("QTZ_ServerEngine:Can'tÑead '\\0' intoá string!\n");

590 i‡(
Àn
 && 
°
.
°_size
)

592 
size
 -(
p2
 - 
°r
);

594 i‡(
size
 > 
°
.
°_size
)

596 
size
 = 
°
.
°_size
;

599 i‡–(
	`‰ód
(
p2
, 
size
, 1, 
f
) != 1) || !size)

601 
	`f˛o£
(
f
);

602 
	`FREE_MSTR
(
°r
);

605 
°
.
°_size
 -
size
;

607 ; 
p2
 !
íd
;)

609 i‡(*
p2
 == '\0')

611 
	`f˛o£
(
f
);

612 
	`FREE_MSTR
(
°r
);

614 
	`îr‹
("QTZ_ServerEngine:Can'tÅoÑead '\\0' intoá string!\n");

616 i‡(*
p2
++ == '\n')

617 i‡(!--
Àn
)

623 i‡(
°
.
°_size
 && 
Àn
)

626 
	`f˛o£
(
f
);

627 
	`FREE_MSTR
(
°r
);

631 *
p2
 = '\0';

632 
°r
 = 
	`exãnd_°rög
(°r, 
p2
 - str);

635 
	`f˛o£
(
f
);

636  
°r
;

637 
	}
}

639 *
	$ªad_byãs
(*
fûe
, 
°¨t
, 
Àn
, *
æí
)

641 
°©
 
°
;

642 
FILE
 *
Â
;

643 *
°r
;

644 
size
;

646 i‡(
Àn
 < 0)

650 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "read_bytes", 0);

651 i‡(!
fûe
)

655 #ifde‡
LATTICE


656 i‡(
	`°©
(
fûe
, &
°
) == - 1)

661 
Â
 = 
	`f›í
(
fûe
, "rb");

662 i‡(
Â
 =
NULL
)

666 #i‚de‡
LATTICE


667 i‡(
	`f°©
(
	`fûío
(
Â
), &
°
) == - 1)

669 
	`Áèl
("CouldÇot statán open file.\n");

672 
size
 = 
°
.
°_size
;

673 i‡(
°¨t
 < 0)

675 
°¨t
 = 
size
 + start;

678 i‡(
Àn
 == 0)

680 
Àn
 = 
size
;

682 i‡(
Àn
 > 
MAX_BYTE_TRANSFER
)

685 
	`îr‹
("Transfer isÅooÜarge.\n");

687 } i‡(
°¨t
 >
size
)

689 
	`f˛o£
(
Â
);

692 i‡–(
°¨t
 + 
Àn
Ë> 
size
)

694 
Àn
 = (
size
 - 
°¨t
);

697 i‡–(
size
 = 
	`f£ek
(
Â
, 
°¨t
, 0) ) < 0)

702 
°r
 = 
	`√w_°rög
(
Àn
, "read_bytes: str");

704 
size
 = 
	`‰ód
(
°r
, 1, 
Àn
, 
Â
);

706 
	`f˛o£
(
Â
);

708 i‡(
size
 <= 0)

710 
	`FREE_MSTR
(
°r
);

716 
°r
[
size
] = '\0';

718 *
æí
 = 
size
;

719  
°r
;

720 
	}
}

726 
	$wrôe_byãs
(*
fûe
, 
°¨t
, *
°r
, 
theLígth
)

728 
°©
 
°
;

729 
size
;

730 
FILE
 *
Â
;

732 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "write_bytes", 1);

734 i‡(!
fûe
)

738 i‡(
theLígth
 > 
MAX_BYTE_TRANSFER
)

748 i‡(
	`°©
(
fûe
, &
°
) == - 1)

750 
Â
 = 
	`f›í
(
fûe
, "wb");

754 
Â
 = 
	`f›í
(
fûe
, "r+b");

756 i‡(
Â
 =
NULL
)

760 #i‚de‡
LATTICE


761 i‡(
	`f°©
(
	`fûío
(
Â
), &
°
) == - 1)

763 
	`Áèl
("CouldÇot statán open file.\n");

766 
size
 = 
°
.
°_size
;

767 i‡(
°¨t
 < 0)

769 
°¨t
 = 
size
 + start;

771 i‡(
°¨t
 < 0 || sèπ > 
size
)

773 
	`f˛o£
(
Â
);

776 i‡–(
size
 = 
	`f£ek
(
Â
, 
°¨t
, 0) ) < 0)

778 
	`f˛o£
(
Â
);

781 
size
 = 
	`fwrôe
(
°r
, 1, 
theLígth
, 
Â
);

783 
	`f˛o£
(
Â
);

785 i‡(
size
 <= 0)

790 
	}
}

796 
	$fûe_size
(*
fûe
)

798 
°©
 
°
;

799 
ªt
;

801 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "file_size", 0);

802 i‡(!
fûe
)

807 i‡(
	`°©
(
fûe
, &
°
) == - 1)

809 
ªt
 = - 1;

811 i‡(
S_IFDIR
 &
°
.
°_mode
)

813 
ªt
 = - 2;

817 
ªt
 = 
°
.
°_size
;

820  
ªt
;

821 
	}
}

833 *
	$check_vÆid_∑th
(*
∑th
, 
obje˘_t
 *
ˇŒ_obje˘
, *
ˇŒ_fun
, 
wrôeÊg
)

835 i‡(
ˇŒ_obje˘
 =0 || cÆl_obje˘->
Êags
 &
O_DESTRUCTED
)

840 
svÆue_t
 
≠∂y_ªt_vÆue
;

842 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "check_valid_path");

843 
≠∂y_ªt_vÆue
.
ty≥
 = 
T_STRING
;

844 
≠∂y_ªt_vÆue
.
subty≥
 = 
STRING_MALLOC
;

845 
∑th
 = 
≠∂y_ªt_vÆue
.
u
.
°rög
 = 
	`°rög_c›y
(path, "check_valid_path");

847 i‡(
∑th
[0] == '/')

849 
∑th
++;

851 #i‚de‡
LATTICE


852 i‡(
∑th
[0] == '\0')

854 
∑th
 = ".";

857 i‡(
	`ÀgÆ_∑th
(
∑th
) )

859  
∑th
;

863 
	}
}

865 
	$m©ch_°rög
(*
m©ch
, *
°r
)

867 
i
;

869 
agaö
: i‡(*
°r
 ='\0' && *
m©ch
 == '\0')

873 *
m©ch
)

876 i‡(*
°r
 == '\0')

880 
°r
++;

881 
m©ch
++;

882 
agaö
;

884 
m©ch
++;

885 i‡(*
m©ch
 == '\0')

889 
i
 = 0; 
°r
[i] != '\0'; i++)

890 i‡(
	`m©ch_°rög
(
m©ch
, 
°r
 + 
i
) )

898 
m©ch
++;

899 i‡(*
m©ch
 == '\0')

905 i‡(*
m©ch
 =*
°r
)

907 
m©ch
++;

908 
°r
++;

909 
agaö
;

913 
	}
}

920 #i‚de‡
S_ISDIR


921 
	#S_ISDIR
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFDIR
)

	)

924 #i‚de‡
S_ISREG


925 
	#S_ISREG
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFREG
)

	)

928 #i‚de‡
S_ISCHR


929 
	#S_ISCHR
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFCHR
)

	)

932 #i‚de‡
S_ISBLK


933 
	#S_ISBLK
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFBLK
)

	)

936 
°©
 
	gto_°©s
, 
	g‰om_°©s
;

938 
	$c›y
(*
‰om
, *
to
)

940 
ifd
;

941 
ofd
;

942 
buf
[1024 *8];

943 
Àn
;

945 i‡(!
	`S_ISREG
(
‰om_°©s
.
°_mode
) )

948 } i‡(
	`u∆ök
(
to
Ë&& 
î∫o
 !
ENOENT
)

952 
ifd
 = 
	`›í
(
‰om
, 
OPEN_READ
);

953 i‡(
ifd
 < 0)

955  
î∫o
;

957 
ofd
 = 
	`›í
(
to
, 
OPEN_WRITE
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

958 i‡(
ofd
 < 0)

960 
	`˛o£
(
ifd
);

963 #ifde‡
HAS_FCHMOD


964 i‡(
	`fchmod
(
ofd
, 
‰om_°©s
.
°_mode
 &0777) )

966 
	`˛o£
(
ifd
);

967 
	`˛o£
(
ofd
);

968 
	`u∆ök
(
to
);

973  (
Àn
 = 
	`ªad
(
ifd
, 
buf
, (buf) ) ) > 0)

975 
wrŸe
 = 0;

976 *
bp
 = 
buf
;

980 
wrŸe
 = 
	`wrôe
(
ofd
, 
bp
, 
Àn
);

981 i‡(
wrŸe
 < 0)

983 
	`˛o£
(
ifd
);

984 
	`˛o£
(
ofd
);

985 
	`u∆ök
(
to
);

988 
bp
 +
wrŸe
;

989 
Àn
 -
wrŸe
;

992 
Àn
 > 0);

994 i‡(
Àn
 < 0)

996 
	`˛o£
(
ifd
);

997 
	`˛o£
(
ofd
);

998 
	`u∆ök
(
to
);

1001 i‡(
	`˛o£
(
ifd
) < 0)

1003 
	`˛o£
(
ofd
);

1006 i‡(
	`˛o£
(
ofd
) < 0)

1010 #ifde‡
FCHMOD_MISSING


1011 i‡(
	`chmod
(
to
, 
‰om_°©s
.
°_mode
 &0777) )

1018 
	}
}

1024 #ifde‡
F_RENAME


1025 
	$do_move
(*
‰om
, *
to
, 
Êag
)

1027 i‡(
	`l°©
(
‰om
, &
‰om_°©s
) != 0)

1030 
	`îr‹
("QTZ_SîvîEngöe:/%s: faûed\n", 
‰om
);

1033 i‡(
	`l°©
(
to
, &
to_°©s
) == 0)

1035 i‡(
‰om_°©s
.
°_dev
 =
to_°©s
.°_dev && from_°©s.
°_öo
 ==Åo_stats.st_ino)

1039 
	`îr‹
("QTZ_SîvîEngöe:`/%s'ánd `/%s'áªÅhêßmêfûe", 
‰om
, 
to
);

1042 i‡(
	`S_ISDIR
(
to_°©s
.
°_mode
) )

1044 
	`îr‹
("/%s: c™nŸ ovîwrôêdúe˘‹y", 
to
);

1048 i‡(
î∫o
 !
ENOENT
)

1050 
	`îr‹
("/%s: unknow¿îr‹\n", 
to
);

1053 #ifde‡
SYSV


1054 i‡–(
Êag
 =
F_RENAME
Ë&& 
	`fûe_size
(
‰om
) == - 2)

1056 
cmd_buf
[100];

1058 
	`•rötf
(
cmd_buf
, "/u§/lib/mv_dú %†%s", 
‰om
, 
to
);

1059  
	`sy°em
(
cmd_buf
);

1063 i‡–(
Êag
 =
F_RENAME
Ë&& (
	`ª«me
(
‰om
, 
to
) == 0) )

1067 #ifde‡
F_LINK


1068 i‡(
Êag
 =
F_LINK
)

1070 i‡(
	`lök
(
‰om
, 
to
) == 0)

1077 i‡(
î∫o
 !
EXDEV
)

1079 i‡(
Êag
 =
F_RENAME
)

1082 
	`îr‹
("QTZ_SîvîEngöe:ˇ¬Ÿ movê`/%s'Åÿ`/%s'\n", 
‰om
, 
to
);

1087 
	`îr‹
("QTZ_SîvîEngöe:C™nŸÜök `/%s'Åÿ`/%s'\n", 
‰om
, 
to
);

1093 i‡(
Êag
 =
F_RENAME
)

1095 i‡(
	`c›y
(
‰om
, 
to
) )

1099 i‡(
	`u∆ök
(
‰om
) )

1102 
	`îr‹
("QTZ_SîvîEngöe:C™nŸÑemovê`/%s'", 
‰om
);

1106 #ifde‡
F_LINK


1107 i‡(
Êag
 =
F_LINK
)

1109 i‡(
	`symlök
(
‰om
, 
to
) == 0)

1117 
	}
}

1120 
	$debug_≥º‹
(*
wh©
, *
fûe
)

1122 
	`debug_mesßge
("QTZ_SîvîEngöe: debug_≥º‹: %s:%s\n", 
wh©
, 
	`p‹t_°ªº‹
(
î∫o
) );

1123 
	}
}

1130 #ifde‡
F_RENAME


1131 
	$do_ª«me
(*
‰
, *
t
, 
Êag
)

1133 *
‰om
, *
to
, 
tbuf
[3];

1134 
√w‰om
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

1135 
Êí
;

1136 
svÆue_t
 
‰om_sv
 =

1138 
T_NUMBER


1140 
svÆue_t
 
to_sv
 =

1142 
T_NUMBER


1144 
svÆue_t
 
≠∂y_ªt_vÆue
;

1154 
‰om
 = 
	`check_vÆid_∑th
(
‰
, 
cuºít_obje˘
, "rename", 1);

1155 i‡(!
‰om
)

1160 
	`assign_svÆue
(&
‰om_sv
, &
≠∂y_ªt_vÆue
);

1162 
to
 = 
	`check_vÆid_∑th
(
t
, 
cuºít_obje˘
, "rename", 1);

1163 i‡(!
to
)

1168 
	`assign_svÆue
(&
to_sv
, &
≠∂y_ªt_vÆue
);

1169 i‡(!
	`°æí
(
to
Ë&& !
	`°rcmp
(
t
, "/") )

1171 
to
 = 
tbuf
;

1172 
	`•rötf
(
to
, "./");

1176 
Êí
 = 
	`°æí
(
‰om
);

1177 i‡(
Êí
 > 1 && 
‰om
[flen - 1] == '/')

1179 *
p
 = 
‰om
 + 
Êí
 - 2;

1180 
n
;

1182 *
p
 ='/' && (∞> 
‰om
) )

1184 
p
--;

1186 
n
 = 
p
 - 
‰om
 + 1;

1187 
	`mem˝y
(
√w‰om
, 
‰om
, 
n
);

1188 
√w‰om
[
n
] = 0;

1189 
‰om
 = 
√w‰om
;

1192 i‡(
	`fûe_size
(
to
) == - 2)

1195 *
˝
;

1196 
√wto
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

1198 
˝
 = 
	`°ºchr
(
‰om
, '/');

1199 i‡(
˝
)

1201 
˝
++;

1205 
˝
 = 
‰om
;

1208 
	`•rötf
(
√wto
, "%s/%s", 
to
, 
˝
);

1209  
	`do_move
(
‰om
, 
√wto
, 
Êag
);

1213  
	`do_move
(
‰om
, 
to
, 
Êag
);

1215 
	}
}

1218 
	$c›y_fûe
(*
‰om
, *
to
)

1220 
buf
[128];

1221 
‰om_fd
, 
to_fd
;

1222 
num_ªad
, 
num_wrôãn
;

1223 *
wrôe_±r
;

1224 
svÆue_t
 
‰om_sv
 =

1226 
T_NUMBER


1228 
svÆue_t
 
to_sv
 =

1230 
T_NUMBER


1232 
svÆue_t
 
≠∂y_ªt_vÆue
;

1234 
‰om
 = 
	`check_vÆid_∑th
(‰om, 
cuºít_obje˘
, "move_file", 0);

1236 
	`assign_svÆue
(&
‰om_sv
, &
≠∂y_ªt_vÆue
);

1238 
to
 = 
	`check_vÆid_∑th
—o, 
cuºít_obje˘
, "move_file", 1);

1239 i‡(
‰om
 == 0)

1243 i‡(
to
 == 0)

1248 
	`assign_svÆue
(&
to_sv
, &
≠∂y_ªt_vÆue
);

1250 
‰om_fd
 = 
	`›í
(
‰om
, 
OPEN_READ
);

1251 i‡(
‰om_fd
 < 0)

1256 i‡(
	`fûe_size
(
to
) == - 2)

1259 *
˝
;

1260 
√wto
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

1262 
˝
 = 
	`°ºchr
(
‰om
, '/');

1263 i‡(
˝
)

1265 
˝
++;

1269 
˝
 = 
‰om
;

1272 
	`•rötf
(
√wto
, "%s/%s", 
to
, 
˝
);

1273 
	`˛o£
(
‰om_fd
);

1274  
	`c›y_fûe
(
‰om
, 
√wto
);

1276 
to_fd
 = 
	`›í
(
to
, 
OPEN_WRITE
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

1277 i‡(
to_fd
 < 0)

1279 
	`˛o£
(
‰om_fd
);

1282  (
num_ªad
 = 
	`ªad
(
‰om_fd
, 
buf
, 128) ) != 0)

1284 i‡(
num_ªad
 < 0)

1286 
	`debug_≥º‹
("c›y_fûe:Ñód", 
‰om
);

1287 
	`˛o£
(
‰om_fd
);

1288 
	`˛o£
(
to_fd
);

1291 
wrôe_±r
 = 
buf
;

1292 
wrôe_±r
 !(
buf
 + 
num_ªad
) )

1294 
num_wrôãn
 = 
	`wrôe
(
to_fd
, 
wrôe_±r
, 
num_ªad
);

1295 i‡(
num_wrôãn
 < 0)

1297 
	`debug_≥º‹
("c›y_fûe: wrôe", 
to
);

1298 
	`˛o£
(
‰om_fd
);

1299 
	`˛o£
(
to_fd
);

1302 
wrôe_±r
 +
num_wrôãn
;

1305 
	`˛o£
(
‰om_fd
);

1306 
	`˛o£
(
to_fd
);

1308 
	}
}

1314 
	$dump_fûe_des¸ùt‹s
(
outbuf„r_t
 *
out
)

1316 
i
;

1317 
dev_t
 
dev
;

1318 
°©
 
°buf
;

1320 
	`outbuf_add
(
out
, "Fd Device Number Inode Mode Uid Gid Size\n");

1321 
	`outbuf_add
(
out
, "-- ------------- ----- ------ ----- ----- ----------\n");

1323 
i
 = 0; i < 
FD_SETSIZE
; i++)

1326 i‡(
	`f°©
(
i
, &
°buf
) == - 1)

1331 #i‡!
	`deföed
(
LATTICE
)

1332 i‡(
	`S_ISCHR
(
°buf
.
°_mode
Ë|| 
	`S_ISBLK
(stbuf.st_mode) )

1334 
dev
 = 
°buf
.
°_rdev
;

1339 
dev
 = 
°buf
.
°_dev
;

1342 
	`outbuf_addv
(
out
, "%2d", 
i
);

1343 
	`outbuf_addv
(
out
, "%13x", 
dev
);

1344 
	`outbuf_addv
(
out
, "%9d", 
°buf
.
°_öo
);

1345 
	`outbuf_add
(
out
, " ");

1347 
°buf
.
°_mode
 &
S_IFMT
)

1350 
S_IFDIR
:

1351 
	`outbuf_add
(
out
, "d");

1353 
S_IFCHR
:

1354 
	`outbuf_add
(
out
, "c");

1356 #ifde‡
S_IFBLK


1357 
S_IFBLK
:

1358 
	`outbuf_add
(
out
, "b");

1361 
S_IFREG
:

1362 
	`outbuf_add
(
out
, "f");

1364 #ifde‡
S_IFIFO


1365 
S_IFIFO
:

1366 
	`outbuf_add
(
out
, "p");

1369 #ifde‡
S_IFLNK


1370 
S_IFLNK
:

1371 
	`outbuf_add
(
out
, "l");

1374 #ifde‡
S_IFSOCK


1375 
S_IFSOCK
:

1376 
	`outbuf_add
(
out
, "s");

1380 
	`outbuf_add
(
out
, "?");

1384 
	`outbuf_addv
(
out
, "%5o", 
°buf
.
°_mode
 &~
S_IFMT
);

1385 
	`outbuf_addv
(
out
, "%7d", 
°buf
.
°_uid
);

1386 
	`outbuf_addv
(
out
, "%7d", 
°buf
.
°_gid
);

1387 
	`outbuf_addv
(
out
, "%12d", 
°buf
.
°_size
);

1388 
	`outbuf_add
(
out
, "\n");

1390 
	}
}

	@src/generate.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"gíî©e.h
"

5 
	~"compûî.h
"

6 
	~"icode.h
"

7 
	~"Àx.h
"

9 
∑r£_node_t
 *
›timize
(parse_node_t*);

10 
∑r£_node_t
 **
	gœ°_loˇl_ªfs
 = 0;

11 
	g›timizî_num_loˇls
;

27 
	$›timize_ex¥_li°
(
∑r£_node_t
 *
ex¥
)

29 i‡(!
ex¥
)

35 
ex¥
->
v
.ex¥ = 
	`›timize
(expr->v.expr);

38  (
ex¥
 =Éx¥->
r
.expr) );

39 
	}
}

45 
	$›timize_lvÆue_li°
(
∑r£_node_t
 *
ex¥
)

47  (
ex¥
 =Éx¥->
r
.expr) )

49 
ex¥
->
v
.ex¥ = 
	`›timize
”x¥->
l
.expr);

51 
	}
}

57 
	#OPT
(
x
Ëx = 
	`›timize
(x)

	)

58 
	#OPTIMIZER_IN_LOOP
 1

	)

59 
	#OPTIMIZER_IN_COND
 2

	)

60 
	g›timizî_°©e
 = 0;

62 
∑r£_node_t
 *
	$›timize
(
∑r£_node_t
 *
ex¥
)

64 i‡(!
ex¥
)

69 
ex¥
->
köd
)

71 
NODE_TERNARY_OP
:

72 
	`OPT
(
ex¥
->
l
.expr);

73 
	`OPT
(
ex¥
->
r
.ex¥->
l
.expr);

74 
	`OPT
(
ex¥
->
r
.expr->r.expr);

76 
NODE_BINARY_OP
:

77 
	`OPT
(
ex¥
->
l
.expr);

78 i‡(
ex¥
->
v
.
numbî
 =
F_ASSIGN
)

80 i‡(
	`IS_NODE
(
ex¥
->
r
.ex¥, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
) )

82 i‡(!
›timizî_°©e
)

84 
x
 = 
ex¥
->
r
.ex¥->
l
.
numbî
;

86 i‡(
œ°_loˇl_ªfs
[
x
])

88 
œ°_loˇl_ªfs
[
x
]->
v
.
numbî
 = 
F_TRANSFER_LOCAL
;

89 
œ°_loˇl_ªfs
[
x
] = 0;

94 
	`OPT
(
ex¥
->
r
.expr);

96 
NODE_UNARY_OP
:

97 
	`OPT
(
ex¥
->
r
.expr);

99 
NODE_OPCODE
:

101 
NODE_TERNARY_OP_1
:

102 
	`OPT
(
ex¥
->
l
.expr);

103 
	`OPT
(
ex¥
->
r
.ex¥->
l
.expr);

104 
	`OPT
(
ex¥
->
r
.expr->r.expr);

106 
NODE_BINARY_OP_1
:

107 
	`OPT
(
ex¥
->
l
.expr);

108 
	`OPT
(
ex¥
->
r
.expr);

110 
NODE_UNARY_OP_1
:

111 
	`OPT
(
ex¥
->
r
.expr);

112 i‡(
ex¥
->
v
.
numbî
 =
F_VOID_ASSIGN_LOCAL
)

114 i‡(
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
] && !
›timizî_°©e
)

116 
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
]->
v
.numbî = 
F_TRANSFER_LOCAL
;

117 
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
] = 0;

121 
NODE_OPCODE_1
:

122 i‡(
ex¥
->
v
.
numbî
 =
F_LOCAL
 ||Éx¥->v.numbî =
F_LOCAL_LVALUE
)

124 i‡(
ex¥
->
v
.
numbî
 =
F_LOCAL
)

126 i‡(!
›timizî_°©e
)

128 
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
] =Éxpr;

132 
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
] = 0;

135 
NODE_OPCODE_2
:

137 
NODE_RETURN
:

138 
	`OPT
(
ex¥
->
r
.expr);

140 
NODE_STRING
:

141 
NODE_REAL
:

142 
NODE_NUMBER
:

144 
NODE_LAND_LOR
:

145 
NODE_BRANCH_LINK
:

146 
	`OPT
(
ex¥
->
l
.expr);

147 
	`OPT
(
ex¥
->
r
.expr);

149 
NODE_CALL_2
:

150 
NODE_CALL_1
:

151 
NODE_CALL
:

152 
	`›timize_ex¥_li°
(
ex¥
->
r
.expr);

154 
NODE_TWO_VALUES
:

155 
	`OPT
(
ex¥
->
l
.expr);

156 
	`OPT
(
ex¥
->
r
.expr);

158 
NODE_CONTROL_JUMP
:

159 
NODE_PARAMETER
:

160 
NODE_PARAMETER_LVALUE
:

162 
NODE_IF
:

164 
ö_c⁄d
;

165 
	`OPT
(
ex¥
->
v
.expr);

166 
ö_c⁄d
 = (
›timizî_°©e
 &
OPTIMIZER_IN_COND
);

167 
›timizî_°©e
 |
OPTIMIZER_IN_COND
;

168 
	`OPT
(
ex¥
->
l
.expr);

169 
	`OPT
(
ex¥
->
r
.expr);

170 
›timizî_°©e
 &~
OPTIMIZER_IN_COND
;

171 
›timizî_°©e
 |
ö_c⁄d
;

174 
NODE_LOOP
:

176 
ö_lo›
 = (
›timizî_°©e
 &
OPTIMIZER_IN_LOOP
);

177 
›timizî_°©e
 |
OPTIMIZER_IN_LOOP
;

178 
	`OPT
(
ex¥
->
v
.expr);

179 
	`OPT
(
ex¥
->
l
.expr);

180 
	`OPT
(
ex¥
->
r
.expr);

181 
›timizî_°©e
 &~
OPTIMIZER_IN_LOOP
;

182 
›timizî_°©e
 |
ö_lo›
;

185 
NODE_FOREACH
:

186 
	`OPT
(
ex¥
->
l
.expr);

187 
	`OPT
(
ex¥
->
r
.expr);

188 
	`OPT
(
ex¥
->
v
.expr);

190 
NODE_CASE_NUMBER
:

191 
NODE_CASE_STRING
:

192 
NODE_DEFAULT
:

194 
NODE_SWITCH_STRINGS
:

195 
NODE_SWITCH_NUMBERS
:

196 
NODE_SWITCH_DIRECT
:

197 
NODE_SWITCH_RANGES
:

199 
ö_c⁄d
;

200 
	`OPT
(
ex¥
->
l
.expr);

201 
ö_c⁄d
 = (
›timizî_°©e
 &
OPTIMIZER_IN_COND
);

202 
›timizî_°©e
 |
OPTIMIZER_IN_COND
;

203 
	`OPT
(
ex¥
->
r
.expr);

204 
›timizî_°©e
 &~
OPTIMIZER_IN_COND
;

205 
›timizî_°©e
 |
ö_c⁄d
;

208 
NODE_CATCH
:

209 
	`OPT
(
ex¥
->
r
.expr);

211 
NODE_LVALUE_EFUN
:

212 
	`OPT
(
ex¥
->
l
.expr);

213 
	`›timize_lvÆue_li°
(
ex¥
->
r
.expr);

216 
NODE_FUNCTION_CONSTRUCTOR
:

228 i‡(
ex¥
->
r
.expr)

230 
	`›timize_ex¥_li°
(
ex¥
->
r
.expr);

234 
NODE_ANON_FUNC
:

236 
NODE_EFUN
:

237 
	`›timize_ex¥_li°
(
ex¥
->
r
.expr);

242  
ex¥
;

243 
	}
}

249 #ifde‡
DEBUG


250 *
	gÕc_åì_«me
[] =

257 
	$Õc_åì
(
∑r£_node_t
 *
de°
, 
num
)

259 
∑r£_node_t
 *
≤
;

261 
de°
->
köd
 = 
NODE_CALL
;

262 
de°
->
v
.
numbî
 = 
F_AGGREGATE
;

263 
de°
->
ty≥
 = 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
;

264 
de°
->
l
.
numbî
 = 
num
;

265 i‡(!
num
)

267 
de°
->
r
.
ex¥
 = 0;

271 
de°
->
r
.
ex¥
 = 
	`√w_node_no_löe
();

272 
de°
->
r
.
ex¥
->
köd
 = 
num
--;

273 
≤
 = 
de°
->
r
.
ex¥
;

274 
num
--)

276 
≤
->
r
.
ex¥
 = 
	`√w_node_no_löe
();

277 
≤
->
ty≥
 = 0;

278 
≤
 =Ön->
r
.
ex¥
;

280 
≤
->
ty≥
 = 0;

281 
≤
->
r
.
ex¥
 = 0;

282 
de°
->
r
.
ex¥
->
l
.ex¥ = 
≤
;

284 
	}
}

286 
	$Õc_åì_numbî
(
∑r£_node_t
 *
de°
, 
num
)

288 
	`CREATE_NUMBER
(
de°
->
v
.
ex¥
, 
num
);

289 
	}
}

291 
	$Õc_åì_ªÆ
(
∑r£_node_t
 *
de°
, 
ªÆ
)

293 
	`CREATE_REAL
(
de°
->
v
.
ex¥
, 
ªÆ
);

294 
	}
}

296 
	$Õc_åì_ex¥
(
∑r£_node_t
 *
de°
,Ö¨£_node_à*
ex¥
)

298 
de°
->
v
.
ex¥
 = 
	`√w_node_no_löe
();

299 
	`Õc_åì_f‹m
(
ex¥
, 
de°
->
v
.expr);

300 
	}
}

302 
	$Õc_åì_°rög
(
∑r£_node_t
 *
de°
, *
°r
)

304 
	`CREATE_STRING
(
de°
->
v
.
ex¥
, 
°r
);

305 
	}
}

307 
	$Õc_åì_li°
(
∑r£_node_t
 *
de°
,Ö¨£_node_à*
ex¥
)

309 
∑r£_node_t
 *
≤
;

310 
num
 = 0;

312 
≤
 = 
ex¥
;

313 
≤
)

315 
≤
 =Ön->
r
.
ex¥
;

316 
num
++;

319 
de°
->
v
.
ex¥
 = 
	`√w_node_no_löe
();

320 
	`Õc_åì
(
de°
->
v
.
ex¥
, 
num
);

321 
de°
 = de°->
v
.
ex¥
;

322 
ex¥
)

324 
de°
 = de°->
r
.
ex¥
;

325 
	`Õc_åì_ex¥
(
de°
, 
ex¥
->
v
.expr);

326 
ex¥
 =Éx¥->
r
.expr;

328 
	}
}

330 
	#Õc_åì_›c
(
x
, 
y
Ë
	`Õc_åì_°rög
(x, 
	`gë_f_«me
(y & ~
NOVALUE_USED_FLAG
))

	)

332 
	#ARG_1
 
de°
->
r
.
ex¥


	)

333 
	#ARG_2
 
de°
->
r
.
ex¥
->r.
	)
ex¥

334 
	#ARG_3
 
de°
->
r
.
ex¥
->r.ex¥->r.
	)
ex¥

335 
	#ARG_4
 
de°
->
r
.
ex¥
->r.ex¥->r.ex¥->r.
	)
ex¥

336 
	#ARG_5
 
de°
->
r
.
ex¥
->r.ex¥->r.ex¥->r.ex¥->r.
	)
ex¥

338 
	$Õc_åì_f‹m
(
∑r£_node_t
 *
ex¥
,Ö¨£_node_à*
de°
)

340 i‡(!
ex¥
)

342 
de°
->
köd
 = 
NODE_NUMBER
;

343 
de°
->
ty≥
 = 
TYPE_ANY
;

344 
de°
->
v
.
numbî
 = 0;

348 
ex¥
->
köd
)

350 
NODE_TERNARY_OP
:

351 
	`Õc_åì
(
de°
, 4);

352 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
r
.ex¥->
v
.
numbî
);

353 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
l
.expr);

354 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
r
.expr);

356 
NODE_TERNARY_OP_1
:

357 
	`Õc_åì
(
de°
, 5);

358 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
r
.ex¥->
v
.
numbî
);

359 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
ty≥
);

360 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
l
.expr);

361 
	`Õc_åì_ex¥
(
ARG_5
, 
ex¥
->
r
.expr);

363 
NODE_BINARY_OP
:

364 
NODE_LAND_LOR
:

365 
NODE_BRANCH_LINK
:

366 
	`Õc_åì
(
de°
, 4);

367 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

368 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
l
.expr);

369 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
r
.expr);

371 
NODE_TWO_VALUES
:

372 
	`Õc_åì
(
de°
, 3);

373 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
l
.expr);

374 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
r
.expr);

376 
NODE_BINARY_OP_1
:

377 
	`Õc_åì
(
de°
, 5);

378 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

379 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
ty≥
);

380 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
l
.expr);

381 
	`Õc_åì_ex¥
(
ARG_5
, 
ex¥
->
r
.expr);

383 
NODE_UNARY_OP
:

384 
	`Õc_åì
(
de°
, 3);

385 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

386 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
r
.expr);

388 
NODE_UNARY_OP_1
:

389 
	`Õc_åì
(
de°
, 4);

390 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

391 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
l
.
numbî
);

392 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
r
.expr);

394 
NODE_OPCODE
:

395 
	`Õc_åì
(
de°
, 2);

396 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

398 
NODE_CONTROL_JUMP
:

399 
NODE_PARAMETER
:

400 
NODE_PARAMETER_LVALUE
:

401 
	`Õc_åì
(
de°
, 2);

402 
	`Õc_åì_numbî
(
ARG_2
, 
ex¥
->
v
.
numbî
);

404 
NODE_OPCODE_1
:

405 
	`Õc_åì
(
de°
, 3);

406 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

407 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
l
.
numbî
);

409 
NODE_OPCODE_2
:

410 
	`Õc_åì
(
de°
, 4);

411 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

412 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
l
.
numbî
);

413 
	`Õc_åì_numbî
(
ARG_4
, 
ex¥
->
r
.
numbî
);

415 
NODE_RETURN
:

416 
	`Õc_åì
(
de°
, 2);

417 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
r
.expr);

419 
NODE_STRING
:

420 
NODE_NUMBER
:

421 
	`Õc_åì
(
de°
, 2);

422 
	`Õc_åì_numbî
(
ARG_2
, 
ex¥
->
v
.
numbî
);

424 
NODE_REAL
:

425 
	`Õc_åì
(
de°
, 2);

426 
	`Õc_åì_ªÆ
(
ARG_2
, 
ex¥
->
v
.
ªÆ
);

428 
NODE_CALL_2
:

429 
NODE_CALL_1
:

430 
NODE_CALL
:

431 
	`Õc_åì
(
de°
, 4);

432 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

433 
	`Õc_åì_li°
(
ARG_3
, 
ex¥
->
r
.expr);

434 
	`Õc_åì_numbî
(
ARG_4
, 
ex¥
->
l
.
numbî
);

436 
NODE_IF
:

437 
NODE_FOREACH
:

438 
	`Õc_åì
(
de°
, 4);

439 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
l
.expr);

440 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
r
.expr);

441 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
v
.expr);

443 
NODE_LOOP
:

444 
	`Õc_åì
(
de°
, 5);

445 
	`Õc_åì_numbî
(
ARG_2
, 
ex¥
->
ty≥
);

446 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
v
.expr);

447 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
r
.expr);

448 
	`Õc_åì_ex¥
(
ARG_5
, 
ex¥
->
l
.expr);

450 
NODE_CASE_NUMBER
:

451 
NODE_CASE_STRING
:

452 
NODE_DEFAULT
:

453 
	`Õc_åì
(
de°
, 1);

455 
NODE_SWITCH_STRINGS
:

456 
NODE_SWITCH_NUMBERS
:

457 
NODE_SWITCH_DIRECT
:

458 
NODE_SWITCH_RANGES
:

459 
	`Õc_åì
(
de°
, 3);

460 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
l
.expr);

461 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
r
.expr);

463 
NODE_CATCH
:

464 
	`Õc_åì
(
de°
, 2);

465 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
r
.expr);

467 
NODE_LVALUE_EFUN
:

468 
	`Õc_åì
(
de°
, 3);

469 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
l
.expr);

470 
	`Õc_åì_li°
(
ARG_3
, 
ex¥
->
r
.expr);

472 
NODE_FUNCTION_CONSTRUCTOR
:

473 
NODE_EFUN
:

474 
	`Õc_åì
(
de°
, 3);

475 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

476 
	`Õc_åì_li°
(
ARG_3
, 
ex¥
->
r
.expr);

479 
	`Õc_åì
(
de°
, 1);

480 
	`Õc_åì_°rög
(
ARG_1
, "!GARBAGE!");

483 
	`Õc_åì_°rög
(
ARG_1
, 
Õc_åì_«me
[
ex¥
->
köd
]);

484 
	}
}

487 
	$gíî©e
(
∑r£_node_t
 *
node
)

489 
whîe
 = 
CURRENT_PROGRAM_SIZE
;

491 i‡(
num_∑r£_îr‹
)

496 
	`i_gíî©e_node
(
node
);

498 
	`‰ì_åì
();

500  
whîe
;

501 
	}
}

507 
	$›timizî_°¨t_fun˘i⁄
(
n
)

509 i‡(
n
)

511 
œ°_loˇl_ªfs
 = 
	`CALLOCATE
(
n
, 
∑r£_node_t
 *, 
TAG_COMPILER
, "c_start_function");

512 
›timizî_num_loˇls
 = 
n
;

513 
n
--)

515 
œ°_loˇl_ªfs
[
n
] = 0;

520 
œ°_loˇl_ªfs
 = 0;

522 
	}
}

528 
	$›timizî_íd_fun˘i⁄
()

530 
i
;

531 i‡(
œ°_loˇl_ªfs
)

533 
i
 = 0; i < 
›timizî_num_loˇls
; i++)

534 i‡(
œ°_loˇl_ªfs
[
i
])

536 
œ°_loˇl_ªfs
[
i
]->
v
.
numbî
 = 
F_TRANSFER_LOCAL
;

538 
	`FREE
(
œ°_loˇl_ªfs
);

539 
œ°_loˇl_ªfs
 = 0;

541 
	}
}

547 
	$gíî©e_fun˘i⁄
(
compûî_fun˘i⁄_t
 *
f
, 
∑r£_node_t
 *
node
, 
num
)

549 
ªt
;

550 ()
f
;

551 i‡(
¥agmas
 &
PRAGMA_OPTIMIZE
)

553 
	`›timizî_°¨t_fun˘i⁄
(
num
);

554 
›timizî_°©e
 = 0;

555 
node
 = 
	`›timize
(node);

556 
	`›timizî_íd_fun˘i⁄
();

558 
ªt
 = 
	`gíî©e
(
node
);

559  
ªt
;

560 
	}
}

566 
	$node_Æways_åue
(
∑r£_node_t
 *
node
)

568 i‡(
node
->
köd
 =
NODE_NUMBER
)

570  
node
->
v
.
numbî
;

573 
	}
}

579 
	$gíî©e_c⁄dôi⁄Æ_bønch
(
∑r£_node_t
 *
node
)

581 
bønch
;

586 i‡(
	`IS_NODE
(
node
, 
NODE_BINARY_OP
, 
F_NE
) )

588 i‡(
	`IS_NODE
(
node
->
r
.
ex¥
, 
NODE_NUMBER
, 0) )

590 
node
 =Çode->
l
.
ex¥
;

592 i‡(
	`IS_NODE
(
node
->
l
.
ex¥
, 
NODE_NUMBER
, 0) )

594 
node
 =Çode->
r
.
ex¥
;

597 i‡(
	`IS_NODE
(
node
, 
NODE_UNARY_OP
, 
F_NOT
) )

599 
node
 =Çode->
r
.
ex¥
;

600 
bønch
 = 
F_BBRANCH_WHEN_ZERO
;

604 
bønch
 = 
F_BBRANCH_WHEN_NON_ZERO
;

605 i‡(
node
->
köd
 =
NODE_NUMBER
)

607 i‡(
node
->
v
.
numbî
 == 0)

609 
bønch
 = 0;

613 
bønch
 = 
F_BBRANCH
;

615 
node
 = 0;

617 i‡(
node
)

619 i‡(
	`IS_NODE
(
node
, 
NODE_BINARY_OP
, 
F_LT
) )

621 
	`gíî©e
(
node
->
l
.
ex¥
);

622 
	`gíî©e
(
node
->
r
.
ex¥
);

623  
F_BBRANCH_LT
;

625 i‡(
	`IS_NODE
(
node
, 
NODE_OPCODE_1
, 
F_WHILE_DEC
) )

627 
	`gíî©e
(
node
);

628  
F_WHILE_DEC
;

632 
	`gíî©e
(
node
);

633  
bønch
;

634 
	}
}

640 #ifde‡
DEBUG


641 
	$dump_ex¥_li°
(
∑r£_node_t
 *
ex¥
)

643 i‡(!
ex¥
)

649 
	`dump_åì
(
ex¥
->
v
.expr);

652  (
ex¥
 =Éx¥->
r
.expr) );

653 
	}
}

655 
	$dump_lvÆue_li°
(
∑r£_node_t
 *
ex¥
)

657 
	`¥ötf
("QTZ_ServerEngine:(lvalue_list ");

658  (
ex¥
 =Éx¥->
r
.expr) )

660 
	`dump_åì
(
ex¥
->
l
.expr);

662 
	}
}

664 
	$dump_åì
(
∑r£_node_t
 *
ex¥
)

666 i‡(!
ex¥
)

671 
ex¥
->
köd
)

673 
NODE_TERNARY_OP
:

674 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
r
.ex¥->
v
.
numbî
].
«me
);

675 
	`dump_åì
(
ex¥
->
l
.expr);

676 
ex¥
 =Éx¥->
r
.expr;

677 
	`dump_åì
(
ex¥
->
l
.expr);

678 
	`dump_åì
(
ex¥
->
r
.expr);

679 
	`¥ötf
(")");

681 
NODE_BINARY_OP
:

682 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

683 
	`dump_åì
(
ex¥
->
l
.expr);

684 
	`dump_åì
(
ex¥
->
r
.expr);

685 
	`¥ötf
(")");

687 
NODE_UNARY_OP
:

688 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

689 
	`dump_åì
(
ex¥
->
r
.expr);

690 
	`¥ötf
(")");

692 
NODE_OPCODE
:

693 
	`¥ötf
("(%s)", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

695 
NODE_TERNARY_OP_1
:

697 
p
 = 
ex¥
->
ty≥
;

698 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
r
.ex¥->
v
.
numbî
].
«me
);

699 
	`dump_åì
(
ex¥
->
l
.expr);

700 
ex¥
 =Éx¥->
r
.expr;

701 
	`dump_åì
(
ex¥
->
l
.expr);

702 
	`dump_åì
(
ex¥
->
r
.expr);

703 
	`¥ötf
(" %i)", 
p
);

706 
NODE_BINARY_OP_1
:

707 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

708 
	`dump_åì
(
ex¥
->
l
.expr);

709 
	`dump_åì
(
ex¥
->
r
.expr);

710 
	`¥ötf
(" %i)", 
ex¥
->
ty≥
);

712 
NODE_UNARY_OP_1
:

713 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

714 
	`dump_åì
(
ex¥
->
r
.expr);

715 
	`¥ötf
(" %i)", 
ex¥
->
l
.
numbî
);

717 
NODE_OPCODE_1
:

718 
	`¥ötf
("(%†%i)", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.number);

720 
NODE_OPCODE_2
:

721 
	`¥ötf
("(%†%ò%i)", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.numbî,Éx¥->
r
.number);

723 
NODE_RETURN
:

724 i‡(
ex¥
->
r
.expr)

726 
	`¥ötf
("(return ");

727 
	`dump_åì
(
ex¥
->
r
.expr);

728 
	`¥ötf
(")");

732 
	`¥ötf
("(return_zero)");

735 
NODE_STRING
:

736 
	`¥ötf
("(°rög %i)", 
ex¥
->
v
.
numbî
);

738 
NODE_REAL
:

739 
	`¥ötf
("‘ó»%f)", 
ex¥
->
v
.
ªÆ
);

741 
NODE_NUMBER
:

742 
	`¥ötf
("“umbî %i)", 
ex¥
->
v
.
numbî
);

744 
NODE_LAND_LOR
:

745 i‡(
ex¥
->
v
.
numbî
 =
F_LAND
)

747 
	`¥ötf
("(&& ");

751 
	`¥ötf
("(|| ");

753 
	`dump_åì
(
ex¥
->
l
.expr);

754 
	`dump_åì
(
ex¥
->
r
.expr);

755 
	`¥ötf
(")");

757 
NODE_BRANCH_LINK
:

758 
	`¥ötf
("(branch_link ");

759 
	`dump_åì
(
ex¥
->
l
.expr);

760 
	`dump_åì
(
ex¥
->
r
.expr);

761 
	`¥ötf
(")");

763 
NODE_CALL_2
:

764 
	`¥ötf
("(%†%ò%ò%ò", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.numbî >> 16,Éx¥->l.numbî &0xffff, (ex¥->
r
.ex¥ ?Éx¥->r.ex¥->
köd
: 0) );

765 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

766 
	`¥ötf
(")");

768 
NODE_CALL_1
:

769 
	`¥ötf
("(%†%ò%ò", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.numbî, (ex¥->
r
.ex¥ ?Éx¥->r.ex¥->
köd
: 0) );

770 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

771 
	`¥ötf
(")");

773 
NODE_CALL
:

774 
	`¥ötf
("(%†%ò", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.number);

775 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

776 
	`¥ötf
(")");

778 
NODE_TWO_VALUES
:

779 
	`dump_åì
(
ex¥
->
l
.expr);

780 
	`¥ötf
("\n");

781 
	`dump_åì
(
ex¥
->
r
.expr);

783 
NODE_CONTROL_JUMP
:

784 i‡(
ex¥
->
v
.
numbî
 =
CJ_BREAK_SWITCH
)

786 
	`¥ötf
("(break_switch)");

788 i‡(
ex¥
->
v
.
numbî
 =
CJ_BREAK
)

790 
	`¥ötf
("(break)");

792 i‡(
ex¥
->
v
.
numbî
 =
CJ_CONTINUE
)

794 
	`¥ötf
("(continue)");

798 
	`¥ötf
("(UNKNOWN CONTROL JUMP)");

801 
NODE_PARAMETER
:

802 
	`¥ötf
("’¨amëî %i)", 
ex¥
->
v
.
numbî
);

804 
NODE_PARAMETER_LVALUE
:

805 
	`¥ötf
("’¨amëî_lvÆuê%i)", 
ex¥
->
v
.
numbî
);

807 
NODE_IF
:

808 
	`¥ötf
("(if ");

809 
	`dump_åì
(
ex¥
->
v
.expr);

810 
	`¥ötf
("\n");

811 
	`dump_åì
(
ex¥
->
l
.expr);

812 i‡(
ex¥
->
r
.expr)

814 
	`¥ötf
("\n");

815 
	`dump_åì
(
ex¥
->
r
.expr);

817 
	`¥ötf
(")\n");

819 
NODE_LOOP
:

820 
	`¥ötf
("÷o› %i\n", 
ex¥
->
ty≥
);

821 
	`dump_åì
(
ex¥
->
v
.expr);

822 
	`¥ötf
("\n");

823 
	`dump_åì
(
ex¥
->
l
.expr);

824 
	`¥ötf
("\n");

825 
	`dump_åì
(
ex¥
->
r
.expr);

826 
	`¥ötf
(")\n");

828 
NODE_FOREACH
:

829 
	`¥ötf
("(foreach ");

830 
	`dump_åì
(
ex¥
->
l
.expr);

831 
	`dump_åì
(
ex¥
->
r
.expr);

832 
	`dump_åì
(
ex¥
->
v
.expr);

833 
	`¥ötf
(")\n");

835 
NODE_CASE_NUMBER
:

836 
NODE_CASE_STRING
:

837 
	`¥ötf
("(case)");

839 
NODE_DEFAULT
:

840 
	`¥ötf
("(default)");

842 
NODE_SWITCH_STRINGS
:

843 
NODE_SWITCH_NUMBERS
:

844 
NODE_SWITCH_DIRECT
:

845 
NODE_SWITCH_RANGES
:

846 
	`¥ötf
("(switch ");

847 
	`dump_åì
(
ex¥
->
l
.expr);

848 
	`dump_åì
(
ex¥
->
r
.expr);

849 
	`¥ötf
(")");

851 
NODE_CATCH
:

852 
	`¥ötf
("(catch ");

853 
	`dump_åì
(
ex¥
->
r
.expr);

854 
	`¥ötf
(")");

856 
NODE_LVALUE_EFUN
:

857 
	`¥ötf
("QTZ_ServerEngine:\n (lvalue_efun ");

858 
	`dump_åì
(
ex¥
->
l
.expr);

859 
	`dump_lvÆue_li°
(
ex¥
->
r
.expr);

860 
	`¥ötf
(")");

862 
NODE_FUNCTION_CONSTRUCTOR
:

863 
	`¥ötf
("(fun˘i⁄ %ò", 
ex¥
->
v
.
numbî
 &0xff);

864 i‡(
ex¥
->
r
.expr)

866 
	`¥ötf
("(array ");

867 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

868 
	`¥ötf
(")");

872 
	`¥ötf
("(number 0)");

874 
ex¥
->
v
.
numbî
 &0xff)

876 
FP_SIMUL
:

877 
	`¥ötf
("(Â-simu»%i)", 
ex¥
->
v
.
numbî
 >> 8);

879 
FP_LOCAL
:

880 
	`¥ötf
("(Â-loˇ»%i)", 
ex¥
->
v
.
numbî
 >> 8);

882 
FP_EFUN
:

883 
	`¥ötf
("(Â-efu¿%s)", 
ö°rs
[
ex¥
->
v
.
numbî
 >> 8].
«me
);

885 
FP_FUNCTIONAL
:

886 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
: 
	`¥ötf
("(Â-fun˘i⁄Æ %ò", 
ex¥
->
v
.
numbî
 >> 8);

887 
	`dump_åì
(
ex¥
->
l
.expr);

888 
	`¥ötf
(")");

891 
	`¥ötf
(" %i)", 
ex¥
->
v
.
numbî
 >> 8);

893 
NODE_ANON_FUNC
:

894 
	`¥ötf
("◊n⁄-fun¯%ò%ò", 
ex¥
->
v
.
numbî
,Éx¥->
l
.number);

895 
	`dump_åì
(
ex¥
->
r
.expr);

896 
	`¥ötf
(")");

898 
NODE_EFUN
:

899 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
 &~
NOVALUE_USED_FLAG
].
«me
);

900 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

901 
	`¥ötf
(")");

904 
	`¥ötf
("(unknown)");

907 
	`fÊush
(
°dout
);

908 
	}
}

	@src/grammar.tab.c

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

72 
	~"°d.h
"

73 
	~"compûî.h
"

74 
	~"Àx.h
"

75 
	~"s¸©ch∑d.h
"

77 
	~"Õc_ö˛.h
"

78 
	~"simul_efun.h
"

79 
	~"gíî©e.h
"

95 
	gc⁄ãxt
;

100 
yy∑r£
 ();

106 #i‚de‡
YYDEBUG


107 
	#YYDEBUG
 0

	)

111 #ifde‡
YYERROR_VERBOSE


112 #unde‡
YYERROR_VERBOSE


113 
	#YYERROR_VERBOSE
 1

	)

115 
	#YYERROR_VERBOSE
 0

	)

119 #i‚de‡
YYTOKEN_TABLE


120 
	#YYTOKEN_TABLE
 0

	)

125 #i‚de‡
YYTOKENTYPE


126 
	#YYTOKENTYPE


	)

129 
	eyytokíty≥
 {

130 
	mL_STRING
 = 258,

131 
	mL_NUMBER
 = 259,

132 
	mL_REAL
 = 260,

133 
	mL_BASIC_TYPE
 = 261,

134 
	mL_TYPE_MODIFIER
 = 262,

135 
	mL_DEFINED_NAME
 = 263,

136 
	mL_IDENTIFIER
 = 264,

137 
	mL_EFUN
 = 265,

138 
	mL_INC
 = 266,

139 
	mL_DEC
 = 267,

140 
	mL_ASSIGN
 = 268,

141 
	mL_LAND
 = 269,

142 
	mL_LOR
 = 270,

143 
	mL_LSH
 = 271,

144 
	mL_RSH
 = 272,

145 
	mL_ORDER
 = 273,

146 
	mL_NOT
 = 274,

147 
	mL_IF
 = 275,

148 
	mL_ELSE
 = 276,

149 
	mL_SWITCH
 = 277,

150 
	mL_CASE
 = 278,

151 
	mL_DEFAULT
 = 279,

152 
	mL_RANGE
 = 280,

153 
	mL_DOT_DOT_DOT
 = 281,

154 
	mL_WHILE
 = 282,

155 
	mL_DO
 = 283,

156 
	mL_FOR
 = 284,

157 
	mL_FOREACH
 = 285,

158 
	mL_IN
 = 286,

159 
	mL_BREAK
 = 287,

160 
	mL_CONTINUE
 = 288,

161 
	mL_RETURN
 = 289,

162 
	mL_ARROW
 = 290,

163 
	mL_INHERIT
 = 291,

164 
	mL_COLON_COLON
 = 292,

165 
	mL_ARRAY_OPEN
 = 293,

166 
	mL_MAPPING_OPEN
 = 294,

167 
	mL_FUNCTION_OPEN
 = 295,

168 
	mL_NEW_FUNCTION_OPEN
 = 296,

169 
	mL_SSCANF
 = 297,

170 
	mL_CATCH
 = 298,

171 
	mL_TIME_EXPRESSION
 = 299,

172 
	mL_CLASS
 = 300,

173 
	mL_NEW
 = 301,

174 
	mL_PARAMETER
 = 302,

175 
	mLOWER_THAN_ELSE
 = 303,

176 
	mL_NE
 = 304,

177 
	mL_EQ
 = 305

181 
	#L_STRING
 258

	)

182 
	#L_NUMBER
 259

	)

183 
	#L_REAL
 260

	)

184 
	#L_BASIC_TYPE
 261

	)

185 
	#L_TYPE_MODIFIER
 262

	)

186 
	#L_DEFINED_NAME
 263

	)

187 
	#L_IDENTIFIER
 264

	)

188 
	#L_EFUN
 265

	)

189 
	#L_INC
 266

	)

190 
	#L_DEC
 267

	)

191 
	#L_ASSIGN
 268

	)

192 
	#L_LAND
 269

	)

193 
	#L_LOR
 270

	)

194 
	#L_LSH
 271

	)

195 
	#L_RSH
 272

	)

196 
	#L_ORDER
 273

	)

197 
	#L_NOT
 274

	)

198 
	#L_IF
 275

	)

199 
	#L_ELSE
 276

	)

200 
	#L_SWITCH
 277

	)

201 
	#L_CASE
 278

	)

202 
	#L_DEFAULT
 279

	)

203 
	#L_RANGE
 280

	)

204 
	#L_DOT_DOT_DOT
 281

	)

205 
	#L_WHILE
 282

	)

206 
	#L_DO
 283

	)

207 
	#L_FOR
 284

	)

208 
	#L_FOREACH
 285

	)

209 
	#L_IN
 286

	)

210 
	#L_BREAK
 287

	)

211 
	#L_CONTINUE
 288

	)

212 
	#L_RETURN
 289

	)

213 
	#L_ARROW
 290

	)

214 
	#L_INHERIT
 291

	)

215 
	#L_COLON_COLON
 292

	)

216 
	#L_ARRAY_OPEN
 293

	)

217 
	#L_MAPPING_OPEN
 294

	)

218 
	#L_FUNCTION_OPEN
 295

	)

219 
	#L_NEW_FUNCTION_OPEN
 296

	)

220 
	#L_SSCANF
 297

	)

221 
	#L_CATCH
 298

	)

222 
	#L_TIME_EXPRESSION
 299

	)

223 
	#L_CLASS
 300

	)

224 
	#L_NEW
 301

	)

225 
	#L_PARAMETER
 302

	)

226 
	#LOWER_THAN_ELSE
 303

	)

227 
	#L_NE
 304

	)

228 
	#L_EQ
 305

	)

233 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


234 
	uYYSTYPE


238 
POINTER_INT
 
	mpoöãr_öt
;

239 
	mnumbî
;

240 
	mªÆ
;

241 *
	m°rög
;

242 
	mty≥
;

243 °ru˘ { 
	mnum_¨g
; 
	mÊags
; } 
	m¨gumít
;

244 
idít_hash_ñem_t
 *
	mihe
;

245 
∑r£_node_t
 *
	mnode
;

246 
fun˘i⁄_c⁄ãxt_t
 *
	mc⁄ãxç
;

248 
∑r£_node_t
 *
	mnode
;

249 
	mnum
;

250 } 
	mde˛
;

252 
	mnum_loˇl
;

253 
	mmax_num_loˇls
;

254 
	mc⁄ãxt
;

255 
	mßve_cuºít_ty≥
;

256 
	mßve_exa˘_ty≥s
;

257 } 
	mfunc_block
;

261 } 
	tYYSTYPE
;

262 
	#YYSTYPE_IS_TRIVIAL
 1

	)

263 
	#yy°y≥
 
YYSTYPE


	)

264 
	#YYSTYPE_IS_DECLARED
 1

	)

276 #ifde‡
YYTYPE_UINT8


277 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

279 
	tyyty≥_uöt8
;

282 #ifde‡
YYTYPE_INT8


283 
YYTYPE_INT8
 
	tyyty≥_öt8
;

284 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

285 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

286 sig√d 
	tyyty≥_öt8
;

288 
	tyyty≥_öt8
;

291 #ifde‡
YYTYPE_UINT16


292 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

294 
	tyyty≥_uöt16
;

297 #ifde‡
YYTYPE_INT16


298 
YYTYPE_INT16
 
	tyyty≥_öt16
;

300 
	tyyty≥_öt16
;

303 #i‚de‡
YYSIZE_T


304 #ifde‡
__SIZE_TYPE__


305 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

306 #ñi‡
deföed
 
size_t


307 
	#YYSIZE_T
 
size_t


	)

308 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

309 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

310 
	~<°ddef.h
>

311 
	#YYSIZE_T
 
size_t


	)

313 
	#YYSIZE_T
 

	)

317 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

319 #i‚de‡
YY_


320 #i‡
YYENABLE_NLS


321 #i‡
ENABLE_NLS


322 
	~<liböé.h
>

323 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

326 #i‚de‡
YY_


327 
	#YY_
(
msgid
Ë
	)
msgid

332 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


333 
	#YYUSE
(
e
Ë((Ë”))

	)

335 
	#YYUSE
(
e
Ë

	)

339 #i‚de‡
löt


340 
	#YYID
(
n
Ë“)

	)

342 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

343 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

345 
	$YYID
 (
yyi
)

348 
	$YYID
 (
yyi
)

349 
yyi
;

352  
yyi
;

353 
	}
}

356 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


360 #ifde‡
YYSTACK_USE_ALLOCA


361 #i‡
YYSTACK_USE_ALLOCA


362 #ifde‡
__GNUC__


363 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

364 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


365 
	~<Æloˇ.h
>

366 #ñi‡
deföed
 
_AIX


367 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

368 #ñi‡
deföed
 
_MSC_VER


369 
	~<mÆloc.h
>

370 
	#Æloˇ
 
_Æloˇ


	)

372 
	#YYSTACK_ALLOC
 
Æloˇ


	)

373 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

374 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

375 
	~<°dlib.h
>

376 #i‚de‡
_STDLIB_H


377 
	#_STDLIB_H
 1

	)

384 #ifde‡
YYSTACK_ALLOC


386 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

387 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


392 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

395 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

396 
	#YYSTACK_FREE
 
YYFREE


	)

397 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


398 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

400 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

401 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

402 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

403 
	~<°dlib.h
>

404 #i‚de‡
_STDLIB_H


405 
	#_STDLIB_H
 1

	)

408 #i‚de‡
YYMALLOC


409 
	#YYMALLOC
 
mÆloc


	)

410 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

411 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

412 *
mÆloc
 (
YYSIZE_T
);

415 #i‚de‡
YYFREE


416 
	#YYFREE
 
‰ì


	)

417 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

418 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

419 
‰ì
 (*);

426 #i‡(! 
deföed
 
yyovîÊow
 \

427 && (! 
deföed
 
	g__˝lu•lus
 \

428 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

431 
	uyyÆloc


433 
yyty≥_öt16
 
	myyss_Æloc
;

434 
YYSTYPE
 
	myyvs_Æloc
;

438 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

442 
	#YYSTACK_BYTES
(
N
) \

443 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

444 + 
YYSTACK_GAP_MAXIMUM
)

	)

448 #i‚de‡
YYCOPY


449 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

450 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

451 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

453 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

456 
YYSIZE_T
 
yyi
; \

457 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

458 (
To
)[
yyi
] = (
From
)[yyi]; \

460 
	`YYID
 (0))

	)

469 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

472 
YYSIZE_T
 
yy√wbyãs
; \

473 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

474 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

475 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

476 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

478 
	`YYID
 (0))

	)

483 
	#YYFINAL
 3

	)

485 
	#YYLAST
 1705

	)

488 
	#YYNTOKENS
 72

	)

490 
	#YYNNTS
 91

	)

492 
	#YYNRULES
 238

	)

494 
	#YYNSTATES
 455

	)

497 
	#YYUNDEFTOK
 2

	)

498 
	#YYMAXUTOK
 305

	)

500 
	#YYTRANSLATE
(
YYX
) \

501 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

504 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

539 #i‡
YYDEBUG


542 c⁄° 
yyty≥_uöt16
 
	gyy¥hs
[] =

571 c⁄° 
yyty≥_öt16
 
	gyyrhs
[] =

656 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

685 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


688 c⁄° *c⁄° 
	gyyäame
[] =

723 #ifde‡
YYPRINT


726 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

740 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

769 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

800 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

851 c⁄° 
yyty≥_öt16
 
	gyydefgŸo
[] =

867 
	#YYPACT_NINF
 -335

	)

868 c⁄° 
yyty≥_öt16
 
	gyy∑˘
[] =

919 c⁄° 
yyty≥_öt16
 
	gyypgŸo
[] =

937 
	#YYTABLE_NINF
 -233

	)

938 c⁄° 
yyty≥_öt16
 
	gyyèbÀ
[] =

1113 c⁄° 
yyty≥_öt16
 
	gyycheck
[] =

1290 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

1340 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

1341 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

1342 
	#YYEMPTY
 (-2)

	)

1343 
	#YYEOF
 0

	)

1345 
	#YYACCEPT
 
yyac˚±œb


	)

1346 
	#YYABORT
 
yyab‹éab


	)

1347 
	#YYERROR
 
yyîr‹œb


	)

1354 
	#YYFAIL
 
yyîæab


	)

1356 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

1358 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

1360 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

1362 
yych¨
 = (
Tokí
); \

1363 
yylvÆ
 = (
VÆue
); \

1364 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

1365 
	`YYPOPSTACK
 (1); \

1366 
yybackup
; \

1370 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

1371 
YYERROR
; \

1373 
	`YYID
 (0))

	)

1376 
	#YYTERROR
 1

	)

1377 
	#YYERRCODE
 256

	)

1384 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

1385 #i‚de‡
YYLLOC_DEFAULT


1386 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

1388 i‡(
	`YYID
 (
N
)) \

1390 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

1391 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

1392 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

1393 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

1397 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

1398 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

1399 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

1400 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

1402 
	`YYID
 (0))

	)

1410 #i‚de‡
YY_LOCATION_PRINT


1411 #i‡
YYLTYPE_IS_TRIVIAL


1412 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

1413 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

1414 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

1415 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

1417 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

1424 #ifde‡
YYLEX_PARAM


1425 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

1427 
	#YYLEX
 
	`yyÀx
 ()

	)

1431 #i‡
YYDEBUG


1433 #i‚de‡
YYFPRINTF


1434 
	~<°dio.h
>

1435 
	#YYFPRINTF
 
Ârötf


	)

1438 
	#YYDPRINTF
(
Args
) \

1440 i‡(
yydebug
) \

1441 
YYFPRINTF
 
Args
; \

1442 } 
	`YYID
 (0))

	)

1444 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

1446 i‡(
yydebug
) \

1448 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

1449 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

1450 
Ty≥
, 
VÆue
); \

1451 
	`YYFPRINTF
 (
°dîr
, "\n"); \

1453 } 
	`YYID
 (0))

	)

1461 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1462 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1464 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1467 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1468 
FILE
 *
yyouçut
;

1469 
yyty≥
;

1470 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1473 i‡(!
yyvÆuï
)

1475 #ifde‡
YYPRINT


1476 i‡(
yyty≥
 < 
YYNTOKENS
)

1477 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

1479 
	`YYUSE
 (
yyouçut
);

1481 
yyty≥
)

1486 
	}
}

1493 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1494 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1496 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1499 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1500 
FILE
 *
yyouçut
;

1501 
yyty≥
;

1502 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1505 i‡(
yyty≥
 < 
YYNTOKENS
)

1506 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

1508 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

1510 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

1511 
	`YYFPRINTF
 (
yyouçut
, ")");

1512 
	}
}

1519 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1520 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1522 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

1525 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

1526 
yyty≥_öt16
 *
yybŸtom
;

1527 
yyty≥_öt16
 *
yyt›
;

1530 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

1531 ; 
yybŸtom
 <
yyt›
; yybottom++)

1533 
yybŸ
 = *
yybŸtom
;

1534 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

1536 
	`YYFPRINTF
 (
°dîr
, "\n");

1537 
	}
}

1539 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

1541 i‡(
yydebug
) \

1542 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

1543 } 
	`YYID
 (0))

	)

1550 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1551 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1553 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

1556 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

1557 
YYSTYPE
 *
yyv•
;

1558 
yyruÀ
;

1561 
yyƒhs
 = 
yyr2
[
yyruÀ
];

1562 
yyi
;

1563 
yy o
 = 
yyæöe
[
yyruÀ
];

1564 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

1565 
yyruÀ
 - 1, 
yy o
);

1567 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

1569 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

1570 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

1571 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

1573 
	`YYFPRINTF
 (
°dîr
, "\n");

1575 
	}
}

1577 
	#YY_REDUCE_PRINT
(
RuÀ
) \

1579 i‡(
yydebug
) \

1580 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

1581 } 
	`YYID
 (0))

	)

1585 
	gyydebug
;

1587 
	#YYDPRINTF
(
Args
)

	)

1588 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

1589 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

1590 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

1595 #i‚def 
YYINITDEPTH


1596 
	#YYINITDEPTH
 200

	)

1606 #i‚de‡
YYMAXDEPTH


1607 
	#YYMAXDEPTH
 10000

	)

1612 #i‡
YYERROR_VERBOSE


1614 #i‚de‡
yy°æí


1615 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1616 
	#yy°æí
 
°æí


	)

1619 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1620 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1621 
YYSIZE_T


1622 
	$yy°æí
 (c⁄° *
yy°r
)

1624 
YYSIZE_T


1625 
	$yy°æí
 (
yy°r
)

1626 c⁄° *
yy°r
;

1629 
YYSIZE_T
 
yyÀn
;

1630 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1632  
yyÀn
;

1633 
	}
}

1637 #i‚de‡
yy°p˝y


1638 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1639 
	#yy°p˝y
 
°p˝y


	)

1643 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1644 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1646 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1649 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

1650 *
yyde°
;

1651 c⁄° *
yy§c
;

1654 *
yyd
 = 
yyde°
;

1655 c⁄° *
yys
 = 
yy§c
;

1657 (*
yyd
++ = *
yys
++) != '\0')

1660  
yyd
 - 1;

1661 
	}
}

1665 #i‚de‡
yyäamîr


1673 
YYSIZE_T


1674 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1676 i‡(*
yy°r
 == '"')

1678 
YYSIZE_T
 
yyn
 = 0;

1679 c⁄° *
yyp
 = 
yy°r
;

1682 *++
yyp
)

1686 
do_nŸ_°rù_quŸes
;

1689 i‡(*++
yyp
 != '\\')

1690 
do_nŸ_°rù_quŸes
;

1693 i‡(
yyªs
)

1694 
yyªs
[
yyn
] = *
yyp
;

1695 
yyn
++;

1699 i‡(
yyªs
)

1700 
yyªs
[
yyn
] = '\0';

1701  
yyn
;

1703 
do_nŸ_°rù_quŸes
: ;

1706 i‡(! 
yyªs
)

1707  
	`yy°æí
 (
yy°r
);

1709  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1710 
	}
}

1720 
YYSIZE_T


1721 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

1723 
yyn
 = 
yy∑˘
[
yy°©e
];

1725 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

1729 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

1730 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

1731 
YYSIZE_T
 
yysize
 = 
yysize0
;

1732 
YYSIZE_T
 
yysize1
;

1733 
yysize_ovîÊow
 = 0;

1734 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1735 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1736 
yyx
;

1741 
	`YY_
("syntaxÉrror, unexpected %s");

1742 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

1743 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

1744 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

1745 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

1747 *
yyfmt
;

1748 c⁄° *
yyf
;

1749 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

1750 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

1751 c⁄° 
yy‹
[] = " or %s";

1752 
yyf‹m©
[ 
yyu√x≥˘ed


1753 +  
yyex≥˘ög
 - 1

1754 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

1755 * ( 
yy‹
 - 1))];

1756 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

1760 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1763 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1764 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1765 
yycou¡
 = 1;

1767 
yy¨g
[0] = 
yyäame
[
yyty≥
];

1768 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

1770 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1771 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1773 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1775 
yycou¡
 = 1;

1776 
yysize
 = 
yysize0
;

1777 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1780 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1781 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1782 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1783 
yysize
 = 
yysize1
;

1784 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1785 
yy¥efix
 = 
yy‹
;

1788 
yyf
 = 
	`YY_
(
yyf‹m©
);

1789 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1790 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1791 
yysize
 = 
yysize1
;

1793 i‡(
yysize_ovîÊow
)

1794  
YYSIZE_MAXIMUM
;

1796 i‡(
yyªsu…
)

1801 *
yyp
 = 
yyªsu…
;

1802 
yyi
 = 0;

1803 (*
yyp
 = *
yyf
) != '\0')

1805 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1807 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1808 
yyf
 += 2;

1812 
yyp
++;

1813 
yyf
++;

1817  
yysize
;

1819 
	}
}

1828 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1829 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1831 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1834 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1835 c⁄° *
yymsg
;

1836 
yyty≥
;

1837 
YYSTYPE
 *
yyvÆuï
;

1840 
	`YYUSE
 (
yyvÆuï
);

1842 i‡(!
yymsg
)

1843 
yymsg
 = "Deleting";

1844 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1846 
yyty≥
)

1852 
	}
}

1855 #ifde‡
YYPARSE_PARAM


1856 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1857 
yy∑r£
 (*
YYPARSE_PARAM
);

1859 
yy∑r£
 ();

1862 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1863 
yy∑r£
 ();

1865 
yy∑r£
 ();

1871 
	gyych¨
;

1874 
YYSTYPE
 
	gyylvÆ
;

1877 
	gyy√ºs
;

1885 #ifde‡
YYPARSE_PARAM


1886 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1887 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1889 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1892 
	$yy∑r£
 (
YYPARSE_PARAM
)

1893 *
YYPARSE_PARAM
;

1896 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1897 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1899 
	$yy∑r£
 ()

1902 
	$yy∑r£
 ()

1909 
yy°©e
;

1911 
yyîr°©us
;

1921 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1922 
yyty≥_öt16
 *
yyss
;

1923 
yyty≥_öt16
 *
yys•
;

1926 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1927 
YYSTYPE
 *
yyvs
;

1928 
YYSTYPE
 *
yyv•
;

1930 
YYSIZE_T
 
yy°acksize
;

1932 
yyn
;

1933 
yyªsu…
;

1935 
yytokí
;

1938 
YYSTYPE
 
yyvÆ
;

1940 #i‡
YYERROR_VERBOSE


1942 
yymsgbuf
[128];

1943 *
yymsg
 = 
yymsgbuf
;

1944 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1947 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1951 
yyÀn
 = 0;

1953 
yytokí
 = 0;

1954 
yyss
 = 
yysß
;

1955 
yyvs
 = 
yyvß
;

1956 
yy°acksize
 = 
YYINITDEPTH
;

1958 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1960 
yy°©e
 = 0;

1961 
yyîr°©us
 = 0;

1962 
yy√ºs
 = 0;

1963 
yych¨
 = 
YYEMPTY
;

1969 
yys•
 = 
yyss
;

1970 
yyv•
 = 
yyvs
;

1972 
yy£t°©e
;

1977 
yy√w°©e
:

1980 
yys•
++;

1982 
yy£t°©e
:

1983 *
yys•
 = 
yy°©e
;

1985 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1988 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1990 #ifde‡
yyovîÊow


1995 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1996 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

2002 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

2003 &
yyss1
, 
yysize
 *  (*
yys•
),

2004 &
yyvs1
, 
yysize
 *  (*
yyv•
),

2005 &
yy°acksize
);

2007 
yyss
 = 
yyss1
;

2008 
yyvs
 = 
yyvs1
;

2011 #i‚de‡
YYSTACK_RELOCATE


2012 
yyexhau°edœb
;

2015 i‡(
YYMAXDEPTH
 <
yy°acksize
)

2016 
yyexhau°edœb
;

2017 
yy°acksize
 *= 2;

2018 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

2019 
yy°acksize
 = 
YYMAXDEPTH
;

2022 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

2023 
yyÆloc
 *
yy±r
 =

2024 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

2025 i‡(! 
yy±r
)

2026 
yyexhau°edœb
;

2027 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

2028 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

2029 #unde‡
YYSTACK_RELOCATE


2030 i‡(
yyss1
 !
yysß
)

2031 
	`YYSTACK_FREE
 (
yyss1
);

2036 
yys•
 = 
yyss
 + 
yysize
 - 1;

2037 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

2039 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

2040 (Ë
yy°acksize
));

2042 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

2043 
YYABORT
;

2046 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

2048 i‡(
yy°©e
 =
YYFINAL
)

2049 
YYACCEPT
;

2051 
yybackup
;

2056 
yybackup
:

2062 
yyn
 = 
yy∑˘
[
yy°©e
];

2063 i‡(
yyn
 =
YYPACT_NINF
)

2064 
yydeÁu…
;

2069 i‡(
yych¨
 =
YYEMPTY
)

2071 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

2072 
yych¨
 = 
YYLEX
;

2075 i‡(
yych¨
 <
YYEOF
)

2077 
yych¨
 = 
yytokí
 = 
YYEOF
;

2078 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

2082 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

2083 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

2088 
yyn
 +
yytokí
;

2089 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

2090 
yydeÁu…
;

2091 
yyn
 = 
yyèbÀ
[yyn];

2092 i‡(
yyn
 <= 0)

2094 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

2095 
yyîæab
;

2096 
yyn
 = -yyn;

2097 
yyªdu˚
;

2102 i‡(
yyîr°©us
)

2103 
yyîr°©us
--;

2106 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

2109 
yych¨
 = 
YYEMPTY
;

2111 
yy°©e
 = 
yyn
;

2112 *++
yyv•
 = 
yylvÆ
;

2114 
yy√w°©e
;

2120 
yydeÁu…
:

2121 
yyn
 = 
yydeÁ˘
[
yy°©e
];

2122 i‡(
yyn
 == 0)

2123 
yyîæab
;

2124 
yyªdu˚
;

2130 
yyªdu˚
:

2132 
yyÀn
 = 
yyr2
[
yyn
];

2142 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

2145 
	`YY_REDUCE_PRINT
 (
yyn
);

2146 
yyn
)

2152 
	`yyw¨n
("Extra ';'. Ignored.");

2160 
obje˘_t
 *
ob
;

2161 
öhîô_t
 
öhîô
;

2162 
öôülizî
;

2164 (
yyv•
[(1Ë- (4)].
ty≥
Ë|
globÆ_modifõrs
;

2166 i‡(
v¨_deföed
)

2167 
	`yyîr‹
("IllegalÅo inheritáfter defining global variables.");

2168 
ob
 = 
	`föd_obje˘2
((
yyv•
[(3Ë- (4)].
°rög
));

2169 i‡(
ob
 == 0) {

2170 
öhîô_fûe
 = 
	`Æloc_c°rög
((
yyv•
[(3Ë- (4)].
°rög
), "inherit");

2172 
YYACCEPT
;

2174 
	`s¸©ch_‰ì
((
yyv•
[(3Ë- (4)].
°rög
));

2175 
öhîô
.
¥og
 = 
ob
->prog;

2176 
öhîô
.
fun˘i⁄_ödex_off£t
 =

2177 
mem_block
[
A_RUNTIME_FUNCTIONS
].
cuºít_size
 /

2178  (
ru¡ime_fun˘i⁄_u
);

2179 
öhîô
.
v¨übÀ_ödex_off£t
 =

2180 
mem_block
[
A_VAR_TEMP
].
cuºít_size
 /

2181  (
v¨übÀ_t
);

2182 
öhîô
.
ty≥_mod
 = (
yyv•
[(1Ë- (4)].
ty≥
);

2183 
	`add_to_mem_block
(
A_INHERITS
, (*)&
öhîô
,  inherit);

2184 
	`c›y_v¨übÀs
(
ob
->
¥og
, (
yyv•
[(1Ë- (4)].
ty≥
));

2185 
	`c›y_°ru˘uªs
(
ob
->
¥og
);

2186 
öôülizî
 = 
	`c›y_fun˘i⁄s
(
ob
->
¥og
, (
yyv•
[(1Ë- (4)].
ty≥
));

2187 i‡(
öôülizî
 >= 0) {

2192 
	`swôch_to_block
(
A_INITIALIZER
);

2193 
	`gíî©e_öhîôed_öô_ˇŒ
(
mem_block
[
A_INHERITS
].
cuºít_size
/(
öhîô_t
Ë- 1, 
öôülizî
);

2194 
	`swôch_to_block
(
A_PROGRAM
);

2203 
	`CREATE_REAL
((
yyvÆ
.
node
), (
yyv•
[(1Ë- (1)].
ªÆ
));

2211 
	`CREATE_NUMBER
((
yyvÆ
.
node
), (
yyv•
[(1Ë- (1)].
numbî
));

2219 (
yyvÆ
.
ty≥
) = 0;

2227 (
yyvÆ
.
ty≥
Ë
TYPE_MOD_ARRAY
;

2235 (
yyvÆ
.
node
Ë(
yyv•
[(1Ë- (1)].
de˛
).node;

2236 i‡(!(
yyvÆ
.
node
)) {

2237 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

2246 (
yyvÆ
.
node
) = 0;

2254 (
yyvÆ
.
node
) = 0;

2262 (
yyvÆ
.
°rög
Ë
	`s¸©ch_c›y
((
yyv•
[(1Ë- (1)].
ihe
)->
«me
);

2270 (
yyv•
[(1Ë- (3)].
ty≥
Ë|
globÆ_modifõrs
;

2273 i‡((
yyv•
[(1Ë- (3)].
ty≥
Ë& ~
NAME_TYPE_MOD
) {

2274 
exa˘_ty≥s
 = (
yyv•
[(1Ë- (3)].
ty≥
) | (yyvsp[(2) - (3)].type);

2276 i‡(
¥agmas
 & 
PRAGMA_STRICT_TYPES
) {

2277 i‡(
	`°rcmp
((
yyv•
[(3Ë- (3)].
°rög
), "create") != 0)

2278 
	`yyîr‹
("\"#pragma strict_types\"ÑequiresÅype of function");

2280 
exa˘_ty≥s
 = 
TYPE_VOID
;

2282 
exa˘_ty≥s
 = 0;

2291 *
p
 = (
yyv•
[(3Ë- (7)].
°rög
);

2292 (
yyv•
[(3Ë- (7)].
°rög
Ë
	`make_sh¨ed_°rög
((yyvsp[(3) - (7)].string));

2293 
	`s¸©ch_‰ì
(
p
);

2303 (
yyvÆ
.
numbî
Ë
NAME_UNDEFINED
 | 
NAME_PROTOTYPE
;

2304 i‡((
yyv•
[(6Ë- (7)].
¨gumít
).
Êags
 & 
ARG_IS_VARARGS
) {

2305 (
yyvÆ
.
numbî
Ë|
NAME_TRUE_VARARGS
;

2306 (
yyv•
[(1Ë- (7)].
ty≥
Ë|
NAME_VARARGS
;

2308 
	`deföe_√w_fun˘i⁄
((
yyv•
[(3Ë- (7)].
°rög
), (yyv•[(6Ë- (7)].
¨gumít
).
num_¨g
, 0, (
yyvÆ
.
numbî
), (yyv•[(1Ë- (7)].
ty≥
) | (yyvsp[(2) - (7)].type));

2311 
	`‰ì_°rög
((
yyv•
[(3Ë- (7)].
°rög
));

2312 
c⁄ãxt
 = 0;

2321 i‡((
yyv•
[(9Ë- (9)].
node
)) {

2322 
fun
;

2324 (
yyv•
[(8Ë- (9)].
numbî
Ë&~(
NAME_UNDEFINED
 | 
NAME_PROTOTYPE
);

2325 i‡((
yyv•
[(9Ë- (9)].
node
)->
köd
 !
NODE_RETURN
 &&

2326 ((
yyv•
[(9Ë- (9)].
node
)->
köd
 !
NODE_TWO_VALUES


2327 || (
yyv•
[(9Ë- (9)].
node
)->
r
.
ex¥
->
köd
 !
NODE_RETURN
)) {

2328 
∑r£_node_t
 *
ª∂a˚mít
;

2329 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, (
yyv•
[(9Ë- (9)].
node
), 0);

2330 
	`CREATE_RETURN
(
ª∂a˚mít
->
r
.
ex¥
, 0);

2331 (
yyv•
[(9Ë- (9)].
node
Ë
ª∂a˚mít
;

2333 i‡((
yyv•
[(6Ë- (9)].
¨gumít
).
Êags
 & 
ARG_IS_PROTO
) {

2334 
	`yyîr‹
("MissingÇame for functionárgument");

2336 
fun
 = 
	`deföe_√w_fun˘i⁄
((
yyv•
[(3Ë- (9)].
°rög
), (yyv•[(6Ë- (9)].
¨gumít
).
num_¨g
,

2337 
max_num_loˇls
 - (
yyv•
[(6Ë- (9)].
¨gumít
).
num_¨g
,

2338 (
yyv•
[(8Ë- (9)].
numbî
), (yyv•[(1Ë- (9)].
ty≥
) | (yyvsp[(2) - (9)].type));

2339 i‡(
fun
 != -1)

2340 
	`COMPILER_FUNC
(
fun
)->
addªss
 =

2341 
	`gíî©e_fun˘i⁄
(
	`COMPILER_FUNC
(
fun
), (
yyv•
[(9Ë- (9)].
node
), 
max_num_loˇls
);

2343 
	`‰ì_Æl_loˇl_«mes
();

2351 i‡(!(
yyv•
[(1Ë- (3)].
ty≥
))

2352 
	`yyîr‹
("MissingÅype for global variable declaration");

2360 
globÆ_modifõrs
 = (
yyv•
[(1Ë- (2)].
ty≥
);

2368 i‡((
cuºít_ty≥
 & ~
NAME_TYPE_MOD
Ë=
TYPE_VOID
)

2369 
	`yyîr‹
("IllegalÅo declare class member ofÅype void.");

2370 
	`add_loˇl_«me
((
yyv•
[(2Ë- (2)].
°rög
), 
cuºít_ty≥
 | (yyv•[(1Ë- (2)].
ty≥
));

2371 
	`s¸©ch_‰ì
((
yyv•
[(2Ë- (2)].
°rög
));

2379 
idít_hash_ñem_t
 *
ihe
;

2381 
ihe
 = 
	`föd_‹_add_idít
(

2382 
	`PROG_STRING
((
yyvÆ
.
numbî
Ë
	`°‹e_¥og_°rög
((
yyv•
[(3Ë- (4)].
°rög
))),

2383 
FOA_GLOBAL_SCOPE
);

2384 i‡(
ihe
->
dn
.
˛ass_num
 == -1)

2385 
ihe
->
£m_vÆue
++;

2389 
buf
[256];

2390 *
íd
 = 
	`EndOf
(
buf
);

2391 *
p
;

2393 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine class ");

2394 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(3Ë- (4)].
°rög
));

2395 
	`yyîr‹
(
buf
);

2397 
ihe
->
dn
.
˛ass_num
 = 
mem_block
[
A_CLASS_DEF
].
cuºít_size
 / (
˛ass_def_t
);

2405 
˛ass_def_t
 *
sd
;

2406 
˛ass_membî_íåy_t
 *
sme
;

2407 
i
;

2409 
sd
 = (
˛ass_def_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_DEF
, (class_def_t));

2410 
i
 = 
sd
->
size
 = 
cuºít_numbî_of_loˇls
;

2411 
sd
->
ödex
 = 
mem_block
[
A_CLASS_MEMBER
].
cuºít_size
 / (
˛ass_membî_íåy_t
);

2412 
sd
->
«me
 = (
yyv•
[(5Ë- (7)].
numbî
);

2414 
sme
 = (
˛ass_membî_íåy_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_MEMBER
, (˛ass_membî_íåy_tË* 
cuºít_numbî_of_loˇls
);

2416 
i
--) {

2417 
sme
[
i
].
«me
 = 
	`°‹e_¥og_°rög
(
loˇls_±r
[i]->name);

2418 
sme
[
i
].
ty≥
 = 
ty≥_of_loˇls_±r
[i];

2421 
	`‰ì_Æl_loˇl_«mes
();

2422 
	`s¸©ch_‰ì
((
yyv•
[(3Ë- (7)].
°rög
));

2430 i‡((
yyv•
[(1Ë- (1)].
ihe
)->
dn
.
loˇl_num
 != -1) {

2431 
buff
[256];

2432 *
íd
 = 
	`EndOf
(
buff
);

2433 *
p
;

2435 
p
 = 
	`°Ωut
(
buff
, 
íd
, "IllegalÅoÑedeclareÜocalÇame '");

2436 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(1Ë- (1)].
ihe
)->
«me
);

2437 
p
 = 
	`°Ωut
’, 
íd
, "'");

2438 
	`yyîr‹
(
buff
);

2440 (
yyvÆ
.
°rög
Ë
	`s¸©ch_c›y
((
yyv•
[(1Ë- (1)].
ihe
)->
«me
);

2448 i‡((
yyv•
[(2Ë- (2)].
ihe
)->
dn
.
˛ass_num
 == -1) {

2449 
buf
[256];

2450 *
íd
 = 
	`EndOf
(
buf
);

2451 *
p
;

2453 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

2454 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(2Ë- (2)].
ihe
)->
«me
);

2455 
p
 = 
	`°Ωut
’, 
íd
, "'");

2456 
	`yyîr‹
(
buf
);

2457 (
yyvÆ
.
ty≥
Ë
TYPE_ANY
;

2459 (
yyvÆ
.
ty≥
Ë(
yyv•
[(2Ë- (2)].
ihe
)->
dn
.
˛ass_num
 | 
TYPE_MOD_CLASS
;

2467 i‡((
yyv•
[(1Ë- (2)].
ty≥
Ë=
TYPE_VOID
)

2468 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

2469 (
yyvÆ
.
numbî
Ë
ARG_IS_PROTO
;

2470 
	`add_loˇl_«me
("", (
yyv•
[(1Ë- (2)].
ty≥
) | (yyvsp[(2) - (2)].type));

2478 i‡((
yyv•
[(1Ë- (3)].
ty≥
Ë=
TYPE_VOID
)

2479 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

2480 
	`add_loˇl_«me
((
yyv•
[(3Ë- (3)].
°rög
), (yyv•[(1Ë- (3)].
ty≥
) | (yyvsp[(2) - (3)].type));

2481 
	`s¸©ch_‰ì
((
yyv•
[(3Ë- (3)].
°rög
));

2482 (
yyvÆ
.
numbî
) = 0;

2490 i‡(
exa˘_ty≥s
) {

2491 
	`yyîr‹
("MissingÅype forárgument");

2493 
	`add_loˇl_«me
((
yyv•
[(1Ë- (1)].
°rög
), 
TYPE_ANY
);

2494 
	`s¸©ch_‰ì
((
yyv•
[(1Ë- (1)].
°rög
));

2495 (
yyvÆ
.
numbî
) = 0;

2503 (
yyvÆ
.
¨gumít
).
num_¨g
 = 0;

2504 (
yyvÆ
.
¨gumít
).
Êags
 = 0;

2512 
x
 = 
ty≥_of_loˇls_±r
[
max_num_loˇls
-1];

2514 (
yyvÆ
.
¨gumít
Ë(
yyv•
[(1) - (2)].argument);

2515 (
yyvÆ
.
¨gumít
).
Êags
 |
ARG_IS_VARARGS
;

2517 i‡(
x
 !
TYPE_ANY
 && !(x & 
TYPE_MOD_ARRAY
))

2518 
	`yyw¨n
("VariableÅo holdÑemainder ofárguments should beánárray.");

2526 (
yyvÆ
.
¨gumít
).
num_¨g
 = 1;

2527 (
yyvÆ
.
¨gumít
).
Êags
 = (
yyv•
[(1Ë- (1)].
numbî
);

2535 (
yyvÆ
.
¨gumít
Ë(
yyv•
[(1) - (3)].argument);

2536 (
yyvÆ
.
¨gumít
).
num_¨g
++;

2537 (
yyvÆ
.
¨gumít
).
Êags
 |(
yyv•
[(3Ë- (3)].
numbî
);

2545 (
yyvÆ
.
ty≥
) = 0;

2553 (
yyvÆ
.
ty≥
Ë(
yyv•
[(1) - (2)].type) | (yyvsp[(2) - (2)].type);

2561 (
yyvÆ
.
ty≥
Ë(
yyv•
[(1) - (2)].type) | (yyvsp[(2) - (2)].type);

2562 
cuºít_ty≥
 = (
yyvÆ
.
ty≥
);

2570 (
yyvÆ
.
ty≥
Ë(
yyv•
[(2) - (4)].type) | (yyvsp[(3) - (4)].type);

2578 (
yyvÆ
.
ty≥
Ë
TYPE_UNKNOWN
;

2586 i‡((
cuºít_ty≥
 & ~
NAME_TYPE_MOD
Ë=
TYPE_VOID
)

2587 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

2588 
	`deföe_√w_v¨übÀ
((
yyv•
[(2Ë- (2)].
°rög
), 
cuºít_ty≥
 | (yyv•[(1Ë- (2)].
ty≥
Ë| 
globÆ_modifõrs
);

2589 
	`s¸©ch_‰ì
((
yyv•
[(2Ë- (2)].
°rög
));

2597 
∑r£_node_t
 *
ex¥
;

2598 
ty≥
 = 0;

2600 i‡((
yyv•
[(3Ë- (4)].
numbî
Ë!
F_ASSIGN
)

2601 
	`yyîr‹
("Only '=' isÜegal in initializers.");

2605 i‡(
cuºít_ty≥
) {

2606 
ty≥
 = (
cuºít_ty≥
 | (
yyv•
[(1Ë- (4)].ty≥Ë| 
globÆ_modifõrs
Ë& ~
NAME_TYPE_MOD
;

2607 i‡((
cuºít_ty≥
 & ~
NAME_TYPE_MOD
Ë=
TYPE_VOID
)

2608 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

2609 i‡(!
	`com∑tibÀ_ty≥s
(
ty≥
, (
yyv•
[(4Ë- (4)].
node
)->type)) {

2610 
buff
[256];

2611 *
íd
 = 
	`EndOf
(
buff
);

2612 *
p
;

2614 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

2615 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, (
yyv•
[(4Ë- (4)].
node
)->type);

2616 
p
 = 
	`°Ωut
’, 
íd
, " when initializing ");

2617 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(2Ë- (4)].
°rög
));

2618 
	`yyîr‹
(
buff
);

2621 
	`swôch_to_block
(
A_INITIALIZER
);

2622 (
yyv•
[(4Ë- (4)].
node
Ë
	`do_¥omŸi⁄s
((yyv•[(4Ë- (4)].node), 
ty≥
);

2624 
	`CREATE_BINARY_OP
(
ex¥
, 
F_VOID_ASSIGN
, 0, (
yyv•
[(4Ë- (4)].
node
), 0);

2625 
	`CREATE_OPCODE_1
(
ex¥
->
r
.ex¥, 
F_GLOBAL_LVALUE
, 0,

2626 
	`deföe_√w_v¨übÀ
((
yyv•
[(2Ë- (4)].
°rög
), 
cuºít_ty≥
 | (yyv•[(1Ë- (4)].
ty≥
Ë| 
globÆ_modifõrs
));

2627 
	`gíî©e
(
ex¥
);

2628 
	`swôch_to_block
(
A_PROGRAM
);

2629 
	`s¸©ch_‰ì
((
yyv•
[(2Ë- (4)].
°rög
));

2637 
	`push_loˇl_cou¡
(
cuºít_loˇl_cou¡
);

2638 
cuºít_loˇl_cou¡
 = 0;

2646 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[(3) - (4)].node);

2647 (
yyvÆ
.
de˛
).
num
 = 
cuºít_loˇl_cou¡
;

2648 
cuºít_loˇl_cou¡
 = 
	`p›_loˇl_cou¡
();

2657 (
yyvÆ
.
de˛
).
node
 = 0;

2658 (
yyvÆ
.
de˛
).
num
 = 0;

2666 i‡((
yyv•
[(2Ë- (2)].
ty≥
Ë=
TYPE_VOID
)

2667 
	`yyîr‹
("IllegalÅo declareÜocal variable ofÅype void.");

2671 
cuºít_ty≥
 = (
yyv•
[(2Ë- (2)].
ty≥
);

2679 i‡((
yyv•
[(1Ë- (5)].
de˛
).
node
 && (yyvsp[(4) - (5)].decl).node) {

2680 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[(1) - (5)].decl).node, (yyvsp[(4) - (5)].decl).node);

2681 } (
yyvÆ
.
de˛
).
node
 = ((
yyv•
[(1) - (5)].decl).node ? (yyvsp[(1) - (5)].decl).node : (yyvsp[(4) - (5)].decl).node);

2682 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[(1) - (5)].decl).num + (yyvsp[(4) - (5)].decl).num;

2690 
	`add_loˇl_«me
((
yyv•
[(2Ë- (2)].
°rög
), 
cuºít_ty≥
 | (yyv•[(1Ë- (2)].
ty≥
));

2691 
	`s¸©ch_‰ì
((
yyv•
[(2Ë- (2)].
°rög
));

2692 (
yyvÆ
.
node
) = 0;

2700 
ty≥
 = (
cuºít_ty≥
 | (
yyv•
[(1Ë- (4)].ty≥)Ë& ~
NAME_TYPE_MOD
;

2702 i‡((
yyv•
[(3Ë- (4)].
numbî
Ë!
F_ASSIGN
)

2703 
	`yyîr‹
("Only '=' isállowed in initializers.");

2704 i‡(!
	`com∑tibÀ_ty≥s
((
yyv•
[(4Ë- (4)].
node
)->
ty≥
,Åype)) {

2705 
buff
[256];

2706 *
íd
 = 
	`EndOf
(
buff
);

2707 *
p
;

2709 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

2710 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, (
yyv•
[(4Ë- (4)].
node
)->type);

2711 
p
 = 
	`°Ωut
’, 
íd
, " when initializing ");

2712 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(2Ë- (4)].
°rög
));

2714 
	`yyîr‹
(
buff
);

2717 (
yyv•
[(4Ë- (4)].
node
Ë
	`do_¥omŸi⁄s
((yyv•[(4Ë- (4)].node), 
ty≥
);

2719 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_VOID_ASSIGN_LOCAL
, 0, (
yyv•
[(4) - (4)].node),

2720 
	`add_loˇl_«me
((
yyv•
[(2Ë- (4)].
°rög
), 
cuºít_ty≥
 | (yyv•[(1Ë- (4)].
ty≥
)));

2721 
	`s¸©ch_‰ì
((
yyv•
[(2Ë- (4)].
°rög
));

2729 i‡((
yyv•
[(1Ë- (3)].
ty≥
Ë=
TYPE_VOID
)

2730 
	`yyîr‹
(" Wrong declareÜocal variable ofÅype void.");

2732 (
yyvÆ
.
numbî
Ë
	`add_loˇl_«me
((
yyv•
[(3Ë- (3)].
°rög
), (yyv•[(1Ë- (3)].
ty≥
) | (yyvsp[(2) - (3)].type));

2733 
	`s¸©ch_‰ì
((
yyv•
[(3Ë- (3)].
°rög
));

2741 
ty≥
 = 
ty≥_of_loˇls_±r
[(
yyv•
[(1Ë- (3)].
numbî
)];

2743 i‡((
yyv•
[(2Ë- (3)].
numbî
Ë!
F_ASSIGN
)

2744 
	`yyîr‹
("Only '=' isállowed in initializers.");

2745 i‡(!
	`com∑tibÀ_ty≥s
((
yyv•
[(3Ë- (3)].
node
)->
ty≥
,Åype)) {

2746 
buff
[256];

2747 *
íd
 = 
	`EndOf
(
buff
);

2748 *
p
;

2750 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

2751 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, (
yyv•
[(3Ë- (3)].
node
)->type);

2752 
p
 = 
	`°Ωut
’, 
íd
, " when initializing.");

2753 
	`yyîr‹
(
buff
);

2756 (
yyv•
[(3Ë- (3)].
node
Ë
	`do_¥omŸi⁄s
((yyv•[(3Ë- (3)].node), 
ty≥
);

2759 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ASSIGN
, 0, (
yyv•
[(3) - (3)].node), 0);

2760 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
)->
r
.
ex¥
, 
F_LOCAL_LVALUE
, 0, (
yyv•
[(1Ë- (3)].
numbî
));

2768 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[(1) - (1)].node);

2769 (
yyvÆ
.
de˛
).
num
 = 1;

2777 i‡((
yyv•
[(1Ë- (3)].
node
Ë&& (yyv•[(3Ë- (3)].
de˛
).node) {

2778 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].decl).node);

2779 } (
yyvÆ
.
de˛
).
node
 = ((
yyv•
[(1) - (3)].node) ? (yyvsp[(1) - (3)].node) : (yyvsp[(3) - (3)].decl).node);

2780 (
yyvÆ
.
de˛
).
num
 = 1 + (
yyv•
[(3) - (3)].decl).num;

2788 (
yyvÆ
.
node
) = 0;

2796 i‡((
yyv•
[(1Ë- (2)].
node
) && (yyvsp[(2) - (2)].node)) {

2797 
	`CREATE_STATEMENTS
((
yyvÆ
.
node
), (
yyv•
[(1) - (2)].node), (yyvsp[(2) - (2)].node));

2798 } (
yyvÆ
.
node
Ë((
yyv•
[(1) - (2)].node) ? (yyvsp[(1) - (2)].node) : (yyvsp[(2) - (2)].node));

2806 (
yyvÆ
.
node
) = 0;

2814 (
yyvÆ
.
node
Ë
	`ö£π_p›_vÆue
((
yyv•
[(1) - (2)].node));

2815 #ifde‡
DEBUG


2832 (
yyvÆ
.
node
Ë(
yyv•
[(1Ë- (1)].
de˛
).node;

2833 
	`p›_n_loˇls
((
yyv•
[(1Ë- (1)].
de˛
).
num
);

2841 (
yyvÆ
.
node
) = 0;

2849 i‡(
c⁄ãxt
 & 
SPECIAL_CONTEXT
) {

2850 
	`yyîr‹
("Cannot break out of catch { } orÅime_expression { }");

2851 (
yyvÆ
.
node
) = 0;

2853 i‡(
c⁄ãxt
 & 
SWITCH_CONTEXT
) {

2854 
	`CREATE_CONTROL_JUMP
((
yyvÆ
.
node
), 
CJ_BREAK_SWITCH
);

2856 i‡(
c⁄ãxt
 & 
LOOP_CONTEXT
) {

2857 
	`CREATE_CONTROL_JUMP
((
yyvÆ
.
node
), 
CJ_BREAK
);

2858 i‡(
c⁄ãxt
 & 
LOOP_FOREACH
) {

2859 
∑r£_node_t
 *
ª∂a˚
;

2860 
	`CREATE_STATEMENTS
(
ª∂a˚
, 0, (
yyvÆ
.
node
));

2861 
	`CREATE_OPCODE
(
ª∂a˚
->
l
.
ex¥
, 
F_EXIT_FOREACH
, 0);

2862 (
yyvÆ
.
node
Ë
ª∂a˚
;

2865 
	`yyîr‹
("break statement outsideÜoop");

2866 (
yyvÆ
.
node
) = 0;

2875 i‡(
c⁄ãxt
 & 
SPECIAL_CONTEXT
)

2876 
	`yyîr‹
("Cannot continue out of catch { } orÅime_expression { }");

2878 i‡(!(
c⁄ãxt
 & 
LOOP_CONTEXT
))

2879 
	`yyîr‹
("continue statement outsideÜoop");

2880 
	`CREATE_CONTROL_JUMP
((
yyvÆ
.
node
), 
CJ_CONTINUE
);

2888 i‡((
yyv•
[(1Ë- (1)].
ty≥
Ë=
TYPE_VOID
)

2889 
	`yyîr‹
("IllegalÅo declareÜocal variable ofÅype void.");

2893 
cuºít_ty≥
 = (
yyv•
[(1Ë- (1)].
ty≥
);

2901 (
yyvÆ
.
node
Ë(
yyv•
[(3Ë- (4)].
de˛
).node;

2902 
cuºít_loˇl_cou¡
 +(
yyv•
[(3Ë- (4)].
de˛
).
num
;

2910 (
yyv•
[(1Ë- (4)].
numbî
Ë
c⁄ãxt
;

2911 
c⁄ãxt
 = 
LOOP_CONTEXT
;

2919 
	`CREATE_LOOP
((
yyvÆ
.
node
), 1, (
yyv•
[(6Ë- (6)].node), 0, 
	`›timize_lo›_ã°
((yyvsp[(3) - (6)].node)));

2920 
c⁄ãxt
 = (
yyv•
[(1Ë- (6)].
numbî
);

2928 (
yyv•
[(1Ë- (1)].
numbî
Ë
c⁄ãxt
;

2929 
c⁄ãxt
 = 
LOOP_CONTEXT
;

2937 
	`CREATE_LOOP
((
yyvÆ
.
node
), 0, (
yyv•
[(3Ë- (8)].node), 0, 
	`›timize_lo›_ã°
((yyvsp[(6) - (8)].node)));

2938 
c⁄ãxt
 = (
yyv•
[(1Ë- (8)].
numbî
);

2946 (
yyv•
[(1Ë- (8)].
numbî
Ë
c⁄ãxt
;

2947 
c⁄ãxt
 = 
LOOP_CONTEXT
;

2955 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[(3) - (10)].decl).num;

2957 (
yyv•
[(3Ë- (10)].
de˛
).
node
 = 
	`ö£π_p›_vÆue
((yyvsp[(3) - (10)].decl).node);

2958 (
yyv•
[(7Ë- (10)].
node
Ë
	`ö£π_p›_vÆue
((yyvsp[(7) - (10)].node));

2959 i‡((
yyv•
[(7Ë- (10)].
node
Ë&& 
	`IS_NODE
((yyv•[(7Ë- (10)].node), 
NODE_UNARY_OP
, 
F_INC
)

2960 && 
	`IS_NODE
((
yyv•
[(7Ë- (10)].
node
)->
r
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
)) {

2961 
lv¨
 = (
yyv•
[(7Ë- (10)].
node
)->
r
.
ex¥
->
l
.
numbî
;

2962 
	`CREATE_OPCODE_1
((
yyv•
[(7Ë- (10)].
node
), 
F_LOOP_INCR
, 0, 
lv¨
);

2965 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[(3) - (10)].decl).node, 0);

2966 
	`CREATE_LOOP
((
yyvÆ
.
de˛
).
node
->
r
.
ex¥
, 1, (
yyv•
[(10Ë- (10)].node), (yyv•[(7Ë- (10)].node), 
	`›timize_lo›_ã°
((yyvsp[(5) - (10)].node)));

2968 
c⁄ãxt
 = (
yyv•
[(1Ë- (10)].
numbî
);

2976 i‡((
yyv•
[(1Ë- (1)].
ihe
)->
dn
.
loˇl_num
 != -1) {

2977 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_LOCAL_LVALUE
, 0, (
yyv•
[(1Ë- (1)].
ihe
)->
dn
.
loˇl_num
);

2979 i‡((
yyv•
[(1Ë- (1)].
ihe
)->
dn
.
globÆ_num
 != -1) {

2980 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_GLOBAL_LVALUE
, 0, (
yyv•
[(1Ë- (1)].
ihe
)->
dn
.
globÆ_num
);

2982 
buf
[256];

2983 *
íd
 = 
	`EndOf
(
buf
);

2984 *
p
;

2986 
p
 = 
	`°Ωut
(
buf
, 
íd
, "'");

2987 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(1Ë- (1)].
ihe
)->
«me
);

2988 
p
 = 
	`°Ωut
’, 
íd
, "' isÇotáÜocal orá global variable.");

2989 
	`yyîr‹
(
buf
);

2990 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_GLOBAL_LVALUE
, 0, 0);

2992 (
yyvÆ
.
de˛
).
num
 = 0;

3000 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_LOCAL_LVALUE
, 0, (
yyv•
[(1Ë- (1)].
numbî
));

3001 (
yyvÆ
.
de˛
).
num
 = 1;

3009 
buf
[256];

3010 *
íd
 = 
	`EndOf
(
buf
);

3011 *
p
;

3013 
p
 = 
	`°Ωut
(
buf
, 
íd
, "'");

3014 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(1Ë- (1)].
°rög
));

3015 
p
 = 
	`°Ωut
’, 
íd
, "' isÇotáÜocal orá global variable.");

3016 
	`yyîr‹
(
buf
);

3017 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_GLOBAL_LVALUE
, 0, 0);

3018 
	`s¸©ch_‰ì
((
yyv•
[(1Ë- (1)].
°rög
));

3019 (
yyvÆ
.
de˛
).
num
 = 0;

3027 
	`CREATE_FOREACH
((
yyvÆ
.
de˛
).
node
, (
yyv•
[(1) - (1)].decl).node, 0);

3028 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[(1) - (1)].decl).num;

3036 
	`CREATE_FOREACH
((
yyvÆ
.
de˛
).
node
, (
yyv•
[(1) - (3)].decl).node, (yyvsp[(3) - (3)].decl).node);

3037 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[(1) - (3)].decl).num + (yyvsp[(3) - (3)].decl).num;

3045 (
yyv•
[(3Ë- (6)].
de˛
).
node
->
v
.
ex¥
 = (yyvsp[(5) - (6)].node);

3046 (
yyv•
[(1Ë- (6)].
numbî
Ë
c⁄ãxt
;

3047 
c⁄ãxt
 = 
LOOP_CONTEXT
 | 
LOOP_FOREACH
;

3055 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[(3) - (8)].decl).num;

3057 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[(3) - (8)].decl).node, 0);

3058 
	`CREATE_LOOP
((
yyvÆ
.
de˛
).
node
->
r
.
ex¥
, 2, (
yyv•
[(8) - (8)].node), 0, 0);

3059 
	`CREATE_OPCODE
((
yyvÆ
.
de˛
).
node
->
r
.
ex¥
->r.ex¥, 
F_NEXT_FOREACH
, 0);

3061 
c⁄ãxt
 = (
yyv•
[(1Ë- (8)].
numbî
);

3069 
	`CREATE_NUMBER
((
yyvÆ
.
node
), 1);

3077 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[(1) - (1)].node);

3078 (
yyvÆ
.
de˛
).
num
 = 0;

3086 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[(1) - (1)].node);

3087 (
yyvÆ
.
de˛
).
num
 = 1;

3095 (
yyv•
[(1Ë- (4)].
numbî
Ë
c⁄ãxt
;

3096 
c⁄ãxt
 &
LOOP_CONTEXT
;

3097 
c⁄ãxt
 |
SWITCH_CONTEXT
;

3098 (
yyv•
[(2Ë- (4)].
numbî
Ë
mem_block
[
A_CASES
].
cuºít_size
;

3106 
∑r£_node_t
 *
node1
, *
node2
;

3108 i‡((
yyv•
[(9Ë- (10)].
node
)) {

3109 
	`CREATE_STATEMENTS
(
node1
, (
yyv•
[(8Ë- (10)].
node
), (yyvsp[(9) - (10)].node));

3110 } 
node1
 = (
yyv•
[(8Ë- (10)].
node
);

3112 i‡(
c⁄ãxt
 & 
SWITCH_STRINGS
) {

3113 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_STRINGS
);

3114 } i‡(
c⁄ãxt
 & 
SWITCH_RANGES
) {

3115 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_RANGES
);

3117 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_NUMBERS
);

3119 
node2
->
l
.
ex¥
 = (
yyv•
[(3Ë- (10)].
node
);

3120 
node2
->
r
.
ex¥
 = 
node1
;

3121 
	`¥ï¨e_ˇ£s
(
node2
, (
yyv•
[(2Ë- (10)].
numbî
));

3122 
c⁄ãxt
 = (
yyv•
[(1Ë- (10)].
numbî
);

3123 (
yyvÆ
.
node
Ë
node2
;

3124 
	`p›_n_loˇls
((
yyv•
[(7Ë- (10)].
de˛
).
num
);

3132 i‡((
yyv•
[(2Ë- (2)].
node
)){

3133 
	`CREATE_STATEMENTS
((
yyvÆ
.
node
), (
yyv•
[(1) - (2)].node), (yyvsp[(2) - (2)].node));

3134 } (
yyvÆ
.
node
Ë(
yyv•
[(1) - (2)].node);

3142 i‡((
yyv•
[(2Ë- (2)].
node
)){

3143 
	`CREATE_STATEMENTS
((
yyvÆ
.
node
), (
yyv•
[(1) - (2)].node), (yyvsp[(2) - (2)].node));

3144 } (
yyvÆ
.
node
Ë(
yyv•
[(1) - (2)].node);

3152 (
yyvÆ
.
node
) = 0;

3160 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (3)].node);

3161 (
yyvÆ
.
node
)->
v
.
ex¥
 = 0;

3163 
	`add_to_mem_block
(
A_CASES
, (*)&((
yyv•
[(2Ë- (3)].
node
)), ((yyvsp[(2) - (3)].node)));

3171 i‡–(
yyv•
[(2Ë- (5)].
node
)->
köd
 !
NODE_CASE_NUMBER


3172 || (
yyv•
[(4Ë- (5)].
node
)->
köd
 !
NODE_CASE_NUMBER
 )

3173 
	`yyîr‹
("String caseÜabelsÇotállowedásÑange bounds");

3174 i‡((
yyv•
[(2Ë- (5)].
node
)->
r
.
numbî
 > (yyvsp[(4) - (5)].node)->r.number) ;

3176 
c⁄ãxt
 |
SWITCH_RANGES
;

3178 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (5)].node);

3179 (
yyvÆ
.
node
)->
v
.
ex¥
 = (
yyv•
[(4) - (5)].node);

3181 
	`add_to_mem_block
(
A_CASES
, (*)&((
yyv•
[(2Ë- (5)].
node
)), ((yyvsp[(2) - (5)].node)));

3189 i‡(
c⁄ãxt
 & 
SWITCH_DEFAULT
) {

3190 
	`yyîr‹
("Duplicate default");

3191 (
yyvÆ
.
node
) = 0;

3194 (
yyvÆ
.
node
Ë
	`√w_node
();

3195 (
yyvÆ
.
node
)->
köd
 = 
NODE_DEFAULT
;

3196 (
yyvÆ
.
node
)->
v
.
ex¥
 = 0;

3197 
	`add_to_mem_block
(
A_CASES
, (*)&((
yyvÆ
.
node
)), ((yyval.node)));

3198 
c⁄ãxt
 |
SWITCH_DEFAULT
;

3206 i‡((
c⁄ãxt
 & 
SWITCH_STRINGS
Ë&& (
yyv•
[(1Ë- (1)].
poöãr_öt
))

3207 
	`yyîr‹
("Mixed caseÜabelÜistÇotállowed");

3209 i‡((
yyv•
[(1Ë- (1)].
poöãr_öt
)Ë
c⁄ãxt
 |
SWITCH_NUMBERS
;

3210 (
yyvÆ
.
node
Ë
	`√w_node
();

3211 (
yyvÆ
.
node
)->
köd
 = 
NODE_CASE_NUMBER
;

3212 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
∑r£_node_t
 *)(
yyv•
[(1Ë- (1)].
poöãr_öt
);

3220 
°r
;

3222 
°r
 = 
	`°‹e_¥og_°rög
((
yyv•
[(1Ë- (1)].
°rög
));

3223 
	`s¸©ch_‰ì
((
yyv•
[(1Ë- (1)].
°rög
));

3224 i‡(
c⁄ãxt
 & 
SWITCH_NUMBERS
)

3225 
	`yyîr‹
("Mixed caseÜabelÜistÇotállowed");

3226 
c⁄ãxt
 |
SWITCH_STRINGS
;

3227 (
yyvÆ
.
node
Ë
	`√w_node
();

3228 (
yyvÆ
.
node
)->
köd
 = 
NODE_CASE_STRING
;

3229 (
yyvÆ
.
node
)->
r
.
numbî
 = 
°r
;

3237 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) | (yyvsp[(3) - (3)].pointer_int);

3245 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) ^ (yyvsp[(3) - (3)].pointer_int);

3253 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) & (yyvsp[(3) - (3)].pointer_int);

3261 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) == (yyvsp[(3) - (3)].pointer_int);

3269 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) != (yyvsp[(3) - (3)].pointer_int);

3277 (
yyv•
[(2Ë- (3)].
numbî
)){

3278 
F_GE
: (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) >= (yyvsp[(3) - (3)].pointer_int); ;

3279 
F_LE
: (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) <= (yyvsp[(3) - (3)].pointer_int); ;

3280 
F_GT
: (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) > (yyvsp[(3) - (3)].pointer_int); ;

3289 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) < (yyvsp[(3) - (3)].pointer_int);

3297 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) << (yyvsp[(3) - (3)].pointer_int);

3305 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) >> (yyvsp[(3) - (3)].pointer_int);

3313 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) + (yyvsp[(3) - (3)].pointer_int);

3321 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) - (yyvsp[(3) - (3)].pointer_int);

3329 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1) - (3)].pointer_int) * (yyvsp[(3) - (3)].pointer_int);

3337 i‡((
yyv•
[(3Ë- (3)].
poöãr_öt
)Ë(
yyvÆ
.poöãr_ötË(yyv•[(1Ë- (3)].poöãr_ötË% (yyv•[(3Ë- (3)].poöãr_öt); 
	`yyîr‹
("Modulo by zero");

3345 i‡((
yyv•
[(3Ë- (3)].
poöãr_öt
)Ë(
yyvÆ
.poöãr_ötË(yyv•[(1Ë- (3)].poöãr_ötË/ (yyv•[(3Ë- (3)].poöãr_öt); 
	`yyîr‹
("Division by zero");

3353 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(2) - (3)].pointer_int);

3361 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[(1Ë- (1)].
numbî
);

3369 (
yyvÆ
.
poöãr_öt
Ë-(
yyv•
[(2Ë- (2)].
numbî
);

3377 (
yyvÆ
.
poöãr_öt
Ë!(
yyv•
[(2Ë- (2)].
numbî
);

3385 (
yyvÆ
.
poöãr_öt
Ë~(
yyv•
[(2Ë- (2)].
numbî
);

3393 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (1)].node);

3401 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), (
yyv•
[(3Ë- (3)].node)->
ty≥
, 
	`ö£π_p›_vÆue
((yyvsp[(1) - (3)].node)), (yyvsp[(3) - (3)].node));

3409 
∑r£_node_t
 *
l
 = (
yyv•
[(1Ë- (3)].
node
), *
r
 = (yyvsp[(3) - (3)].node);

3412 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), (
yyv•
[(2Ë- (3)].
numbî
), 
r
->
ty≥
,Ñ, 
l
);

3414 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s
(
r
->
ty≥
, 
l
->type) &&

3415 !((
yyv•
[(2Ë- (3)].
numbî
Ë=
F_ADD_EQ


3416 && 
r
->
ty≥
 =
TYPE_STRING
 &&

3417 
	`COMP_TYPE
(
l
->
ty≥
, 
TYPE_NUMBER
))) {

3418 
buf
[256];

3419 *
íd
 = 
	`EndOf
(
buf
);

3420 *
p
;

3422 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Badássignment ");

3423 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
l
->
ty≥
, 
r
->type);

3424 
p
 = 
	`°Ωut
’, 
íd
, ".");

3425 
	`yyîr‹
(
buf
);

3428 #ifde‡
DBVAR_NOASSIGN


3429 i‡(
	`DBVAR_NODE_GET
(
l
)) {

3430 
buf
[256];

3431 *
íd
 = 
	`EndOf
(
buf
);

3432 *
p
;

3434 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Bad dbvarássignment ");

3435 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
l
->
ty≥
, 
r
->type);

3436 
p
 = 
	`°Ωut
’, 
íd
, ".");

3437 
	`yyîr‹
(
buf
);

3441 (
yyvÆ
.
node
)->
l
.
ex¥
 = 
	`do_¥omŸi⁄s
(
r
,Ü->
ty≥
);

3449 
	`yyîr‹
("Illegal LHS");

3450 
	`CREATE_ERROR
((
yyvÆ
.
node
));

3458 
∑r£_node_t
 *
p1
 = (
yyv•
[(3Ë- (5)].
node
), *
p2
 = (yyvsp[(5) - (5)].node);

3460 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
(
p1
->
ty≥
, 
p2
->type)) {

3461 
buf
[256];

3462 *
íd
 = 
	`EndOf
(
buf
);

3463 *
p
;

3465 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Types in ?: doÇot match ");

3466 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
p1
->
ty≥
, 
p2
->type);

3467 
p
 = 
	`°Ωut
’, 
íd
, ".");

3468 
	`yyw¨n
(
buf
);

3472 i‡(
	`IS_NODE
((
yyv•
[(1Ë- (5)].
node
), 
NODE_UNARY_OP
, 
F_NOT
)) {

3474 
	`CREATE_IF
((
yyvÆ
.
node
), (
yyv•
[(1Ë- (5)].node)->
r
.
ex¥
, 
p2
, 
p1
);

3476 
	`CREATE_IF
((
yyvÆ
.
node
), (
yyv•
[(1Ë- (5)].node), 
p1
, 
p2
);

3478 (
yyvÆ
.
node
)->
ty≥
 = ((
p1
->ty≥ =
p2
->ty≥Ë?Ö1->ty≥ : 
TYPE_ANY
);

3486 
	`CREATE_LAND_LOR
((
yyvÆ
.
node
), 
F_LOR
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3487 i‡(
	`IS_NODE
((
yyv•
[(1Ë- (3)].
node
), 
NODE_LAND_LOR
, 
F_LOR
))

3488 (
yyv•
[(1Ë- (3)].
node
)->
köd
 = 
NODE_BRANCH_LINK
;

3496 
	`CREATE_LAND_LOR
((
yyvÆ
.
node
), 
F_LAND
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3497 i‡(
	`IS_NODE
((
yyv•
[(1Ë- (3)].
node
), 
NODE_LAND_LOR
, 
F_LAND
))

3498 (
yyv•
[(1Ë- (3)].
node
)->
köd
 = 
NODE_BRANCH_LINK
;

3506 i‡(
	`is_boﬁón
((
yyv•
[(1Ë- (3)].
node
)) && is_boolean((yyvsp[(3) - (3)].node)))

3507 
	`yyw¨n
("bitwise operation on boolean values.");

3508 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[(1Ë- (3)].node), (yyv•[(3Ë- (3)].node), 
F_OR
, "|");

3516 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[(1Ë- (3)].node), (yyv•[(3Ë- (3)].node), 
F_XOR
, "^");

3524 
t1
 = (
yyv•
[(1Ë- (3)].
node
)->
ty≥
, 
t3
 = (yyvsp[(3) - (3)].node)->type;

3525 i‡(
	`is_boﬁón
((
yyv•
[(1Ë- (3)].
node
)) && is_boolean((yyvsp[(3) - (3)].node)))

3526 
	`yyw¨n
("bitwise operation on boolean values.");

3527 i‡((
t1
 & 
TYPE_MOD_ARRAY
Ë|| (
t3
 & TYPE_MOD_ARRAY)) {

3528 i‡(
t1
 !
t3
) {

3529 i‡((
t1
 !
TYPE_ANY
Ë&& (
t3
 != TYPE_ANY) &&

3530 !(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
)) {

3531 
buf
[256];

3532 *
íd
 = 
	`EndOf
(
buf
);

3533 *
p
;

3535 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IncompatibleÅypes for & ");

3536 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3537 
p
 = 
	`°Ωut
’, 
íd
, ".");

3538 
	`yyîr‹
(
buf
);

3540 
t1
 = 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
;

3542 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_AND
, 
t1
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3543 } (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[(1Ë- (3)].node), (yyv•[(3Ë- (3)].node), 
F_AND
, "&");

3551 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
((
yyv•
[(1Ë- (3)].
node
)->
ty≥
, (yyvsp[(3) - (3)].node)->type)){

3552 
buf
[256];

3553 *
íd
 = 
	`EndOf
(
buf
);

3554 *
p
;

3556 
p
 = 
	`°Ωut
(
buf
, 
íd
, "==álways false because of incompatibleÅypes ");

3557 
p
 = 
	`gë_two_ty≥s
’, 
íd
, (
yyv•
[(1Ë- (3)].
node
)->
ty≥
, (yyvsp[(3) - (3)].node)->type);

3558 
p
 = 
	`°Ωut
’, 
íd
, ".");

3559 
	`yyîr‹
(
buf
);

3562 i‡(
	`IS_NODE
((
yyv•
[(1Ë- (3)].
node
), 
NODE_NUMBER
, 0)) {

3563 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[(3) - (3)].node));

3565 i‡(
	`IS_NODE
((
yyv•
[(3Ë- (3)].
node
), 
NODE_NUMBER
, 0)) {

3566 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[(1) - (3)].node));

3568 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_EQ
, 
TYPE_NUMBER
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3577 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
((
yyv•
[(1Ë- (3)].
node
)->
ty≥
, (yyvsp[(3) - (3)].node)->type)){

3578 
buf
[256];

3579 *
íd
 = 
	`EndOf
(
buf
);

3580 *
p
;

3582 
p
 = 
	`°Ωut
(
buf
, 
íd
, "!=álwaysÅrue because of incompatibleÅypes ");

3583 
p
 = 
	`gë_two_ty≥s
’, 
íd
, (
yyv•
[(1Ë- (3)].
node
)->
ty≥
, (yyvsp[(3) - (3)].node)->type);

3584 
p
 = 
	`°Ωut
’, 
íd
, ".");

3585 
	`yyîr‹
(
buf
);

3587 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_NE
, 
TYPE_NUMBER
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3595 i‡(
exa˘_ty≥s
) {

3596 
t1
 = (
yyv•
[(1Ë- (3)].
node
)->
ty≥
;

3597 
t3
 = (
yyv•
[(3Ë- (3)].
node
)->
ty≥
;

3599 i‡(!
	`COMP_TYPE
(
t1
, 
TYPE_NUMBER
)

3600 && !
	`COMP_TYPE
(
t1
, 
TYPE_STRING
)) {

3601 
buf
[256];

3602 *
íd
 = 
	`EndOf
(
buf
);

3603 *
p
;

3605 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÜeftárgumentÅo '");

3606 
p
 = 
	`°Ωut
’, 
íd
, 
	`gë_f_«me
((
yyv•
[(2Ë- (3)].
numbî
)));

3607 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

3608 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t1
);

3609 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3610 
	`yyîr‹
(
buf
);

3611 } i‡(!
	`COMP_TYPE
(
t3
, 
TYPE_NUMBER
)

3612 && !
	`COMP_TYPE
(
t3
, 
TYPE_STRING
)) {

3613 
buf
[256];

3614 *
íd
 = 
	`EndOf
(
buf
);

3615 *
p
;

3617 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÑightárgumentÅo '");

3618 
p
 = 
	`°Ωut
’, 
íd
, 
	`gë_f_«me
((
yyv•
[(2Ë- (3)].
numbî
)));

3619 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

3620 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t3
);

3621 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3622 
	`yyîr‹
(
buf
);

3623 } i‡(!
	`com∑tibÀ_ty≥s2
(
t1
,
t3
)) {

3624 
buf
[256];

3625 *
íd
 = 
	`EndOf
(
buf
);

3626 *
p
;

3628 
p
 = 
	`°Ωut
(
buf
, 
íd
, "ArgumentsÅo ");

3629 
p
 = 
	`°Ωut
’, 
íd
, 
	`gë_f_«me
((
yyv•
[(2Ë- (3)].
numbî
)));

3630 
p
 = 
	`°Ωut
’, 
íd
, " doÇot have compatibleÅypes : ");

3631 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3632 
	`yyîr‹
(
buf
);

3635 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), (
yyv•
[(2Ë- (3)].
numbî
), 
TYPE_NUMBER
, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3643 i‡(
exa˘_ty≥s
) {

3644 
t1
 = (
yyv•
[(1Ë- (3)].
node
)->
ty≥
, 
t3
 = (yyvsp[(3) - (3)].node)->type;

3646 i‡(!
	`COMP_TYPE
(
t1
, 
TYPE_NUMBER
)

3647 && !
	`COMP_TYPE
(
t1
, 
TYPE_STRING
)) {

3648 
buf
[256];

3649 *
íd
 = 
	`EndOf
(
buf
);

3650 *
p
;

3652 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÜeftárgumentÅo '<' : \"");

3653 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t1
);

3654 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3655 
	`yyîr‹
(
buf
);

3656 } i‡(!
	`COMP_TYPE
(
t3
, 
TYPE_NUMBER
)

3657 && !
	`COMP_TYPE
(
t3
, 
TYPE_STRING
)) {

3658 
buf
[200];

3659 *
íd
 = 
	`EndOf
(
buf
);

3660 *
p
;

3662 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÑightárgumentÅo '<' : \"");

3663 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t3
);

3664 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3665 
	`yyîr‹
(
buf
);

3666 } i‡(!
	`com∑tibÀ_ty≥s2
(
t1
,
t3
)) {

3667 
buf
[256];

3668 *
íd
 = 
	`EndOf
(
buf
);

3669 *
p
;

3671 
p
 = 
	`°Ωut
(
buf
, 
íd
, "ArgumentsÅo < doÇot have compatibleÅypes : ");

3672 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3673 
	`yyîr‹
(
buf
);

3676 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_LT
, 
TYPE_NUMBER
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3684 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[(1Ë- (3)].node), (yyv•[(3Ë- (3)].node), 
F_LSH
, "<<");

3692 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[(1Ë- (3)].node), (yyv•[(3Ë- (3)].node), 
F_RSH
, ">>");

3700 
ªsu…_ty≥
;

3702 i‡(
exa˘_ty≥s
) {

3703 
t1
 = (
yyv•
[(1Ë- (3)].
node
)->
ty≥
, 
t3
 = (yyvsp[(3) - (3)].node)->type;

3705 i‡(
t1
 =
t3
){

3706 #ifde‡
CAST_CALL_OTHERS


3707 i‡(
t1
 =
TYPE_UNKNOWN
){

3708 
	`yyîr‹
("BadárgumentsÅo '+' (unknown vs unknown)");

3709 
ªsu…_ty≥
 = 
TYPE_ANY
;

3712 
ªsu…_ty≥
 = 
t1
;

3714 i‡(
t1
 =
TYPE_ANY
) {

3715 i‡(
t3
 =
TYPE_FUNCTION
) {

3716 
	`yyîr‹
("BadÑightárgumentÅo '+' (function)");

3717 
ªsu…_ty≥
 = 
TYPE_ANY
;

3718 } 
ªsu…_ty≥
 = 
t3
;

3719 } i‡(
t3
 =
TYPE_ANY
) {

3720 i‡(
t1
 =
TYPE_FUNCTION
) {

3721 
	`yyîr‹
("BadÜeftárgumentÅo '+' (function)");

3722 
ªsu…_ty≥
 = 
TYPE_ANY
;

3723 } 
ªsu…_ty≥
 = 
t1
;

3725 
t1
) {

3726 
TYPE_STRING
:

3728 i‡(
t3
 =
TYPE_REAL
 ||Å3 =
TYPE_NUMBER
){

3729 
ªsu…_ty≥
 = 
TYPE_STRING
;

3730 } 
add_îr‹
;

3733 
TYPE_NUMBER
:

3735 i‡(
t3
 =
TYPE_REAL
 ||Å3 =
TYPE_STRING
)

3736 
ªsu…_ty≥
 = 
t3
;

3737 
add_îr‹
;

3740 
TYPE_REAL
:

3742 i‡(
t3
 =
TYPE_NUMBER
Ë
ªsu…_ty≥
 = 
TYPE_REAL
;

3743 i‡(
t3
 =
TYPE_STRING
Ë
ªsu…_ty≥
 = TYPE_STRING;

3744 
add_îr‹
;

3749 i‡(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
) {

3750 
ªsu…_ty≥
 = 
TYPE_ANY
|
TYPE_MOD_ARRAY
;

3753 
add_îr‹
:

3755 
buf
[256];

3756 *
íd
 = 
	`EndOf
(
buf
);

3757 *
p
;

3759 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidárgumentÅypesÅo '+' ");

3760 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3761 
	`yyîr‹
(
buf
);

3762 
ªsu…_ty≥
 = 
TYPE_ANY
;

3768 
ªsu…_ty≥
 = 
TYPE_ANY
;

3770 (
yyv•
[(1Ë- (3)].
node
)->
köd
) {

3771 
NODE_NUMBER
:

3773 i‡((
yyv•
[(1Ë- (3)].
node
)->
v
.
numbî
 == 0 &&

3774 ((
yyv•
[(3Ë- (3)].
node
)->
ty≥
 =
TYPE_NUMBER
 || (yyv•[(3Ë- (3)].node)->ty≥ =
TYPE_REAL
)) {

3775 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (3)].node);

3778 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_NUMBER
) {

3779 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3780 (
yyv•
[(1Ë- (3)].
node
)->
v
.
numbî
 += (yyvsp[(3) - (3)].node)->v.number;

3783 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_REAL
) {

3784 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (3)].node);

3785 (
yyv•
[(3Ë- (3)].
node
)->
v
.
ªÆ
 +(yyv•[(1Ë- (3)].node)->v.
numbî
;

3789 i‡((
yyv•
[(3Ë- (3)].
node
)->
ty≥
 !
TYPE_STRING
 && (yyv•[(3Ë- (3)].node)->ty≥ !
TYPE_ANY
)

3790 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[(3) - (3)].node), (yyvsp[(1) - (3)].node));

3792 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3794 
NODE_REAL
:

3795 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_NUMBER
) {

3796 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3797 (
yyv•
[(1Ë- (3)].
node
)->
v
.
ªÆ
 +(yyv•[(3Ë- (3)].node)->v.
numbî
;

3800 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_REAL
) {

3801 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3802 (
yyv•
[(1Ë- (3)].
node
)->
v
.
ªÆ
 += (yyvsp[(3) - (3)].node)->v.real;

3806 i‡((
yyv•
[(3Ë- (3)].
node
)->
ty≥
 !
TYPE_STRING
 && (yyv•[(3Ë- (3)].node)->ty≥ !
TYPE_ANY
)

3807 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[(3) - (3)].node), (yyvsp[(1) - (3)].node));

3809 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3811 
NODE_STRING
:

3812 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_STRING
) {

3814 
n1
, 
n2
;

3815 *
√w
, *
s1
, *
s2
;

3816 
l
;

3818 
n1
 = (
yyv•
[(1Ë- (3)].
node
)->
v
.
numbî
;

3819 
n2
 = (
yyv•
[(3Ë- (3)].
node
)->
v
.
numbî
;

3820 
s1
 = 
	`PROG_STRING
(
n1
);

3821 
s2
 = 
	`PROG_STRING
(
n2
);

3822 
√w
 = (*)
	`DXALLOC
–(
l
 = 
	`°æí
(
s1
))+°æí(
s2
)+1, 
TAG_COMPILER
, "combine string" );

3823 
	`°r˝y
(
√w
, 
s1
);

3824 
	`°rˇt
(
√w
 + 
l
, 
s2
);

3826 i‡(
n1
 > 
n2
) {

3827 
	`‰ì_¥og_°rög
(
n1
); fªe_¥og_°rög(
n2
);

3829 
	`‰ì_¥og_°rög
(
n2
); fªe_¥og_°rög(
n1
);

3831 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3832 (
yyvÆ
.
node
)->
v
.
numbî
 = 
	`°‹e_¥og_°rög
(
√w
);

3833 
	`FREE
(
√w
);

3836 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3840 i‡(
	`IS_NODE
((
yyv•
[(3Ë- (3)].
node
), 
NODE_NUMBER
, 0) &&

3841 ((
yyv•
[(1Ë- (3)].
node
)->
ty≥
 =
TYPE_NUMBER
 || (yyv•[(1Ë- (3)].node)->ty≥ =
TYPE_REAL
)) {

3842 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3845 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3855 
ªsu…_ty≥
;

3857 i‡(
exa˘_ty≥s
) {

3858 
t1
 = (
yyv•
[(1Ë- (3)].
node
)->
ty≥
, 
t3
 = (yyvsp[(3) - (3)].node)->type;

3860 i‡(
t1
 =
t3
){

3861 
t1
){

3862 
TYPE_ANY
:

3863 
TYPE_NUMBER
:

3864 
TYPE_REAL
:

3865 
ªsu…_ty≥
 = 
t1
;

3868 i‡(!(
t1
 & 
TYPE_MOD_ARRAY
)){

3869 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'-'", 
t1
);

3870 
ªsu…_ty≥
 = 
TYPE_ANY
;

3871 } 
ªsu…_ty≥
 = 
t1
;

3873 } i‡(
t1
 =
TYPE_ANY
){

3874 
t3
){

3875 
TYPE_REAL
:

3876 
TYPE_NUMBER
:

3877 
ªsu…_ty≥
 = 
t3
;

3880 i‡(!(
t3
 & 
TYPE_MOD_ARRAY
)){

3881 
	`ty≥_îr‹
("Badárgumíànumbî 2Åÿ'-'", 
t3
);

3882 
ªsu…_ty≥
 = 
TYPE_ANY
;

3883 } 
ªsu…_ty≥
 = 
t3
;

3885 } i‡(
t3
 =
TYPE_ANY
){

3886 
t1
){

3887 
TYPE_REAL
:

3888 
TYPE_NUMBER
:

3889 
ªsu…_ty≥
 = 
t1
;

3892 i‡(!(
t1
 & 
TYPE_MOD_ARRAY
)){

3893 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'-'", 
t1
);

3894 
ªsu…_ty≥
 = 
TYPE_ANY
;

3895 } 
ªsu…_ty≥
 = 
t1
;

3897 } i‡((
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
) ||

3898 (
t3
 =
TYPE_REAL
 && 
t1
 =
TYPE_NUMBER
)){

3899 
ªsu…_ty≥
 = 
TYPE_REAL
;

3900 } i‡(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
){

3901 
ªsu…_ty≥
 = 
TYPE_MOD_ARRAY
|
TYPE_ANY
;

3903 
buf
[256];

3904 *
íd
 = 
	`EndOf
(
buf
);

3905 *
p
;

3907 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '-' ");

3908 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3909 
	`yyîr‹
(
buf
);

3910 
ªsu…_ty≥
 = 
TYPE_ANY
;

3912 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

3914 (
yyv•
[(1Ë- (3)].
node
)->
köd
) {

3915 
NODE_NUMBER
:

3916 i‡((
yyv•
[(1Ë- (3)].
node
)->
v
.
numbî
 == 0) {

3917 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NEGATE
, (
yyv•
[(3Ë- (3)].node)->
ty≥
, (yyvsp[(3) - (3)].node));

3918 } i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_NUMBER
) {

3919 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3920 (
yyv•
[(1Ë- (3)].
node
)->
v
.
numbî
 -= (yyvsp[(3) - (3)].node)->v.number;

3921 } i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_REAL
) {

3922 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (3)].node);

3923 (
yyv•
[(3Ë- (3)].
node
)->
v
.
ªÆ
 = (yyv•[(1Ë- (3)].node)->v.
numbî
 - (yyvsp[(3) - (3)].node)->v.real;

3925 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_SUBTRACT
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3928 
NODE_REAL
:

3929 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_NUMBER
) {

3930 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3931 (
yyv•
[(1Ë- (3)].
node
)->
v
.
ªÆ
 -(yyv•[(3Ë- (3)].node)->v.
numbî
;

3932 } i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_REAL
) {

3933 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3934 (
yyv•
[(1Ë- (3)].
node
)->
v
.
ªÆ
 -= (yyvsp[(3) - (3)].node)->v.real;

3936 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_SUBTRACT
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3941 i‡(
	`IS_NODE
((
yyv•
[(3Ë- (3)].
node
), 
NODE_NUMBER
, 0)) {

3942 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

3944 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_SUBTRACT
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

3953 
ªsu…_ty≥
;

3955 i‡(
exa˘_ty≥s
){

3956 
t1
 = (
yyv•
[(1Ë- (3)].
node
)->
ty≥
, 
t3
 = (yyvsp[(3) - (3)].node)->type;

3958 i‡(
t1
 =
t3
){

3959 
t1
){

3960 
TYPE_MAPPING
:

3961 
TYPE_ANY
:

3962 
TYPE_NUMBER
:

3963 
TYPE_REAL
:

3964 
ªsu…_ty≥
 = 
t1
;

3967 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'*'", 
t1
);

3968 
ªsu…_ty≥
 = 
TYPE_ANY
;

3970 } i‡(
t1
 =
TYPE_ANY
 || 
t3
 == TYPE_ANY){

3971 
t
 = (
t1
 =
TYPE_ANY
Ë? 
t3
 :Å1;

3972 
t
){

3973 
TYPE_NUMBER
:

3974 
TYPE_REAL
:

3975 
TYPE_MAPPING
:

3976 
ªsu…_ty≥
 = 
t
;

3979 
	`ty≥_îr‹
((
t1
 =
TYPE_ANY
) ?

3982 
t
);

3983 
ªsu…_ty≥
 = 
TYPE_ANY
;

3985 } i‡((
t1
 =
TYPE_NUMBER
 && 
t3
 =
TYPE_REAL
) ||

3986 (
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
)){

3987 
ªsu…_ty≥
 = 
TYPE_REAL
;

3989 
buf
[256];

3990 *
íd
 = 
	`EndOf
(
buf
);

3991 *
p
;

3993 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '*' ");

3994 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3995 
	`yyîr‹
(
buf
);

3996 
ªsu…_ty≥
 = 
TYPE_ANY
;

3998 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4000 (
yyv•
[(1Ë- (3)].
node
)->
köd
) {

4001 
NODE_NUMBER
:

4002 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_NUMBER
) {

4003 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4004 (
yyvÆ
.
node
)->
v
.
numbî
 *(
yyv•
[(3) - (3)].node)->v.number;

4007 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_REAL
) {

4008 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (3)].node);

4009 (
yyv•
[(3Ë- (3)].
node
)->
v
.
ªÆ
 *(yyv•[(1Ë- (3)].node)->v.
numbî
;

4012 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_MULTIPLY
, 
ªsu…_ty≥
, (
yyv•
[(3) - (3)].node), (yyvsp[(1) - (3)].node));

4014 
NODE_REAL
:

4015 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_NUMBER
) {

4016 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4017 (
yyv•
[(1Ë- (3)].
node
)->
v
.
ªÆ
 *(yyv•[(3Ë- (3)].node)->v.
numbî
;

4020 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_REAL
) {

4021 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4022 (
yyv•
[(1Ë- (3)].
node
)->
v
.
ªÆ
 *= (yyvsp[(3) - (3)].node)->v.real;

4025 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_MULTIPLY
, 
ªsu…_ty≥
, (
yyv•
[(3) - (3)].node), (yyvsp[(1) - (3)].node));

4028 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_MULTIPLY
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

4037 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[(1Ë- (3)].node), (yyv•[(3Ë- (3)].node), 
F_MOD
, "%");

4045 
ªsu…_ty≥
;

4047 i‡(
exa˘_ty≥s
){

4048 
t1
 = (
yyv•
[(1Ë- (3)].
node
)->
ty≥
, 
t3
 = (yyvsp[(3) - (3)].node)->type;

4050 i‡(
t1
 =
t3
){

4051 
t1
){

4052 
TYPE_NUMBER
:

4053 
TYPE_REAL
:

4054 
TYPE_ANY
:

4055 
ªsu…_ty≥
 = 
t1
;

4058 
	`ty≥_îr‹
("Badárgumíà1Åÿ'/'", 
t1
);

4059 
ªsu…_ty≥
 = 
TYPE_ANY
;

4061 } i‡(
t1
 =
TYPE_ANY
 || 
t3
 == TYPE_ANY){

4062 
t
 = (
t1
 =
TYPE_ANY
Ë? 
t3
 :Å1;

4063 i‡(
t
 =
TYPE_REAL
 ||Å =
TYPE_NUMBER
)

4064 
ªsu…_ty≥
 = 
t
;

4066 
	`ty≥_îr‹
(
t1
 =
TYPE_ANY
 ?

4068 "Badárgumíà1Åÿ'/'", 
t
);

4069 
ªsu…_ty≥
 = 
TYPE_ANY
;

4071 } i‡((
t1
 =
TYPE_NUMBER
 && 
t3
 =
TYPE_REAL
) ||

4072 (
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
)) {

4073 
ªsu…_ty≥
 = 
TYPE_REAL
;

4075 
buf
[256];

4076 *
íd
 = 
	`EndOf
(
buf
);

4077 *
p
;

4079 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '/' ");

4080 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

4081 
	`yyîr‹
(
buf
);

4082 
ªsu…_ty≥
 = 
TYPE_ANY
;

4084 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4087 (
yyv•
[(1Ë- (3)].
node
)->
köd
) {

4088 
NODE_NUMBER
:

4089 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_NUMBER
) {

4090 i‡((
yyv•
[(3Ë- (3)].
node
)->
v
.
numbî
 == 0) {

4091 
	`yyîr‹
("Divide by zero in constant");

4092 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4095 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4096 (
yyv•
[(1Ë- (3)].
node
)->
v
.
numbî
 /= (yyvsp[(3) - (3)].node)->v.number;

4099 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_REAL
) {

4100 i‡((
yyv•
[(3Ë- (3)].
node
)->
v
.
ªÆ
 == 0.0) {

4101 
	`yyîr‹
("Divide by zero in constant");

4102 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4105 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (3)].node);

4106 (
yyv•
[(3Ë- (3)].
node
)->
v
.
ªÆ
 = ((yyv•[(1Ë- (3)].node)->v.
numbî
 / (yyvsp[(3) - (3)].node)->v.real);

4109 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_DIVIDE
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

4111 
NODE_REAL
:

4112 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_NUMBER
) {

4113 i‡((
yyv•
[(3Ë- (3)].
node
)->
v
.
numbî
 == 0) {

4114 
	`yyîr‹
("Divide by zero in constant");

4115 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4118 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4119 (
yyv•
[(1Ë- (3)].
node
)->
v
.
ªÆ
 /(yyv•[(3Ë- (3)].node)->v.
numbî
;

4122 i‡((
yyv•
[(3Ë- (3)].
node
)->
köd
 =
NODE_REAL
) {

4123 i‡((
yyv•
[(3Ë- (3)].
node
)->
v
.
ªÆ
 == 0.0) {

4124 
	`yyîr‹
("Divide by zero in constant");

4125 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4128 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4129 (
yyv•
[(1Ë- (3)].
node
)->
v
.
ªÆ
 /= (yyvsp[(3) - (3)].node)->v.real;

4132 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_DIVIDE
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

4135 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_DIVIDE
, 
ªsu…_ty≥
, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

4144 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (2)].node);

4145 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[(1) - (2)].type);

4147 i‡(
exa˘_ty≥s
 &&

4148 (
yyv•
[(2Ë- (2)].
node
)->
ty≥
 != (yyvsp[(1) - (2)].type) &&

4149 (
yyv•
[(2Ë- (2)].
node
)->
ty≥
 !
TYPE_ANY
 &&

4150 (
yyv•
[(2Ë- (2)].
node
)->
ty≥
 !
TYPE_UNKNOWN
 &&

4151 (
yyv•
[(1Ë- (2)].
ty≥
Ë!
TYPE_VOID
) {

4152 
buf
[256];

4153 *
íd
 = 
	`EndOf
(
buf
);

4154 *
p
;

4156 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Cannot cast ");

4157 
p
 = 
	`gë_ty≥_«me
’, 
íd
, (
yyv•
[(2Ë- (2)].
node
)->
ty≥
);

4158 
p
 = 
	`°Ωut
’, 
íd
, "to ");

4159 
p
 = 
	`gë_ty≥_«me
’, 
íd
, (
yyv•
[(1Ë- (2)].
ty≥
));

4160 
	`yyîr‹
(
buf
);

4169 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_PRE_INC
, 0, (
yyv•
[(2) - (2)].node));

4170 i‡(
exa˘_ty≥s
){

4171 (
yyv•
[(2Ë- (2)].
node
)->
ty≥
){

4172 
TYPE_NUMBER
:

4173 
TYPE_ANY
:

4174 
TYPE_REAL
:

4176 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[(2) - (2)].node)->type;

4182 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4183 
	`ty≥_îr‹
("Badárgumíà1Åÿ++x", (
yyv•
[(2Ë- (2)].
node
)->
ty≥
);

4186 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4194 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_PRE_DEC
, 0, (
yyv•
[(2) - (2)].node));

4195 i‡(
exa˘_ty≥s
){

4196 (
yyv•
[(2Ë- (2)].
node
)->
ty≥
){

4197 
TYPE_NUMBER
:

4198 
TYPE_ANY
:

4199 
TYPE_REAL
:

4201 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[(2) - (2)].node)->type;

4207 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4208 
	`ty≥_îr‹
("Badárgumíà1Åÿ--x", (
yyv•
[(2Ë- (2)].
node
)->
ty≥
);

4211 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4220 i‡((
yyv•
[(2Ë- (2)].
node
)->
köd
 =
NODE_NUMBER
) {

4221 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (2)].node);

4222 (
yyvÆ
.
node
)->
v
.
numbî
 = !((yyval.node)->v.number);

4224 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[(2) - (2)].node));

4233 i‡(
exa˘_ty≥s
 && !
	`IS_TYPE
((
yyv•
[(2Ë- (2)].
node
)->
ty≥
, 
TYPE_NUMBER
))

4234 
	`ty≥_îr‹
("Badárgumíàtÿ~", (
yyv•
[(2Ë- (2)].
node
)->
ty≥
);

4235 i‡((
yyv•
[(2Ë- (2)].
node
)->
köd
 =
NODE_NUMBER
) {

4236 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (2)].node);

4237 (
yyvÆ
.
node
)->
v
.
numbî
 = ~(yyval.node)->v.number;

4239 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_COMPL
, 
TYPE_NUMBER
, (
yyv•
[(2) - (2)].node));

4248 
ªsu…_ty≥
;

4249 i‡(
exa˘_ty≥s
){

4250 
t
 = (
yyv•
[(2Ë- (2)].
node
)->
ty≥
;

4251 i‡(!
	`COMP_TYPE
(
t
, 
TYPE_NUMBER
)){

4252 
	`ty≥_îr‹
("Badárgumíàtÿu«ry '-'", 
t
);

4253 
ªsu…_ty≥
 = 
TYPE_ANY
;

4254 } 
ªsu…_ty≥
 = 
t
;

4255 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4257 (
yyv•
[(2Ë- (2)].
node
)->
köd
) {

4258 
NODE_NUMBER
:

4259 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (2)].node);

4260 (
yyvÆ
.
node
)->
v
.
numbî
 = -(yyval.node)->v.number;

4262 
NODE_REAL
:

4263 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (2)].node);

4264 (
yyvÆ
.
node
)->
v
.
ªÆ
 = -(yyval.node)->v.real;

4267 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NEGATE
, 
ªsu…_ty≥
, (
yyv•
[(2) - (2)].node));

4276 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_POST_INC
, 0, (
yyv•
[(1) - (2)].node));

4277 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_POST_INC
;

4278 i‡(
exa˘_ty≥s
){

4279 (
yyv•
[(1Ë- (2)].
node
)->
ty≥
){

4280 
TYPE_NUMBER
:

4281 
TYPE_ANY
:

4282 
TYPE_REAL
:

4284 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[(1) - (2)].node)->type;

4290 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4291 
	`ty≥_îr‹
("Badárgumíà1Åÿx++", (
yyv•
[(1Ë- (2)].
node
)->
ty≥
);

4294 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4302 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_POST_DEC
, 0, (
yyv•
[(1) - (2)].node));

4303 i‡(
exa˘_ty≥s
){

4304 (
yyv•
[(1Ë- (2)].
node
)->
ty≥
){

4305 
TYPE_NUMBER
:

4306 
TYPE_ANY
:

4307 
TYPE_REAL
:

4309 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[(1) - (2)].node)->type;

4315 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4316 
	`ty≥_îr‹
("Badárgumíà1Åÿx--", (
yyv•
[(1Ë- (2)].
node
)->
ty≥
);

4319 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4327 i‡(
exa˘_ty≥s
 && !
	`IS_TYPE
”xa˘_ty≥s, 
TYPE_VOID
))

4328 
	`yyw¨n
("Non-void functions mustÑeturná value.");

4329 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

4337 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s
((
yyv•
[(2Ë- (3)].
node
)->
ty≥
,Éxa˘_ty≥†& ~
NAME_TYPE_MOD
)) {

4338 
buf
[256];

4339 *
íd
 = 
	`EndOf
(
buf
);

4340 *
p
;

4342 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Type ofÑeturned value doesn't match functionÑeturnÅype ");

4343 
p
 = 
	`gë_two_ty≥s
’, 
íd
, (
yyv•
[(2Ë- (3)].
node
)->
ty≥
, 
exa˘_ty≥s
 & ~
NAME_TYPE_MOD
);

4344 
	`yyîr‹
(
buf
);

4346 i‡(
	`IS_NODE
((
yyv•
[(2Ë- (3)].
node
), 
NODE_NUMBER
, 0)) {

4347 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

4349 
	`CREATE_RETURN
((
yyvÆ
.
node
), (
yyv•
[(2) - (3)].node));

4358 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), 0);

4366 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[(1) - (1)].node));

4374 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[(1) - (2)].node));

4382 
	`CREATE_EXPR_NODE
((
yyvÆ
.
node
), (
yyv•
[(1) - (1)].node), 0);

4390 
	`CREATE_EXPR_NODE
((
yyvÆ
.
node
), (
yyv•
[(1) - (2)].node), 1);

4398 (
yyv•
[(1Ë- (1)].
node
)->
köd
 = 1;

4400 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (1)].node);

4408 (
yyv•
[(3Ë- (3)].
node
)->
köd
 = 0;

4410 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4411 (
yyvÆ
.
node
)->
köd
++;

4412 (
yyvÆ
.
node
)->
l
.
ex¥
->
r
.ex¥ = (
yyv•
[(3) - (3)].node);

4413 (
yyvÆ
.
node
)->
l
.
ex¥
 = (
yyv•
[(3) - (3)].node);

4422 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), 0);

4430 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[(1) - (1)].node));

4438 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[(1) - (2)].node));

4446 (
yyvÆ
.
node
Ë
	`√w_node_no_löe
();

4447 (
yyvÆ
.
node
)->
köd
 = 2;

4448 (
yyvÆ
.
node
)->
v
.
ex¥
 = (
yyv•
[(1) - (1)].node);

4449 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

4450 (
yyvÆ
.
node
)->
ty≥
 = 0;

4452 (
yyvÆ
.
node
)->
l
.
ex¥
 = (yyval.node);

4460 
∑r£_node_t
 *
ex¥
;

4462 
ex¥
 = 
	`√w_node_no_löe
();

4463 
ex¥
->
köd
 = 0;

4464 
ex¥
->
v
.ex¥ = (
yyv•
[(3Ë- (3)].
node
);

4465 
ex¥
->
r
.expr = 0;

4466 
ex¥
->
ty≥
 = 0;

4468 (
yyv•
[(1Ë- (3)].
node
)->
l
.
ex¥
->
r
.expr =Éxpr;

4469 (
yyv•
[(1Ë- (3)].
node
)->
l
.
ex¥
 =Éxpr;

4470 (
yyv•
[(1Ë- (3)].
node
)->
köd
 += 2;

4471 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (3)].node);

4479 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), 0, (
yyv•
[(1) - (3)].node), (yyvsp[(3) - (3)].node));

4487 
	#LV_ILLEGAL
 1

	)

4488 
	#LV_RANGE
 2

	)

4489 
	#LV_INDEX
 4

	)

4491 (
yyvÆ
.
node
Ë(
yyv•
[(1) - (1)].node);

4492 (
yyvÆ
.
node
)->
köd
) {

4494 
	`yyîr‹
("IllegalÜvalue");

4496 
NODE_PARAMETER
:

4497 (
yyvÆ
.
node
)->
köd
 = 
NODE_PARAMETER_LVALUE
;

4499 
NODE_TERNARY_OP
:

4500 (
yyvÆ
.
node
)->
v
.
numbî
 = (yyvÆ.node)->
r
.
ex¥
->v.number;

4501 
NODE_OPCODE_1
:

4502 
NODE_UNARY_OP_1
:

4503 
NODE_BINARY_OP
:

4504 i‡((
yyvÆ
.
node
)->
v
.
numbî
 >
F_LOCAL
 && (yyvÆ.node)->v.numbî <
F_MEMBER
)

4505 (
yyvÆ
.
node
)->
v
.
numbî
++;

4506 i‡((
yyvÆ
.
node
)->
v
.
numbî
 >
F_INDEX


4507 && (
yyvÆ
.
node
)->
v
.
numbî
 <
F_RE_RANGE
) {

4508 
∑r£_node_t
 *
node
 = (
yyvÆ
.node);

4509 
Êag
 = 0;

4511 
node
->
köd
) {

4512 
NODE_PARAMETER
:

4513 
node
->
köd
 = 
NODE_PARAMETER_LVALUE
;

4514 
Êag
 |
LV_ILLEGAL
;

4516 
NODE_TERNARY_OP
:

4517 
node
->
v
.
numbî
 =Çode->
r
.
ex¥
->v.number;

4518 
NODE_OPCODE_1
:

4519 
NODE_UNARY_OP_1
:

4520 
NODE_BINARY_OP
:

4521 i‡(
node
->
v
.
numbî
 >
F_LOCAL


4522 && 
node
->
v
.
numbî
 <
F_MEMBER
) {

4523 
node
->
v
.
numbî
++;

4524 
Êag
 |
LV_ILLEGAL
;

4526 } i‡(
node
->
v
.
numbî
 =
F_INDEX
 ||

4527 
node
->
v
.
numbî
 =
F_RINDEX
) {

4528 
node
->
v
.
numbî
++;

4529 
Êag
 |
LV_INDEX
;

4531 } i‡(
node
->
v
.
numbî
 >
F_ADD_EQ


4532 && 
node
->
v
.
numbî
 <
F_ASSIGN
) {

4533 i‡(!(
Êag
 & 
LV_INDEX
)) {

4534 
	`yyîr‹
("IllegalÜvalue,áÖossibleÜvalue is (x <assign> y)[a]");

4536 i‡(
node
->
r
.
ex¥
->
köd
 =
NODE_BINARY_OP
||

4537 
node
->
r
.
ex¥
->
köd
 =
NODE_TERNARY_OP
){

4538 i‡(
node
->
r
.
ex¥
->
v
.
numbî
 >
F_NN_RANGE_LVALUE
 &&Çode->r.ex¥->v.numbî <
F_NR_RANGE_LVALUE
)

4539 
	`yyîr‹
("IllegalÅo have (x[a..b] <assign> y)Åo beÅhe beginning ofánÜvalue");

4541 
Êag
 = 
LV_ILLEGAL
;

4543 } i‡(
node
->
v
.
numbî
 >
F_NN_RANGE


4544 && 
node
->
v
.
numbî
 <
F_RE_RANGE
) {

4545 i‡(
Êag
 & 
LV_RANGE
) {

4546 
	`yyîr‹
("Can't doÑangeÜvalue ofÑangeÜvalue.");

4547 
Êag
 |
LV_ILLEGAL
;

4550 i‡(
Êag
 & 
LV_INDEX
){

4551 
	`yyîr‹
("Can't do indexedÜvalue ofÑangeÜvalue.");

4552 
Êag
 |
LV_ILLEGAL
;

4555 i‡(
node
->
v
.
numbî
 =
F_NE_RANGE
) {

4557 
∑r£_node_t
 *
rchûd
 = 
node
->
r
.
ex¥
;

4558 
node
->
köd
 = 
NODE_TERNARY_OP
;

4559 
	`CREATE_BINARY_OP
(
node
->
r
.
ex¥
,

4560 
F_NR_RANGE_LVALUE
,

4561 0, 0, 
rchûd
);

4562 
	`CREATE_NUMBER
(
node
->
r
.
ex¥
->
l
.expr, 1);

4563 } i‡(
node
->
v
.
numbî
 =
F_RE_RANGE
) {

4565 
∑r£_node_t
 *
rchûd
 = 
node
->
r
.
ex¥
;

4566 
node
->
köd
 = 
NODE_TERNARY_OP
;

4567 
	`CREATE_BINARY_OP
(
node
->
r
.
ex¥
,

4568 
F_RR_RANGE_LVALUE
,

4569 0, 0, 
rchûd
);

4570 
	`CREATE_NUMBER
(
node
->
r
.
ex¥
->
l
.expr, 1);

4572 
node
->
r
.
ex¥
->
v
.
numbî
++;

4573 
Êag
 |
LV_RANGE
;

4574 
node
 =Çode->
r
.
ex¥
->r.expr;

4578 
	`yyîr‹
("IllegalÜvalue");

4579 
Êag
 = 
LV_ILLEGAL
;

4582 i‡((
Êag
 & 
LV_ILLEGAL
Ë|| !(
node
 =Çode->
r
.
ex¥
)) ;

4586 
	`yyîr‹
("IllegalÜvalue");

4596 
i
;

4597 i‡((
i
 = (
yyv•
[(1Ë- (1)].
ihe
)->
dn
.
loˇl_num
) != -1) {

4598 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_LOCAL
, 
ty≥_of_loˇls_±r
[
i
],i & 0xff);

4599 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

4600 
cuºít_fun˘i⁄_c⁄ãxt
->
num_loˇls
++;

4602 i‡((
i
 = (
yyv•
[(1Ë- (1)].
ihe
)->
dn
.
globÆ_num
) != -1) {

4603 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

4604 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

4605 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_GLOBAL
,

4606 
	`VAR_TEMP
(
i
)->
ty≥
 & ~
NAME_TYPE_MOD
, i);

4607 #ifde‡
DBVAR_NOASSIGN


4608 
	`DBVAR_NODE_SET
((
yyvÆ
.
node
), 
	`VAR_TEMP
(
i
)->
ty≥
);

4610 i‡(
	`VAR_TEMP
(
i
)->
ty≥
 & 
NAME_HIDDEN
) {

4611 
buf
[256];

4612 *
íd
 = 
	`EndOf
(
buf
);

4613 *
p
;

4615 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo useÖrivate variable '");

4616 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(1Ë- (1)].
ihe
)->
«me
);

4617 
p
 = 
	`°Ωut
’, 
íd
, "'");

4618 
	`yyîr‹
(
buf
);

4621 
buf
[256];

4622 *
íd
 = 
	`EndOf
(
buf
);

4623 *
p
;

4625 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined variable '");

4626 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(1Ë- (1)].
ihe
)->
«me
);

4627 
p
 = 
	`°Ωut
’, 
íd
, "'");

4628 i‡(
cuºít_numbî_of_loˇls
 < 
CFG_MAX_LOCAL_VARIABLES
) {

4629 
	`add_loˇl_«me
((
yyv•
[(1Ë- (1)].
ihe
)->
«me
, 
TYPE_ANY
);

4631 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_LOCAL
, 
TYPE_ANY
, 0);

4632 
	`yyîr‹
(
buf
);

4641 
buf
[256];

4642 *
íd
 = 
	`EndOf
(
buf
);

4643 *
p
;

4645 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined variable '");

4646 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(1Ë- (1)].
°rög
));

4647 
p
 = 
	`°Ωut
’, 
íd
, "'");

4648 i‡(
cuºít_numbî_of_loˇls
 < 
CFG_MAX_LOCAL_VARIABLES
) {

4649 
	`add_loˇl_«me
((
yyv•
[(1Ë- (1)].
°rög
), 
TYPE_ANY
);

4651 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_LOCAL
, 
TYPE_ANY
, 0);

4652 
	`yyîr‹
(
buf
);

4653 
	`s¸©ch_‰ì
((
yyv•
[(1Ë- (1)].
°rög
));

4661 
	`CREATE_PARAMETER
((
yyvÆ
.
node
), 
TYPE_ANY
, (
yyv•
[(1Ë- (1)].
numbî
));

4669 (
yyvÆ
.
c⁄ãxç
Ë
cuºít_fun˘i⁄_c⁄ãxt
;

4671 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

4672 
cuºít_fun˘i⁄_c⁄ãxt
 = cuºít_fun˘i⁄_c⁄ãxt->
∑ª¡
;

4680 
∑r£_node_t
 *
node
;

4682 
cuºít_fun˘i⁄_c⁄ãxt
 = (
yyv•
[(3Ë- (5)].
c⁄ãxç
);

4684 i‡(!
cuºít_fun˘i⁄_c⁄ãxt
 || cuºít_fun˘i⁄_c⁄ãxt->
num_∑ømëîs
 == -2) {

4688 
	`CREATE_ERROR
((
yyvÆ
.
node
));

4690 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_LOCAL
, (
yyv•
[(4Ë- (5)].node)->
ty≥
,

4691 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
köd
++);

4693 
node
 = 
	`√w_node_no_löe
();

4694 
node
->
ty≥
 = 0;

4695 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
l
.
ex¥
->
r
.ex¥ = 
node
;

4696 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
l
.
ex¥
 = 
node
;

4697 
node
->
r
.
ex¥
 = 0;

4698 
node
->
v
.
ex¥
 = (
yyv•
[(4) - (5)].node);

4707 i‡(!
	`IS_CLASS
((
yyv•
[(1Ë- (3)].
node
)->
ty≥
)) {

4708 
	`yyîr‹
("Leftárgument of -> isÇotá class");

4709 
	`CREATE_ERROR
((
yyvÆ
.
node
));

4711 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_MEMBER
, 0, (
yyv•
[(1) - (3)].node), 0);

4712 (
yyvÆ
.
node
)->
l
.
numbî
 = 
	`lookup_˛ass_membî
(
	`CLASS_IDX
((
yyv•
[(1Ë- (3)].node)->
ty≥
),

4713 (
yyv•
[(3Ë- (3)].
°rög
),

4714 &((
yyvÆ
.
node
)->
ty≥
));

4716 
	`s¸©ch_‰ì
((
yyv•
[(3Ë- (3)].
°rög
));

4724 i‡((
yyv•
[(1Ë- (6)].
node
)->
ty≥
 !
TYPE_MAPPING
 &&

4725 (
yyv•
[(5Ë- (6)].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[(5Ë- (6)].node)->
v
.
numbî
 < 0)

4726 
	`yyw¨n
("00 AÇegative constantásÅhe secondÉlement ofárr[x..y]ÇoÜonger means indexing fromÅheÉnd. Useárr[x..<y]");

4727 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NN_RANGE
, (
yyv•
[(1) - (6)].node), (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node));

4735 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RN_RANGE
, (
yyv•
[(1) - (7)].node), (yyvsp[(4) - (7)].node), (yyvsp[(6) - (7)].node));

4743 i‡((
yyv•
[(7Ë- (8)].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[(7Ë- (8)].node)->
v
.
numbî
 <= 1)

4744 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RE_RANGE
, (
yyv•
[(1) - (8)].node), (yyvsp[(4) - (8)].node), 0);

4746 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RR_RANGE
, (
yyv•
[(1) - (8)].node), (yyvsp[(4) - (8)].node), (yyvsp[(7) - (8)].node));

4754 i‡((
yyv•
[(6Ë- (7)].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[(6Ë- (7)].node)->
v
.
numbî
 <= 1)

4755 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NE_RANGE
, (
yyv•
[(1) - (7)].node), (yyvsp[(3) - (7)].node), 0);

4757 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NR_RANGE
, (
yyv•
[(1) - (7)].node), (yyvsp[(3) - (7)].node), (yyvsp[(6) - (7)].node));

4765 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NE_RANGE
, (
yyv•
[(1) - (5)].node), (yyvsp[(3) - (5)].node), 0);

4773 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RE_RANGE
, (
yyv•
[(1) - (6)].node), (yyvsp[(4) - (6)].node), 0);

4781 i‡(
	`IS_NODE
((
yyv•
[(1Ë- (5)].
node
), 
NODE_CALL
, 
F_AGGREGATE
)

4782 && (
yyv•
[(4Ë- (5)].
node
)->
köd
 =
NODE_NUMBER
) {

4783 
i
 = (
yyv•
[(4Ë- (5)].
node
)->
v
.
numbî
;

4784 i‡(
i
 < 1 || i > (
yyv•
[(1Ë- (5)].
node
)->
l
.
numbî
)

4785 
	`yyîr‹
("Illegal indexÅoárray constant.");

4787 
∑r£_node_t
 *
node
 = (
yyv•
[(1Ë- (5)].node)->
r
.
ex¥
;

4788 
i
 = (
yyv•
[(1Ë- (5)].
node
)->
l
.
numbî
 - i;

4789 
i
--)

4790 
node
 =Çode->
r
.
ex¥
;

4791 (
yyvÆ
.
node
Ënode->
v
.
ex¥
;

4795 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_RINDEX
, 0, (
yyv•
[(4) - (5)].node), (yyvsp[(1) - (5)].node));

4796 i‡(
exa˘_ty≥s
) {

4797 (
yyv•
[(1Ë- (5)].
node
)->
ty≥
) {

4798 
TYPE_MAPPING
:

4799 
	`yyîr‹
("Illegal index for mapping.");

4800 
TYPE_ANY
:

4801 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4803 
TYPE_STRING
:

4804 
TYPE_BUFFER
:

4805 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_NUMBER
;

4806 i‡(!
	`IS_TYPE
((
yyv•
[(4Ë- (5)].
node
)->
ty≥
,
TYPE_NUMBER
))

4807 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[(4Ë- (5)].
node
)->
ty≥
);

4811 i‡((
yyv•
[(1Ë- (5)].
node
)->
ty≥
 & 
TYPE_MOD_ARRAY
) {

4812 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[(1Ë- (5)].node)->ty≥ & ~
TYPE_MOD_ARRAY
;

4813 i‡(!
	`IS_TYPE
((
yyv•
[(4Ë- (5)].
node
)->
ty≥
,
TYPE_NUMBER
))

4814 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[(4Ë- (5)].
node
)->
ty≥
);

4816 
	`ty≥_îr‹
("VÆuêödexed ha†®badÅy≥ ", (
yyv•
[(1Ë- (5)].
node
)->
ty≥
);

4817 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4820 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4838 i‡(
	`IS_NODE
((
yyv•
[(1Ë- (4)].
node
), 
NODE_CALL
, 
F_AGGREGATE
Ë&& (yyv•[(3Ë- (4)].node)->
köd
 =
NODE_NUMBER
) {

4839 
i
 = (
yyv•
[(3Ë- (4)].
node
)->
v
.
numbî
;

4840 i‡(
i
 < 0 || i >(
yyv•
[(1Ë- (4)].
node
)->
l
.
numbî
)

4841 
	`yyîr‹
("Illegal indexÅoárray constant.");

4843 
∑r£_node_t
 *
node
 = (
yyv•
[(1Ë- (4)].node)->
r
.
ex¥
;

4844 
i
--)

4845 
node
 =Çode->
r
.
ex¥
;

4846 (
yyvÆ
.
node
Ënode->
v
.
ex¥
;

4850 i‡((
yyv•
[(1Ë- (4)].
node
)->
ty≥
 !
TYPE_MAPPING
 && (yyv•[(1Ë- (4)].node)->ty≥ !
TYPE_ANY
 &&

4851 (
yyv•
[(3Ë- (4)].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[(3Ë- (4)].node)->
v
.
numbî
 < 0)

4852 
	`yyw¨n
("11 AÇegative constant inárr[x]ÇoÜonger means indexing fromÅheÉnd. Useárr[<x]");

4853 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_INDEX
, 0, (
yyv•
[(3) - (4)].node), (yyvsp[(1) - (4)].node));

4854 i‡(
exa˘_ty≥s
) {

4855 (
yyv•
[(1Ë- (4)].
node
)->
ty≥
) {

4856 
TYPE_MAPPING
:

4857 
TYPE_ANY
:

4858 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4860 
TYPE_STRING
:

4861 
TYPE_BUFFER
:

4862 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_NUMBER
;

4863 i‡(!
	`IS_TYPE
((
yyv•
[(3Ë- (4)].
node
)->
ty≥
,
TYPE_NUMBER
))

4864 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[(3Ë- (4)].
node
)->
ty≥
);

4868 i‡((
yyv•
[(1Ë- (4)].
node
)->
ty≥
 & 
TYPE_MOD_ARRAY
) {

4869 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[(1Ë- (4)].node)->ty≥ & ~
TYPE_MOD_ARRAY
;

4870 i‡(!
	`IS_TYPE
((
yyv•
[(3Ë- (4)].
node
)->
ty≥
,
TYPE_NUMBER
))

4871 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[(3Ë- (4)].
node
)->
ty≥
);

4873 
	`ty≥_îr‹
("VÆuêödexed ha†®badÅy≥ ", (
yyv•
[(1Ë- (4)].
node
)->
ty≥
);

4874 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4877 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4885 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (3)].node);

4893 i‡((
yyv•
[(1Ë- (1)].
ty≥
Ë!
TYPE_FUNCTION
Ë
	`yyîr‹
("ReservedÅypeÇame unexpected.");

4894 (
yyvÆ
.
func_block
).
num_loˇl
 = 
cuºít_numbî_of_loˇls
;

4895 (
yyvÆ
.
func_block
).
max_num_loˇls
 = max_num_locals;

4896 (
yyvÆ
.
func_block
).
c⁄ãxt
 = context;

4897 (
yyvÆ
.
func_block
).
ßve_cuºít_ty≥
 = 
cuºít_ty≥
;

4898 (
yyvÆ
.
func_block
).
ßve_exa˘_ty≥s
 = 
exa˘_ty≥s
;

4899 i‡(
ty≥_of_loˇls_±r
 + 
max_num_loˇls
 + 
CFG_MAX_LOCAL_VARIABLES
 >&
ty≥_of_loˇls
[
ty≥_of_loˇls_size
])

4900 
	`ªÆloˇã_loˇls
();

4901 
	`dó˘iv©e_cuºít_loˇls
();

4902 
loˇls_±r
 +
cuºít_numbî_of_loˇls
;

4903 
ty≥_of_loˇls_±r
 +
max_num_loˇls
;

4904 
ru¡ime_loˇls_±r
 +
cuºít_numbî_of_loˇls
;

4905 
max_num_loˇls
 = 
cuºít_numbî_of_loˇls
 = 0;

4906 
	`push_fun˘i⁄_c⁄ãxt
();

4907 
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 = -1;

4908 
exa˘_ty≥s
 = 
TYPE_ANY
;

4909 
c⁄ãxt
 = 0;

4917 i‡((
yyv•
[(4Ë- (6)].
¨gumít
).
Êags
 & 
ARG_IS_PROTO
) {

4918 
	`yyîr‹
("MissingÇame for functionárgument");

4920 i‡((
yyv•
[(4Ë- (6)].
¨gumít
).
Êags
 & 
ARG_IS_VARARGS
) {

4921 
	`yyîr‹
("Anonymous varargs functionsáren't implemented");

4923 i‡(!(
yyv•
[(6Ë- (6)].
de˛
).
node
) {

4924 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

4925 } i‡((
yyv•
[(6Ë- (6)].
de˛
).
node
->
köd
 !
NODE_RETURN
 &&

4926 ((
yyv•
[(6Ë- (6)].
de˛
).
node
->
köd
 !
NODE_TWO_VALUES
 || (yyv•[(6Ë- (6)].de˛).node->
r
.
ex¥
->köd !
NODE_RETURN
)) {

4927 
∑r£_node_t
 *
ª∂a˚mít
;

4928 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, (
yyv•
[(6Ë- (6)].
de˛
).
node
, 0);

4929 
	`CREATE_RETURN
(
ª∂a˚mít
->
r
.
ex¥
, 0);

4930 (
yyv•
[(6Ë- (6)].
de˛
).
node
 = 
ª∂a˚mít
;

4933 (
yyvÆ
.
node
Ë
	`√w_node
();

4934 (
yyvÆ
.
node
)->
köd
 = 
NODE_ANON_FUNC
;

4935 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

4936 (
yyvÆ
.
node
)->
l
.
numbî
 = (
max_num_loˇls
 - (
yyv•
[(4Ë- (6)].
¨gumít
).
num_¨g
);

4937 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[(6Ë- (6)].
de˛
).node;

4938 (
yyvÆ
.
node
)->
v
.
numbî
 = (
yyv•
[(4Ë- (6)].
¨gumít
).
num_¨g
;

4939 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
)

4940 (
yyvÆ
.
node
)->
v
.
numbî
 |= 0x10000;

4941 
	`‰ì_Æl_loˇl_«mes
();

4943 
cuºít_numbî_of_loˇls
 = (
yyv•
[(2Ë- (6)].
func_block
).
num_loˇl
;

4944 
max_num_loˇls
 = (
yyv•
[(2Ë- (6)].
func_block
).max_num_locals;

4945 
c⁄ãxt
 = (
yyv•
[(2Ë- (6)].
func_block
).context;

4946 
cuºít_ty≥
 = (
yyv•
[(2Ë- (6)].
func_block
).
ßve_cuºít_ty≥
;

4947 
exa˘_ty≥s
 = (
yyv•
[(2Ë- (6)].
func_block
).
ßve_exa˘_ty≥s
;

4948 
	`p›_fun˘i⁄_c⁄ãxt
();

4950 
loˇls_±r
 -
cuºít_numbî_of_loˇls
;

4951 
ty≥_of_loˇls_±r
 -
max_num_loˇls
;

4952 
ru¡ime_loˇls_±r
 -
cuºít_numbî_of_loˇls
;

4953 
	`ªa˘iv©e_cuºít_loˇls
();

4961 (
yyvÆ
.
node
Ë
	`√w_node
();

4962 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

4963 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

4964 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

4965 (
yyv•
[(1Ë- (3)].
numbî
) & 0xff) {

4966 
FP_L_VAR
:

4967 
	`yyîr‹
("IllegalÅo useÜocal variable iná functional.");

4968 
	`CREATE_NUMBER
((
yyvÆ
.
node
)->
l
.
ex¥
, 0);

4969 (
yyvÆ
.
node
)->
l
.
ex¥
->
r
.expr = 0;

4970 (
yyvÆ
.
node
)->
l
.
ex¥
->l.expr = 0;

4971 (
yyvÆ
.
node
)->
v
.
numbî
 = 
FP_FUNCTIONAL
;

4973 
FP_G_VAR
:

4974 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
)->
l
.
ex¥
, 
F_GLOBAL
, 0, (
yyv•
[(1Ë- (3)].
numbî
) >> 8);

4975 (
yyvÆ
.
node
)->
v
.
numbî
 = 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
;

4976 i‡(
	`VAR_TEMP
((
yyvÆ
.
node
)->
l
.
ex¥
->l.
numbî
)->
ty≥
 & 
NAME_HIDDEN
) {

4977 
buf
[256];

4978 *
íd
 = 
	`EndOf
(
buf
);

4979 *
p
;

4981 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo useÖrivate variable '");

4982 
p
 = 
	`°Ωut
’, 
íd
, 
	`VAR_TEMP
((
yyvÆ
.
node
)->
l
.
ex¥
->l.
numbî
)->
«me
);

4983 
p
 = 
	`°Ωut
’, 
íd
, "'");

4984 
	`yyîr‹
(
buf
);

4988 (
yyvÆ
.
node
)->
v
.
numbî
 = (
yyv•
[(1) - (3)].number);

4998 (
yyvÆ
.
node
Ë
	`√w_node
();

4999 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

5000 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5001 (
yyvÆ
.
node
)->
v
.
numbî
 = (
yyv•
[(1) - (5)].number);

5002 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[(3) - (5)].node);

5004 (
yyv•
[(1Ë- (5)].
numbî
) & 0xff) {

5005 
FP_EFUN
: {

5006 *
¨gp
;

5007 
f
 = (
yyv•
[(1Ë- (5)].
numbî
) >>8;

5008 
num
 = (
yyv•
[(3Ë- (5)].
node
)->
köd
;

5009 
max_¨g
 = 
¥edefs
[
f
].
max_¨gs
;

5011 i‡(
num
 > 
max_¨g
 && max_arg != -1) {

5012 
∑r£_node_t
 *
≤
 = (
yyv•
[(3Ë- (5)].
node
);

5014 
≤
) {

5015 i‡(
≤
->
ty≥
 & 1) ;

5016 
≤
 =Ön->
r
.
ex¥
;

5019 i‡(!
≤
) {

5020 
bff
[256];

5021 *
íd
 = 
	`EndOf
(
bff
);

5022 *
p
;

5024 
p
 = 
	`°Ωut
(
bff
, 
íd
, "Too manyárgumentsÅo ");

5025 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

5026 
	`yyîr‹
(
bff
);

5028 } i‡(
max_¨g
 !-1 && 
exa˘_ty≥s
) {

5032 
i
, 
¨gn
, 
tmp
;

5033 
∑r£_node_t
 *
íode
 = (
yyv•
[(3Ë- (5)].
node
);

5034 
¨gp
 = &
efun_¨g_ty≥s
[
¥edefs
[
f
].
¨g_ödex
];

5036 
¨gn
 = 0;árg¿< 
num
;árgn++) {

5037 i‡(
íode
->
ty≥
 & 1) ;

5039 
tmp
 = 
íode
->
v
.
ex¥
->
ty≥
;

5040 
i
=0; !
	`com∑tibÀ_ty≥s
(
tmp
, 
¨gp
[i])

5041 && 
¨gp
[
i
] != 0; i++)

5043 i‡(
¨gp
[
i
] == 0) {

5044 
buf
[256];

5045 *
íd
 = 
	`EndOf
(
buf
);

5046 *
p
;

5048 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Badárgument ");

5049 
p
 = 
	`°Ωut_öt
’, 
íd
, 
¨gn
+1);

5050 
p
 = 
	`°Ωut
’, 
íd
, "ÅoÉfun ");

5051 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

5052 
p
 = 
	`°Ωut
’, 
íd
, "()");

5053 
	`yyîr‹
(
buf
);

5058 i‡(
tmp
 =
TYPE_NUMBER
 && 
¨gp
[
i
] =
TYPE_REAL
) {

5059 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_NUMBER
; i++)

5061 i‡(!
¨gp
[
i
])

5062 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_Êﬂt
(enode->v.expr);

5064 i‡(
tmp
 =
TYPE_REAL
 && 
¨gp
[
i
] =
TYPE_NUMBER
) {

5065 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_REAL
; i++)

5067 i‡(!
¨gp
[
i
])

5068 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_öt
(enode->v.expr);

5071 
¨gp
[
i
] != 0)

5072 
i
++;

5073 
¨gp
 +
i
 + 1;

5074 
íode
 =Énode->
r
.
ex¥
;

5079 
FP_L_VAR
:

5080 
FP_G_VAR
:

5081 
	`yyîr‹
("Can't giveÖarametersÅo functional.");

5091 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
num_loˇls
)

5092 
	`yyîr‹
("IllegalÅo useÜocal variable in functional.");

5093 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
r
.
ex¥
)

5094 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
r
.
ex¥
->
köd
 = current_function_context->values_list->kind;

5096 (
yyvÆ
.
node
Ë
	`√w_node
();

5097 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

5098 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5099 (
yyvÆ
.
node
)->
l
.
ex¥
 = (
yyv•
[(2) - (4)].node);

5100 i‡((
yyv•
[(2Ë- (4)].
node
)->
köd
 =
NODE_STRING
)

5101 
	`yyw¨n
("FunctionÖointerÑeturning string constant is NOTá function call");

5102 (
yyvÆ
.
node
)->
r
.
ex¥
 = 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->r.expr;

5103 (
yyvÆ
.
node
)->
v
.
numbî
 = 
FP_FUNCTIONAL
 + 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ


5104 + (
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 << 8);

5105 
	`p›_fun˘i⁄_c⁄ãxt
();

5113 
	`CREATE_CALL
((
yyvÆ
.
node
), 
F_AGGREGATE_ASSOC
, 
TYPE_MAPPING
, (
yyv•
[(2) - (4)].node));

5121 
	`CREATE_CALL
((
yyvÆ
.
node
), 
F_AGGREGATE
, 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
, (
yyv•
[(2) - (4)].node));

5129 (
yyvÆ
.
node
Ë(
yyv•
[(1Ë- (1)].
de˛
).node;

5137 (
yyvÆ
.
node
Ë
	`ö£π_p›_vÆue
((
yyv•
[(2) - (3)].node));

5145 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5146 
c⁄ãxt
 = 
SPECIAL_CONTEXT
;

5154 
	`CREATE_CATCH
((
yyvÆ
.
node
), (
yyv•
[(3) - (3)].node));

5155 
c⁄ãxt
 = (
yyv•
[(2Ë- (3)].
numbî
);

5163 
p
 = (
yyv•
[(6Ë- (7)].
node
)->
v
.
numbî
;

5164 
	`CREATE_LVALUE_EFUN
((
yyvÆ
.
node
), 
TYPE_NUMBER
, (
yyv•
[(6) - (7)].node));

5165 
	`CREATE_BINARY_OP_1
((
yyvÆ
.
node
)->
l
.
ex¥
, 
F_SSCANF
, 0, (
yyv•
[(3Ë- (7)].node), (yyv•[(5Ë- (7)].node), 
p
);

5173 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5174 
c⁄ãxt
 = 
SPECIAL_CONTEXT
;

5182 
	`CREATE_TIME_EXPRESSION
((
yyvÆ
.
node
), (
yyv•
[(3) - (3)].node));

5183 
c⁄ãxt
 = (
yyv•
[(2Ë- (3)].
numbî
);

5191 (
yyvÆ
.
node
Ë
	`√w_node_no_löe
();

5192 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

5193 (
yyvÆ
.
node
)->
v
.
numbî
 = 0;

5201 
∑r£_node_t
 *
ö£π
;

5203 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (3)].node);

5204 
ö£π
 = 
	`√w_node_no_löe
();

5205 
ö£π
->
r
.
ex¥
 = (
yyv•
[(3Ë- (3)].
node
)->r.expr;

5206 
ö£π
->
l
.
ex¥
 = (
yyv•
[(2Ë- (3)].
node
);

5207 (
yyv•
[(3Ë- (3)].
node
)->
r
.
ex¥
 = 
ö£π
;

5208 (
yyvÆ
.
node
)->
v
.
numbî
++;

5216 
	`CREATE_STRING
((
yyvÆ
.
node
), (
yyv•
[(1Ë- (1)].
°rög
));

5217 
	`s¸©ch_‰ì
((
yyv•
[(1Ë- (1)].
°rög
));

5225 (
yyvÆ
.
°rög
Ë(
yyv•
[(2) - (3)].string);

5233 (
yyvÆ
.
°rög
Ë
	`s¸©ch_joö
((
yyv•
[(1) - (3)].string), (yyvsp[(3) - (3)].string));

5241 (
yyvÆ
.
°rög
Ë
	`s¸©ch_joö
((
yyv•
[(1) - (2)].string), (yyvsp[(2) - (2)].string));

5249 (
yyvÆ
.
node
Ë
	`√w_node
();

5250 (
yyvÆ
.
node
)->
l
.
ex¥
 = (
∑r£_node_t
 *)(
yyv•
[(1Ë- (3)].
°rög
);

5251 (
yyvÆ
.
node
)->
v
.
ex¥
 = (
yyv•
[(3) - (3)].node);

5252 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

5260 (
yyvÆ
.
node
) = 0;

5268 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (3)].node);

5269 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[(1) - (3)].node);

5277 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
((
yyv•
[(1Ë- (4)].
numbî
),(yyvsp[(3) - (4)].node));

5285 
idít_hash_ñem_t
 *
ihe
;

5287 
ihe
 = 
	`lookup_idít
("clone_object");

5288 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
(
ihe
->
dn
.
efun_num
, (
yyv•
[(3) - (4)].node));

5296 
∑r£_node_t
 *
node
;

5298 i‡((
yyv•
[(4Ë- (6)].
ihe
)->
dn
.
˛ass_num
 == -1) {

5299 
buf
[256];

5300 *
íd
 = 
	`EndOf
(
buf
);

5301 *
p
;

5303 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

5304 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(4Ë- (6)].
ihe
)->
«me
);

5305 
p
 = 
	`°Ωut
’, 
íd
, "'");

5306 
	`yyîr‹
(
buf
);

5307 
	`CREATE_ERROR
((
yyvÆ
.
node
));

5308 
node
 = (
yyv•
[(5) - (6)].node);

5309 
node
) {

5310 
	`s¸©ch_‰ì
((*)
node
->
l
.
ex¥
);

5311 
node
 =Çode->
r
.
ex¥
;

5314 
ty≥
 = (
yyv•
[(4Ë- (6)].
ihe
)->
dn
.
˛ass_num
 | 
TYPE_MOD_CLASS
;

5316 i‡((
node
 = (
yyv•
[(5) - (6)].node))) {

5317 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), 
ty≥
, 0, 0);

5318 (
yyvÆ
.
node
)->
l
.
ex¥
 = 
	`ª‹dî_˛ass_vÆues
((
yyv•
[(4Ë- (6)].
ihe
)->
dn
.
˛ass_num
,

5319 
node
);

5320 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
)->
r
.
ex¥
, 
F_NEW_CLASS
,

5321 
ty≥
, (
yyv•
[(4Ë- (6)].
ihe
)->
dn
.
˛ass_num
);

5324 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_NEW_EMPTY_CLASS
,

5325 
ty≥
, (
yyv•
[(4Ë- (6)].
ihe
)->
dn
.
˛ass_num
);

5335 
f
;

5337 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (4)].node);

5338 i‡((
f
 = (
yyv•
[(1Ë- (4)].
ihe
)->
dn
.
fun˘i⁄_num
) != -1) {

5339 i‡(
	`FUNCTION_FLAGS
(
f
Ë& 
NAME_HIDDEN
) {

5340 
buf
[256];

5341 *
íd
 = 
	`EndOf
(
buf
);

5342 *
p
;

5344 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo callÖrivate function '");

5345 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(1Ë- (4)].
ihe
)->
«me
);

5346 
p
 = 
	`°Ωut
’, 
íd
, "'");

5347 
	`yyîr‹
(
buf
);

5349 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

5350 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

5352 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5353 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

5354 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5355 (
yyvÆ
.
node
)->
ty≥
 = 
	`vÆid©e_fun˘i⁄_ˇŒ
(
f
, (
yyv•
[(3Ë- (4)].node)->
r
.
ex¥
);

5357 i‡((
f
=(
yyv•
[(1Ë- (4)].
ihe
)->
dn
.
simul_num
) != -1) {

5358 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5359 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_SIMUL_EFUN
;

5360 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5361 (
yyvÆ
.
node
)->
ty≥
 = (
	`SIMUL
(
f
)->ty≥Ë& ~
NAME_TYPE_MOD
;

5363 i‡((
f
=(
yyv•
[(1Ë- (4)].
ihe
)->
dn
.
efun_num
) != -1) {

5364 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
(
f
, (
yyv•
[(3) - (4)].node));

5374 
cf
, 
f
;

5376 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

5377 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

5379 
cf
 = 
	`deföe_√w_fun˘i⁄
((
yyv•
[(1Ë- (4)].
ihe
)->
«me
, 0, 0,

5380 
NAME_UNDEFINED
 | 
NAME_PROTOTYPE
, 0);

5381 
f
 = 
	`COMPILER_FUNC
(
cf
)->
ru¡ime_ödex
;

5382 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5383 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

5384 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5385 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5386 i‡(
exa˘_ty≥s
) {

5387 
buf
[256];

5388 *
íd
 = 
	`EndOf
(
buf
);

5389 *
p
;

5390 *
n
 = (
yyv•
[(1Ë- (4)].
ihe
)->
«me
;

5391 i‡(*
n
 == ':')Ç++;

5396 
	`FUNCTION_FLAGS
(
f
Ë&~
NAME_UNDEFINED
;

5397 
	`FUNCTION_FLAGS
(
f
Ë|
NAME_INHERITED
;

5398 
	`COMPILER_FUNC
(
cf
)->
ty≥
 |
NAME_VARARGS
;

5399 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined function ");

5400 
p
 = 
	`°Ωut
’, 
íd
, 
n
);

5401 
	`yyîr‹
(
buf
);

5411 *
«me
 = (
yyv•
[(1Ë- (4)].
°rög
);

5413 (
yyvÆ
.
node
Ë(
yyv•
[(3) - (4)].node);

5415 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

5416 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

5418 i‡(*
«me
 == ':') {

5419 
f
;

5421 
f
 = 
	`¨ønge_ˇŒ_öhîôed
(
«me
 + 1, (
yyvÆ
.
node
));

5428 
f
;

5429 
idít_hash_ñem_t
 *
ihe
;

5431 
f
 = (
ihe
 = 
	`lookup_idít
(
«me
)Ë? ihe->
dn
.
fun˘i⁄_num
 : -1;

5432 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5433 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

5434 i‡(
f
!=-1) {

5439 (
yyvÆ
.
node
)->
ty≥
 = 
	`vÆid©e_fun˘i⁄_ˇŒ
(
f
, (
yyv•
[(3Ë- (4)].node)->
r
.
ex¥
);

5441 
f
 = 
	`deföe_√w_fun˘i⁄
(
«me
, 0, 0,

5442 
NAME_UNDEFINED
 | 
NAME_PROTOTYPE
, 0);

5443 
f
 = 
	`COMPILER_FUNC
(f)->
ru¡ime_ödex
;

5445 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5451 i‡(
exa˘_ty≥s
 && (
	`FUNCTION_FLAGS
(
f
Ë& 
NAME_UNDEFINED
)) {

5452 
buf
[256];

5453 *
íd
 = 
	`EndOf
(
buf
);

5454 *
p
;

5455 *
n
 = (
yyv•
[(1Ë- (4)].
°rög
);

5456 i‡(*
n
 == ':')Ç++;

5458 
	`FUNCTION_FLAGS
(
f
Ë&~
NAME_UNDEFINED
;

5459 
	`FUNCTION_FLAGS
(
f
Ë|(
NAME_INHERITED
 | 
NAME_VARARGS
);

5460 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined function ");

5461 
p
 = 
	`°Ωut
’, 
íd
, 
n
);

5462 
	`yyîr‹
(
buf
);

5464 i‡(!(
	`FUNCTION_FLAGS
(
f
Ë& 
NAME_UNDEFINED
))

5465 (
yyvÆ
.
node
)->
ty≥
 = 
	`FUNCTION_DEF
(
f
)->type;

5467 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5469 
	`s¸©ch_‰ì
(
«me
);

5477 
∑r£_node_t
 *
ex¥
, *
ex¥2
;

5478 (
yyvÆ
.
node
Ë(
yyv•
[(5) - (6)].node);

5479 (
yyvÆ
.
node
)->
köd
 = 
NODE_EFUN
;

5480 (
yyvÆ
.
node
)->
l
.
numbî
 = (yyvÆ.node)->
v
.number + 2;

5481 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_OTHER
;

5482 #ifde‡
CAST_CALL_OTHERS


5483 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_UNKNOWN
;

5485 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5487 
ex¥
 = 
	`√w_node_no_löe
();

5488 
ex¥
->
ty≥
 = 0;

5489 
ex¥
->
v
.ex¥ = (
yyv•
[(1Ë- (6)].
node
);

5491 
ex¥2
 = 
	`√w_node_no_löe
();

5492 
ex¥2
->
ty≥
 = 0;

5493 
	`CREATE_STRING
(
ex¥2
->
v
.
ex¥
, (
yyv•
[(3Ë- (6)].
°rög
));

5494 
	`s¸©ch_‰ì
((
yyv•
[(3Ë- (6)].
°rög
));

5497 
ex¥2
->
r
.
ex¥
 = (
yyvÆ
.
node
)->r.expr;

5498 
ex¥
->
r
.ex¥ = 
ex¥2
;

5499 (
yyvÆ
.
node
)->
r
.
ex¥
 =Éxpr;

5507 
∑r£_node_t
 *
ex¥
;

5509 (
yyvÆ
.
node
Ë(
yyv•
[(6) - (7)].node);

5510 (
yyvÆ
.
node
)->
köd
 = 
NODE_EFUN
;

5511 (
yyvÆ
.
node
)->
l
.
numbî
 = (yyvÆ.node)->
v
.number + 1;

5512 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_EVALUATE
;

5513 #ifde‡
CAST_CALL_OTHERS


5514 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_UNKNOWN
;

5516 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5518 
ex¥
 = 
	`√w_node_no_löe
();

5519 
ex¥
->
ty≥
 = 0;

5520 
ex¥
->
v
.ex¥ = (
yyv•
[(3Ë- (7)].
node
);

5521 
ex¥
->
r
.ex¥ = (
yyvÆ
.
node
)->r.expr;

5522 (
yyvÆ
.
node
)->
r
.
ex¥
 =Éxpr;

5531 
idít_hash_ñem_t
 *
ihe
;

5533 (
yyvÆ
.
numbî
Ë(
ihe
 = 
	`lookup_idít
((
yyv•
[(3Ë- (3)].
°rög
))Ë? ihe->
dn
.
efun_num
 : -1;

5534 i‡((
yyvÆ
.
numbî
) == -1) {

5535 
buf
[256];

5536 *
íd
 = 
	`EndOf
(
buf
);

5537 *
p
;

5539 
p
 = 
	`°Ωut
(
buf
, 
íd
, "UnknownÉfun: ");

5540 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[(3Ë- (3)].
°rög
));

5541 
	`yyîr‹
(
buf
);

5554 
	`s¸©ch_‰ì
((
yyv•
[(3Ë- (3)].
°rög
));

5562 
idít_hash_ñem_t
 *
ihe
;

5565 
ihe
 = 
	`lookup_idít
("clone_object");

5576 (
yyvÆ
.
numbî
Ë
ihe
->
dn
.
efun_num
;

5584 
l
 = 
	`°æí
((
yyv•
[(2Ë- (2)].
°rög
)) + 1;

5585 *
p
;

5590 (
yyvÆ
.
°rög
Ë
	`s¸©ch_ªÆloc
((
yyv•
[(2Ë- (2)].°rög), 
l
 + 3);

5591 
p
 = (
yyvÆ
.
°rög
Ë+ 
l
;

5592 
p
--,
l
--)

5593 *(
p
+3) = *p;

5594 
	`°∫˝y
((
yyvÆ
.
°rög
), ":::", 3);

5602 
z
, 
l
 = 
	`°æí
((
yyv•
[(3Ë- (3)].
°rög
)) + 1;

5603 *
p
;

5605 
z
 = 
	`°æí
(
compûî_ty≥_«mes
[(
yyv•
[(1Ë- (3)].
ty≥
)]) + 3;

5606 (
yyvÆ
.
°rög
Ë
	`s¸©ch_ªÆloc
((
yyv•
[(3Ë- (3)].°rög), 
l
 + 
z
);

5607 
p
 = (
yyvÆ
.
°rög
Ë+ 
l
;

5608 
p
--,
l
--)

5609 *(
p
+
z
) = *p;

5610 (
yyvÆ
.
°rög
)[0] = ':';

5611 
	`°∫˝y
((
yyvÆ
.
°rög
Ë+ 1, 
compûî_ty≥_«mes
[(
yyv•
[(1Ë- (3)].
ty≥
)], 
z
 - 3);

5612 (
yyvÆ
.
°rög
)[
z
-2] = ':';

5613 (
yyvÆ
.
°rög
)[
z
-1] = ':';

5621 
l
 = 
	`°æí
((
yyv•
[(1Ë- (3)].
°rög
));

5623 (
yyvÆ
.
°rög
Ë
	`s¸©ch_Æloc
(
l
 + 
	`°æí
((
yyv•
[(3) - (3)].string)) + 4);

5624 *((
yyvÆ
.
°rög
)) = ':';

5625 
	`°r˝y
((
yyvÆ
.
°rög
Ë+ 1, (
yyv•
[(1) - (3)].string));

5626 
	`°r˝y
((
yyvÆ
.
°rög
Ë+ 
l
 + 1, "::");

5627 
	`°r˝y
((
yyvÆ
.
°rög
Ë+ 
l
 + 3, (
yyv•
[(3) - (3)].string));

5628 
	`s¸©ch_‰ì
((
yyv•
[(1Ë- (3)].
°rög
));

5629 
	`s¸©ch_‰ì
((
yyv•
[(3Ë- (3)].
°rög
));

5638 i‡(
	`IS_NODE
((
yyv•
[(3Ë- (6)].
node
), 
NODE_BINARY_OP
, 
F_NE
)) {

5639 i‡(
	`IS_NODE
((
yyv•
[(3Ë- (6)].
node
)->
r
.
ex¥
, 
NODE_NUMBER
, 0))

5640 (
yyv•
[(3Ë- (6)].
node
Ë(yyv•[(3Ë- (6)].node)->
l
.
ex¥
;

5641 i‡(
	`IS_NODE
((
yyv•
[(3Ë- (6)].
node
)->
l
.
ex¥
, 
NODE_NUMBER
, 0))

5642 (
yyv•
[(3Ë- (6)].
node
Ë(yyv•[(3Ë- (6)].node)->
r
.
ex¥
;

5649 i‡((
yyv•
[(5Ë- (6)].
node
) == 0) {

5650 i‡((
yyv•
[(6Ë- (6)].
node
) == 0) {

5652 (
yyvÆ
.
node
Ë
	`ö£π_p›_vÆue
((
yyv•
[(3) - (6)].node));

5656 
∑r£_node_t
 *
ª∂
;

5658 
	`CREATE_UNARY_OP
(
ª∂
, 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[(3Ë- (6)].
node
));

5659 (
yyv•
[(3Ë- (6)].
node
Ë
ª∂
;

5660 (
yyv•
[(5Ë- (6)].
node
) = (yyvsp[(6) - (6)].node);

5661 (
yyv•
[(6Ë- (6)].
node
) = 0;

5664 
	`CREATE_IF
((
yyvÆ
.
node
), (
yyv•
[(3) - (6)].node), (yyvsp[(5) - (6)].node), (yyvsp[(6) - (6)].node));

5672 (
yyvÆ
.
node
) = 0;

5680 (
yyvÆ
.
node
Ë(
yyv•
[(2) - (2)].node);

5688 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

5690 
	`YYPOPSTACK
 (
yyÀn
);

5691 
yyÀn
 = 0;

5692 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

5694 *++
yyv•
 = 
yyvÆ
;

5700 
yyn
 = 
yyr1
[yyn];

5702 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

5703 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

5704 
yy°©e
 = 
yyèbÀ
[yystate];

5706 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

5708 
yy√w°©e
;

5714 
yyîæab
:

5716 i‡(!
yyîr°©us
)

5718 ++
yy√ºs
;

5719 #i‡! 
YYERROR_VERBOSE


5720 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

5723 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

5724 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

5726 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

5727 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

5728 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

5729 i‡(
yymsg
 !
yymsgbuf
)

5730 
	`YYSTACK_FREE
 (
yymsg
);

5731 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

5732 i‡(
yymsg
)

5733 
yymsg_Æloc
 = 
yyÆloc
;

5736 
yymsg
 = 
yymsgbuf
;

5737 
yymsg_Æloc
 =  
yymsgbuf
;

5741 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

5743 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

5744 
	`yyîr‹
 (
yymsg
);

5748 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

5749 i‡(
yysize
 != 0)

5750 
yyexhau°edœb
;

5758 i‡(
yyîr°©us
 == 3)

5763 i‡(
yych¨
 <
YYEOF
)

5766 i‡(
yych¨
 =
YYEOF
)

5767 
YYABORT
;

5771 
	`yyde°ru˘
 ("Error: discarding",

5772 
yytokí
, &
yylvÆ
);

5773 
yych¨
 = 
YYEMPTY
;

5779 
yyîæab1
;

5785 
yyîr‹œb
:

5791 
yyîr‹œb
;

5795 
	`YYPOPSTACK
 (
yyÀn
);

5796 
yyÀn
 = 0;

5797 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

5798 
yy°©e
 = *
yys•
;

5799 
yyîæab1
;

5805 
yyîæab1
:

5806 
yyîr°©us
 = 3;

5810 
yyn
 = 
yy∑˘
[
yy°©e
];

5811 i‡(
yyn
 !
YYPACT_NINF
)

5813 
yyn
 +
YYTERROR
;

5814 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

5816 
yyn
 = 
yyèbÀ
[yyn];

5817 i‡(0 < 
yyn
)

5823 i‡(
yys•
 =
yyss
)

5824 
YYABORT
;

5827 
	`yyde°ru˘
 ("Error:Öopping",

5828 
yy°os
[
yy°©e
], 
yyv•
);

5829 
	`YYPOPSTACK
 (1);

5830 
yy°©e
 = *
yys•
;

5831 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

5834 *++
yyv•
 = 
yylvÆ
;

5838 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

5840 
yy°©e
 = 
yyn
;

5841 
yy√w°©e
;

5847 
yyac˚±œb
:

5848 
yyªsu…
 = 0;

5849 
yyªtu∫
;

5854 
yyab‹éab
:

5855 
yyªsu…
 = 1;

5856 
yyªtu∫
;

5858 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


5862 
yyexhau°edœb
:

5863 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

5864 
yyªsu…
 = 2;

5868 
yyªtu∫
:

5869 i‡(
yych¨
 !
YYEMPTY
)

5870 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

5871 
yytokí
, &
yylvÆ
);

5874 
	`YYPOPSTACK
 (
yyÀn
);

5875 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

5876 
yys•
 !
yyss
)

5878 
	`yyde°ru˘
 ("Cleanup:Öopping",

5879 
yy°os
[*
yys•
], 
yyv•
);

5880 
	`YYPOPSTACK
 (1);

5882 #i‚de‡
yyovîÊow


5883 i‡(
yyss
 !
yysß
)

5884 
	`YYSTACK_FREE
 (
yyss
);

5886 #i‡
YYERROR_VERBOSE


5887 i‡(
yymsg
 !
yymsgbuf
)

5888 
	`YYSTACK_FREE
 (
yymsg
);

5891  
	`YYID
 (
yyªsu…
);

5892 
	}
}

	@src/hash.c

5 
	#EDIT_SOURCE


	)

6 
	#NO_SOCKETS


	)

7 
	#NO_OPCODES


	)

9 
	~"°d.h
"

11 
	gT
[] =

21 
INLINE
 
	$hash°r
(*
s
,

22 
maxn
,

23 
hashs
)

25 
h
;

26 *
p
;

28 
h
 = (Ë*
s
;

29 i‡(
h
)

31 i‡(
hashs
 > 256)

33 
oh
 = 
T
[(Ë*
s
];

35 
p
 = (*)
s
 + 1; *∞&&Ö <(*)†+ 
maxn
;Ö++)

37 
h
 = 
T
[h ^ *
p
];

38 
oh
 = 
T
[oh ^ *
p
];

40 
h
 |(
oh
 << 8);

43 
p
 = (*)
s
 + 1; *∞&&Ö <(*)†+ 
maxn
;Ö++)

45 
h
 = 
T
[h ^ *
p
];

48  (Ë(
h
 % 
hashs
);

49 
	}
}

57 
INLINE
 
	$whash°r
(*
s
, 
maxn
)

59 
oh
, 
h
;

60 *
p
;

61 
i
;

63 i‡(! *
s
)

67 
p
 = (*)
s
;

68 
oh
 = 
T
[ *
p
];

69 
h
 = (*(
p
++) + 1) &0xff;

70 
i
 = 
maxn
 - 1; *
p
 && --i >= 0;)

72 
oh
 = 
T
[oh ^ *
p
];

73 
h
 = 
T
[h ^ *(
p
++)];

76  (
oh
 << 8Ë+ 
h
;

77 
	}
}

	@src/icode.c

4 
	~"°d.h
"

5 
	~"Õc_ö˛.h
"

6 
	~"icode.h
"

7 
	~"åìs.h
"

8 
	~"compûî.h
"

9 
	~"Àx.h
"

10 
	~"gíî©e.h
"

12 
ös_ªÆ
();

13 
ös_sh‹t
();

14 
upd_sh‹t
(, );

15 
ös_byã
();

16 
upd_byã
(, );

17 
wrôe_numbî
();

18 
ªad_sh‹t
();

19 
ös_öt
();

20 #i‡
SIZEOF_PTR
 == 8

21 
ös_l⁄g
();

23 
i_gíî©e_node
(
∑r£_node_t
*);

24 
i_gíî©e_if_bønch
(
∑r£_node_t
 *, );

25 
i_gíî©e_lo›
(, 
∑r£_node_t
 *,Öarse_node_t *,Öarse_node_t*);

26 
i_upd©e_bønch_li°
(
∑r£_node_t
*);

27 
åy_to_push
(, );

33 
	gf‹óch_dïth
 = 0;

35 
	gcuºít_f‹w¨d_bønch
;

36 
	gcuºít_num_vÆues
;

38 
	gœ°_size_gíî©ed
;

39 
	glöe_beög_gíî©ed
;

41 
	gpush_°©e
;

42 
	gpush_°¨t
;

44 
∑r£_node_t
 *
	gbønch_li°
[3];

46 
	$ös_ªÆ
(
l
)

48 
f
 = ()
l
;

50 i‡(
¥og_code
 + 4 > 
¥og_code_max
)

52 
mem_block_t
 *
mbp
 = &
mem_block
[
cuºít_block
];

54 
UPDATE_PROGRAM_SIZE
;

55 
	`ªÆloc_mem_block
(
mbp
, mbp->
cuºít_size
 *2);

57 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

58 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

60 
	`STORE_FLOAT
(
¥og_code
, 
f
);

61 
	}
}

68 
	$ös_sh‹t
(
_l
)

70 
l
 = 
_l
;

71 i‡(
_l
 > 0xffff)

73 
	`debug_mesßge
("QTZ_SîvîEngöe:ös_sh‹àtoÿbig:%d\n", 
_l
);

74 
	`dump_åa˚
(0);

75 
	`ab‹t
();

78 i‡(
¥og_code
 + 2 > 
¥og_code_max
)

80 
mem_block_t
 *
mbp
 = &
mem_block
[
cuºít_block
];

81 
UPDATE_PROGRAM_SIZE
;

82 
	`ªÆloc_mem_block
(
mbp
, mbp->
cuºít_size
 *2);

84 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

85 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

87 
	`STORE_SHORT
(
¥og_code
, 
l
);

88 
	}
}

94 
	$ªad_sh‹t
(
off£t
)

96 
l
;

98 
	`COPY_SHORT
(&
l
, 
mem_block
[
cuºít_block
].
block
 + 
off£t
);

99  
l
;

100 
	}
}

106 
	$ös_öt
(
l
)

109 i‡(
¥og_code
 + 4 > 
¥og_code_max
)

111 
mem_block_t
 *
mbp
 = &
mem_block
[
cuºít_block
];

112 
UPDATE_PROGRAM_SIZE
;

113 
	`ªÆloc_mem_block
(
mbp
, mbp->
cuºít_size
 *2);

115 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

116 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

118 
	`STORE_INT
(
¥og_code
, 
l
);

119 
	}
}

125 #i‡
SIZEOF_PTR
 == 8

126 
	$ös_l⁄g
(
l
)

128 i‡(
¥og_code
 + 8 > 
¥og_code_max
)

130 
mem_block_t
 *
mbp
 = &
mem_block
[
cuºít_block
];

131 
UPDATE_PROGRAM_SIZE
;

132 
	`ªÆloc_mem_block
(
mbp
, mbp->
cuºít_size
 *2);

134 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

135 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

137 
	`STORE_PTR
(
¥og_code
, 
l
);

138 
	}
}

141 
	$upd_sh‹t
(
off£t
, 
_l
)

143 
l
 = 
_l
;

144 
	`IF_DEBUG
(
UPDATE_PROGRAM_SIZE
);

145 
	`DEBUG_CHECK2
(
off£t
 > 
CURRENT_PROGRAM_SIZE
, "QTZ_ServerEngine:patch offset %xÜargerÅhan currentÖrogram size %x.\n", offset, CURRENT_PROGRAM_SIZE);

146 i‡(
_l
 > 0xffff)

148 
	`debug_mesßge
("QTZ_SîvîEngöe:LPC Fûêi†ToÿL⁄g ??????????????????? %d %d\n", 
l
, 
_l
);

149 
	`dump_åa˚
(0);

150 
	`ab‹t
();

153 
	`COPY_SHORT
(
mem_block
[
cuºít_block
].
block
 + 
off£t
, &
l
);

154 
	}
}

160 
	$ös_byã
(
b
)

162 i‡(
¥og_code
 =
¥og_code_max
)

164 
mem_block_t
 *
mbp
 = &
mem_block
[
cuºít_block
];

165 
UPDATE_PROGRAM_SIZE
;

166 
	`ªÆloc_mem_block
(
mbp
, mbp->
cuºít_size
 *2);

168 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

169 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

171 *
¥og_code
++ = 
b
;

172 
	}
}

178 
	$upd_byã
(
off£t
, 
b
)

180 
	`IF_DEBUG
(
UPDATE_PROGRAM_SIZE
);

181 
	`DEBUG_CHECK2
(
off£t
 > 
CURRENT_PROGRAM_SIZE
, "QTZ_ServerEngine:patch offset %xÜargerÅhan currentÖrogram size %x.\n", offset, CURRENT_PROGRAM_SIZE);

182 
mem_block
[
cuºít_block
].
block
[
off£t
] = 
b
;

183 
	}
}

189 
	$íd_pushes
()

191 i‡(
push_°©e
)

193 i‡(
push_°©e
 > 1)

195 
	`upd_byã
(
push_°¨t
, 
push_°©e
);

197 
push_°©e
 = 0;

199 
	}
}

205 
	$öôülize_push
()

207 
wh©
 = 
mem_block
[
cuºít_block
].
block
[
push_°¨t
];

208 
¨g
 = 0;

210 i‡(
wh©
 !
F_CONST0
 && wh© !
F_CONST1
)

212 
¨g
 = 
mem_block
[
cuºít_block
].
block
[
push_°¨t
 + 1];

215 
¥og_code
 = 
mem_block
[
cuºít_block
].
block
 + 
push_°¨t
;

216 
	`ös_byã
(
F_PUSH
);

217 
push_°¨t
++;

218 
	`ös_byã
(0);

220 
wh©
)

222 
F_CONST0
:

223 
	`ös_byã
(
PUSH_NUMBER
 | 0);

225 
F_CONST1
:

226 
	`ös_byã
(
PUSH_NUMBER
 | 1);

228 
F_BYTE
:

229 
	`ös_byã
(
PUSH_NUMBER
 | 
¨g
);

231 
F_SHORT_STRING
:

232 
	`ös_byã
(
PUSH_STRING
 | 
¨g
);

234 
F_LOCAL
:

235 
	`ös_byã
(
PUSH_LOCAL
 | 
¨g
);

237 
F_GLOBAL
:

238 
	`ös_byã
(
PUSH_GLOBAL
 | 
¨g
);

241 
	}
}

248 
	$wrôe_smÆl_numbî
(
vÆ
)

250 i‡(
	`åy_to_push
(
PUSH_NUMBER
, 
vÆ
) )

254 
	`ös_byã
(
F_BYTE
);

255 
	`ös_byã
(
vÆ
);

256 
	}
}

262 
	$wrôe_numbî
(
vÆ
)

264 i‡–(
vÆ
 &~0xff) == 0)

266 
	`wrôe_smÆl_numbî
(
vÆ
);

270 
	`íd_pushes
();

271 i‡(
vÆ
 < 0 && val > - 256)

273 
	`ös_byã
(
F_NBYTE
);

274 
	`ös_byã
–- 
vÆ
);

278 
	`ös_byã
(
F_NUMBER
);

279 
	`ös_öt
(
vÆ
);

282 
	}
}

288 
	$gíî©e_ex¥_li°
(
∑r£_node_t
 *
ex¥
)

290 
∑r£_node_t
 *
≤
;

291 
n
, 
Êag
;

293 i‡(!
ex¥
)

297 
≤
 = 
ex¥
;

298 
Êag
 = 
n
 = 0;

301 i‡(
≤
->
ty≥
 &1)

303 
Êag
 = 1;

305 
	`i_gíî©e_node
(
≤
->
v
.
ex¥
);

306 
n
++;

309  (
≤
 =Ön->
r
.
ex¥
) );

311 i‡(
Êag
)

313 
≤
 = 
ex¥
;

316 
n
--;

317 i‡(
≤
->
ty≥
 &1)

319 
	`íd_pushes
();

320 
	`ös_byã
(
F_EXPAND_VARARGS
);

321 
	`ös_byã
(
n
);

325  (
≤
 =Ön->
r
.
ex¥
) );

327 
	}
}

333 
	$gíî©e_lvÆue_li°
(
∑r£_node_t
 *
ex¥
)

335  (
ex¥
 =Éx¥->
r
.expr) )

337 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

338 
	`íd_pushes
();

339 
	`ös_byã
(
F_VOID_ASSIGN
);

341 
	}
}

347 
INLINE
 
	$swôch_to_löe
(
löe
)

349 
sz
 = 
CURRENT_PROGRAM_SIZE
 - 
œ°_size_gíî©ed
;

350 
s
;

351 *
p
;

354 i‡(
cuºít_block
 !
A_PROGRAM
)

359 i‡(
sz
)

361 
s
 = 
löe_beög_gíî©ed
;

363 
œ°_size_gíî©ed
 +
sz
;

364 
sz
 > 255)

366 
p
 = (*)
	`Æloˇã_ö_mem_block
(
A_LINENUMBERS
, 3);

367 *
p
++ = 255;

368 
	`STORE_SHORT
(
p
, 
s
);

369 
sz
 -= 255;

371 
p
 = (*)
	`Æloˇã_ö_mem_block
(
A_LINENUMBERS
, 3);

372 *
p
++ = 
sz
;

373 
	`STORE_SHORT
(
p
, 
s
);

375 
löe_beög_gíî©ed
 = 
löe
;

376 
	}
}

382 
	$åy_to_push
(
köd
, 
vÆue
)

384 i‡(
push_°©e
)

386 i‡(
vÆue
 <
PUSH_MASK
)

388 i‡(
push_°©e
 == 1)

390 
	`öôülize_push
();

392 
push_°©e
++;

393 
	`ös_byã
(
köd
 | 
vÆue
);

394 i‡(
push_°©e
 == 255)

396 
	`íd_pushes
();

402 
	`íd_pushes
();

405 i‡(
vÆue
 <
PUSH_MASK
)

407 
push_°¨t
 = 
CURRENT_PROGRAM_SIZE
;

408 
push_°©e
 = 1;

409 
köd
)

411 
PUSH_STRING
:

412 
	`ös_byã
(
F_SHORT_STRING
);

414 
PUSH_LOCAL
:

415 
	`ös_byã
(
F_LOCAL
);

417 
PUSH_GLOBAL
:

418 
	`ös_byã
(
F_GLOBAL
);

420 
PUSH_NUMBER
:

421 i‡(
vÆue
 == 0)

423 
	`ös_byã
(
F_CONST0
);

426 i‡(
vÆue
 == 1)

428 
	`ös_byã
(
F_CONST1
);

431 
	`ös_byã
(
F_BYTE
);

433 
	`ös_byã
(
vÆue
);

437 
	}
}

443 
	$i_gíî©e_node
(
∑r£_node_t
 *
ex¥
)

445 i‡(!
ex¥
)

450 i‡(
ex¥
->
löe
 &&Éx¥->löê!
löe_beög_gíî©ed
)

452 
	`swôch_to_löe
(
ex¥
->
löe
);

454 
ex¥
->
köd
)

456 
NODE_TERNARY_OP
:

457 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

458 
ex¥
 =Éx¥->
r
.expr;

459 
NODE_BINARY_OP
:

460 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

462 
NODE_UNARY_OP
:

463 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

465 
NODE_OPCODE
:

466 
	`íd_pushes
();

467 
	`ös_byã
(
ex¥
->
v
.
numbî
);

469 
NODE_TERNARY_OP_1
:

470 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

471 
ex¥
 =Éx¥->
r
.expr;

473 
NODE_BINARY_OP_1
:

474 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

475 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

476 
	`íd_pushes
();

477 
	`ös_byã
(
ex¥
->
v
.
numbî
);

478 
	`ös_byã
(
ex¥
->
ty≥
);

480 
NODE_UNARY_OP_1
:

481 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

483 
NODE_OPCODE_1
:

484 i‡(
ex¥
->
v
.
numbî
 =
F_LOCAL
)

486 i‡(
	`åy_to_push
(
PUSH_LOCAL
, 
ex¥
->
l
.
numbî
) )

491 i‡(
ex¥
->
v
.
numbî
 =
F_GLOBAL
)

493 i‡(
	`åy_to_push
(
PUSH_GLOBAL
, 
ex¥
->
l
.
numbî
) )

498 
	`íd_pushes
();

499 
	`ös_byã
(
ex¥
->
v
.
numbî
);

500 
	`ös_byã
(
ex¥
->
l
.
numbî
);

502 
NODE_OPCODE_2
:

503 
	`íd_pushes
();

504 
	`ös_byã
(
ex¥
->
v
.
numbî
);

505 
	`ös_byã
(
ex¥
->
l
.
numbî
);

506 i‡(
ex¥
->
v
.
numbî
 =
F_LOOP_COND_NUMBER
)

508 
	`ös_öt
(
ex¥
->
r
.
numbî
);

512 
	`ös_byã
(
ex¥
->
r
.
numbî
);

515 
NODE_RETURN
:

517 
n
;

518 
n
 = 
f‹óch_dïth
;

519 
	`íd_pushes
();

520 
n
--)

522 
	`ös_byã
(
F_EXIT_FOREACH
);

525 i‡(
ex¥
->
r
.expr)

527 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

528 
	`íd_pushes
();

529 
	`ös_byã
(
F_RETURN
);

533 
	`ös_byã
(
F_RETURN_ZERO
);

537 
NODE_STRING
:

538 i‡(
	`åy_to_push
(
PUSH_STRING
, 
ex¥
->
v
.
numbî
) )

542 i‡(
ex¥
->
v
.
numbî
 <= 0xff)

544 
	`ös_byã
(
F_SHORT_STRING
);

545 
	`ös_byã
(
ex¥
->
v
.
numbî
);

549 
	`ös_byã
(
F_STRING
);

550 
	`ös_sh‹t
(
ex¥
->
v
.
numbî
);

553 
NODE_REAL
:

554 
	`íd_pushes
();

555 
	`ös_byã
(
F_REAL
);

556 
	`ös_ªÆ
(
ex¥
->
v
.
ªÆ
);

558 
NODE_NUMBER
:

559 
	`wrôe_numbî
(
ex¥
->
v
.
numbî
);

561 
NODE_LAND_LOR
:

562 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

563 
	`i_gíî©e_f‹w¨d_bønch
(
ex¥
->
v
.
numbî
);

564 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

565 i‡(
ex¥
->
l
.ex¥->
köd
 =
NODE_BRANCH_LINK
)

567 
	`i_upd©e_f‹w¨d_bønch_löks
(
ex¥
->
v
.
numbî
,Éx¥->
l
.expr);

571 
	`i_upd©e_f‹w¨d_bønch
();

574 
NODE_BRANCH_LINK
:

575 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

576 
	`íd_pushes
();

577 
	`ös_byã
(0);

578 
ex¥
->
v
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

579 
	`ös_sh‹t
(0);

580 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

582 
NODE_CALL_2
:

583 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

584 
	`íd_pushes
();

585 
	`ös_byã
(
ex¥
->
v
.
numbî
);

586 
	`ös_byã
(
ex¥
->
l
.
numbî
 >> 16);

587 
	`ös_sh‹t
(
ex¥
->
l
.
numbî
 &0xffff);

588 
	`ös_byã
–(
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
: 0) );

590 
NODE_CALL_1
:

591 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

592 
	`íd_pushes
();

593 
	`ös_byã
(
ex¥
->
v
.
numbî
);

594 
	`ös_sh‹t
(
ex¥
->
l
.
numbî
);

595 
	`ös_byã
–(
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
: 0) );

597 
NODE_CALL
:

598 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

599 
	`íd_pushes
();

600 
	`ös_byã
(
ex¥
->
v
.
numbî
);

601 
	`ös_sh‹t
(
ex¥
->
l
.
numbî
);

603 
NODE_TWO_VALUES
:

604 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

605 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

607 
NODE_CONTROL_JUMP
:

609 
köd
 = 
ex¥
->
v
.
numbî
;

610 
	`íd_pushes
();

611 
	`ös_byã
(
F_BRANCH
);

612 
ex¥
->
v
.ex¥ = 
bønch_li°
[
köd
];

613 
ex¥
->
l
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

614 
	`ös_sh‹t
(0);

615 
bønch_li°
[
köd
] = 
ex¥
;

618 
NODE_PARAMETER
:

620 
which
 = 
ex¥
->
v
.
numbî
 + 
cuºít_num_vÆues
;

621 i‡(
	`åy_to_push
(
PUSH_LOCAL
, 
which
) )

625 
	`ös_byã
(
F_LOCAL
);

626 
	`ös_byã
(
which
);

629 
NODE_PARAMETER_LVALUE
:

630 
	`íd_pushes
();

631 
	`ös_byã
(
F_LOCAL_LVALUE
);

632 
	`ös_byã
(
ex¥
->
v
.
numbî
 + 
cuºít_num_vÆues
);

634 
NODE_IF
:

635 
	`i_gíî©e_if_bønch
(
ex¥
->
v
.expr, 0);

636 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

637 i‡(
ex¥
->
r
.expr)

639 
	`i_gíî©e_ñ£
();

640 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

642 
	`i_upd©e_f‹w¨d_bønch
();

644 
NODE_LOOP
:

645 
	`i_gíî©e_lo›
(
ex¥
->
ty≥
,Éx¥->
v
.ex¥,Éx¥->
l
.ex¥,Éx¥->
r
.expr);

647 
NODE_FOREACH
:

649 
tmp
 = 0;

651 
	`i_gíî©e_node
(
ex¥
->
v
.expr);

652 
	`íd_pushes
();

653 
	`ös_byã
(
F_FOREACH
);

654 i‡(
ex¥
->
l
.ex¥->
v
.
numbî
 =
F_GLOBAL_LVALUE
)

656 
tmp
 |= 1;

658 i‡(
ex¥
->
r
.expr)

660 
tmp
 |= 4;

661 i‡(
ex¥
->
r
.ex¥->
v
.
numbî
 =
F_GLOBAL_LVALUE
)

663 
tmp
 |= 2;

666 
	`ös_byã
(
tmp
);

667 
	`ös_byã
(
ex¥
->
l
.ex¥->l.
numbî
);

668 i‡(
ex¥
->
r
.expr)

670 
	`ös_byã
(
ex¥
->
r
.ex¥->
l
.
numbî
);

674 
NODE_CASE_NUMBER
:

675 
NODE_CASE_STRING
:

676 i‡(
ex¥
->
v
.expr)

678 
∑r£_node_t
 *
Ÿhî
 = 
ex¥
->
v
.expr;

679 
ex¥
->
v
.
numbî
 = 1;

680 
Ÿhî
->
l
.
ex¥
 =Éxpr->l.expr;

681 
Ÿhî
->
v
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

682 
ex¥
->
l
.ex¥ = 
Ÿhî
;

686 
ex¥
->
v
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

688 
	`íd_pushes
();

690 
NODE_DEFAULT
:

691 
ex¥
->
v
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

692 
	`íd_pushes
();

694 
NODE_SWITCH_STRINGS
:

695 
NODE_SWITCH_NUMBERS
:

696 
NODE_SWITCH_DIRECT
:

697 
NODE_SWITCH_RANGES
:

699 
addr
, 
œ°_bªak
;

700 
∑r£_node_t
 *
sub
 = 
ex¥
->
l
.expr;

701 
∑r£_node_t
 *
ßve_swôch_bªaks
 = 
bønch_li°
[
CJ_BREAK_SWITCH
];

703 
	`i_gíî©e_node
(
sub
);

704 
bønch_li°
[
CJ_BREAK_SWITCH
] = 0;

705 
	`íd_pushes
();

706 
	`ös_byã
(
F_SWITCH
);

707 
	`ös_byã
(0xff);

708 
addr
 = 
CURRENT_PROGRAM_SIZE
;

709 
	`ös_sh‹t
(0);

710 
	`ös_sh‹t
(0);

711 
	`ös_sh‹t
(0);

712 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

713 i‡(
ex¥
->
v
.ex¥ &&Éx¥->v.ex¥->
köd
 =
NODE_DEFAULT
)

715 
	`upd_sh‹t
(
addr
 + 4, 
ex¥
->
v
.ex¥->v.
numbî
);

716 
ex¥
->
v
.ex¥ =Éx¥->v.ex¥->
l
.expr;

720 
	`upd_sh‹t
(
addr
 + 4, 
CURRENT_PROGRAM_SIZE
);

723 
	`íd_pushes
();

724 
	`ös_byã
(
F_BRANCH
);

725 
œ°_bªak
 = 
CURRENT_PROGRAM_SIZE
;

726 
	`ös_sh‹t
(0);

728 
	`upd_sh‹t
(
addr
, 
CURRENT_PROGRAM_SIZE
);

729 #ifde‡
BINARIES


730 i‡(
ex¥
->
köd
 =
NODE_SWITCH_STRINGS
)

732 
sw
;

733 
sw
 = 
addr
 - 2;

734 
	`add_to_mem_block
(
A_PATCH
, (*Ë&
sw
,  sw);

737 i‡(
ex¥
->
köd
 =
NODE_SWITCH_DIRECT
)

739 
∑r£_node_t
 *
≤
 = 
ex¥
->
v
.expr;

740 
≤
)

742 
	`ös_sh‹t
–()
≤
->
v
.
numbî
);

743 
≤
 =Ön->
l
.
ex¥
;

745 
	`ös_öt
(
ex¥
->
v
.ex¥->
r
.
numbî
);

746 
mem_block
[
cuºít_block
].
block
[
addr
 - 1] = ()0xfe;

750 
èbÀ_size
 = 0;

751 
powî_of_two
 = 1;

752 
i
 = 0;

753 
∑r£_node_t
 *
≤
 = 
ex¥
->
v
.expr;

755 
≤
)

757 i‡(
ex¥
->
köd
 =
NODE_SWITCH_STRINGS
)

759 i‡(
≤
->
r
.
numbî
)

761 
	`INS_POINTER
–(
POINTER_INT
)
	`PROG_STRING
(
≤
->
r
.
numbî
) );

765 
	`INS_POINTER
–(
POINTER_INT
)0);

770 
	`INS_POINTER
–(
POINTER_INT
)
≤
->
r
.
ex¥
);

772 
	`ös_sh‹t
–()
≤
->
v
.
numbî
);

773 
≤
 =Ön->
l
.
ex¥
;

774 
èbÀ_size
 += 1;

776  (
powî_of_two
 << 1Ë<
èbÀ_size
)

778 
powî_of_two
 <<= 1;

779 
i
++;

781 i‡(
ex¥
->
köd
 !
NODE_SWITCH_STRINGS
)

783 
mem_block
[
cuºít_block
].
block
[
addr
 - 1] = (Ë(0xf0 + 
i
);

787 
mem_block
[
cuºít_block
].
block
[
addr
 - 1] = (Ë(
i
 *0x10 + 0x0f);

790 
	`i_upd©e_bønch_li°
(
bønch_li°
[
CJ_BREAK_SWITCH
]);

791 
bønch_li°
[
CJ_BREAK_SWITCH
] = 
ßve_swôch_bªaks
;

792 
	`upd_sh‹t
(
œ°_bªak
, 
CURRENT_PROGRAM_SIZE
 -Üast_break);

793 
	`upd_sh‹t
(
addr
 + 2, 
CURRENT_PROGRAM_SIZE
);

796 
NODE_CATCH
:

798 
addr
;

800 
	`íd_pushes
();

801 
	`ös_byã
(
F_CATCH
);

802 
addr
 = 
CURRENT_PROGRAM_SIZE
;

803 
	`ös_sh‹t
(0);

804 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

805 
	`ös_byã
(
F_END_CATCH
);

806 
	`upd_sh‹t
(
addr
, 
CURRENT_PROGRAM_SIZE
 -áddr);

809 
NODE_TIME_EXPRESSION
:

811 
	`íd_pushes
();

812 
	`ös_byã
(
F_TIME_EXPRESSION
);

813 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

814 
	`ös_byã
(
F_END_TIME_EXPRESSION
);

817 
NODE_LVALUE_EFUN
:

818 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

819 
	`gíî©e_lvÆue_li°
(
ex¥
->
r
.expr);

821 
NODE_FUNCTION_CONSTRUCTOR
:

822 i‡(
ex¥
->
r
.expr)

824 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

825 
	`íd_pushes
();

826 
	`ös_byã
(
F_AGGREGATE
);

827 
	`ös_sh‹t
(
ex¥
->
r
.ex¥->
köd
);

831 
	`íd_pushes
();

832 
	`ös_byã
(
F_CONST0
);

834 
	`íd_pushes
();

835 
	`ös_byã
(
F_FUNCTION_CONSTRUCTOR
);

836 
	`ös_byã
(
ex¥
->
v
.
numbî
 &0xff);

838 
ex¥
->
v
.
numbî
 &0xff)

840 
FP_SIMUL
:

841 
FP_LOCAL
:

842 
	`ös_sh‹t
(
ex¥
->
v
.
numbî
 >> 8);

844 
FP_EFUN
:

845 
	`ös_sh‹t
(
¥edefs
[
ex¥
->
v
.
numbî
 >> 8].
tokí
);

847 
FP_FUNCTIONAL
:

848 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

850 
addr
, 
ßve_cuºít_num_vÆues
 = 
cuºít_num_vÆues
;

851 
	`ös_byã
(
ex¥
->
v
.
numbî
 >> 8);

852 
addr
 = 
CURRENT_PROGRAM_SIZE
;

853 
	`ös_sh‹t
(0);

854 
cuºít_num_vÆues
 = 
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
: 0;

855 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

856 
cuºít_num_vÆues
 = 
ßve_cuºít_num_vÆues
;

857 
	`íd_pushes
();

858 
	`ös_byã
(
F_RETURN
);

859 
	`upd_sh‹t
(
addr
, 
CURRENT_PROGRAM_SIZE
 -áddr - 2);

864 
NODE_ANON_FUNC
:

866 
addr
;

867 
ßve_fd
 = 
f‹óch_dïth
;

869 
f‹óch_dïth
 = 0;

870 
	`íd_pushes
();

871 
	`ös_byã
(
F_FUNCTION_CONSTRUCTOR
);

872 i‡(
ex¥
->
v
.
numbî
 &0x10000)

874 
	`ös_byã
(
FP_ANONYMOUS
 | 
FP_NOT_BINDABLE
);

878 
	`ös_byã
(
FP_ANONYMOUS
);

880 
	`ös_byã
(
ex¥
->
v
.
numbî
 &0xff);

881 
	`ös_byã
(
ex¥
->
l
.
numbî
);

882 
addr
 = 
CURRENT_PROGRAM_SIZE
;

883 
	`ös_sh‹t
(0);

884 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

885 
	`upd_sh‹t
(
addr
, 
CURRENT_PROGRAM_SIZE
 -áddr - 2);

886 
f‹óch_dïth
 = 
ßve_fd
;

889 
NODE_EFUN
:

891 
novÆue_u£d
 = 
ex¥
->
v
.
numbî
 &
NOVALUE_USED_FLAG
;

892 
f
 = 
ex¥
->
v
.
numbî
 &~
NOVALUE_USED_FLAG
;

894 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

895 
	`íd_pushes
();

896 i‡(
f
 < 
ONEARG_MAX
)

898 
	`ös_byã
(
f
);

903 i‡(
ex¥
->
l
.
numbî
 < 4 && 
ö°rs
[
f
].
max_¨g
 != - 1)

905 
	`ös_byã
(
F_EFUN0
 + 
ex¥
->
l
.
numbî
);

909 
	`ös_byã
(
F_EFUNV
);

910 
	`ös_byã
(
ex¥
->
l
.
numbî
);

912 
	`ös_byã
(
f
 - 
ONEARG_MAX
);

914 i‡(
novÆue_u£d
)

917 
	`ös_byã
(
F_CONST0
);

921 
	`Áèl
("QTZ_SîvîEngöe:Unknow¿nodê%òö i_gíî©e_node.\n", 
ex¥
->
köd
);

924 
	}
}

930 
	$i_gíî©e_lo›
(
ã°_fú°
, 
∑r£_node_t
 *
block
,Ö¨£_node_à*
öc
,Ö¨£_node_à*
ã°
)

932 
∑r£_node_t
 *
ßve_bªaks
 = 
bønch_li°
[
CJ_BREAK
];

933 
∑r£_node_t
 *
ßve_c⁄töues
 = 
bønch_li°
[
CJ_CONTINUE
];

934 
f‹evî
 = 
	`node_Æways_åue
(
ã°
);

935 
pos
;

937 i‡(
ã°_fú°
 == 2)

939 
f‹óch_dïth
++;

941 
bønch_li°
[
CJ_BREAK
] = bønch_li°[
CJ_CONTINUE
] = 0;

942 
	`íd_pushes
();

943 i‡(!
f‹evî
 && 
ã°_fú°
)

945 
	`i_gíî©e_f‹w¨d_bønch
(
F_BRANCH
);

947 
pos
 = 
CURRENT_PROGRAM_SIZE
;

948 
	`i_gíî©e_node
(
block
);

949 
	`i_upd©e_bønch_li°
(
bønch_li°
[
CJ_CONTINUE
]);

950 i‡(
öc
)

952 
	`i_gíî©e_node
(
öc
);

954 i‡(!
f‹evî
 && 
ã°_fú°
)

956 
	`i_upd©e_f‹w¨d_bønch
();

958 i‡(
ã°
->
v
.
numbî
 =
F_LOOP_COND_LOCAL
 ||Åe°->v.numbî =
F_LOOP_COND_NUMBER
 ||Åe°->v.numbî =
F_NEXT_FOREACH
)

960 
	`i_gíî©e_node
(
ã°
);

961 
	`ös_sh‹t
(
CURRENT_PROGRAM_SIZE
 - 
pos
);

965 
	`i_bønch_backw¨ds
(
	`gíî©e_c⁄dôi⁄Æ_bønch
(
ã°
), 
pos
);

967 
	`i_upd©e_bønch_li°
(
bønch_li°
[
CJ_BREAK
]);

968 
bønch_li°
[
CJ_BREAK
] = 
ßve_bªaks
;

969 
bønch_li°
[
CJ_CONTINUE
] = 
ßve_c⁄töues
;

970 i‡(
ã°_fú°
 == 2)

972 
f‹óch_dïth
--;

974 
	}
}

980 
	$i_gíî©e_if_bønch
(
∑r£_node_t
 *
node
, 
övît
)

982 
gíî©e_bŸh
 = 0;

983 
bønch
 = (
övît
 ? 
F_BRANCH_WHEN_NON_ZERO
 : 
F_BRANCH_WHEN_ZERO
);

985 
node
->
köd
)

987 
NODE_UNARY_OP
:

988 i‡(
node
->
v
.
numbî
 =
F_NOT
)

990 
	`i_gíî©e_if_bønch
(
node
->
r
.
ex¥
, !
övît
);

994 
NODE_BINARY_OP
:

995 
node
->
v
.
numbî
)

997 
F_EQ
:

998 
gíî©e_bŸh
 = 1;

999 
bønch
 = (
övît
 ? 
F_BRANCH_EQ
 : 
F_BRANCH_NE
);

1001 
F_GE
:

1002 i‡(
övît
)

1004 
gíî©e_bŸh
 = 1;

1005 
bønch
 = 
F_BRANCH_GE
;

1008 
F_LE
:

1009 i‡(
övît
)

1011 
gíî©e_bŸh
 = 1;

1012 
bønch
 = 
F_BRANCH_LE
;

1015 
F_LT
:

1016 i‡(!
övît
)

1018 
gíî©e_bŸh
 = 1;

1019 
bønch
 = 
F_BRANCH_GE
;

1022 
F_GT
:

1023 i‡(!
övît
)

1025 
gíî©e_bŸh
 = 1;

1026 
bønch
 = 
F_BRANCH_LE
;

1029 
F_NE
:

1030 
gíî©e_bŸh
 = 1;

1031 
bønch
 = (
övît
 ? 
F_BRANCH_NE
 : 
F_BRANCH_EQ
);

1035 i‡(
gíî©e_bŸh
)

1037 
	`i_gíî©e_node
(
node
->
l
.
ex¥
);

1038 
	`i_gíî©e_node
(
node
->
r
.
ex¥
);

1042 
	`i_gíî©e_node
(
node
);

1044 
	`i_gíî©e_f‹w¨d_bønch
(
bønch
);

1045 
	}
}

1051 
	$i_gíî©e_öhîôed_öô_ˇŒ
(
ödex
, 
f
)

1053 
	`íd_pushes
();

1054 
	`ös_byã
(
F_CALL_INHERITED
);

1055 
	`ös_byã
(
ödex
);

1056 
	`ös_sh‹t
(
f
);

1057 
	`ös_byã
(0);

1058 
	`ös_byã
(
F_POP_VALUE
);

1059 
	}
}

1065 
	$i_gíî©e___INIT
()

1067 
	`add_to_mem_block
(
A_PROGRAM
, (*)
mem_block
[
A_INITIALIZER
].
block
, mem_block[A_INITIALIZER].
cuºít_size
);

1068 
¥og_code
 = 
mem_block
[
A_PROGRAM
].
block
 + mem_block[A_PROGRAM].
cuºít_size
;

1069 
	}
}

1075 
	$i_gíî©e_f‹w¨d_bønch
(
b
)

1077 
	`íd_pushes
();

1078 
	`ös_byã
(
b
);

1079 
	`ös_sh‹t
(
cuºít_f‹w¨d_bønch
);

1080 
cuºít_f‹w¨d_bønch
 = 
CURRENT_PROGRAM_SIZE
 - 2;

1081 
	}
}

1087 
	$i_upd©e_f‹w¨d_bønch
()

1089 
i
 = 
	`ªad_sh‹t
(
cuºít_f‹w¨d_bønch
);

1091 
	`íd_pushes
();

1092 
	`upd_sh‹t
(
cuºít_f‹w¨d_bønch
, 
CURRENT_PROGRAM_SIZE
 - current_forward_branch);

1093 
cuºít_f‹w¨d_bønch
 = 
i
;

1094 
	}
}

1100 
	$i_upd©e_f‹w¨d_bønch_löks
(
köd
, 
∑r£_node_t
 *
lök_°¨t
)

1102 
i
;

1104 
	`íd_pushes
();

1105 
i
 = 
	`ªad_sh‹t
(
cuºít_f‹w¨d_bønch
);

1106 
	`upd_sh‹t
(
cuºít_f‹w¨d_bønch
, 
CURRENT_PROGRAM_SIZE
 - current_forward_branch);

1107 
cuºít_f‹w¨d_bønch
 = 
i
;

1110 
i
 = 
lök_°¨t
->
v
.
numbî
;

1111 
	`upd_byã
(
i
 - 1, 
köd
);

1112 
	`upd_sh‹t
(
i
, 
CURRENT_PROGRAM_SIZE
 - i);

1113 
lök_°¨t
 =Üök_°¨t->
l
.
ex¥
;

1116 
lök_°¨t
->
köd
 =
NODE_BRANCH_LINK
);

1117 
	}
}

1123 
	$i_bønch_backw¨ds
(
b
, 
addr
)

1125 
	`íd_pushes
();

1126 i‡(
b
)

1128 i‡(
b
 !
F_WHILE_DEC
)

1130 
	`ös_byã
(
b
);

1132 
	`ös_sh‹t
(
CURRENT_PROGRAM_SIZE
 - 
addr
);

1134 
	}
}

1140 
	$i_upd©e_bønch_li°
(
∑r£_node_t
 *
bl
)

1142 
cuºít_size
;

1144 
	`íd_pushes
();

1145 
cuºít_size
 = 
CURRENT_PROGRAM_SIZE
;

1147 
bl
)

1149 
	`upd_sh‹t
(
bl
->
l
.
numbî
, 
cuºít_size
 - bl->l.number);

1150 
bl
 = bl->
v
.
ex¥
;

1152 
	}
}

1158 
	$i_gíî©e_ñ£
()

1161 
	`íd_pushes
();

1162 
	`ös_byã
(
F_BRANCH
);

1164 
	`ös_sh‹t
(
	`ªad_sh‹t
(
cuºít_f‹w¨d_bønch
) );

1166 
	`upd_sh‹t
(
cuºít_f‹w¨d_bønch
, 
CURRENT_PROGRAM_SIZE
 - current_forward_branch);

1168 
cuºít_f‹w¨d_bønch
 = 
CURRENT_PROGRAM_SIZE
 - 2;

1169 
	}
}

1175 
	$i_öôülize_∑r£r
()

1177 
f‹óch_dïth
 = 0;

1178 
bønch_li°
[
CJ_BREAK
] = 0;

1179 
bønch_li°
[
CJ_BREAK_SWITCH
] = 0;

1180 
bønch_li°
[
CJ_CONTINUE
] = 0;

1182 
cuºít_f‹w¨d_bønch
 = 0;

1184 
cuºít_block
 = 
A_PROGRAM
;

1185 
¥og_code
 = 
mem_block
[
A_PROGRAM
].
block
;

1186 
¥og_code_max
 = 
mem_block
[
A_PROGRAM
].
block
 + mem_block[A_PROGRAM].
max_size
;

1188 
löe_beög_gíî©ed
 = 0;

1189 
œ°_size_gíî©ed
 = 0;

1190 
	}
}

1196 
	$i_gíî©e_föÆ_¥ogøm
(
x
)

1198 i‡(!
x
)

1200 
UPDATE_PROGRAM_SIZE
;

1205 
	`ßve_fûe_öfo
(
cuºít_fûe_id
, 
cuºít_löe
 - 
cuºít_löe_ßved
);

1206 
	`swôch_to_löe
( - 1);

1208 
	}
}

1213 
	$›timize_icode
(*
°¨t
, *
pc
, *
íd
)

1215 
ö°r
;

1216 i‡(
°¨t
 == 0)

1221 
°¨t
 = 
mem_block
[
A_PROGRAM
].
block
;

1222 
pc
 = 
°¨t
;

1223 
íd
 = 
pc
 + 
mem_block
[
A_PROGRAM
].
cuºít_size
;

1224 i‡(*
pc
 == 0)

1227 
pc
 += 3;

1230 
pc
 < 
íd
)

1232 
ö°r
 = 
	`EXTRACT_UCHAR
(
pc
++) )

1234 
F_NUMBER
:

1235 
F_REAL
:

1236 
F_CALL_INHERITED
:

1237 
pc
 += 4;

1239 
F_SIMUL_EFUN
:

1240 
F_CALL_FUNCTION_BY_ADDRESS
:

1241 
pc
 += 3;

1243 
F_BRANCH
:

1244 
F_BRANCH_WHEN_ZERO
:

1245 
F_BRANCH_WHEN_NON_ZERO
:

1246 
F_BBRANCH
:

1247 
F_BBRANCH_WHEN_ZERO
:

1248 
F_BBRANCH_WHEN_NON_ZERO
:

1250 *
tmp
;

1251 
ßrg
;

1253 
	`COPY_SHORT
(&
ßrg
, 
pc
);

1254 i‡(
ö°r
 > 
F_BRANCH
)

1256 
tmp
 = 
pc
 - 
ßrg
;

1260 
tmp
 = 
pc
 + 
ßrg
;

1262 
ßrg
 = 0;

1265 i‡(
	`EXTRACT_UCHAR
(
tmp
Ë=
F_BRANCH
)

1267 
	`COPY_SHORT
(&
ßrg
, 
tmp
 + 1);

1268 
tmp
 +
ßrg
 + 1;

1270 i‡(
	`EXTRACT_UCHAR
(
tmp
Ë=
F_BBRANCH
)

1272 
	`COPY_SHORT
(&
ßrg
, 
tmp
 + 1);

1273 
tmp
 -
ßrg
 - 1;

1280 i‡(!
ßrg
)

1282 
pc
 += 2;

1288 i‡(
tmp
 > 
pc
)

1290 i‡(
ö°r
 > 
F_BRANCH
)

1292 
pc
[ - 1] -= 3;

1294 
ßrg
 = 
tmp
 - 
pc
;

1298 i‡(
ö°r
 <
F_BRANCH
)

1300 
pc
[ - 1] += 3;

1302 
ßrg
 = 
pc
 - 
tmp
;

1304 
	`STORE_SHORT
(
pc
, 
ßrg
);

1307 #ifde‡
F_LOR


1308 
F_LOR
:

1309 
F_LAND
:

1311 *
tmp
;

1312 
ßrg
;

1314 
	`COPY_SHORT
(&
ßrg
, 
pc
);

1315 
tmp
 = 
pc
 + 
ßrg
;

1316 
ßrg
 = 0;

1319 i‡(
	`EXTRACT_UCHAR
(
tmp
Ë=
F_BRANCH
)

1321 
	`COPY_SHORT
(&
ßrg
, 
tmp
 + 1);

1322 
tmp
 +
ßrg
 + 1;

1324 i‡(
	`EXTRACT_UCHAR
(
tmp
Ë=
F_BBRANCH
)

1326 
	`COPY_SHORT
(&
ßrg
, 
tmp
 + 1);

1327 
tmp
 -
ßrg
 - 1;

1334 i‡(!
ßrg
)

1336 
pc
 += 2;

1342 i‡(
tmp
 > 
pc
)

1344 
ßrg
 = 
tmp
 - 
pc
;

1348 #ifde‡
DEBUG


1349 
	`Ârötf
(
°dîr
, "QTZ_ServerEngine:Optimization failed; can't || or && backwards.\n");

1351 
pc
 += 2;

1354 
	`STORE_SHORT
(
pc
, 
ßrg
);

1358 
F_CATCH
:

1359 
F_AGGREGATE
:

1360 
F_AGGREGATE_ASSOC
:

1361 
F_STRING
:

1362 #ifde‡
F_JUMP_WHEN_ZERO


1363 
F_JUMP_WHEN_ZERO
:

1364 
F_JUMP_WHEN_NON_ZERO
:

1366 #ifde‡
F_JUMP


1367 
F_JUMP
:

1369 
pc
 += 2;

1371 
F_GLOBAL_LVALUE
:

1372 
F_GLOBAL
:

1373 
F_SHORT_STRING
:

1374 
F_LOOP_INCR
:

1375 
F_WHILE_DEC
:

1376 
F_LOCAL
:

1377 
F_LOCAL_LVALUE
:

1378 
F_SSCANF
:

1379 
F_PARSE_COMMAND
:

1380 
F_BYTE
:

1381 
F_NBYTE
:

1382 
pc
++;

1384 
F_FUNCTION_CONSTRUCTOR
:

1385 
	`EXTRACT_UCHAR
(
pc
++) )

1387 
FP_SIMUL
:

1388 
FP_LOCAL
:

1389 
pc
 += 2;

1391 
FP_FUNCTIONAL
:

1392 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
: 
pc
 += 3;

1394 
FP_ANONYMOUS
:

1395 
FP_ANONYMOUS
 | 
FP_NOT_BINDABLE
: 
pc
 += 4;

1397 
FP_EFUN
:

1398 
pc
 += 2;

1402 
F_SWITCH
:

1404 
°abÀ
, 
ëabÀ
;

1405 
pc
++;

1406 
	`LOAD_SHORT
(
°abÀ
, 
pc
);

1407 
	`LOAD_SHORT
(
ëabÀ
, 
pc
);

1408 
pc
 += 2;

1409 
	`DEBUG_CHECK
(
°abÀ
 < 
pc
 - 
°¨t
 || 
ëabÀ
 <Öc - start ||Étable < stable, "QTZ_ServerEngine:Error in switchÅable found while optimizing\n");

1411 
	`›timize_icode
(
°¨t
, 
pc
, sèπ + 
°abÀ
);

1412 
pc
 = 
°¨t
 + 
ëabÀ
;

1415 
F_EFUN0
:

1416 
F_EFUN1
:

1417 
F_EFUN2
:

1418 
F_EFUN3
:

1419 
F_EFUNV
:

1420 
ö°r
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
ONEARG_MAX
;

1422 i‡–(
ö°r
 >
BASE
Ë&& (
ö°rs
[ö°r].
mö_¨g
 !ö°rs[ö°r].
max_¨g
) )

1424 
pc
++;

1428 
	}
}

	@src/interpret.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"efuns_ö˛.h
"

5 
	~"fûe.h
"

6 
	~"fûe_ö˛.h
"

7 
	~"backíd.h
"

8 
	~"simul_efun.h
"

9 
	~"debug.h
"

10 
	~"e›î©‹s.h
"

11 
	~"efun˘i⁄s.h
"

12 
	~"Àx.h
"

13 
	~"•rötf.h
"

14 
	~"sw≠.h
"

15 
	~"comm.h
"

16 
	~"p‹t.h
"

17 
	~"qs‹t.h
"

18 
	~"compûî.h
"

19 
	~"ªgexp.h
"

21 #ifde‡
OPCPROF


22 
	~"›c.h
"

24 
	g›c_e›î
[
BASE
];

27 #ifde‡
OPCPROF_2D


29 
	g›c_e›î_2d
[
BASE
 + 1][BASE + 1];

30 
	gœ°_e›
 = 0;

33 *
	gty≥_«mes
[] =

37 
	#TYPE_CODES_END
 0x400

	)

38 
	#TYPE_CODES_START
 0x2

	)

40 
max_co°
;

41 
ˇŒ_‹igö
;

43 
INLINE
 
push_ödexed_lvÆue
();

44 #ifde‡
DEBUG


45 
INLINE_STATIC
 
svÆue_t
 *
föd_vÆue
();

47 
bªak_poöt
();

48 
INLINE_STATIC
 
do_lo›_c⁄d_numbî
();

49 
INLINE_STATIC
 
do_lo›_c⁄d_loˇl
();

50 
do_ˇtch
(*);

51 #ifde‡
DEBUG


52 
œ°_ö°ru˘i⁄s
();

54 
_°πof
(*, **);

55 #ifde‡
TRACE_CODE


56 *
gë_¨g
(, );

59 #ifde‡
DEBUG


60 
	g°ack_ö_u£_as_ãmp‹¨y
 = 0;

63 
öãr_ssˇnf
(
svÆue_t
 *, svalue_t *, svalue_t *, );

64 
¥ogøm_t
 *
	gcuºít_¥og
;

65 
	gˇŒî_ty≥
;

66 
	gåa˚dïth
;

67 
	gnum_v¨¨gs
;

89 *
	gpc
;

90 
svÆue_t
 *
	gÂ
;

92 
svÆue_t
 *
	g•
;

94 
	gfun˘i⁄_ödex_off£t
;

95 
	gv¨übÀ_ödex_off£t
;

96 
	g°_num_¨g
;

98 
svÆue_t
 
	g°¨t_of_°ack
[
CFG_EVALUATOR_STACK_SIZE
];

99 
svÆue_t
 *
	gíd_of_°ack
 = 
°¨t_of_°ack
 + 
CFG_EVALUATOR_STACK_SIZE
 - 5;

102 
svÆue_t
 
	gˇtch_vÆue
 =

104 
T_NUMBER
, 0,

111 
svÆue_t
 
	g≠∂y_ªt_vÆue
 =

113 
T_NUMBER
, 0,

119 
c⁄åﬁ_°ack_t
 
	gc⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
];

120 
c⁄åﬁ_°ack_t
 *
	gc•
;

122 
	gtoo_dìp_îr‹
 = 0, 
	gmax_evÆ_îr‹
 = 0;

123 
	#STACK_CHECK
 i‡(++
•
 >
íd_of_°ack
) do { \

124 
too_dìp_îr‹
 = 1; 
	`îr‹
("QTZ_SE:stack overflow\n"); } \

125 0)

	)

127 
	$gë_vîsi⁄
(*
buff
)

129 
	`•rötf
(
buff
, "QTZ_SE %s", "ver 0.01");

130 
	}
}

155 
INLINE
 
	$push_obje˘
(
obje˘_t
 *
ob
)

157 
STACK_CHECK
;

158 
•
->
ty≥
 = 
T_OBJECT
;

159 
•
->
u
.
ob
 = ob;

160 
	`add_ªf
(
ob
, "push_object");

161 
	}
}

167 *
	$ty≥_«me
(
c
)

169 
j
 = 0;

170 
limô
 = 
TYPE_CODES_START
;

174 i‡(
c
 &
limô
)

176  
ty≥_«mes
[
j
];

178 
j
++;

181 !–(
limô
 <<1Ë&
TYPE_CODES_END
) );

183 
c
)

185 
T_INVALID
:

187 
T_LVALUE
:

189 
T_LVALUE_BYTE
:

191 
T_LVALUE_RANGE
:

193 
T_ERROR_HANDLER
:

195 
	`IF_DEBUG
(
T_FREED
:

199 
	}
}

206 
¥ogøm_t
 *
ffbn_ªcur£
(program_t *, *, *, *);

207 
¥ogøm_t
 *
ffbn_ªcur£2
(program_t *, *, *, *, *);

212 
INLINE
 
	$push_numbî
(
n
)

214 
STACK_CHECK
;

215 
•
->
ty≥
 = 
T_NUMBER
;

216 
•
->
subty≥
 = 0;

217 
•
->
u
.
numbî
 = 
n
;

218 
	}
}

224 
INLINE
 
	$push_ªÆ
(
n
)

226 
STACK_CHECK
;

227 
•
->
ty≥
 = 
T_REAL
;

228 
•
->
u
.
ªÆ
 = 
n
;

229 
	}
}

234 
INLINE
 
	$push_undeföed
()

236 
STACK_CHECK
;

237 *
•
 = 
c⁄°0u
;

238 
	}
}

244 
INLINE
 
	$push_undeföeds
(
num
)

246 i‡(
•
 + 
num
 >
íd_of_°ack
)

248 
too_dìp_îr‹
 = 1;

249 
	`îr‹
("stack overflow\n");

251 
num
--)

253 *++
•
 = 
c⁄°0u
;

255 
	}
}

261 
INLINE
 
	$c›y_™d_push_°rög
(*
p
)

263 
STACK_CHECK
;

264 
•
->
ty≥
 = 
T_STRING
;

265 
•
->
subty≥
 = 
STRING_MALLOC
;

266 
•
->
u
.
°rög
 = 
	`°rög_c›y
(
p
, "copy_and_push_string");

267 
	}
}

273 
INLINE
 
	$sh¨e_™d_push_°rög
(*
p
)

275 
STACK_CHECK
;

276 
•
->
ty≥
 = 
T_STRING
;

277 
•
->
subty≥
 = 
STRING_SHARED
;

278 
•
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
p
);

279 
	}
}

284 #ifde‡
DEBUG


285 
INLINE_STATIC
 
svÆue_t
 *
	$föd_vÆue
(
num
)

287 
	`DEBUG_CHECK2
(
num
 >()
cuºít_obje˘
->
¥og
->
num_v¨übÀs_tŸÆ
, "QTZ_SE:Illegal variableáccess %d(%d).\n",Çum, current_object->prog->num_variables_total);

288  &
cuºít_obje˘
->
v¨übÀs
[
num
];

289 
	}
}

291 
	#föd_vÆue
(
num
Ë(&
cuºít_obje˘
->
v¨übÀs
[num])

	)

294 
INLINE
 
	$‰ì_°rög_svÆue
(
svÆue_t
 *
v
)

296 *
°r
 = 
v
->
u
.
°rög
;

298 i‡(
v
->
subty≥
 &
STRING_COUNTED
)

300 #ifde‡
STRING_STATS


301 
size
 = 
	`MSTR_SIZE
(
°r
);

303 i‡(
	`DEC_COUNTED_REF
(
°r
) )

305 
	`SUB_STRING
(
size
);

306 
	`NDBG
(
	`BLOCK
(
°r
) );

307 i‡(
v
->
subty≥
 &
STRING_HASHED
)

309 
	`SUB_NEW_STRING
(
size
, (
block_t
) );

310 
	`dóŒoˇã_°rög
(
°r
);

311 
CHECK_STRING_STATS
;

315 
	`SUB_NEW_STRING
(
size
, (
mÆloc_block_t
) );

316 
	`FREE
(
	`MSTR_BLOCK
(
°r
) );

317 
CHECK_STRING_STATS
;

322 
	`SUB_STRING
(
size
);

323 
	`NDBG
(
	`BLOCK
(
°r
) );

326 
	}
}

332 
	$u∆ök_°rög_svÆue
(
svÆue_t
 *
s
)

334 *
°r
;

336 
s
->
subty≥
)

338 
STRING_MALLOC
:

339 i‡(
	`MSTR_REF
(
s
->
u
.
°rög
) > 1)

341 
s
->
u
.
°rög
 = 
	`°rög_u∆ök
(s->u.string, "unlink_string_svalue");

344 
STRING_SHARED
:

346 
size_t
 
l
 = 
	`SHARED_STRLEN
(
s
->
u
.
°rög
);

348 
°r
 = 
	`√w_°rög
(
l
, "unlink_string_svalue");

349 
	`°∫˝y
(
°r
, 
s
->
u
.
°rög
, 
l
 + 1);

350 
	`‰ì_°rög
(
s
->
u
.
°rög
);

351 
s
->
subty≥
 = 
STRING_MALLOC
;

352 
s
->
u
.
°rög
 = 
°r
;

355 
STRING_CONSTANT
:

356 
s
->
u
.
°rög
 = 
	`°rög_c›y
(
•
->u.string, "unlink_string_svalue");

357 
s
->
subty≥
 = 
STRING_MALLOC
;

360 
	}
}

367 #ifde‡
DEBUG


368 
ölöe
 
	$öt_‰ì_svÆue
(
svÆue_t
 *
v
, *
èg
)

370 
INLINE
 
	$öt_‰ì_svÆue
(
svÆue_t
 *
v
)

374 i‡(
v
->
ty≥
 =
T_STRING
)

376 *
°r
 = 
v
->
u
.
°rög
;

378 i‡(
v
->
subty≥
 &
STRING_COUNTED
)

380 #ifde‡
STRING_STATS


381 
size
 = 
	`MSTR_SIZE
(
°r
);

383 i‡(
	`DEC_COUNTED_REF
(
°r
) )

385 
	`SUB_STRING
(
size
);

386 
	`NDBG
(
	`BLOCK
(
°r
) );

387 i‡(
v
->
subty≥
 &
STRING_HASHED
)

389 
	`SUB_NEW_STRING
(
size
, (
block_t
) );

390 
	`dóŒoˇã_°rög
(
°r
);

391 
CHECK_STRING_STATS
;

395 
	`SUB_NEW_STRING
(
size
, (
mÆloc_block_t
) );

396 
	`FREE
(
	`MSTR_BLOCK
(
°r
) );

397 
CHECK_STRING_STATS
;

402 
	`SUB_STRING
(
size
);

403 
	`NDBG
(
	`BLOCK
(
°r
) );

407 i‡(
v
->
ty≥
 &
T_REFED
)

409 i‡(!(--
v
->
u
.
ª„d
->
ªf
) )

411 
v
->
ty≥
)

413 
T_OBJECT
:

414 
	`dóŒoc_obje˘
(
v
->
u
.
ob
, "free_svalue");

416 
T_CLASS
:

417 
	`dóŒoc_˛ass
(
v
->
u
.
¨r
);

419 
T_ARRAY
:

420 
	`dóŒoc_¨øy
(
v
->
u
.
¨r
);

422 
T_BUFFER
:

423 i‡(
v
->
u
.
buf
 !&
nuŒ_buf
)

425 
	`FREE
–(*)
v
->
u
.
buf
);

428 
T_MAPPING
:

429 
	`dóŒoc_m≠pög
(
v
->
u
.
m≠
);

431 
T_FUNCTION
:

432 
	`dóŒoc_fu≈
(
v
->
u
.
Â
);

437 i‡(
v
->
ty≥
 =
T_ERROR_HANDLER
)

439 (*
v
->
u
.
îr‹_h™dÀr
) ();

441 #ifde‡
DEBUG


442 i‡(
v
->
ty≥
 =
T_FREED
)

444 
	`Áèl
("QTZ_SE:T_FREED svÆuê‰ìd. Pªviou¶y fªed by %s.\n", 
v
->
u
.
°rög
);

446 
v
->
ty≥
 = 
T_FREED
;

447 
v
->
u
.
°rög
 = 
èg
;

449 
	}
}

455 
	$¥o˚ss_efun_ˇŒback
(
«rg
, 
fun˘i⁄_to_ˇŒ_t
 *
·c
, 
f
)

457 
svÆue_t
 *
¨g
 = 
•
 - 
°_num_¨g
 + 1+
«rg
;

459 i‡(
¨g
->
ty≥
 =
T_FUNCTION
)

461 
·c
->
f
.
Â
 = 
¨g
->
u
.fp;

462 
·c
->
ob
 = 0;

463 
·c
->
«rg
 = 
°_num_¨g
 -Çarg - 1;

464 
·c
->
¨gs
 = 
¨g
 + 1;

468 
·c
->
f
.
°r
 = 
¨g
->
u
.
°rög
;

469 i‡(
°_num_¨g
 < 
«rg
 + 2)

471 
·c
->
ob
 = 
cuºít_obje˘
;

472 
·c
->
«rg
 = 0;

476 i‡–(
¨g
 + 1)->
ty≥
 =
T_OBJECT
)

478 
·c
->
ob
 = (
¨g
 + 1)->
u
.ob;

481 i‡–(
¨g
 + 1)->
ty≥
 =
T_STRING
)

483 i‡(!(
·c
->
ob
 = 
	`föd_obje˘
–(
¨g
 + 1)->
u
.
°rög
ËË|| !
	`obje˘_visibÀ
(ftc->ob) )

485 
	`bad_¨gumít
(
¨g
 + 1, 
T_STRING
 | 
T_OBJECT
, 3, 
f
);

490 
	`bad_¨gumít
(
¨g
 + 1, 
T_STRING
 | 
T_OBJECT
, 3, 
f
);

493 
·c
->
«rg
 = 
°_num_¨g
 -Çarg - 2;

494 
·c
->
¨gs
 = 
¨g
 + 2;

496 i‡(
·c
->
ob
->
Êags
 &
O_DESTRUCTED
)

498 
	`bad_¨gumít
(
¨g
 + 1, 
T_STRING
 | 
T_OBJECT
, 3, 
f
);

502 
	}
}

508 
svÆue_t
 *
	$ˇŒ_efun_ˇŒback
(
fun˘i⁄_to_ˇŒ_t
 *
·c
, 
n
)

510 
svÆue_t
 *
v
;

512 i‡(
·c
->
«rg
)

514 
	`push_some_svÆues
(
·c
->
¨gs
, ftc->
«rg
);

516 i‡(
·c
->
ob
)

518 i‡(
·c
->
ob
->
Êags
 &
O_DESTRUCTED
)

520 
	`îr‹
("QTZ_SE:Object destructed duringÉfun callback.\n");

522 
v
 = 
	`≠∂y
(
·c
->
f
.
°r
, ftc->
ob
, 
n
 + ftc->
«rg
, 
ORIGIN_EFUN
);

526 
v
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
·c
->
f
.
Â
, 
n
 + ftc->
«rg
);

528  
v
;

529 
	}
}

535 
INLINE
 
	$‰ì_some_svÆues
(
svÆue_t
 *
v
, 
num
)

537 
num
--)

539 
	`‰ì_svÆue
(
v
 + 
num
, "free_some_svalues");

541 
	`FREE
(
v
);

542 
	}
}

547 *
	$add_¶ash
(*
°r
)

549 *
tmp
;

551 
tmp
 = 
	`√w_°rög
(
	`°æí
(
°r
) + 1, "add_slash");

552 *
tmp
 = '/';

553 
	`°r˝y
(
tmp
 + 1, 
°r
);

554  
tmp
;

555 
	}
}

563 
INLINE
 
	$assign_svÆue_no_‰ì
(
svÆue_t
 *
to
, svÆue_à*
‰om
)

565 
	`DEBUG_CHECK
(
‰om
 == 0, "AttemptÅoássign_svalue() fromáÇullÖtr.\n");

566 
	`DEBUG_CHECK
(
to
 == 0, "AttemptÅoássign_svalue()ÅoáÇullÖtr.\n");

567 *
to
 = *
‰om
;

569 i‡(
‰om
->
ty≥
 =
T_STRING
)

571 i‡(
‰om
->
subty≥
 &
STRING_COUNTED
)

573 
	`INC_COUNTED_REF
(
to
->
u
.
°rög
);

574 
	`ADD_STRING
(
	`MSTR_SIZE
(
to
->
u
.
°rög
) );

575 
	`NDBG
(
	`BLOCK
(
to
->
u
.
°rög
) );

578 i‡(
‰om
->
ty≥
 &
T_REFED
)

580 
‰om
->
u
.
ª„d
->
ªf
++;

582 
	}
}

588 
INLINE
 
	$assign_svÆue
(
svÆue_t
 *
de°
, svÆue_à*
v
)

591 
	`‰ì_svÆue
(
de°
, "assign_svalue");

592 
	`assign_svÆue_no_‰ì
(
de°
, 
v
);

593 
	}
}

599 
INLINE
 
	$push_some_svÆues
(
svÆue_t
 *
v
, 
num
)

601 i‡(
•
 + 
num
 >
íd_of_°ack
)

603 
too_dìp_îr‹
 = 1;

604 
	`îr‹
("QTZ_SE:stack overflow\n");

606 
num
--)

608 
	`push_svÆue
(
v
++);

610 
	}
}

616 
INLINE
 
	$c›y_some_svÆues
(
svÆue_t
 *
de°
, svÆue_à*
v
, 
num
)

618 
num
--)

620 
	`assign_svÆue_no_‰ì
(
de°
 + 
num
, 
v
 +Çum);

622 
	}
}

628 
INLINE
 
	$å™s„r_push_some_svÆues
(
svÆue_t
 *
v
, 
num
)

630 i‡(
•
 + 
num
 >
íd_of_°ack
)

632 
too_dìp_îr‹
 = 1;

633 
	`îr‹
("stack overflow\n");

635 
	`mem˝y
(
•
 + 1, 
v
, 
num
 *(
svÆue_t
) );

636 
•
 +
num
;

637 
	}
}

644 
INLINE
 
	$p›_°ack
()

646 
	`DEBUG_CHECK
(
•
 < 
°¨t_of_°ack
, "Stack underflow.\n");

647 
	`‰ì_svÆue
(
•
--, "pop_stack");

648 
	}
}

654 
svÆue_t
 
	gglobÆ_lvÆue_byã
 =

656 
T_LVALUE_BYTE
, 0,

665 
INLINE
 
	$push_ödexed_lvÆue
(
code
)

667 
öd
;

668 
svÆue_t
 *
lv
;

670 i‡(
•
->
ty≥
 =
T_LVALUE
)

672 
lv
 = 
•
->
u
.
lvÆue
;

673 i‡(!
code
 && 
lv
->
ty≥
 =
T_MAPPING
)

675 
•
--;

676 i‡(!(
lv
 = 
	`föd_f‹_ö£π
÷v->
u
.
m≠
, 
•
, 0) ) )

678 
	`m≠pög_too_œrge
();

680 
	`‰ì_svÆue
(
•
, "push_indexed_lvalue: 1");

681 
•
->
ty≥
 = 
T_LVALUE
;

682 
•
->
u
.
lvÆue
 = 
lv
;

686 i‡(!–(--
•
)->
ty≥
 =
T_NUMBER
) )

688 
	`îr‹
("QTZ_SE:IllegalÅype of index\n");

691 
öd
 = 
•
->
u
.
numbî
;

693 
lv
->
ty≥
)

695 
T_STRING
:

697 
size_t
 
Àn
 = 
	`SVALUE_STRLEN
(
lv
);

699 i‡(
code
)

701 
öd
 = 
Àn
 - ind;

703 i‡(
öd
 >()
Àn
 || ind < 0)

705 
	`îr‹
("QTZ_SE:Index out of bounds in string indexÜvalue.\n");

707 
	`u∆ök_°rög_svÆue
(
lv
);

708 
•
->
ty≥
 = 
T_LVALUE
;

709 
•
->
u
.
lvÆue
 = &
globÆ_lvÆue_byã
;

710 
globÆ_lvÆue_byã
.
subty≥
 = 0;

711 
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = (*Ë&
lv
->u.
°rög
[
öd
];

715 
T_BUFFER
:

717 i‡(
code
)

719 
öd
 = 
lv
->
u
.
buf
->
size
 - ind;

721 i‡(
öd
 >()
lv
->
u
.
buf
->
size
 || ind < 0)

723 
	`îr‹
("Buffer index out of bounds.\n");

725 
•
->
ty≥
 = 
T_LVALUE
;

726 
•
->
u
.
lvÆue
 = &
globÆ_lvÆue_byã
;

727 
globÆ_lvÆue_byã
.
subty≥
 = 1;

728 
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = &
lv
->u.
buf
->
ôem
[
öd
];

732 
T_ARRAY
:

734 i‡(
code
)

736 
öd
 = 
lv
->
u
.
¨r
->
size
 - ind;

738 i‡(
öd
 >
lv
->
u
.
¨r
->
size
 || ind < 0)

740 
	`îr‹
("QTZ_SE:Array index out of bounds\n");

742 
	`£t_dúty_¨r
(
lv
->
u
.
¨r
, 
öd
, 
DIRTY_SET
);

743 
•
->
ty≥
 = 
T_LVALUE
;

744 
•
->
u
.
lvÆue
 = 
lv
->u.
¨r
->
ôem
 + 
öd
;

749 i‡(
lv
->
ty≥
 =
T_NUMBER
 && !lv->
u
.
numbî
)

751 
	`îr‹
("QTZ_SE:Value being indexed is zero.\n");

753 
	`îr‹
("QTZ_SE:C™nŸ index vÆuêo‡ty≥ '%s'.\n", 
	`ty≥_«me
(
lv
->
ty≥
) );

762 i‡(!
code
 && (
•
->
ty≥
 =
T_MAPPING
) )

764 i‡(!(
lv
 = 
	`föd_f‹_ö£π
(
•
->
u
.
m≠
, sp - 1, 0) ) )

766 
	`m≠pög_too_œrge
();

768 
•
->
u
.
m≠
->
ªf
--;

769 
	`‰ì_svÆue
(--
•
, "push_indexed_lvalue: 2");

770 
•
->
ty≥
 = 
T_LVALUE
;

771 
•
->
u
.
lvÆue
 = 
lv
;

775 i‡(!–(
•
 - 1)->
ty≥
 =
T_NUMBER
) )

777 
	`îr‹
("QTZ_SE:IllegalÅype of index\n");

780 
öd
 = (
•
 - 1)->
u
.
numbî
;

782 
•
->
ty≥
)

784 
T_STRING
:

786 
	`îr‹
("QTZ_SE:IllegalÅo make charÜvalue fromássigned string\n");

790 
T_BUFFER
:

792 i‡(
code
)

794 
öd
 = 
•
->
u
.
buf
->
size
 - ind;

796 i‡(
öd
 >()
•
->
u
.
buf
->
size
 || ind < 0)

798 
	`îr‹
("QTZ_SE:Buffer index out of bounds.\n");

800 
•
->
u
.
buf
->
ªf
--;

801 (--
•
)->
ty≥
 = 
T_LVALUE
;

802 
•
->
u
.
lvÆue
 = &
globÆ_lvÆue_byã
;

803 
globÆ_lvÆue_byã
.
subty≥
 = 1;

804 
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = (
•
 + 1)->u.
buf
->
ôem
 + 
öd
;

808 
T_ARRAY
:

810 i‡(
code
)

812 
öd
 = 
•
->
u
.
¨r
->
size
 - ind;

814 i‡(
öd
 >
•
->
u
.
¨r
->
size
 || ind < 0)

816 
	`îr‹
("QTZ_SE:Array index out of bounds.\n");

818 
•
->
u
.
¨r
->
ªf
--;

819 (--
•
)->
ty≥
 = 
T_LVALUE
;

820 
•
->
u
.
lvÆue
 = (• + 1)->u.
¨r
->
ôem
 + 
öd
;

825 i‡(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
)

827 
	`îr‹
("QTZ_SE:Value being indexed is zero.\n");

829 
	`îr‹
("QTZ_SE:C™nŸ index vÆuêo‡ty≥ '%s'.\n", 
	`ty≥_«me
(
•
->
ty≥
) );

832 
	}
}

838 
	slvÆue_ønge


840 
	möd1
, 
	möd2
, 
	msize
;

841 
svÆue_t
 *
	mow√r
;

842 } 
	gglobÆ_lvÆue_ønge
;

844 
svÆue_t
 
	gglobÆ_lvÆue_ønge_sv
 =

846 
T_LVALUE_RANGE
, 0,

852 
INLINE
 
	$push_lvÆue_ønge
(
code
)

854 
öd1
, 
öd2
;

855 
size
 = 0;

856 
svÆue_t
 *
lv
;

858 i‡(
•
->
ty≥
 =
T_LVALUE
)

860  (
lv
 = 
globÆ_lvÆue_ønge
.
ow√r
 = 
•
->
u
.
lvÆue
)->
ty≥
)

862 
T_ARRAY
:

863 
size
 = 
lv
->
u
.
¨r
->size;

865 
T_STRING
:

867 
size
 = 
	`SVALUE_STRLEN
(
lv
);

868 
	`u∆ök_°rög_svÆue
(
lv
);

871 
T_BUFFER
:

872 
size
 = 
lv
->
u
.
buf
->size;

875 
	`îr‹
("QTZ_SE:RangeÜvalue on illegalÅype\n");

876 
	`IF_DEBUG
(
size
 = 0);

881 
	`îr‹
("QTZ_SE:RangeÜvalue on illegalÅype\n");

884 i‡(!–(--
•
)->
ty≥
 =
T_NUMBER
) )

886 
	`îr‹
("QTZ_SE:Illegal 2nd indexÅypeÅoÑangeÜvalue\n");

889 
öd2
 = (
code
 &0x01Ë? (
size
 - 
•
->
u
.
numbî
): sp->u.number;

890 i‡(++
öd2
 < 0 || (öd2 > 
size
) )

892 
	`îr‹
("QTZ_SE:The 2nd indexÅoÑangeÜvalue must be >= -1ánd < sizeof(indexed value)\n");

895 i‡(!–(--
•
)->
ty≥
 =
T_NUMBER
) )

897 
	`îr‹
("QTZ_SE:Illegal 1st indexÅypeÅoÑangeÜvalue\n");

899 
öd1
 = (
code
 &0x10Ë? (
size
 - 
•
->
u
.
numbî
): sp->u.number;

901 i‡(
öd1
 < 0 || ind1 > 
size
)

903 
	`îr‹
("QTZ_SE:The 1st indexÅoÑangeÜvalue must be >= 0ánd <= sizeof(indexed value)\n");

906 
globÆ_lvÆue_ønge
.
öd1
 = ind1;

907 
globÆ_lvÆue_ønge
.
öd2
 = ind2;

908 
globÆ_lvÆue_ønge
.
size
 = size;

909 
•
->
ty≥
 = 
T_LVALUE
;

910 
•
->
u
.
lvÆue
 = &
globÆ_lvÆue_ønge_sv
;

911 
	}
}

917 
INLINE
 
	$c›y_lvÆue_ønge
(
svÆue_t
 *
‰om
)

919 
öd1
, 
öd2
, 
size
, 
fsize
;

920 
svÆue_t
 *
ow√r
;

922 
öd1
 = 
globÆ_lvÆue_ønge
.ind1;

923 
öd2
 = 
globÆ_lvÆue_ønge
.ind2;

924 
size
 = 
globÆ_lvÆue_ønge
.size;

925 
ow√r
 = 
globÆ_lvÆue_ønge
.owner;

927 
ow√r
->
ty≥
)

929 
T_ARRAY
:

931 
¨øy_t
 *
fv
, *
dv
;

932 
svÆue_t
 *
Âå
, *
d±r
;

933 i‡(
‰om
->
ty≥
 !
T_ARRAY
)

935 
	`îr‹
("QTZ_SE:IllegalÑhsÅoárrayÑangeÜvalue\n");

938 
fv
 = 
‰om
->
u
.
¨r
;

939 
Âå
 = 
fv
->
ôem
;

941 i‡–(
fsize
 = 
fv
->
size
Ë=
öd2
 - 
öd1
)

943 
d±r
 = (
ow√r
->
u
.
¨r
)->
ôem
 + 
öd1
;

945 i‡(
fv
->
ªf
 == 1)

948 
fsize
--)

950 
	`‰ì_svÆue
(
d±r
, "copy_lvalue_range : 1");

951 *
d±r
++ = *
Âå
++;

953 
	`‰ì_em±y_¨øy
(
fv
);

957 
fsize
--)

959 
	`assign_svÆue
(
d±r
++, 
Âå
++);

961 
fv
->
ªf
--;

966 
¨øy_t
 *
ﬁd_dv
 = 
ow√r
->
u
.
¨r
;

967 
svÆue_t
 *
ﬁd_d±r
 = 
ﬁd_dv
->
ôem
;

970 
dv
 = 
	`Æloˇã_em±y_¨øy
(
size
 - 
öd2
 + 
öd1
 + 
fsize
);

971 
d±r
 = 
dv
->
ôem
;

974 
öd1
--)

976 
	`assign_svÆue_no_‰ì
(
d±r
++, 
ﬁd_d±r
++);

979 i‡(
fv
->
ªf
 == 1)

981 
fsize
--)

983 *
d±r
++ = *
Âå
++;

985 
	`‰ì_em±y_¨øy
(
fv
);

989 
fsize
--)

991 
	`assign_svÆue_no_‰ì
(
d±r
++, 
Âå
++);

993 
fv
->
ªf
--;

997 
ﬁd_d±r
 = 
ﬁd_dv
->
ôem
 + 
öd2
;

998 
size
 -
öd2
;

1000 
size
--)

1002 
	`assign_svÆue_no_‰ì
(
d±r
++, 
ﬁd_d±r
++);

1004 
	`‰ì_¨øy
(
ﬁd_dv
);

1006 
ow√r
->
u
.
¨r
 = 
dv
;

1011 
T_STRING
:

1013 i‡(
‰om
->
ty≥
 !
T_STRING
)

1015 
	`îr‹
("QTZ_SE:IllegalÑhsÅo stringÑangeÜvalue.\n");

1018 i‡–(
fsize
 = 
	`SVALUE_STRLEN
(
‰om
ËË=
öd2
 - 
öd1
)

1023 
	`°∫˝y
(
ow√r
->
u
.
°rög
 + 
öd1
, 
‰om
->u.°rög, 
fsize
);

1027 *
tmp
, *
d°r
 = 
ow√r
->
u
.
°rög
;

1029 
ow√r
->
u
.
°rög
 = 
tmp
 = 
	`√w_°rög
(
size
 - 
öd2
 + 
öd1
 + 
fsize
, "copy_lvalue_range");

1030 i‡(
öd1
 >= 1)

1032 
	`°∫˝y
(
tmp
, 
d°r
, 
öd1
);

1033 
tmp
 +
öd1
;

1035 
	`°r˝y
(
tmp
, 
‰om
->
u
.
°rög
);

1036 
tmp
 +
fsize
;

1038 
size
 -
öd2
;

1039 i‡(
size
 >= 1)

1041 
	`°∫˝y
(
tmp
, 
d°r
 + 
öd2
, 
size
);

1042 *(
tmp
 + 
size
) = 0;

1044 
	`FREE_MSTR
(
d°r
);

1046 
	`‰ì_°rög_svÆue
(
‰om
);

1050 
T_BUFFER
:

1052 i‡(
‰om
->
ty≥
 !
T_BUFFER
)

1054 
	`îr‹
("QTZ_SE:IllegalÑhsÅo bufferÑangeÜvalue.\n");

1057 i‡–(
fsize
 = 
‰om
->
u
.
buf
->
size
Ë=
öd2
 - 
öd1
)

1059 
	`mem˝y
–(
ow√r
->
u
.
buf
)->
ôem
 + 
öd1
, 
‰om
->u.buf->ôem, 
fsize
);

1063 
buf„r_t
 *
b
;

1064 *
ﬁd_ôem
 = (
ow√r
->
u
.
buf
)->
ôem
;

1065 *
√w_ôem
;

1067 
b
 = 
	`Æloˇã_buf„r
(
size
 - 
öd2
 + 
öd1
 + 
fsize
);

1068 
√w_ôem
 = 
b
->
ôem
;

1069 i‡(
öd1
 >= 1)

1071 
	`mem˝y
(
b
->
ôem
, 
ﬁd_ôem
, 
öd1
);

1072 
√w_ôem
 +
öd1
;

1074 
	`mem˝y
(
√w_ôem
, 
‰om
->
u
.
buf
, 
fsize
);

1075 
√w_ôem
 +
fsize
;

1077 i‡–(
size
 -
öd2
) >= 1)

1079 
	`mem˝y
(
√w_ôem
, 
ﬁd_ôem
 + 
öd2
, 
size
);

1081 
	`‰ì_buf„r
(
ow√r
->
u
.
buf
);

1082 
ow√r
->
u
.
buf
 = 
b
;

1084 
	`‰ì_buf„r
(
‰om
->
u
.
buf
);

1088 
	}
}

1094 
INLINE
 
	$assign_lvÆue_ønge
(
svÆue_t
 *
‰om
)

1096 
öd1
, 
öd2
, 
size
, 
fsize
;

1097 
svÆue_t
 *
ow√r
;

1099 
öd1
 = 
globÆ_lvÆue_ønge
.ind1;

1100 
öd2
 = 
globÆ_lvÆue_ønge
.ind2;

1101 
size
 = 
globÆ_lvÆue_ønge
.size;

1102 
ow√r
 = 
globÆ_lvÆue_ønge
.owner;

1104 
ow√r
->
ty≥
)

1106 
T_ARRAY
:

1108 
¨øy_t
 *
fv
, *
dv
;

1109 
svÆue_t
 *
Âå
, *
d±r
;

1110 i‡(
‰om
->
ty≥
 !
T_ARRAY
)

1112 
	`îr‹
("QTZ_SE:IllegalÑhsÅoárrayÑangeÜvalue\n");

1115 
fv
 = 
‰om
->
u
.
¨r
;

1116 
Âå
 = 
fv
->
ôem
;

1118 i‡–(
fsize
 = 
fv
->
size
Ë=
öd2
 - 
öd1
)

1120 
d±r
 = (
ow√r
->
u
.
¨r
)->
ôem
 + 
öd1
;

1121 
fsize
--)

1123 
	`assign_svÆue
(
d±r
++, 
Âå
++);

1128 
¨øy_t
 *
ﬁd_dv
 = 
ow√r
->
u
.
¨r
;

1129 
svÆue_t
 *
ﬁd_d±r
 = 
ﬁd_dv
->
ôem
;

1132 
dv
 = 
	`Æloˇã_em±y_¨øy
(
size
 - 
öd2
 + 
öd1
 + 
fsize
);

1133 
d±r
 = 
dv
->
ôem
;

1136 
öd1
--)

1138 
	`assign_svÆue_no_‰ì
(
d±r
++, 
ﬁd_d±r
++);

1141 
fsize
--)

1143 
	`assign_svÆue_no_‰ì
(
d±r
++, 
Âå
++);

1147 
ﬁd_d±r
 = 
ﬁd_dv
->
ôem
 + 
öd2
;

1148 
size
 -
öd2
;

1150 
size
--)

1152 
	`assign_svÆue_no_‰ì
(
d±r
++, 
ﬁd_d±r
++);

1154 
	`‰ì_¨øy
(
ﬁd_dv
);

1156 
ow√r
->
u
.
¨r
 = 
dv
;

1161 
T_STRING
:

1163 i‡(
‰om
->
ty≥
 !
T_STRING
)

1165 
	`îr‹
("QTZ_SE:IllegalÑhsÅo stringÑangeÜvalue.\n");

1168 i‡–(
fsize
 = 
	`SVALUE_STRLEN
(
‰om
ËË=
öd2
 - 
öd1
)

1173 
	`°∫˝y
(
ow√r
->
u
.
°rög
 + 
öd1
, 
‰om
->u.°rög, 
fsize
);

1177 *
tmp
, *
d°r
 = 
ow√r
->
u
.
°rög
;

1179 
ow√r
->
u
.
°rög
 = 
tmp
 = 
	`√w_°rög
(
size
 - 
öd2
 + 
öd1
 + 
fsize
, "assign_lvalue_range");

1180 i‡(
öd1
 >= 1)

1182 
	`°∫˝y
(
tmp
, 
d°r
, 
öd1
);

1183 
tmp
 +
öd1
;

1185 
	`°r˝y
(
tmp
, 
‰om
->
u
.
°rög
);

1186 
tmp
 +
fsize
;

1188 
size
 -
öd2
;

1189 i‡(
size
 >= 1)

1191 
	`°∫˝y
(
tmp
, 
d°r
 + 
öd2
, 
size
);

1192 *(
tmp
 + 
size
) = 0;

1194 
	`FREE_MSTR
(
d°r
);

1199 
T_BUFFER
:

1201 i‡(
‰om
->
ty≥
 !
T_BUFFER
)

1203 
	`îr‹
("QTZ_SE:IllegalÑhsÅo bufferÑangeÜvalue.\n");

1206 i‡–(
fsize
 = 
‰om
->
u
.
buf
->
size
Ë=
öd2
 - 
öd1
)

1208 
	`mem˝y
–(
ow√r
->
u
.
buf
)->
ôem
 + 
öd1
, 
‰om
->u.buf->ôem, 
fsize
);

1212 
buf„r_t
 *
b
;

1213 *
ﬁd_ôem
 = (
ow√r
->
u
.
buf
)->
ôem
;

1214 *
√w_ôem
;

1216 
b
 = 
	`Æloˇã_buf„r
(
size
 - 
öd2
 + 
öd1
 + 
fsize
);

1217 
√w_ôem
 = 
b
->
ôem
;

1218 i‡(
öd1
 >= 1)

1220 
	`mem˝y
(
b
->
ôem
, 
ﬁd_ôem
, 
öd1
);

1221 
√w_ôem
 +
öd1
;

1223 
	`mem˝y
(
√w_ôem
, 
‰om
->
u
.
buf
, 
fsize
);

1224 
√w_ôem
 +
fsize
;

1226 i‡–(
size
 -
öd2
) >= 1)

1228 
	`mem˝y
(
√w_ôem
, 
ﬁd_ôem
 + 
öd2
, 
size
);

1230 
	`‰ì_buf„r
(
ow√r
->
u
.
buf
);

1231 
ow√r
->
u
.
buf
 = 
b
;

1236 
	}
}

1241 
INLINE
 
	$p›_n_ñems
(
n
)

1243 
	`DEBUG_CHECK1
(
n
 < 0, "pop_n_elems: %dÉlements.\n",Ç);

1244 
n
--)

1246 
	`p›_°ack
();

1248 
	}
}

1253 
INLINE
 
	$p›_2_ñems
()

1255 
	`‰ì_svÆue
(
•
--, "pop_2_elems");

1256 
	`DEBUG_CHECK
(
•
 < 
°¨t_of_°ack
, "Stack underflow.\n");

1257 
	`‰ì_svÆue
(
•
--, "pop_2_elems");

1258 
	}
}

1263 
INLINE
 
	$p›_3_ñems
()

1265 
	`‰ì_svÆue
(
•
--, "pop_3_elems");

1266 
	`‰ì_svÆue
(
•
--, "pop_3_elems");

1267 
	`DEBUG_CHECK
(
•
 < 
°¨t_of_°ack
, "Stack underflow.\n");

1268 
	`‰ì_svÆue
(
•
--, "pop_3_elems");

1269 
	}
}

1275 
	$bad_¨g
(
¨g
, 
ö°r
)

1277 
	`îr‹
("Badárgumíà%dÅÿ%s()\n", 
¨g
, 
	`gë_f_«me
(
ö°r
) );

1278 
	}
}

1284 
	$bad_¨gumít
(
svÆue_t
 *
vÆ
, 
ty≥
, 
¨g
, 
ö°r
)

1286 
outbuf„r_t
 
outbuf
;

1287 
Êag
 = 0;

1288 
j
 = 
TYPE_CODES_START
;

1289 
k
 = 0;

1291 
	`outbuf_zîo
(&
outbuf
);

1292 
	`outbuf_addv
(&
outbuf
, "QTZ_SE:Badárgumíà%dÅÿ%s%s\nEx≥˘ed: ", 
¨g
, 
	`gë_f_«me
(
ö°r
), (ö°∏< 
BASE
 ? "" : "()") );

1296 i‡(
ty≥
 &
j
)

1298 i‡(
Êag
)

1300 
	`outbuf_add
(&
outbuf
, " or ");

1304 
Êag
 = 1;

1306 
	`outbuf_add
(&
outbuf
, 
ty≥_«mes
[
k
]);

1308 
k
++;

1311 !–(
j
 <<1Ë&
TYPE_CODES_END
) );

1313 
	`outbuf_add
(&
outbuf
, " Got: ");

1314 
	`svÆue_to_°rög
(
vÆ
, &
outbuf
, 0, 0, 0);

1317 
	`outbuf_add
(&
outbuf
, ".\n");

1318 
	`outbuf_fix
(&
outbuf
);

1319 
	`îr‹_√eds_‰ì
(
outbuf
.
buf„r
);

1320 
	}
}

1326 
INLINE
 
	$push_c⁄åﬁ_°ack
(
‰köd
)

1328 i‡(
c•
 =&
c⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
 - 1])

1330 
too_dìp_îr‹
 = 1;

1331 
	`îr‹
("QTZ_SE:Too deepÑecursion.\n");

1333 
c•
++;

1334 
c•
->
ˇŒî_ty≥
 = caller_type;

1335 
c•
->
ob
 = 
cuºít_obje˘
;

1336 
c•
->
‰ameköd
 = 
‰köd
;

1337 
c•
->
¥ev_ob
 = 
¥evious_ob
;

1338 
c•
->
Â
 = fp;

1339 
c•
->
¥og
 = 
cuºít_¥og
;

1340 
c•
->
pc
 =Öc;

1341 
c•
->
fun˘i⁄_ödex_off£t
 = function_index_offset;

1342 
c•
->
v¨übÀ_ödex_off£t
 = variable_index_offset;

1343 
	}
}

1349 
	$p›_c⁄åﬁ_°ack
()

1351 
	`DEBUG_CHECK
(
c•
 =(
c⁄åﬁ_°ack
 - 1), "QTZ_SE:Popped out ofÅhe control stack\n");

1352 #ifde‡
PROFILE_FUNCTIONS


1353 i‡–(
c•
->
‰ameköd
 &
FRAME_MASK
Ë=
FRAME_FUNCTION
)

1355 
£cs
, 
u£cs
, 
d£cs
;

1356 
compûî_fun˘i⁄_t
 *
cÂ
 = &
cuºít_¥og
->
fun˘i⁄_èbÀ
[
c•
->
‰
.
èbÀ_ödex
];

1358 
	`gë_˝u_times
(&
£cs
, &
u£cs
);

1359 
d£cs
 = ( (
£cs
 - 
c•
->
íåy_£cs
Ë*1000000+
u£cs
 - c•->
íåy_u£cs
);

1360 
cÂ
->
£lf
 +
d£cs
;

1361 i‡(
c•
 !
c⁄åﬁ_°ack
)

1363 i‡––(
c•
 - 1)->
‰ameköd
 &
FRAME_MASK
Ë=
FRAME_FUNCTION
)

1365 
c•
->
¥og
->
fun˘i⁄_èbÀ
[(c• - 1)->
‰
.
èbÀ_ödex
].
chûdªn
 +
d£cs
;

1370 
cuºít_obje˘
 = 
c•
->
ob
;

1371 
cuºít_¥og
 = 
c•
->
¥og
;

1372 
¥evious_ob
 = 
c•
->
¥ev_ob
;

1373 
ˇŒî_ty≥
 = 
c•
->caller_type;

1374 
pc
 = 
c•
->pc;

1375 
Â
 = 
c•
->fp;

1376 
fun˘i⁄_ödex_off£t
 = 
c•
->function_index_offset;

1377 
v¨übÀ_ödex_off£t
 = 
c•
->variable_index_offset;

1378 
c•
--;

1379 
	}
}

1386 
INLINE
 
	$push_¨øy
(
¨øy_t
 *
v
)

1388 
v
->
ªf
++;

1389 
•
++;

1390 
•
->
ty≥
 = 
T_ARRAY
;

1391 
•
->
u
.
¨r
 = 
v
;

1392 
	}
}

1398 
INLINE
 
	$push_ª„d_¨øy
(
¨øy_t
 *
v
)

1400 
•
++;

1401 
•
->
ty≥
 = 
T_ARRAY
;

1402 
•
->
u
.
¨r
 = 
v
;

1403 
	}
}

1409 
INLINE
 
	$push_buf„r
(
buf„r_t
 *
b
)

1411 
b
->
ªf
++;

1412 
•
++;

1413 
•
->
ty≥
 = 
T_BUFFER
;

1414 
•
->
u
.
buf
 = 
b
;

1415 
	}
}

1421 
INLINE
 
	$push_ª„d_buf„r
(
buf„r_t
 *
b
)

1423 
•
++;

1424 
•
->
ty≥
 = 
T_BUFFER
;

1425 
•
->
u
.
buf
 = 
b
;

1426 
	}
}

1431 
INLINE
 
	$push_m≠pög
(
m≠pög_t
 *
m
)

1433 
m
->
ªf
++;

1434 
•
++;

1435 
•
->
ty≥
 = 
T_MAPPING
;

1436 
•
->
u
.
m≠
 = 
m
;

1437 
	}
}

1443 
INLINE
 
	$push_ª„d_m≠pög
(
m≠pög_t
 *
m
)

1445 
•
++;

1446 
•
->
ty≥
 = 
T_MAPPING
;

1447 
•
->
u
.
m≠
 = 
m
;

1448 
	}
}

1453 
INLINE
 
	$push_˛ass
(
¨øy_t
 *
v
)

1455 
v
->
ªf
++;

1456 
•
++;

1457 
•
->
ty≥
 = 
T_CLASS
;

1458 
•
->
u
.
¨r
 = 
v
;

1459 
	}
}

1465 
INLINE
 
	$push_ª„d_˛ass
(
¨øy_t
 *
v
, 
idx
)

1467 
•
++;

1468 
•
->
ty≥
 = 
T_CLASS
;

1469 
•
->
subty≥
 = 
idx
;

1470 
•
->
u
.
¨r
 = 
v
;

1471 
	}
}

1476 
INLINE
 
	$push_mÆlo˚d_°rög
(*
p
)

1478 
•
++;

1479 
•
->
ty≥
 = 
T_STRING
;

1480 
•
->
u
.
°rög
 = 
p
;

1481 
•
->
subty≥
 = 
STRING_MALLOC
;

1482 
	}
}

1488 
INLINE
 
	$push_sh¨ed_°rög
(*
p
)

1490 
•
++;

1491 
•
->
ty≥
 = 
T_STRING
;

1492 
•
->
u
.
°rög
 = 
p
;

1493 
•
->
subty≥
 = 
STRING_SHARED
;

1494 
	`ªf_°rög
(
p
);

1495 
	}
}

1500 
INLINE
 
	$push_c⁄°™t_°rög
(*
p
)

1502 
STACK_CHECK
;

1503 
•
->
ty≥
 = 
T_STRING
;

1504 
•
->
subty≥
 = 
STRING_CONSTANT
;

1505 
•
->
u
.
°rög
 = 
p
;

1506 
	}
}

1515 
INLINE
 
	$£tup_v¨übÀs
(
a˘uÆ
, 
loˇl
, 
num_¨g
)

1517 
tmp
;

1519 i‡–(
tmp
 = 
a˘uÆ
 - 
num_¨g
) > 0)

1522 
	`p›_n_ñems
(
tmp
);

1523 
	`push_undeföeds
(
loˇl
);

1528 
	`push_undeföeds
(
loˇl
 - 
tmp
);

1530 
Â
 = 
•
 - (
c•
->
num_loˇl_v¨übÀs
 = 
loˇl
 + 
num_¨g
) + 1;

1531 
	}
}

1537 
INLINE
 
	$£tup_v¨¨gs_v¨übÀs
(
a˘uÆ
, 
loˇl
, 
num_¨g
)

1539 
¨øy_t
 *
¨r
;

1540 i‡(
a˘uÆ
 >
num_¨g
)

1542 
n
 = 
a˘uÆ
 - 
num_¨g
 + 1;

1544 
¨r
 = 
	`Æloˇã_em±y_¨øy
(
n
);

1545 
n
--)

1547 
¨r
->
ôem
[
n
] = *
•
--;

1553 
	`push_undeföeds
(
num_¨g
 - 1-
a˘uÆ
);

1554 
¨r
 = &
the_nuŒ_¨øy
;

1556 
	`push_ª„d_¨øy
(
¨r
);

1557 
	`push_undeföeds
(
loˇl
);

1558 
Â
 = 
•
 - (
c•
->
num_loˇl_v¨übÀs
 = 
loˇl
 + 
num_¨g
) + 1;

1559 
	}
}

1565 
INLINE
 
compûî_fun˘i⁄_t
 *
	$£tup_√w_‰ame
(
ödex
)

1567 
ru¡ime_fun˘i⁄_u
 *
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
cuºít_¥og
, 
ödex
);

1568 
födex
;

1570 
fun˘i⁄_ödex_off£t
 = 
v¨übÀ_ödex_off£t
 = 0;

1572 
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
] &
NAME_INHERITED
)

1574 
off£t
 = 
func_íåy
->
öh
.offset;

1575 
fun˘i⁄_ödex_off£t
 +
cuºít_¥og
->
öhîô
[
off£t
].function_index_offset;

1576 
v¨übÀ_ödex_off£t
 +
cuºít_¥og
->
öhîô
[
off£t
].variable_index_offset;

1577 
cuºít_¥og
 = cuºít_¥og->
öhîô
[
off£t
].
¥og
;

1578 
ödex
 = 
func_íåy
->
öh
.
fun˘i⁄_ödex_off£t
;

1579 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
cuºít_¥og
, 
ödex
);

1582 
födex
 = 
func_íåy
->
def
.
f_ödex
;

1583 
c•
->
‰
.
èbÀ_ödex
 = 
födex
;

1584 #ifde‡
PROFILE_FUNCTIONS


1585 
	`gë_˝u_times
(&(
c•
->
íåy_£cs
), &(c•->
íåy_u£cs
) );

1586 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
födex
].
ˇŒs
++;

1590 i‡(
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
] &
NAME_TRUE_VARARGS
)

1592 
	`£tup_v¨¨gs_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
, 
func_íåy
->
def
.
num_loˇl
, func_íåy->def.
num_¨g
);

1596 
	`£tup_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
, 
func_íåy
->
def
.
num_loˇl
, func_íåy->def.
num_¨g
);

1598  &
cuºít_¥og
->
fun˘i⁄_èbÀ
[
födex
];

1599 
	}
}

1605 
INLINE
 
compûî_fun˘i⁄_t
 *
	$£tup_öhîôed_‰ame
(
ödex
)

1607 
ru¡ime_fun˘i⁄_u
 *
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
cuºít_¥og
, 
ödex
);

1608 
födex
;

1610 
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
] &
NAME_INHERITED
)

1612 
off£t
 = 
func_íåy
->
öh
.offset;

1613 
fun˘i⁄_ödex_off£t
 +
cuºít_¥og
->
öhîô
[
off£t
].function_index_offset;

1614 
v¨übÀ_ödex_off£t
 +
cuºít_¥og
->
öhîô
[
off£t
].variable_index_offset;

1615 
cuºít_¥og
 = cuºít_¥og->
öhîô
[
off£t
].
¥og
;

1616 
ödex
 = 
func_íåy
->
öh
.
fun˘i⁄_ödex_off£t
;

1617 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
cuºít_¥og
, 
ödex
);

1620 
födex
 = 
func_íåy
->
def
.
f_ödex
;

1621 
c•
->
‰
.
èbÀ_ödex
 = 
födex
;

1622 #ifde‡
PROFILE_FUNCTIONS


1623 
	`gë_˝u_times
(&(
c•
->
íåy_£cs
), &(c•->
íåy_u£cs
) );

1624 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
födex
].
ˇŒs
++;

1628 i‡(
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
] &
NAME_TRUE_VARARGS
)

1630 
	`£tup_v¨¨gs_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
, 
func_íåy
->
def
.
num_loˇl
, func_íåy->def.
num_¨g
);

1634 
	`£tup_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
, 
func_íåy
->
def
.
num_loˇl
, func_íåy->def.
num_¨g
);

1636  &
cuºít_¥og
->
fun˘i⁄_èbÀ
[
födex
];

1637 
	}
}

1643 #ifde‡
DEBUG


1648 
	$bªak_poöt
()

1652 i‡(!
°ack_ö_u£_as_ãmp‹¨y
 && 
•
 - 
Â
 - 
c•
->
num_loˇl_v¨übÀs
 + 1 != 0)

1654 
	`Áèl
("QTZ_SE:Bad stackÖointer.\n");

1656 
	}
}

1659 
¥ogøm_t
 
	gÁke_¥og
 =

1665 #ifde‡
DEBUG


1677 #ifde‡
COMPRESS_FUNCTION_TABLES


1699 
	gÁke_¥ogøm
 = 
F_RETURN
;

1709 
	$£tup_Áke_‰ame
(
fu≈å_t
 *
fun
)

1711 i‡(
c•
 =&
c⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
 - 1])

1713 
too_dìp_îr‹
 = 1;

1714 
	`îr‹
("QTZ_SE:Too deepÑecursion.\n");

1716 
c•
++;

1717 
c•
->
ˇŒî_ty≥
 = caller_type;

1718 
c•
->
‰ameköd
 = 
FRAME_FAKE
 | 
FRAME_OB_CHANGE
;

1719 
c•
->
‰
.
fu≈
 = 
fun
;

1720 
c•
->
ob
 = 
cuºít_obje˘
;

1721 
c•
->
¥ev_ob
 = 
¥evious_ob
;

1722 
c•
->
Â
 = fp;

1723 
c•
->
¥og
 = 
cuºít_¥og
;

1724 
c•
->
pc
 =Öc;

1725 
pc
 = (*Ë&
Áke_¥ogøm
;

1726 
c•
->
fun˘i⁄_ödex_off£t
 = function_index_offset;

1727 
c•
->
v¨übÀ_ödex_off£t
 = variable_index_offset;

1728 
ˇŒî_ty≥
 = 
ORIGIN_FUNCTION_POINTER
;

1729 
c•
->
num_loˇl_v¨übÀs
 = 0;

1730 
cuºít_¥og
 = &
Áke_¥og
;

1731 
¥evious_ob
 = 
cuºít_obje˘
;

1732 
cuºít_obje˘
 = 
fun
->
hdr
.
ow√r
;

1733 
	}
}

1738 
	$ªmove_Áke_‰ame
()

1740 
	`DEBUG_CHECK
(
c•
 =(
c⁄åﬁ_°ack
 - 1), "Popped out ofÅhe control stack\n");

1741 
cuºít_obje˘
 = 
c•
->
ob
;

1742 
cuºít_¥og
 = 
c•
->
¥og
;

1743 
¥evious_ob
 = 
c•
->
¥ev_ob
;

1744 
ˇŒî_ty≥
 = 
c•
->caller_type;

1745 
pc
 = 
c•
->pc;

1746 
Â
 = 
c•
->fp;

1747 
fun˘i⁄_ödex_off£t
 = 
c•
->function_index_offset;

1748 
v¨übÀ_ödex_off£t
 = 
c•
->variable_index_offset;

1749 
c•
--;

1750 
	}
}

1759 
	$mîge_¨g_li°s
(
num_¨g
, 
¨øy_t
 *
¨r
, 
°¨t
)

1761 
num_¨r_¨g
 = 
¨r
->
size
 - 
°¨t
;

1762 
svÆue_t
 *
•å
;

1764 i‡(
num_¨r_¨g
)

1766 
•å
 = (
•
 +
num_¨r_¨g
);

1767 i‡(
num_¨g
)

1771 
num_¨g
--)

1773 *
•å
 = *(•å - 
num_¨r_¨g
);

1774 
•å
--;

1777 
num_¨g
 = 
¨r
->
size
;

1778 --
num_¨g
 >
°¨t
)

1780 
	`assign_svÆue_no_‰ì
(
•å
--, &
¨r
->
ôem
[
num_¨g
]);

1783  (
•
 - 
•å
);

1785  
num_¨g
;

1786 
	}
}

1792 
	$cÂ_îr‹
(*
s
)

1794 
	`ªmove_Áke_‰ame
();

1795 
	`îr‹
(
s
);

1796 
	}
}

1802 
svÆue_t
 *
	$ˇŒ_fun˘i⁄_poöãr
(
fu≈å_t
 *
fu≈
, 
num_¨g
)

1804 
func_t
 *
€fun_èbÀ
 = 
efun_èbÀ
 - 
BASE
;

1806 i‡(
fu≈
->
hdr
.
ow√r
->
Êags
 &
O_DESTRUCTED
)

1808 
	`îr‹
("QTZ_SE:Ow√∏(/%sËo‡fun˘i⁄Öoöã∏i†de°ru˘ed.\n", 
fu≈
->
hdr
.
ow√r
->
«me
);

1811 
	`£tup_Áke_‰ame
(
fu≈
);

1812 #ifde‡
_USE_SWAP_H_


1813 i‡(
cuºít_obje˘
->
Êags
 &
O_SWAPPED
)

1815 
	`lﬂd_ob_‰om_sw≠
(
cuºít_obje˘
);

1819 
fu≈
->
hdr
.
ty≥
)

1821 
FP_SIMUL
:

1822 i‡(
fu≈
->
hdr
.
¨gs
)

1824 
	`check_f‹_de°r
(
fu≈
->
hdr
.
¨gs
);

1825 
num_¨g
 = 
	`mîge_¨g_li°s
“um_¨g, 
fu≈
->
hdr
.
¨gs
, 0);

1827 
	`ˇŒ_simul_efun
(
fu≈
->
f
.
simul
.
ödex
, 
num_¨g
);

1829 
FP_EFUN
:

1831 
i
, 
def
;

1833 
Â
 = 
•
 - 
num_¨g
 + 1;

1834 i‡(
fu≈
->
hdr
.
¨gs
)

1836 
	`check_f‹_de°r
(
fu≈
->
hdr
.
¨gs
);

1837 
num_¨g
 = 
	`mîge_¨g_li°s
“um_¨g, 
fu≈
->
hdr
.
¨gs
, 0);

1839 
i
 = 
fu≈
->
f
.
efun
.
ödex
;

1840 i‡(
num_¨g
 =
ö°rs
[
i
].
mö_¨g
 - 1 && ( (
def
 = in°rs[i].
DeÁu…
Ë!
DEFAULT_NONE
) )

1842 i‡(
def
 =
DEFAULT_THIS_OBJECT
)

1844 i‡(
cuºít_obje˘
 && !(cuºít_obje˘->
Êags
 &
O_DESTRUCTED
) )

1846 
	`push_obje˘
(
cuºít_obje˘
);

1850 *(++
•
Ë
c⁄°0
;

1855 (++
•
)->
ty≥
 = 
T_NUMBER
;

1856 
•
->
u
.
numbî
 = 
def
;

1858 
num_¨g
++;

1862 i‡(
num_¨g
 < 
ö°rs
[
i
].
mö_¨g
)

1864 
	`îr‹
("QTZ_SE:Toÿ„wárgumít†tÿefu¿%†öÉfu¿poöãr.\n", 
ö°rs
[
i
].
«me
);

1866 i‡(
num_¨g
 > 
ö°rs
[
i
].
max_¨g
 && instrs[i].max_arg != - 1)

1868 
	`îr‹
("QTZ_SE:Toÿm™yárgumít†tÿefu¿%†öÉfu¿poöãr.\n", 
ö°rs
[
i
].
«me
);

1875 
j
, 
n
 = 
num_¨g
;

1876 
°_num_¨g
 = 
num_¨g
;

1878 i‡(
n
 >4 || 
ö°rs
[
i
].
max_¨g
 == - 1)

1880 
n
 = 
ö°rs
[
i
].
mö_¨g
;

1883 
j
 = 0; j < 
n
; j++)

1885 
	`CHECK_TYPES
(
•
 - 
num_¨g
 + 
j
 + 1, 
ö°rs
[
i
].
ty≥
[j], j + 1, i);

1887 (*
€fun_èbÀ
[
i
]) ();

1889 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "call_function_pointer");

1890 i‡(
ö°rs
[
i
].
ªt_ty≥
 =
TYPE_NOVALUE
)

1892 
≠∂y_ªt_vÆue
 = 
c⁄°0
;

1896 
≠∂y_ªt_vÆue
 = *
•
--;

1898 
	`ªmove_Áke_‰ame
();

1899  &
≠∂y_ªt_vÆue
;

1902 
FP_LOCAL
 | 
FP_NOT_BINDABLE
:

1904 
compûî_fun˘i⁄_t
 *
func
;

1905 
Â
 = 
•
 - 
num_¨g
 + 1;

1907 i‡(
cuºít_obje˘
->
¥og
->
fun˘i⁄_Êags
[
fu≈
->
f
.
loˇl
.
ödex
] &
NAME_UNDEFINED
)

1909 
	`îr‹
("QTZ_SE:Undeföed fun˘i⁄: %s\n", 
	`fun˘i⁄_«me
(
cuºít_obje˘
->
¥og
, 
fu≈
->
f
.
loˇl
.
ödex
) );

1912 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
);

1913 
cuºít_¥og
 = 
fu≈
->
hdr
.
ow√r
->
¥og
;

1915 
ˇŒî_ty≥
 = 
ORIGIN_LOCAL
;

1917 i‡(
fu≈
->
hdr
.
¨gs
)

1919 
¨øy_t
 *
v
 = 
fu≈
->
hdr
.
¨gs
;

1921 
	`check_f‹_de°r
(
v
);

1922 
num_¨g
 = 
	`mîge_¨g_li°s
“um_¨g, 
v
, 0);

1925 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
;

1926 
func
 = 
	`£tup_√w_‰ame
(
fu≈
->
f
.
loˇl
.
ödex
);

1928 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
func
->
addªss
);

1931 
FP_FUNCTIONAL
:

1932 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

1934 
Â
 = 
•
 - 
num_¨g
 + 1;

1936 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNP
);

1937 
cuºít_¥og
 = 
fu≈
->
f
.
fun˘i⁄Æ
.
¥og
;

1938 
c•
->
‰
.
fu≈
 = funp;

1940 
ˇŒî_ty≥
 = 
ORIGIN_FUNCTIONAL
;

1942 i‡(
fu≈
->
hdr
.
¨gs
)

1944 
¨øy_t
 *
v
 = 
fu≈
->
hdr
.
¨gs
;

1946 
	`check_f‹_de°r
(
v
);

1947 
num_¨g
 = 
	`mîge_¨g_li°s
“um_¨g, 
v
, 0);

1950 
	`£tup_v¨übÀs
(
num_¨g
, 
fu≈
->
f
.
fun˘i⁄Æ
.
num_loˇl
, funp->f.functional.num_arg);

1952 
fun˘i⁄_ödex_off£t
 = 
fu≈
->
f
.
fun˘i⁄Æ
.
fio
;

1953 
v¨übÀ_ödex_off£t
 = 
fu≈
->
f
.
fun˘i⁄Æ
.
vio
;

1954 
	`ˇŒ_¥ogøm
(
fu≈
->
f
.
fun˘i⁄Æ
.
¥og
, fu≈->f.fun˘i⁄Æ.
off£t
);

1958 
	`îr‹
("QTZ_SE:Unsupported functionÖointerÅype.\n");

1960 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "call_function_pointer");

1961 
≠∂y_ªt_vÆue
 = *
•
--;

1962 
	`ªmove_Áke_‰ame
();

1963  &
≠∂y_ªt_vÆue
;

1964 
	}
}

1970 
svÆue_t
 *
	$ß„_ˇŒ_fun˘i⁄_poöãr
(
fu≈å_t
 *
fu≈
, 
num_¨g
)

1972 
îr‹_c⁄ãxt_t
 
ec⁄
;

1973 
svÆue_t
 *
ªt
;

1975 i‡(!
	`ßve_c⁄ãxt
(&
ec⁄
) )

1979 i‡(!
	`SETJMP
(
ec⁄
.
c⁄ãxt
) )

1981 
ªt
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
fu≈
, 
num_¨g
);

1985 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

1987 
	`p›_n_ñems
(
num_¨g
);

1988 
ªt
 = 0;

1990 
	`p›_c⁄ãxt
(&
ec⁄
);

1991  
ªt
;

1992 
	}
}

2009 
	$check_f‹_de°r
(
¨øy_t
 *
v
)

2011 
i
 = 
v
->
size
;

2013 
i
--)

2015 i‡–(
v
->
ôem
[
i
].
ty≥
 =
T_OBJECT
Ë&& (v->ôem[i].
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

2017 
	`‰ì_svÆue
(&
v
->
ôem
[
i
], "check_for_destr");

2018 
v
->
ôem
[
i
] = 
c⁄°0
;

2021 
	}
}

2033 
INLINE_STATIC
 
	$do_lo›_c⁄d_loˇl
()

2035 
svÆue_t
 *
s1
, *
s2
;

2036 
i
;

2038 
s1
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2039 
s2
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2040 
s1
->
ty≥
 | 
s2
->type)

2042 
T_NUMBER
:

2043 
i
 = 
s1
->
u
.
numbî
 < 
s2
->u.number;

2045 
T_REAL
:

2046 
i
 = 
s1
->
u
.
ªÆ
 < 
s2
->u.real;

2048 
T_STRING
:

2049 
i
 = (
	`°rcmp
(
s1
->
u
.
°rög
, 
s2
->u.string) < 0);

2051 
T_NUMBER
 | 
T_REAL
: i‡(
s1
->
ty≥
 == T_NUMBER)

2053 
i
 = 
s1
->
u
.
numbî
 < 
s2
->u.
ªÆ
;

2057 
i
 = 
s1
->
u
.
ªÆ
 < 
s2
->u.
numbî
;

2061 i‡(
s1
->
ty≥
 =
T_OBJECT
 && (s1->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

2063 
	`‰ì_obje˘
(
s1
->
u
.
ob
, "do_loop_cond:1");

2064 *
s1
 = 
c⁄°0
;

2066 i‡(
s2
->
ty≥
 =
T_OBJECT
 && (s2->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

2068 
	`‰ì_obje˘
(
s2
->
u
.
ob
, "do_loop_cond:2");

2069 *
s2
 = 
c⁄°0
;

2071 i‡(
s1
->
ty≥
 =
T_NUMBER
 && 
s2
->type == T_NUMBER)

2073 
i
 = 
s1
->
u
.
numbî
 < 
s2
->u.number;

2076 
s1
->
ty≥
)

2078 
T_NUMBER
:

2079 
T_REAL
:

2080 
	`îr‹
("QTZ_SE:2ndárgumentÅo < isÇotÇumeric whenÅhe 1st is.\n");

2081 
T_STRING
:

2082 
	`îr‹
("QTZ_SE:2ndárgumentÅo < isÇot string whenÅhe 1st is.\n");

2084 
	`îr‹
("QTZ_SE:Bad 1stárgumentÅo <.\n");

2086 
i
 = 0;

2088 i‡(
i
)

2090 
off£t
;

2092 
	`COPY_SHORT
(&
off£t
, 
pc
);

2093 
pc
 -
off£t
;

2097 
pc
 += 2;

2099 
	}
}

2105 
INLINE_STATIC
 
	$do_lo›_c⁄d_numbî
()

2107 
svÆue_t
 *
s1
;

2108 
i
;

2110 
s1
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2111 
	`LOAD_INT
(
i
, 
pc
);

2112 i‡(
s1
->
ty≥
 =
T_NUMBER
)

2114 i‡(
s1
->
u
.
numbî
 < 
i
)

2116 
off£t
;

2118 
	`COPY_SHORT
(&
off£t
, 
pc
);

2119 
pc
 -
off£t
;

2123 
pc
 += 2;

2126 i‡(
s1
->
ty≥
 =
T_REAL
)

2128 i‡(
s1
->
u
.
ªÆ
 < 
i
)

2130 
off£t
;

2132 
	`COPY_SHORT
(&
off£t
, 
pc
);

2133 
pc
 -
off£t
;

2137 
pc
 += 2;

2142 
	`îr‹
("QTZ_SE:Right side of < isáÇumber,Üeft side isÇot.\n");

2144 
	}
}

2156 #ifde‡
TRACE_CODE


2157 
	g¥evious_ö°ru˘i⁄
[60];

2158 
	g°ack_size
[60];

2159 *
	g¥evious_pc
[60];

2160 
	gœ°
;

2163 
	$evÆ_ö°ru˘i⁄
(*
p
)

2165 #ifde‡
DEBUG


2166 
num_¨g
;

2168 
i
, 
n
;

2169 
ªÆ
;

2170 
svÆue_t
 *
lvÆ
;

2171 
ö°ru˘i⁄
;

2172 #i‡
	`deföed
(
TRACE_CODE
Ë|| deföed(
OPCPROF
Ë|| deföed(
OPCPROF_2D
)

2173 
ªÆ_ö°ru˘i⁄
;

2175 
off£t
;

2176 
func_t
 *
€fun_èbÀ
 = 
efun_èbÀ
 - 
BASE
 + 
ONEARG_MAX
;

2177 #i‚de‡
DEBUG


2178 
func_t
 *
o€fun_èbÀ
 = 
efun_èbÀ
 - 
BASE
;

2180 
ö°r_t
 *
ö°rs2
 = 
ö°rs
 + 
ONEARG_MAX
;

2182 
	`IF_DEBUG
(
svÆue_t
 *
ex≥˘ed_°ack
);

2185 
c•
->
‰ameköd
 |
FRAME_EXTERNAL
;

2186 
pc
 = 
p
;

2189 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

2190 #i‡
	`deföed
(
TRACE_CODE
Ë|| deföed(
OPCPROF
Ë|| deföed(
OPCPROF_2D
)

2191 i‡(
ö°ru˘i⁄
 >
F_EFUN0
 && in°ru˘i⁄ <
F_EFUNV
)

2193 
ªÆ_ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
Ë+ 
ONEARG_MAX
;

2197 
ªÆ_ö°ru˘i⁄
 = 
ö°ru˘i⁄
;

2199 #ifde‡
TRACE_CODE


2200 
¥evious_ö°ru˘i⁄
[
œ°
] = 
ªÆ_ö°ru˘i⁄
;

2201 
¥evious_pc
[
œ°
] = 
pc
 - 1;

2202 
°ack_size
[
œ°
] = 
•
 - 
Â
 - 
c•
->
num_loˇl_v¨übÀs
;

2203 
œ°
 = (œ° + 1Ë% ( 
¥evious_ö°ru˘i⁄
 / () );

2205 #ifde‡
OPCPROF


2206 i‡(
ªÆ_ö°ru˘i⁄
 < 
BASE
)

2208 
›c_e›î
[
ªÆ_ö°ru˘i⁄
]++;

2212 
›c_efun
[
ªÆ_ö°ru˘i⁄
 - 
BASE
].
cou¡
++;

2215 #ifde‡
OPCPROF_2D


2216 i‡(
ªÆ_ö°ru˘i⁄
 < 
BASE
)

2218 i‡(
œ°_e›
)

2220 
›c_e›î_2d
[
œ°_e›
][
ªÆ_ö°ru˘i⁄
]++;

2222 
œ°_e›
 = 
ªÆ_ö°ru˘i⁄
;

2226 i‡(
œ°_e›
)

2228 
›c_e›î_2d
[
œ°_e›
][
BASE
]++;

2230 
œ°_e›
 = 
BASE
;

2234 i‡(!--
evÆ_co°
)

2236 
	`debug_mesßge
("obje˘ /%s:ÉvÆ_co°Åoÿbig %d\n", 
cuºít_obje˘
->
«me
, 
max_co°
);

2237 
evÆ_co°
 = 
max_co°
;

2238 
max_evÆ_îr‹
 = 1;

2239 
	`îr‹
("QTZ_SE:TooÜongÉvaluation. Executionáborted.\n");

2246 
ö°ru˘i⁄
)

2248 
F_PUSH
:

2250 
n
 = 
	`EXTRACT_UCHAR
(
pc
++);

2251 
n
--)

2253 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

2254 
i
 &
PUSH_WHAT
)

2256 
PUSH_STRING
:

2257 
	`DEBUG_CHECK1
–(
i
 &
PUSH_MASK
Ë>
cuºít_¥og
->
num_°rögs
, "string %d out ofÑange in F_STRING!\n", i &PUSH_MASK);

2258 
	`push_sh¨ed_°rög
(
cuºít_¥og
->
°rögs
[
i
 &
PUSH_MASK
]);

2260 
PUSH_LOCAL
:

2261 
lvÆ
 = 
Â
 + (
i
 &
PUSH_MASK
);

2262 
	`DEBUG_CHECK
–(
Â
 - 
lvÆ
Ë>
c•
->
num_loˇl_v¨übÀs
, "TriedÅoÖushÇon-existentÜocal\n");

2263 i‡–(
lvÆ
->
ty≥
 =
T_OBJECT
Ë&& (lvÆ->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

2265 *++
•
 = 
c⁄°0
;

2266 
	`assign_svÆue
(
lvÆ
, &
c⁄°0
);

2270 
	`push_svÆue
(
lvÆ
);

2273 
PUSH_GLOBAL
:

2274 
lvÆ
 = 
	`föd_vÆue
–(Ë–(
i
 &
PUSH_MASK
Ë+ 
v¨übÀ_ödex_off£t
) );

2275 i‡–(
lvÆ
->
ty≥
 =
T_OBJECT
Ë&& (lvÆ->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

2277 *++
•
 = 
c⁄°0
;

2278 
	`assign_svÆue
(
lvÆ
, &
c⁄°0
);

2282 
	`push_svÆue
(
lvÆ
);

2285 
PUSH_NUMBER
:

2286 
	`push_numbî
(
i
 &
PUSH_MASK
);

2291 
F_INC
:

2292 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
, "non-lvalueárgumentÅo ++\n");

2293 
lvÆ
 = (
•
--)->
u
.
lvÆue
;

2294 
lvÆ
->
ty≥
)

2296 
T_NUMBER
:

2297 
lvÆ
->
u
.
numbî
++;

2299 
T_REAL
:

2300 
lvÆ
->
u
.
ªÆ
++;

2302 
T_LVALUE_BYTE
:

2303 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && *globÆ_lvÆue_byã.
u
.
lvÆue_byã
 == ()255)

2305 
	`îr‹
("QTZ_SE:Strings cannot contain 0 bytes.\n");

2307 ++ *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
;

2310 
	`îr‹
("QTZ_SE:++ ofÇon-numericárgument\n");

2313 
F_WHILE_DEC
:

2315 
svÆue_t
 *
s
;

2317 
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2318 i‡(
s
->
ty≥
 =
T_NUMBER
)

2320 
i
 = 
s
->
u
.
numbî
--;

2322 i‡(
s
->
ty≥
 =
T_REAL
)

2324 
i
 = 
s
->
u
.
ªÆ
--;

2328 
	`îr‹
("QTZ_SE:-- ofÇon-numericárgument\n");

2330 i‡(
i
)

2332 
	`COPY_SHORT
(&
off£t
, 
pc
);

2333 
pc
 -
off£t
;

2337 
pc
 += 2;

2341 
F_LOCAL_LVALUE
:

2342 (++
•
)->
ty≥
 = 
T_LVALUE
;

2343 
•
->
u
.
lvÆue
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2345 
F_NUMBER
:

2346 
	`LOAD_INT
(
i
, 
pc
);

2347 
	`push_numbî
(
i
);

2349 
F_REAL
:

2350 
	`LOAD_FLOAT
(
ªÆ
, 
pc
);

2351 
	`push_ªÆ
(
ªÆ
);

2353 
F_BYTE
:

2354 
	`push_numbî
(
	`EXTRACT_UCHAR
(
pc
++) );

2356 
F_NBYTE
:

2357 
	`push_numbî
–- ( ()
	`EXTRACT_UCHAR
(
pc
++) ) );

2359 #ifde‡
F_JUMP_WHEN_NON_ZERO


2360 
F_JUMP_WHEN_NON_ZERO
:

2361 i‡–(
i
 = (
•
->
ty≥
 =
T_NUMBER
ËË&& (•->
u
.
numbî
 == 0) )

2363 
pc
 += 2;

2367 
	`COPY_SHORT
(&
off£t
, 
pc
);

2368 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

2370 i‡(
i
)

2372 
•
--;

2377 
	`p›_°ack
();

2381 
F_BRANCH
:

2383 
	`COPY_SHORT
(&
off£t
, 
pc
);

2384 
pc
 +
off£t
;

2386 
F_BBRANCH
:

2388 
	`COPY_SHORT
(&
off£t
, 
pc
);

2389 
pc
 -
off£t
;

2391 
F_BRANCH_NE
:

2392 
	`f_√
();

2393 i‡–(
•
--)->
u
.
numbî
)

2395 
	`COPY_SHORT
(&
off£t
, 
pc
);

2396 
pc
 +
off£t
;

2400 
pc
 += 2;

2403 
F_BRANCH_GE
:

2404 
	`f_ge
();

2405 i‡–(
•
--)->
u
.
numbî
)

2407 
	`COPY_SHORT
(&
off£t
, 
pc
);

2408 
pc
 +
off£t
;

2412 
pc
 += 2;

2415 
F_BRANCH_LE
:

2416 
	`f_À
();

2417 i‡–(
•
--)->
u
.
numbî
)

2419 
	`COPY_SHORT
(&
off£t
, 
pc
);

2420 
pc
 +
off£t
;

2424 
pc
 += 2;

2427 
F_BRANCH_EQ
:

2428 
	`f_eq
();

2429 i‡–(
•
--)->
u
.
numbî
)

2431 
	`COPY_SHORT
(&
off£t
, 
pc
);

2432 
pc
 +
off£t
;

2436 
pc
 += 2;

2439 
F_BBRANCH_LT
:

2440 
	`f_…
();

2441 i‡–(
•
--)->
u
.
numbî
)

2443 
	`COPY_SHORT
(&
off£t
, 
pc
);

2444 
pc
 -
off£t
;

2448 
pc
 += 2;

2451 
F_BRANCH_WHEN_ZERO
:

2453 i‡(
•
->
ty≥
 =
T_NUMBER
)

2455 i‡(!–(
•
--)->
u
.
numbî
) )

2457 
	`COPY_SHORT
(&
off£t
, 
pc
);

2458 
pc
 +
off£t
;

2464 
	`p›_°ack
();

2466 
pc
 += 2;

2468 
F_BRANCH_WHEN_NON_ZERO
:

2470 i‡(
•
->
ty≥
 =
T_NUMBER
)

2472 i‡(!–(
•
--)->
u
.
numbî
) )

2474 
pc
 += 2;

2480 
	`p›_°ack
();

2482 
	`COPY_SHORT
(&
off£t
, 
pc
);

2483 
pc
 +
off£t
;

2485 
F_BBRANCH_WHEN_ZERO
:

2487 i‡(
•
->
ty≥
 =
T_NUMBER
)

2489 i‡(!–(
•
--)->
u
.
numbî
) )

2491 
	`COPY_SHORT
(&
off£t
, 
pc
);

2492 
pc
 -
off£t
;

2498 
	`p›_°ack
();

2500 
pc
 += 2;

2502 
F_BBRANCH_WHEN_NON_ZERO
:

2504 i‡(
•
->
ty≥
 =
T_NUMBER
)

2506 i‡(!–(
•
--)->
u
.
numbî
) )

2508 
pc
 += 2;

2514 
	`p›_°ack
();

2516 
	`COPY_SHORT
(&
off£t
, 
pc
);

2517 
pc
 -
off£t
;

2519 
F_LOR
:

2521 i‡(
•
->
ty≥
 =
T_NUMBER
)

2523 i‡(!
•
->
u
.
numbî
)

2525 
pc
 += 2;

2526 
•
--;

2530 
	`COPY_SHORT
(&
off£t
, 
pc
);

2531 
pc
 +
off£t
;

2533 
F_LAND
:

2535 i‡(
•
->
ty≥
 =
T_NUMBER
)

2537 i‡(!
•
->
u
.
numbî
)

2539 
	`COPY_SHORT
(&
off£t
, 
pc
);

2540 
pc
 +
off£t
;

2543 
•
--;

2547 
	`p›_°ack
();

2549 
pc
 += 2;

2551 
F_LOOP_INCR
:

2555 
svÆue_t
 *
s
;

2557 
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2558 i‡(
s
->
ty≥
 =
T_NUMBER
)

2560 
s
->
u
.
numbî
++;

2562 i‡(
s
->
ty≥
 =
T_REAL
)

2564 
s
->
u
.
ªÆ
++;

2568 
	`îr‹
("++ ofÇon-numericárgument\n");

2571 i‡(*
pc
 =
F_LOOP_COND_LOCAL
)

2573 
pc
++;

2574 
	`do_lo›_c⁄d_loˇl
();

2576 i‡(*
pc
 =
F_LOOP_COND_NUMBER
)

2578 
pc
++;

2579 
	`do_lo›_c⁄d_numbî
();

2582 
F_LOOP_COND_LOCAL
:

2583 
	`do_lo›_c⁄d_loˇl
();

2585 
F_LOOP_COND_NUMBER
:

2586 
	`do_lo›_c⁄d_numbî
();

2588 
F_TRANSFER_LOCAL
:

2590 
svÆue_t
 *
s
;

2592 
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2593 
	`DEBUG_CHECK
–(
Â
 - 
s
Ë>
c•
->
num_loˇl_v¨übÀs
, "TriedÅoÖushÇon-existentÜocal\n");

2594 i‡–(
s
->
ty≥
 =
T_OBJECT
Ë&& (s->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

2596 *++
•
 = 
c⁄°0
;

2597 
	`‰ì_obje˘
(
s
->
u
.
ob
, "Transfer dested object");

2598 *
s
 = 
c⁄°0
;

2601 *++
•
 = *
s
;

2605 
s
->
ty≥
 = 
T_NUMBER
;

2608 
F_LOCAL
:

2610 
svÆue_t
 *
s
;

2612 
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2613 
	`DEBUG_CHECK
–(
Â
 - 
s
Ë>
c•
->
num_loˇl_v¨übÀs
, "TriedÅoÖushÇon-existentÜocal\n");

2619 i‡–(
s
->
ty≥
 =
T_OBJECT
Ë&& (s->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

2621 *++
•
 = 
c⁄°0
;

2622 
	`assign_svÆue
(
s
, &
c⁄°0
);

2626 
	`assign_svÆue_no_‰ì
(++
•
, 
s
);

2630 
F_LT
:

2631 
	`f_…
();

2633 
F_ADD
:

2635 
•
->
ty≥
)

2637 
T_BUFFER
:

2639 i‡(!–(
•
 - 1)->
ty≥
 =
T_BUFFER
) )

2641 
	`îr‹
("QTZ_SE:BadÅy≥árgumíàtÿ+. Had %†™d %s.\n", 
	`ty≥_«me
–(
•
 - 1)->
ty≥
),Åype_name(sp->type) );

2645 
buf„r_t
 *
b
;

2647 
b
 = 
	`Æloˇã_buf„r
(
•
->
u
.
buf
->
size
 + (sp - 1)->u.buf->size);

2648 
	`mem˝y
(
b
->
ôem
, (
•
 - 1)->
u
.
buf
->ôem, (• - 1)->u.buf->
size
);

2649 
	`mem˝y
(
b
->
ôem
 + (
•
 - 1)->
u
.
buf
->
size
, sp->u.buf->item, sp->u.buf->size);

2650 
	`‰ì_buf„r
–(
•
--)->
u
.
buf
);

2651 
	`‰ì_buf„r
(
•
->
u
.
buf
);

2652 
•
->
u
.
buf
 = 
b
;

2657 
T_NUMBER
:

2659  (--
•
)->
ty≥
)

2661 
T_NUMBER
:

2662 
•
->
u
.
numbî
 += (sp + 1)->u.number;

2663 
•
->
subty≥
 = 0;

2665 
T_REAL
:

2666 
•
->
u
.
ªÆ
 +(• + 1)->u.
numbî
;

2668 
T_STRING
:

2670 
buff
[20];

2672 
	`•rötf
(
buff
, "%d", (
•
 + 1)->
u
.
numbî
);

2673 
	`EXTEND_SVALUE_STRING
(
•
, 
buff
, "f_add: 2");

2677 
	`îr‹
("QTZ_SE:BadÅy≥árgumíàtÿ+. Had %†™d %s.\n", 
	`ty≥_«me
(
•
->
ty≥
),Åype_name( (sp + 1)->type) );

2682 
T_REAL
:

2684  (--
•
)->
ty≥
)

2686 
T_NUMBER
:

2687 
•
->
ty≥
 = 
T_REAL
;

2688 
•
->
u
.
ªÆ
 = sp->u.
numbî
 + (sp + 1)->u.real;

2690 
T_REAL
:

2691 
•
->
u
.
ªÆ
 += (sp + 1)->u.real;

2693 
T_STRING
:

2695 
buff
[40];

2697 
	`•rötf
(
buff
, "%f", (
•
 + 1)->
u
.
ªÆ
);

2698 
	`EXTEND_SVALUE_STRING
(
•
, 
buff
, "f_add: 2");

2702 
	`îr‹
("QTZ_SE:BadÅy≥árgumíàtÿ+. Had %†™d %s\n", 
	`ty≥_«me
(
•
->
ty≥
),Åype_name( (sp + 1)->type) );

2707 
T_ARRAY
:

2709 i‡(!–(
•
 - 1)->
ty≥
 =
T_ARRAY
) )

2711 
	`îr‹
("QTZ_SE:BadÅy≥árgumíàtÿ+. Had %†™d %s\n", 
	`ty≥_«me
–(
•
 - 1)->
ty≥
),Åype_name(sp->type) );

2716 (
•
 - 1)->
u
.
¨r
 = 
	`add_¨øy
( (sp - 1)->u.arr, sp->u.arr);

2717 
•
--;

2722 
T_MAPPING
:

2724 i‡–(
•
 - 1)->
ty≥
 =
T_MAPPING
)

2726 
m≠pög_t
 *
m≠
;

2728 
m≠
 = 
	`add_m≠pög
–(
•
 - 1)->
u
.map, sp->u.map);

2729 
	`‰ì_m≠pög
–(
•
--)->
u
.
m≠
);

2730 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

2731 
•
->
u
.
m≠
 = map;

2736 
	`îr‹
("QTZ_SE:BadÅy≥árgumíàtÿ+. Had %†™d %s\n", 
	`ty≥_«me
–(
•
 - 1)->
ty≥
),Åype_name(sp->type) );

2740 
T_STRING
:

2742  (
•
 - 1)->
ty≥
)

2744 
T_NUMBER
:

2746 
buff
[20];

2748 
	`•rötf
(
buff
, "%d", (
•
 - 1)->
u
.
numbî
);

2749 
	`SVALUE_STRING_ADD_LEFT
(
buff
, "f_add: 3");

2753 
T_REAL
:

2755 
buff
[40];

2757 
	`•rötf
(
buff
, "%f", (
•
 - 1)->
u
.
ªÆ
);

2758 
	`SVALUE_STRING_ADD_LEFT
(
buff
, "f_add: 3");

2762 
T_STRING
:

2764 
	`SVALUE_STRING_JOIN
(
•
 - 1, sp, "f_add: 1");

2765 
•
--;

2770 
	`îr‹
("QTZ_SE:BadÅy≥árgumíàtÿ+. Had %†™d %s\n", 
	`ty≥_«me
–(
•
 - 1)->
ty≥
),Åype_name(sp->type) );

2777 
	`îr‹
("QTZ_SE:BadÅy≥árgumíàtÿ+. Had %†™d %s.\n", 
	`ty≥_«me
–(
•
 - 1)->
ty≥
),Åype_name(sp->type) );

2781 
F_VOID_ADD_EQ
:

2782 
F_ADD_EQ
:

2783 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
, "non-lvalueárgumentÅo +=\n");

2784 
lvÆ
 = 
•
->
u
.
lvÆue
;

2785 
•
--;

2786 
lvÆ
->
ty≥
)

2788 
T_STRING
:

2789 i‡(
•
->
ty≥
 =
T_STRING
)

2791 
	`SVALUE_STRING_JOIN
(
lvÆ
, 
•
, "f_add_eq: 1");

2793 i‡(
•
->
ty≥
 =
T_NUMBER
)

2795 
buff
[20];

2797 
	`•rötf
(
buff
, "%d", 
•
->
u
.
numbî
);

2798 
	`EXTEND_SVALUE_STRING
(
lvÆ
, 
buff
, "f_add_eq: 2");

2800 i‡(
•
->
ty≥
 =
T_REAL
)

2802 
buff
[40];

2804 
	`•rötf
(
buff
, "%f", 
•
->
u
.
ªÆ
);

2805 
	`EXTEND_SVALUE_STRING
(
lvÆ
, 
buff
, "f_add_eq: 2");

2809 
	`bad_¨gumít
(
•
, 
T_STRING
 | 
T_NUMBER
 | 
T_REAL
, 2, 
ö°ru˘i⁄
);

2812 
T_NUMBER
:

2813 i‡(
•
->
ty≥
 =
T_NUMBER
)

2815 
lvÆ
->
u
.
numbî
 +
•
->u.number;

2818 i‡(
•
->
ty≥
 =
T_REAL
)

2820 
lvÆ
->
u
.
numbî
 +
•
->u.
ªÆ
;

2825 
	`îr‹
("QTZ_SE:Left hand side of += isáÇumber (or zero);Ñight side isÇotáÇumber.\n");

2828 
T_REAL
:

2829 i‡(
•
->
ty≥
 =
T_NUMBER
)

2831 
lvÆ
->
u
.
ªÆ
 +
•
->u.
numbî
;

2834 i‡(
•
->
ty≥
 =
T_REAL
)

2836 
lvÆ
->
u
.
ªÆ
 +
•
->u.real;

2841 
	`îr‹
("QTZ_SE:Left hand side of += isáÑeal (or zero);Ñight side isÇotáÇumber.\n");

2844 
T_BUFFER
:

2845 i‡(
•
->
ty≥
 !
T_BUFFER
)

2847 
	`bad_¨gumít
(
•
, 
T_BUFFER
, 2, 
ö°ru˘i⁄
);

2851 
buf„r_t
 *
b
;

2853 
b
 = 
	`Æloˇã_buf„r
(
lvÆ
->
u
.
buf
->
size
 + 
•
->u.buf->size);

2854 
	`mem˝y
(
b
->
ôem
, 
lvÆ
->
u
.
buf
->ôem,ÜvÆ->u.buf->
size
);

2855 
	`mem˝y
(
b
->
ôem
 + 
lvÆ
->
u
.
buf
->
size
, 
•
->u.buf->item, sp->u.buf->size);

2856 
	`‰ì_buf„r
(
•
->
u
.
buf
);

2857 
	`‰ì_buf„r
(
lvÆ
->
u
.
buf
);

2858 
lvÆ
->
u
.
buf
 = 
b
;

2861 
T_ARRAY
:

2862 i‡(
•
->
ty≥
 !
T_ARRAY
)

2864 
	`bad_¨gumít
(
•
, 
T_ARRAY
, 2, 
ö°ru˘i⁄
);

2869 
lvÆ
->
u
.
¨r
 = 
	`add_¨øy
÷vÆ->u.¨r, 
•
->u.arr);

2872 
T_MAPPING
:

2873 i‡(
•
->
ty≥
 !
T_MAPPING
)

2875 
	`bad_¨gumít
(
•
, 
T_MAPPING
, 2, 
ö°ru˘i⁄
);

2879 
	`abs‹b_m≠pög
(
lvÆ
->
u
.
m≠
, 
•
->u.map);

2880 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

2884 
T_LVALUE_BYTE
:

2886 
c
;

2888 i‡(
•
->
ty≥
 !
T_NUMBER
)

2890 
	`îr‹
("QTZ_SE:BadÑightÅypeÅo += of charÜvalue.\n");

2893 
c
 = *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 + 
•
->u.
numbî
;

2895 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && 
c
 == '\0')

2897 
	`îr‹
("QTZ_SE:Strings cannot contain 0 bytes.\n");

2899 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = 
c
;

2903 
	`bad_¨g
(1, 
ö°ru˘i⁄
);

2906 i‡(
ö°ru˘i⁄
 =
F_ADD_EQ
)

2909 
	`assign_svÆue_no_‰ì
(
•
, 
lvÆ
);

2917 
•
--;

2920 
F_AND
:

2921 
	`f_™d
();

2923 
F_AND_EQ
:

2924 
	`f_™d_eq
();

2926 
F_FUNCTION_CONSTRUCTOR
:

2927 
	`f_fun˘i⁄_c⁄°ru˘‹
();

2930 
F_FOREACH
:

2932 
Êags
 = 
	`EXTRACT_UCHAR
(
pc
++);

2934 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
++);

2935 i‡(
Êags
 &4)

2937 
	`CHECK_TYPES
(
•
, 
T_MAPPING
, 2, 
F_FOREACH
);

2939 
	`push_ª„d_¨øy
(
	`m≠pög_ödi˚s
(
•
->
u
.
m≠
) );

2941 (++
•
)->
ty≥
 = 
T_NUMBER
;

2942 
•
->
u
.
lvÆue
 = (• - 1)->u.
¨r
->
ôem
;

2943 
•
->
subty≥
 = (• - 1)->
u
.
¨r
->
size
;

2945 (++
•
)->
ty≥
 = 
T_LVALUE
;

2946 i‡(
Êags
 &2)

2948 
•
->
u
.
lvÆue
 = 
	`föd_vÆue
–(Ë(
	`EXTRACT_UCHAR
(
pc
++Ë+ 
v¨übÀ_ödex_off£t
) );

2952 
•
->
u
.
lvÆue
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2956 i‡(
•
->
ty≥
 =
T_STRING
)

2958 (++
•
)->
ty≥
 = 
T_NUMBER
;

2959 
•
->
u
.
lvÆue_byã
 = (*Ë–(• - 1)->u.
°rög
);

2960 
•
->
subty≥
 = 
	`SVALUE_STRLEN
(sp - 1);

2964 
	`CHECK_TYPES
(
•
, 
T_ARRAY
, 2, 
F_FOREACH
);

2966 (++
•
)->
ty≥
 = 
T_NUMBER
;

2967 
•
->
u
.
lvÆue
 = (• - 1)->u.
¨r
->
ôem
;

2968 
•
->
subty≥
 = (• - 1)->
u
.
¨r
->
size
;

2971 (++
•
)->
ty≥
 = 
T_LVALUE
;

2972 i‡(
Êags
 &1)

2974 
•
->
u
.
lvÆue
 = 
	`föd_vÆue
–(Ë(
	`EXTRACT_UCHAR
(
pc
++Ë+ 
v¨übÀ_ödex_off£t
) );

2978 
•
->
u
.
lvÆue
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2982 
F_NEXT_FOREACH
:

2983 i‡–(
•
 - 1)->
ty≥
 =
T_LVALUE
)

2986 i‡–(
•
 - 2)->
subty≥
--)

2988 
svÆue_t
 *
key
 = (
•
 - 2)->
u
.
lvÆue
++;

2989 
svÆue_t
 *
vÆue
 = 
	`föd_ö_m≠pög
–(
•
 - 4)->
u
.
m≠
, 
key
);

2991 
	`assign_svÆue
–(
•
 - 1)->
u
.
lvÆue
, 
key
);

2992 
	`assign_svÆue
(
•
->
u
.
lvÆue
, 
vÆue
);

2993 
	`COPY_SHORT
(&
off£t
, 
pc
);

2994 
pc
 -
off£t
;

3001 i‡–(
•
 - 1)->
subty≥
--)

3003 i‡–(
•
 - 2)->
ty≥
 =
T_STRING
)

3005 
	`‰ì_svÆue
(
•
->
u
.
lvÆue
, "foreach-string");

3006 
•
->
u
.
lvÆue
->
ty≥
 = 
T_NUMBER
;

3007 
•
->
u
.
lvÆue
->
subty≥
 = 0;

3008 
•
->
u
.
lvÆue
->u.
numbî
 = *–(• - 1)->u.
lvÆue_byã
)++;

3012 
	`assign_svÆue
(
•
->
u
.
lvÆue
, (sp - 1)->u.lvalue++);

3014 
	`COPY_SHORT
(&
off£t
, 
pc
);

3015 
pc
 -
off£t
;

3019 
pc
 += 2;

3021 
F_EXIT_FOREACH
:

3022 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
--);

3023 i‡–(
•
 - 1)->
ty≥
 =
T_LVALUE
)

3026 
•
 -= 3;

3027 
	`‰ì_¨øy
–(
•
--)->
u
.
¨r
);

3028 
	`‰ì_m≠pög
–(
•
--)->
u
.
m≠
);

3033 
•
 -= 2;

3034 i‡(
•
->
ty≥
 =
T_STRING
)

3036 
	`‰ì_°rög_svÆue
(
•
--);

3040 
	`‰ì_¨øy
–(
•
--)->
u
.
¨r
);

3045 
F_EXPAND_VARARGS
:

3047 
svÆue_t
 *
s
, *
t
;

3048 
¨øy_t
 *
¨r
;

3050 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

3051 
s
 = 
•
 - 
i
;

3053 i‡(
s
->
ty≥
 !
T_ARRAY
)

3055 
	`îr‹
("QTZ_SE:Item beingÉxpanded with ... isÇotánárray\n");

3058 
¨r
 = 
s
->
u
.arr;

3059 
n
 = 
¨r
->
size
;

3060 
num_v¨¨gs
 +
n
 - 1;

3061 i‡(!
n
)

3063 
t
 = 
s
;

3064 
t
 < 
•
)

3066 *
t
 = *(t + 1);

3067 
t
++;

3069 
•
--;

3071 i‡(
n
 == 1)

3073 
	`assign_svÆue_no_‰ì
(
s
, &
¨r
->
ôem
[0]);

3077 
t
 = 
•
;

3078 
•
 +
n
 - 1;

3079 
t
 > 
s
)

3081 *(
t
 + 
n
 - 1) = *t;

3082 
t
--;

3084 
t
 = 
s
 + 
n
 - 1;

3085 i‡(
¨r
->
ªf
 == 1)

3087 
	`mem˝y
(
s
, 
¨r
->
ôem
, 
n
 *(
svÆue_t
) );

3088 
	`‰ì_em±y_¨øy
(
¨r
);

3093 
n
--)

3095 
	`assign_svÆue_no_‰ì
(
t
--, &
¨r
->
ôem
[
n
]);

3099 
	`‰ì_¨øy
(
¨r
);

3103 
F_NEW_CLASS
:

3105 
¨øy_t
 *
˛
;

3106 
idx
 = 
	`EXTRACT_UCHAR
(
pc
++);

3108 
˛
 = 
	`Æloˇã_˛ass
(&
cuºít_¥og
->
˛as£s
[
idx
], 1);

3109 
	`push_ª„d_˛ass
(
˛
, 
idx
);

3112 
F_NEW_EMPTY_CLASS
:

3114 
¨øy_t
 *
˛
;

3115 
idx
 = 
	`EXTRACT_UCHAR
(
pc
++);

3117 
˛
 = 
	`Æloˇã_˛ass
(&
cuºít_¥og
->
˛as£s
[
idx
], 0);

3118 
	`push_ª„d_˛ass
(
˛
, 
idx
);

3121 
F_AGGREGATE
:

3123 
¨øy_t
 *
v
;

3125 
	`LOAD_SHORT
(
off£t
, 
pc
);

3126 
off£t
 +
num_v¨¨gs
;

3127 
num_v¨¨gs
 = 0;

3128 
v
 = 
	`Æloˇã_em±y_¨øy
–()
off£t
);

3132 
off£t
--)

3134 
v
->
ôem
[
off£t
] = *
•
--;

3136 (++
•
)->
ty≥
 = 
T_ARRAY
;

3137 
•
->
u
.
¨r
 = 
v
;

3140 
F_AGGREGATE_ASSOC
:

3142 
m≠pög_t
 *
m
;

3144 
	`LOAD_SHORT
(
off£t
, 
pc
);

3146 
off£t
 +
num_v¨¨gs
;

3147 
num_v¨¨gs
 = 0;

3148 
m
 = 
	`lﬂd_m≠pög_‰om_aggªg©e
(
•
 -
off£t
, offset);

3149 (++
•
)->
ty≥
 = 
T_MAPPING
;

3150 
•
->
u
.
m≠
 = 
m
;

3153 
F_ASSIGN
:

3154 #ifde‡
DEBUG


3155 i‡(
•
->
ty≥
 !
T_LVALUE
)

3157 
	`Áèl
("QTZ_SE:BadárgumentÅo F_ASSIGN\n");

3160 
•
->
u
.
lvÆue
->
ty≥
)

3162 
T_LVALUE_BYTE
:

3164 
c
;

3166 i‡–(
•
 - 1)->
ty≥
 !
T_NUMBER
)

3168 
	`îr‹
("QTZ_SE:IllegalÑhsÅo charÜvalue\n");

3172 
c
 = ( (
•
 - 1)->
u
.
numbî
 &0xff);

3173 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && 
c
 == '\0')

3175 
	`îr‹
("QTZ_SE:Strings cannot contain 0 bytes.\n");

3177 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = 
c
;

3182 
	`assign_svÆue
(
•
->
u
.
lvÆue
, sp - 1);

3184 
T_LVALUE_RANGE
:

3185 
	`assign_lvÆue_ønge
(
•
 - 1);

3188 
•
--;

3191 
F_VOID_ASSIGN_LOCAL
:

3192 i‡(
•
->
ty≥
 !
T_INVALID
)

3194 
lvÆ
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

3195 
	`‰ì_svÆue
(
lvÆ
, "F_VOID_ASSIGN_LOCAL");

3196 *
lvÆ
 = *
•
--;

3200 
•
--;

3201 
pc
++;

3204 
F_VOID_ASSIGN
:

3205 #ifde‡
DEBUG


3206 i‡(
•
->
ty≥
 !
T_LVALUE
)

3208 
	`Áèl
("QTZ_SE:BadárgumentÅo F_VOID_ASSIGN\n");

3211 
lvÆ
 = (
•
--)->
u
.
lvÆue
;

3212 i‡(
•
->
ty≥
 !
T_INVALID
)

3214 
lvÆ
->
ty≥
)

3216 
T_LVALUE_BYTE
:

3218 i‡(
•
->
ty≥
 !
T_NUMBER
)

3220 
	`îr‹
("QTZ_SE:IllegalÑhsÅo charÜvalue\n");

3224 
c
 = (
•
--)->
u
.
numbî
 &0xff;

3225 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && 
c
 == '\0')

3227 
	`îr‹
("QTZ_SE:Strings cannot contain 0 bytes.\n");

3229 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = 
c
;

3234 
T_LVALUE_RANGE
:

3236 
	`c›y_lvÆue_ønge
(
•
--);

3242 
	`‰ì_svÆue
(
lvÆ
, "F_VOID_ASSIGN : 3");

3243 *
lvÆ
 = *
•
--;

3249 
•
--;

3252 #ifde‡
DEBUG


3253 
F_BREAK_POINT
:

3254 
	`bªak_poöt
();

3257 
F_CALL_FUNCTION_BY_ADDRESS
:

3259 
compûî_fun˘i⁄_t
 *
fu≈
;

3261 
	`LOAD_SHORT
(
off£t
, 
pc
);

3262 
off£t
 +
fun˘i⁄_ödex_off£t
;

3269 
	`DEBUG_CHECK
(
off£t
 >
cuºít_obje˘
->
¥og
->
num_fun˘i⁄s_tŸÆ
, "Illegal function index\n");

3271 i‡(
cuºít_obje˘
->
¥og
->
fun˘i⁄_Êags
[
off£t
] &
NAME_UNDEFINED
)

3273 
	`îr‹
("QTZ_SE:Undeföed fun˘i⁄: %s\n", 
	`fun˘i⁄_«me
(
cuºít_obje˘
->
¥og
, 
off£t
) );

3276 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
);

3277 
cuºít_¥og
 = 
cuºít_obje˘
->
¥og
;

3279 
ˇŒî_ty≥
 = 
ORIGIN_LOCAL
;

3284 
c•
->
num_loˇl_v¨übÀs
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
num_v¨¨gs
;

3285 
num_v¨¨gs
 = 0;

3286 
fu≈
 = 
	`£tup_√w_‰ame
(
off£t
);

3287 
c•
->
pc
 =Öc;

3288 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
fu≈
->
addªss
;

3291 
F_CALL_INHERITED
:

3293 
öhîô_t
 *
ù
 = 
cuºít_¥og
->
öhîô
 + 
	`EXTRACT_UCHAR
(
pc
++);

3294 
¥ogøm_t
 *
ãmp_¥og
 = 
ù
->
¥og
;

3295 
compûî_fun˘i⁄_t
 *
fu≈
;

3297 
	`LOAD_SHORT
(
off£t
, 
pc
);

3299 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
);

3300 
cuºít_¥og
 = 
ãmp_¥og
;

3302 
ˇŒî_ty≥
 = 
ORIGIN_LOCAL
;

3304 
c•
->
num_loˇl_v¨übÀs
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
num_v¨¨gs
;

3305 
num_v¨¨gs
 = 0;

3307 
fun˘i⁄_ödex_off£t
 +
ù
->function_index_offset;

3308 
v¨übÀ_ödex_off£t
 +
ù
->variable_index_offset;

3310 
fu≈
 = 
	`£tup_öhîôed_‰ame
(
off£t
);

3311 
c•
->
pc
 =Öc;

3312 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
fu≈
->
addªss
;

3315 
F_COMPL
:

3316 i‡(
•
->
ty≥
 !
T_NUMBER
)

3318 
	`îr‹
("QTZ_SE:BadárgumentÅo ~\n");

3320 
•
->
u
.
numbî
 = ~sp->u.number;

3321 
•
->
subty≥
 = 0;

3323 
F_CONST0
:

3324 
	`push_numbî
(0);

3326 
F_CONST1
:

3327 
	`push_numbî
(1);

3329 
F_PRE_DEC
:

3330 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
, "non-lvalueárgumentÅo --\n");

3331 
lvÆ
 = 
•
->
u
.
lvÆue
;

3332 
lvÆ
->
ty≥
)

3334 
T_NUMBER
:

3335 
•
->
ty≥
 = 
T_NUMBER
;

3336 
•
->
subty≥
 = 0;

3337 
•
->
u
.
numbî
 = --(
lvÆ
->u.number);

3339 
T_REAL
:

3340 
•
->
ty≥
 = 
T_REAL
;

3341 
•
->
u
.
ªÆ
 = --(
lvÆ
->u.real);

3343 
T_LVALUE_BYTE
:

3344 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && *globÆ_lvÆue_byã.
u
.
lvÆue_byã
 == '\x1')

3346 
	`îr‹
("QTZ_SE:Strings cannot contain 0 bytes.\n");

3348 
•
->
ty≥
 = 
T_NUMBER
;

3349 
•
->
subty≥
 = 0;

3350 
•
->
u
.
numbî
 = --(*
globÆ_lvÆue_byã
.u.
lvÆue_byã
);

3353 
	`îr‹
("QTZ_SE:-- ofÇon-numericárgument\n");

3356 
F_DEC
:

3357 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
, "non-lvalueárgumentÅo --\n");

3358 
lvÆ
 = (
•
--)->
u
.
lvÆue
;

3359 
lvÆ
->
ty≥
)

3361 
T_NUMBER
:

3362 
lvÆ
->
u
.
numbî
--;

3364 
T_REAL
:

3365 
lvÆ
->
u
.
ªÆ
--;

3367 
T_LVALUE_BYTE
:

3368 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && *globÆ_lvÆue_byã.
u
.
lvÆue_byã
 == '\x1')

3370 
	`îr‹
("QTZ_SE:Strings cannot contain 0 bytes.\n");

3372 --(*
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
);

3375 
	`îr‹
("QTZ_SE:-- ofÇon-numericárgument\n");

3378 
F_DIVIDE
:

3380  (
•
 - 1)->
ty≥
 | sp->type)

3383 
T_NUMBER
:

3385 i‡(!(
•
--)->
u
.
numbî
)

3387 
	`îr‹
("QTZ_SE:Division by zero\n");

3389 
•
->
u
.
numbî
 /= (sp + 1)->u.number;

3393 
T_REAL
:

3395 i‡–(
•
--)->
u
.
ªÆ
 == 0.0)

3397 
	`îr‹
("QTZ_SE:Division by zero\n");

3399 
•
->
u
.
ªÆ
 /= (sp + 1)->u.real;

3403 
T_NUMBER
 | 
T_REAL
:

3405 i‡–(
•
--)->
ty≥
 =
T_NUMBER
)

3407 i‡(!–(
•
 + 1)->
u
.
numbî
) )

3409 
	`îr‹
("QTZ_SE:Division by zero\n");

3411 
•
->
u
.
ªÆ
 /(• + 1)->u.
numbî
;

3415 i‡–(
•
 + 1)->
u
.
ªÆ
 == 0.0)

3417 
	`îr‹
("QTZ_SE:Division by 0.0\n");

3419 
•
->
ty≥
 = 
T_REAL
;

3420 
•
->
u
.
ªÆ
 = sp->u.
numbî
 / (sp + 1)->u.real;

3427 i‡(!–(
•
 - 1)->
ty≥
 &(
T_NUMBER
 | 
T_REAL
) ) )

3429 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_REAL
, 1, 
ö°ru˘i⁄
);

3431 i‡(!(
•
->
ty≥
 &(
T_NUMBER
 | 
T_REAL
) ) )

3433 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
ö°ru˘i⁄
);

3439 
F_DIV_EQ
:

3440 
	`f_div_eq
();

3442 
F_EQ
:

3443 
	`f_eq
();

3445 
F_GE
:

3446 
	`f_ge
();

3448 
F_GT
:

3449 
	`f_gt
();

3451 
F_GLOBAL
:

3453 
svÆue_t
 *
s
;

3455 
s
 = 
	`föd_vÆue
–(Ë(
	`EXTRACT_UCHAR
(
pc
++Ë+ 
v¨übÀ_ödex_off£t
) );

3461 i‡–(
s
->
ty≥
 =
T_OBJECT
Ë&& (s->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

3463 *++
•
 = 
c⁄°0
;

3464 
	`assign_svÆue
(
s
, &
c⁄°0
);

3468 
	`assign_svÆue_no_‰ì
(++
•
, 
s
);

3472 
F_PRE_INC
:

3473 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
, "non-lvalueárgumentÅo ++\n");

3474 
lvÆ
 = 
•
->
u
.
lvÆue
;

3475 
lvÆ
->
ty≥
)

3477 
T_NUMBER
:

3478 
•
->
ty≥
 = 
T_NUMBER
;

3479 
•
->
subty≥
 = 0;

3480 
•
->
u
.
numbî
 = ++
lvÆ
->u.number;

3482 
T_REAL
:

3483 
•
->
ty≥
 = 
T_REAL
;

3484 
•
->
u
.
ªÆ
 = ++
lvÆ
->u.
numbî
;

3486 
T_LVALUE_BYTE
:

3487 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && *globÆ_lvÆue_byã.
u
.
lvÆue_byã
 == ()255)

3489 
	`îr‹
("QTZ_SE:Strings cannot contain 0 bytes.\n");

3491 
•
->
ty≥
 = 
T_NUMBER
;

3492 
•
->
subty≥
 = 0;

3493 
•
->
u
.
numbî
 = ++ * 
globÆ_lvÆue_byã
.u.
lvÆue_byã
;

3496 
	`îr‹
("QTZ_SE:++ ofÇon-numericárgument\n");

3499 
F_MEMBER
:

3501 
¨øy_t
 *
¨r
;

3503 i‡(
•
->
ty≥
 !
T_CLASS
)

3505 
	`îr‹
("QTZ_SE:TriedÅoÅakeá member of somethingÅhat isn'tá class.\n");

3507 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

3508 
¨r
 = 
•
->
u
.arr;

3509 i‡(
i
 >
¨r
->
size
)

3511 
	`îr‹
("QTZ_SE:Class hasÇo corresponding member.\n");

3513 
	`assign_svÆue_no_‰ì
(
•
, &
¨r
->
ôem
[
i
]);

3514 
	`‰ì_˛ass
(
¨r
);

3521 i‡(
•
->
ty≥
 =
T_OBJECT
 && (•->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

3523 
	`‰ì_obje˘
(
•
->
u
.
ob
, "F_MEMBER");

3524 
•
->
ty≥
 = 
T_NUMBER
;

3525 
•
->
u
.
numbî
 = 0;

3529 
F_MEMBER_LVALUE
:

3531 
¨øy_t
 *
¨r
;

3533 i‡(
•
->
ty≥
 !
T_CLASS
)

3535 
	`îr‹
("QTZ_SE:TriedÅoÅakeá member of somethingÅhat isn'tá class.\n");

3537 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

3538 
¨r
 = 
•
->
u
.arr;

3539 i‡(
i
 >
¨r
->
size
)

3541 
	`îr‹
("QTZ_SE:Class hasÇo corresponding member.\n");

3543 
•
->
ty≥
 = 
T_LVALUE
;

3544 
•
->
u
.
lvÆue
 = 
¨r
->
ôem
 + 
i
;

3545 
	`‰ì_˛ass
(
¨r
);

3548 
F_INDEX
:

3549 
•
->
ty≥
)

3551 
T_MAPPING
:

3553 
svÆue_t
 *
v
;

3554 
m≠pög_t
 *
m
;

3556 
v
 = 
	`föd_ö_m≠pög
(
m
 = 
•
->
u
.
m≠
, sp - 1);

3557 
	`assign_svÆue
(--
•
, 
v
);

3559 
	`‰ì_m≠pög
(
m
);

3562 
T_BUFFER
:

3564 i‡–(
•
 - 1)->
ty≥
 !
T_NUMBER
)

3566 
	`îr‹
("QTZ_SE:Buffer indexes must be integers.\n");

3569 
i
 = (
•
 - 1)->
u
.
numbî
;

3570 i‡–(
i
 > ()
•
->
u
.
buf
->
size
) || (i < 0) )

3572 
	`îr‹
("QTZ_SE:Buffer index out of bounds.\n");

3574 
i
 = 
•
->
u
.
buf
->
ôem
[i];

3575 
	`‰ì_buf„r
(
•
->
u
.
buf
);

3576 (--
•
)->
u
.
numbî
 = 
i
;

3577 
•
->
subty≥
 = 0;

3580 
T_STRING
:

3582 i‡–(
•
 - 1)->
ty≥
 !
T_NUMBER
)

3584 
	`îr‹
("QTZ_SE:String indexes must be integers.\n");

3586 
i
 = (
•
 - 1)->
u
.
numbî
;

3587 i‡–(
i
 > ()
	`SVALUE_STRLEN
(
•
) ) || (i < 0) )

3589 
	`îr‹
("QTZ_SE:String index out of bounds.\n");

3591 
i
 = ()
•
->
u
.
°rög
[i];

3592 
	`‰ì_°rög_svÆue
(
•
);

3593 (--
•
)->
u
.
numbî
 = 
i
;

3596 
T_ARRAY
:

3598 
¨øy_t
 *
¨r
;

3600 i‡–(
•
 - 1)->
ty≥
 !
T_NUMBER
)

3602 
	`îr‹
("QTZ_SE:Array indexes must be integers.\n");

3604 
i
 = (
•
 - 1)->
u
.
numbî
;

3605 i‡(
i
 < 0)

3607 
	`îr‹
("QTZ_SE:Array index must beÖositive or zero.\n");

3609 
¨r
 = 
•
->
u
.arr;

3610 i‡(
i
 >
¨r
->
size
)

3612 
	`îr‹
("QTZ_SE:Array index out of bounds.\n");

3614 
	`assign_svÆue_no_‰ì
(--
•
, &
¨r
->
ôem
[
i
]);

3615 
	`‰ì_¨øy
(
¨r
);

3619 i‡(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
)

3621 
	`îr‹
("QTZ_SE:Value being indexed is zero.\n");

3623 
	`îr‹
("QTZ_SE:C™nŸ index vÆuêo‡ty≥ '%s'.\n", 
	`ty≥_«me
(
•
->
ty≥
) );

3631 i‡(
•
->
ty≥
 =
T_OBJECT
 && (•->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

3633 
	`‰ì_obje˘
(
•
->
u
.
ob
, "F_INDEX");

3634 
•
->
ty≥
 = 
T_NUMBER
;

3635 
•
->
u
.
numbî
 = 0;

3638 
F_RINDEX
:

3639 
•
->
ty≥
)

3641 
T_BUFFER
:

3643 i‡–(
•
 - 1)->
ty≥
 !
T_NUMBER
)

3645 
	`îr‹
("QTZ_SE:Indexingá buffer withán illegalÅype.\n");

3648 
i
 = 
•
->
u
.
buf
->
size
 - (• - 1)->u.
numbî
;

3649 i‡–(
i
 > ()
•
->
u
.
buf
->
size
) || (i < 0) )

3651 
	`îr‹
("QTZ_SE:Buffer index out of bounds.\n");

3654 
i
 = 
•
->
u
.
buf
->
ôem
[i];

3655 
	`‰ì_buf„r
(
•
->
u
.
buf
);

3656 (--
•
)->
u
.
numbî
 = 
i
;

3657 
•
->
subty≥
 = 0;

3660 
T_STRING
:

3662 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

3663 i‡–(
•
 - 1)->
ty≥
 !
T_NUMBER
)

3665 
	`îr‹
("QTZ_SE:Indexingá string withán illegalÅype.\n");

3667 
i
 = 
Àn
 - (
•
 - 1)->
u
.
numbî
;

3668 i‡–(
i
 > 
Àn
) || (i < 0) )

3670 
	`îr‹
("QTZ_SE:String index out of bounds.\n");

3672 
i
 = ()
•
->
u
.
°rög
[i];

3673 
	`‰ì_°rög_svÆue
(
•
);

3674 (--
•
)->
u
.
numbî
 = 
i
;

3677 
T_ARRAY
:

3679 
¨øy_t
 *
¨r
 = 
•
->
u
.arr;

3681 i‡–(
•
 - 1)->
ty≥
 !
T_NUMBER
)

3683 
	`îr‹
("QTZ_SE:Indexingánárray withán illegalÅype\n");

3685 
i
 = 
¨r
->
size
 - (
•
 - 1)->
u
.
numbî
;

3686 i‡(
i
 < 0 || i >
¨r
->
size
)

3688 
	`îr‹
("QTZ_SE:Array index out of bounds.\n");

3690 
	`assign_svÆue_no_‰ì
(--
•
, &
¨r
->
ôem
[
i
]);

3691 
	`‰ì_¨øy
(
¨r
);

3695 i‡(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
)

3697 
	`îr‹
("QTZ_SE:Value being indexed is zero.\n");

3699 
	`îr‹
("QTZ_SE:C™nŸ index vÆuêo‡ty≥ '%s'.\n", 
	`ty≥_«me
(
•
->
ty≥
) );

3707 i‡(
•
->
ty≥
 =
T_OBJECT
 && (•->
u
.
ob
->
Êags
 &
O_DESTRUCTED
) )

3709 
	`‰ì_obje˘
(
•
->
u
.
ob
, "F_RINDEX");

3710 
•
->
ty≥
 = 
T_NUMBER
;

3711 
•
->
u
.
numbî
 = 0;

3714 #ifde‡
F_JUMP_WHEN_ZERO


3715 
F_JUMP_WHEN_ZERO
:

3716 i‡–(
i
 = (
•
->
ty≥
 =
T_NUMBER
ËË&& sp->
u
.
numbî
 == 0)

3718 
	`COPY_SHORT
(&
off£t
, 
pc
);

3719 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

3723 
pc
 += 2;

3725 i‡(
i
)

3727 
•
--;

3732 
	`p›_°ack
();

3736 #ifde‡
F_JUMP


3737 
F_JUMP
:

3738 
	`COPY_SHORT
(&
off£t
, 
pc
);

3739 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

3742 
F_LE
:

3743 
	`f_À
();

3745 
F_LSH
:

3746 
	`f_lsh
();

3748 
F_LSH_EQ
:

3749 
	`f_lsh_eq
();

3751 
F_MOD
:

3753 
	`CHECK_TYPES
(
•
 - 1, 
T_NUMBER
, 1, 
ö°ru˘i⁄
);

3754 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
ö°ru˘i⁄
);

3755 i‡–(
•
--)->
u
.
numbî
 == 0)

3757 
	`îr‹
("QTZ_SE:Modulus by zero.\n");

3759 
•
->
u
.
numbî
 %= (sp + 1)->u.number;

3762 
F_MOD_EQ
:

3763 
	`f_mod_eq
();

3765 
F_MULTIPLY
:

3767  (
•
 - 1)->
ty≥
 | sp->type)

3769 
T_NUMBER
:

3771 
•
--;

3772 
•
->
u
.
numbî
 *= (sp + 1)->u.number;

3776 
T_REAL
:

3778 
•
--;

3779 
•
->
u
.
ªÆ
 *= (sp + 1)->u.real;

3783 
T_NUMBER
 | 
T_REAL
:

3785 i‡–(--
•
)->
ty≥
 =
T_NUMBER
)

3787 
•
->
ty≥
 = 
T_REAL
;

3788 
•
->
u
.
ªÆ
 = sp->u.
numbî
 *(sp + 1)->u.real;

3792 
•
->
u
.
ªÆ
 *(• + 1)->u.
numbî
;

3797 
T_MAPPING
:

3799 
m≠pög_t
 *
m
;

3800 
m
 = 
	`compo£_m≠pög
–(
•
 - 1)->
u
.
m≠
, sp->u.map, 1);

3801 
	`p›_2_ñems
();

3802 (++
•
)->
ty≥
 = 
T_MAPPING
;

3803 
•
->
u
.
m≠
 = 
m
;

3809 i‡(!–(
•
 - 1)->
ty≥
 &(
T_NUMBER
 | 
T_REAL
 | 
T_MAPPING
) ) )

3811 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_REAL
 | 
T_MAPPING
, 1, 
ö°ru˘i⁄
);

3813 i‡(!(
•
->
ty≥
 &(
T_NUMBER
 | 
T_REAL
 | 
T_MAPPING
) ) )

3815 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
 | 
T_MAPPING
, 2, 
ö°ru˘i⁄
);

3817 
	`îr‹
("QTZ_SE:ArgsÅo *áreÇot compatible.\n");

3822 
F_MULT_EQ
:

3823 
	`f_mu…_eq
();

3825 
F_NE
:

3826 
	`f_√
();

3828 
F_NEGATE
:

3829 i‡(
•
->
ty≥
 =
T_NUMBER
)

3831 
•
->
subty≥
 = 0;

3832 
•
->
u
.
numbî
 = - sp->u.number;

3834 i‡(
•
->
ty≥
 =
T_REAL
)

3836 
•
->
u
.
ªÆ
 = - sp->u.real;

3840 
	`îr‹
("QTZ_SE:BadárgumentÅo unary minus\n");

3843 
F_NOT
:

3844 i‡(
•
->
ty≥
 =
T_NUMBER
)

3846 
•
->
subty≥
 = 0;

3847 
•
->
u
.
numbî
 = !sp->u.number;

3851 
	`assign_svÆue
(
•
, &
c⁄°0
);

3854 
F_OR
:

3855 
	`f_‹
();

3857 
F_OR_EQ
:

3858 
	`f_‹_eq
();

3860 
F_POP_VALUE
:

3861 
	`p›_°ack
();

3863 
F_POST_DEC
:

3864 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
, "non-lvalueárgumentÅo --\n");

3865 
lvÆ
 = 
•
->
u
.
lvÆue
;

3866 
lvÆ
->
ty≥
)

3868 
T_NUMBER
:

3869 
•
->
ty≥
 = 
T_NUMBER
;

3870 
•
->
subty≥
 = 0;

3871 
•
->
u
.
numbî
 = 
lvÆ
->u.number--;

3873 
T_REAL
:

3874 
•
->
ty≥
 = 
T_REAL
;

3875 
•
->
u
.
ªÆ
 = 
lvÆ
->u.real--;

3877 
T_LVALUE_BYTE
:

3878 
•
->
ty≥
 = 
T_NUMBER
;

3879 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && *globÆ_lvÆue_byã.
u
.
lvÆue_byã
 == '\x1')

3881 
	`îr‹
("QTZ_SE:Strings cannot contain 0 bytes.\n");

3883 
•
->
u
.
numbî
 = (*
globÆ_lvÆue_byã
.u.
lvÆue_byã
)--;

3886 
	`îr‹
("QTZ_SE:-- ofÇon-numericárgument\n");

3889 
F_POST_INC
:

3890 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
, "non-lvalueárgumentÅo ++\n");

3891 
lvÆ
 = 
•
->
u
.
lvÆue
;

3892 
lvÆ
->
ty≥
)

3894 
T_NUMBER
:

3895 
•
->
ty≥
 = 
T_NUMBER
;

3896 
•
->
subty≥
 = 0;

3897 
•
->
u
.
numbî
 = 
lvÆ
->u.number++;

3899 
T_REAL
:

3900 
•
->
ty≥
 = 
T_REAL
;

3901 
•
->
u
.
ªÆ
 = 
lvÆ
->u.real++;

3903 
T_LVALUE_BYTE
:

3904 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && *globÆ_lvÆue_byã.
u
.
lvÆue_byã
 == ()255)

3906 
	`îr‹
("QTZ_SE:Strings cannot contain 0 bytes.\n");

3908 
•
->
ty≥
 = 
T_NUMBER
;

3909 
•
->
u
.
numbî
 = (*
globÆ_lvÆue_byã
.u.
lvÆue_byã
)++;

3912 
	`îr‹
("QTZ_SE:++ ofÇon-numericárgument\n");

3915 
F_GLOBAL_LVALUE
:

3916 (++
•
)->
ty≥
 = 
T_LVALUE
;

3917 
•
->
u
.
lvÆue
 = 
	`föd_vÆue
–(Ë(
	`EXTRACT_UCHAR
(
pc
++Ë+ 
v¨übÀ_ödex_off£t
) );

3919 
F_INDEX_LVALUE
:

3920 
	`push_ödexed_lvÆue
(0);

3922 
F_RINDEX_LVALUE
:

3923 
	`push_ödexed_lvÆue
(1);

3925 
F_NN_RANGE_LVALUE
:

3926 
	`push_lvÆue_ønge
(0x00);

3928 
F_RN_RANGE_LVALUE
:

3929 
	`push_lvÆue_ønge
(0x10);

3931 
F_RR_RANGE_LVALUE
:

3932 
	`push_lvÆue_ønge
(0x11);

3934 
F_NR_RANGE_LVALUE
:

3935 
	`push_lvÆue_ønge
(0x01);

3937 
F_NN_RANGE
:

3938 
	`f_ønge
(0x00);

3940 
F_RN_RANGE
:

3941 
	`f_ønge
(0x10);

3943 
F_NR_RANGE
:

3944 
	`f_ønge
(0x01);

3946 
F_RR_RANGE
:

3947 
	`f_ønge
(0x11);

3949 
F_NE_RANGE
:

3950 
	`f_exåa˘_ønge
(0);

3952 
F_RE_RANGE
:

3953 
	`f_exåa˘_ønge
(1);

3955 
F_RETURN_ZERO
:

3960 
	`p›_n_ñems
(
c•
->
num_loˇl_v¨übÀs
);

3961 
•
++;

3962 
	`DEBUG_CHECK
(
•
 !
Â
, "Bad stackát F_RETURN\n");

3963 *
•
 = 
c⁄°0
;

3964 
	`p›_c⁄åﬁ_°ack
();

3966 i‡(
c•
[1].
‰ameköd
 &
FRAME_EXTERNAL
)

3973 
F_RETURN
:

3975 
svÆue_t
 
sv
;

3977 i‡(
c•
->
num_loˇl_v¨übÀs
)

3979 
sv
 = *
•
--;

3983 
	`p›_n_ñems
(
c•
->
num_loˇl_v¨übÀs
);

3984 
•
++;

3985 
	`DEBUG_CHECK
(
•
 !
Â
, "Bad stackát F_RETURN\n");

3986 *
•
 = 
sv
;

3989 
	`p›_c⁄åﬁ_°ack
();

3991 i‡(
c•
[1].
‰ameköd
 &
FRAME_EXTERNAL
)

3997 
F_RSH
:

3998 
	`f_rsh
();

4000 
F_RSH_EQ
:

4001 
	`f_rsh_eq
();

4003 
F_SSCANF
:

4004 
	`f_ssˇnf
();

4006 
F_STRING
:

4007 
	`LOAD_SHORT
(
off£t
, 
pc
);

4008 
	`DEBUG_CHECK1
(
off£t
 >
cuºít_¥og
->
num_°rögs
, "string %d out ofÑange in F_STRING!\n", offset);

4009 
	`push_sh¨ed_°rög
(
cuºít_¥og
->
°rögs
[
off£t
]);

4011 
F_SHORT_STRING
:

4012 
	`DEBUG_CHECK1
(
	`EXTRACT_UCHAR
(
pc
Ë>
cuºít_¥og
->
num_°rögs
, "string %d out ofÑange in F_STRING!\n", EXTRACT_UCHAR(pc) );

4013 
	`push_sh¨ed_°rög
(
cuºít_¥og
->
°rögs
[
	`EXTRACT_UCHAR
(
pc
++)]);

4015 
F_SUBTRACT
:

4017 
i
 = (
•
--)->
ty≥
;

4018 
i
 | 
•
->
ty≥
)

4020 
T_NUMBER
:

4021 
•
->
u
.
numbî
 -= (sp + 1)->u.number;

4024 
T_REAL
:

4025 
•
->
u
.
ªÆ
 -= (sp + 1)->u.real;

4028 
T_NUMBER
 | 
T_REAL
: i‡(
•
->
ty≥
 == T_REAL)

4030 
•
->
u
.
ªÆ
 -(• + 1)->u.
numbî
;

4034 
•
->
ty≥
 = 
T_REAL
;

4035 
•
->
u
.
ªÆ
 = sp->u.
numbî
 - (sp + 1)->u.real;

4039 
T_ARRAY
:

4045 
•
->
u
.
¨r
 = 
	`subåa˘_¨øy
(sp->u.arr, (sp + 1)->u.arr);

4050 i‡(!–(
•
++)->
ty≥
 &(
T_NUMBER
 | 
T_REAL
 | 
T_ARRAY
) ) )

4052 
	`îr‹
("QTZ_SE:BadÜeftÅypeÅo -.\n");

4054 i‡(!(
•
->
ty≥
 &(
T_NUMBER
 | 
T_REAL
 | 
T_ARRAY
) ) )

4056 
	`îr‹
("QTZ_SE:BadÑightÅypeÅo -.\n");

4060 
	`îr‹
("QTZ_SE:ArgumentsÅo - doÇot have compatibleÅypes.\n");

4065 
F_SUB_EQ
:

4066 
	`f_sub_eq
();

4068 
F_SIMUL_EFUN
:

4070 
ödex
;

4071 
num_¨gs
;

4073 
	`LOAD_SHORT
(
ödex
, 
pc
);

4074 
num_¨gs
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
num_v¨¨gs
;

4075 
num_v¨¨gs
 = 0;

4076 
	`ˇŒ_simul_efun
(
ödex
, 
num_¨gs
);

4079 
F_SWITCH
:

4080 
	`f_swôch
();

4082 
F_XOR
:

4083 
	`f_x‹
();

4085 
F_XOR_EQ
:

4086 
	`f_x‹_eq
();

4088 
F_CATCH
:

4094 –(*Ë&
off£t
)[0] = 
pc
[0];

4095 –(*Ë&
off£t
)[1] = 
pc
[1];

4096 
off£t
 = 
pc
 + off£à- 
cuºít_¥og
->
¥ogøm
;

4097 
pc
 += 2;

4099 
	`do_ˇtch
(
pc
);

4101 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

4105 
F_END_CATCH
:

4107 
	`‰ì_svÆue
(&
ˇtch_vÆue
, "F_END_CATCH");

4108 
ˇtch_vÆue
 = 
c⁄°0
;

4110 
	`p›_c⁄åﬁ_°ack
();

4111 
	`push_numbî
(0);

4114 
F_TIME_EXPRESSION
:

4116 
£c
, 
u£c
;

4118 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
++);

4119 
	`gë_u£c_˛ock
(&
£c
, &
u£c
);

4120 
	`push_numbî
(
£c
);

4121 
	`push_numbî
(
u£c
);

4124 
F_END_TIME_EXPRESSION
:

4126 
£c
, 
u£c
;

4128 
	`gë_u£c_˛ock
(&
£c
, &
u£c
);

4129 
u£c
 = (
£c
 - (
•
 - 1)->
u
.
numbî
) *1000000+(usec - sp->u.number);

4130 
•
 -= 2;

4131 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
--);

4132 
	`push_numbî
(
u£c
);

4135 
	#In°ru˘i⁄
 (
ö°ru˘i⁄
 + 
ONEARG_MAX
)

	)

4136 #ifde‡
DEBUG


4137 
	#CALL_THE_EFUN
 
ˇŒ_the_efun


	)

4139 
	#CALL_THE_EFUN
 \

4141 
svÆue_t
 * 
ex≥˘_•
; \

4142 i‡(
ö°rs2
[
ö°ru˘i⁄
].
ªt_ty≥
 =
TYPE_NOVALUE
) \

4143 
ex≥˘_•
 = 
•
 - 
°_num_¨g
; \

4145 
ex≥˘_•
 = 
•
 - 
°_num_¨g
 + 1; \

4147 (*
€fun_èbÀ
[
ö°ru˘i⁄
])(); \

4148 i‡(
ex≥˘_•
 !
•
) \

4150 
	`debug_mesßge
("Bad sècká·îÉfu¿%s\n", 
ö°rs2
[
ö°ru˘i⁄
].
«me
); \

4153 

	)

4155 
F_EFUN0
:

4156 
°_num_¨g
 = 0;

4157 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

4158 
CALL_THE_EFUN
;

4159 
F_EFUN1
:

4160 
°_num_¨g
 = 1;

4161 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

4162 
	`CHECK_TYPES
(
•
, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[0], 1, 
In°ru˘i⁄
);

4163 
CALL_THE_EFUN
;

4164 
F_EFUN2
:

4165 
°_num_¨g
 = 2;

4166 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

4167 
	`CHECK_TYPES
(
•
 - 1, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[0], 1, 
In°ru˘i⁄
);

4168 
	`CHECK_TYPES
(
•
, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[1], 2, 
In°ru˘i⁄
);

4169 
CALL_THE_EFUN
;

4170 
F_EFUN3
:

4171 
°_num_¨g
 = 3;

4172 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

4173 
	`CHECK_TYPES
(
•
 - 2, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[0], 1, 
In°ru˘i⁄
);

4174 
	`CHECK_TYPES
(
•
 - 1, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[1], 2, 
In°ru˘i⁄
);

4175 
	`CHECK_TYPES
(
•
, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[2], 3, 
In°ru˘i⁄
);

4176 
CALL_THE_EFUN
;

4177 
F_EFUNV
:

4179 
i
, 
num
;

4180 
°_num_¨g
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
num_v¨¨gs
;

4181 
num_v¨¨gs
 = 0;

4182 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

4183 
num
 = 
ö°rs2
[
ö°ru˘i⁄
].
mö_¨g
;

4184 
i
 = 1; i <
num
; i++)

4186 
	`CHECK_TYPES
(
•
 - 
°_num_¨g
 + 
i
, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[ò- 1], i, 
In°ru˘i⁄
);

4188 
CALL_THE_EFUN
;

4192 
°_num_¨g
 = 1;

4193 
	`CHECK_TYPES
(
•
, 
ö°rs
[
ö°ru˘i⁄
].
ty≥
[0], 1, instruction);

4194 #i‚de‡
DEBUG


4196 
svÆue_t
 *
ex≥˘_•
;

4197 i‡(
ö°rs
[
ö°ru˘i⁄
].
ªt_ty≥
 =
TYPE_NOVALUE
)

4199 
ex≥˘_•
 = 
•
 - 
°_num_¨g
;

4203 
ex≥˘_•
 = 
•
 - 
°_num_¨g
 + 1;

4206 (*
o€fun_èbÀ
[
ö°ru˘i⁄
]) ();

4207 i‡(
ex≥˘_•
 !
•
)

4209 
	`debug_mesßge
("Bad sècká·îÉfu¿%s\n", 
ö°rs
[
ö°ru˘i⁄
].
«me
);

4214 
ö°ru˘i⁄
 -
ONEARG_MAX
;

4215 
ˇŒ_the_efun
:

4218 i‡(
In°ru˘i⁄
 > 
NUM_OPCODES
)

4220 
	`Áèl
("QTZ_SE:Undeföed in°ru˘i⁄ %†(%d)\n", 
	`gë_f_«me
(
In°ru˘i⁄
), Instruction);

4222 i‡(
In°ru˘i⁄
 < 
BASE
)

4224 
	`Áèl
("QTZ_SE:Nÿˇ£ f‹É›î©‹ %†(%d)\n", 
	`gë_f_«me
(
In°ru˘i⁄
), Instruction);

4226 i‡(
ö°rs2
[
ö°ru˘i⁄
].
ªt_ty≥
 =
TYPE_NOVALUE
)

4228 
ex≥˘ed_°ack
 = 
•
 - 
°_num_¨g
;

4232 
ex≥˘ed_°ack
 = 
•
 - 
°_num_¨g
 + 1;

4234 
num_¨g
 = 
°_num_¨g
;

4236 (*
€fun_èbÀ
[
ö°ru˘i⁄
]) ();

4237 i‡(
ex≥˘ed_°ack
 !
•
)

4239 
	`Áèl
("QTZ_SE:Bad sècká·îÉfun. In°ru˘i⁄ %d,Çumárg %d\n", 
ö°ru˘i⁄
, 
num_¨g
);

4243 
	`DEBUG_CHECK1
(
•
 < 
Â
 + 
c•
->
num_loˇl_v¨übÀs
 - 1, "QTZ_SE:Bad sècká·îÉvÆu©i⁄. In°ru˘i⁄ %d\n", 
ö°ru˘i⁄
);

4245 
	}
}

4251 
	$do_ˇtch
(*
pc
)

4253 
îr‹_c⁄ãxt_t
 
ec⁄
;

4259 i‡(!
	`ßve_c⁄ãxt
(&
ec⁄
) )

4261 
	`îr‹
("QTZ_SE:Can't catchÅoo deepÑecursionÉrror.\n");

4263 
	`push_c⁄åﬁ_°ack
(
FRAME_CATCH
);

4264 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
TRACE_CODE
)

4265 
c•
->
num_loˇl_v¨übÀs
 = (csp - 1)->num_local_variables;

4268 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
) )

4274 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

4275 
•
++;

4276 *
•
 = 
ˇtch_vÆue
;

4277 
ˇtch_vÆue
 = 
c⁄°1
;

4280 i‡(
max_evÆ_îr‹
)

4282 
	`p›_c⁄ãxt
(&
ec⁄
);

4283 
	`îr‹
("QTZ_SE:Can't catchÉval costÅoo bigÉrror.\n");

4285 i‡(
too_dìp_îr‹
)

4287 
	`p›_c⁄ãxt
(&
ec⁄
);

4288 
	`îr‹
("QTZ_SE:Can't catchÅoo deepÑecursionÉrror.\n");

4293 
	`assign_svÆue
(&
ˇtch_vÆue
, &
c⁄°1
);

4295 
	`evÆ_ö°ru˘i⁄
(
pc
);

4297 
	`p›_c⁄ãxt
(&
ec⁄
);

4298 
	}
}

4333 #ifde‡
DEBUG


4334 
	gdebug_≠∂y_fun
[30];

4337 #ifde‡
CACHE_STATS


4338 
	g≠∂y_low_ˇŒ_Ÿhîs
 = 0;

4339 
	g≠∂y_low_ˇche_hôs
 = 0;

4340 
	g≠∂y_low_¶Ÿs_u£d
 = 0;

4341 
	g≠∂y_low_cﬁlisi⁄s
 = 0;

4344 
	sˇche_íåy_s


4346 
	mid
;

4347 
¥ogøm_t
 *
	m›rogp
;

4348 
¥ogøm_t
 *
	m¥ogp
;

4349 
	mödex
;

4350 *
	m«me
;

4351 
	mnum_¨g
, 
	mnum_loˇl
;

4352 
	mfun˘i⁄_ödex_off£t
;

4353 
	mv¨übÀ_ödex_off£t
;

4354 } 
	tˇche_íåy_t
;

4356 
ˇche_íåy_t
 
	gˇche
[
APPLY_CACHE_SIZE
];

4358 #ifde‡
DEBUGMALLOC_EXTENSIONS


4359 
	$m¨k_≠∂y_low_ˇche
()

4361 
i
;

4362 
i
 = 0; i < 
APPLY_CACHE_SIZE
; i++)

4364 i‡(
ˇche
[
i
].
id
 && !ˇche[i].
¥ogp
)

4366 
	`EXTRA_REF
(
	`BLOCK
(
ˇche
[
i
].
«me
) )++;

4369 
	}
}

4372 
¥ogøm_t
 *
ffbn_ªcur£
(program_t *, *, *, *);

4374 
INLINE_STATIC
 
¥ogøm_t
 *
	$föd_fun˘i⁄_by_«me
(
obje˘_t
 *
ob
, *
«me
, *
ödex
, *
ru¡ime_ödex
)

4376 *
fu¬ame
 = 
	`föd°rög
(
«me
);

4378 i‡(!
fu¬ame
)

4382  
	`ffbn_ªcur£
(
ob
->
¥og
, 
fu¬ame
, 
ödex
, 
ru¡ime_ödex
);

4383 
	}
}

4389 
¥ogøm_t
 *
	$föd_fun˘i⁄_by_«me2
(
obje˘_t
 *
ob
, **
«me
, *
ödex
, *
fio
, *
vio
)

4391 *
«me
 = 
	`föd°rög
(*name);

4393 i‡(! *
«me
)

4397  
	`ffbn_ªcur£2
(
ob
->
¥og
, *
«me
, 
ödex
, 
fio
, 
vio
);

4398 
	}
}

4404 
	$≠∂y_low
(*
fun
, 
obje˘_t
 *
ob
, 
num_¨g
)

4410 *
sfun
;

4411 
ˇche_íåy_t
 *
íåy
;

4412 
¥ogøm_t
 *
¥ogp
, *
¥og
;

4413 
ix
, 
fio
, 
vio
;

4414 
ˇche_mask
 = 
APPLY_CACHE_SIZE
 - 1;

4415 
loˇl_ˇŒ_‹igö
 = 
ˇŒ_‹igö
;

4416 
	`IF_DEBUG
(
c⁄åﬁ_°ack_t
 *
ßve_c•
);

4418 i‡(!
loˇl_ˇŒ_‹igö
)

4420 
loˇl_ˇŒ_‹igö
 = 
ORIGIN_DRIVER
;

4422 
ˇŒ_‹igö
 = 0;

4423 
ob
->
time_of_ªf
 = 
cuºít_time
;

4428 
ob
->
Êags
 &~
O_RESET_STATE
;

4429 #ifde‡
DEBUG


4430 
	`°∫˝y
(
debug_≠∂y_fun
, 
fun
, (debug_apply_fun) );

4431 
debug_≠∂y_fun
[ debug_apply_fun - 1] = '\0';

4433 #ifde‡
_USE_SWAP_H_


4434 i‡(
ob
->
Êags
 &
O_SWAPPED
)

4436 
	`lﬂd_ob_‰om_sw≠
(
ob
);

4440 
¥ogp
 = 
ob
->
¥og
;

4441 
	`DEBUG_CHECK
(
ob
->
Êags
 &
O_DESTRUCTED
, "apply() on destructed object\n");

4442 #ifde‡
CACHE_STATS


4443 
≠∂y_low_ˇŒ_Ÿhîs
++;

4445 
ix
 = (
¥ogp
->
id_numbî
 ^ (
POINTER_INT
)
fun
 ^ ( (POINTER_INT)fu¿>> 
APPLY_CACHE_BITS
ËË&
ˇche_mask
;

4446 
íåy
 = &
ˇche
[
ix
];

4447 i‡–(
íåy
->
id
 =
¥ogp
->
id_numbî
Ë&& (íåy->
›rogp
 =¥ogpË&& (
	`°rcmp
”¡ry->
«me
, 
fun
) == 0) )

4449 #ifde‡
CACHE_STATS


4450 
≠∂y_low_ˇche_hôs
++;

4452 i‡(
íåy
->
¥ogp
)

4454 
compûî_fun˘i⁄_t
 *
fu≈
 = 
íåy
->
¥ogp
->
fun˘i⁄_èbÀ
 +É¡ry->
ödex
;

4455 
funÊags
 = 
íåy
->
›rogp
->
fun˘i⁄_Êags
[
fu≈
->
ru¡ime_ödex
 +É¡ry->
fun˘i⁄_ödex_off£t
];

4458 i‡(!(
funÊags
 &(
NAME_STATIC
 | 
NAME_PRIVATE
ËË|| 
cuºít_obje˘
 =
ob
 || (
loˇl_ˇŒ_‹igö
 &(
ORIGIN_DRIVER
 | 
ORIGIN_CALL_OUT
) ) )

4464 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
 | 
FRAME_OB_CHANGE
);

4465 
cuºít_¥og
 = 
íåy
->
¥ogp
;

4466 
ˇŒî_ty≥
 = 
loˇl_ˇŒ_‹igö
;

4467 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
;

4468 
fun˘i⁄_ödex_off£t
 = 
íåy
->function_index_offset;

4469 
v¨übÀ_ödex_off£t
 = 
íåy
->variable_index_offset;

4471 
c•
->
‰
.
èbÀ_ödex
 = 
íåy
->
ödex
;

4472 #ifde‡
PROFILE_FUNCTIONS


4473 
	`gë_˝u_times
(&(
c•
->
íåy_£cs
), &(c•->
íåy_u£cs
) );

4474 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
íåy
->
ödex
].
ˇŒs
++;

4477 i‡(
funÊags
 &
NAME_TRUE_VARARGS
)

4479 
	`£tup_v¨¨gs_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
, 
íåy
->
num_loˇl
,É¡ry->
num_¨g
);

4483 
	`£tup_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
, 
íåy
->
num_loˇl
,É¡ry->
num_¨g
);

4486 
¥evious_ob
 = 
cuºít_obje˘
;

4487 
cuºít_obje˘
 = 
ob
;

4488 
	`IF_DEBUG
(
ßve_c•
 = 
c•
);

4489 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
fu≈
->
addªss
);

4491 
	`DEBUG_CHECK
(
ßve_c•
 - 1 !
c•
, "QTZ_SE:Bad cspáfterÉxecution inápply_low.\n");

4500 
ödex
;

4504 i‡(!
íåy
->
¥ogp
 &&É¡ry->
id
)

4506 
	`‰ì_°rög
(
íåy
->
«me
);

4508 #ifde‡
CACHE_STATS


4509 i‡(!
íåy
->
id
)

4511 
≠∂y_low_¶Ÿs_u£d
++;

4515 
≠∂y_low_cﬁlisi⁄s
++;

4518 
sfun
 = 
fun
;

4519 
¥og
 = 
	`föd_fun˘i⁄_by_«me2
(
ob
, &
sfun
, &
ödex
, &
fio
, &
vio
);

4520 i‡(
¥og
)

4522 
compûî_fun˘i⁄_t
 *
fu≈
 = &
¥og
->
fun˘i⁄_èbÀ
[
ödex
];

4523 
ru¡ime_deföed_t
 *
fundeÂ
 = &(
	`FIND_FUNC_ENTRY
(
¥og
, 
fu≈
->
ru¡ime_ödex
)->
def
);

4524 
funÊags
 = 
ob
->
¥og
->
fun˘i⁄_Êags
[
fu≈
->
ru¡ime_ödex
 + 
fio
];

4526 i‡(!(
funÊags
 &(
NAME_STATIC
 | 
NAME_PRIVATE
ËË|| 
cuºít_obje˘
 =
ob
 || (
loˇl_ˇŒ_‹igö
 &(
ORIGIN_DRIVER
 | 
ORIGIN_CALL_OUT
) ) )

4528 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
 | 
FRAME_OB_CHANGE
);

4529 
cuºít_¥og
 = 
¥og
;

4530 
ˇŒî_ty≥
 = 
loˇl_ˇŒ_‹igö
;

4532 
íåy
->
›rogp
 = 
ob
->
¥og
;

4533 
íåy
->
id
 = 
¥ogp
->
id_numbî
;

4534 
íåy
->
«me
 = 
sfun
;

4535 
íåy
->
ödex
 = index;

4536 
c•
->
‰
.
èbÀ_ödex
 = 
ödex
;

4537 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
;

4538 
íåy
->
v¨übÀ_ödex_off£t
 = v¨übÀ_ödex_off£à
vio
;

4539 
íåy
->
fun˘i⁄_ödex_off£t
 = fun˘i⁄_ödex_off£à
fio
;

4540 i‡(
funÊags
 &
NAME_TRUE_VARARGS
)

4542 
	`£tup_v¨¨gs_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
, 
fundeÂ
->
num_loˇl
, fundeÂ->
num_¨g
);

4546 
	`£tup_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
, 
fundeÂ
->
num_loˇl
, fundeÂ->
num_¨g
);

4548 
íåy
->
num_¨g
 = 
fundeÂ
->num_arg;

4549 
íåy
->
num_loˇl
 = 
fundeÂ
->num_local;

4550 
íåy
->
¥ogp
 = 
cuºít_¥og
;

4551 
¥evious_ob
 = 
cuºít_obje˘
;

4552 
cuºít_obje˘
 = 
ob
;

4553 
	`IF_DEBUG
(
ßve_c•
 = 
c•
);

4554 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
fu≈
->
addªss
);

4556 
	`DEBUG_CHECK
(
ßve_c•
 - 1 !
c•
, "Bad cspáfterÉxecution inápply_low\n");

4565 
íåy
->
id
 = 
¥ogp
->
id_numbî
;

4566 
íåy
->
›rogp
 = 
¥ogp
;

4567 i‡(
sfun
)

4569 
	`ªf_°rög
(
sfun
);

4570 
íåy
->
«me
 = 
sfun
;

4574 
íåy
->
«me
 = 
	`make_sh¨ed_°rög
(
fun
);

4576 
íåy
->
¥ogp
 = (
¥ogøm_t
*)0;

4579 
	`p›_n_ñems
(
num_¨g
);

4581 
	}
}

4593 
svÆue_t
 *
	$≠∂y
(*
fun
, 
obje˘_t
 *
ob
, 
num_¨g
, 
whîe
)

4595 
	`IF_DEBUG
(
svÆue_t
 *
ex≥˘ed_•
);

4597 
åa˚dïth
 = 0;

4598 
ˇŒ_‹igö
 = 
whîe
;

4601 
	`IF_DEBUG
(
ex≥˘ed_•
 = 
•
 - 
num_¨g
);

4602 i‡(
	`≠∂y_low
(
fun
, 
ob
, 
num_¨g
) == 0)

4606 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "sapply");

4607 
≠∂y_ªt_vÆue
 = *
•
--;

4608 
	`DEBUG_CHECK
(
ex≥˘ed_•
 !
•
, "Corrupt stackÖointer.\n");

4609  &
≠∂y_ªt_vÆue
;

4610 
	}
}

4616 
	$ˇŒ___INIT
(
obje˘_t
 *
ob
)

4618 
¥ogøm_t
 *
¥ogp
;

4619 
compûî_fun˘i⁄_t
 *
cÂ
;

4620 
num_fun˘i⁄s
;

4621 
	`IF_DEBUG
(
svÆue_t
 *
ex≥˘ed_•
);

4622 
	`IF_DEBUG
(
c⁄åﬁ_°ack_t
 *
ßve_c•
);

4624 
åa˚dïth
 = 0;

4626 
	`IF_DEBUG
(
ex≥˘ed_•
 = 
•
);

4630 
ob
->
Êags
 &~
O_RESET_STATE
;

4632 
¥ogp
 = 
ob
->
¥og
;

4633 
num_fun˘i⁄s
 = 
¥ogp
->
num_fun˘i⁄s_deföed
;

4634 i‡(!
num_fun˘i⁄s
)

4640 
cÂ
 = &
¥ogp
->
fun˘i⁄_èbÀ
[
num_fun˘i⁄s
 - 1];

4641 i‡(
cÂ
->
«me
[0] !
APPLY___INIT_SPECIAL_CHAR
)

4645 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
 | 
FRAME_OB_CHANGE
);

4646 
cuºít_¥og
 = 
¥ogp
;

4647 
c•
->
‰
.
èbÀ_ödex
 = 
num_fun˘i⁄s
 - 1;

4648 
ˇŒî_ty≥
 = 
ORIGIN_DRIVER
;

4649 
c•
->
num_loˇl_v¨übÀs
 = 0;

4651 
	`£tup_√w_‰ame
(
cÂ
->
ru¡ime_ödex
);

4652 
¥evious_ob
 = 
cuºít_obje˘
;

4654 
cuºít_obje˘
 = 
ob
;

4655 
	`IF_DEBUG
(
ßve_c•
 = 
c•
);

4656 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
cÂ
->
addªss
);

4658 
	`DEBUG_CHECK
(
ßve_c•
 - 1 !
c•
, "QTZ_SE:Bad cspáfterÉxecution inápply_low\n");

4659 
•
--;

4660 
	`DEBUG_CHECK
(
ex≥˘ed_•
 !
•
, "QTZ_SE:Corrupt stackÖointer.\n");

4661 
	}
}

4673 
svÆue_t
 *
	$ß„_≠∂y
(*
fun
, 
obje˘_t
 *
ob
, 
num_¨g
, 
whîe
)

4675 
svÆue_t
 *
ªt
;

4676 
îr‹_c⁄ãxt_t
 
ec⁄
;

4678 i‡(!
	`ßve_c⁄ãxt
(&
ec⁄
) )

4682 i‡(!
	`SETJMP
(
ec⁄
.
c⁄ãxt
) )

4684 i‡(!(
ob
->
Êags
 &
O_DESTRUCTED
) )

4686 
ªt
 = 
	`≠∂y
(
fun
, 
ob
, 
num_¨g
, 
whîe
);

4690 
ªt
 = 0;

4695 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

4696 
	`p›_n_ñems
(
num_¨g
);

4697 
ªt
 = 0;

4699 
	`p›_c⁄ãxt
(&
ec⁄
);

4700  
ªt
;

4701 
	}
}

4706 
¨øy_t
 *
	$ˇŒ_Æl_Ÿhî
(
¨øy_t
 *
v
, *
func
, 
num¨gs
)

4708 
size
;

4709 
svÆue_t
 *
tmp
, *
v±r
, *
Ωå
;

4710 
¨øy_t
 *
ªt
;

4711 
obje˘_t
 *
ob
;

4712 
i
;

4714 
tmp
 = 
•
;

4715 (++
•
)->
ty≥
 = 
T_ARRAY
;

4716 
•
->
u
.
¨r
 = 
ªt
 = 
	`Æloˇã_¨øy
(
size
 = 
v
->size);

4717 i‡(
size
 && (
•
 + 
num¨gs
 >
íd_of_°ack
) )

4719 
too_dìp_îr‹
 = 1;

4720 
	`îr‹
("QTZ_SE:stack overflow\n");

4722 
v±r
 = 
v
->
ôem
, 
Ωå
 = 
ªt
->ôem; 
size
--; vptr++,Ñptr++)

4724 i‡(
v±r
->
ty≥
 =
T_OBJECT
)

4726 
ob
 = 
v±r
->
u
.ob;

4728 i‡(
v±r
->
ty≥
 =
T_STRING
)

4730 
ob
 = 
	`föd_obje˘
(
v±r
->
u
.
°rög
);

4731 i‡(!
ob
 || !
	`obje˘_visibÀ
(ob) )

4740 i‡(
ob
->
Êags
 &
O_DESTRUCTED
)

4744 
i
 = 
num¨gs
;

4745 
i
--)

4747 
	`push_svÆue
(
tmp
 - 
i
);

4749 
ˇŒ_‹igö
 = 
ORIGIN_CALL_OTHER
;

4750 i‡(
	`≠∂y_low
(
func
, 
ob
, 
num¨gs
) )

4752 *
Ωå
 = *
•
--;

4755 
•
--;

4756 
	`p›_n_ñems
(
num¨gs
);

4757  
ªt
;

4758 
	}
}

4764 
¥ogøm_t
 *
	$ffbn_ªcur£
(
¥ogøm_t
 *
¥og
, *
«me
, *
ödex
, *
ru¡ime_ödex
)

4766 
high
 = 
¥og
->
num_fun˘i⁄s_deföed
 - 1;

4767 
low
 = 0;

4768 
i
;

4771 
high
 >
low
)

4773 
mid
 = (
high
 + 
low
) / 2;

4774 *
p
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].
«me
;

4776 i‡(
«me
 < 
p
)

4778 
high
 = 
mid
 - 1;

4780 i‡(
«me
 > 
p
)

4782 
low
 = 
mid
 + 1;

4786 
ridx
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].
ru¡ime_ödex
;

4787 
Êags
 = 
¥og
->
fun˘i⁄_Êags
[
ridx
];

4788 i‡(
Êags
 &(
NAME_UNDEFINED
 | 
NAME_PROTOTYPE
) )

4790 i‡(
Êags
 &
NAME_INHERITED
)

4796 *
ödex
 = 
mid
;

4797 *
ru¡ime_ödex
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].runtime_index;

4798  
¥og
;

4803 
i
 = 
¥og
->
num_öhîôed
;

4804 
i
--)

4806 
¥ogøm_t
 *
ªt
 = 
	`ffbn_ªcur£
(
¥og
->
öhîô
[
i
].¥og, 
«me
, 
ödex
, 
ru¡ime_ödex
);

4807 i‡(
ªt
)

4809 *
ru¡ime_ödex
 +
¥og
->
öhîô
[
i
].
fun˘i⁄_ödex_off£t
;

4810  
ªt
;

4814 
	}
}

4820 
¥ogøm_t
 *
	$ffbn_ªcur£2
(
¥ogøm_t
 *
¥og
, *
«me
, *
ödex
, *
fio
, *
vio
)

4822 
high
 = 
¥og
->
num_fun˘i⁄s_deföed
 - 1;

4823 
low
 = 0;

4824 
i
;

4827 
high
 >
low
)

4829 
mid
 = (
high
 + 
low
) / 2;

4830 *
p
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].
«me
;

4832 i‡(
«me
 < 
p
)

4834 
high
 = 
mid
 - 1;

4836 i‡(
«me
 > 
p
)

4838 
low
 = 
mid
 + 1;

4855 
ridx
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].
ru¡ime_ödex
;

4856 
Êags
 = 
¥og
->
fun˘i⁄_Êags
[
ridx
];

4857 i‡(
Êags
 &(
NAME_UNDEFINED
 | 
NAME_PROTOTYPE
 | 
NAME_INHERITED
) )

4859 i‡(
Êags
 &
NAME_INHERITED
)

4865 *
ödex
 = 
mid
;

4866 *
fio
 = 0;

4867 *
vio
 = 0;

4868  
¥og
;

4873 
i
 = 
¥og
->
num_öhîôed
;

4874 
i
--)

4876 
¥ogøm_t
 *
ªt
 = 
	`ffbn_ªcur£2
(
¥og
->
öhîô
[
i
].¥og, 
«me
, 
ödex
, 
fio
, 
vio
);

4877 i‡(
ªt
)

4879 *
fio
 +
¥og
->
öhîô
[
i
].
fun˘i⁄_ödex_off£t
;

4880 *
vio
 +
¥og
->
öhîô
[
i
].
v¨übÀ_ödex_off£t
;

4881  
ªt
;

4885 
	}
}

4891 *
	$fun˘i⁄_«me
(
¥ogøm_t
 *
¥og
, 
ödex
)

4893 
ru¡ime_fun˘i⁄_u
 *
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
¥og
, 
ödex
);

4895 
¥og
->
fun˘i⁄_Êags
[
ödex
] &
NAME_INHERITED
)

4897 
¥og
 =Örog->
öhîô
[
func_íåy
->
öh
.
off£t
].prog;

4898 
ödex
 = 
func_íåy
->
öh
.
fun˘i⁄_ödex_off£t
;

4899 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
¥og
, 
ödex
);

4902  
¥og
->
fun˘i⁄_èbÀ
[
func_íåy
->
def
.
f_ödex
].
«me
;

4903 
	}
}

4909 
	$gë_åa˚_dëaûs
(
¥ogøm_t
 *
¥og
, 
ödex
, **
‚ame
, *
«
, *
∆
)

4911 
compûî_fun˘i⁄_t
 *
cÂ
 = &
¥og
->
fun˘i⁄_èbÀ
[
ödex
];

4912 
ru¡ime_fun˘i⁄_u
 *
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
¥og
, 
cÂ
->
ru¡ime_ödex
);

4914 *
‚ame
 = 
cÂ
->
«me
;

4915 *
«
 = 
func_íåy
->
def
.
num_¨g
;

4916 *
∆
 = 
func_íåy
->
def
.
num_loˇl
;

4917 
	}
}

4926 *
	$fun˘i⁄_exi°s
(*
fun
, 
obje˘_t
 *
ob
, 
Êag
)

4928 
ödex
, 
ru¡ime_ödex
;

4929 
¥ogøm_t
 *
¥og
;

4930 
compûî_fun˘i⁄_t
 *
cÂ
;

4932 
	`DEBUG_CHECK
(
ob
->
Êags
 &
O_DESTRUCTED
, "function_exists() on destructed object\n");

4934 #ifde‡
_USE_SWAP_H_


4935 i‡(
ob
->
Êags
 &
O_SWAPPED
)

4937 
	`lﬂd_ob_‰om_sw≠
(
ob
);

4941 i‡(
fun
[0] =
APPLY___INIT_SPECIAL_CHAR
)

4946 
¥og
 = 
	`föd_fun˘i⁄_by_«me
(
ob
, 
fun
, &
ödex
, &
ru¡ime_ödex
);

4947 i‡(!
¥og
)

4952 
cÂ
 = 
¥og
->
fun˘i⁄_èbÀ
 + 
ödex
;

4954 i‡–(
ob
->
¥og
->
fun˘i⁄_Êags
[
ru¡ime_ödex
] &
NAME_UNDEFINED
Ë|| ( (ob->¥og->fun˘i⁄_Êags[ru¡ime_ödex] &(
NAME_STATIC
 | 
NAME_PRIVATE
ËË&& 
cuºít_obje˘
 !ob && !
Êag
) )

4959  
¥og
->
«me
;

4960 
	}
}

4970 
	$ˇŒ_fun˘i⁄
(
¥ogøm_t
 *
¥ogp
, 
off£t
)

4972 
compûî_fun˘i⁄_t
 *
fu≈
;

4974 i‡(
¥ogp
->
fun˘i⁄_Êags
[
off£t
] &
NAME_UNDEFINED
)

4978 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
 | 
FRAME_OB_CHANGE
);

4979 
ˇŒî_ty≥
 = 
ORIGIN_DRIVER
;

4980 
	`DEBUG_CHECK
(
c•
 !
c⁄åﬁ_°ack
, "call_function with bad csp\n");

4981 
c•
->
num_loˇl_v¨übÀs
 = 0;

4982 
cuºít_¥og
 = 
¥ogp
;

4983 
fu≈
 = 
	`£tup_√w_‰ame
(
off£t
);

4984 
¥evious_ob
 = 
cuºít_obje˘
;

4985 
cuºít_obje˘
 = 
cuºít_hóπ_bót
;

4986 
åa˚dïth
 = 0;

4987 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
fu≈
->
addªss
);

4988 
	`p›_°ack
();

4989 
	}
}

4995 
	$å™¶©e_absﬁuã_löe
(
abs_löe
, *
fûe_öfo
, *
ªt_fûe
, *
ªt_löe
)

4997 *
p1
, *
p2
;

4998 
fûe
;

4999 
löe_tmp
 = 
abs_löe
;

5002 
p1
 = 
fûe_öfo
;

5003 
löe_tmp
 > *
p1
)

5005 
löe_tmp
 -*
p1
;

5006 
p1
 += 2;

5008 
fûe
 = 
p1
[1];

5011 
p2
 = 
fûe_öfo
;

5012 
p2
 < 
p1
)

5014 i‡(
p2
[1] =
fûe
)

5016 
löe_tmp
 +*
p2
;

5018 
p2
 += 2;

5020 *
ªt_löe
 = 
löe_tmp
;

5021 *
ªt_fûe
 = 
fûe
;

5022 
	}
}

5028 
	$föd_löe
(*
p
, 
¥ogøm_t
 *
¥ogp
, **
ªt_fûe
, *
ªt_löe
)

5030 
off£t
;

5031 *
 s
;

5032 
abs_löe
;

5033 
fûe_idx
;

5035 *
ªt_fûe
 = "";

5036 *
ªt_löe
 = 0;

5038 i‡(!
¥ogp
)

5042 i‡(
¥ogp
 =&
Áke_¥og
)

5052 i‡(!
¥ogp
->
löe_öfo
)

5054 
	`lﬂd_löe_numbîs
(
¥ogp
);

5055 i‡(!
¥ogp
->
löe_öfo
)

5060 
off£t
 = 
p
 - 
¥ogp
->
¥ogøm
;

5061 
	`DEBUG_CHECK2
(
off£t
 > ()
¥ogp
->
¥ogøm_size
, "IŒegÆ off£à%d i¿obje˘ /%s\n", off£t,Örogp->
«me
);

5063 
 s
 = 
¥ogp
->
löe_öfo
;

5064 
off£t
 > *
 s
)

5066 
off£t
 -*
 s
;

5067 
 s
 += 3;

5070 
	`COPY_SHORT
(&
abs_löe
, 
 s
 + 1);

5072 
	`å™¶©e_absﬁuã_löe
(
abs_löe
, &
¥ogp
->
fûe_öfo
[2], &
fûe_idx
, 
ªt_löe
);

5074 *
ªt_fûe
 = 
¥ogp
->
°rögs
[
fûe_idx
 - 1];

5076 
	}
}

5082 
	$gë_ex∂icô_löe_numbî_öfo
(*
p
, 
¥ogøm_t
 *
¥og
, **
ªt_fûe
, *
ªt_löe
)

5084 
	`föd_löe
(
p
, 
¥og
, 
ªt_fûe
, 
ªt_löe
);

5085 i‡(!(*
ªt_fûe
) )

5087 *
ªt_fûe
 = 
¥og
->
«me
;

5089 
	}
}

5095 
	$gë_löe_numbî_öfo
(**
ªt_fûe
, *
ªt_löe
)

5097 
	`föd_löe
(
pc
, 
cuºít_¥og
, 
ªt_fûe
, 
ªt_löe
);

5098 i‡(!(*
ªt_fûe
) )

5100 *
ªt_fûe
 = 
cuºít_¥og
->
«me
;

5102 
	}
}

5108 *
	$gë_löe_numbî
(*
p
, 
¥ogøm_t
 *
¥ogp
)

5110 
buf
[256];

5111 
i
;

5112 *
fûe
;

5113 
löe
;

5115 
i
 = 
	`föd_löe
(
p
, 
¥ogp
, &
fûe
, &
löe
);

5117 
i
)

5120 
	`°r˝y
(
buf
, "(noÖrogram)");

5121  
buf
;

5123 *
buf
 = 0;

5124  
buf
;

5126 
	`°r˝y
(
buf
, "(compiledÖrogram)");

5127  
buf
;

5129 
	`°r˝y
(
buf
, "(noÜineÇumbers)");

5130  
buf
;

5132 
	`°r˝y
(
buf
, "(includesÅoo deep)");

5133  
buf
;

5135 i‡(!
fûe
)

5137 
fûe
 = 
¥ogp
->
«me
;

5139 
	`•rötf
(
buf
, "/%s:%d", 
fûe
, 
löe
);

5140  
buf
;

5141 
	}
}

5147 *
	$dump_åa˚
(
how
)

5149 
c⁄åﬁ_°ack_t
 *
p
;

5150 *
ªt
 = 0;

5151 *
‚ame
;

5152 
num_¨g
 = - 1, 
num_loˇl
 = - 1;

5154 #i‡
	`deföed
(
ARGUMENTS_IN_TRACEBACK
Ë|| deföed(
LOCALS_IN_TRACEBACK
)

5155 
svÆue_t
 *
±r
;

5156 
i
;

5159 i‡(
cuºít_¥og
 == 0)

5163 i‡(
c•
 < &
c⁄åﬁ_°ack
[0])

5167 #ifde‡
TRACE_CODE


5168 i‡(
how
)

5170 ()
	`œ°_ö°ru˘i⁄s
();

5173 ()
how
;

5175 
p
 = &
c⁄åﬁ_°ack
[0];Ö < 
c•
;Ö++)

5177 
p
[0].
‰ameköd
 &
FRAME_MASK
)

5179 
FRAME_FUNCTION
:

5180 
	`gë_åa˚_dëaûs
(
p
[1].
¥og
,Ö[0].
‰
.
èbÀ_ödex
, &
‚ame
, &
num_¨g
, &
num_loˇl
);

5181 
	`debug_mesßge
("'%15s()' in '%30s'át %s\n",

5182 
‚ame
, 
p
[1].
ob
->
«me
, 
	`gë_löe_numbî
’[1].
pc
,Ö[1].
¥og
) );

5183 i‡(
	`°rcmp
(
‚ame
, "heart_beat") == 0)

5185 
ªt
 = 
p
->
ob
 ?Ö->ob->
«me
: 0;

5188 
FRAME_FUNP
:

5189 
	`debug_mesßge
("'<function>' in '%30s'át %s\n",

5190 
p
[1].
ob
->
«me
, 
	`gë_löe_numbî
’[1].
pc
,Ö[1].
¥og
) );

5191 
num_¨g
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_arg;

5192 
num_loˇl
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_local;

5194 
FRAME_FAKE
:

5195 
	`debug_mesßge
("'<function>' in '%30s'át %20s') %s\n",

5196 
p
[1].
ob
->
«me
, 
	`gë_löe_numbî
’[1].
pc
,Ö[1].
¥og
) );

5197 
num_¨g
 = - 1;

5199 
FRAME_CATCH
:

5200 
	`debug_mesßge
("'CATCH' in '%20s' ('%20s') %s\n",

5201 
p
[1].
¥og
->
«me
,Ö[1].
ob
->«me, 
	`gë_löe_numbî
’[1].
pc
,Ö[1].prog) );

5202 
num_¨g
 = - 1;

5204 #ifde‡
DEBUG


5206 
	`Áèl
("unknownÅype of frame\n");

5255 
p
[0].
‰ameköd
 &
FRAME_MASK
)

5257 
FRAME_FUNCTION
:

5258 
	`gë_åa˚_dëaûs
(
cuºít_¥og
, 
p
[0].
‰
.
èbÀ_ödex
, &
‚ame
, &
num_¨g
, &
num_loˇl
);

5259 
	`debug_mesßge
("'%15s()' in '%30s'át %s\n",

5260 
‚ame
, 
cuºít_obje˘
->
«me
, 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
) );

5262 
FRAME_FUNP
:

5263 
	`debug_mesßge
("'<function>' in '%30s'át %s\n",

5264 
cuºít_obje˘
->
«me
, 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
) );

5265 
num_¨g
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_arg;

5266 
num_loˇl
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_local;

5268 
FRAME_FAKE
:

5269 
	`debug_mesßge
("'<function>' in '%30s'át %s\n",

5270 
cuºít_obje˘
->
«me
, 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
) );

5271 
num_¨g
 = - 1;

5273 
FRAME_CATCH
:

5274 
	`debug_mesßge
("'CATCH' in '%30s'át %s\n",

5275 
cuºít_obje˘
->
«me
, 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
) );

5276 
num_¨g
 = - 1;

5279 #ifde‡
ARGUMENTS_IN_TRACEBACK


5281 i‡(
num_¨g
 >= 1 )

5283 
	`debug_mesßge
("arguments were (");

5284 
i
 = 0; i < 
num_¨g
; i++)

5286 
outbuf„r_t
 
outbuf
;

5288 i‡(
i
)

5290 
	`debug_mesßge
(",");

5292 
	`outbuf_zîo
(&
outbuf
);

5293 
	`svÆue_to_°rög
(&
Â
[
i
], &
outbuf
, 0, 0, 0);

5295 
	`debug_mesßge
("%s", 
outbuf
.
buf„r
);

5296 
	`FREE_MSTR
(
outbuf
.
buf„r
);

5298 
	`debug_mesßge
(")\n");

5301 #ifde‡
LOCALS_IN_TRACEBACK


5302 i‡(
num_loˇl
 > 0 && 
num_¨g
 != - 1)

5304 
±r
 = 
Â
 + 
num_¨g
;

5305 
	`debug_mesßge
("loˇls[%d] maybêwîe: ", 
num_loˇl
);

5306 
i
 = 0; i < 
num_loˇl
; i++)

5308 
outbuf„r_t
 
outbuf
;

5310 i‡(
i
)

5312 
	`debug_mesßge
(",");

5314 
	`outbuf_zîo
(&
outbuf
);

5315 
	`svÆue_to_°rög
(&
±r
[
i
], &
outbuf
, 0, 0, 0);

5317 
	`debug_mesßge
("%s", 
outbuf
.
buf„r
);

5318 
	`FREE_MSTR
(
outbuf
.
buf„r
);

5320 
	`debug_mesßge
("\n");

5323  
ªt
;

5324 
	}
}

5330 
¨øy_t
 *
	$gë_svÆue_åa˚
()

5332 
c⁄åﬁ_°ack_t
 *
p
;

5333 
¨øy_t
 *
v
;

5334 
m≠pög_t
 *
m
;

5335 *
fûe
;

5336 
löe
;

5337 *
‚ame
;

5338 
num_¨g
, 
num_loˇl
;

5340 #i‡
	`deföed
(
ARGUMENTS_IN_TRACEBACK
Ë|| deföed(
LOCALS_IN_TRACEBACK
)

5341 
svÆue_t
 *
±r
;

5342 
i
, 
n
;

5343 #ifde‡
LOCALS_IN_TRACEBACK


5344 
n2
;

5348 i‡(
cuºít_¥og
 == 0)

5350  &
the_nuŒ_¨øy
;

5352 i‡(
c•
 < &
c⁄åﬁ_°ack
[0])

5354  &
the_nuŒ_¨øy
;

5356 
v
 = 
	`Æloˇã_em±y_¨øy
–(
c•
 - &
c⁄åﬁ_°ack
[0]) + 1);

5357 
p
 = &
c⁄åﬁ_°ack
[0];Ö < 
c•
;Ö++)

5359 
m
 = 
	`Æloˇã_m≠pög
(6);

5360 
p
[0].
‰ameköd
 &
FRAME_MASK
)

5362 
FRAME_FUNCTION
:

5363 
	`gë_åa˚_dëaûs
(
p
[1].
¥og
,Ö[0].
‰
.
èbÀ_ödex
, &
‚ame
, &
num_¨g
, &
num_loˇl
);

5364 
	`add_m≠pög_°rög
(
m
, "fun˘i⁄", 
‚ame
);

5366 
FRAME_CATCH
:

5367 
	`add_m≠pög_°rög
(
m
, "function", "CATCH");

5368 
num_¨g
 = - 1;

5370 
FRAME_FAKE
:

5371 
	`add_m≠pög_°rög
(
m
, "function", "<function>");

5372 
num_¨g
 = - 1;

5374 
FRAME_FUNP
:

5375 
	`add_m≠pög_°rög
(
m
, "function", "<function>");

5376 
num_¨g
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_arg;

5377 
num_loˇl
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_local;

5379 #ifde‡
DEBUG


5381 
	`Áèl
("QTZ_SE:unknownÅype of frame\n");

5384 
	`add_m≠pög_°rög
(
m
, "¥ogøm", 
p
[1].
¥og
->
«me
);

5385 
	`add_m≠pög_obje˘
(
m
, "obje˘", 
p
[1].
ob
);

5386 
	`gë_ex∂icô_löe_numbî_öfo
(
p
[1].
pc
,Ö[1].
¥og
, &
fûe
, &
löe
);

5387 
	`add_m≠pög_°rög
(
m
, "fûe", 
fûe
);

5388 
	`add_m≠pög_∑ú
(
m
, "löe", 
löe
);

5389 #ifde‡
ARGUMENTS_IN_TRACEBACK


5390 i‡(
num_¨g
 != - 1)

5392 
¨øy_t
 *
v2
;

5394 
n
 = 
num_¨g
;

5395 
±r
 = 
p
[1].
Â
;

5396 
v2
 = 
	`Æloˇã_em±y_¨øy
(
n
);

5397 
i
 = 0; i < 
n
; i++)

5399 
	`assign_svÆue_no_‰ì
(&
v2
->
ôem
[
i
], &
±r
[i]);

5401 
	`add_m≠pög_¨øy
(
m
, "¨gumíts", 
v2
);

5402 
v2
->
ªf
--;

5405 #ifde‡
LOCALS_IN_TRACEBACK


5406 i‡(
num_loˇl
 > 0 && 
num_¨g
 != - 1)

5408 
¨øy_t
 *
v2
;

5410 
n
 = 
num_¨g
;

5411 
n2
 = 
num_loˇl
;

5412 
±r
 = 
p
[1].
Â
;

5413 
v2
 = 
	`Æloˇã_em±y_¨øy
(
n2
);

5414 
i
 = 0; i < 
n2
; i++)

5416 
	`assign_svÆue_no_‰ì
(&
v2
->
ôem
[
i
], &
±r
[ò+ 
n
]);

5418 
	`add_m≠pög_¨øy
(
m
, "loˇls", 
v2
);

5419 
v2
->
ªf
--;

5422 
v
->
ôem
[(
p
 - &
c⁄åﬁ_°ack
[0])].
ty≥
 = 
T_MAPPING
;

5423 
v
->
ôem
[(
p
 - &
c⁄åﬁ_°ack
[0])].
u
.
m≠
 = 
m
;

5425 
m
 = 
	`Æloˇã_m≠pög
(6);

5426 
p
[0].
‰ameköd
 &
FRAME_MASK
)

5428 
FRAME_FUNCTION
:

5429 
	`gë_åa˚_dëaûs
(
cuºít_¥og
, 
p
[0].
‰
.
èbÀ_ödex
, &
‚ame
, &
num_¨g
, &
num_loˇl
);

5430 
	`add_m≠pög_°rög
(
m
, "fun˘i⁄", 
‚ame
);

5432 
FRAME_CATCH
:

5433 
	`add_m≠pög_°rög
(
m
, "function", "CATCH");

5434 
num_¨g
 = - 1;

5436 
FRAME_FAKE
:

5437 
	`add_m≠pög_°rög
(
m
, "function", "<function>");

5438 
num_¨g
 = - 1;

5440 
FRAME_FUNP
:

5441 
	`add_m≠pög_°rög
(
m
, "function", "<function>");

5442 
num_¨g
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_arg;

5443 
num_loˇl
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_local;

5446 
	`add_m≠pög_°rög
(
m
, "¥ogøm", 
cuºít_¥og
->
«me
);

5447 
	`add_m≠pög_obje˘
(
m
, "obje˘", 
cuºít_obje˘
);

5448 
	`gë_löe_numbî_öfo
(&
fûe
, &
löe
);

5449 
	`add_m≠pög_°rög
(
m
, "fûe", 
fûe
);

5450 
	`add_m≠pög_∑ú
(
m
, "löe", 
löe
);

5451 #ifde‡
ARGUMENTS_IN_TRACEBACK


5452 i‡(
num_¨g
 != - 1)

5454 
¨øy_t
 *
v2
;

5456 
n
 = 
num_¨g
;

5457 
v2
 = 
	`Æloˇã_em±y_¨øy
(
n
);

5458 
i
 = 0; i < 
n
; i++)

5460 
	`assign_svÆue_no_‰ì
(&
v2
->
ôem
[
i
], &
Â
[i]);

5462 
	`add_m≠pög_¨øy
(
m
, "¨gumíts", 
v2
);

5463 
v2
->
ªf
--;

5466 #ifde‡
LOCALS_IN_TRACEBACK


5467 i‡(
num_loˇl
 > 0 && 
num_¨g
 != - 1)

5469 
¨øy_t
 *
v2
;

5471 
n
 = 
num_¨g
;

5472 
n2
 = 
num_loˇl
;

5473 
v2
 = 
	`Æloˇã_em±y_¨øy
(
n2
);

5474 
i
 = 0; i < 
n2
; i++)

5476 
	`assign_svÆue_no_‰ì
(&
v2
->
ôem
[
i
], &
Â
[ò+ 
n
]);

5478 
	`add_m≠pög_¨øy
(
m
, "loˇls", 
v2
);

5479 
v2
->
ªf
--;

5482 
v
->
ôem
[(
c•
 - &
c⁄åﬁ_°ack
[0])].
ty≥
 = 
T_MAPPING
;

5483 
v
->
ôem
[(
c•
 - &
c⁄åﬁ_°ack
[0])].
u
.
m≠
 = 
m
;

5485 
v
->
ªf
--;

5486  
v
;

5487 
	}
}

5493 *
	$gë_löe_numbî_if_™y
()

5495 i‡(
cuºít_¥og
)

5497  
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
);

5500 
	}
}

5506 
	#SSCANF_ASSIGN_SVALUE_STRING
(
S
) \

5507 
¨g
->
ty≥
 = 
T_STRING
; \

5508 
¨g
->
u
.
°rög
 = 
S
; \

5509 
¨g
->
subty≥
 = 
STRING_MALLOC
; \

5510 
¨g
--; \

5511 
num_¨g
--

	)

5513 
	#SSCANF_ASSIGN_SVALUE_NUMBER
(
N
) \

5514 
¨g
->
ty≥
 = 
T_NUMBER
; \

5515 
¨g
->
subty≥
 = 0; \

5516 
¨g
->
u
.
numbî
 = 
N
; \

5517 
¨g
--; \

5518 
num_¨g
--

	)

5520 
	#SSCANF_ASSIGN_SVALUE
(
T
,
U
,
V
) \

5521 
¨g
->
ty≥
 = 
T
; \

5522 
¨g
->
U
 = 
V
; \

5523 
¨g
--; \

5524 
num_¨g
--

	)

5527 
	$öãr_ssˇnf
(
svÆue_t
 *
¨g
, svÆue_à*
s0
, svÆue_à*
s1
, 
num_¨g
)

5529 *
fmt
;

5530 *
ö_°rög
;

5531 
numbî_of_m©ches
;

5532 
skùme
;

5533 
ba£
 = 10;

5534 
num
;

5535 *
m©ch
, 
ﬁd_ch¨
;

5536 *
tmp
;

5541 
	`CHECK_TYPES
(
s0
, 
T_STRING
, 1, 
F_SSCANF
);

5542 
ö_°rög
 = 
s0
->
u
.
°rög
;

5547 
	`CHECK_TYPES
(
s1
, 
T_STRING
, 2, 
F_SSCANF
);

5548 
fmt
 = 
s1
->
u
.
°rög
;

5553 
numbî_of_m©ches
 = 0; 
num_¨g
 >= 0;Çumber_of_matches++)

5555 *
fmt
)

5557 i‡(*
fmt
 == '%')

5559 i‡(*++
fmt
 == '%')

5561 i‡(*
ö_°rög
++ != '%')

5563  
numbî_of_m©ches
;

5565 
fmt
++;

5568 i‡(! *
fmt
)

5570 
	`îr‹
("QTZ_SE:Format string cannotÉnd in '%%' in sscanf()\n");

5574 i‡(*
fmt
++ !*
ö_°rög
++)

5576  
numbî_of_m©ches
;

5580 i‡(! *
fmt
)

5587 i‡(*
ö_°rög
 && 
num_¨g
)

5589 
numbî_of_m©ches
++;

5590 
	`SSCANF_ASSIGN_SVALUE_STRING
(
	`°rög_c›y
(
ö_°rög
, "sscanf") );

5594 
	`DEBUG_CHECK
(
fmt
[ - 1] != '%', "In sscanf, should beá %%Çow!\n");

5596 i‡–(
skùme
 = (*
fmt
 == '*') ) )

5598 
fmt
++;

5600 i‡(
num_¨g
 < 1 && *
fmt
 != '%')

5606 
	`îr‹
("QTZ_SE:Too fewárgumentsÅo sscanf()\n");

5609 *
fmt
++)

5612 
ba£
 = 16;

5616 
tmp
 = 
ö_°rög
;

5617 
num
 = ()
	`°πﬁ
(
ö_°rög
, &ö_°rög, 
ba£
);

5618 i‡(
tmp
 =
ö_°rög
)

5620  
numbî_of_m©ches
;

5622 i‡(!
skùme
)

5624 
	`SSCANF_ASSIGN_SVALUE_NUMBER
(
num
);

5626 
ba£
 = 10;

5631 
tmp_num
;

5633 
tmp
 = 
ö_°rög
;

5634 
tmp_num
 = 
	`_°πof
(
ö_°rög
, &in_string);

5635 i‡(
tmp
 =
ö_°rög
)

5637  
numbî_of_m©ches
;

5639 i‡(!
skùme
)

5641 
	`SSCANF_ASSIGN_SVALUE
(
T_REAL
, 
u
.
ªÆ
, 
tmp_num
);

5647 
ªgexp
 *
ªg
;

5649 
tmp
 = 
fmt
;

5650 
num
 = 1;

5653 *
tmp
)

5656 i‡(*++
tmp
)

5658 
tmp
++;

5662 
	`îr‹
("QTZ_SE:BadÑegex∞f‹m©: '%%%s' i¿ssˇn‡f‹m© såög\n", 
fmt
);

5664 
num
++;

5667 
tmp
++;

5670 i‡(!--
num
)

5674 
tmp
++;

5678 
n
 = 
tmp
 - 
fmt
;

5679 *
buf
 = (*)
	`DXALLOC
(
n
 + 1, 
TAG_TEMPORARY
, "sscanfÑegexp");

5680 
	`mem˝y
(
buf
, 
fmt
, 
n
);

5681 
buf
[
n
] = 0;

5682 
ªg
 = 
	`_ªgcomp
–(*)
buf
, 0);

5683 
	`FREE
(
buf
);

5684 i‡(!
ªg
)

5686 
	`îr‹
(
ªgexp_îr‹
);

5688 i‡(!
	`_ªgexec
(
ªg
, 
ö_°rög
Ë|| (ö_°rög !ªg->
°¨ç
[0]) )

5690  
numbî_of_m©ches
;

5692 i‡(!
skùme
)

5694 
n
 = *
ªg
->
ídp
 - 
ö_°rög
;

5695 
buf
 = 
	`√w_°rög
(
n
, "sscanfÑegexpÑeturn");

5696 
	`mem˝y
(
buf
, 
ö_°rög
, 
n
);

5697 
buf
[
n
] = 0;

5698 
	`SSCANF_ASSIGN_SVALUE_STRING
(
buf
);

5700 
ö_°rög
 = *
ªg
->
ídp
;

5701 
	`FREE
–(*)
ªg
);

5702 
fmt
 = ++
tmp
;

5711 
	`îr‹
("QTZ_SE:BadÅy≥ : '%%%c' i¿ssˇnf(Ëf‹m© såög\n", 
fmt
[ - 1]);

5722 i‡(! *
fmt
)

5724 
numbî_of_m©ches
++;

5725 i‡(!
skùme
)

5727 
	`SSCANF_ASSIGN_SVALUE_STRING
(
	`°rög_c›y
(
ö_°rög
, "sscanf") );

5736 i‡(*
fmt
++ == '%')

5738 
skùme2
;

5740 
tmp
 = 
ö_°rög
;

5741 i‡–(
skùme2
 = (*
fmt
 == '*') ) )

5743 
fmt
++;

5745 i‡(
num_¨g
 < (!
skùme
 + !
skùme2
Ë&& *
fmt
 != '%')

5747 
	`îr‹
("QTZ_SE:Too fewárgumentsÅo sscanf().\n");

5750 
numbî_of_m©ches
++;

5752 *
fmt
++)

5755 
	`îr‹
("QTZ_SE:IllegalÅo have 2ádjacent %%s's in format string in sscanf()\n");

5759 *
tmp
 && (*tmp != '0') )tmp++;

5760 i‡(*
tmp
 == '0')

5762 i‡–(
tmp
[1] ='x' ||Åmp[1] ='X'Ë&& 
	`isxdigô
(tmp[2]) )

5766 
tmp
 += 2;

5769 *
tmp
)

5773 *
tmp
 && !
	`isdigô
(*tmp) )

5775 
tmp
++;

5779 *
tmp
 && !
	`isdigô
(*tmp) && (*tmp != '.' || !isdigit(tmp[1]) ) )

5781 
tmp
++;

5785 *
tmp
 && (*tmp != '%') )

5787 
tmp
++;

5792 
ªgexp
 *
ªg
;

5794 
tmp
 = 
fmt
;

5795 
num
 = 1;

5798 *
tmp
)

5801 i‡(*++
tmp
)

5803 
tmp
++;

5807 
	`îr‹
("QTZ_SE:BadÑegex∞f‹m© : '%%%s' i¿ssˇn‡f‹m© såög\n", 
fmt
);

5809 
num
++;

5812 
tmp
++;

5816 i‡(!--
num
)

5820 
tmp
++;

5824 
n
 = 
tmp
 - 
fmt
;

5825 *
buf
 = (*)
	`DXALLOC
(
n
 + 1, 
TAG_TEMPORARY
, "sscanfÑegexp");

5826 
	`mem˝y
(
buf
, 
fmt
, 
n
);

5827 
buf
[
n
] = 0;

5828 
ªg
 = 
	`_ªgcomp
–(*)
buf
, 0);

5829 
	`FREE
(
buf
);

5830 i‡(!
ªg
)

5832 
	`îr‹
(
ªgexp_îr‹
);

5834 i‡(!
	`_ªgexec
(
ªg
, 
ö_°rög
) )

5836 i‡(!
skùme
)

5838 
	`SSCANF_ASSIGN_SVALUE_STRING
(
	`°rög_c›y
(
ö_°rög
, "sscanf") );

5840 
	`FREE
–(*)
ªg
);

5841  
numbî_of_m©ches
;

5845 i‡(!
skùme
)

5847 
m©ch
 = 
	`√w_°rög
(
num
 = (*
ªg
->
°¨ç
 - 
ö_°rög
), "inter_sscanf");

5848 
	`mem˝y
(
m©ch
, 
ö_°rög
, 
num
);

5849 
m©ch
[
num
] = 0;

5850 
	`SSCANF_ASSIGN_SVALUE_STRING
(
m©ch
);

5852 
ö_°rög
 = *
ªg
->
ídp
;

5853 i‡(!
skùme2
)

5855 
m©ch
 = 
	`√w_°rög
(
num
 = (*
ªg
->
ídp
 - *ªg->
°¨ç
), "inter_sscanf");

5856 
	`mem˝y
(
m©ch
, *
ªg
->
°¨ç
, 
num
);

5857 
m©ch
[
num
] = 0;

5858 
	`SSCANF_ASSIGN_SVALUE_STRING
(
m©ch
);

5860 
	`FREE
–(*)
ªg
);

5862 
fmt
 = ++
tmp
;

5870 
	`îr‹
("QTZ_SE:Format string can'tÉnd in '%%'.\n");

5872 
	`îr‹
("QTZ_SE:BadÅy≥ : '%%%c' i¿ssˇnf(Ëf‹m© såög\n", 
fmt
[ - 1]);

5875 i‡(!
skùme
)

5877 
m©ch
 = 
	`√w_°rög
(
num
 = (
tmp
 - 
ö_°rög
), "inter_sscanf");

5878 
	`mem˝y
(
m©ch
, 
ö_°rög
, 
num
);

5879 
m©ch
[
num
] = 0;

5880 
	`SSCANF_ASSIGN_SVALUE_STRING
(
m©ch
);

5882 i‡(!*(
ö_°rög
 = 
tmp
) )

5884  
numbî_of_m©ches
;

5886 
fmt
[ - 1])

5889 
ba£
 = 16;

5892 
num
 = ()
	`°πﬁ
(
ö_°rög
, &ö_°rög, 
ba£
);

5894 i‡(!
skùme2
)

5896 
	`SSCANF_ASSIGN_SVALUE_NUMBER
(
num
);

5898 
ba£
 = 10;

5903 
tmp_num
 = 
	`_°πof
(
ö_°rög
, &in_string);

5904 i‡(!
skùme2
)

5906 
	`SSCANF_ASSIGN_SVALUE
(
T_REAL
, 
u
.
ªÆ
, 
tmp_num
);

5911 
ö_°rög
++;

5915 i‡–(
tmp
 = 
	`°rchr
(
fmt
, '%'ËË!
NULL
)

5917 
num
 = 
tmp
 - 
fmt
 + 1;

5921 
tmp
 = 
fmt
 + (
num
 = 
	`°æí
(fmt) );

5922 
num
++;

5925 
ﬁd_ch¨
 = *--
fmt
;

5926 
m©ch
 = 
ö_°rög
;

5931 *
ö_°rög
)

5933 i‡–(*
ö_°rög
 =
ﬁd_ch¨
Ë&& !
	`°∫cmp
(ö_°rög, 
fmt
, 
num
) )

5938 i‡(!
skùme
)

5940 *
√wm©ch
;

5942 
√wm©ch
 = 
	`√w_°rög
(
skùme
 = (
ö_°rög
 - 
m©ch
), "inter_sscanf");

5943 
	`mem˝y
(
√wm©ch
, 
m©ch
, 
skùme
);

5944 
√wm©ch
[
skùme
] = 0;

5945 
	`SSCANF_ASSIGN_SVALUE_STRING
(
√wm©ch
);

5947 
ö_°rög
 +
num
;

5948 
fmt
 = 
tmp
;

5951 
ö_°rög
++;

5953 i‡(
fmt
 =
tmp
)

5965  
numbî_of_m©ches
;

5966 
	}
}

5969 #ifde‡
OPCPROF


5970 
	$›cdump
(*
t‚
)

5972 
i
, 
Àn
, 
limô
;

5973 
tbuf
[
SMALL_STRING_SIZE
], *
‚
;

5974 
FILE
 *
Â
;

5976 i‡–(
Àn
 = 
	`°æí
(
t‚
ËË>(
SMALL_STRING_SIZE
 - 7) )

5978 
	`îr‹
("QTZ_SE:P©h '%s'Åoÿl⁄g.\n", 
t‚
);

5981 
	`°r˝y
(
tbuf
, 
t‚
);

5982 
	`°r˝y
(
tbuf
 + 
Àn
, ".efun");

5983 
‚
 = 
	`check_vÆid_∑th
(
tbuf
, 
cuºít_obje˘
, "opcprof", 1);

5984 i‡(!
‚
)

5986 
	`îr‹
("QTZ_SE:InvÆidÖ©h '%s' f‹ wrôög.\n", 
tbuf
);

5989 
Â
 = 
	`f›í
(
‚
, "w");

5990 i‡(!
Â
)

5992 
	`îr‹
("QTZ_SE:U«bÀÅÿ›í %s.\n", 
‚
);

5995 
limô
 = (
›c_efun
Ë/ (
›c_t
);

5996 
i
 = 0; i < 
limô
; i++)

5998 
	`Ârötf
(
Â
, "%-30s: %10d\n", 
›c_efun
[
i
].
«me
, opc_efun[i].
cou¡
);

6000 
	`f˛o£
(
Â
);

6002 
	`°r˝y
(
tbuf
, 
t‚
);

6003 
	`°r˝y
(
tbuf
 + 
Àn
, ".eoper");

6004 
‚
 = 
	`check_vÆid_∑th
(
tbuf
, 
cuºít_obje˘
, "opcprof", 1);

6005 i‡(!
‚
)

6007 
	`îr‹
("QTZ_SE:InvÆidÖ©h '%s' f‹ wrôög.\n", 
tbuf
);

6010 
Â
 = 
	`f›í
(
‚
, "w");

6011 i‡(!
Â
)

6013 
	`îr‹
("QTZ_SE:U«bÀÅÿ›í %†f‹ wrôög.\n", 
‚
);

6016 
i
 = 0; i < 
BASE
; i++)

6018 
	`Ârötf
(
Â
, "%-30s: %10d\n", 
	`quîy_ö°r_«me
(
i
), 
›c_e›î
[i]);

6020 
	`f˛o£
(
Â
);

6021 
	}
}

6025 #ifde‡
OPCPROF_2D


6028 
	m›1
, 
	m›2
;

6029 
	mnum_ˇŒs
;

6030 } 
	ts‹t_ñem_t
;

6032 
	$s‹t_ñem_cmp
(
s‹t_ñem_t
 *
£1
, s‹t_ñem_à*
£2
)

6034  
£2
->
num_ˇŒs
 - 
£1
->num_calls;

6035 
	}
}

6037 
	$›cdump
(*
t‚
)

6039 
öd
, 
i
, 
j
, 
Àn
;

6040 
tbuf
[
SMALL_STRING_SIZE
], *
‚
;

6041 
FILE
 *
Â
;

6042 
s‹t_ñem_t
 
›s
[(
BASE
 + 1)*(BASE + 1)];

6044 i‡–(
Àn
 = 
	`°æí
(
t‚
ËË>(
SMALL_STRING_SIZE
 - 10) )

6046 
	`îr‹
("QTZ_SE:P©h '%s'Åoÿl⁄g.\n", 
t‚
);

6049 
	`°r˝y
(
tbuf
, 
t‚
);

6050 
	`°r˝y
(
tbuf
 + 
Àn
, ".eop-2d");

6051 
‚
 = 
	`check_vÆid_∑th
(
tbuf
, 
cuºít_obje˘
, "opcprof", 1);

6052 i‡(!
‚
)

6054 
	`îr‹
("QTZ_SE:InvÆidÖ©h '%s' f‹ wrôög.\n", 
tbuf
);

6057 
Â
 = 
	`f›í
(
‚
, "w");

6058 i‡(!
Â
)

6060 
	`îr‹
("QTZ_SE:U«bÀÅÿ›í %†f‹ wrôög.\n", 
‚
);

6063 
i
 = 0; i <
BASE
; i++)

6065 
j
 = 0; j <
BASE
; j++)

6067 
öd
 = 
i
 *(
BASE
 + 1Ë+ 
j
;

6068 
›s
[
öd
].
num_ˇŒs
 = 
›c_e›î_2d
[
i
][
j
];

6069 
›s
[
öd
].
›1
 = 
i
;

6070 
›s
[
öd
].
›2
 = 
j
;

6073 
	`quickS‹t
–(*)
›s
, (
BASE
 + 1)*(BASE + 1), (
s‹t_ñem_t
), 
s‹t_ñem_cmp
);

6074 
i
 = 0; i < (
BASE
 + 1)*(BASE + 1); i++)

6076 i‡(
›s
[
i
].
num_ˇŒs
)

6078 
	`Ârötf
(
Â
, "%-30†%-30s: %10d\n", 
	`quîy_ö°r_«me
(
›s
[
i
].
›1
), quîy_ö°r_«me(›s[i].
›2
), ops[i].
num_ˇŒs
);

6081 
	`f˛o£
(
Â
);

6082 
	}
}

6088 
	$ª£t_machöe
(
fú°
)

6090 
c•
 = 
c⁄åﬁ_°ack
 - 1;

6091 i‡(
fú°
)

6093 
•
 = &
°¨t_of_°ack
[ - 1];

6097 
	`p›_n_ñems
(
•
 - 
°¨t_of_°ack
 + 1);

6098 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
 = 0);

6100 
	}
}

6106 #ifde‡
TRACE_CODE


6107 *
	$gë_¨g
(
a
, 
b
)

6109 
buff
[10];

6110 *
‰om
, *
to
;

6112 
‰om
 = 
¥evious_pc
[
a
];

6113 
to
 = 
¥evious_pc
[
b
];

6114 i‡(
to
 - 
‰om
 < 2)

6118 i‡(
to
 - 
‰om
 == 2)

6120 
	`•rötf
(
buff
, "%d", 
‰om
[1]);

6121  
buff
;

6123 i‡(
to
 - 
‰om
 == 3)

6125 
¨g
;

6127 
	`COPY_SHORT
(&
¨g
, 
‰om
 + 1);

6128 
	`•rötf
(
buff
, "%d", ()
¨g
);

6129  
buff
;

6131 i‡(
to
 - 
‰om
 == 5)

6133 
¨g
;

6135 
	`COPY_INT
(&
¨g
, 
‰om
 + 1);

6136 
	`•rötf
(
buff
, "%d", 
¨g
);

6137  
buff
;

6140 
	}
}

6142 
	$œ°_ö°ru˘i⁄s
()

6144 
i
;

6146 
i
 = 
œ°
;

6149 i‡(
¥evious_ö°ru˘i⁄
[
i
] != 0)

6151 
	`debug_mesßge
("%6x: %3d %8†%-25†(%d)\n", 
¥evious_pc
[
i
], 
¥evious_ö°ru˘i⁄
[i], 
	`gë_¨g
(i, (ò+ 1Ë% (Öªvious_ö°ru˘i⁄ / (ËË), 
	`gë_f_«me
(previous_instruction[i]),

6152 
°ack_size
[
i
] + 1);

6154 
i
 = (ò+ 1Ë% ( 
¥evious_ö°ru˘i⁄
 / () );

6157 
i
 !
œ°
);

6158  
œ°
;

6159 
	}
}

6168 
svÆue_t
 *
	$≠∂y_ma°î_ob
(*
fun
, 
num_¨g
)

6170 
	`IF_DEBUG
(
svÆue_t
 *
ex≥˘ed_•
);

6172 i‡(!
ma°î_ob
)

6174 
	`p›_n_ñems
(
num_¨g
);

6175  (
svÆue_t
*) - 1;

6177 
ˇŒ_‹igö
 = 
ORIGIN_DRIVER
;

6179 
	`IF_DEBUG
(
ex≥˘ed_•
 = 
•
 - 
num_¨g
);

6180 i‡(
	`≠∂y_low
(
fun
, 
ma°î_ob
, 
num_¨g
) == 0)

6184 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "sapply");

6185 
≠∂y_ªt_vÆue
 = *
•
--;

6186 
	`DEBUG_CHECK
(
ex≥˘ed_•
 !
•
, "Corrupt stackÖointer.\n");

6187  &
≠∂y_ªt_vÆue
;

6188 
	}
}

6194 
svÆue_t
 *
	$ß„_≠∂y_ma°î_ob
(*
fun
, 
num_¨g
)

6196 i‡(!
ma°î_ob
)

6198 
	`p›_n_ñems
(
num_¨g
);

6199  (
svÆue_t
*) - 1;

6201  
	`ß„_≠∂y
(
fun
, 
ma°î_ob
, 
num_¨g
, 
ORIGIN_DRIVER
);

6202 
	}
}

6208 
	$ªmove_obje˘_‰om_°ack
(
obje˘_t
 *
ob
)

6210 
svÆue_t
 *
svp
;

6212 
svp
 = 
°¨t_of_°ack
; sv∞<
•
; svp++)

6214 i‡(
svp
->
ty≥
 !
T_OBJECT
)

6218 i‡(
svp
->
u
.
ob
 != ob)

6222 
	`‰ì_obje˘
(
svp
->
u
.
ob
, "remove_object_from_stack");

6223 
svp
->
ty≥
 = 
T_NUMBER
;

6224 
svp
->
u
.
numbî
 = 0;

6226 
	}
}

6232 
	$°Ωªf
(*
p
, *
s
)

6234 *
p
)

6235 i‡(*
p
++ !*
s
++)

6240 
	}
}

6246 
	$_°πof
(*
≈å
, **
íd±r
)

6248 *
s
 = 
≈å
;

6249 
acc
;

6250 
√g
, 
c
, 
™y
, 
div
;

6252 
div
 = 1;

6253 
√g
 = 0;

6259 
c
 = *
s
++;

6262 
	`is•a˚
(
c
) );

6263 i‡(
c
 == '-')

6265 
√g
 = 1;

6266 
c
 = *
s
++;

6268 i‡(
c
 == '+')

6270 
c
 = *
s
++;

6273 
acc
 = 0, 
™y
 = 0;; 
c
 = *
s
++)

6275 i‡(
	`isdigô
(
c
) )

6277 
c
 -= '0';

6279 i‡–(
div
 =1Ë&& (
c
 == '.') )

6281 
div
 = 10;

6288 i‡(
div
 == 1)

6290 
acc
 *= ()10;

6291 
acc
 +()
c
;

6295 
acc
 +()
c
 / ()
div
;

6296 
div
 *= 10;

6298 
™y
 = 1;

6301 i‡(
√g
)

6303 
acc
 = -ácc;

6306 i‡(
íd±r
 != 0)

6308 *
íd±r
 = 
™y
 ? 
s
 - 1: (*)
≈å
;

6311  
acc
;

6312 
	}
}

6318 #ifde‡
DEBUGMALLOC_EXTENSIONS


6319 
	$m¨k_°ack
()

6321 
svÆue_t
 *
sv
;

6323 
sv
 = 
°¨t_of_°ack
; sv <
•
; sv++)

6325 
	`m¨k_svÆue
(
sv
);

6327 
	}
}

6332 
	$ßve_c⁄ãxt
(
îr‹_c⁄ãxt_t
 *
ec⁄
)

6334 i‡(
c•
 =&
c⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
 - 1])

6340 
ec⁄
->
ßve_comm™d_givî
 = 
comm™d_givî
;

6341 
ec⁄
->
ßve_•
 = 
•
;

6342 
ec⁄
->
ßve_c•
 = 
c•
;

6343 
ec⁄
->
ßve_c⁄ãxt
 = 
cuºít_îr‹_c⁄ãxt
;

6345 
cuºít_îr‹_c⁄ãxt
 = 
ec⁄
;

6347 
	}
}

6353 
	$p›_c⁄ãxt
(
îr‹_c⁄ãxt_t
 *
ec⁄
)

6355 
cuºít_îr‹_c⁄ãxt
 = 
ec⁄
->
ßve_c⁄ãxt
;

6356 
	}
}

6359 
	$ª°‹e_c⁄ãxt
(
îr‹_c⁄ãxt_t
 *
ec⁄
)

6361 
comm™d_givî
 = 
ec⁄
->
ßve_comm™d_givî
;

6362 
	`DEBUG_CHECK
(
c•
 < 
ec⁄
->
ßve_c•
, "csp is belowÉcon->csp before unwinding.\n");

6363 i‡(
c•
 > 
ec⁄
->
ßve_c•
)

6366 #ifde‡
PROFILE_FUNCTIONS


6369 i‡(
c•
 > 
ec⁄
->
ßve_c•
 + 1)

6371 
c•
 = 
ec⁄
->
ßve_c•
 + 1;

6372 
cuºít_¥og
 = (
c•
 + 1)->
¥og
;

6377 
c•
 = 
ec⁄
->
ßve_c•
 + 1;

6379 
	`p›_c⁄åﬁ_°ack
();

6381 
	`p›_n_ñems
(
•
 - 
ec⁄
->
ßve_•
);

6382 
	}
}

	@src/lex.c

16 
	#SUPPRESS_COMPILER_INLINES


	)

17 
	~"°d.h
"

18 
	~"fûe_ö˛.h
"

19 
	~"Õc_ö˛.h
"

20 
	~"compûî.h
"

21 #ifde‡
WIN32


22 
	~"gømm¨.h
"

24 
	~"gømm¨.èb.h
"

26 
	~"s¸©ch∑d.h
"

27 
	~"¥ïro˚ss.h
"

28 
	~"md.h
"

29 
	~"hash.h
"

30 
	~"fûe.h
"

31 
	~"cc.h
"

41 
	#NELEM
(
a
Ë( (aË/ (◊)[0]))

	)

42 
	#LEX_EOF
 ((Ë
EOF
)

	)

44 
	gÀx_˘y≥
[256] =

52 
	#is_w•a˚
(
c
Ë
Àx_˘y≥
[()(c)]

	)

54 
	gcuºít_löe
;

55 
	gcuºít_löe_ba£
;

56 
	gcuºít_löe_ßved
;

58 
	gtŸÆ_löes
;

59 *
	gcuºít_fûe
;

60 
	gcuºít_fûe_id
;

63 
	g¥agmas
;

65 
	gnum_∑r£_îr‹
;

67 
Õc_¥edef_s
 *
	gÕc_¥edefs
 = 
NULL
;

69 
Õc_¥edef_s
 
	gcomm™d_löe_¥edefs
[20];

71 
	gyyö_desc
;

72 
	gÀx_Áèl
;

73 **
	göc_li°
;

74 
	göc_li°_size
;

75 
	gdeföes_√ed_‰ìd
 = 0;

76 *
	gœ°_∆
;

77 
	g√x∑nds
 = 0;

79 
	#EXPANDMAX
 25000

	)

81 
	gyyãxt
[
MAXLINE
];

82 *
	gouç
;

84 
	söc°©e_s


86 
öc°©e_s
 *
	m√xt
;

87 
	myyö_desc
;

88 
	mlöe
;

89 *
	mfûe
;

90 
	mfûe_id
;

91 *
	mœ°_∆
;

92 *
	mouç
;

93 } 
	töc°©e_t
;

95 
öc°©e_t
 *
	gö˘›
 = 0;

98 
	#MAX_INCLUDE_DEPTH
 32

	)

99 
	gö˙um
;

102 
	#MAX_FUNCTION_DEPTH
 10

	)

104 
fun˘i⁄_c⁄ãxt_t
 
	gfun˘i⁄_c⁄ãxt_°ack
[
MAX_FUNCTION_DEPTH
];

105 
	gœ°_fun˘i⁄_c⁄ãxt
;

106 
fun˘i⁄_c⁄ãxt_t
 *
	gcuºít_fun˘i⁄_c⁄ãxt
 = 0;

121 
keyw‹d_t
 
	g¥edefs
[] =

122 
	~"gømm¨/efun_defs.c
"

124 *
›ti⁄_defs
[] =

125 
	~"gømm¨/›ti⁄_defs.c
"

127 
keyw‹d_t
 
ªsw‹ds
[] =

129 #ifde‡
DEBUG


131 "__TREE__", 
L_TREE
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

136 #ifde‡
ARRAY_RESERVED_WORD


138 "¨øy", 
L_ARRAY
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

149 "bªak", 
L_BREAK
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

153 #i‚de‡
DISALLOW_BUFFER_TYPE


155 "buf„r", 
L_BASIC_TYPE
, 
TYPE_BUFFER
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

161 "ˇ£", 
L_CASE
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

166 "ˇtch", 
L_CATCH
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

171 "˛ass", 
L_CLASS
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

176 "c⁄töue", 
L_CONTINUE
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

181 "deÁu…", 
L_DEFAULT
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

186 "do", 
L_DO
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

191 "efun", 
L_EFUN
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

196 "ñ£", 
L_ELSE
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

201 "Êﬂt", 
L_BASIC_TYPE
, 
TYPE_REAL
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

206 "f‹", 
L_FOR
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

211 "f‹óch", 
L_FOREACH
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

216 "fun˘i⁄", 
L_BASIC_TYPE
, 
TYPE_FUNCTION
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

221 "if", 
L_IF
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

226 "ö", 
L_IN
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

231 "öhîô", 
L_INHERIT
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

236 "öt", 
L_BASIC_TYPE
, 
TYPE_NUMBER
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

241 "m≠pög", 
L_BASIC_TYPE
, 
TYPE_MAPPING
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

246 "mixed", 
L_BASIC_TYPE
, 
TYPE_ANY
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

251 "√w", 
L_NEW
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

256 "nomask", 
L_TYPE_MODIFIER
, 
NAME_NO_MASK
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

261 "obje˘", 
L_BASIC_TYPE
, 
TYPE_OBJECT
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

266 "¥iv©e", 
L_TYPE_MODIFIER
, 
NAME_PRIVATE
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

271 "¥Ÿe˘ed", 
L_TYPE_MODIFIER
, 
NAME_PROTECTED
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

276 "public", 
L_TYPE_MODIFIER
, 
NAME_PUBLIC
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

281 "ªtu∫", 
L_RETURN
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

286 "ssˇnf", 
L_SSCANF
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

291 "°©ic", 
L_TYPE_MODIFIER
, 
NAME_STATIC
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

295 #ifde‡
HAS_STATUS_TYPE


297 "°©us", 
L_BASIC_TYPE
, 
TYPE_NUMBER
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

303 "°rög", 
L_BASIC_TYPE
, 
TYPE_STRING
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

308 "swôch", 
L_SWITCH
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

313 "time_ex¥essi⁄", 
L_TIME_EXPRESSION
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

318 "v¨¨gs", 
L_TYPE_MODIFIER
, 
NAME_VARARGS
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

323 "void", 
L_BASIC_TYPE
, 
TYPE_VOID
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

328 "whûe", 
L_WHILE
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

332 #ifde‡
DBVAR_NOASSIGN


334 "dbv¨_nﬂssign", 
L_TYPE_MODIFIER
, 
NAME_DBVAR_NOASSIGN
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

340 
idít_hash_ñem_t
 **
	gidít_hash_èbÀ
;

341 
idít_hash_ñem_t
 **
	gidít_hash_hód
;

342 
idít_hash_ñem_t
 **
	gidít_hash_èû
;

344 
idít_hash_ñem_t
 *
	gidít_dúty_li°
 = 0;

346 
ö°r_t
 
	gö°rs
[
MAX_INSTRS
];

347 
	gnum_buf
[20];

349 
	#TERM_ADD_INPUT
 1

	)

350 
	#TERM_INCLUDE
 2

	)

351 
	#TERM_START
 4

	)

353 
	slöked_buf_s


355 
löked_buf_s
 *
	m¥ev
;

356 
	mãrm_ty≥
;

357 
	mbuf
[
DEFMAX
];

358 *
	mbuf_íd
;

359 *
	mouç
;

360 *
	mœ°_∆
;

361 } 
	tlöked_buf_t
;

363 
löked_buf_t
 
	ghód_lbuf
 =

365 
NULL
, 
TERM_START
, "", 0, 0, 0

367 
löked_buf_t
 *
	gcur_lbuf
;

369 
h™dÀ_deföe
(*);

370 
‰ì_deföes
();

371 
add_deföe
(*, , *);

372 
add_¥edeföe
(*, , *);

373 
ex∑nd_deföe
();

374 
add_öput
(*);

375 
c⁄d_gë_exp
();

376 
mîge
(*
«me
, *
de°
);

377 
add_quŸed_¥edeföe
(*, *);

378 
Àxîr‹
(*);

379 
skù_to
(*, *);

380 
h™dÀ_c⁄d
();

381 
öc_›í
(*, *);

382 
h™dÀ_ö˛ude
(*);

383 
gë_ãrmö©‹
(*);

384 
gë_¨øy_block
(*);

385 
gë_ãxt_block
(*);

386 
skù_löe
();

387 
skù_commít
();

388 
dñåaû
(*);

389 
h™dÀ_¥agma
(*);

390 
cmygëc
();

391 
ªfûl
();

392 
ªfûl_buf„r
();

393 
exgëc
();

394 
ﬁd_func
();

395 
idít_hash_ñem_t
 *
quick_Æloc_idít_íåy
();

396 
yyîr‹p
(*);

398 
	#LEXER


	)

399 
	~"¥ïro˚ss.c
"

401 
	$mîge
(*
«me
, *
de°
)

403 *
‰om
;

405 
	`°r˝y
(
de°
, 
cuºít_fûe
);

406 i‡–(
‰om
 = 
	`°ºchr
(
de°
, '/') ) )

409 *
‰om
 = 0;

415 *
de°
 = 0;

418 
‰om
 = 
«me
;

419 *
‰om
 == '/')

421 
‰om
++;

422 *
de°
 = 0;

425 *
‰om
)

427 i‡(!
	`°∫cmp
(
‰om
, "../", 3) )

429 *
tmp
;

431 i‡(*
de°
 == 0)

436 
tmp
 = 
	`°ºchr
(
de°
, '/');

437 i‡(
tmp
 =
NULL
)

440 *
de°
 = 0;

444 *
tmp
 = 0;

446 
‰om
 += 3;

448 i‡(!
	`°∫cmp
(
‰om
, "./", 2) )

450 
‰om
 += 2;

455 *
q
;

457 i‡(*
de°
)

459 
	`°rˇt
(
de°
, "/");

462 
q
 = 
	`°rchr
(
‰om
, '/');

464 i‡(
q
)

467 *
‰om
 == '/')

470 
‰om
++;

472 
	`°∫ˇt
(
de°
, 
‰om
, 
q
 - from);

473 
‰om
 = 
q
 + 1; *from == '/'; from++)

479 
	`°rˇt
(
de°
, 
‰om
);

484 
	}
}

490 
	$yyîr‹p
(*
s
)

492 
buf
[200];

493 
	`•rötf
(
buf
, 
s
, '#');

494 
	`yyîr‹
(
buf
);

495 
Àx_Áèl
++;

496 
	}
}

502 
	$Àxîr‹
(*
s
)

504 
	`yyîr‹
(
s
);

505 
Àx_Áèl
++;

506 
	}
}

512 
	$skù_to
(*
tokí
, *
©okí
)

514 
b
[20], *
p
;

515 
c
;

516 *
yyp
 = 
ouç
, *
°¨ç
;

517 *
b_íd
 = 
b
 + 19;

518 
√°
;

520 
√°
 = 0;;)

522 i‡–(
c
 = *
yyp
++) == '#')

524 
	`is_w•a˚
(
c
 = *
yyp
++) )

526 
°¨ç
 = 
yyp
 - 1;

527 
p
 = 
b
; !
	`is•a˚
(
c
Ë&& c !
LEX_EOF
; c = *
yyp
++)

529 i‡(
p
 < 
b_íd
)

531 *
p
++ = 
c
;

538 *
p
 = 0;

539 i‡(!
	`°rcmp
(
b
, "if") || !strcmp(b, "ifdef") || !strcmp(b, "ifndef") )

541 
√°
++;

543 i‡(
√°
 > 0)

545 i‡(!
	`°rcmp
(
b
, "endif") )

547 
√°
--;

552 i‡(!
	`°rcmp
(
b
, 
tokí
) )

554 
ouç
 = 
°¨ç
;

555 *--
ouç
 = '#';

558 i‡(
©okí
 && !
	`°rcmp
(
b
,átoken) )

560 
ouç
 = 
°¨ç
;

561 *--
ouç
 = '#';

564 i‡(!
	`°rcmp
(
b
, "elif") )

566 
ouç
 = 
°¨ç
;

567 *--
ouç
 = '#';

568  (
©okí
 == 0);

572 
c
 !'\n' && c !
LEX_EOF
)

574 
c
 = *
yyp
++;

576 i‡(
c
 =
LEX_EOF
)

578 
	`Àxîr‹
("QTZ_ServerEngine:UnexpectedÉnd of file while skipping");

579 
ouç
 = 
yyp
 - 1;

582 
cuºít_löe
++;

583 
tŸÆ_löes
++;

584 i‡(
yyp
 =
œ°_∆
 + 1)

586 
ouç
 = 
yyp
;

587 
	`ªfûl_buf„r
();

588 
yyp
 = 
ouç
;

591 
	}
}

597 
	$öc_›í
(*
buf
, *
«me
)

599 
i
, 
f
;

600 *
p
;

602 
	`mîge
(
«me
, 
buf
);

603 i‡–(
f
 = 
	`›í
(
buf
, 
O_RDONLY
) ) != - 1)

605  
f
;

610 
p
 = 
	`°rchr
(
«me
, '.');Ö;Ö = strchr(p + 1, '.') )

612 i‡(
p
[1] == '.')

617 
i
 = 0; i < 
öc_li°_size
; i++)

619 
	`•rötf
(
buf
, "%s/%s", 
öc_li°
[
i
], 
«me
);

620 i‡–(
f
 = 
	`›í
(
buf
, 
O_RDONLY
) ) != - 1)

622  
f
;

626 
	}
}

632 
	#ö˛ude_îr‹
(
x
Ë
	`SAFE
(\

633 
cuºít_löe
--;\

634 
	`yyîr‹
(
x
);\

635 
cuºít_löe
++;\

636 )

	)

638 
	$h™dÀ_ö˛ude
(*
«me
)

640 *
p
;

641 
buf
[1024];

642 
öc°©e_t
 *
is
;

643 
dñim
, 
f
;

645 i‡(*
«me
 != '"' && *name != '<')

647 
de‚_t
 *
d
;

649 i‡–(
d
 = 
	`lookup_deföe
(
«me
ËË&& d->
«rgs
 == - 1)

651 *
q
;

653 
q
 = 
d
->
exps
;

654 
	`is•a˚
(*
q
) )

656 
q
++;

658 
	`h™dÀ_ö˛ude
(
q
);

662 
	`ö˛ude_îr‹
("QTZ_ServerEngine:MissingÜeading \" or < in #include");

666 
dñim
 = *
«me
++ == '"' ? '"' : '>';

667 
p
 = 
«me
; *∞&& *∞!
dñim
;Ö++)

669 i‡(! *
p
)

671 
	`ö˛ude_îr‹
("QTZ_ServerEngine:MissingÅrailing \" or > in #include");

674 i‡(
	`°æí
(
«me
Ë> (
buf
) - 100)

676 
	`ö˛ude_îr‹
("QTZ_ServerEngine:IncludeÇameÅooÜong.");

679 *
p
 = 0;

680 i‡(++
ö˙um
 =
MAX_INCLUDE_DEPTH
)

682 
	`ö˛ude_îr‹
("QTZ_ServerEngine:Maximum include depthÉxceeded.");

684 i‡–(
f
 = 
	`öc_›í
(
buf
, 
«me
) ) != - 1)

686 
is
 = 
	`ALLOCATE
(
öc°©e_t
, 
TAG_COMPILER
, "handle_include: 1");

687 
is
->
yyö_desc
 = yyin_desc;

688 
is
->
löe
 = 
cuºít_löe
;

689 
is
->
fûe
 = 
cuºít_fûe
;

690 
is
->
fûe_id
 = 
cuºít_fûe_id
;

691 
is
->
œ°_∆
 =Üast_nl;

692 
is
->
√xt
 = 
ö˘›
;

693 
is
->
ouç
 = outp;

694 
ö˘›
 = 
is
;

695 
cuºít_löe
--;

696 
	`ßve_fûe_öfo
(
cuºít_fûe_id
, 
cuºít_löe
 - 
cuºít_löe_ßved
);

697 
cuºít_löe_ba£
 +
cuºít_löe
;

698 
cuºít_löe_ßved
 = 0;

699 
cuºít_löe
 = 1;

700 
cuºít_fûe
 = 
	`make_sh¨ed_°rög
(
buf
);

701 
cuºít_fûe_id
 = 
	`add_¥ogøm_fûe
(
buf
, 0);

702 
yyö_desc
 = 
f
;

703 
	`ªfûl_buf„r
();

707 
	`•rötf
(
buf
, "QTZ_SîvîEngöe:C™nŸ #ö˛udê%s", 
«me
);

708 
	`ö˛ude_îr‹
(
buf
);

710 
	}
}

716 
	$gë_ãrmö©‹
(*
ãrmö©‹
)

718 
c
, 
j
 = 0;

720  ( (
c
 = *
ouç
++Ë!
LEX_EOF
Ë&& (
	`iß um
(c) || c == '_') )

722 
ãrmö©‹
[
j
++] = 
c
;

725 
ãrmö©‹
[
j
] = '\0';

727 
	`is_w•a˚
(
c
Ë&& c !
LEX_EOF
)

729 
c
 = *
ouç
++;

732 i‡(
c
 =
LEX_EOF
)

737 i‡(
c
 == '\n')

739 
cuºít_löe
++;

740 i‡(
ouç
 =
œ°_∆
 + 1)

742 
	`ªfûl_buf„r
();

747 
ouç
--;

750  
j
;

751 
	}
}

757 
	#MAXCHUNK
 (
MAXLINE
*4)

	)

758 
	#NUMCHUNKS
 (
DEFMAX
/
MAXCHUNK
)

	)

760 
	#NEWCHUNK
(
löe
) \

761 i‡(
Àn
 =
MAXCHUNK
 - 1) { \

762 
löe
[
curchunk
][
MAXCHUNK
 - 1] = '\0'; \

763 i‡(
curchunk
 =
NUMCHUNKS
 - 1) { \

764 
ªs
 = -2; \

767 
löe
[++
curchunk
] = \

768 (*)
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "array/text chunk"); \

769 
Àn
 = 0; \

770 }

	)

772 
	$gë_¨øy_block
(*
ãrm
)

774 
size_t
 
ãrmÀn
;

775 *
¨øy_löe
[
NUMCHUNKS
];

776 
hódî
, 
Àn
;

777 
°¨ços
, 
°¨tchunk
;

778 
curchunk
, 
ªs
;

779 
c
, 
i
;

780 *
yyp
 = 
ouç
;

785 
ãrmÀn
 = 
	`°æí
(
ãrm
);

786 
¨øy_löe
[0] = (*)
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "array_block");

787 
¨øy_löe
[0][0] = '(';

788 
¨øy_löe
[0][1] = '{';

789 
¨øy_löe
[0][2] = '"';

790 
¨øy_löe
[0][3] = '\0';

791 
hódî
 = 1;

792 
Àn
 = 3;

793 
°¨ços
 = 3;

794 
°¨tchunk
 = 0;

795 
curchunk
 = 0;

796 
ªs
 = 0;

800  ( (
c
 = *
yyp
++Ë!'\n'Ë&& (¯!
LEX_EOF
) )

802 
	`NEWCHUNK
(
¨øy_löe
);

803 i‡(
c
 == '"' || c == '\\')

805 
¨øy_löe
[
curchunk
][
Àn
++] = '\\';

806 
	`NEWCHUNK
(
¨øy_löe
);

808 
¨øy_löe
[
curchunk
][
Àn
++] = 
c
;

811 i‡(
c
 ='\n' && (
yyp
 =
œ°_∆
 + 1) )

813 
ouç
 = 
yyp
;

814 
	`ªfûl_buf„r
();

815 
yyp
 = 
ouç
;

821 
¨øy_löe
[
curchunk
][
Àn
] = '\0';

823 i‡(
ªs
)

825 
ouç
 = 
yyp
;

832 i‡–(!
	`°∫cmp
(
¨øy_löe
[
°¨tchunk
] + 
°¨ços
, 
ãrm
, 
ãrmÀn
ËË&& (!
	`iß um
(*(array_line[startchunk] + startpos +Åermlen) ) ) && (*(array_line[startchunk] + startpos +Åermlen) != '_') )

837 i‡(
	`°æí
(
¨øy_löe
[
°¨tchunk
] + 
°¨ços
Ë=
ãrmÀn
)

839 
cuºít_löe
++;

840 
ouç
 = 
yyp
;

847 
ouç
 = --
yyp
;

849 
i
 = 
curchunk
; i > 
°¨tchunk
; i--)

851 
	`add_öput
(
¨øy_löe
[
i
]);

853 
	`add_öput
(
¨øy_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
);

859 
¨øy_löe
[
°¨tchunk
][
°¨ços
 - 
hódî
] = '\0';

864 *--
ouç
 = ')';

865 *--
ouç
 = '}';

866 
i
 = 
°¨tchunk
; i >= 0; i--)

868 
	`add_öput
(
¨øy_löe
[
i
]);

871 
ªs
 = 1;

879 i‡(
c
 =
LEX_EOF
 && 
ö˘›
 == 0)

881 
ªs
 = - 1;

882 
ouç
 = 
yyp
;

885 i‡(
c
 == '\n')

887 
cuºít_löe
++;

895 i‡(
Àn
 + 
ãrmÀn
 + 5 > 
MAXCHUNK
)

897 i‡(
curchunk
 =
NUMCHUNKS
 - 1)

899 
ªs
 = - 2;

900 
ouç
 = 
yyp
;

903 
¨øy_löe
[++
curchunk
] = (*)
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "array_block");

904 
Àn
 = 0;

909 
¨øy_löe
[
curchunk
][
Àn
++] = '"';

910 
¨øy_löe
[
curchunk
][
Àn
++] = ',';

911 
¨øy_löe
[
curchunk
][
Àn
++] = '"';

912 
¨øy_löe
[
curchunk
][
Àn
] = '\0';

914 
°¨tchunk
 = 
curchunk
;

915 
°¨ços
 = 
Àn
;

916 
hódî
 = 2;

923 
i
 = 
curchunk
; i >= 0; i--)

925 
	`FREE
(
¨øy_löe
[
i
]);

928  
ªs
;

929 
	}
}

935 
	$gë_ãxt_block
(*
ãrm
)

937 
size_t
 
ãrmÀn
;

938 *
ãxt_löe
[
NUMCHUNKS
];

939 
Àn
;

940 
°¨ços
, 
°¨tchunk
;

941 
curchunk
, 
ªs
;

942 
c
, 
i
;

943 *
yyp
 = 
ouç
;

948 
ãrmÀn
 = 
	`°æí
(
ãrm
);

949 
ãxt_löe
[0] = (*)
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "text_block");

950 
ãxt_löe
[0][0] = '"';

951 
ãxt_löe
[0][1] = '\0';

952 
Àn
 = 1;

953 
°¨ços
 = 1;

954 
°¨tchunk
 = 0;

955 
curchunk
 = 0;

956 
ªs
 = 0;

960  ( (
c
 = *
yyp
++Ë!'\n'Ë&& (¯!
LEX_EOF
) )

962 
	`NEWCHUNK
(
ãxt_löe
);

963 i‡(
c
 == '"' || c == '\\')

965 
ãxt_löe
[
curchunk
][
Àn
++] = '\\';

966 
	`NEWCHUNK
(
ãxt_löe
);

968 
ãxt_löe
[
curchunk
][
Àn
++] = 
c
;

971 i‡(
c
 ='\n' && 
yyp
 =
œ°_∆
 + 1)

973 
ouç
 = 
yyp
;

974 
	`ªfûl_buf„r
();

975 
yyp
 = 
ouç
;

981 
ãxt_löe
[
curchunk
][
Àn
] = '\0';

983 i‡(
ªs
)

985 
ouç
 = 
yyp
;

992 i‡–(!
	`°∫cmp
(
ãxt_löe
[
°¨tchunk
] + 
°¨ços
, 
ãrm
, 
ãrmÀn
ËË&& (!
	`iß um
(*(text_line[startchunk] + startpos +Åermlen) ) ) && (*(text_line[startchunk] + startpos +Åermlen) != '_') )

994 i‡(
	`°æí
(
ãxt_löe
[
°¨tchunk
] + 
°¨ços
Ë=
ãrmÀn
)

996 
cuºít_löe
++;

997 
ouç
 = 
yyp
;

1001 *
p
, *
q
;

1005 
ouç
 = --
yyp
;

1007 
i
 = 
curchunk
; i > 
°¨tchunk
; i--)

1010 
p
 = 
ãxt_löe
[
i
];

1011 *
p
 && *p != '\\')

1013 
p
++;

1015 i‡(*
p
)

1017 
q
 = 
p
++;

1020 *
q
++ = *
p
++;

1021 i‡(*
p
 == '\\')

1023 
p
++;

1027 *
p
);

1028 *
q
 = 0;

1031 
	`add_öput
(
ãxt_löe
[
i
]);

1033 
p
 = 
ãxt_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
;

1034 *
p
 && *p != '\\')

1036 
p
++;

1038 i‡(*
p
)

1040 
q
 = 
p
++;

1043 *
q
++ = *
p
++;

1044 i‡(*
p
 == '\\')

1046 
p
++;

1050 *
p
);

1051 *
q
 = 0;

1053 
	`add_öput
(
ãxt_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
);

1059 
ãxt_löe
[
°¨tchunk
][
°¨ços
] = '\0';

1064 *--
ouç
 = '\0';

1065 *--
ouç
 = '"';

1067 
i
 = 
°¨tchunk
; i >= 0; i--)

1069 
	`add_öput
(
ãxt_löe
[
i
]);

1072 
ªs
 = 1;

1080 i‡(
c
 =
LEX_EOF
 && 
ö˘›
 == 0)

1082 
ªs
 = - 1;

1083 
ouç
 = 
yyp
;

1086 i‡(
c
 == '\n')

1088 
cuºít_löe
++;

1096 i‡(
Àn
 + 
ãrmÀn
 + 4 > 
MAXCHUNK
)

1098 i‡(
curchunk
 =
NUMCHUNKS
 - 1)

1100 
ªs
 = - 2;

1101 
ouç
 = 
yyp
;

1104 
ãxt_löe
[++
curchunk
] = (*)
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "text_block");

1105 
Àn
 = 0;

1110 
ãxt_löe
[
curchunk
][
Àn
++] = '\\';

1111 
ãxt_löe
[
curchunk
][
Àn
++] = 'n';

1112 
ãxt_löe
[
curchunk
][
Àn
] = '\0';

1114 
°¨tchunk
 = 
curchunk
;

1115 
°¨ços
 = 
Àn
;

1122 
i
 = 
curchunk
; i >= 0; i--)

1124 
	`FREE
(
ãxt_löe
[
i
]);

1127  
ªs
;

1128 
	}
}

1134 
	$skù_löe
()

1136 
c
;

1137 *
yyp
 = 
ouç
;

1139  ( (
c
 = *
yyp
++Ë!'\n'Ë&& (¯!
LEX_EOF
) )

1143 i‡(
c
 == '\n')

1145 
yyp
--;

1147 
ouç
 = 
yyp
;

1148 
	}
}

1154 
	$skù_commít
()

1156 
c
 = '*';

1157 *
yyp
 = 
ouç
;

1161  (
c
 = *
yyp
++) != '*')

1163 i‡(
c
 =
LEX_EOF
)

1165 
ouç
 = --
yyp
;

1166 
	`Àxîr‹
("QTZ_ServerEngine:End of file iná comment");

1169 i‡(
c
 == '\n')

1171 
√x∑nds
 = 0;

1172 
cuºít_löe
++;

1173 i‡(
yyp
 =
œ°_∆
 + 1)

1175 
ouç
 = 
yyp
;

1176 
	`ªfûl_buf„r
();

1177 
yyp
 = 
ouç
;

1181 i‡(*(
yyp
 - 2) == '/')

1183 
	`yyw¨n
("QTZ_ServerEngine:/* found in comment.");

1187 i‡–(
c
 = *
yyp
++) == '/')

1189 
ouç
 = 
yyp
;

1192 i‡(
c
 == '\n')

1194 
√x∑nds
 = 0;

1195 
cuºít_löe
++;

1196 i‡(
yyp
 =
œ°_∆
 + 1)

1198 
ouç
 = 
yyp
;

1199 
	`ªfûl_buf„r
();

1200 
yyp
 = 
ouç
;

1205 
c
 == '*');

1207 
	}
}

1213 
	$dñåaû
(*
•
)

1215 *
p
;

1217 
p
 = 
•
;

1218 i‡(! *
p
)

1220 
	`Àxîr‹
("QTZ_ServerEngine:Illegal # command");

1224 *
p
 && !
	`is•a˚
(*p) )

1226 
p
++;

1228 *
p
 = 0;

1230 
	}
}

1236 
	#SAVEC
 \

1237 i‡(
yyp
 < 
yyãxt
+
MAXLINE
-5)\

1238 *
yyp
++ = 
c
;\

1240 
	`Àxîr‹
("QTZ_ServerEngine:LineÅooÜong");\

1242 }

	)

1246 *
	m«me
;

1247 
	mvÆue
;

1248 } 
	t¥agma_t
;

1250 
¥agma_t
 
	gour_¥agmas
[] =

1253 "°ri˘_ty≥s", 
PRAGMA_STRICT_TYPES


1258 "ßve_ty≥s", 
PRAGMA_SAVE_TYPES


1262 #ifde‡
BINARIES


1264 "ßve_bö¨y", 
PRAGMA_SAVE_BINARY


1270 "w¨nögs", 
PRAGMA_WARNINGS


1280 "show_îr‹_c⁄ãxt", 
PRAGMA_ERROR_CONTEXT


1289 
	$h™dÀ_¥agma
(*
°r
)

1291 
i
;

1292 
no_Êag
;

1294 i‡(
	`°∫cmp
(
°r
, "no_", 3) == 0)

1296 
°r
 += 3;

1297 
no_Êag
 = 1;

1301 
no_Êag
 = 0;

1304 
i
 = 0; 
our_¥agmas
[i].
«me
; i++)

1306 i‡(
	`°rcmp
(
our_¥agmas
[
i
].
«me
, 
°r
) == 0)

1308 i‡(
no_Êag
)

1310 
¥agmas
 &~
our_¥agmas
[
i
].
vÆue
;

1314 
¥agmas
 |
our_¥agmas
[
i
].
vÆue
;

1319 
	`yyw¨n
("QTZ_ServerEngine:Unknown #pragma, ignored.");

1320 
	}
}

1326 *
	$show_îr‹_c⁄ãxt
()

1328 
buf
[60];

1329 
yych¨
;

1330 
sub_c⁄ãxt
[25];

1331 *
yyp
, *
yyp2
;

1332 
Àn
;

1334 i‡(
yych¨
 == - 1)

1336 
	`°r˝y
(
buf
, "áround ");

1340 
	`°r˝y
(
buf
, " before ");

1342 
yyp
 = 
ouç
;

1343 
yyp2
 = 
sub_c⁄ãxt
;

1344 
Àn
 = 20;

1345 
Àn
--)

1347 i‡(*
yyp
 == '\n')

1349 i‡(
Àn
 == 19)

1351 
	`°rˇt
(
buf
, "theÉnd ofÜine");

1355 i‡(*
yyp
 =
LEX_EOF
)

1357 i‡(
Àn
 == 19)

1359 
	`°rˇt
(
buf
, "theÉnd of file");

1363 *
yyp2
++ = *
yyp
++;

1365 *
yyp2
 = 0;

1366 i‡(
yyp2
 !
sub_c⁄ãxt
)

1368 
	`°rˇt
(
buf
, 
sub_c⁄ãxt
);

1370 
	`°rˇt
(
buf
, "\n");

1371  
buf
;

1372 
	}
}

1379 #ifde‡
WIN32


1380 
	$c‹ª˘_ªad
(
h™dÀ
, *
buf
, 
cou¡
)

1382 
tmp
, 
size
 = 0;

1386 
tmp
 = 
	`ªad
(
h™dÀ
, 
buf
, 
cou¡
);

1387 i‡(
tmp
 < 0)

1389  
tmp
;

1391 i‡(
tmp
 == 0)

1393  
size
;

1395 
size
 +
tmp
;

1396 
cou¡
 -
tmp
;

1397 
buf
 +
tmp
;

1400 
cou¡
 > 0);

1401  
size
;

1402 
	}
}

1404 
	#c‹ª˘_ªad
 
ªad


	)

1407 
	$ªfûl_buf„r
()

1409 i‡(
cur_lbuf
 !&
hód_lbuf
)

1411 i‡(
ouç
 >
cur_lbuf
->
buf_íd
 && cur_lbuf->
ãrm_ty≥
 =
TERM_ADD_INPUT
)

1415 
löked_buf_t
 *
¥ev_lbuf
 = 
cur_lbuf
->
¥ev
;

1417 
	`FREE
(
cur_lbuf
);

1418 
cur_lbuf
 = 
¥ev_lbuf
;

1419 
ouç
 = 
cur_lbuf
->outp;

1420 
œ°_∆
 = 
cur_lbuf
->last_nl;

1421 i‡(
cur_lbuf
->
ãrm_ty≥
 =
TERM_ADD_INPUT
 || (
ouç
 !
œ°_∆
 + 1) )

1432 *
íd
;

1433 *
p
;

1434 
size
;

1436 i‡(!
ö˘›
)

1439 
íd
 = 
cur_lbuf
->
buf
 + 
DEFMAX
;

1440 i‡(
íd
 - 
cur_lbuf
->
buf_íd
 > 
MAXLINE
 + 5)

1442 
p
 = 
cur_lbuf
->
buf_íd
;

1447 
size
 = 
cur_lbuf
->
buf_íd
 - 
ouç
 + 1;

1448 
	`mem˝y
(
ouç
 - 
MAXLINE
 - 1, ouç - 1, 
size
);

1449 
ouç
 -
MAXLINE
;

1450 
p
 = 
ouç
 + 
size
 - 1;

1453 
size
 = 
	`c‹ª˘_ªad
(
yyö_desc
, 
p
, 
MAXLINE
);

1455 
cur_lbuf
->
buf_íd
 = 
p
 +
size
;

1456 i‡(
size
 < 
MAXLINE
)

1458 *(
œ°_∆
 = 
p
Ë
LEX_EOF
;

1461 *--
p
 != '\n')

1463 i‡(
p
 =
ouç
 - 1)

1465 
	`Àxîr‹
("QTZ_ServerEngine:LineÅooÜong.");

1466 *(
œ°_∆
 = 
cur_lbuf
->
buf_íd
 - 1) = '\n';

1469 
œ°_∆
 = 
p
;

1474 
Êag
 = 0;

1478 
íd
 = 
ö˘›
->
ouç
;

1481 i‡(
cur_lbuf
->
ãrm_ty≥
 =
TERM_INCLUDE
 && !(
íd
 >cur_lbuf->
buf
 &&Énd < cur_lbuf->bu‡+ 
DEFMAX
) )

1483 
íd
 = 
cur_lbuf
->
buf_íd
;

1484 
Êag
 = 1;

1487 
size
 = 
íd
 - 
ouç
 + 1;

1488 i‡(
ouç
 - 
cur_lbuf
->
buf
 > 2 *
MAXLINE
)

1490 
	`mem˝y
(
ouç
 - 
MAXLINE
 - 1, ouç - 1, 
size
);

1491 
ouç
 -
MAXLINE
;

1492 
p
 = 
ouç
 + 
size
 - 1;

1497 
löked_buf_t
 *
√w_lbuf
;

1498 *
√w_ouç
;

1500 i‡(!(
√w_lbuf
 = 
	`ALLOCATE
(
löked_buf_t
, 
TAG_COMPILER
, "refill_bufer") ) )

1502 
	`Àxîr‹
("QTZ_ServerEngine:Out of memory whenállocatingÇew buffer.\n");

1505 
cur_lbuf
->
œ°_∆
 =Üast_nl;

1506 
cur_lbuf
->
ouç
 = outp;

1507 
√w_lbuf
->
¥ev
 = 
cur_lbuf
;

1508 
√w_lbuf
->
ãrm_ty≥
 = 
TERM_INCLUDE
;

1509 
√w_ouç
 = 
√w_lbuf
->
buf
 + 
DEFMAX
 - 
MAXLINE
 - 
size
 - 5;

1510 
	`mem˝y
(
√w_ouç
 - 1, 
ouç
 - 1, 
size
);

1511 
cur_lbuf
 = 
√w_lbuf
;

1512 
ouç
 = 
√w_ouç
;

1513 
p
 = 
ouç
 + 
size
 - 1;

1514 
Êag
 = 1;

1517 
size
 = 
	`c‹ª˘_ªad
(
yyö_desc
, 
p
, 
MAXLINE
);

1519 
íd
 = 
p
 +
size
;

1520 i‡(
Êag
)

1522 
cur_lbuf
->
buf_íd
 = 
p
;

1524 i‡(
size
 < 
MAXLINE
)

1526 *(
œ°_∆
 = 
p
Ë
LEX_EOF
;

1529 *--
p
 != '\n')

1531 i‡(
p
 =
ouç
 - 1)

1533 
	`Àxîr‹
("QTZ_ServerEngine:LineÅooÜong.");

1534 *(
œ°_∆
 = 
íd
 - 1) = '\n';

1537 
œ°_∆
 = 
p
;

1541 
	}
}

1547 
	gfun˘i⁄_Êag
 = 0;

1549 
INLINE
 
	$push_fun˘i⁄_c⁄ãxt
()

1551 
fun˘i⁄_c⁄ãxt_t
 *
fc
;

1552 
∑r£_node_t
 *
node
;

1554 i‡(
œ°_fun˘i⁄_c⁄ãxt
 =
MAX_FUNCTION_DEPTH
 - 1)

1556 
	`yyîr‹
("QTZ_ServerEngine:FunctionÖointersÇestedÅoo deep.");

1559 
fc
 = &
fun˘i⁄_c⁄ãxt_°ack
[++
œ°_fun˘i⁄_c⁄ãxt
];

1560 
fc
->
num_∑ømëîs
 = 0;

1561 
fc
->
num_loˇls
 = 0;

1562 
node
 = 
	`√w_node_no_löe
();

1563 
node
->
l
.
ex¥
 =Çode;

1564 
node
->
r
.
ex¥
 = 0;

1565 
node
->
köd
 = 0;

1566 
fc
->
vÆues_li°
 = 
node
;

1567 
fc
->
bödabÀ
 = 0;

1568 
fc
->
∑ª¡
 = 
cuºít_fun˘i⁄_c⁄ãxt
;

1570 
cuºít_fun˘i⁄_c⁄ãxt
 = 
fc
;

1571 
	}
}

1577 
	$p›_fun˘i⁄_c⁄ãxt
()

1579 
cuºít_fun˘i⁄_c⁄ãxt
 = cuºít_fun˘i⁄_c⁄ãxt->
∑ª¡
;

1580 
œ°_fun˘i⁄_c⁄ãxt
--;

1581 
	}
}

1587 
	$ﬁd_func
()

1589 
	`add_öput
(
yyãxt
);

1590 
	`push_fun˘i⁄_c⁄ãxt
();

1591  
L_FUNCTION_OPEN
;

1592 
	}
}

1598 
	#ªtu∫_assign
(
›code
Ë{ 
yylvÆ
.
numbî
 = opcode;  
L_ASSIGN
; }

	)

1599 
	#ªtu∫_‹dî
(
›code
Ë{ 
yylvÆ
.
numbî
 = opcode;  
L_ORDER
; }

	)

1601 
	$yyÀx
()

1603 
∑πül
[
MAXLINE
 + 5];

1604 
ãrmö©‹
[
MAXLINE
 + 5];

1605 
is_Êﬂt
;

1606 
myªÆ
;

1607 *
∑πp
;

1609 *
yyp
;

1610 
c
;

1612 
yyãxt
[0] = 0;

1614 
∑πp
 = 
∑πül
;

1615 
∑πül
[0] = 0;

1619 i‡(
Àx_Áèl
)

1623 
c
 = *
ouç
++)

1625 
LEX_EOF
:

1626 i‡(
ö˘›
)

1628 
öc°©e_t
 *
p
;

1630 
p
 = 
ö˘›
;

1631 
	`˛o£
(
yyö_desc
);

1632 
	`ßve_fûe_öfo
(
cuºít_fûe_id
, 
cuºít_löe
 - 
cuºít_löe_ßved
);

1633 
cuºít_löe_ßved
 = 
p
->
löe
 - 1;

1636 
cuºít_löe_ba£
 +
cuºít_löe
 - 
cuºít_löe_ßved
;

1637 
	`‰ì_°rög
(
cuºít_fûe
);

1638 
√x∑nds
 = 0;

1639 i‡(
ouç
 >
cur_lbuf
->
buf_íd
)

1641 
löked_buf_t
 *
¥ev_lbuf
;

1642 i‡–(
¥ev_lbuf
 = 
cur_lbuf
->
¥ev
) )

1644 
	`FREE
(
cur_lbuf
);

1645 
cur_lbuf
 = 
¥ev_lbuf
;

1649 
cuºít_fûe
 = 
p
->
fûe
;

1650 
cuºít_fûe_id
 = 
p
->
fûe_id
;

1651 
cuºít_löe
 = 
p
->
löe
;

1653 
yyö_desc
 = 
p
->yyin_desc;

1654 
œ°_∆
 = 
p
->last_nl;

1655 
ouç
 = 
p
->outp;

1656 
ö˘›
 = 
p
->
√xt
;

1657 
ö˙um
--;

1658 
	`FREE
–(*)
p
);

1659 
ouç
[ - 1] = '\n';

1660 i‡(
ouç
 =
œ°_∆
 + 1)

1662 
	`ªfûl_buf„r
();

1666 i‡(
i·›
)

1668 
if°©e_t
 *
p
 = 
i·›
;

1670 
	`yyîr‹
(
p
->
°©e
 =
EXPECT_ENDIF
 ? "QTZ_ServerEngine:Missing #endif" : "QTZ_ServerEngine:Missing #else/#elif");

1671 
i·›
)

1673 
p
 = 
i·›
;

1674 
i·›
 = 
p
->
√xt
;

1675 
	`FREE
–(*)
p
);

1678 
ouç
--;

1682 
√x∑nds
 = 0;

1683 
cuºít_löe
++;

1684 
tŸÆ_löes
++;

1685 i‡(
ouç
 =
œ°_∆
 + 1)

1687 
	`ªfûl_buf„r
();

1698 *
ouç
++)

1701  
L_INC
;

1703 
	`ªtu∫_assign
(
F_ADD_EQ
);

1705 
ouç
--;

1711 *
ouç
++)

1714  
L_ARROW
;

1716  
L_DEC
;

1718 
	`ªtu∫_assign
(
F_SUB_EQ
);

1720 
ouç
--;

1726 *
ouç
++)

1729  
L_LAND
;

1731 
	`ªtu∫_assign
(
F_AND_EQ
);

1733 
ouç
--;

1739 *
ouç
++)

1742  
L_LOR
;

1744 
	`ªtu∫_assign
(
F_OR_EQ
);

1746 
ouç
--;

1752 i‡(*
ouç
++ == '=')

1754 
	`ªtu∫_assign
(
F_XOR_EQ
);

1756 
ouç
--;

1761 *
ouç
++)

1765 i‡(*
ouç
++ == '=')

1767 
	`ªtu∫_assign
(
F_LSH_EQ
);

1769 
ouç
--;

1770  
L_LSH
;

1773 
	`ªtu∫_‹dî
(
F_LE
);

1775 
ouç
--;

1781 *
ouç
++)

1785 i‡(*
ouç
++ == '=')

1787 
	`ªtu∫_assign
(
F_RSH_EQ
);

1789 
ouç
--;

1790  
L_RSH
;

1793 
	`ªtu∫_‹dî
(
F_GE
);

1795 
ouç
--;

1796 
	`ªtu∫_‹dî
(
F_GT
);

1801 i‡(*
ouç
++ == '=')

1803 
	`ªtu∫_assign
(
F_MULT_EQ
);

1805 
ouç
--;

1810 i‡(*
ouç
++ == '=')

1812 
	`ªtu∫_assign
(
F_MOD_EQ
);

1814 
ouç
--;

1818 *
ouç
++)

1821 
	`skù_commít
();

1824 
	`skù_löe
();

1827 
	`ªtu∫_assign
(
F_DIV_EQ
);

1829 
ouç
--;

1834 i‡(*
ouç
++ == '=')

1836  
L_EQ
;

1838 
ouç
--;

1839 
yylvÆ
.
numbî
 = 
F_ASSIGN
;

1840  
L_ASSIGN
;

1842 
yyp
 = 
ouç
;

1843 
	`is•a˚
(
c
 = *
yyp
++) )

1845 i‡(
c
 == '\n')

1847 
cuºít_löe
++;

1848 i‡(
yyp
 =
œ°_∆
 + 1)

1850 
ouç
 = 
yyp
;

1851 
	`ªfûl_buf„r
();

1852 
yyp
 = 
ouç
;

1857 
c
)

1861 
ouç
 = 
yyp
;

1862  
L_ARRAY_OPEN
;

1866 
ouç
 = 
yyp
;

1867  
L_MAPPING_OPEN
;

1871 i‡–(
c
 = *
yyp
++) == ':')

1873 
ouç
 = 
yyp
 -= 2;

1878 
	`is•a˚
(
c
) )

1880 i‡(
c
 == '\n')

1882 i‡–(
yyp
 =
œ°_∆
 + 1) )

1884 
ouç
 = 
yyp
;

1885 
	`ªfûl_buf„r
();

1886 
yyp
 = 
ouç
;

1888 
cuºít_löe
++;

1890 
c
 = *
yyp
++;

1893 
ouç
 = 
yyp
;

1895 i‡(
	`ißÕha
(
c
) || c == '_')

1897 
fun˘i⁄_Êag
 = 1;

1898 
∑r£_idítifõr
;

1901 
ouç
--;

1902 
	`push_fun˘i⁄_c⁄ãxt
();

1903  
L_FUNCTION_OPEN
;

1909 
ouç
 = 
yyp
 - 1;

1915 i‡(!
cuºít_fun˘i⁄_c⁄ãxt
)

1917 
	`yyîr‹
("QTZ_ServerEngine:$var illegal outside of functionÖointer.");

1920 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 == - 2)

1922 
	`yyîr‹
("QTZ_ServerEngine:$var illegal insideánonymous functionÖointer.");

1927 i‡(!
	`isdigô
(
c
 = *
ouç
++) )

1929 
ouç
--;

1932 
yyp
 = 
yyãxt
;

1933 
SAVEC
;

1936 i‡(!
	`isdigô
(
c
 = *
ouç
++) )

1940 
SAVEC
;

1942 
ouç
--;

1943 *
yyp
 = 0;

1944 
yylvÆ
.
numbî
 = 
	`©oi
(
yyãxt
) - 1;

1945 i‡(
yylvÆ
.
numbî
 < 0)

1947 
	`yyîr‹
("QTZ_ServerEngine:In functionÖarameter $num,Çum must be >= 1.");

1949 i‡(
yylvÆ
.
numbî
 > 255)

1951 
	`yyîr‹
("QTZ_ServerEngine:only 256Öarametersállowed.");

1953 i‡(
yylvÆ
.
numbî
 >
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
)

1955 
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 = 
yylvÆ
.
numbî
 + 1;

1957  
L_PARAMETER
;

1967 #i‚de‡
USE_TRIGRAPHS


1969  
c
;

1971  
c
;

1984 i‡(*
ouç
++ != '?')

1986 
ouç
--;

1989 *
ouç
++)

2010 
ouç
 -= 2;

2015 i‡(*
ouç
++ == '=')

2017  
L_NE
;

2019 
ouç
--;

2020  
L_NOT
;

2022 i‡(*
ouç
++ == ':')

2024  
L_COLON_COLON
;

2026 
ouç
--;

2029 i‡(*
ouç
++ == '.')

2031 i‡(*
ouç
++ == '.')

2033  
L_DOT_DOT_DOT
;

2035 
ouç
--;

2036  
L_RANGE
;

2038 
ouç
--;

2039 
badÀx
;

2041 i‡(*(
ouç
 - 2) == '\n')

2043 *
•
 = 0;

2044 
quŸe
;

2046 
	`is_w•a˚
(
c
 = *
ouç
++) )

2049 
yyp
 = 
yyãxt
;

2051 
quŸe
 = 0;;)

2054 i‡(
c
 == '"')

2056 
quŸe
 ^= 1;

2058 i‡(
c
 ='/' && !
quŸe
)

2060 i‡(*
ouç
 == '*')

2062 
ouç
++;

2063 
	`skù_commít
();

2064 
c
 = *
ouç
++;

2067 i‡(*
ouç
 == '/')

2069 
ouç
++;

2070 
	`skù_löe
();

2071 
c
 = *
ouç
++;

2074 i‡(!
•
 && 
	`is•a˚
(
c
) )

2076 
•
 = 
yyp
;

2078 i‡(
c
 ='\n' || c =
LEX_EOF
)

2082 
SAVEC
;

2083 
c
 = *
ouç
++;

2085 i‡(
•
)

2087 *
•
++ = 0;

2088 
	`is•a˚
(*
•
) )

2090 
•
++;

2095 
•
 = 
yyp
;

2097 *
yyp
 = 0;

2098 i‡(!
	`°rcmp
("ö˛ude", 
yyãxt
) )

2100 
cuºít_löe
++;

2101 i‡(
c
 =
LEX_EOF
)

2103 *(
œ°_∆
 = --
ouç
Ë
LEX_EOF
;

2104 
ouç
[ - 1] = '\n';

2106 
	`h™dÀ_ö˛ude
(
•
);

2111 i‡(
ouç
 =
œ°_∆
 + 1)

2113 
	`ªfûl_buf„r
();

2116 i‡(
	`°rcmp
("deföe", 
yyãxt
) == 0)

2118 
	`h™dÀ_deföe
(
•
);

2120 i‡(
	`°rcmp
("if", 
yyãxt
) == 0)

2122 
c⁄d
;

2124 *--
ouç
 = '\0';

2125 
	`add_öput
(
•
);

2126 
c⁄d
 = 
	`c⁄d_gë_exp
(0);

2127 i‡(*
ouç
++)

2129 
	`yyîr‹
("QTZ_ServerEngine:ConditionÅoo complex in #if");

2130 *
ouç
++)

2135 
	`h™dÀ_c⁄d
(
c⁄d
);

2138 i‡(
	`°rcmp
("ifdef", 
yyãxt
) == 0)

2140 
	`dñåaû
(
•
);

2141 
	`h™dÀ_c⁄d
(
	`lookup_deföe
(
•
) != 0);

2143 i‡(
	`°rcmp
("i‚def", 
yyãxt
) == 0)

2145 
	`dñåaû
(
•
);

2146 
	`h™dÀ_c⁄d
(
	`lookup_deföe
(
•
) == 0);

2148 i‡(
	`°rcmp
("ñif", 
yyãxt
) == 0)

2150 
	`h™dÀ_ñif
(
•
);

2152 i‡(
	`°rcmp
("ñ£", 
yyãxt
) == 0)

2154 
	`h™dÀ_ñ£
();

2156 i‡(
	`°rcmp
("ídif", 
yyãxt
) == 0)

2158 
	`h™dÀ_ídif
();

2160 i‡(
	`°rcmp
("undef", 
yyãxt
) == 0)

2162 
de‚_t
 *
d
;

2164 
	`dñåaû
(
•
);

2165 i‡–(
d
 = 
	`lookup_deföe
(
•
) ) )

2167 i‡(
d
->
Êags
 &
DEF_IS_PREDEF
)

2169 
	`yyîr‹
("QTZ_ServerEngine:IllegalÅo #undefáÖredefined value.");

2173 
d
->
Êags
 |
DEF_IS_UNDEFINED
;

2177 i‡(
	`°rcmp
("echo", 
yyãxt
) == 0)

2179 
	`debug_mesßge
("%s\n", 
•
);

2181 i‡(
	`°rcmp
("¥agma", 
yyãxt
) == 0)

2183 
	`h™dÀ_¥agma
(
•
);

2187 
	`yyîr‹
("QTZ_ServerEngine:Unrecognised # directive");

2189 *--
ouç
 = '\n';

2195 
badÀx
;

2199 i‡(*
ouç
++ == '\\')

2201 *
ouç
++)

2204 
yylvÆ
.
numbî
 = '\n';

2207 
yylvÆ
.
numbî
 = '\t';

2210 
yylvÆ
.
numbî
 = '\r';

2213 
yylvÆ
.
numbî
 = '\b';

2216 
yylvÆ
.
numbî
 = '\x07';

2219 
yylvÆ
.
numbî
 = '\x1b';

2222 
yylvÆ
.
numbî
 = '\'';

2225 
yylvÆ
.
numbî
 = '\"';

2228 
yylvÆ
.
numbî
 = '\\';

2240 
ouç
--;

2241 
yylvÆ
.
numbî
 = 
	`°πﬁ
(
ouç
, &outp, 8);

2242 i‡(
yylvÆ
.
numbî
 > 255)

2244 
	`yyw¨n
("QTZ_ServerEngine:Illegal character constant.");

2245 
yylvÆ
.
numbî
 = 'x';

2249 i‡(!
	`isxdigô
(*
ouç
) )

2251 
yylvÆ
.
numbî
 = 'x';

2252 
	`yyw¨n
("QTZ_ServerEngine:\\x must be followed byá valid hex value; interpretingás 'x' instead.");

2256 
yylvÆ
.
numbî
 = 
	`°πﬁ
(
ouç
, &outp, 16);

2257 i‡(
yylvÆ
.
numbî
 > 255)

2259 
	`yyw¨n
("Illegal character constant.");

2260 
yylvÆ
.
numbî
 = 'x';

2265 
yylvÆ
.
numbî
 = '\n';

2266 
cuºít_löe
++;

2267 
tŸÆ_löes
++;

2268 i‡–(
ouç
 = 
œ°_∆
 + 1) )

2270 
	`ªfûl_buf„r
();

2274 
	`yyw¨n
("Unknown \\Éscape.");

2275 
yylvÆ
.
numbî
 = *(
ouç
 - 1);

2281 
yylvÆ
.
numbî
 = *(
ouç
 - 1);

2284 i‡(*
ouç
++ != '\'')

2286 
ouç
--;

2287 
	`yyîr‹
("QTZ_ServerEngine:Illegal character constant");

2288 
yylvÆ
.
numbî
 = 0;

2290  
L_NUMBER
;

2293 
rc
;

2294 
tmp
;

2296 i‡–(
tmp
 = *
ouç
++) != '@')

2299 
ouç
--;

2301 i‡(!
	`gë_ãrmö©‹
(
ãrmö©‹
) )

2303 
	`Àxîr‹
("IllegalÅerminator");

2306 i‡(
tmp
 == '@')

2308 
rc
 = 
	`gë_¨øy_block
(
ãrmö©‹
);

2310 i‡(
rc
 > 0)

2313 
ouç
 += 2;

2314  
L_ARRAY_OPEN
;

2316 i‡(
rc
 == - 1)

2318 
	`Àxîr‹
("QTZ_ServerEngine:End of file inárray block");

2319  
LEX_EOF
;

2324 
	`yyîr‹
("QTZ_ServerEngine:Array blockÉxceeded maximumÜength");

2329 
rc
 = 
	`gë_ãxt_block
(
ãrmö©‹
);

2331 i‡(
rc
 > 0)

2333 
n
;

2338 
yylvÆ
.
°rög
 = 
	`s¸©ch_c›y_°rög
(
ouç
);

2340 
n
 = 
	`°æí
(
ouç
) + 1;

2341 
ouç
 +
n
;

2343  
L_STRING
;

2345 i‡(
rc
 == - 1)

2347 
	`Àxîr‹
("QTZ_ServerEngine:End of file inÅext block");

2348  
LEX_EOF
;

2353 
	`yyîr‹
("QTZ_ServerEngine:Text blockÉxceeded maximumÜength");

2360 
l
;

2361 *
to
 = 
s¸_èû
 + 1;

2363 i‡–(
l
 = 
s¸©ch_íd
 - 1-
to
) > 255)

2365 
l
 = 255;

2367 
l
-- > 0)

2369 
c
 = *
ouç
++)

2371 
LEX_EOF
:

2372 
	`Àxîr‹
("QTZ_ServerEngine:End of file in string");

2373  
LEX_EOF
;

2376 
s¸_œ°
 = 
s¸_èû
 + 1;

2377 *
to
++ = 0;

2378 
s¸_èû
 = 
to
;

2379 *
to
 =Åÿ- 
s¸_œ°
;

2380 
yylvÆ
.
°rög
 = (*)
s¸_œ°
;

2381  
L_STRING
;

2384 
cuºít_löe
++;

2385 
tŸÆ_löes
++;

2386 i‡(
ouç
 =
œ°_∆
 + 1)

2388 
	`ªfûl_buf„r
();

2390 *
to
++ = '\n';

2395 *
ouç
++)

2398 
cuºít_löe
++;

2399 
tŸÆ_löes
++;

2400 i‡(
ouç
 =
œ°_∆
 + 1)

2402 
	`ªfûl_buf„r
();

2404 
l
++;

2406 
LEX_EOF
:

2407 
	`Àxîr‹
("QTZ_ServerEngine:End of file in string");

2408  
LEX_EOF
;

2410 *
to
++ = '\n';

2413 *
to
++ = '\t';

2416 *
to
++ = '\r';

2419 *
to
++ = '\b';

2422 *
to
++ = '\x07';

2425 *
to
++ = '\x1b';

2428 *
to
++ = '"';

2431 *
to
++ = '\\';

2444 
tmp
;

2445 
ouç
--;

2446 
tmp
 = 
	`°πﬁ
(
ouç
, &outp, 8);

2447 i‡(
tmp
 > 255)

2449 
	`yyw¨n
("QTZ_ServerEngine:Illegal character constant in string.");

2450 
tmp
 = 'x';

2452 *
to
++ = 
tmp
;

2457 
tmp
;

2458 i‡(!
	`isxdigô
(*
ouç
) )

2460 *
to
++ = 'x';

2461 
	`yyw¨n
("QTZ_ServerEngine:\\x must be followed byá valid hex value; interpretingás 'x' instead.");

2465 
tmp
 = 
	`°πﬁ
(
ouç
, &outp, 16);

2466 i‡(
tmp
 > 255)

2468 
	`yyw¨n
("QTZ_ServerEngine:Illegal character constant.");

2469 
tmp
 = 'x';

2471 *
to
++ = 
tmp
;

2476 *
to
++ = *(
ouç
 - 1);

2477 
	`yyw¨n
("QTZ_ServerEngine:Unknown \\Éscape.");

2481 *
to
++ = 
c
;

2486 
l
 = 
MAXLINE
 - (
to
 - 
s¸_èû
);

2488 
yyp
 = 
yyãxt
;

2489 
l
--)

2491 
c
 = *
ouç
++)

2493 
LEX_EOF
:

2494 
	`Àxîr‹
("QTZ_ServerEngine:End of file in string");

2495  
LEX_EOF
;

2499 *
ªs
;

2500 *
yyp
++ = '\0';

2501 
ªs
 = 
	`s¸©ch_œrge_Æloc
–(
yyp
 - 
yyãxt
Ë+ (
to
 - 
s¸_èû
) - 1);

2502 
	`°∫˝y
(
ªs
, (*Ë(
s¸_èû
 + 1), (
to
 - scr_tail) - 1);

2503 
	`°r˝y
(
ªs
 + (
to
 - 
s¸_èû
Ë- 1, 
yyãxt
);

2504 
yylvÆ
.
°rög
 = 
ªs
;

2505  
L_STRING
;

2509 
cuºít_löe
++;

2510 
tŸÆ_löes
++;

2511 i‡(
ouç
 =
œ°_∆
 + 1)

2513 
	`ªfûl_buf„r
();

2515 *
yyp
++ = '\n';

2520 *
ouç
++)

2523 
cuºít_löe
++;

2524 
tŸÆ_löes
++;

2525 i‡(
ouç
 =
œ°_∆
 + 1)

2527 
	`ªfûl_buf„r
();

2529 
l
++;

2531 
LEX_EOF
:

2532 
	`Àxîr‹
("QTZ_ServerEngine:End of file in string");

2533  
LEX_EOF
;

2535 *
yyp
++ = '\n';

2538 *
yyp
++ = '\t';

2541 *
yyp
++ = '\r';

2544 *
yyp
++ = '\b';

2547 *
yyp
++ = '\x07';

2550 *
yyp
++ = '\x1b';

2553 *
yyp
++ = '"';

2556 *
yyp
++ = '\\';

2569 
tmp
;

2570 
ouç
--;

2571 
tmp
 = 
	`°πﬁ
(
ouç
, &outp, 8);

2572 i‡(
tmp
 > 255)

2574 
	`yyw¨n
("QTZ_ServerEngine:Illegal character constant in string.");

2575 
tmp
 = 'x';

2577 *
yyp
++ = 
tmp
;

2582 
tmp
;

2583 i‡(!
	`isxdigô
(*
ouç
) )

2585 *
yyp
++ = 'x';

2586 
	`yyw¨n
("QTZ_ServerEngine:\\x must be followed byá valid hex value; interpretingás 'x' instead.");

2590 
tmp
 = 
	`°πﬁ
(
ouç
, &outp, 16);

2591 i‡(
tmp
 > 255)

2593 
	`yyw¨n
("QTZ_ServerEngine:Illegal character constant.");

2594 
tmp
 = 'x';

2596 *
yyp
++ = 
tmp
;

2601 *
yyp
++ = *(
ouç
 - 1);

2602 
	`yyw¨n
("QTZ_ServerEngine:Unknown \\Éscape.");

2607 *
yyp
++ = 
c
;

2612 
	`Àxîr‹
("QTZ_ServerEngine:StringÅooÜong");

2613 *
yyp
++ = '\0';

2615 *
ªs
;

2616 
ªs
 = 
	`s¸©ch_œrge_Æloc
–(
yyp
 - 
yyãxt
Ë+ (
to
 - 
s¸_èû
) - 1);

2617 
	`°∫˝y
(
ªs
, (*Ë(
s¸_èû
 + 1), (
to
 - scr_tail) - 1);

2618 
	`°r˝y
(
ªs
 + (
to
 - 
s¸_èû
Ë- 1, 
yyãxt
);

2619 
yylvÆ
.
°rög
 = 
ªs
;

2620  
L_STRING
;

2624 
c
 = *
ouç
++;

2625 i‡(
c
 == 'X' || c == 'x')

2627 
yyp
 = 
yyãxt
;

2630 
c
 = *
ouç
++;

2631 
SAVEC
;

2632 i‡(!
	`isxdigô
(
c
) )

2637 
ouç
--;

2638 
yylvÆ
.
numbî
 = ()
	`°πﬁ
(
yyãxt
, (**)
NULL
, 0x10);

2639  
L_NUMBER
;

2641 
ouç
--;

2642 
c
 = '0';

2653 
is_Êﬂt
 = 0;

2654 
yyp
 = 
yyãxt
;

2655 *
yyp
++ = 
c
;

2658 
c
 = *
ouç
++;

2659 i‡(
c
 == '.')

2661 i‡(!
is_Êﬂt
)

2663 
is_Êﬂt
 = 1;

2667 
is_Êﬂt
 = 0;

2668 
ouç
--;

2672 i‡(!
	`isdigô
(
c
) )

2676 
SAVEC
;

2678 
ouç
--;

2679 *
yyp
 = 0;

2680 i‡(
is_Êﬂt
)

2682 
	`ssˇnf
(
yyãxt
, "%f", &
myªÆ
);

2683 
yylvÆ
.
ªÆ
 = ()
myªÆ
;

2684  
L_REAL
;

2688 
yylvÆ
.
numbî
 = 
	`©oi
(
yyãxt
);

2689  
L_NUMBER
;

2692 i‡(
	`ißÕha
(
c
) || c == '_')

2694 
r
;

2696 
∑r£_idítifõr
: 
yyp
 = 
yyãxt
;

2697 *
yyp
++ = 
c
;

2700 i‡(!
	`iß um
(
c
 = *
ouç
++) && (c != '_') )

2704 
SAVEC
;

2706 *
yyp
 = 0;

2707 i‡(
c
 == '#')

2709 i‡(*
ouç
++ != '#')

2711 
	`Àxîr‹
("QTZ_ServerEngine:Single '#' in identifier -- use '##' forÅokenÖasting");

2713 
ouç
 -= 2;

2714 i‡(!
	`ex∑nd_deföe
() )

2716 i‡(
∑πp
 + (
r
 = 
	`°æí
(
yyãxt
ËË+ (
fun˘i⁄_Êag
 ? 3 : 0Ë- 
∑πül
 > 
MAXLINE
)

2718 
	`Àxîr‹
("QTZ_ServerEngine:PastedÅoken isÅooÜong");

2720 i‡(
fun˘i⁄_Êag
)

2722 
	`°r˝y
(
∑πp
, "(: ");

2723 
∑πp
 += 3;

2725 
	`°r˝y
(
∑πp
, 
yyãxt
);

2726 
∑πp
 +
r
;

2727 
ouç
 += 2;

2730 i‡(
∑πp
 !
∑πül
)

2732 
ouç
--;

2733 i‡(!
	`ex∑nd_deföe
() )

2735 
	`add_öput
(
yyãxt
);

2737  (
c
 = *
ouç
++) == ' ')

2739 
ouç
--;

2740 
	`add_öput
(
∑πül
);

2741 
∑πp
 = 
∑πül
;

2742 
∑πül
[0] = 0;

2746 
ouç
--;

2747 i‡(!
	`ex∑nd_deföe
() )

2749 
idít_hash_ñem_t
 *
ihe
;

2750 i‡–(
ihe
 = 
	`lookup_idít
(
yyãxt
) ) )

2752 i‡(
ihe
->
tokí
 &
IHE_RESWORD
)

2754 i‡(
fun˘i⁄_Êag
)

2756 
fun˘i⁄_Êag
 = 0;

2757 
	`add_öput
(
yyãxt
);

2758 
	`push_fun˘i⁄_c⁄ãxt
();

2759  
L_FUNCTION_OPEN
;

2761 
yylvÆ
.
numbî
 = 
ihe
->
£m_vÆue
;

2762  
ihe
->
tokí
 &
TOKEN_MASK
;

2764 i‡(
fun˘i⁄_Êag
)

2766 
vÆ
;

2768 
fun˘i⁄_Êag
 = 0;

2769  (
c
 = *
ouç
++) == ' ')

2771 
ouç
--;

2772 i‡(
c
 != ':' && c != ',')

2774  
	`ﬁd_func
();

2776 i‡–(
vÆ
 = 
ihe
->
dn
.
loˇl_num
) >= 0)

2778 i‡(
c
 == ',')

2780  
	`ﬁd_func
();

2782 
yylvÆ
.
numbî
 = (
vÆ
 << 8Ë| 
FP_L_VAR
;

2784 i‡–(
vÆ
 = 
ihe
->
dn
.
globÆ_num
) >= 0)

2786 i‡(
c
 == ',')

2788  
	`ﬁd_func
();

2790 
yylvÆ
.
numbî
 = (
vÆ
 << 8Ë| 
FP_G_VAR
;

2792 i‡–(
vÆ
 = 
ihe
->
dn
.
fun˘i⁄_num
) >= 0)

2794 
yylvÆ
.
numbî
 = (
vÆ
 << 8Ë| 
FP_LOCAL
;

2796 i‡–(
vÆ
 = 
ihe
->
dn
.
simul_num
) >= 0)

2798 
yylvÆ
.
numbî
 = (
vÆ
 << 8Ë| 
FP_SIMUL
;

2800 i‡–(
vÆ
 = 
ihe
->
dn
.
efun_num
) >= 0)

2802 
yylvÆ
.
numbî
 = (
vÆ
 << 8Ë| 
FP_EFUN
;

2806  
	`ﬁd_func
();

2808  
L_NEW_FUNCTION_OPEN
;

2810 
yylvÆ
.
ihe
 = ihe;

2811  
L_DEFINED_NAME
;

2813 
yylvÆ
.
°rög
 = 
	`s¸©ch_c›y
(
yyãxt
);

2814  
L_IDENTIFIER
;

2816 i‡(
fun˘i⁄_Êag
)

2818 
fun˘i⁄_Êag
 = 0;

2819 
	`add_öput
("(:");

2824 
badÀx
;

2827 
badÀx
:

2829 #ifde‡
DEBUG


2830 
buff
[100];

2832 
	`•rötf
(
buff
, "QTZ_SîvîEngöe:IŒegÆ ch¨a˘î (hex %02xË'%c'", ()
c
, ()c);

2833 
	`yyîr‹
(
buff
);

2837 
	}
}

2843 
YYSTYPE
 
yylvÆ
;

2845 
	$íd_√w_fûe
()

2847 
ö˘›
)

2849 
öc°©e_t
 *
p
;

2851 
p
 = 
ö˘›
;

2852 
	`˛o£
(
yyö_desc
);

2853 
	`‰ì_°rög
(
cuºít_fûe
);

2854 
cuºít_fûe
 = 
p
->
fûe
;

2855 
yyö_desc
 = 
p
->yyin_desc;

2856 
ö˘›
 = 
p
->
√xt
;

2857 
	`FREE
–(*)
p
);

2859 
ö˘›
 = 0;

2860 
i·›
)

2862 
if°©e_t
 *
p
;

2864 
p
 = 
i·›
;

2865 
i·›
 = 
p
->
√xt
;

2866 
	`FREE
–(*)
p
);

2868 i‡(
deföes_√ed_‰ìd
)

2870 
	`‰ì_deföes
();

2871 
deföes_√ed_‰ìd
 = 0;

2873 i‡(
cur_lbuf
 !&
hód_lbuf
)

2875 
löked_buf_t
 *
¥ev_lbuf
;

2877 
cur_lbuf
 !&
hód_lbuf
)

2879 
¥ev_lbuf
 = 
cur_lbuf
->
¥ev
;

2880 
	`FREE
–(*)
cur_lbuf
);

2881 
cur_lbuf
 = 
¥ev_lbuf
;

2884 
	}
}

2890 
	$add_quŸed_¥edeföe
(*
def
, *
vÆ
)

2892 
ßve_buf
[1024];

2894 
	`°r˝y
(
ßve_buf
, "\"");

2895 
	`°rˇt
(
ßve_buf
, 
vÆ
);

2896 
	`°rˇt
(
ßve_buf
, "\"");

2897 
	`add_¥edeföe
(
def
, - 1, 
ßve_buf
);

2898 
	}
}

2903 * 
	ggame_id
 = "fs";

2904 * 
	ggame_num
 = "01";

2906 
	$add_¥edeföes
(*
lib_∑th
)

2908 
ßve_buf
[80];

2909 
i
;

2910 
¥edef_cou¡
 = 0;

2911 
Õc_¥edef_s
 *
tmpf
;

2914 
	`add_quŸed_¥edeföe
("__GAME_ID__", 
game_id
);

2915 
	`add_quŸed_¥edeföe
("__GAME_NUM__", 
game_num
);

2916 
	`add_quŸed_¥edeföe
("__LIB_PATH__", 
lib_∑th
);

2917 
	`add_¥edeföe
("OS", - 1, "");

2918 
	`gë_vîsi⁄
(
ßve_buf
);

2919 
	`add_quŸed_¥edeföe
("__VERSION__", 
ßve_buf
);

2920 
	`•rötf
(
ßve_buf
, "%d", 
exã∫Æ_p‹t
[0].
p‹t
);

2921 
	`add_¥edeföe
("__PORT__", - 1, 
ßve_buf
);

2922 
i
 = 0; i < 2 *
NUM_OPTION_DEFS
; i += 2)

2924 
	`add_¥edeföe
(
›ti⁄_defs
[
i
], - 1, option_defs[i + 1]);

2925 } 
	`add_quŸed_¥edeföe
("__ARCH__", 
ARCH
);

2926 
	`add_quŸed_¥edeföe
("__COMPILER__", 
COMPILER
);

2927 
	`add_quŸed_¥edeföe
("__OPTIMIZATION__", 
OPTIMIZE
);

2930 #i‚de‡
CDLIB


2931 
	`add_quŸed_¥edeföe
("QTZ_SîvîEngöe_NAME", 
QTZ_SîvîEngöe_NAME
);

2933 #ifde‡
F_PRINTF


2934 
	`add_¥edeföe
("HAS_PRINTF", - 1, "");

2936 #i‡(
	`deföed
(
RUSAGE
Ë|| deföed(
GET_PROCESS_STATS
Ë|| deföed(
TIMES
)Ë|| deföed(
LATTICE
)

2937 
	`add_¥edeföe
("HAS_RUSAGE", - 1, "");

2939 #ifde‡
DEBUG_MACRO


2940 
	`add_¥edeföe
("HAS_DEBUG_LEVEL", - 1, "");

2943 
¥edef_cou¡
 = 0;Öredef_count < 20; ++predef_count)

2945 
«mebuf
[
NSIZE
];

2946 
mãxt
[
MLEN
];

2948 i‡(
comm™d_löe_¥edefs
[
¥edef_cou¡
].
Êag
 =
NULL
)

2953 
tmpf
 = &
comm™d_löe_¥edefs
[
¥edef_cou¡
];

2954 *
mãxt
 = '\0';

2955 
	`ssˇnf
(
tmpf
->
Êag
, "%[^=]=%[ -~=]", 
«mebuf
, 
mãxt
);

2956 i‡(
	`°æí
(
«mebuf
Ë>
NSIZE
)

2958 
	`Áèl
("QTZ_ServerEngine:NSIZEÉxceeded");

2960 i‡(
	`°æí
(
mãxt
Ë>
MLEN
)

2962 
	`Áèl
("QTZ_ServerEngine:MLENÉxceeded");

2964 
	`add_¥edeföe
(
«mebuf
, - 1, 
mãxt
);

2966 
	}
}

2972 
	$°¨t_√w_fûe
(
f
)

2974 i‡(
deföes_√ed_‰ìd
)

2976 
	`‰ì_deföes
();

2978 
deföes_√ed_‰ìd
 = 1;

2979 i‡(
cuºít_fûe
)

2981 *
dú
;

2982 *
tmp
;

2983 
 
;

2985 
 
 = 
	`°æí
(
cuºít_fûe
);

2986 
dú
 = (*)
	`DMALLOC
(
 
 + 4, 
TAG_COMPILER
, "start_new_file");

2987 
dú
[0] = '"';

2988 
dú
[1] = '/';

2989 
	`mem˝y
(
dú
 + 2, 
cuºít_fûe
, 
 
);

2990 
dú
[
 
 + 2] = '"';

2991 
dú
[
 
 + 3] = 0;

2992 
	`add_deföe
("__FILE__", - 1, 
dú
);

2993 
tmp
 = 
	`°ºchr
(
dú
, '/');

2994 
tmp
[1] = '"';

2995 
tmp
[2] = 0;

2996 
	`add_deföe
("__DIR__", - 1, 
dú
);

2998 
	`add_deföe
("__LINE__", - 1, "__line__");

2999 
	`FREE
(
dú
);

3001 
yyö_desc
 = 
f
;

3002 
Àx_Áèl
 = 0;

3003 
œ°_fun˘i⁄_c⁄ãxt
 = - 1;

3004 
cuºít_fun˘i⁄_c⁄ãxt
 = 0;

3005 
cur_lbuf
 = &
hód_lbuf
;

3006 
cur_lbuf
->
ouç
 = cur_lbuf->
buf_íd
 = ouç = cur_lbuf->
buf
 + (
DEFMAX
 >> 1);

3007 *(
œ°_∆
 = 
ouç
 - 1) = '\n';

3008 
¥agmas
 = 
DEFAULT_PRAGMAS
;

3009 i‡(
run_Êag
) {

3010 
¥agmas
 |
PRAGMA_SAVE_TYPES
;

3012 
√x∑nds
 = 0;

3013 
ö˙um
 = 0;

3014 
cuºít_löe
 = 1;

3015 
cuºít_löe_ba£
 = 0;

3016 
cuºít_löe_ßved
 = 0;

3018 
	`ªfûl_buf„r
();

3019 
	}
}

3025 *
	$quîy_ö°r_«me
(
ö°r
)

3027 *
«me
;

3029 
«me
 = 
ö°rs
[
ö°r
].name;

3030 i‡(
«me
)

3032  
«me
;

3036 
	`•rötf
(
num_buf
, "%d", 
ö°r
);

3037  
num_buf
;

3039 
	}
}

3045 
	#add_ö°r_«me
(
w
, 
x
, 
y
, 
z
Ë
	`öt_add_ö°r_«me
(w, y, z)

	)

3047 
	$öt_add_ö°r_«me
(*
«me
, 
n
, 
t
)

3049 
ö°rs
[
n
].
«me
 =Çame;

3050 
ö°rs
[
n
].
ªt_ty≥
 = 
t
;

3051 
	}
}

3057 
	$öô_num_¨gs
()

3059 
i
;

3060 
n
;

3062 
i
 = 0; i < 
BASE
; i++)

3064 
ö°rs
[
i
].
ªt_ty≥
 = - 1;

3066 
i
 = 0; i < 
	`NELEM
(
¥edefs
); i++)

3068 
n
 = 
¥edefs
[
i
].
tokí
;

3069 i‡(
n
 &
F_ALIAS_FLAG
)

3071 
¥edefs
[
i
].
tokí
 ^
F_ALIAS_FLAG
;

3075 
ö°rs
[
n
].
mö_¨g
 = 
¥edefs
[
i
].
mö_¨gs
;

3076 
ö°rs
[
n
].
max_¨g
 = 
¥edefs
[
i
].
max_¨gs
;

3077 
ö°rs
[
n
].
«me
 = 
¥edefs
[
i
].
w‹d
;

3078 
ö°rs
[
n
].
ty≥
[0] = 
¥edefs
[
i
].
¨g_ty≥1
;

3079 
ö°rs
[
n
].
ty≥
[1] = 
¥edefs
[
i
].
¨g_ty≥2
;

3080 
ö°rs
[
n
].
ty≥
[2] = 
¥edefs
[
i
].
¨g_ty≥3
;

3081 
ö°rs
[
n
].
ty≥
[3] = 
¥edefs
[
i
].
¨g_ty≥4
;

3082 
ö°rs
[
n
].
DeÁu…
 = 
¥edefs
[
i
].Default;

3083 
ö°rs
[
n
].
ªt_ty≥
 = 
¥edefs
[
i
].ret_type;

3084 
ö°rs
[
n
].
¨g_ödex
 = 
¥edefs
[
i
].arg_index;

3091 
	`add_ö°r_«me
("<", "c_…();\n", 
F_LT
, 
T_NUMBER
);

3092 
	`add_ö°r_«me
(">", "c_gt();\n", 
F_GT
, 
T_NUMBER
);

3093 
	`add_ö°r_«me
("<=", "c_À();\n", 
F_LE
, 
T_NUMBER
);

3094 
	`add_ö°r_«me
(">=", "c_ge();\n", 
F_GE
, 
T_NUMBER
);

3095 
	`add_ö°r_«me
("==", "f_eq();\n", 
F_EQ
, 
T_NUMBER
);

3096 
	`add_ö°r_«me
("+=", "c_add_eq(0);\n", 
F_ADD_EQ
, 
T_ANY
);

3097 
	`add_ö°r_«me
("(void)+=", "c_add_eq(1);\n", 
F_VOID_ADD_EQ
, 
T_NUMBER
);

3098 
	`add_ö°r_«me
("!", "c_nŸ();\n", 
F_NOT
, 
T_NUMBER
);

3099 
	`add_ö°r_«me
("&", "f_™d();\n", 
F_AND
, 
T_ARRAY
 | 
T_NUMBER
);

3100 
	`add_ö°r_«me
("&=", "f_™d_eq();\n", 
F_AND_EQ
, 
T_NUMBER
);

3101 
	`add_ö°r_«me
("ödex", "c_ödex();\n", 
F_INDEX
, 
T_ANY
);

3102 
	`add_ö°r_«me
("membî", "c_membî(%i);\n", 
F_MEMBER
, 
T_ANY
);

3103 
	`add_ö°r_«me
("√w_em±y_˛ass", "c_√w_˛ass(%i, 0);\n", 
F_NEW_EMPTY_CLASS
, 
T_ANY
);

3104 
	`add_ö°r_«me
("√w_˛ass", "c_√w_˛ass(%i, 1);\n", 
F_NEW_CLASS
, 
T_ANY
);

3105 
	`add_ö°r_«me
("rödex", "c_rödex();\n", 
F_RINDEX
, 
T_ANY
);

3106 
	`add_ö°r_«me
("lo›_c⁄d_loˇl", "C_LOOP_COND_LV(%i, %i); i‡÷pc_öt)\n", 
F_LOOP_COND_LOCAL
, - 1);

3107 
	`add_ö°r_«me
("lo›_c⁄d_numbî", "C_LOOP_COND_NUM(%i, %i); i‡÷pc_öt)\n", 
F_LOOP_COND_NUMBER
, - 1);

3108 
	`add_ö°r_«me
("lo›_ö¸", "C_LOOP_INCR(%i);\n", 
F_LOOP_INCR
, - 1);

3109 
	`add_ö°r_«me
("f‹óch", 0, 
F_FOREACH
, - 1);

3110 
	`add_ö°r_«me
("exô_f‹óch", "c_exô_f‹óch();\n", 
F_EXIT_FOREACH
, - 1);

3111 
	`add_ö°r_«me
("ex∑nd_v¨¨gs", 0, 
F_EXPAND_VARARGS
, - 1);

3112 
	`add_ö°r_«me
("√xt_f‹óch", "c_√xt_f‹óch();\n", 
F_NEXT_FOREACH
, - 1);

3113 
	`add_ö°r_«me
("membî_lvÆue", "c_membî_lvÆue(%i);\n", 
F_MEMBER_LVALUE
, 
T_LVALUE
);

3114 
	`add_ö°r_«me
("ödex_lvÆue", "push_ödexed_lvÆue(0);\n", 
F_INDEX_LVALUE
, 
T_LVALUE
 | 
T_LVALUE_BYTE
);

3115 
	`add_ö°r_«me
("rödex_lvÆue", "push_ödexed_lvÆue(1);\n", 
F_RINDEX_LVALUE
, 
T_LVALUE
 | 
T_LVALUE_BYTE
);

3116 
	`add_ö°r_«me
("¬_ønge_lvÆue", "push_lvÆue_ønge(0x00);\n", 
F_NN_RANGE_LVALUE
, 
T_LVALUE_RANGE
);

3117 
	`add_ö°r_«me
("ƒ_ønge_lvÆue", "push_lvÆue_ønge(0x01);\n", 
F_NR_RANGE_LVALUE
, 
T_LVALUE_RANGE
);

3118 
	`add_ö°r_«me
("º_ønge_lvÆue", "push_lvÆue_ønge(0x11);\n", 
F_RR_RANGE_LVALUE
, 
T_LVALUE_RANGE
);

3119 
	`add_ö°r_«me
("∫_ønge_lvÆue", "push_lvÆue_ønge(0x10);\n", 
F_RN_RANGE_LVALUE
, 
T_LVALUE_RANGE
);

3120 
	`add_ö°r_«me
("¬_ønge", "f_ønge(0x00);\n", 
F_NN_RANGE
, 
T_BUFFER
 | 
T_ARRAY
 | 
T_STRING
);

3121 
	`add_ö°r_«me
("º_ønge", "f_ønge(0x11);\n", 
F_RR_RANGE
, 
T_BUFFER
 | 
T_ARRAY
 | 
T_STRING
);

3122 
	`add_ö°r_«me
("ƒ_ønge", "f_ønge(0x01);\n", 
F_NR_RANGE
, 
T_BUFFER
 | 
T_ARRAY
 | 
T_STRING
);

3123 
	`add_ö°r_«me
("∫_ønge", "f_ønge(0x10);\n", 
F_RN_RANGE
, 
T_BUFFER
 | 
T_ARRAY
 | 
T_STRING
);

3124 
	`add_ö°r_«me
("ª_ønge", "f_exåa˘_ønge(1);\n", 
F_RE_RANGE
, 
T_BUFFER
 | 
T_ARRAY
 | 
T_STRING
);

3125 
	`add_ö°r_«me
("√_ønge", "f_exåa˘_ønge(0);\n", 
F_NE_RANGE
, 
T_BUFFER
 | 
T_ARRAY
 | 
T_STRING
);

3126 
	`add_ö°r_«me
("globÆ", "C_GLOBAL(%i);\n", 
F_GLOBAL
, 
T_ANY
);

3127 
	`add_ö°r_«me
("loˇl", "C_LOCAL(%i);\n", 
F_LOCAL
, 
T_ANY
);

3128 
	`add_ö°r_«me
("å™s„r_loˇl", "c_å™s„r_loˇl(%i);\n", 
F_TRANSFER_LOCAL
, 
T_ANY
);

3129 
	`add_ö°r_«me
("numbî", 0, 
F_NUMBER
, 
T_NUMBER
);

3130 
	`add_ö°r_«me
("ªÆ", 0, 
F_REAL
, 
T_REAL
);

3131 
	`add_ö°r_«me
("loˇl_lvÆue", "C_LVALUE(Â + %i);\n", 
F_LOCAL_LVALUE
, 
T_LVALUE
);

3132 
	`add_ö°r_«me
("whûe_dec", "C_WHILE_DEC(%i); i‡÷pc_öt)\n", 
F_WHILE_DEC
, - 1);

3133 
	`add_ö°r_«me
("c⁄°1", "push_numbî(1);\n", 
F_CONST1
, 
T_NUMBER
);

3134 
	`add_ö°r_«me
("subåa˘", "c_subåa˘();\n", 
F_SUBTRACT
, 
T_NUMBER
 | 
T_REAL
 | 
T_ARRAY
);

3135 
	`add_ö°r_«me
("(voidÔssign", "c_void_assign();\n", 
F_VOID_ASSIGN
, 
T_NUMBER
);

3136 
	`add_ö°r_«me
("(voidÔssign_loˇl", "c_void_assign_loˇl(Â + %i);\n", 
F_VOID_ASSIGN_LOCAL
, 
T_NUMBER
);

3137 
	`add_ö°r_«me
("assign", "c_assign();\n", 
F_ASSIGN
, 
T_ANY
);

3138 
	`add_ö°r_«me
("bønch", 0, 
F_BRANCH
, - 1);

3139 
	`add_ö°r_«me
("bbønch", 0, 
F_BBRANCH
, - 1);

3140 
	`add_ö°r_«me
("byã", 0, 
F_BYTE
, 
T_NUMBER
);

3141 
	`add_ö°r_«me
("-byã", 0, 
F_NBYTE
, 
T_NUMBER
);

3142 
	`add_ö°r_«me
("bønch_√", 0, 
F_BRANCH_NE
, - 1);

3143 
	`add_ö°r_«me
("bønch_ge", 0, 
F_BRANCH_GE
, - 1);

3144 
	`add_ö°r_«me
("bønch_À", 0, 
F_BRANCH_LE
, - 1);

3145 
	`add_ö°r_«me
("bønch_eq", 0, 
F_BRANCH_EQ
, - 1);

3146 
	`add_ö°r_«me
("bbønch_…", 0, 
F_BBRANCH_LT
, - 1);

3147 
	`add_ö°r_«me
("bbønch_whí_zîo", 0, 
F_BBRANCH_WHEN_ZERO
, - 1);

3148 
	`add_ö°r_«me
("bbønch_whí_n⁄_zîo", 0, 
F_BBRANCH_WHEN_NON_ZERO
, - 1);

3149 
	`add_ö°r_«me
("bønch_whí_zîo", 0, 
F_BRANCH_WHEN_ZERO
, - 1);

3150 
	`add_ö°r_«me
("bønch_whí_n⁄_zîo", 0, 
F_BRANCH_WHEN_NON_ZERO
, - 1);

3151 
	`add_ö°r_«me
("p›", "p›_°ack();\n", 
F_POP_VALUE
, - 1);

3152 
	`add_ö°r_«me
("c⁄°0", "push_numbî(0);\n", 
F_CONST0
, 
T_NUMBER
);

3153 #ifde‡
F_JUMP_WHEN_ZERO


3154 
	`add_ö°r_«me
("jump_whí_zîo", 
F_JUMP_WHEN_ZERO
, - 1);

3155 
	`add_ö°r_«me
("jump_whí_n⁄_zîo", 
F_JUMP_WHEN_NON_ZERO
, - 1);

3157 #ifde‡
F_LOR


3158 
	`add_ö°r_«me
("||", 0, 
F_LOR
, - 1);

3159 
	`add_ö°r_«me
("&&", 0, 
F_LAND
, - 1);

3161 
	`add_ö°r_«me
("-=", "f_sub_eq();\n", 
F_SUB_EQ
, 
T_ANY
);

3162 #ifde‡
F_JUMP


3163 
	`add_ö°r_«me
("jump", 
F_JUMP
, - 1);

3165 
	`add_ö°r_«me
("ªtu∫_zîo", "c_ªtu∫_zîo();\ƒëu∫;\n", 
F_RETURN_ZERO
, - 1);

3166 
	`add_ö°r_«me
("ªtu∫", "c_ªtu∫();\ƒëu∫;\n", 
F_RETURN
, - 1);

3167 
	`add_ö°r_«me
("ssˇnf", "c_ssˇnf(%i);\n", 
F_SSCANF
, 
T_NUMBER
);

3169 
	`add_ö°r_«me
("°rög", 0, 
F_STRING
, 
T_STRING
);

3170 
	`add_ö°r_«me
("sh‹t_°rög", 0, 
F_SHORT_STRING
, 
T_STRING
);

3171 
	`add_ö°r_«me
("ˇŒ", "c_ˇŒ(%i, %i);\n", 
F_CALL_FUNCTION_BY_ADDRESS
, 
T_ANY
);

3172 
	`add_ö°r_«me
("ˇŒ_öhîôed", "c_ˇŒ_öhîôed(%i, %i, %i);\n", 
F_CALL_INHERITED
, 
T_ANY
);

3173 
	`add_ö°r_«me
("aggªg©e_assoc", "C_AGGREGATE_ASSOC(%i);\n", 
F_AGGREGATE_ASSOC
, 
T_MAPPING
);

3174 #ifde‡
DEBUG


3175 
	`add_ö°r_«me
("bªak_poöt", "bªak_poöt();\n", 
F_BREAK_POINT
, - 1);

3177 
	`add_ö°r_«me
("aggªg©e", "C_AGGREGATE(%i);\n", 
F_AGGREGATE
, 
T_ARRAY
);

3178 
	`add_ö°r_«me
("(::)", 0, 
F_FUNCTION_CONSTRUCTOR
, 
T_FUNCTION
);

3180 
	`add_ö°r_«me
("simul_efun", "ˇŒ_simul_efun(%i, (Õc_öà%ò+Çum_v¨¨gs,Çum_v¨¨g†0,Üpc_öt));\n", 
F_SIMUL_EFUN
, 
T_ANY
);

3181 
	`add_ö°r_«me
("globÆ_lvÆue", "C_LVALUE(&cuºít_obje˘->v¨übÀs[v¨übÀ_ödex_off£à+ %i]);\n", 
F_GLOBAL_LVALUE
, 
T_LVALUE
);

3182 
	`add_ö°r_«me
("|", "f_‹();\n", 
F_OR
, 
T_NUMBER
);

3183 
	`add_ö°r_«me
("<<", "f_lsh();\n", 
F_LSH
, 
T_NUMBER
);

3184 
	`add_ö°r_«me
(">>", "f_rsh();\n", 
F_RSH
, 
T_NUMBER
);

3185 
	`add_ö°r_«me
(">>=", "f_rsh_eq();\n", 
F_RSH_EQ
, 
T_NUMBER
);

3186 
	`add_ö°r_«me
("<<=", "f_lsh_eq();\n", 
F_LSH_EQ
, 
T_NUMBER
);

3187 
	`add_ö°r_«me
("^", "f_x‹();\n", 
F_XOR
, 
T_NUMBER
);

3188 
	`add_ö°r_«me
("^=", "f_x‹_eq();\n", 
F_XOR_EQ
, 
T_NUMBER
);

3189 
	`add_ö°r_«me
("|=", "f_‹_eq();\n", 
F_OR_EQ
, 
T_NUMBER
);

3190 
	`add_ö°r_«me
("+", "c_add();\n", 
F_ADD
, 
T_ANY
);

3191 
	`add_ö°r_«me
("!=", "f_√();\n", 
F_NE
, 
T_NUMBER
);

3192 
	`add_ö°r_«me
("ˇtch", 0, 
F_CATCH
, 
T_ANY
);

3193 
	`add_ö°r_«me
("íd_ˇtch", 0, 
F_END_CATCH
, - 1);

3194 
	`add_ö°r_«me
("-", "c_√g©e();\n", 
F_NEGATE
, 
T_NUMBER
 | 
T_REAL
);

3195 
	`add_ö°r_«me
("~", "c_com∂();\n", 
F_COMPL
, 
T_NUMBER
);

3196 
	`add_ö°r_«me
("++x", "c_¥e_öc();\n", 
F_PRE_INC
, 
T_NUMBER
 | 
T_REAL
);

3197 
	`add_ö°r_«me
("--x", "c_¥e_dec();\n", 
F_PRE_DEC
, 
T_NUMBER
 | 
T_REAL
);

3198 
	`add_ö°r_«me
("*", "c_mu…ùly();\n", 
F_MULTIPLY
, 
T_REAL
 | 
T_NUMBER
 | 
T_MAPPING
);

3199 
	`add_ö°r_«me
("*=", "f_mu…_eq();\n", 
F_MULT_EQ
, 
T_REAL
 | 
T_NUMBER
 | 
T_MAPPING
);

3200 
	`add_ö°r_«me
("/", "c_divide();\n", 
F_DIVIDE
, 
T_REAL
 | 
T_NUMBER
);

3201 
	`add_ö°r_«me
("/=", "f_div_eq();\n", 
F_DIV_EQ
, 
T_NUMBER
 | 
T_REAL
);

3202 
	`add_ö°r_«me
("%", "c_mod();\n", 
F_MOD
, 
T_NUMBER
);

3203 
	`add_ö°r_«me
("%=", "f_mod_eq();\n", 
F_MOD_EQ
, 
T_NUMBER
);

3204 
	`add_ö°r_«me
("öc(x)", "c_öc();\n", 
F_INC
, - 1);

3205 
	`add_ö°r_«me
("dec(x)", "c_dec();\n", 
F_DEC
, - 1);

3206 
	`add_ö°r_«me
("x++", "c_po°_öc();\n", 
F_POST_INC
, 
T_NUMBER
 | 
T_REAL
);

3207 
	`add_ö°r_«me
("x--", "c_po°_dec();\n", 
F_POST_DEC
, 
T_NUMBER
 | 
T_REAL
);

3208 
	`add_ö°r_«me
("swôch", 0, 
F_SWITCH
, - 1);

3209 
	`add_ö°r_«me
("time_ex¥essi⁄", 0, 
F_TIME_EXPRESSION
, - 1);

3210 
	`add_ö°r_«me
("íd_time_ex¥essi⁄", 0, 
F_END_TIME_EXPRESSION
, 
T_NUMBER
);

3211 
	}
}

3217 *
	$gë_f_«me
(
n
)

3219 i‡(
ö°rs
[
n
].
«me
)

3221  
ö°rs
[
n
].
«me
;

3225 
buf
[30];

3227 
	`•rötf
(
buf
, "<OTHER %d>", 
n
);

3228  
buf
;

3230 
	}
}

3236 
	#gë_√xt_ch¨
(
c
Ëi‡((¯*
ouç
++Ë='\n' && ouç =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
()

	)

3238 
	#GETALPHA
(
p
, 
q
, 
m
) \

3239 
	`ißlunum
(*
p
)) {\

3240 *
q
 = *
p
++;\

3241 i‡(
q
 < (
m
))\

3242 
q
++;\

3244 
	`Àxîr‹
("NameÅooÜong");\

3248 *
q
++ = 0

	)

3251 
	#GETDEFINE
(
p
, 
q
, 
m
) \

3252 
	`ißlunum
(*
p
) || (*p == '#')) {\

3253 *
q
 = *
p
++; \

3254 i‡(
q
 < (
m
)) \

3255 
q
++; \

3257 
	`Àxîr‹
("NameÅooÜong"); \

3261 *
q
++ = 0

	)

3263 
	$cmygëc
()

3265 
c
;

3269 
	`gë_√xt_ch¨
(
c
);

3270 i‡(
c
 == '/')

3272 *
ouç
++)

3275 
	`skù_commít
();

3278 
	`skù_löe
();

3281 
ouç
--;

3282  
c
;

3287  
c
;

3290 
	}
}

3296 
	$ªfûl
()

3298 *
p
;

3299 
c
;

3301 
p
 = 
yyãxt
;

3304 
c
 = *
ouç
++;

3305 i‡(
p
 < 
yyãxt
 + 
MAXLINE
 - 5)

3307 *
p
++ = 
c
;

3311 
	`Àxîr‹
("LineÅooÜong");

3316 
c
 !'\n' && c !
LEX_EOF
);

3317 i‡–(
c
 ='\n'Ë&& (
ouç
 =
œ°_∆
 + 1) )

3319 
	`ªfûl_buf„r
();

3321 
p
[ - 1] = ' ';

3322 *
p
 = 0;

3323 
√x∑nds
 = 0;

3324 
cuºít_löe
++;

3325 
	}
}

3331 
	$h™dÀ_deföe
(*
yyt
)

3333 
«mebuf
[
NSIZE
];

3334 
¨gs
[
NARGS
][
NSIZE
];

3335 
mãxt
[
MLEN
];

3336 *
p
, *
q
;

3338 
p
 = 
yyt
;

3339 
	`°rˇt
(
p
, " ");

3340 
q
 = 
«mebuf
;

3341 
	`GETALPHA
(
p
, 
q
, 
«mebuf
 + 
NSIZE
 - 1);

3342 i‡(*
p
 == '(')

3345 
¨g
;

3346 
öid
;

3347 *
ids
 = (*)
NULL
;

3349 
p
++;

3350 
SKIPWHITE
;

3351 i‡(*
p
 == ')')

3353 
¨g
 = 0;

3357 
¨g
 = 0;árg < 
NARGS
;)

3359 
q
 = 
¨gs
[
¨g
];

3360 
	`GETDEFINE
(
p
, 
q
, 
¨gs
[
¨g
] + 
NSIZE
 - 1);

3361 
¨g
++;

3362 
SKIPWHITE
;

3363 i‡(*
p
 == ')')

3367 i‡(*
p
++ != ',')

3369 
	`yyîr‹
("QTZ_ServerEngine:Missing ',' in #defineÖarameterÜist");

3372 
SKIPWHITE
;

3374 i‡(
¨g
 =
NARGS
)

3376 
	`Àxîr‹
("QTZ_ServerEngine:Too many macroárguments");

3380 
p
++;

3381 
q
 = 
mãxt
;

3382 *
q
++ = ' ';

3383 
öid
 = 0; *
p
;)

3385 i‡(
	`ißlunum
(*
p
) )

3387 i‡(!
öid
)

3389 
öid
++;

3390 
ids
 = 
p
;

3395 i‡(
öid
)

3397 
idÀn
 = 
p
 - 
ids
;

3398 
n
, 
l
;

3400 
n
 = 0;Ç < 
¨g
;Ç++)

3402 
l
 = 
	`°æí
(
¨gs
[
n
]);

3403 i‡(
l
 =
idÀn
 && 
	`°∫cmp
(
¨gs
[
n
], 
ids
,Ü) == 0)

3405 
q
 -
idÀn
;

3406 *
q
++ = 
MARKS
;

3407 *
q
++ = 
n
 + 
MARKS
 + 1;

3411 
öid
 = 0;

3414 *
q
 = *
p
;

3415 i‡(*
p
++ =
MARKS
)

3417 *++
q
 = 
MARKS
;

3419 i‡(
q
 < 
mãxt
 + 
MLEN
 - 2)

3421 
q
++;

3425 
	`Àxîr‹
("QTZ_ServerEngine:MacroÅextÅooÜong");

3428 i‡(! *
p
 &&Ö[ - 2] == '\\')

3430 
q
 -= 2;

3431 
	`ªfûl
();

3432 
p
 = 
yyãxt
;

3435 *--
q
 = 0;

3436 
	`add_deföe
(
«mebuf
, 
¨g
, 
mãxt
);

3438 i‡(
	`is_w•a˚
(*
p
) || (*p == '\\') )

3440 
q
 = 
mãxt
; *
p
;)

3442 *
q
 = *
p
++;

3443 i‡(
q
 < 
mãxt
 + 
MLEN
 - 2)

3445 
q
++;

3449 
	`Àxîr‹
("QTZ_ServerEngine:MacroÅextÅooÜong");

3452 i‡(! *
p
 &&Ö[ - 2] == '\\')

3454 
q
 -= 2;

3455 
	`ªfûl
();

3456 
p
 = 
yyãxt
;

3459 *--
q
 = 0;

3460 
	`add_deföe
(
«mebuf
, - 1, 
mãxt
);

3464 
	`Àxîr‹
("QTZ_ServerEngine:Illegal macro symbol");

3467 
	}
}

3470 
	$add_öput
(*
p
)

3472 
l
 = 
	`°æí
(
p
);

3474 i‡(
l
 >
DEFMAX
 - 10)

3476 
	`Àxîr‹
("QTZ_ServerEngine:MacroÉxpansion buffer overflow");

3480 i‡(
ouç
 < 
l
 + 5+
cur_lbuf
->
buf
)

3483 
löked_buf_t
 *
√w_lbuf
;

3484 *
q
, *
√w_ouç
, *
buf
;

3485 
size
;

3487 
q
 = 
ouç
;

3489 *
q
 !'\n' && *q !
LEX_EOF
)

3491 
q
++;

3494 i‡(*
q
 !'\n' || ( (q - 
ouç
Ë+ 
l
Ë>
DEFMAX
 - 11)

3496 
	`Àxîr‹
("QTZ_ServerEngine:MacroÉxpansion buffer overflow");

3499 
size
 = (
q
 - 
ouç
Ë+ 
l
 + 1;

3500 
cur_lbuf
->
ouç
 = 
q
 + 1;

3501 
cur_lbuf
->
œ°_∆
 =Üast_nl;

3503 
√w_lbuf
 = 
	`ALLOCATE
(
löked_buf_t
, 
TAG_COMPILER
, "add_input");

3504 
√w_lbuf
->
ãrm_ty≥
 = 
TERM_ADD_INPUT
;

3505 
√w_lbuf
->
¥ev
 = 
cur_lbuf
;

3506 
buf
 = 
√w_lbuf
->buf;

3507 
cur_lbuf
 = 
√w_lbuf
;

3508 
œ°_∆
 = (
√w_lbuf
->
buf_íd
 = 
buf
 + 
DEFMAX
 - 2) - 1;

3509 
√w_ouç
 = 
√w_lbuf
->
ouç
 = 
buf
 + 
DEFMAX
 - 2-
size
;

3510 
	`mem˝y
(
√w_ouç
, 
p
, 
l
);

3511 
	`mem˝y
(
√w_ouç
 + 
l
, 
ouç
, (
q
 - outp) + 1);

3512 
ouç
 = 
√w_ouç
;

3513 *(
œ°_∆
 + 1) = 0;

3517 
ouç
 -
l
;

3518 
	`°∫˝y
(
ouç
, 
p
, 
l
);

3519 
	}
}

3525 #ifde‡
DEBUGMALLOC_EXTENSIONS


3526 
	$m¨k_Æl_deföes
()

3528 
i
;

3529 
de‚_t
 *
tmp
;

3531 
i
 = 0; i < 
öc_li°_size
; i++)

3533 
	`EXTRA_REF
(
	`BLOCK
(
öc_li°
[
i
]) )++;

3536 
i
 = 0; i < 
DEFHASH
; i++)

3538 
tmp
 = 
de‚s
[
i
];

3539 
tmp
)

3541 
	`DO_MARK
(
tmp
, 
TAG_PREDEFINES
);

3542 
	`DO_MARK
(
tmp
->
«me
, 
TAG_PREDEFINES
);

3543 
	`DO_MARK
(
tmp
->
exps
, 
TAG_PREDEFINES
);

3544 
tmp
 =Åmp->
√xt
;

3547 
	}
}

3550 
	$add_¥edeföe
(*
«me
, 
«rgs
, *
exps
)

3552 
de‚_t
 *
p
;

3553 
h
;

3555 i‡–(
p
 = 
	`lookup_deföe
(
«me
) ) )

3557 i‡(
«rgs
 !
p
->«rg†|| 
	`°rcmp
(
exps
,Ö->exps) )

3559 
buf
[200+
NSIZE
];

3561 
	`•rötf
(
buf
, "QTZ_SîvîEngöe:ªdeföôi⁄ o‡#deföê%s\n", 
«me
);

3562 
	`yyw¨n
(
buf
);

3564 
p
->
exps
 = (*)
	`DREALLOC
’->exps, 
	`°æí
”xpsË+ 1, 
TAG_PREDEFINES
, "add_define:Ñedef");

3565 
	`°r˝y
(
p
->
exps
,Éxps);

3566 
p
->
«rgs
 =Çargs;

3570 
p
 = 
	`ALLOCATE
(
de‚_t
, 
TAG_PREDEFINES
, "add_define: def");

3571 
p
->
«me
 = (*)
	`DXALLOC
(
	`°æí
“ameË+ 1, 
TAG_PREDEFINES
, "add_define: defÇame");

3572 
	`°r˝y
(
p
->
«me
,Çame);

3573 
p
->
exps
 = (*)
	`DXALLOC
(
	`°æí
”xpsË+ 1, 
TAG_PREDEFINES
, "add_define: defÉxps");

3574 
	`°r˝y
(
p
->
exps
,Éxps);

3575 
p
->
Êags
 = 
DEF_IS_PREDEF
;

3576 
p
->
«rgs
 =Çargs;

3577 
h
 = 
	`defhash
(
«me
);

3578 
p
->
√xt
 = 
de‚s
[
h
];

3579 
de‚s
[
h
] = 
p
;

3581 
	}
}

3587 
	$‰ì_deföes
()

3589 
de‚_t
 *
p
, *
q
;

3590 
i
;

3592 
i
 = 0; i < 
DEFHASH
; i++)

3594 
p
 = 
de‚s
[
i
];Ö;Ö = 
q
)

3597 i‡(
p
->
Êags
 &
DEF_IS_PREDEF
)

3601 
q
 = 
p
->
√xt
;

3602 
	`FREE
(
p
->
«me
);

3603 
	`FREE
(
p
->
exps
);

3604 
	`FREE
–(*)
p
);

3606 
de‚s
[
i
] = 
p
;

3608 
p
)

3610 
p
->
Êags
 &~
DEF_IS_UNDEFINED
;

3611 
p
 =Ö->
√xt
;

3614 
√x∑nds
 = 0;

3615 
	}
}

3621 
	#SKIPW
 \

3623 
c
 = 
	`cmygëc
();\

3624 } 
	`is_w•a˚
(
c
));

	)

3628 
	$ex∑nd_deföe
()

3630 
de‚_t
 *
p
;

3631 
expbuf
[
DEFMAX
];

3632 *
¨gs
[
NARGS
];

3633 
buf
[
DEFMAX
];

3634 *
q
, *
e
, *
b
;

3636 i‡(
√x∑nds
++ > 
EXPANDMAX
)

3638 
	`Àxîr‹
("QTZ_ServerEngine:Too many macroÉxpansions");

3641 
p
 = 
	`lookup_deföe
(
yyãxt
);

3642 i‡(!
p
)

3646 i‡(
p
->
«rgs
 == - 1)

3649 i‡(
	`°rcmp
(
p
->
«me
, "__LINE__") == 0)

3651 
	`¢¥ötf
(
buf
, (buf), "%d", 
cuºít_löe
);

3652 
	`add_öput
(
buf
);

3656 
	`add_öput
(
p
->
exps
);

3661 
c
, 
∑r˙t
 = 0, 
dquŸe
 = 0, 
squŸe
 = 0;

3662 
n
;

3664 
SKIPW
;

3665 i‡(
c
 != '(')

3667 
	`yyîr‹
("QTZ_ServerEngine:Missing '(' in macro call");

3668 i‡(
c
 ='\n' && 
ouç
 =
œ°_∆
 + 1)

3670 
	`ªfûl_buf„r
();

3674 
SKIPW
;

3675 i‡(
c
 == ')')

3677 
n
 = 0;

3681 
q
 = 
expbuf
;

3682 
¨gs
[0] = 
q
;

3683 
n
 = 0;Ç < 
NARGS
;)

3685 
c
)

3688 i‡(!
squŸe
)

3690 
dquŸe
 ^= 1;

3694 i‡(!
dquŸe
)

3696 
squŸe
 ^= 1;

3700 i‡(!
squŸe
 && !
dquŸe
)

3702 
∑r˙t
++;

3706 i‡(!
squŸe
 && !
dquŸe
)

3708 
∑r˙t
--;

3712 i‡(!
squŸe
 && !
dquŸe
)

3714 *
q
++ = 
c
;

3715 i‡(*
ouç
++ != '#')

3717 
	`Àxîr‹
("'#'Éxpected");

3723 i‡(
squŸe
 || 
dquŸe
)

3725 *
q
++ = 
c
;

3726 
	`gë_√xt_ch¨
(
c
);

3730 i‡(
ouç
 =
œ°_∆
 + 1)

3732 
	`ªfûl_buf„r
();

3734 i‡(
squŸe
 || 
dquŸe
)

3736 
	`Àxîr‹
("QTZ_ServerEngine:Newline in string");

3742 
cuºít_löe
++;

3743 
tŸÆ_löes
++;

3744 
c
 = ' ';

3747 i‡(
c
 =',' && !
∑r˙t
 && !
dquŸe
 && !
squŸe
)

3749 *
q
++ = 0;

3750 
¨gs
[++
n
] = 
q
;

3752 i‡(
∑r˙t
 < 0)

3754 *
q
++ = 0;

3755 
n
++;

3760 i‡(
c
 =
LEX_EOF
)

3762 
	`Àxîr‹
("QTZ_ServerEngine:UnexpectedÉnd of file");

3765 i‡(
q
 >
expbuf
 + 
DEFMAX
 - 5)

3767 
	`Àxîr‹
("QTZ_ServerEngine:Macroárgument overflow");

3772 *
q
++ = 
c
;

3775 i‡(!
squŸe
 && !
dquŸe
)

3777 
c
 = 
	`cmygëc
();

3781 
	`gë_√xt_ch¨
(
c
);

3784 i‡(
n
 =
NARGS
)

3786 
	`Àxîr‹
("QTZ_ServerEngine:Maximum macroárgument countÉxceeded");

3790 i‡(
n
 !
p
->
«rgs
)

3792 
	`yyîr‹
("QTZ_ServerEngine:WrongÇumber of macroárguments");

3796 
b
 = 
buf
;

3797 
e
 = 
p
->
exps
;

3798 *
e
)

3800 i‡(*
e
 == '#' && *(e+1) == '#')

3802 
e
 += 2;

3804 i‡(*
e
 =
MARKS
)

3806 i‡(*++
e
 =
MARKS
)

3808 *
b
++ = *
e
++;

3812 
q
 = 
¨gs
[ *
e
++ - 
MARKS
 - 1]; *q;)

3814 *
b
++ = *
q
++;

3815 i‡(
b
 >
buf
 + 
DEFMAX
)

3817 
	`Àxîr‹
("QTZ_ServerEngine:MacroÉxpansion overflow");

3825 *
b
++ = *
e
++;

3826 i‡(
b
 >
buf
 + 
DEFMAX
)

3828 
	`Àxîr‹
("QTZ_ServerEngine:MacroÉxpansion overflow");

3833 *
b
++ = 0;

3834 
	`add_öput
(
buf
);

3837 
	}
}

3842 
	#SKPW
 dÿ
c
 = *
ouç
++; 
	`is_w•a˚
(c)); ouç--

	)

3844 
	$exgëc
()

3846 
c
, *
yyp
;

3848 
c
 = *
ouç
++;

3849 
	`ißÕha
(
c
) || c == '_')

3851 
yyp
 = 
yyãxt
;

3854 
SAVEC
;

3855 
c
 = *
ouç
++;

3858 
	`ißlunum
(
c
) );

3859 
ouç
--;

3860 *
yyp
 = '\0';

3861 i‡(
	`°rcmp
(
yyãxt
, "defined") == 0)

3866 
c
 = *
ouç
++;

3868 
	`is_w•a˚
(
c
) );

3869 i‡(
c
 != '(')

3871 
	`yyîr‹
("QTZ_ServerEngine:Missing ( in defined");

3876 
c
 = *
ouç
++;

3878 
	`is_w•a˚
(
c
) );

3879 
yyp
 = 
yyãxt
;

3880 
	`ißlunum
(
c
) )

3882 
SAVEC
;

3883 
c
 = *
ouç
++;

3885 *
yyp
 = '\0';

3886 
	`is_w•a˚
(
c
) )

3888 
c
 = *
ouç
++;

3890 i‡(
c
 != ')')

3892 
	`yyîr‹
("QTZ_ServerEngine:Missing ) in defined");

3895 
SKPW
;

3896 i‡(
	`lookup_deföe
(
yyãxt
) )

3898 
	`add_öput
(" 1 ");

3902 
	`add_öput
(" 0 ");

3907 i‡(!
	`ex∑nd_deföe
() )

3909 
	`add_öput
(" 0 ");

3912 
c
 = *
ouç
++;

3914  
c
;

3915 
	}
}

3921 
	$£t_öc_li°
(*
li°
)

3923 
i
, 
size
;

3924 *
p
;

3926 i‡(
li°
 == 0)

3928 
	`Ârötf
(
°dîr
, "QTZ_ServerEngine:The config string 'include dirs' must bet set.\n");

3929 
	`Ârötf
(
°dîr
, "QTZ_ServerEngine:It should containáÜist ofáll directoriesÅo be searched\n");

3930 
	`Ârötf
(
°dîr
, "QTZ_ServerEngine:for include files, separated byá ':'.\n");

3931 
	`exô
( - 1);

3933 
size
 = 1;

3934 
p
 = 
li°
;

3937 
p
 = 
	`°rchr
(p, ':');

3938 i‡(!
p
)

3942 
size
++;

3943 
p
++;

3945 
öc_li°
 = 
	`CALLOCATE
(
size
, *, 
TAG_INC_LIST
, "set_inc_list");

3946 
öc_li°_size
 = 
size
;

3947 
i
 = 
size
 - 1; i >= 0; i--)

3949 
p
 = 
	`°ºchr
(
li°
, ':');

3950 i‡(
p
)

3952 *
p
 = '\0';

3953 
p
++;

3957 i‡(
i
)

3959 
	`Ârötf
(
°dîr
, "QTZ_ServerEngine:FatalÉrror in set_inc_list: bad state.\n");

3960 
	`exô
(1);

3962 
p
 = 
li°
;

3964 i‡(*
p
 == '/')

3966 
p
++;

3971 i‡(!
	`ÀgÆ_∑th
(
p
) )

3973 
	`Ârötf
(
°dîr
, "QTZ_ServerEngine:'include dirs' must giveÖaths withoutány '..'\n");

3974 
	`exô
( - 1);

3976 
öc_li°
[
i
] = 
	`make_sh¨ed_°rög
(
p
);

3978 
	}
}

3984 *
	$maö_fûe_«me
()

3986 
öc°©e_t
 *
is
;

3988 i‡(
ö˘›
 == 0)

3990  
cuºít_fûe
;

3992 
is
 = 
ö˘›
;

3993 
is
->
√xt
)

3995 
is
 = is->
√xt
;

3997  
is
->
fûe
;

3998 
	}
}

4001 
	#IDENT_HASH_SIZE
 1024

	)

4002 
	#IdítHash
(
s
Ë(
	`whash°r
((s), 20Ë& (
IDENT_HASH_SIZE
 - 1))

	)

4024 
	#CHECK_ELEM
(
x
, 
y
, 
z
Ëi‡(!
	`°rcmp
((x)->
«me
, (y))) { \

4025 i‡(((
x
)->
tokí
 & 
IHE_RESWORD
Ë|| ((x)->
£m_vÆue
)Ë{ 
z
 } \

4026  0; }

	)

4028 
idít_hash_ñem_t
 *
	$lookup_idít
(*
«me
)

4030 
h
 = 
	`IdítHash
(
«me
);

4031 
idít_hash_ñem_t
 *
h±r
, *
h±r2
;

4033 i‡–(
h±r
 = 
idít_hash_èbÀ
[
h
]) )

4035 
	`CHECK_ELEM
(
h±r
, 
«me
,  hptr;);

4036 
h±r2
 = 
h±r
->
√xt
;

4037 
h±r2
 !
h±r
)

4039 
	`CHECK_ELEM
(
h±r2
, 
«me
, 
idít_hash_èbÀ
[
h
] = hptr2;  hptr2;);

4040 
h±r2
 = h±r2->
√xt
;

4044 
	}
}

4050 
idít_hash_ñem_t
 *
	$föd_‹_add_≥rm_idít
(*
«me
)

4052 
h
 = 
	`IdítHash
(
«me
);

4053 
idít_hash_ñem_t
 *
h±r
, *
h±r2
;

4055 i‡–(
h±r
 = 
idít_hash_èbÀ
[
h
]) )

4057 i‡(!
	`°rcmp
(
h±r
->
«me
,Çame) )

4059  
h±r
;

4061 
h±r2
 = 
h±r
->
√xt
;

4062 
h±r2
 !
h±r
)

4064 i‡(!
	`°rcmp
(
h±r2
->
«me
,Çame) )

4066  
h±r2
;

4068 
h±r2
 = h±r2->
√xt
;

4070 
h±r
 = 
	`ALLOCATE
(
idít_hash_ñem_t
, 
TAG_PERM_IDENT
, "find_or_add_perm_ident:1");

4071 
h±r
->
√xt
 = 
idít_hash_hód
[
h
]->next;

4072 
idít_hash_hód
[
h
]->
√xt
 = 
h±r
;

4073 i‡(
idít_hash_hód
[
h
] =
idít_hash_èû
[h])

4075 
idít_hash_èû
[
h
] = 
h±r
;

4080 
h±r
 = (
idít_hash_èbÀ
[
h
] = 
	`ALLOCATE
(
idít_hash_ñem_t
, 
TAG_PERM_IDENT
, "find_or_add_perm_ident:2") );

4081 
idít_hash_hód
[
h
] = 
h±r
;

4082 
idít_hash_èû
[
h
] = 
h±r
;

4083 
h±r
->
√xt
 = hptr;

4085 
h±r
->
«me
 =Çame;

4086 
h±r
->
tokí
 = 0;

4087 
h±r
->
£m_vÆue
 = 0;

4088 
h±r
->
dn
.
simul_num
 = - 1;

4089 
h±r
->
dn
.
loˇl_num
 = - 1;

4090 
h±r
->
dn
.
globÆ_num
 = - 1;

4091 
h±r
->
dn
.
efun_num
 = - 1;

4092 
h±r
->
dn
.
fun˘i⁄_num
 = - 1;

4093 
h±r
->
dn
.
˛ass_num
 = - 1;

4094  
h±r
;

4095 
	}
}

4101 
	s ame_löked_buf_s


4103 
 ame_löked_buf_s
 *
	m√xt
;

4104 
	mblock
[4096];

4105 } 
	t ame_löked_buf_t
;

4107 
 ame_löked_buf_t
 *
	g amebuf
 = 0;

4109 
	glb_ödex
 = 4096;

4111 *
	$Æloc_loˇl_«me
(*
«me
)

4113 
Àn
 = 
	`°æí
(
«me
) + 1;

4114 *
ªs
;

4116 i‡(
lb_ödex
 + 
Àn
 > 4096)

4118 
 ame_löked_buf_t
 *
√w_buf
;

4119 
√w_buf
 = 
	`ALLOCATE
(
 ame_löked_buf_t
, 
TAG_COMPILER
, "alloc_local_name");

4120 
√w_buf
->
√xt
 = 
 amebuf
;

4121 
 amebuf
 = 
√w_buf
;

4122 
lb_ödex
 = 0;

4124 
ªs
 = &(
 amebuf
->
block
[
lb_ödex
]);

4125 
	`°r˝y
(
ªs
, 
«me
);

4126 
lb_ödex
 +
Àn
;

4127  
ªs
;

4128 
	}
}

4134 
	gnum_‰ì
 = 0;

4136 
	sidít_hash_ñem_li°_s


4138 
idít_hash_ñem_li°_s
 *
	m√xt
;

4139 
idít_hash_ñem_t
 
	môems
[128];

4140 } 
	tidít_hash_ñem_li°_t
;

4142 
idít_hash_ñem_li°_t
 *
	gihe_li°
 = 0;

4144 
	$‰ì_unu£d_idítifõrs
()

4146 
idít_hash_ñem_li°_t
 *
ihñ
, *
√xt
;

4147 
 ame_löked_buf_t
 *
 b
, *
 bn
;

4148 
i
;

4151 
idít_dúty_li°
)

4153 i‡(
idít_dúty_li°
->
dn
.
fun˘i⁄_num
 != - 1)

4155 
idít_dúty_li°
->
dn
.
fun˘i⁄_num
 = - 1;

4156 
idít_dúty_li°
->
£m_vÆue
--;

4158 i‡(
idít_dúty_li°
->
dn
.
globÆ_num
 != - 1)

4160 
idít_dúty_li°
->
dn
.
globÆ_num
 = - 1;

4161 
idít_dúty_li°
->
£m_vÆue
--;

4163 i‡(
idít_dúty_li°
->
dn
.
˛ass_num
 != - 1)

4165 
idít_dúty_li°
->
dn
.
˛ass_num
 = - 1;

4166 
idít_dúty_li°
->
£m_vÆue
--;

4168 
idít_dúty_li°
 = idít_dúty_li°->
√xt_dúty
;

4171 
i
 = 0; i < 
IDENT_HASH_SIZE
; i++)

4172 i‡–(
idít_hash_èbÀ
[
i
] = 
idít_hash_hód
[i]) )

4174 
idít_hash_èû
[
i
]->
√xt
 = 
idít_hash_hód
[i];

4177 
ihñ
 = 
ihe_li°
;

4178 
ihñ
)

4180 
√xt
 = 
ihñ
->next;

4181 
	`FREE
(
ihñ
);

4182 
ihñ
 = 
√xt
;

4184 
ihe_li°
 = 0;

4185 
num_‰ì
 = 0;

4187 
 b
 = 
 amebuf
;

4188 
 b
)

4190 
 bn
 = 
 b
->
√xt
;

4191 
	`FREE
(
 b
);

4192 
 b
 = 
 bn
;

4194 
 amebuf
 = 0;

4195 
lb_ödex
 = 4096;

4197 
	`debug_dump_idít_hash_èbÀ
(0);

4199 
	}
}

4205 
idít_hash_ñem_t
 *
	$quick_Æloc_idít_íåy
()

4207 i‡(
num_‰ì
)

4209 
num_‰ì
--;

4210  &(
ihe_li°
->
ôems
[
num_‰ì
]);

4214 
idít_hash_ñem_li°_t
 *
ihñ
;

4215 
ihñ
 = 
	`ALLOCATE
(
idít_hash_ñem_li°_t
, 
TAG_COMPILER
, "quick_alloc_ident_entry");

4216 
ihñ
->
√xt
 = 
ihe_li°
;

4217 
ihe_li°
 = 
ihñ
;

4218 
num_‰ì
 = 127;

4219  &(
ihe_li°
->
ôems
[127]);

4221 
	}
}

4227 
idít_hash_ñem_t
 *
	$föd_‹_add_idít
(*
«me
, 
Êags
)

4229 
h
 = 
	`IdítHash
(
«me
);

4230 
idít_hash_ñem_t
 *
h±r
, *
h±r2
;

4232 i‡–(
h±r
 = 
idít_hash_èbÀ
[
h
]) )

4234 i‡(!
	`°rcmp
(
h±r
->
«me
,Çame) )

4236 i‡–(
h±r
->
tokí
 &
IHE_PERMANENT
Ë&& (
Êags
 &
FOA_GLOBAL_SCOPE
Ë&& (h±r->
dn
.
fun˘i⁄_num
 =- 1Ë&& (h±r->dn.
globÆ_num
 =- 1Ë&& (h±r->dn.
˛ass_num
 == - 1) )

4238 
h±r
->
√xt_dúty
 = 
idít_dúty_li°
;

4239 
idít_dúty_li°
 = 
h±r
;

4241  
h±r
;

4243 
h±r2
 = 
h±r
->
√xt
;

4244 
h±r2
 !
h±r
)

4246 i‡(!
	`°rcmp
(
h±r2
->
«me
,Çame) )

4248 i‡–(
h±r2
->
tokí
 &
IHE_PERMANENT
Ë&& (
Êags
 &
FOA_GLOBAL_SCOPE
Ë&& (h±r2->
dn
.
fun˘i⁄_num
 =- 1Ë&& (h±r2->dn.
globÆ_num
 =- 1Ë&& (h±r2->dn.
˛ass_num
 == - 1) )

4250 
h±r2
->
√xt_dúty
 = 
idít_dúty_li°
;

4251 
idít_dúty_li°
 = 
h±r2
;

4253 
idít_hash_èbÀ
[
h
] = 
h±r2
;

4254  
h±r2
;

4256 
h±r2
 = h±r2->
√xt
;

4260 
h±r
 = 
	`quick_Æloc_idít_íåy
();

4261 i‡(!(
h±r2
 = 
idít_hash_èû
[
h
]Ë&& !(h±r2 = 
idít_hash_èbÀ
[h]) )

4263 
idít_hash_èbÀ
[
h
] = 
h±r
->
√xt
 = hptr;

4267 
h±r
->
√xt
 = 
h±r2
->next;

4268 
h±r2
->
√xt
 = 
h±r
;

4271 i‡(
Êags
 &
FOA_NEEDS_MALLOC
)

4273 
h±r
->
«me
 = 
	`Æloc_loˇl_«me
(name);

4277 
h±r
->
«me
 =Çame;

4279 
h±r
->
tokí
 = 0;

4280 
h±r
->
£m_vÆue
 = 0;

4281 
h±r
->
dn
.
simul_num
 = - 1;

4282 
h±r
->
dn
.
loˇl_num
 = - 1;

4283 
h±r
->
dn
.
globÆ_num
 = - 1;

4284 
h±r
->
dn
.
efun_num
 = - 1;

4285 
h±r
->
dn
.
fun˘i⁄_num
 = - 1;

4286 
h±r
->
dn
.
˛ass_num
 = - 1;

4287  
h±r
;

4288 
	}
}

4294 
	$add_keyw‹d_t
(*
«me
, 
keyw‹d_t
 *
íåy
)

4296 
h
 = 
	`IdítHash
(
«me
);

4298 i‡(
idít_hash_èbÀ
[
h
])

4300 
íåy
->
√xt
 = 
idít_hash_hód
[
h
]->next;

4301 
idít_hash_hód
[
h
]->
√xt
 = (
idít_hash_ñem_t
*)
íåy
;

4302 i‡(
idít_hash_hód
[
h
] =
idít_hash_èû
[h])

4304 
idít_hash_èû
[
h
] = (
idít_hash_ñem_t
*)
íåy
;

4309 
idít_hash_hód
[
h
] = (
idít_hash_ñem_t
*)
íåy
;

4310 
idít_hash_èû
[
h
] = (
idít_hash_ñem_t
*)
íåy
;

4311 
idít_hash_èbÀ
[
h
] = (
idít_hash_ñem_t
*)
íåy
;

4312 
íåy
->
√xt
 = (
idít_hash_ñem_t
*)entry;

4314 
íåy
->
tokí
 |
IHE_RESWORD
;

4315 
	}
}

4321 
	$öô_idítifõrs
()

4323 
i
;

4324 
idít_hash_ñem_t
 *
ihe
;

4327 
idít_hash_èbÀ
 = 
	`CALLOCATE
(
IDENT_HASH_SIZE
 *3, 
idít_hash_ñem_t
 *, 
TAG_IDENT_TABLE
, "init_identifiers");

4328 
idít_hash_hód
 = (
idít_hash_ñem_t
 **Ë&
idít_hash_èbÀ
[
IDENT_HASH_SIZE
];

4329 
idít_hash_èû
 = (
idít_hash_ñem_t
 **Ë&
idít_hash_èbÀ
[2 *
IDENT_HASH_SIZE
];

4332 
i
 = 0; i < 
IDENT_HASH_SIZE
 *3; i++)

4334 
idít_hash_èbÀ
[
i
] = 0;

4337 
i
 = 0; i < 
	`NELEM
(
ªsw‹ds
); i++)

4339 
	`add_keyw‹d_t
(
ªsw‹ds
[
i
].
w‹d
, &reswords[i]);

4342 
i
 = 0; i < 
	`NELEM
(
¥edefs
); i++)

4344 
ihe
 = 
	`föd_‹_add_≥rm_idít
(
¥edefs
[
i
].
w‹d
);

4345 
ihe
->
tokí
 |
IHE_EFUN
;

4346 
ihe
->
£m_vÆue
++;

4347 
ihe
->
dn
.
efun_num
 = 
i
;

4349 
	}
}

	@src/list.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~"li°.h
"

5 
	$_add_öt
(
LIST_I
 *
li°p
, 
num
)

7 
èû
;

8 i‡(
li°p
->
_u£d
 >li°p->
_max
)

13 
èû
 = 
li°p
->
_èû
;

14 
li°p
->
_°‹e
[
èû
] = 
num
;

15 
li°p
->
_èû
 = (
èû
 + 1Ë%Üi°p->
_max
;

16 
li°p
->
_u£d
++;

19 
	}
}

25 
	$_gë_öt
(
LIST_I
 *
li°p
, *
num
)

27 
hód
, 
ªt
;

29 i‡(
li°p
->
_u£d
 <= 0)

34 
hód
 = 
li°p
->
_hód
;

35 
ªt
 = 
li°p
->
_°‹e
[
hód
];

36 
li°p
->
_hód
 = (
hód
 + 1Ë%Üi°p->
_max
;

37 
li°p
->
_u£d
--;

39 *
num
 = 
ªt
;

41 
	}
}

47 
	$öô_li°_öt
(
LIST_I
 **
li°µ
, 
max_li°
)

49 
LIST_I
 *
li°p
 = 
NULL
;

50 *
°‹ï
 = 
NULL
;

52 
li°p
 = 
	`mÆloc
((
LIST_I
) );

53 i‡(!
li°p
)

57 
	`bzîo
(
li°p
, (
LIST_I
) );

59 
°‹ï
 = 
	`mÆloc
(
max_li°
 *() );

60 i‡(!
°‹ï
)

65 
li°p
->
_°‹e
 = 
°‹ï
;

66 
li°p
->
add
 = 
_add_öt
;

67 
li°p
->
gë
 = 
_gë_öt
;

68 
li°p
->
_max
 = 
max_li°
;

70 *
li°µ
 = 
li°p
;

72 
	}
}

78 
	$‰ì_li°_öt
(
LIST_I
 *
li°p
)

80 
	`‰ì
(
li°p
);

81 
	}
}

	@src/main.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"fûe_ö˛.h
"

4 
	~"Õc_ö˛.h
"

5 
	~"Àx.h
"

6 
	~"fûe.h
"

7 
	~"backíd.h
"

8 
	~"simul_efun.h
"

9 
	~"bö¨õs.h
"

10 
	~"maö.h
"

11 
	~"ŸabÀ.h
"

12 
	~"comm.h
"

13 
	~"compûî.h
"

14 
	~"p‹t.h
"

15 
	~"md.h
"

16 
	~"maö.h
"

17 
	~"compûe_fûe.h
"

18 
	~"obje˘.h
"

19 
	~"°ack.h
"

21 
	#TRAP_CRASHES


	)

23 
	#LIB_PATH_SIZE
 1024

	)

25 
p‹t_def_t
 
	gexã∫Æ_p‹t
[5];

27 
	gcomp_Êag
 = 0;

28 
	grun_Êag
 = 0;

29 
	gauth_Êag
 = 0;

31 
	gmax_co°
;

33 
	gboŸ_time
;

34 
	gmax_¨øy_size
;

35 
	gmax_buf„r_size
;

36 
	gmax_°rög_Àngth
;

37 *
	gª£rved_¨ó
;

39 
	ggame_lib_∑th
[
LIB_PATH_SIZE
];

40 
	ggame_lib_bö_∑th
[
LIB_PATH_SIZE
];

42 
svÆue_t
 
	gc⁄°0
, 
	gc⁄°1
, 
	gc⁄°0u
;

44 
	gc⁄°s
[
NUM_CONSTS
];

45 *
	gc⁄fig_fûe
 = 
NULL
;

49 
obje˘_t
 *
	gma°î_ob
 = 0;

51 #ifde‡
SIGNAL_FUNC_TAKES_INT


52 
	#SIGPROT
 ()

	)

53 
	#PSIG
(
z
Ë
	`z
 (
sig
)

	)

55 
	#SIGPROT
 ()

	)

56 
	#PSIG
(
z
Ë
	`z
()

	)

59 
CDECL
 
sig_Âe
 
	gSIGPROT
;

60 
CDECL
 
sig_˛d
 
	gSIGPROT
;

62 #ifde‡
TRAP_CRASHES


63 
CDECL
 
sig_u§1
 
	gSIGPROT
;

64 
CDECL
 
sig_u§2
 
	gSIGPROT
;

65 
CDECL
 
sig_ãrm
 
	gSIGPROT
;

66 
CDECL
 
sig_öt
 
	gSIGPROT
;

68 #i‚de‡
DEBUG


70 
CDECL
 
sig_hup
 
	gSIGPROT
, CDECL 
sig_abπ
 SIGPROT, CDECL 
sig_ûl
 SIGPROT, CDECL 
sig_bus
 SIGPROT, CDECL 
sig_iŸ
 SIGPROT;

75 #ifde‡
DEBUG_MACRO


77 
	gdebug_Àvñ
 = 32768 | 512;

80 
compûe_Æl_fûe
(*
dú
, 
dïth
);

81 
	gmaxdïth
 = 10;

83 *
	$f‹m©_time
(
time_t
 
tm
)

85 
°πime
[30];

86 
	`°r·ime
(
°πime
, 30, "%Y-%m-%d %H:%M:%S", 
	`loˇ…ime
(&
tm
) );

87  
°πime
;

88 
	}
}

94 
	$vm_öô
()

96 
	`¥ötf
("Please wait while initializing internalÅables....\n");

98 #ifde‡
WRAPPEDMALLOC


99 
	`wøµedmÆloc_öô
();

101 #ifde‡
DEBUGMALLOC


102 
	`MDöô
();

105 
boŸ_time
 = 
	`gë_cuºít_time
();

107 
cuºít_time
 = 
boŸ_time
;

109 
c⁄°0
.
ty≥
 = 
T_NUMBER
;

110 
c⁄°0
.
u
.
numbî
 = 0;

111 
c⁄°1
.
ty≥
 = 
T_NUMBER
;

112 
c⁄°1
.
u
.
numbî
 = 1;

115 
c⁄°0u
.
ty≥
 = 
T_NUMBER
;

116 
c⁄°0u
.
subty≥
 = 
T_UNDEFINED
;

117 
c⁄°0u
.
u
.
numbî
 = 0;

119 
Áke_¥og
.
¥ogøm_size
 = 0;

122 
	`öô_°rögs
();

124 
	`öô_ŸabÀ
();

126 
	`öô_idítifõrs
();

128 
	`öô_loˇls
();

130 
max_co°
 = 
RUN_COST
;

131 
evÆ_co°
 = 
max_co°
;

133 
max_¨øy_size
 = 
MAX_ARRAY_SIZE
;

134 
max_buf„r_size
 = 
MAX_BUFFER_SIZE
;

135 
max_°rög_Àngth
 = 
MAX_STRING_LENGTH
;

138 
	}
}

140 
	$vm_°¨tup
(*
lib∑th
)

142 
îr‹_c⁄ãxt_t
 
ec⁄
;

145 i‡(
	`chdú
(
lib∑th
) == - 1)

148 
	`Ârötf
(
°dîr
, "Eº‹:BadÜib dúe˘‹y: %s\n", 
lib∑th
);

149 
	`exô
( - 1);

152 
	`mem£t
(
game_lib_∑th
, '\0', (game_lib_path));

153 i‡(
	`gëcwd
(
game_lib_∑th
, 
LIB_PATH_SIZE
Ë=
NULL
) {

154 
	`Ârötf
(
°dîr
, "Eº‹:BadÜib dúe˘‹y: %s\n", 
lib∑th
);

155 
	`exô
(-1);

158 
	`¢¥ötf
(
game_lib_bö_∑th
, (game_lib_bö_∑th), "%s/bö", 
game_lib_∑th
);

160 
	`£t_öc_li°
(
INCLUDE_DIRS
);

162 
	`öô_num_¨gs
();

163 
	`ª£t_machöe
(1);

165 
	`add_¥edeföes
(
game_lib_∑th
);

167 
	`ßve_c⁄ãxt
(&
ec⁄
);

168 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
) )

171 
	`debug_mesßge
("Thêsimul_efu¿(%sËobje˘†mu° bêlﬂdabÀ.\n", 
SIMUL_EFUN
);

172 
	`exô
( - 1);

176 
	`öô_simul_efun
(
SIMUL_EFUN
);

178 
	`p›_c⁄ãxt
(&
ec⁄
);

179 
	}
}

210 
moduÀ_öô_gamed
();

211 
moduÀ_öô_√td
();

212 
moduÀ_öô_dbd
();

214 
sy°em_°¨tup_gamed
();

215 
sy°em_°¨tup_√td
();

216 
sy°em_°¨tup_dbd
();

218 * 
fs_c⁄fig_gë_°rög
(*
key
);

219 
fs_c⁄fig_gë_öt
(*
key
);

220 
lﬂd_c⁄fig_fûe
(*
fûíame
);

222 
	$maö
(
¨gc
, **
¨gv
)

224 
îr‹_c⁄ãxt_t
 
ec⁄
;

225 
ch
;

226 *
runfûe
 = 
NULL
;

227 *
lib∑th
 = 
NULL
;

230 (*
moduÀ_öô
)();

231 (*
°¨tup
)();

233 
moduÀ_öô
 = 
moduÀ_öô_gamed
;

234 
°¨tup
 = 
sy°em_°¨tup_gamed
;

237  (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f:andbr:l:") ) != - 1)

239 
	`¥ötf
("›töd: %d\n", 
›töd
);

240 
ch
)

244 
lib∑th
 = 
›èrg
;

248 
c⁄fig_fûe
 = 
›èrg
;

251 
comp_Êag
 = 1;

254 
run_Êag
 = 1;

255 
runfûe
 = 
›èrg
;

258 
auth_Êag
 = 1;

260 
moduÀ_öô
 = 
moduÀ_öô_√td
;

261 
°¨tup
 = 
sy°em_°¨tup_√td
;

264 
moduÀ_öô
 = 
moduÀ_öô_dbd
;

265 
°¨tup
 = 
sy°em_°¨tup_dbd
;

268 
	`¥ötf
("Œ¥÷™≤Œ ˝:%c\n", 
ch
);

273 i‡(!
lib∑th
) {

274 
lib∑th
 = 
QTZ_SîvîEngöe_LIB
;

279 #ifde‡
BINARIES


280 
	`öô_bö¨õs
(
¨gc
, 
¨gv
);

284 
	`vm_öô
();

285 
	`vm_°¨tup
(
lib∑th
);

290 
	#sig«l
(
sig
, 
h™dÀr
Ë()(h™dÀr);

	)

292 #ifde‡
SIGFPE


293 
	`sig«l
(
SIGFPE
, 
sig_Âe
);

295 #ifde‡
TRAP_CRASHES


296 #ifde‡
SIGUSR1


297 
	`sig«l
(
SIGUSR1
, 
sig_u§1
);

299 #ifde‡
SIGUSR2


300 
	`sig«l
(
SIGUSR2
, 
sig_u§2
);

302 
	`sig«l
(
SIGTERM
, 
sig_ãrm
);

303 
	`sig«l
(
SIGINT
, 
sig_öt
);

304 #i‚de‡
DEBUG


305 #i‡
	`deföed
(
SIGABRT
Ë&& !deföed(
LATTICE
)

306 
	`sig«l
(
SIGABRT
, 
sig_abπ
);

308 #ifde‡
SIGIOT


309 
	`sig«l
(
SIGIOT
, 
sig_iŸ
);

311 #ifde‡
SIGHUP


312 
	`sig«l
(
SIGHUP
, 
sig_hup
);

314 #ifde‡
SIGBUS


315 
	`sig«l
(
SIGBUS
, 
sig_bus
);

317 #i‚de‡
LATTICE


318 
	`sig«l
(
SIGILL
, 
sig_ûl
);

322 #i‚de‡
WIN32


323 #ifde‡
USE_BSD_SIGNALS


324 
	`sig«l
(
SIGCHLD
, 
sig_˛d
);

326 
	`sig«l
(
SIGCLD
, 
sig_˛d
);

330 
	`moduÀ_öô
();

333 i‡(
comp_Êag
)

335 
	`ßve_c⁄ãxt
(&
ec⁄
);

336 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
) )

338 
	`debug_mesßge
("compileÉrror!!!\n");

339 
	`exô
( - 1);

342 
	`ˇŒ_s¸ùt_func
("/rc/main", "pre_init", "");

343 
	`compûe_Æl_fûe
("/", 0);

344 
	`p›_c⁄ãxt
(&
ec⁄
);

345 
	`debug_mesßge
("±‡“Î¥˙¬ÎÕÍ±œ\n");

350 i‡(
runfûe
 !
NULL
)

352 
	`¥ötf
("W™àTÿru¿fûê%†\¿", 
runfûe
);

355 
	`ˇŒ_s¸ùt_func
(
runfûe
, "main", "");

361 
	`°¨tup
();

363 
	}
}

366 
	$compûe_Æl_fûe
(*
∑th
, 
dïth
)

368 
DIR
 *
dúp
;

369 
dúít
 *
dp
;

370 
ªÆ∑th
[256];

371 
∑th«me
[256];

373 i‡(
	`°rcmp
(
∑th
, "/"Ë=0 || såcmp’©h, 
game_lib_∑th
) == 0)

375 
∑th
 = "";

376 
dïth
 = 0;

377 } 
dïth
 += 1;

378 i‡(
dïth
 >
maxdïth
)

382 
	`°æ˝y
(
ªÆ∑th
, 
game_lib_∑th
, (realpath) );

383 
	`°æˇt
(
ªÆ∑th
, "/", (realpath) );

384 
	`°æˇt
(
ªÆ∑th
, 
∑th
, (realpath) );

386 
dúp
 = 
	`›ídú
(
ªÆ∑th
);

387 i‡(
dúp
 =
NULL
)

389 
	`¥ötf
("îr‹ compûê∑th: %s\n", 
∑th
);

392  (
dp
 = 
	`ªaddú
(
dúp
ËË!
NULL
)

394 i‡(
	`°rcmp
(
dp
->
d_«me
, "..") == 0 || strcmp(dp->d_name, ".") == 0)

398 
	`°æ˝y
(
∑th«me
, 
∑th
, (pathname) );

399 
	`°æˇt
(
∑th«me
, "/", (pathname) );

400 
	`°æˇt
(
∑th«me
, 
dp
->
d_«me
, (pathname) );

401 i‡(
dp
->
d_ty≥
 =
DT_DIR
 || dp->d_ty≥ =
DT_LNK
)

403 
	`compûe_Æl_fûe
(
∑th«me
, 
dïth
);

407 i‡(
dp
->
d_«mÀn
 >2 && (dp->
d_«me
[dp->d_namlen - 1] == 'c' || dp->d_name[dp->d_namlen - 1] == 'C') && dp->d_name[dp->d_namlen - 2] == '.')

409 
	`föd_obje˘
(
∑th«me
);

413 ()
	`˛o£dú
(
dúp
);

416 
	}
}

422 #ifde‡
DEBUGMALLOC


423 *
	$öt_°rög_c›y
(*
°r
, *
desc
)

425 *
	$öt_°rög_c›y
(*
°r
)

428 *
p
;

429 
Àn
;

432 
	`DEBUG_CHECK
(!
°r
, "Null stringÖassedÅo string_copy.\n");

433 
Àn
 = 
	`°æí
(
°r
);

434 i‡(
Àn
 > 
max_°rög_Àngth
)

436 
Àn
 = 
max_°rög_Àngth
;

437 
p
 = 
	`√w_°rög
(
Àn
, 
desc
);

438 ()
	`°∫˝y
(
p
, 
°r
, 
Àn
);

439 
p
[
Àn
] = '\0';

443 
p
 = 
	`√w_°rög
(
Àn
, 
desc
);

444 ()
	`°∫˝y
(
p
, 
°r
, 
Àn
 + 1);

446  
p
;

447 
	}
}

453 #ifde‡
DEBUGMALLOC


454 *
	$öt_°rög_u∆ök
(*
°r
, *
desc
)

456 *
	$öt_°rög_u∆ök
(*
°r
)

459 
mÆloc_block_t
 *
mbt
, *
√wmbt
;

461 
mbt
 = ( (
mÆloc_block_t
*)
°r
) - 1;

462 
mbt
->
ªf
--;

464 i‡(
mbt
->
size
 =
USHRT_MAX
)

466 
l
 = 
	`°æí
(
°r
 + 
USHRT_MAX
) + USHRT_MAX;

468 
√wmbt
 = (
mÆloc_block_t
*)
	`DXALLOC
(
l
 + (mÆloc_block_tË+ 1, 
TAG_MALLOC_STRING
, 
desc
);

469 
	`mem˝y
–(*Ë(
√wmbt
 + 1), (*Ë(
mbt
 + 1), 
l
 + 1);

470 
√wmbt
->
size
 = 
USHRT_MAX
;

471 
	`ADD_NEW_STRING
(
USHRT_MAX
, (
mÆloc_block_t
) );

475 
√wmbt
 = (
mÆloc_block_t
*)
	`DXALLOC
(
mbt
->
size
 + (mÆloc_block_tË+ 1, 
TAG_MALLOC_STRING
, 
desc
);

476 
	`mem˝y
–(*Ë(
√wmbt
 + 1), (*Ë(
mbt
 + 1), mbt->
size
 + 1);

477 
√wmbt
->
size
 = 
mbt
->size;

478 
	`ADD_NEW_STRING
(
mbt
->
size
, (
mÆloc_block_t
) );

480 
√wmbt
->
ªf
 = 1;

481 
CHECK_STRING_STATS
;

483  (*Ë(
√wmbt
 + 1);

484 
	}
}

490 
	$_Touch
(c⁄° *
P©hFûe
)

492 
°©
 
°
;

493 
TempDú
[
	`°æí
(
P©hFûe
) + 1];

494 c⁄° *
Sèπ
, *
Index
;

495 
fd
;

496 i‡(
	`°©
(
P©hFûe
, &
°
) != - 1)

501 
Sèπ
 = 
P©hFûe
;

502 
Index
 = 
NULL
;

503  (
Index
 = 
	`°rchr
(
Sèπ
, '/'ËË!
NULL
)

505 
	`°æ˝y
(
TempDú
, 
P©hFûe
, 
Index
 - PathFile + 1);

506 
Sèπ
 = 
Index
 + 1;

507 
	`mkdú
(
TempDú
, 0755);

510 
fd
 = 
	`›í
(
P©hFûe
, 
O_WRONLY
 | 
O_CREAT
, 0644);

511 i‡(
fd
 != - 1)

513 
	`˛o£
(
fd
);

520 
	}
}

526 
	$debug_mesßge
(*
fmt
, ...)

528 
≠≥nd
 = 0;

529 
deb_buf
[100];

530 *
deb
 = 
deb_buf
;

531 
time_t
 
tm
;

532 
va_li°
 
¨gs
;

533 
FILE
 *
Â
 = 
NULL
;

534 
	`V_DCL
(*
fmt
);

536 i‡(!
≠≥nd
)

541 i‡(
	`°æí
(
DEBUG_LOG_FILE
) )

543 
	`¢¥ötf
(
deb
, (
deb_buf
), "%s/%s", 
LOG_DIR
, 
DEBUG_LOG_FILE
);

547 
	`¢¥ötf
(
deb
, (
deb_buf
), "%s/debug.log", 
LOG_DIR
);

549 *
deb
 == '/')

551 
deb
++;

554 
	`_Touch
(
deb
);

555 
Â
 = 
	`f›í
(
deb
, 
≠≥nd
 ? "a" : "w");

562 i‡(!
Â
 && (
î∫o
 =
EMFILE


563 #ifde‡
ENFILE


564 || 
î∫o
 =
ENFILE


568 
Â
 = 
	`‰e›í
(
deb
, 
≠≥nd
 ? "a" : "w", 
°dout
);

569 
≠≥nd
 = 2;

571 
≠≥nd
 = 1;

574 i‡(!
Â
)

577 
	`≥º‹
(
deb
);

578 
	`ab‹t
();

580 
	`time
(&
tm
);

582 
	`Ârötf
(
Â
, "%s\t", 
	`f‹m©_time
(
tm
) );

583 
	`V_START
(
¨gs
, 
fmt
);

584 
	`V_VAR
(*, 
fmt
, 
¨gs
);

585 
	`vÂrötf
(
Â
, 
fmt
, 
¨gs
);

586 
	`fÊush
(
Â
);

587 
	`va_íd
(
¨gs
);

588 
	`V_START
(
¨gs
, 
fmt
);

589 
	`V_VAR
(*, 
fmt
, 
¨gs
);

590 
	`vÂrötf
(
°dîr
, 
fmt
, 
¨gs
);

591 
	`fÊush
(
°dîr
);

592 
	`va_íd
(
¨gs
);

597 i‡(
≠≥nd
 != 2)

599 ()
	`f˛o£
(
Â
);

605 i‡(!
≠≥nd
)

607 
≠≥nd
 = 1;

609 
	}
}

615 
	g¶ow_shut_down_to_do
 = 0;

617 *
	$xÆloc
(
size
)

619 *
p
;

620 
goög_to_exô
;

622 i‡(
goög_to_exô
)

624 
	`exô
(3);

626 #ifde‡
DEBUG


627 i‡(
size
 == 0)

629 
	`Áèl
("Error: TriedÅoállocate 0 bytes.\n");

632 
p
 = (*)
	`DMALLOC
(
size
, 
TAG_MISC
, "main.c: xalloc");

633 i‡(
p
 == 0)

635 i‡(
ª£rved_¨ó
)

637 
	`FREE
(
ª£rved_¨ó
);

640 
p
 = "Error:Temporarily out of MEMORY. FreeingÑeserve.\n";

641 
	`wrôe
(1, 
p
, 
	`°æí
(p) );

642 
ª£rved_¨ó
 = 0;

643 
¶ow_shut_down_to_do
 = 6;

644  
	`xÆloc
(
size
);

646 
goög_to_exô
 = 1;

648 
	`Áèl
("Totally out of MEMORY:.\n");

650  
p
;

651 
	}
}

657 
CDECL
 
	$PSIG
(
sig_˛d
)

659 #i‚de‡
WIN32


660 
°©us
;

661 ()
sig
;

662 #ifde‡
USE_BSD_SIGNALS


663 
	`waô3
(&
°©us
, 
WNOHANG
, 
NULL
) > 0)

666 
	`waô
(&
°©us
);

667 
	`sig«l
(
SIGCLD
, 
sig_˛d
);

670 
	}
}

677 
CDECL
 
	$PSIG
(
sig_Âe
)

679 
	`Áèl
("Floating-point Exception!");

680 
	}
}

686 #ifde‡
TRAP_CRASHES


692 
CDECL
 
	$PSIG
(
sig_u§1
)

695 
	`push_c⁄°™t_°rög
("Host machine is shutting down");

696 
	`push_undeföed
();

697 
	`push_undeföed
();

698 
	`≠∂y_ma°î_ob
(
APPLY_CRASH
, 3);

700 
	`debug_mesßge
("OS Received SIGUSR1, callingÉxit(-1)\n");

701 
	`exô
( - 1);

702 
	}
}

705 
CDECL
 
	$PSIG
(
sig_u§2
)

707 
	`debug_mesßge
("OS Received SIGUSR2\n");

719 
	}
}

724 
CDECL
 
	$PSIG
(
sig_ãrm
)

727 
	`debug_mesßge
("ProcessÅerminated, calling shutdownOS(-99)\n");

728 
OS_is_beög_shut_down
 = 1;

730 
	`shutdownOS
( - 99);

731 
	}
}

733 
CDECL
 
	$PSIG
(
sig_öt
)

736 
	`debug_mesßge
("ProcessÅerminated, calling shutdownOS(-100)\n");

737 
OS_is_beög_shut_down
 = 1;

738 
	`shutdownOS
( - 100);

739 
	}
}

741 #i‚de‡
DEBUG


743 
CDECL
 
	$PSIG
(
sig_£gv
)

746 
	`debug_mesßge
("\nOOPS!! Error:Segmentation falut :( ");

747 
	`exô
(-9);

748 
	}
}

751 
CDECL
 
	$PSIG
(
sig_bus
)

754 
	`debug_mesßge
("\nOOPS!! Error:BusÉrror :( ");

755 
	`exô
(-8);

756 
	}
}

758 
CDECL
 
	$PSIG
(
sig_ûl
)

761 
	`Áèl
("Error:Illegal instruction");

762 
	}
}

764 
CDECL
 
	$PSIG
(
sig_hup
)

767 
	`Áèl
("OS Hangup!");

768 
	}
}

770 
CDECL
 
	$PSIG
(
sig_abπ
)

773 
	`Áèl
("OS Aborted");

774 
	}
}

776 
CDECL
 
	$PSIG
(
sig_iŸ
)

779 
	`Áèl
("OS Aborted(IOT)");

780 
	}
}

	@src/make_func.c

4 
	#YYBISON
 1

	)

6 
	#ID
 258

	)

7 
	#NUM
 259

	)

8 
	#DEFAULT
 260

	)

9 
	#OPERATOR
 261

	)

13 
	#EDIT_SOURCE


	)

14 
	#NO_OPCODES


	)

15 
	~"°d.h
"

16 
	~"make_func.h
"

17 
	~"Àx.h
"

18 
	~"¥ïro˚ss.h
"

19 
	~"edô_sour˚.h
"

21 #ifde‡
WIN32


22 
	~<¥o˚ss.h
>

25 
	gnum_buff
 = 0;

26 
	g›_code
, 
	gefun_code
, 
	gefun1_code
;

27 *
	g›î_codes
[
MAX_FUNC
];

28 *
	gefun_codes
[
MAX_FUNC
], *
	gefun1_codes
[MAX_FUNC];

29 *
	gefun_«mes
[
MAX_FUNC
], *
	gefun1_«mes
[MAX_FUNC];

30 *
	gkey
[
MAX_FUNC
], *
	gbuf
[MAX_FUNC];

32 
	gmö_¨g
 = - 1, 
	glimô_max
 = 0;

38 
	g¨g_ty≥s
[400], 
	gœ°_cuºít_ty≥
;

44 
	gcuº_¨g_ty≥s
[40], 
	gcuº_¨g_ty≥_size
;

46 
	sty≥


48 *
	m«me
;

49 
	mnum
;

50 } 
	gty≥s
[] =

53 "void", 
VOID


58 "öt", 
INT


63 "°rög", 
STRING


68 "obje˘", 
OBJECT


73 "m≠pög", 
MAPPING


78 "mixed", 
MIXED


83 "unknown", 
UNKNOWN


88 "Êﬂt", 
FLOAT


93 "fun˘i⁄", 
FUNCTION


98 "buf„r", 
BUFFER


104 
	#NELEMS
(
¨r
Ë(áº / áº[0])

	)

109 
	mnumbî
;

110 *
	m°rög
;

111 } 
	tYYSTYPE
;

113 #i‚de‡
YYLTYPE


114 
	syy…y≥


116 
	mtime°amp
;

117 
	mfú°_löe
;

118 
	mfú°_cﬁumn
;

119 
	mœ°_löe
;

120 
	mœ°_cﬁumn
;

121 *
	mãxt
;

122 } 
	tyy…y≥
;

124 
	#YYLTYPE
 
yy…y≥


	)

127 
	~<°dio.h
>

129 #i‚de‡
__˝lu•lus


130 #i‚de‡
__STDC__


131 c⁄°

	)

137 
	#YYFINAL
 40

	)

138 
	#YYFLAG
 -32768

	)

139 
	#YYNTBASE
 15

	)

141 
	#YYTRANSLATE
(
x
Ë(()(xË<261 ? 
yyå™¶©e
[x] : 29)

	)

143 c⁄° 
	gyyå™¶©e
[] =

152 #i‡
YYDEBUG
 != 0

153 c⁄° 
	gyy¥hs
[] =

158 c⁄° 
	gyyrhs
[] =

166 #i‡
YYDEBUG
 != 0

167 c⁄° 
	gyyæöe
[] =

172 c⁄° *c⁄° 
	gyyäame
[] =

179 c⁄° 
	gyyr1
[] =

184 c⁄° 
	gyyr2
[] =

189 c⁄° 
	gyydeÁ˘
[] =

194 c⁄° 
	gyydefgŸo
[] =

199 c⁄° 
	gyy∑˘
[] =

205 c⁄° 
	gyypgŸo
[] =

211 
	#YYLAST
 42

	)

214 c⁄° 
	gyyèbÀ
[] =

219 c⁄° 
	gyycheck
[] =

248 #i‚de‡
Æloˇ


249 #ifde‡
__GNUC__


250 
	#Æloˇ
 
__buûtö_Æloˇ


	)

252 #i‡(!
deföed
 (
__STDC__
Ë&& deföed (
•¨c
)Ë|| deföed (
__•¨c__
Ë|| deföed (
__•¨c
Ë|| deföed (
__sgi
)

253 
	~<Æloˇ.h
>

255 #i‡
deföed
 (
MSDOS
Ë&& !deföed (
__TURBOC__
)

256 
	~<mÆloc.h
>

258 #i‡
deföed
(
_AIX
)

259 
	~<mÆloc.h
>

260 #¥agm®
Æloˇ


262 #ifde‡
__hpux


263 #ifde‡
__˝lu•lus


266 *
Æloˇ
();

269 *
Æloˇ
();

287 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

288 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

289 
	#YYEMPTY
 -2

	)

290 
	#YYEOF
 0

	)

291 
	#YYACCEPT
 (0)

	)

292 
	#YYABORT
 (1)

	)

293 
	#YYERROR
 
yyîæab1


	)

298 
	#YYFAIL
 
yyîæab


	)

299 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

300 
	#YYBACKUP
(
tokí
, 
vÆue
) \

302 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

303 { 
yych¨
 = (
tokí
), 
yylvÆ
 = (
vÆue
); \

304 
yych¨1
 = 
	`YYTRANSLATE
 (
yych¨
); \

305 
YYPOPSTACK
; \

306 
yybackup
; \

309 { 
	`yyîr‹
 ("sy¡axÉº‹: c™nŸ back up"); 
YYERROR
; } \

310 0)

	)

312 
	#YYTERROR
 1

	)

313 
	#YYERRCODE
 256

	)

315 #i‚de‡
YYPURE


316 
	#YYLEX
 
	`yyÀx
()

	)

319 #ifde‡
YYPURE


320 #ifde‡
YYLSP_NEEDED


321 #ifde‡
YYLEX_PARAM


322 
	#YYLEX
 
	`yyÀx
(&
yylvÆ
, &
yyŒoc
, 
YYLEX_PARAM
)

	)

324 
	#YYLEX
 
	`yyÀx
(&
yylvÆ
, &
yyŒoc
)

	)

327 #ifde‡
YYLEX_PARAM


328 
	#YYLEX
 
	`yyÀx
(&
yylvÆ
, 
YYLEX_PARAM
)

	)

330 
	#YYLEX
 
	`yyÀx
(&
yylvÆ
)

	)

337 #i‚de‡
YYPURE


339 
	gyych¨
;

340 
YYSTYPE
 
	gyylvÆ
;

343 #ifde‡
YYLSP_NEEDED


344 
YYLTYPE
 
	gyyŒoc
;

348 
	gyy√ºs
;

351 #i‡
YYDEBUG
 != 0

352 
	gyydebug
;

359 #i‚de‡
YYINITDEPTH


360 
	#YYINITDEPTH
 200

	)

366 #i‡
YYMAXDEPTH
 == 0

367 #unde‡
YYMAXDEPTH


370 #i‚de‡
YYMAXDEPTH


371 
	#YYMAXDEPTH
 10000

	)

375 #ifde‡
__GNUC__


376 
yy∑r£
();

379 #i‡
__GNUC__
 > 1

380 
	#__yy_mem˝y
(
FROM
,
TO
,
COUNT
Ë
	`__buûtö_mem˝y
(TO,FROM,COUNT)

	)

382 #i‚de‡
__˝lu•lus


386 
	$__yy_mem˝y
(
‰om
, 
to
, 
cou¡
)*from;

387 *
to
;

388 
cou¡
;

390 *
f
 = 
‰om
;

391 *
t
 = 
to
;

392 
i
 = 
cou¡
;

394 
i
-- > 0)

396 *
t
++ = *
f
++;

398 
	}
}

404 
	$__yy_mem˝y
(*
‰om
, *
to
, 
cou¡
)

406 *
f
 = 
‰om
;

407 *
t
 = 
to
;

408 
i
 = 
cou¡
;

410 
i
-- > 0)

412 *
t
++ = *
f
++;

414 
	}
}

427 #ifde‡
YYPARSE_PARAM


428 
	#YYPARSE_PARAM_DECL
 *
YYPARSE_PARAM
;

	)

430 
	#YYPARSE_PARAM


	)

431 
	#YYPARSE_PARAM_DECL


	)

434 
	$yy∑r£
(
YYPARSE_PARAM
)
YYPARSE_PARAM_DECL


436 
yy°©e
;

437 
yyn
;

438 *
yys•
;

439 
YYSTYPE
 *
yyv•
;

440 
yyîr°©us
;

441 
yych¨1
 = 0;

443 
yysß
[
YYINITDEPTH
];

444 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

446 *
yyss
 = 
yysß
;

447 
YYSTYPE
 *
yyvs
 = 
yyvß
;

449 #ifde‡
YYLSP_NEEDED


450 
YYLTYPE
 
yylß
[
YYINITDEPTH
];

451 
YYLTYPE
 *
yyls
 = 
yylß
;

452 
YYLTYPE
 *
yyl•
;

454 
	#YYPOPSTACK
 (
yyv•
--, 
yys•
--, 
yyl•
--)

	)

456 
	#YYPOPSTACK
 (
yyv•
--, 
yys•
--)

	)

459 
yy°acksize
 = 
YYINITDEPTH
;

461 #ifde‡
YYPURE


462 
yych¨
;

463 
YYSTYPE
 
yylvÆ
;

464 
yy√ºs
;

465 #ifde‡
YYLSP_NEEDED


466 
YYLTYPE
 
yyŒoc
;

470 
YYSTYPE
 
yyvÆ
;

474 
yyÀn
;

476 #i‡
YYDEBUG
 != 0

477 i‡(
yydebug
)

479 
	`Ârötf
(
°dîr
, "StartingÖarse\n");

483 
yy°©e
 = 0;

484 
yyîr°©us
 = 0;

485 
yy√ºs
 = 0;

486 
yych¨
 = 
YYEMPTY
;

493 
yys•
 = 
yyss
 - 1;

494 
yyv•
 = 
yyvs
;

495 #ifde‡
YYLSP_NEEDED


496 
yyl•
 = 
yyls
;

502 
yy√w°©e
:

504 *++
yys•
 = 
yy°©e
;

506 i‡(
yys•
 >
yyss
 + 
yy°acksize
 - 1)

510 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

511 *
yyss1
 = 
yyss
;

512 #ifde‡
YYLSP_NEEDED


513 
YYLTYPE
 *
yyls1
 = 
yyls
;

517 
size
 = 
yys•
 - 
yyss
 + 1;

519 #ifde‡
yyovîÊow


522 #ifde‡
YYLSP_NEEDED


525 
	`yyovîÊow
("∑r£∏°ack ovîÊow", &
yyss1
, 
size
 *(*
yys•
), &
yyvs1
, sizê*(*
yyv•
), &
yyls1
, sizê*(*
yyl•
), &
yy°acksize
);

527 
	`yyovîÊow
("∑r£∏°ack ovîÊow", &
yyss1
, 
size
 *(*
yys•
), &
yyvs1
, sizê*(*
yyv•
), &
yy°acksize
);

530 
yyss
 = 
yyss1
;

531 
yyvs
 = 
yyvs1
;

532 #ifde‡
YYLSP_NEEDED


533 
yyls
 = 
yyls1
;

537 i‡(
yy°acksize
 >
YYMAXDEPTH
)

539 
	`yyîr‹
("parser stack overflow");

542 
yy°acksize
 *= 2;

543 i‡(
yy°acksize
 > 
YYMAXDEPTH
)

545 
yy°acksize
 = 
YYMAXDEPTH
;

547 
yyss
 = (*)
	`Æloˇ
(
yy°acksize
 *(*
yys•
) );

548 
	`__yy_mem˝y
–(*)
yyss1
, (*)
yyss
, 
size
 *(*
yys•
) );

549 
yyvs
 = (
YYSTYPE
*)
	`Æloˇ
(
yy°acksize
 *(*
yyv•
) );

550 
	`__yy_mem˝y
–(*)
yyvs1
, (*)
yyvs
, 
size
 *(*
yyv•
) );

551 #ifde‡
YYLSP_NEEDED


552 
yyls
 = (
YYLTYPE
*)
	`Æloˇ
(
yy°acksize
 *(*
yyl•
) );

553 
	`__yy_mem˝y
–(*)
yyls1
, (*)
yyls
, 
size
 *(*
yyl•
) );

557 
yys•
 = 
yyss
 + 
size
 - 1;

558 
yyv•
 = 
yyvs
 + 
size
 - 1;

559 #ifde‡
YYLSP_NEEDED


560 
yyl•
 = 
yyls
 + 
size
 - 1;

563 #i‡
YYDEBUG
 != 0

564 i‡(
yydebug
)

566 
	`Ârötf
(
°dîr
, "Sèck sizêö¸ó£dÅÿ%d\n", 
yy°acksize
);

570 i‡(
yys•
 >
yyss
 + 
yy°acksize
 - 1)

572 
YYABORT
;

576 #i‡
YYDEBUG
 != 0

577 i‡(
yydebug
)

579 
	`Ârötf
(
°dîr
, "E¡îög sèã %d\n", 
yy°©e
);

583 
yybackup
;

584 
yybackup
:

592 
yyn
 = 
yy∑˘
[
yy°©e
];

593 i‡(
yyn
 =
YYFLAG
)

595 
yydeÁu…
;

603 i‡(
yych¨
 =
YYEMPTY
)

605 #i‡
YYDEBUG
 != 0

606 i‡(
yydebug
)

608 
	`Ârötf
(
°dîr
, "ReadingáÅoken: ");

611 
yych¨
 = 
YYLEX
;

616 i‡(
yych¨
 <= 0)

619 
yych¨1
 = 0;

620 
yych¨
 = 
YYEOF
;

622 #i‡
YYDEBUG
 != 0

623 i‡(
yydebug
)

625 
	`Ârötf
(
°dîr
, "NowátÉnd of input.\n");

631 
yych¨1
 = 
	`YYTRANSLATE
(
yych¨
);

633 #i‡
YYDEBUG
 != 0

634 i‡(
yydebug
)

636 
	`Ârötf
(
°dîr
, "Nexàtokí i†%d (%s", 
yych¨
, 
yyäame
[
yych¨1
]);

639 #ifde‡
YYPRINT


640 
	`YYPRINT
(
°dîr
, 
yych¨
, 
yylvÆ
);

642 
	`Ârötf
(
°dîr
, ")\n");

647 
yyn
 +
yych¨1
;

648 i‡(
yyn
 < 0 || yy¿> 
YYLAST
 || 
yycheck
[yyn] !
yych¨1
)

650 
yydeÁu…
;

653 
yyn
 = 
yyèbÀ
[yyn];

662 i‡(
yyn
 < 0)

664 i‡(
yyn
 =
YYFLAG
)

666 
yyîæab
;

668 
yyn
 = - yyn;

669 
yyªdu˚
;

671 i‡(
yyn
 == 0)

673 
yyîæab
;

676 i‡(
yyn
 =
YYFINAL
)

678 
YYACCEPT
;

683 #i‡
YYDEBUG
 != 0

684 i‡(
yydebug
)

686 
	`Ârötf
(
°dîr
, "Shi·ögÅokí %d (%s), ", 
yych¨
, 
yyäame
[
yych¨1
]);

691 i‡(
yych¨
 !
YYEOF
)

693 
yych¨
 = 
YYEMPTY
;

696 *++
yyv•
 = 
yylvÆ
;

697 #ifde‡
YYLSP_NEEDED


698 *++
yyl•
 = 
yyŒoc
;

702 i‡(
yyîr°©us
)

704 
yyîr°©us
--;

707 
yy°©e
 = 
yyn
;

708 
yy√w°©e
;

711 
yydeÁu…
:

713 
yyn
 = 
yydeÁ˘
[
yy°©e
];

714 i‡(
yyn
 == 0)

716 
yyîæab
;

720 
yyªdu˚
: 
yyÀn
 = 
yyr2
[
yyn
];

721 i‡(
yyÀn
 > 0)

723 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

727 #i‡
YYDEBUG
 != 0

728 i‡(
yydebug
)

730 
i
;

732 
	`Ârötf
(
°dîr
, "Reducög vüÑuÀ %d (löê%d), ", 
yyn
, 
yyæöe
[yyn]);

735 
i
 = 
yy¥hs
[
yyn
]; 
yyrhs
[i] > 0; i++)

737 
	`Ârötf
(
°dîr
, "%†", 
yyäame
[
yyrhs
[
i
]]);

739 
	`Ârötf
(
°dîr
, " -> %s\n", 
yyäame
[
yyr1
[
yyn
]]);

744 
yyn
)

750 
f_«me
[500], 
c
;

751 
i
 = 2;

752 
	`•rötf
(
f_«me
, "F_%s", 
yyv•
[0].
°rög
);

753  (
c
 = 
f_«me
[
i
]) )

755 i‡(
	`i¶owî
(
c
) )

757 
f_«me
[
i
++] = 
	`touµî
(
c
);

761 
i
++;

764 
›î_codes
[
›_code
] = (*)
	`mÆloc
(
i
 + 1);

765 
	`°r˝y
(
›î_codes
[
›_code
], 
f_«me
);

766 
	`‰ì
(
yyv•
[0].
°rög
);

768 
›_code
++;

775 
yyvÆ
.
°rög
 = "";

782 
yyvÆ
.
°rög
 = "DEFAULT_NONE";

789 
buf
[40];

790 
	`•rötf
(
buf
, "%i", 
yyv•
[0].
numbî
);

791 
yyvÆ
.
°rög
 = 
buf
;

798 i‡(
	`°rcmp
(
yyv•
[0].
°rög
, "F_THIS_OBJECT") )

800 
	`yyîr‹
("Illegal default");

802 
yyvÆ
.
°rög
 = "DEFAULT_THIS_OBJECT";

809 
buff
[500];

810 
f_«me
[500];

811 
i
, 
Àn
;

812 i‡(
mö_¨g
 == - 1)

814 
mö_¨g
 = 
yyv•
[ - 3].
numbî
;

816 i‡(
mö_¨g
 > 4)

818 
	`mf_Áèl
("min_arg > 4\n");

820 i‡(
yyv•
[ - 5].
°rög
[0] == '\0')

822 i‡(
	`°æí
(
yyv•
[ - 6].
°rög
Ë+ 1+2 >  
f_«me
)

824 
	`mf_Áèl
("AÜocal buffer wasÅoo small!(1)\n");

826 
	`•rötf
(
f_«me
, "F_%s", 
yyv•
[ - 6].
°rög
);

827 
Àn
 = 
	`°æí
(
f_«me
);

828 
i
 = 0; i < 
Àn
; i++)

830 i‡(
	`i¶owî
(
f_«me
[
i
]) )

832 
f_«me
[
i
] = 
	`touµî
(f_name[i]);

835 i‡(
mö_¨g
 =1 && !
limô_max
 && 
yyv•
[ - 3].
numbî
 == 1)

837 
efun1_codes
[
efun1_code
] = (*)
	`mÆloc
(
Àn
 + 1);

838 
	`°r˝y
(
efun1_codes
[
efun1_code
], 
f_«me
);

839 
efun1_«mes
[
efun1_code
] = (*)
	`mÆloc
(
Àn
 - 1);

840 
	`°r˝y
(
efun1_«mes
[
efun1_code
], 
yyv•
[ - 6].
°rög
);

841 
efun1_code
++;

845 
efun_codes
[
efun_code
] = (*)
	`mÆloc
(
Àn
 + 1);

846 
	`°r˝y
(
efun_codes
[
efun_code
], 
f_«me
);

847 
efun_«mes
[
efun_code
] = (*)
	`mÆloc
(
Àn
 - 1);

848 
	`°r˝y
(
efun_«mes
[
efun_code
], 
yyv•
[ - 6].
°rög
);

849 
efun_code
++;

854 i‡(
	`°æí
(
yyv•
[ - 5].
°rög
Ë+ 1+17 >  
f_«me
)

856 
	`mf_Áèl
("AÜocal buffer wasÅoo small(2)!\n");

858 
	`•rötf
(
f_«me
, "F_%†| F_ALIAS_FLAG", 
yyv•
[ - 5].
°rög
);

859 
Àn
 = 
	`°æí
(
f_«me
);

860 
i
 = 0; i < 
Àn
; i++)

862 i‡(
	`i¶owî
(
f_«me
[
i
]) )

864 
f_«me
[
i
] = 
	`touµî
(f_name[i]);

867 
	`‰ì
(
yyv•
[ - 5].
°rög
);

869 
i
 = 0; i < 
œ°_cuºít_ty≥
; i++)

871 
j
;

872 
j
 = 0; j + 
i
 < 
œ°_cuºít_ty≥
 && j < 
cuº_¨g_ty≥_size
; j++)

874 i‡(
cuº_¨g_ty≥s
[
j
] !
¨g_ty≥s
[
i
 + j])

879 i‡(
j
 =
cuº_¨g_ty≥_size
)

884 i‡(
i
 =
œ°_cuºít_ty≥
)

886 
j
;

887 
j
 = 0; j < 
cuº_¨g_ty≥_size
; j++)

889 
¨g_ty≥s
[
œ°_cuºít_ty≥
++] = 
cuº_¨g_ty≥s
[
j
];

890 i‡(
œ°_cuºít_ty≥
 =
	`NELEMS
(
¨g_ty≥s
) )

892 
	`yyîr‹
("Array 'arg_types' isÅoo small");

896 i‡(!
	`°rcmp
(
yyv•
[ - 6].
°rög
, "ˇŒ_Ÿhî"Ë&& !
	`lookup_deföe
("CAST_CALL_OTHERS") )

898 
yyv•
[ - 7].
numbî
 = 
MIXED
;

900 
	`•rötf
(
buff
, "{\"%s\",%s,0,0,%d,%d,%s,%s,%s,%s,%s,%d,%s},\n", 
yyv•
[ - 6].
°rög
, 
f_«me
, 
mö_¨g
, 
limô_max
 ? - 1: yyv•[ - 3].
numbî
, yyv•[ - 7].numbî !
VOID
 ? 
	`˘y≥
(yyvsp[ - 7].number):

901 "TYPE_NOVALUE", 
	`ëy≥
(0),Éty≥(1),Éty≥(2),Éty≥(3), 
i
, 
yyv•
[ - 2].
°rög
);

902 i‡(
	`°æí
(
buff
) >  buff)

904 
	`mf_Áèl
("Local buffer overwritten !\n");

907 
key
[
num_buff
] = 
yyv•
[ - 6].
°rög
;

908 
buf
[
num_buff
] = (*)
	`mÆloc
(
	`°æí
(
buff
) + 1);

909 
	`°r˝y
(
buf
[
num_buff
], 
buff
);

910 
num_buff
++;

911 
mö_¨g
 = - 1;

912 
limô_max
 = 0;

913 
cuº_¨g_ty≥_size
 = 0;

920 
yyvÆ
.
numbî
 = 
yyv•
[ - 1].number | 0x10000;

927 
i
 = 
	`NELEMS
(
ty≥s
);

928 
yyvÆ
.
numbî
 = 0;

929 
i
--)

931 i‡(
	`°rcmp
(
yyv•
[0].
°rög
, 
ty≥s
[
i
].
«me
) == 0)

933 
yyvÆ
.
numbî
 = 
ty≥s
[
i
].
num
;

937 i‡(!
yyvÆ
.
numbî
)

939 
buf
[256];

940 
	`•rötf
(
buf
, "InvÆidÅy≥: %s", 
yyv•
[0].
°rög
);

941 
	`yyîr‹
(
buf
);

943 
	`‰ì
(
yyv•
[0].
°rög
);

950 
yyvÆ
.
numbî
 = 0;

957 
yyvÆ
.
numbî
 = 1;

958 i‡(
yyv•
[0].
numbî
)

960 
mö_¨g
 = 0;

968 
yyvÆ
.
numbî
 = 
yyv•
[ - 2].number + 1;

969 i‡(
yyv•
[0].
numbî
)

971 
mö_¨g
 = 
yyvÆ
.
numbî
 - 1;

979 
yyvÆ
.
numbî
 = 
yyv•
[0].number;

980 
cuº_¨g_ty≥s
[
cuº_¨g_ty≥_size
++] = 0;

981 i‡(
cuº_¨g_ty≥_size
 =
	`NELEMS
(
cuº_¨g_ty≥s
) )

983 
	`yyîr‹
("Too manyárguments");

991 i‡(
yyv•
[0].
numbî
 !
VOID
)

993 
cuº_¨g_ty≥s
[
cuº_¨g_ty≥_size
++] = 
yyv•
[0].
numbî
;

994 i‡(
cuº_¨g_ty≥_size
 =
	`NELEMS
(
cuº_¨g_ty≥s
) )

996 
	`yyîr‹
("Too manyárguments");

999 
yyvÆ
.
numbî
 = 
yyv•
[0].number;

1006 
yyvÆ
.
numbî
 = (
yyv•
[0].numbî =
VOID
 && 
mö_¨g
 == - 1);

1013 
yyvÆ
.
numbî
 = (
mö_¨g
 =- 1 && (
yyv•
[ - 2].numbî || yyv•[0].numbî =
VOID
) );

1020 
yyvÆ
.
numbî
 = 
mö_¨g
 == - 1;

1021 
limô_max
 = 1;

1029 
yyv•
 -
yyÀn
;

1030 
yys•
 -
yyÀn
;

1031 #ifde‡
YYLSP_NEEDED


1032 
yyl•
 -
yyÀn
;

1035 #i‡
YYDEBUG
 != 0

1036 i‡(
yydebug
)

1038 *
s•1
 = 
yyss
 - 1;

1039 
	`Ârötf
(
°dîr
, "state stackÇow");

1040 
s•1
 !
yys•
)

1042 
	`Ârötf
(
°dîr
, " %d", *++
s•1
);

1044 
	`Ârötf
(
°dîr
, "\n");

1048 *++
yyv•
 = 
yyvÆ
;

1050 #ifde‡
YYLSP_NEEDED


1051 
yyl•
++;

1052 i‡(
yyÀn
 == 0)

1054 
yyl•
->
fú°_löe
 = 
yyŒoc
.first_line;

1055 
yyl•
->
fú°_cﬁumn
 = 
yyŒoc
.first_column;

1056 
yyl•
->
œ°_löe
 = (yylsp - 1)->last_line;

1057 
yyl•
->
œ°_cﬁumn
 = (yylsp - 1)->last_column;

1058 
yyl•
->
ãxt
 = 0;

1062 
yyl•
->
œ°_löe
 = (yyl• + 
yyÀn
 - 1)->last_line;

1063 
yyl•
->
œ°_cﬁumn
 = (yyl• + 
yyÀn
 - 1)->last_column;

1072 
yyn
 = 
yyr1
[yyn];

1074 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTBASE
] + *
yys•
;

1075 i‡(
yy°©e
 >0 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1077 
yy°©e
 = 
yyèbÀ
[yystate];

1081 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTBASE
];

1084 
yy√w°©e
;

1086 
yyîæab
:

1088 i‡(!
yyîr°©us
)

1091 ++
yy√ºs
;

1093 #ifde‡
YYERROR_VERBOSE


1094 
yyn
 = 
yy∑˘
[
yy°©e
];

1096 i‡(
yyn
 > 
YYFLAG
 && yy¿< 
YYLAST
)

1098 
size
 = 0;

1099 *
msg
;

1100 
x
, 
cou¡
;

1102 
cou¡
 = 0;

1104 
x
 = (
yyn
 < 0 ? - yyn: 0); x < ((
yyäame
) / (*) ); x++)

1105 i‡(
yycheck
[
x
 + 
yyn
] == x)

1107 
size
 +
	`°æí
(
yyäame
[
x
]Ë+ 15, 
cou¡
++;

1109 
msg
 = (*)
	`mÆloc
(
size
 + 15);

1110 i‡(
msg
 != 0)

1112 
	`°r˝y
(
msg
, "parseÉrror");

1114 i‡(
cou¡
 < 5)

1116 
cou¡
 = 0;

1117 
x
 = (
yyn
 < 0 ? - yyn: 0); x < ((
yyäame
) / (*) ); x++)

1118 i‡(
yycheck
[
x
 + 
yyn
] == x)

1120 
	`°rˇt
(
msg
, 
cou¡
 == 0 ? ",Éxpecting `" : " or `");

1121 
	`°rˇt
(
msg
, 
yyäame
[
x
]);

1122 
	`°rˇt
(
msg
, "'");

1123 
cou¡
++;

1126 
	`yyîr‹
(
msg
);

1127 
	`‰ì
(
msg
);

1131 
	`yyîr‹
("parseÉrror;álso virtual memoryÉxceeded");

1137 
	`yyîr‹
("parseÉrror");

1141 
yyîæab1
;

1142 
yyîæab1
:

1144 i‡(
yyîr°©us
 == 3)

1149 i‡(
yych¨
 =
YYEOF
)

1151 
YYABORT
;

1154 #i‡
YYDEBUG
 != 0

1155 i‡(
yydebug
)

1157 
	`Ârötf
(
°dîr
, "DisˇrdögÅokí %d (%s).\n", 
yych¨
, 
yyäame
[
yych¨1
]);

1161 
yych¨
 = 
YYEMPTY
;

1167 
yyîr°©us
 = 3;

1169 
yyîrh™dÀ
;

1171 
yyîrdeÁu…
:

1176 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1177 i‡(
yyn
)

1179 
yydeÁu…
;

1183 
yyîΩ›
:

1185 i‡(
yys•
 =
yyss
)

1187 
YYABORT
;

1189 
yyv•
--;

1190 
yy°©e
 = *--
yys•
;

1191 #ifde‡
YYLSP_NEEDED


1192 
yyl•
--;

1195 #i‡
YYDEBUG
 != 0

1196 i‡(
yydebug
)

1198 *
s•1
 = 
yyss
 - 1;

1199 
	`Ârötf
(
°dîr
, "Error: state stackÇow");

1200 
s•1
 !
yys•
)

1202 
	`Ârötf
(
°dîr
, " %d", *++
s•1
);

1204 
	`Ârötf
(
°dîr
, "\n");

1208 
yyîrh™dÀ
:

1210 
yyn
 = 
yy∑˘
[
yy°©e
];

1211 i‡(
yyn
 =
YYFLAG
)

1213 
yyîrdeÁu…
;

1216 
yyn
 +
YYTERROR
;

1217 i‡(
yyn
 < 0 || yy¿> 
YYLAST
 || 
yycheck
[yyn] !
YYTERROR
)

1219 
yyîrdeÁu…
;

1222 
yyn
 = 
yyèbÀ
[yyn];

1223 i‡(
yyn
 < 0)

1225 i‡(
yyn
 =
YYFLAG
)

1227 
yyîΩ›
;

1229 
yyn
 = - yyn;

1230 
yyªdu˚
;

1232 i‡(
yyn
 == 0)

1234 
yyîΩ›
;

1237 i‡(
yyn
 =
YYFINAL
)

1239 
YYACCEPT
;

1242 #i‡
YYDEBUG
 != 0

1243 i‡(
yydebug
)

1245 
	`Ârötf
(
°dîr
, "ShiftingÉrrorÅoken, ");

1249 *++
yyv•
 = 
yylvÆ
;

1250 #ifde‡
YYLSP_NEEDED


1251 *++
yyl•
 = 
yyŒoc
;

1254 
yy°©e
 = 
yyn
;

1255 
yy√w°©e
;

1256 
	}
}

1265 *
	$˘y≥
(
n
)

1267 
buff
[100];

1268 *
p
 = (*)
NULL
;

1270 i‡(
n
 &0x10000)

1272 
	`°r˝y
(
buff
, "TYPE_MOD_ARRAY|");

1276 
buff
[0] = '\0';

1278 
n
 &= ~0x10000;

1279 
n
)

1281 
FLOAT
:

1282 
p
 = "TYPE_REAL";

1284 
FUNCTION
:

1285 
p
 = "TYPE_FUNCTION";

1287 
VOID
:

1288 
p
 = "TYPE_VOID";

1290 
STRING
:

1291 
p
 = "TYPE_STRING";

1293 
INT
:

1294 
p
 = "TYPE_NUMBER";

1296 
OBJECT
:

1297 
p
 = "TYPE_OBJECT";

1299 
MAPPING
:

1300 
p
 = "TYPE_MAPPING";

1302 
BUFFER
:

1303 
p
 = "TYPE_BUFFER";

1305 
MIXED
:

1306 
p
 = "TYPE_ANY";

1308 
UNKNOWN
:

1309 
p
 = "TYPE_UNKNOWN";

1312 
	`yyîr‹
("BadÅype!");

1314 
	`°rˇt
(
buff
, 
p
);

1315 i‡(
	`°æí
(
buff
) + 1 >  buff)

1317 
	`mf_Áèl
("Local buffer overwritten in ctype()");

1319  
buff
;

1320 
	}
}

1326 *
	$ëy≥1
(
n
)

1328 i‡(
n
 &0x10000)

1332 
n
)

1334 
FLOAT
:

1336 
FUNCTION
:

1338 
INT
:

1340 
OBJECT
:

1342 
MAPPING
:

1344 
STRING
:

1346 
BUFFER
:

1348 
MIXED
:

1351 
	`yyîr‹
("IllegalÅype forárgument");

1354 
	}
}

1360 *
	$ëy≥
(
n
)

1362 
i
;

1363 
loˇl_size
 = 100;

1364 *
buff
 = (*)
	`mÆloc
(
loˇl_size
);

1366 
i
 = 0; i < 
cuº_¨g_ty≥_size
; i++)

1368 i‡(
n
 == 0)

1372 i‡(
cuº_¨g_ty≥s
[
i
] == 0)

1374 
n
--;

1377 i‡(
i
 =
cuº_¨g_ty≥_size
)

1381 
buff
[0] = '\0';

1382 ; 
cuº_¨g_ty≥s
[
i
] != 0; i++)

1384 *
p
;

1385 i‡(
cuº_¨g_ty≥s
[
i
] =
VOID
)

1389 i‡(
buff
[0] != '\0')

1391 
	`°rˇt
(
buff
, "|");

1393 
p
 = 
	`ëy≥1
(
cuº_¨g_ty≥s
[
i
]);

1398 i‡(
	`°æí
(
p
Ë+ såÀn(
buff
Ë+ 2 > 
loˇl_size
)

1400 
	`Ârötf
(
°dîr
, "Buffer overflow!\n");

1401 
	`exô
(1);

1403 
	`°rˇt
(
buff
, 
	`ëy≥1
(
cuº_¨g_ty≥s
[
i
]) );

1405 i‡(!
	`°rcmp
(
buff
, "") )

1407 
	`°r˝y
(
buff
, "T_ANY");

1409  
buff
;

1410 
	}
}

1416 
idít
();

1418 
	$yyÀx
()

1420 
c
;

1424 
c
 = 
	`gëc
(
yyö
) )

1430 
cuºít_löe
++;

1434 
buff
[2048];

1435 
	`fgës
(
buff
, 2047, 
yyö
);

1436 
	`Ârötf
(
°dîr
, "C⁄figuøti⁄ÖrobÀm: %s\n", 
buff
);

1437 
	`exô
( - 1);

1441 
löe
;

1443 
aBuf
[2048], 
‚ame
[2048];

1444 
	`fgës
(
aBuf
, 2047, 
yyö
);

1445 i‡(
	`ssˇnf
(
aBuf
, "%d \"%[^\"]\"", &
löe
, 
‚ame
) )

1447 
cuºít_löe
 = 
löe
;

1448 i‡(
cuºít_fûe
)

1450 
	`‰ì
(
cuºít_fûe
);

1452 
cuºít_fûe
 = (*)
	`mÆloc
(
	`°æí
(
‚ame
) + 1);

1453 
	`°r˝y
(
cuºít_fûe
, 
‚ame
);

1456 i‡(
	`ssˇnf
(
aBuf
, "%d", &
löe
) )

1458 
cuºít_löe
 = 
löe
;

1460 
cuºít_löe
++;

1463 
EOF
:

1464 
	`f˛o£
(
yyö
);

1467 i‡–(
c
 >= '0' && c <= '9') || c == '-')

1469 
v
;

1470 
√g
 = 0;

1471 
v
 = 0;

1472 i‡(
c
 == '-')

1474 
√g
 = 1;

1475 
c
 = '0';

1479 
v
 = v * 10+(
c
 - '0');

1480 
c
 = 
	`gëc
(
yyö
);

1482 
c
 >= '0' && c <= '9');

1483 
	`ungëc
(
c
, 
yyö
);

1484 
yylvÆ
.
numbî
 = (
√g
 ? - 
v
: v);

1485  
NUM
;

1487 i‡(
	`ißlunum
(
c
) )

1489  
	`idít
(
c
);

1491  
c
;

1494 
	}
}

1500 
	$idít
(
c
)

1502 
buff
[100];

1503 
Àn
;

1505 
Àn
 = 0; 
	`ißlunum
(
c
); c = 
	`gëc
(
yyö
) )

1507 
buff
[
Àn
++] = 
c
;

1508 i‡(
Àn
 = 
buff
 - 1)

1510 
	`yyîr‹
("TooÜong indentifier");

1514 ()
	`ungëc
(
c
, 
yyö
);

1515 
buff
[
Àn
] = '\0';

1516 i‡(!
	`°rcmp
(
buff
, "default") )

1518  
DEFAULT
;

1520 i‡(!
	`°rcmp
(
buff
, "operator") )

1522  
OPERATOR
;

1525 
yylvÆ
.
°rög
 = (*)
	`mÆloc
(
	`°æí
(
buff
) + 1);

1526 
	`°r˝y
(
yylvÆ
.
°rög
, 
buff
);

1527  
ID
;

1528 
	}
}

	@src/make_malloc.c

4 
	#NO_SOCKETS


	)

5 
	#NO_OPCODES


	)

6 
	~"°d.h
"

8 #i‡!
deföed
(
THE_MALLOC
Ë&& !deföed(
THE_WRAPPER
)

9 
	$maö
()

11 
	`puts
("MemoryÖackageánd/or malloc wrapper incorrectly specified in options.h\n");

12 
	}
}

14 
	$maö
()

16 
	`u∆ök
("malloc.c");

17 
	`u∆ök
("mallocwrapper.c");

19 
	}
}

	@src/malloc.c

34 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

35 
	gsccsid
[] = "@(#)malloc.c 5.11 (Berkeley) 2/23/91";

49 
	#IN_MALLOC_WRAPPER


	)

50 
	#NO_OPCODES


	)

51 
	~"°d.h
"

53 #unde‡
NULL


54 
	#NULL
 0

	)

56 #ifde‡
_SEQUENT_


57 
	tu_ch¨
;

58 
	tu_sh‹t
;

59 
	tu_öt
;

73 
	uovîhód


75 
ovîhód
 *
	mov_√xt
;

78 
u_ch¨
 
	movu_magic
;

79 
u_ch¨
 
	movu_ödex
;

80 #ifde‡
RCHECK


81 
u_sh‹t
 
	movu_rmagic
;

82 
u_öt
 
	movu_size
;

84 } 
	movu
;

85 
	#ov_magic
 
ovu
.
ovu_magic


	)

86 
	#ov_ödex
 
ovu
.
ovu_ödex


	)

87 
	#ov_rmagic
 
ovu
.
ovu_rmagic


	)

88 
	#ov_size
 
ovu
.
ovu_size


	)

91 
	#MAGIC
 0xe‡

	)

92 
	#RMAGIC
 0x5555

	)

94 #ifde‡
RCHECK


95 
	#RSLOP
  (
u_sh‹t
)

	)

97 
	#RSLOP
 0

	)

105 
	#NBUCKETS
 30

	)

106 
ovîhód
 *
	g√xtf
[
NBUCKETS
];

108 
	g∑gesz
;

109 
	g∑gebuckë
;

111 
m‹ec‹e
();

112 
födbuckë
(
ovîhód
 *, );

114 #ifde‡
DO_MSTATS


119 
u_öt
 
	gnmÆloc
[
NBUCKETS
];

123 #i‡
deföed
(
DEBUG
Ë|| deföed(
RCHECK
)

124 #ifde‡
__STDC__


125 
	#ASSERT
(
p
Ëi‡(!’)Ë
	`bŸch
(#p)

	)

127 
	#ASSERT
(
p
Ëi‡(!’)Ë
	`bŸch
("?")

	)

129 
	$bŸch
(*
s
)

131 
	`debug_mesßge
("\r\¿bŸch As£πi⁄ : %s\r\n", 
s
);

132 ()
	`fÊush
(
°dîr
);

133 
	`ab‹t
();

135 
	}
}

137 
	#ASSERT
(
p
)

	)

140 #ifde‡
mÆloc


142 #unde‡
mÆloc


144 *
	$bsdmÆloc_mÆloc
(
size_t
 
nbyãs
)

146 
ovîhód
 *
›
;

147 
buckë
, 
n
;

148 
amt
;

154 i‡(
∑gesz
 == 0)

156 #ifde‡
MEMPAGESIZE


157 
∑gesz
 = 
n
 = 
MEMPAGESIZE
;

159 
∑gesz
 = 
n
 = 
	`gë∑gesize
();

161 
›
 = (
ovîhód
*)
	`sbrk
(0);

162 
n
 =Ç - (*
›
) - ( ()op &(n - 1) );

163 i‡(
n
 < 0)

165 
n
 +
∑gesz
;

167 i‡(
n
)

169 i‡–(*)
	`sbrk
(
n
) == (*) - 1)

171  (
NULL
);

173 } 
buckë
 = 0;

174 
amt
 = 8;

175 
∑gesz
 > 
amt
)

177 
amt
 <<= 1;

178 
buckë
++;

180 
∑gebuckë
 = 
buckë
;

187 i‡(
nbyãs
 <(
n
 = 
∑gesz
 - (*
›
Ë- 
RSLOP
) )

189 #i‚de‡
RCHECK


190 
amt
 = 8;

191 
buckë
 = 0;

193 
amt
 = 16;

194 
buckë
 = 1;

196 
n
 = - ( ()(*
›
Ë+ 
RSLOP
);

200 
amt
 = 
∑gesz
;

201 
buckë
 = 
∑gebuckë
;

203 
nbyãs
 > 
amt
 + 
n
)

205 
amt
 <<= 1;

206 i‡(
amt
 == 0)

208  (
NULL
);

210 
buckë
++;

216 i‡–(
›
 = 
√xtf
[
buckë
]Ë=
NULL
)

218 
	`m‹ec‹e
(
buckë
);

219 i‡–(
›
 = 
√xtf
[
buckë
]Ë=
NULL
)

221  (
NULL
);

225 
√xtf
[
buckë
] = 
›
->
ov_√xt
;

226 
›
->
ov_magic
 = 
MAGIC
;

227 
›
->
ov_ödex
 = 
buckë
;

228 #ifde‡
DO_MSTATS


229 
nmÆloc
[
buckë
]++;

231 #ifde‡
RCHECK


235 
›
->
ov_size
 = (
nbyãs
 + 
RSLOP
 - 1) &~(RSLOP - 1);

236 
›
->
ov_rmagic
 = 
RMAGIC
;

237 *(
u_sh‹t
*Ë–(
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë
RMAGIC
;

239  ( (*Ë(
›
 + 1) );

240 
	}
}

245 
	$m‹ec‹e
(
buckë
)

247 
ovîhód
 *
›
;

248 
sz
;

249 
amt
;

250 
nblks
;

256 
sz
 = 1 << (
buckë
 + 3);

257 #ifde‡
DEBUG


258 
	`ASSERT
(
sz
 > 0);

260 i‡(
sz
 <= 0)

265 i‡(
sz
 < 
∑gesz
)

267 
amt
 = 
∑gesz
;

268 
nblks
 = 
amt
 / 
sz
;

272 
amt
 = 
sz
 + 
∑gesz
;

273 
nblks
 = 1;

275 
›
 = (
ovîhód
*)
	`sbrk
(
amt
);

277 i‡–()
›
 == - 1)

284 
√xtf
[
buckë
] = 
›
;

285 --
nblks
 > 0)

287 
›
->
ov_√xt
 = (
ovîhód
*Ë–(
ˇddr_t
)› + 
sz
);

288 
›
 = (
ovîhód
*Ë–(
ˇddr_t
)› + 
sz
);

290 
	}
}

296 
INLINE
 
	$bsdmÆloc_‰ì
(*
˝
)

298 
size
;

299 
ovîhód
 *
›
;

301 i‡(
˝
 =
NULL
)

305 
›
 = (
ovîhód
*Ë–(
ˇddr_t
)
˝
 - (overhead) );

306 #ifde‡
DEBUG


307 
	`ASSERT
(
›
->
ov_magic
 =
MAGIC
);

309 i‡(
›
->
ov_magic
 !
MAGIC
)

315 #ifde‡
RCHECK


316 
	`ASSERT
(
›
->
ov_rmagic
 =
RMAGIC
);

317 
	`ASSERT
(*(
u_sh‹t
*Ë–(
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë=
RMAGIC
);

319 
size
 = 
›
->
ov_ödex
;

320 
	`ASSERT
(
size
 < 
NBUCKETS
);

321 
›
->
ov_√xt
 = 
√xtf
[
size
];

322 
√xtf
[
size
] = 
›
;

323 #ifde‡
DO_MSTATS


324 
nmÆloc
[
size
]--;

326 
	}
}

339 
	gªÆloc_§chÀn
 = 4;

341 *
	$bsdmÆloc_ªÆloc
(*
˝
, 
size_t
 
nbyãs
)

343 
u_öt
 
⁄b
;

344 
i
;

345 
ovîhód
 *
›
;

346 *
ªs
;

347 
was_Ælo˚d
 = 0;

349 i‡(
˝
 =
NULL
)

351  (
	`bsdmÆloc_mÆloc
(
nbyãs
) );

353 
›
 = (
ovîhód
*Ë–(
ˇddr_t
)
˝
 - (overhead) );

354 i‡(
›
->
ov_magic
 =
MAGIC
)

356 
was_Ælo˚d
++;

357 
i
 = 
›
->
ov_ödex
;

373 i‡–(
i
 = 
	`födbuckë
(
›
, 1ËË< 0 && (òfödbuckë(›, 
ªÆloc_§chÀn
) ) < 0)

375 
i
 = 
NBUCKETS
;

378 
⁄b
 = 1 << (
i
 + 3);

379 i‡(
⁄b
 < 
∑gesz
)

381 
⁄b
 -(*
›
Ë+ 
RSLOP
;

385 
⁄b
 +
∑gesz
 - (*
›
Ë- 
RSLOP
;

388 i‡(
was_Ælo˚d
)

390 i‡(
i
)

392 
i
 = 1 << (i + 2);

393 i‡(
i
 < 
∑gesz
)

395 
i
 -(*
›
Ë+ 
RSLOP
;

399 
i
 +
∑gesz
 - (*
›
Ë- 
RSLOP
;

402 i‡(
nbyãs
 <
⁄b
 &&Çbyã†> 
i
)

404 #ifde‡
RCHECK


405 
›
->
ov_size
 = (
nbyãs
 + 
RSLOP
 - 1) &~(RSLOP - 1);

406 *(
u_sh‹t
*Ë–(
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë
RMAGIC
;

408  (
˝
);

412 
	`bsdmÆloc_‰ì
(
˝
);

415 i‡–(
ªs
 = 
	`bsdmÆloc_mÆloc
(
nbyãs
ËË=
NULL
)

417  (
NULL
);

419 i‡(
˝
 !
ªs
)

422 
	`mem˝y
(
ªs
, 
˝
, (
nbyãs
 < 
⁄b
) ?Çbytes : onb);

424  (
ªs
);

425 
	}
}

432 
	$födbuckë
(
ovîhód
 *
‰ìp
, 
§chÀn
)

434 
ovîhód
 *
p
;

435 
i
, 
j
;

437 
i
 = 0; i < 
NBUCKETS
; i++)

439 
j
 = 0;

440 
p
 = 
√xtf
[
i
];Ö && 
j
 !
§chÀn
;Ö =Ö->
ov_√xt
)

442 i‡(
p
 =
‰ìp
)

444  (
i
);

446 
j
++;

450 
	}
}

456 #ifde‡
DO_MSTATS


464 
	$show_m°©s
(
outbuf„r_t
 *
ob
, *
s
)

466 
i
, 
j
;

467 
ovîhód
 *
p
;

468 
tŸ‰ì
 = 0, 
tŸu£d
 = 0;

470 
	`outbuf_addv
(
ob
, "Sèti°ic†o‡Mem‹yáŒoˇti⁄ %s\nFªe:\t", 
s
);

471 
i
 = 0; i < 
NBUCKETS
; i++)

473 
j
 = 0, 
p
 = 
√xtf
[
i
];Ö;Ö =Ö->
ov_√xt
, j++)

475 
	`outbuf_addv
(
ob
, " %d", 
j
);

476 
tŸ‰ì
 +
j
 *(1 << (
i
 + 3) );

478 
	`outbuf_add
(
ob
, "\nUsed:\t");

479 
i
 = 0; i < 
NBUCKETS
; i++)

481 
	`outbuf_addv
(
ob
, " %d", 
nmÆloc
[
i
]);

482 
tŸu£d
 +
nmÆloc
[
i
]*(1 << (i + 3) );

485 
	`outbuf_addv
(
ob
, "\n\tTŸÆ i¿u£: %d, TŸÆ fªe: %d\n", 
tŸu£d
, 
tŸ‰ì
);

486 
	}
}

490 #ifde‡
ˇŒoc


492 #unde‡
ˇŒoc


494 
INLINE
 *
	$bsdmÆloc_ˇŒoc
(
size_t
 
num
, size_à
size
)

496 *
p
;

498 
size
 *
num
;

499 i‡–(
p
 = 
	`bsdmÆloc_mÆloc
(
size
) ) )

501 
	`mem£t
(
p
, 0, 
size
);

503  (
p
);

504 
	}
}

	@src/mallocwrapper.c

	@src/mapping.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"debug.h
"

4 
	~"md.h
"

5 
	~"dúty.h
"

7 
	gnum_m≠pögs
 = 0;

8 
	gtŸÆ_m≠pög_size
 = 0;

9 
	gtŸÆ_m≠pög_nodes
 = 0;

26 
INLINE_STATIC
 
	$node_hash
(
m≠pög_node_t
 *
mn
)

28  
	`MAP_POINTER_HASH
(
mn
->
vÆues
[0].
u
.
numbî
);

29 
	}
}

35 
INLINE
 
	$growM≠
(
m≠pög_t
 *
m
)

37 
ﬁdsize
 = 
m
->
èbÀ_size
 + 1;

38 
√wsize
 = 
ﬁdsize
 << 1;

39 
i
;

40 
m≠pög_node_t
 **
a
, **
b
, **
ñç
, *
ñt
;

42 i‡(
√wsize
 > 
MAX_TABLE_SIZE
)

47 
m
->
èbÀ
 = 
a
 = 
	`RESIZE
(m->èbÀ, 
√wsize
, 
m≠pög_node_t
 *, 
TAG_MAP_TBL
, "growMap");

48 i‡(!
a
)

56 
m
->
unfûÀd
 = m->
èbÀ_size
;

61 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
*Ë* 
ﬁdsize
;

62 
	`debug
(1024, ("m≠pög.c: growM≠Öå = %x, sizê%d\n", 
m
, 
√wsize
) );

63 
m
->
unfûÀd
 = 
ﬁdsize
 *()
FILL_PERCENT
 / ()100;

64 
m
->
èbÀ_size
 = 
√wsize
 - 1;

66 
	`mem£t
(
a
 +
ﬁdsize
, 0, oldsizê*(
m≠pög_node_t
*) );

67 
i
 = 
ﬁdsize
;

68 
a
--, 
i
--)

70 i‡–(
ñt
 = *
a
) )

72 
ñç
 = 
a
, 
b
 =á + 
ﬁdsize
;

75 i‡(
	`node_hash
(
ñt
Ë&
ﬁdsize
)

77 *
ñç
 = 
ñt
->
√xt
;

78 i‡(!(
ñt
->
√xt
 = *
b
) )

80 
m
->
unfûÀd
--;

82 *
b
 = 
ñt
;

83 
ñt
 = *
ñç
;

87 
ñt
 = *(
ñç
 = &ñt->
√xt
);

91 
ñt
);

92 i‡(! *
a
)

94 
m
->
unfûÀd
++;

99 
	}
}

108 
INLINE
 
m≠pög_t
 *
	$m≠Tøvî£
(
m
, 
func
, 
exåa
)
m≠pög_t
 *m;

109 (*
func
Ë(
m≠pög_t
 *, 
m≠pög_node_t
 *, *);

110 *
exåa
;

112 
m≠pög_node_t
 *
ñt
, *
√…
;

113 
j
 = ()
m
->
èbÀ_size
;

115 
	`debug
(128, ("doög m≠Tøvî£ %x\n", 
m
) );

118 
ñt
 = 
m
->
èbÀ
[
j
];É…;É… = 
√…
)

120 
√…
 = 
ñt
->
√xt
;

121 i‡–(*
func
Ë(
m
, 
ñt
, 
exåa
) )

123  
m
;

128 
j
--);

129  
m
;

130 
	}
}

133 
INLINE
 
	$dóŒoc_m≠pög
(
m≠pög_t
 *
m
)

135 
num_m≠pögs
--;

137 
j
 = 
m
->
èbÀ_size
, 
c
 = m->
cou¡
;

138 
m≠pög_node_t
 *
ñt
, *
√…
, **
a
 = 
m
->
èbÀ
;

140 
tŸÆ_m≠pög_size
 -((
m≠pög_t
Ë+ (
m≠pög_node_t
*)*(
j
 + 1Ë+ (m≠pög_node_tË*
c
);

141 
tŸÆ_m≠pög_nodes
 -
c
;

145 
ñt
 = 
a
[
j
];É…;É… = 
√…
)

147 
√…
 = 
ñt
->
√xt
;

148 
	`‰ì_svÆue
(
ñt
->
vÆues
 + 1, "free_mapping");

149 
	`‰ì_svÆue
(
ñt
->
vÆues
, "free_mapping");

150 
	`‰ì_node
(
ñt
);

155 
j
--);

156 
	`FREE
–(*)
a
);

160 
	`‰ì_dúty_m≠
(
m
);

162 
	`FREE
–(*)
m
);

163 
	}
}

169 
INLINE
 
	$‰ì_m≠pög
(
m≠pög_t
 *
m
)

172 i‡(--
m
->
ªf
 > 0)

177 
	`dóŒoc_m≠pög
(
m
);

178 
	}
}

184 
m≠pög_node_t
 *
	g‰ì_nodes
 = 0;

185 
m≠pög_node_block_t
 *
	gm≠pög_node_blocks
 = 0;

187 #ifde‡
DEBUGMALLOC_EXTENSIONS


188 
	$m¨k_m≠pög_node_blocks
()

190 
m≠pög_node_block_t
 *
mnb
 = 
m≠pög_node_blocks
;

192 
mnb
)

194 
	`DO_MARK
(
mnb
, 
TAG_MAP_NODE_BLOCK
);

195 
mnb
 = mnb->
√xt
;

197 
	}
}

200 
m≠pög_node_t
 *
	$√w_m≠_node
()

202 
m≠pög_node_block_t
 *
mnb
;

203 
m≠pög_node_t
 *
ªt
;

204 
i
;

206 i‡–(
ªt
 = 
‰ì_nodes
) )

208 
‰ì_nodes
 = 
ªt
->
√xt
;

212 
mnb
 = 
	`ALLOCATE
(
m≠pög_node_block_t
, 
TAG_MAP_NODE_BLOCK
, "new_map_node");

213 
mnb
->
√xt
 = 
m≠pög_node_blocks
;

214 
m≠pög_node_blocks
 = 
mnb
;

215 
mnb
->
nodes
[
MNB_SIZE
 - 1].
√xt
 = 0;

216 
i
 = 
MNB_SIZE
 - 1; i--;)

218 
mnb
->
nodes
[
i
].
√xt
 = &mnb->nodes[i + 1];

220 
ªt
 = &
mnb
->
nodes
[0];

221 
‰ì_nodes
 = &
mnb
->
nodes
[1];

223  
ªt
;

224 
	}
}

230 
	$‰ì_node
(
m≠pög_node_t
 *
mn
)

232 
mn
->
√xt
 = 
‰ì_nodes
;

233 
‰ì_nodes
 = 
mn
;

234 
	}
}

241 
INLINE
 
m≠pög_t
 *
	$Æloˇã_m≠pög
(
n
)

243 
m≠pög_t
 *
√wm≠
;

244 
m≠pög_node_t
 **
a
;

246 i‡(
n
 > 
MAX_MAPPING_SIZE
)

248 
n
 = 
MAX_MAPPING_SIZE
;

250 
√wm≠
 = 
	`ALLOCATE
(
m≠pög_t
, 
TAG_MAPPING
, "allocate_mapping: 1");

252 i‡(
√wm≠
 =
NULL
)

254 
	`îr‹
("Error : Allocate_mapping - out of memory.\n");

257 i‡(
n
 > 
MAP_HASH_TABLE_SIZE
)

259 
n
 |=Ç >> 1;

260 
n
 |=Ç >> 2;

261 
n
 |=Ç >> 4;

262 i‡(
n
 &0xff00)

264 
n
 |=Ç >> 8;

266 
√wm≠
->
èbÀ_size
 = 
n
++;

270 
√wm≠
->
èbÀ_size
 = (
n
 = 
MAP_HASH_TABLE_SIZE
) - 1;

273 
√wm≠
->
unfûÀd
 = 
n
 *()
FILL_PERCENT
 / ()100;

274 
a
 = 
√wm≠
->
èbÀ
 = (
m≠pög_node_t
 **)
	`DXALLOC
(
n
 *(m≠pög_node_t*), 
TAG_MAP_TBL
, "allocate_mapping: 3");

275 i‡(!
a
)

277 
	`îr‹
("Allocate_mapping 2 - out of memory.\n");

280 
	`mem£t
(
a
, 0, 
n
);

281 
tŸÆ_m≠pög_size
 +(
m≠pög_t
Ë+ 
n
;

282 
√wm≠
->
ªf
 = 1;

283 
√wm≠
->
cou¡
 = 0;

284 
√wm≠
->
dúty_mng
 = 
NULL
;

286 
num_m≠pögs
++;

287  
√wm≠
;

288 
	}
}

291 
INLINE
 
m≠pög_t
 *
	$c›yM≠pög
(
m≠pög_t
 *
m
)

293 
m≠pög_t
 *
√wm≠
;

294 
k
 = 
m
->
èbÀ_size
;

295 
m≠pög_node_t
 *
ñt
, *
√…
, **
a
, **
b
 = 
m
->
èbÀ
, **
c
;

297 
√wm≠
 = 
	`ALLOCATE
(
m≠pög_t
, 
TAG_MAPPING
, "copy_mapping: 1");

298 i‡(
√wm≠
 =
NULL
)

300 
	`îr‹
("Error: copyMapping - out of memory.\n");

303 
√wm≠
->
dúty_mng
 = 
NULL
;

304 
√wm≠
->
èbÀ_size
 = 
k
++;

305 
√wm≠
->
unfûÀd
 = 
m
->unfilled;

306 
√wm≠
->
ªf
 = 1;

307 
c
 = 
√wm≠
->
èbÀ
 = 
	`CALLOCATE
(
k
, 
m≠pög_node_t
 *, 
TAG_MAP_TBL
, "copy_mapping: 2");

308 i‡(!
c
)

310 
	`FREE
–(*)
√wm≠
);

311 
	`îr‹
("Error: copyMapping 2 - out of memory.\n");

313 
tŸÆ_m≠pög_nodes
 +(
√wm≠
->
cou¡
 = 
m
->count);

314 
	`mem£t
(
c
, 0, 
k
 *(
m≠pög_node_t
*) );

315 
tŸÆ_m≠pög_size
 +((
m≠pög_t
Ë+ (
m≠pög_node_t
*Ë* 
k
 + (m≠pög_node_tË*
m
->
cou¡
);

317 
num_m≠pögs
++;

318 
k
--)

320 i‡–(
ñt
 = 
b
[
k
]) )

322 
a
 = 
c
 + 
k
;

325 
√…
 = 
	`√w_m≠_node
();

327 
	`assign_svÆue_no_‰ì
(
√…
->
vÆues
, 
ñt
->values);

328 
	`assign_svÆue_no_‰ì
(
√…
->
vÆues
 + 1, 
ñt
->values + 1);

329 
√…
->
√xt
 = *
a
;

330 *
a
 = 
√…
;

333  (
ñt
 =É…->
√xt
) );

336  
√wm≠
;

337 
	}
}

343 
INLINE
 
	$ª°‹e_hash_°rög
(**
vÆ
, 
svÆue_t
 *
sv
)

345 *
˝
 = *
vÆ
;

346 
c
, *
°¨t
 = 
˝
;

348  (
c
 = *
˝
++) != '"')

350 
c
)

353 *(
˝
 - 1) = '\n';

358 *
√w
 = 
˝
 - 1;

360 i‡–(
c
 = *
√w
++ = *
˝
++) )

362  (
c
 = *
˝
++) != '"')

364 i‡(
c
 == '\\')

366 i‡(!(
c
 = *
√w
++ = *
˝
++) )

368  
ROB_STRING_ERROR
;

373 i‡(
c
 == '\r')

375 
c
 = *
√w
++ = '\n';

379 *
√w
++ = 
c
;

383 i‡(!
c
)

385  
ROB_STRING_ERROR
;

387 *
√w
 = '\0';

388 *
vÆ
 = 
˝
;

389 
sv
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
°¨t
);

390 
sv
->
ty≥
 = 
T_STRING
;

391 
sv
->
subty≥
 = 
STRING_SHARED
;

396  
ROB_STRING_ERROR
;

401  
ROB_STRING_ERROR
;

404 *
vÆ
 = 
˝
;

405 *--
˝
 = '\0';

406 
sv
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
°¨t
);

407 
sv
->
ty≥
 = 
T_STRING
;

408 
sv
->
subty≥
 = 
STRING_SHARED
;

410 
	}
}

415 
INLINE
 
	$svÆue_to_öt
(
svÆue_t
 *
v
)

417 i‡(
v
->
ty≥
 =
T_STRING
 && v->
subty≥
 !
STRING_SHARED
)

419 *
p
 = 
	`make_sh¨ed_°rög
(
v
->
u
.
°rög
);

420 
	`‰ì_°rög_svÆue
(
v
);

421 
v
->
subty≥
 = 
STRING_SHARED
;

422 
v
->
u
.
°rög
 = 
p
;

428  
	`MAP_POINTER_HASH
(
v
->
u
.
numbî
);

429 
	}
}

435 
	$mßmevÆ
(
svÆue_t
 *
¨g1
, svÆue_à*
¨g2
)

437 
¨g1
->
ty≥
 | 
¨g2
->type)

439 
T_NUMBER
:

440  
¨g1
->
u
.
numbî
 =
¨g2
->u.number;

441 
T_REAL
:

442  
¨g1
->
u
.
ªÆ
 =
¨g2
->u.real;

444  
¨g1
->
u
.
¨r
 =
¨g2
->u.arr;

446 
	}
}

453 
INLINE
 
m≠pög_node_t
 *
	$node_föd_ö_m≠pög
(
m≠pög_t
 *
m
, 
svÆue_t
 *
lv
)

455 
i
;

456 
m≠pög_node_t
 *
ñt
, **
a
 = 
m
->
èbÀ
;

458 
	`debug
(1, ("mapping.c: find_in_mapping\n") );

460 
i
 = 
	`svÆue_to_öt
(
lv
Ë&
m
->
èbÀ_size
;

461 
ñt
 = 
a
[
i
];É…;É… =É…->
√xt
)

463 i‡(
	`mßmevÆ
(
ñt
->
vÆues
, 
lv
) )

465  
ñt
;

468  (
m≠pög_node_t
*)0;

469 
	}
}

475 
INLINE
 
	$m≠pög_dñëe
(
m≠pög_t
 *
m
, 
svÆue_t
 *
lv
)

477 
i
 = 
	`svÆue_to_öt
(
lv
Ë&
m
->
èbÀ_size
;

478 
m≠pög_node_t
 **
¥ev
 = 
m
->
èbÀ
 + 
i
, *
ñt
;

480 i‡–(
ñt
 = *
¥ev
) )

484 i‡(
	`mßmevÆ
(
ñt
->
vÆues
, 
lv
) )

486 i‡(!(*
¥ev
 = 
ñt
->
√xt
Ë&& !
m
->
èbÀ
[
i
])

488 
m
->
unfûÀd
++;

489 
	`debug
(1024, ("m≠pög dñëe: buckëÉm±y, unfûÀd = \n", 
m
->
unfûÀd
) );

491 
m
->
cou¡
--;

492 
tŸÆ_m≠pög_nodes
--;

493 
tŸÆ_m≠pög_size
 -(
m≠pög_node_t
);

494 
	`debug
(1024, ("m≠pög dñëe: cou¡ = \n", 
m
->
cou¡
) );

495 
	`£t_dúty_m≠
(
m
, 
ñt
->
vÆues
, 
DIRTY_DEL
);

496 
	`‰ì_svÆue
(
ñt
->
vÆues
 + 1, "mapping_delete");

497 
	`‰ì_svÆue
(
ñt
->
vÆues
, "mapping_delete");

498 
	`‰ì_node
(
ñt
);

502 
¥ev
 = &(
ñt
->
√xt
);

505  (
ñt
 =É…->
√xt
) );

508 
	}
}

516 
INLINE
 
svÆue_t
 *
	$föd_f‹_ö£π
(
m≠pög_t
 *
m
, 
svÆue_t
 *
lv
, 
doTheFªe
)

518 
oi
 = 
	`svÆue_to_öt
(
lv
);

519 
i
 = 
oi
 &
m
->
èbÀ_size
;

520 
m≠pög_node_t
 *
n
, *
√wnode
, **
a
 = 
m
->
èbÀ
 + 
i
;

522 i‡–(
n
 = *
a
) )

526 i‡(
	`mßmevÆ
(
lv
, 
n
->
vÆues
) )

529 
	`debug
(128, ("m≠pög.c: found %x\n", 
n
->
vÆues
) );

531 i‡(
doTheFªe
)

533 
	`‰ì_svÆue
(
n
->
vÆues
 + 1, "find_for_insert");

537 
	`£t_dúty_m≠
(
m
, 
n
->
vÆues
, 
DIRTY_SET
);

539  
n
->
vÆues
 + 1;

543  (
n
 =Ç->
√xt
) );

544 
n
 = *
a
;

546 i‡(!(--
m
->
unfûÀd
) )

548 
size
 = 
m
->
èbÀ_size
 + 1;

550 i‡(
	`growM≠
(
m
) )

552 i‡(
oi
 &
size
)

554 
i
 |
size
;

556 
n
 = *(
a
 = 
m
->
èbÀ
 + 
i
);

560 
	`îr‹
("Error:Out of memory\n");

564 i‡(++
m
->
cou¡
 > 
MAX_MAPPING_SIZE
)

566 
m
->
cou¡
--;

567 
	`m≠pög_too_œrge
();

570 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
);

571 
√wnode
 = 
	`√w_m≠_node
();

572 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
, 
lv
);

574 (*
a
 = 
√wnode
)->
√xt
 = 
n
;

575 
lv
 = 
√wnode
->
vÆues
 + 1;

576 
	`£t_dúty_m≠
(
m
, 
√wnode
->
vÆues
, 
DIRTY_ADD
);

577 *
lv
 = 
c⁄°0u
;

578 
tŸÆ_m≠pög_nodes
++;

579  
lv
;

580 
	}
}

586 #ifde‡
F_UNIQUE_MAPPING


588 
	sunique_node_s


590 
svÆue_t
 
	mkey
;

591 
	mcou¡
;

592 
unique_node_s
 *
	m√xt
;

593 *
	mödi˚s
;

594 } 
	tunique_node_t
;

596 
	sunique_m_li°_s


598 
unique_node_t
 **
	muèbÀ
;

599 
unique_m_li°_s
 *
	m√xt
;

600 
	mmask
;

601 } 
	tunique_m_li°_t
;

603 
unique_m_li°_t
 *
	gg_u_m_li°
 = 0;

605 
	$unique_m≠pög_îr‹_h™dÀr
()

607 
unique_m_li°_t
 *
∆i°
 = 
g_u_m_li°
;

608 
unique_node_t
 **
èbÀ
 = 
∆i°
->
uèbÀ
;

609 
unique_node_t
 *
u±r
, *
≈å
;

610 
mask
 = 
∆i°
->mask;

612 
g_u_m_li°
 = g_u_m_li°->
√xt
;

616 i‡–(
u±r
 = 
èbÀ
[
mask
]) )

620 
≈å
 = 
u±r
->
√xt
;

621 
	`‰ì_svÆue
(&
u±r
->
key
, "unique_mapping_error_handler");

622 
	`FREE
–(*)
u±r
->
ödi˚s
);

623 
	`FREE
–(*)
u±r
);

626  (
u±r
 = 
≈å
) );

630 
mask
--)

632 
	`FREE
–(*)
èbÀ
);

633 
	`FREE
–(*)
∆i°
);

634 
	}
}

636 
	$f_unique_m≠pög
()

638 
unique_m_li°_t
 *
∆i°
;

639 
svÆue_t
 *
¨g
 = 
•
 - 
°_num_¨g
 + 1, *
sv
;

640 
unique_node_t
 **
èbÀ
, *
u±r
, *
≈å
;

641 
¨øy_t
 *
v
 = 
¨g
->
u
.
¨r
, *
ªt
;

642 
oi
, 
i
, 
numkeys
 = 0, 
mask
, 
size
;

643 
num_¨g
 = 
°_num_¨g
;

644 
nmask
;

645 
m≠pög_t
 *
m
;

646 
m≠pög_node_t
 **
mèbÀ
, *
ñt
;

647 *
öd
, 
j
;

648 
fun˘i⁄_to_ˇŒ_t
 
·c
;

650 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_UNIQUE_MAPPING
);

652 
size
 = 
v
->size;

653 i‡(!
size
)

655 
	`p›_n_ñems
(
num_¨g
 - 1);

656 
	`‰ì_¨øy
(
v
);

657 
•
->
ty≥
 = 
T_MAPPING
;

658 
•
->
u
.
m≠
 = 
	`Æloˇã_m≠pög
(0);

662 i‡(
size
 > 
MAP_HASH_TABLE_SIZE
)

664 
size
 |= size >> 1;

665 
size
 |= size >> 2;

666 
size
 |= size >> 4;

667 i‡(
size
 &0xff00)

669 
size
 |= size >> 8;

671 
mask
 = 
size
++;

675 
mask
 = (
size
 = 
MAP_HASH_TABLE_SIZE
) - 1;

678 
èbÀ
 = (
unique_node_t
 **)
	`DXALLOC
(
size
 *= (unique_node_t*), 100, "f_unique_mapping:1");

680 i‡(!
èbÀ
)

682 
	`îr‹
("Error: Unique_mapping - Out of memory.\n");

684 
	`mem£t
(
èbÀ
, 0, 
size
);

686 
∆i°
 = 
	`ALLOCATE
(
unique_m_li°_t
, 101, "f_unique_mapping:2");

687 
∆i°
->
√xt
 = 
g_u_m_li°
;

688 
∆i°
->
uèbÀ
 = 
èbÀ
;

689 
∆i°
->
mask
 = mask;

690 
g_u_m_li°
 = 
∆i°
;

692 (++
•
)->
ty≥
 = 
T_ERROR_HANDLER
;

693 
•
->
u
.
îr‹_h™dÀr
 = 
unique_m≠pög_îr‹_h™dÀr
;

695 
size
 = 
v
->size;

696 
size
--)

698 
	`push_svÆue
(
v
->
ôem
 + 
size
);

699 
sv
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 1);

700 
i
 = (
oi
 = 
	`svÆue_to_öt
(
sv
ËË&
mask
;

701 i‡–(
u±r
 = 
èbÀ
[
i
]) )

705 i‡(
	`mßmevÆ
(&
u±r
->
key
, 
sv
) )

707 
öd
 = 
u±r
->
ödi˚s
 = 
	`RESIZE
(u±r->ödi˚s, u±r->
cou¡
 + 1, , 102, "f_unique_mapping:3");

708 
öd
[
u±r
->
cou¡
++] = 
size
;

713  (
u±r
 = u±r->
√xt
) );

715 i‡(!
u±r
)

717 
u±r
 = 
	`ALLOCATE
(
unique_node_t
, 103, "f_unique_mapping:4");

718 
	`assign_svÆue_no_‰ì
(&
u±r
->
key
, 
sv
);

719 
u±r
->
cou¡
 = 1;

720 
u±r
->
ödi˚s
 = 
	`ALLOCATE
(, 104, "f_unique_mapping:5");

721 
u±r
->
ödi˚s
[0] = 
size
;

722 
u±r
->
√xt
 = 
èbÀ
[
i
];

723 
èbÀ
[
i
] = 
u±r
;

724 
numkeys
++;

728 
m
 = 
	`Æloˇã_m≠pög
(
nmask
 = 
numkeys
 << 1);

729 
mèbÀ
 = 
m
->
èbÀ
;

730 
numkeys
 = 0;

732 i‡(
nmask
 > 
MAP_HASH_TABLE_SIZE
)

734 
nmask
 |=Çmask >> 1;

735 
nmask
 |=Çmask >> 2;

736 
nmask
 |=Çmask >> 4;

737 i‡(
size
 &0xff00)

739 
nmask
 |=Çmask >> 8;

744 
nmask
 = 
MAP_HASH_TABLE_SIZE
 - 1;

746 
j
 = 
mask
;

747 
sv
 = 
v
->
ôem
;

751 i‡–(
u±r
 = 
èbÀ
[
j
]) )

755 
≈å
 = 
u±r
->
√xt
;

756 
oi
 = 
	`MAP_POINTER_HASH
(
u±r
->
key
.
u
.
numbî
);

757 
i
 = 
oi
 &
nmask
;

758 i‡(!
mèbÀ
[
i
] && !(--
m
->
unfûÀd
) )

760 i‡(
	`growM≠
(
m
) )

762 
mèbÀ
 = 
m
->
èbÀ
;

763 
nmask
 <<= 1;

764 
nmask
--;

772 
≈å
 = 
u±r
->
√xt
;

773 
	`‰ì_svÆue
(&
u±r
->
key
, "f_unique_mapping");

774 
	`FREE
–(*)
u±r
->
ödi˚s
);

775 
	`FREE
–(*)
u±r
);

778  (
u±r
 = 
≈å
) );

779 
u±r
 = 
èbÀ
[--
j
];

782 
j
 >= 0)

785 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
)*(
m
->
cou¡
 = 
numkeys
);

786 
tŸÆ_m≠pög_nodes
 +
numkeys
;

787 
	`‰ì_m≠pög
(
m
);

788 
	`îr‹
("Out of memory\n");

792 
ñt
 = 
	`ALLOCATE
(
m≠pög_node_t
, 105, "f_unique_mapping:6");

793 *
ñt
->
vÆues
 = 
u±r
->
key
;

794 (
ñt
->
vÆues
 + 1)->
ty≥
 = 
T_ARRAY
;

795 
ªt
 = (
ñt
->
vÆues
 + 1)->
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(
size
 = 
u±r
->
cou¡
);

796 
öd
 = 
u±r
->
ödi˚s
;

797 
size
--)

799 
	`assign_svÆue_no_‰ì
(
ªt
->
ôem
 + 
size
, 
sv
 + 
öd
[size]);

801 
ñt
->
√xt
 = 
mèbÀ
[
i
];

802 
mèbÀ
[
i
] = 
ñt
;

803 
	`FREE
–(*)
öd
);

804 
	`FREE
–(*)
u±r
);

805 
numkeys
++;

808  (
u±r
 = 
≈å
) )

813 
j
--)

816 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
)*(
m
->
cou¡
 = 
numkeys
);

817 
tŸÆ_m≠pög_nodes
 +
numkeys
;

818 
	`FREE
–(*)
èbÀ
);

819 
g_u_m_li°
 = g_u_m_li°->
√xt
;

820 
	`FREE
–(*)
∆i°
);

821 
•
--;

822 
	`p›_n_ñems
(
num_¨g
 - 1);

823 
	`‰ì_¨øy
(
v
);

824 
•
->
ty≥
 = 
T_MAPPING
;

825 
•
->
u
.
m≠
 = 
m
;

826 
	}
}

833 
INLINE
 
m≠pög_t
 *
	$lﬂd_m≠pög_‰om_aggªg©e
(
svÆue_t
 *
•
, 
n
)

835 
m≠pög_t
 *
m
;

836 
mask
, 
i
, 
oi
, 
cou¡
 = 0;

837 
m≠pög_node_t
 **
a
, *
ñt
, *
ñt2
;

839 
m
 = 
	`Æloˇã_m≠pög
(
n
 >> 1);

840 i‡(!
n
)

842  
m
;

844 
mask
 = 
m
->
èbÀ_size
;

845 
a
 = 
m
->
èbÀ
;

848 
i
 = (
oi
 = 
	`svÆue_to_öt
(++
•
ËË&
mask
;

849 i‡–(
ñt2
 = 
ñt
 = 
a
[
i
]) )

853 i‡(
	`mßmevÆ
(
•
, 
ñt
->
vÆues
) )

855 
	`‰ì_svÆue
(
•
++, "load_mapping_from_aggregate: duplicate key");

856 
	`‰ì_svÆue
(
ñt
->
vÆues
 + 1, "load_mapping_from_aggregate");

857 *(
ñt
->
vÆues
 + 1Ë*
•
;

862  (
ñt
 =É…->
√xt
) );

863 i‡(
ñt
)

868 i‡(!(--
m
->
unfûÀd
) )

870 i‡(
	`growM≠
(
m
) )

872 
a
 = 
m
->
èbÀ
;

873 i‡(
oi
 &++
mask
)

875 
ñt2
 = 
a
[
i
 |
mask
];

877 
mask
 <<= 1;

878 
mask
--;

883 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
)*(
m
->
cou¡
 = count);

884 
tŸÆ_m≠pög_nodes
 +
cou¡
;

885 
	`‰ì_m≠pög
(
m
);

886 
	`îr‹
("Out of memory\n");

890 i‡(++
cou¡
 > 
MAX_MAPPING_SIZE
)

892 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
)*(
m
->
cou¡
 = count);

893 
tŸÆ_m≠pög_nodes
 +
cou¡
;

895 
	`‰ì_m≠pög
(
m
);

896 
	`m≠pög_too_œrge
();

899 
ñt
 = 
	`√w_m≠_node
();

900 *
ñt
->
vÆues
 = *
•
++;

901 *(
ñt
->
vÆues
 + 1Ë*
•
;

902 (
a
[
i
] = 
ñt
)->
√xt
 = 
ñt2
;

905 
n
 -= 2)

908 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
)*(
m
->
cou¡
 = count);

909 
tŸÆ_m≠pög_nodes
 +
cou¡
;

911  
m
;

912 
	}
}

916 
INLINE
 
svÆue_t
 *
	$föd_ö_m≠pög
(
m≠pög_t
 *
m
, 
svÆue_t
 *
lv
)

918 
i
 = 
	`svÆue_to_öt
(
lv
Ë&
m
->
èbÀ_size
;

919 
m≠pög_node_t
 *
n
 = 
m
->
èbÀ
[
i
];

921 
n
)

923 i‡(
	`mßmevÆ
(
n
->
vÆues
, 
lv
) )

925  
n
->
vÆues
 + 1;

927 
n
 =Ç->
√xt
;

930  &
c⁄°0u
;

931 
	}
}

937 
svÆue_t
 *
	$föd_°rög_ö_m≠pög
(
m≠pög_t
 *
m
, *
p
)

939 *
ss
 = 
	`föd°rög
(
p
);

940 
i
;

941 
m≠pög_node_t
 *
n
;

943 i‡(!
ss
)

945  &
c⁄°0u
;

947 
i
 = 
	`MAP_POINTER_HASH
(
ss
);

948 
n
 = 
m
->
èbÀ
[
i
 &m->
èbÀ_size
];

950 
n
)

952 i‡(
n
->
vÆues
->
ty≥
 =
T_STRING
 &&Ç->vÆues->
u
.
°rög
 =
ss
)

954  
n
->
vÆues
 + 1;

956 
n
 =Ç->
√xt
;

958  &
c⁄°0u
;

959 
	}
}

964 
INLINE_STATIC
 
	$add_to_m≠pög
(
m≠pög_t
 *
m1
, m≠pög_à*
m2
, 
‰ì_Êag
)

966 
mask
 = 
m1
->
èbÀ_size
, 
j
 = 
m2
->table_size;

967 
cou¡
 = 
m1
->count;

968 
i
, 
oi
;

969 
m≠pög_node_t
 *
ñt1
, *
ñt2
, *
√wnode
, *
n
;

970 
m≠pög_node_t
 **
a1
 = 
m1
->
èbÀ
, **
a2
 = 
m2
->table;

971 
svÆue_t
 *
sv
;

975 
ñt2
 = 
a2
[
j
];É…2;É…2 =É…2->
√xt
)

977 
i
 = (
oi
 = 
	`node_hash
(
ñt2
ËË&
mask
;

978 
sv
 = 
ñt2
->
vÆues
;

979 i‡–(
n
 = 
ñt1
 = 
a1
[
i
]) )

983 i‡(
	`mßmevÆ
(
sv
, 
ñt1
->
vÆues
) )

985 
	`assign_svÆue
(
ñt1
->
vÆues
 + 1, 
sv
 + 1);

990  (
ñt1
 =É…1->
√xt
) );

991 i‡(
ñt1
)

996 i‡(!(--
m1
->
unfûÀd
) )

998 i‡(
	`growM≠
(
m1
) )

1000 
a1
 = 
m1
->
èbÀ
;

1001 i‡(
oi
 &++
mask
)

1003 
n
 = 
a1
[
i
 |
mask
];

1005 
mask
 <<= 1;

1006 
mask
--;

1010 
cou¡
 -
m1
->count;

1012 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1013 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1014 
m1
->
cou¡
 += count;

1015 i‡(
‰ì_Êag
)

1017 
	`‰ì_m≠pög
(
m1
);

1019 
	`îr‹
("Error: Out of memory\n");

1022 i‡(++
cou¡
 > 
MAX_MAPPING_SIZE
)

1024 i‡(
cou¡
 -
m1
->count + 1)

1027 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1028 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1030 
m1
->
cou¡
 += count;

1031 
	`m≠pög_too_œrge
();

1034 
√wnode
 = 
	`√w_m≠_node
();

1035 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
, 
ñt2
->values);

1036 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
 + 1, 
ñt2
->values + 1);

1037 (
a1
[
i
] = 
√wnode
)->
√xt
 = 
n
;

1041 
j
--)

1044 i‡(
cou¡
 -
m1
->count)

1047 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1048 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1051 
m1
->
cou¡
 += count;

1052 
	}
}

1058 
INLINE_STATIC
 
	$unique_add_to_m≠pög
(
m≠pög_t
 *
m1
, m≠pög_à*
m2
, 
‰ì_Êag
)

1060 
mask
 = 
m1
->
èbÀ_size
, 
j
 = 
m2
->table_size;

1061 
cou¡
 = 
m1
->count;

1062 
i
, 
oi
;

1063 
m≠pög_node_t
 *
ñt1
, *
ñt2
, *
√wnode
, *
n
;

1064 
m≠pög_node_t
 **
a1
 = 
m1
->
èbÀ
, **
a2
 = 
m2
->table;

1065 
svÆue_t
 *
sv
;

1069 
ñt2
 = 
a2
[
j
];É…2;É…2 =É…2->
√xt
)

1071 
i
 = (
oi
 = 
	`node_hash
(
ñt2
ËË&
mask
;

1072 
sv
 = 
ñt2
->
vÆues
;

1073 i‡–(
n
 = 
ñt1
 = 
a1
[
i
]) )

1077 i‡(
	`mßmevÆ
(
sv
, 
ñt1
->
vÆues
) )

1083  (
ñt1
 =É…1->
√xt
) );

1084 i‡(
ñt1
)

1089 i‡(!(--
m1
->
unfûÀd
) )

1091 i‡(
	`growM≠
(
m1
) )

1093 
a1
 = 
m1
->
èbÀ
;

1094 i‡(
oi
 &++
mask
)

1096 
n
 = 
a1
[
i
 |
mask
];

1098 
mask
 <<= 1;

1099 
mask
--;

1103 ++
m1
->
unfûÀd
;

1104 
cou¡
 -
m1
->count;

1105 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1106 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1107 
m1
->
cou¡
 += count;

1108 i‡(
‰ì_Êag
)

1110 
	`‰ì_m≠pög
(
m1
);

1112 
	`îr‹
("Error: Out of memory\n");

1116 i‡(++
cou¡
 > 
MAX_MAPPING_SIZE
)

1118 i‡(
cou¡
 -
m1
->count + 1)

1120 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1121 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1123 
m1
->
cou¡
 += count;

1124 
	`m≠pög_too_œrge
();

1127 
√wnode
 = 
	`√w_m≠_node
();

1128 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
, 
ñt2
->values);

1129 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
 + 1, 
ñt2
->values + 1);

1130 (
a1
[
i
] = 
√wnode
)->
√xt
 = 
n
;

1134 
j
--)

1137 i‡(
cou¡
 -
m1
->count)

1139 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1140 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1143 
m1
->
cou¡
 += count;

1144 
	}
}

1146 
INLINE
 
	$abs‹b_m≠pög
(
m1
, 
m2
)
m≠pög_t
 *m1, *m2;

1148 i‡(
m2
->
cou¡
)

1150 
	`add_to_m≠pög
(
m1
, 
m2
, 0);

1152 
	}
}

1158 
INLINE
 
m≠pög_t
 *
	$add_m≠pög
(
m≠pög_t
 *
m1
, m≠pög_à*
m2
)

1160 
m≠pög_t
 *
√wm≠
;

1162 i‡(
m1
->
cou¡
 >
m2
->count)

1164 i‡(
m2
->
cou¡
)

1166 
	`add_to_m≠pög
(
√wm≠
 = 
	`c›yM≠pög
(
m1
), 
m2
, 1);

1167  
√wm≠
;

1171  
	`c›yM≠pög
(
m1
);

1174 i‡(
m1
->
cou¡
)

1176 
	`unique_add_to_m≠pög
(
√wm≠
 = 
	`c›yM≠pög
(
m2
), 
m1
, 1);

1177  
√wm≠
;

1181  
	`c›yM≠pög
(
m2
);

1183 
	}
}

1189 #ifde‡
F_MAP


1190 
	$m≠_m≠pög
(
svÆue_t
 *
¨g
, 
num_¨g
)

1192 
m≠pög_t
 *
m
 = 
¨g
->
u
.
m≠
;

1193 
m≠pög_node_t
 **
a
, *
ñt
;

1194 
j
 = 
m
->
èbÀ_size
;

1195 
svÆue_t
 *
ªt
;

1196 
fun˘i⁄_to_ˇŒ_t
 
·c
;

1198 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_MAP
);

1200 
m
 = 
	`c›yM≠pög
(m);

1201 (++
•
)->
ty≥
 = 
T_MAPPING
;

1202 
•
->
u
.
m≠
 = 
m
;

1204 
a
 = 
m
->
èbÀ
;

1207 
ñt
 = 
a
[
j
];É…;É… =É…->
√xt
)

1209 
	`push_svÆue
(
ñt
->
vÆues
);

1210 
	`push_svÆue
(
ñt
->
vÆues
 + 1);

1211 
ªt
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 2);

1212 i‡(
ªt
)

1214 
	`assign_svÆue
(
ñt
->
vÆues
 + 1, 
ªt
);

1223 
j
--);

1225 
•
--;

1226 
	`p›_n_ñems
(
num_¨g
);

1227 (++
•
)->
ty≥
 = 
T_MAPPING
;

1228 
•
->
u
.
m≠
 = 
m
;

1229 
	}
}

1233 #ifde‡
F_FILTER


1234 
	$fûãr_m≠pög
(
svÆue_t
 *
¨g
, 
num_¨g
)

1236 
m≠pög_t
 *
m
 = 
¨g
->
u
.
m≠
, *
√wm≠
;

1237 
m≠pög_node_t
 **
a
, *
ñt
;

1238 
m≠pög_node_t
 **
b
, *
√wnode
, *
n
;

1239 
j
 = 
m
->
èbÀ_size
, 
cou¡
 = 0, 
size
;

1240 
svÆue_t
 *
ªt
;

1241 
tb_ödex
;

1242 
fun˘i⁄_to_ˇŒ_t
 
·c
;

1244 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_FILTER
);

1246 
√wm≠
 = 
	`Æloˇã_m≠pög
(0);

1247 (++
•
)->
ty≥
 = 
T_MAPPING
;

1248 
•
->
u
.
m≠
 = 
√wm≠
;

1249 
b
 = 
√wm≠
->
èbÀ
;

1250 
size
 = 
√wm≠
->
èbÀ_size
;

1252 
a
 = 
m
->
èbÀ
;

1255 
ñt
 = 
a
[
j
];É…;É… =É…->
√xt
)

1257 
	`push_svÆue
(
ñt
->
vÆues
);

1258 
	`push_svÆue
(
ñt
->
vÆues
 + 1);

1259 
ªt
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 2);

1260 i‡(!
ªt
)

1264 i‡(
ªt
->
ty≥
 !
T_NUMBER
 ||Ñë->
u
.
numbî
)

1266 
tb_ödex
 = 
	`node_hash
(
ñt
Ë&
size
;

1267 
b
 = 
√wm≠
->
èbÀ
 + 
tb_ödex
;

1268 i‡(!(
n
 = *
b
Ë&& !(--
√wm≠
->
unfûÀd
) )

1270 i‡(
	`growM≠
(
√wm≠
) )

1272 
size
 = 
√wm≠
->
èbÀ_size
;

1273 
tb_ödex
 = 
	`node_hash
(
ñt
Ë&
size
;

1274 
n
 = *(
b
 = 
√wm≠
->
èbÀ
 + 
tb_ödex
);

1278 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1279 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1280 
√wm≠
->
cou¡
 = count;

1281 
	`îr‹
("Out of memory in filter_mapping\n");

1284 i‡(++
cou¡
 > 
MAX_MAPPING_SIZE
)

1286 
cou¡
--;

1287 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1288 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1289 
√wm≠
->
cou¡
 = count;

1290 
	`m≠pög_too_œrge
();

1293 
√wnode
 = 
	`√w_m≠_node
();

1294 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
, 
ñt
->values);

1295 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
 + 1, 
ñt
->values + 1);

1296 (*
b
 = 
√wnode
)->
√xt
 = 
n
;

1301 
j
--);

1303 i‡(
cou¡
)

1305 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1306 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1307 
√wm≠
->
cou¡
 += count;

1310 
•
--;

1311 
	`p›_n_ñems
(
num_¨g
);

1312 (++
•
)->
ty≥
 = 
T_MAPPING
;

1313 
•
->
u
.
m≠
 = 
√wm≠
;

1314 
	}
}

1318 
INLINE
 
m≠pög_t
 *
	$compo£_m≠pög
(
m≠pög_t
 *
m1
, m≠pög_à*
m2
, 
Êag
)

1320 
m≠pög_node_t
 *
ñt
, *
ñt2
, **
a
, **
b
 = 
m2
->
èbÀ
, **
¥ev
;

1321 
j
 = 
m1
->
èbÀ_size
, 
dñëed
 = 0;

1322 
mask
 = 
m2
->
èbÀ_size
;

1323 
svÆue_t
 *
sv
;

1325 i‡(
Êag
)

1327 
m1
 = 
	`c›yM≠pög
(m1);

1329 
a
 = 
m1
->
èbÀ
;

1333 i‡–(
ñt
 = *(
¥ev
 = 
a
) ) )

1337 
sv
 = 
ñt
->
vÆues
 + 1;

1338 i‡–(
ñt2
 = 
b
[
	`svÆue_to_öt
(
sv
Ë&
mask
]) )

1342 i‡(
	`mßmevÆ
(
sv
, 
ñt2
->
vÆues
) )

1344 
	`assign_svÆue
(
sv
, 
ñt2
->
vÆues
 + 1);

1349  (
ñt2
 =É…2->
√xt
) );

1351 i‡(!
ñt2
)

1353 i‡(!(*
¥ev
 = 
ñt
->
√xt
Ë&& !(*
a
) )

1355 
m1
->
unfûÀd
++;

1357 
dñëed
++;

1358 
	`‰ì_svÆue
(
sv
--, "compose_mapping");

1359 
	`‰ì_svÆue
(
sv
, "compose_mapping");

1360 
	`‰ì_node
(
ñt
);

1364 
¥ev
 = &(
ñt
->
√xt
);

1368  (
ñt
 = *
¥ev
) )

1373 
a
++, 
j
--)

1377 i‡(
dñëed
)

1379 
m1
->
cou¡
 -
dñëed
;

1380 
tŸÆ_m≠pög_nodes
 -
dñëed
;

1381 
tŸÆ_m≠pög_size
 -
dñëed
 * (
m≠pög_node_t
);

1384 i‡(
Êag
)

1386  
m1
;

1389  
NULL
;

1390 
	}
}

1393 
¨øy_t
 *
	$m≠pög_ödi˚s
(
m≠pög_t
 *
m
)

1395 
¨øy_t
 *
v
;

1396 
j
 = 
m
->
èbÀ_size
;

1397 
m≠pög_node_t
 *
ñt
, **
a
 = 
m
->
èbÀ
;

1398 
svÆue_t
 *
sv
;

1400 
v
 = 
	`Æloˇã_em±y_¨øy
(
m
->
cou¡
);

1401 
sv
 = 
v
->
ôem
;

1404 
ñt
 = 
a
[
j
];É…;É… =É…->
√xt
)

1406 
	`assign_svÆue_no_‰ì
(
sv
++, 
ñt
->
vÆues
);

1410 
j
--);

1411  
v
;

1412 
	}
}

1415 
¨øy_t
 *
	$m≠pög_vÆues
(
m≠pög_t
 *
m
)

1417 
¨øy_t
 *
v
;

1418 
j
 = 
m
->
èbÀ_size
;

1419 
m≠pög_node_t
 *
ñt
, **
a
 = 
m
->
èbÀ
;

1420 
svÆue_t
 *
sv
;

1422 
v
 = 
	`Æloˇã_em±y_¨øy
(
m
->
cou¡
);

1423 
sv
 = 
v
->
ôem
;

1426 
ñt
 = 
a
[
j
];É…;É… =É…->
√xt
)

1428 
	`assign_svÆue_no_‰ì
(
sv
++, 
ñt
->
vÆues
 + 1);

1432 
j
--);

1433  
v
;

1434 
	}
}

1436 
svÆue_t
 *
	$ö£π_ö_m≠pög
(
m≠pög_t
 *
m
, *
key
)

1438 
svÆue_t
 
lv
;

1439 
svÆue_t
 *
ªt
;

1441 
lv
.
ty≥
 = 
T_STRING
;

1442 
lv
.
subty≥
 = 
STRING_CONSTANT
;

1443 
lv
.
u
.
°rög
 = 
key
;

1444 
ªt
 = 
	`föd_f‹_ö£π
(
m
, &
lv
, 1);

1446 
	`‰ì_°rög
(
lv
.
u
.
°rög
);

1447  
ªt
;

1448 
	}
}

1451 
	$add_m≠pög_∑ú
(
m≠pög_t
 *
m
, *
key
, 
vÆue
)

1453 
svÆue_t
 *
s
;

1455 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1456 
s
->
ty≥
 = 
T_NUMBER
;

1457 
s
->
subty≥
 = 0;

1458 
s
->
u
.
numbî
 = 
vÆue
;

1459 
	}
}

1462 
	$add_m≠pög_°rög
(
m≠pög_t
 *
m
, *
key
, *
vÆue
)

1464 
svÆue_t
 *
s
;

1466 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1467 
s
->
ty≥
 = 
T_STRING
;

1468 
s
->
subty≥
 = 
STRING_SHARED
;

1469 
s
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
vÆue
);

1470 
	}
}

1473 
	$add_m≠pög_mÆlo˚d_°rög
(
m≠pög_t
 *
m
, *
key
, *
vÆue
)

1475 
svÆue_t
 *
s
;

1477 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1478 
s
->
ty≥
 = 
T_STRING
;

1479 
s
->
subty≥
 = 
STRING_MALLOC
;

1480 
s
->
u
.
°rög
 = 
vÆue
;

1481 
	}
}

1484 
	$add_m≠pög_obje˘
(
m≠pög_t
 *
m
, *
key
, 
obje˘_t
 *
vÆue
)

1486 
svÆue_t
 *
s
;

1488 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1489 
s
->
ty≥
 = 
T_OBJECT
;

1490 
s
->
subty≥
 = 0;

1491 
s
->
u
.
ob
 = 
vÆue
;

1492 
	`add_ªf
(
vÆue
, "add_mapping_object");

1493 
	}
}

1496 
	$add_m≠pög_¨øy
(
m≠pög_t
 *
m
, *
key
, 
¨øy_t
 *
vÆue
)

1498 
svÆue_t
 *
s
;

1500 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1501 
s
->
ty≥
 = 
T_ARRAY
;

1502 
s
->
subty≥
 = 0;

1503 
s
->
u
.
¨r
 = 
vÆue
;

1504 
vÆue
->
ªf
++;

1505 
	}
}

1507 
	$add_m≠pög_sh¨ed_°rög
(
m≠pög_t
 *
m
, *
key
, *
vÆue
)

1509 
svÆue_t
 *
s
;

1511 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1512 
s
->
ty≥
 = 
T_STRING
;

1513 
s
->
subty≥
 = 
STRING_SHARED
;

1514 
s
->
u
.
°rög
 = 
	`ªf_°rög
(
vÆue
);

1515 
	}
}

1517 
svÆue_t
 *
	$m≠_ö£π_öt_key
(
m≠pög_t
 *
m
, 
key
)

1519 
svÆue_t
 
lv
;

1520 
svÆue_t
 *
ªt
;

1521 
lv
.
ty≥
 = 
T_NUMBER
;

1522 
lv
.
u
.
numbî
 = 
key
;

1523 
ªt
 = 
	`föd_f‹_ö£π
(
m
, &
lv
, 1);

1524  
ªt
;

1525 
	}
}

1528 
svÆue_t
 *
	$m≠_ö£π_°r_key
(
m≠pög_t
 *
m
, *
key
)

1530 
svÆue_t
 
lv
;

1531 
svÆue_t
 *
ªt
;

1533 
lv
.
ty≥
 = 
T_STRING
;

1534 
lv
.
subty≥
 = 
STRING_CONSTANT
;

1535 
lv
.
u
.
°rög
 = 
key
;

1536 
ªt
 = 
	`föd_f‹_ö£π
(
m
, &
lv
, 1);

1538 
	`‰ì_°rög
(
lv
.
u
.
°rög
);

1539  
ªt
;

1540 
	}
}

	@src/marsh.c

1 
	~"m¨sh.h
"

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

7 
	$m_buf„r_Æloˇã
(
m_buf„r_t
 *
buf
, 
Àn
)

9 
buf
->
d©a
 = (*)
	`poﬁ_mÆloc
(
Àn
);

10 i‡(
buf
->
d©a
 == 0)

14 
buf
->
pos
 = 0;

15 
buf
->
Àn
 =Üen;

17 
	}
}

23 
	$m_buf„r_‰ì
(
m_buf„r_t
 *
buf
)

25 
	`poﬁ_‰ì
(
buf
->
d©a
);

26 
buf
->
d©a
 = 
NULL
;

27 
buf
->
pos
 = 0;

28 
buf
->
Àn
 = 0;

29 
	}
}

35 
	#DECLARE_PUSH_INT
(
bô
, 
ty≥
)\

36 
push_öt
##
	`bô
(
m_buf„r_t
 *
p
, 
ty≥
 
s
)\

38 i‡(
p
 =
NULL
 ||Ö->
pos
 + (
ty≥
Ë>Ö->
Àn
 ||Ö->
d©a
 == NULL) {\

41 
	`mem˝y
(
p
->
d©a
 +Ö->
pos
, &
s
, (
ty≥
));\

42 
p
->
pos
 +(
ty≥
);\

44 }

	)

46 
	$DECLARE_PUSH_INT
(8, )
	$DECLARE_PUSH_INT
(16, )
	$DECLARE_PUSH_INT
(32, )

48 
	$push_sh‹t°r
(
m_buf„r_t
 *
p
, *
s
)

50 
size_t
 
Àn
;

52 i‡(
p
 =
NULL
)

56 
Àn
 = 
	`°æí
(
s
);

57 i‡(
p
->
pos
 + (Ë+ 
Àn
 >Ö->À¿||Ö->
d©a
 =
NULL
)

61 
	`push_öt8
(
p
, 
Àn
);

62 
	`mem˝y
(
p
->
d©a
 +Ö->
pos
, 
s
, 
Àn
);

63 
p
->
pos
 +
Àn
;

65 
	}
}

71 
	$push_v¨°r
(
m_buf„r_t
 *
p
, *
s
)

73 
size_t
 
Àn
;

75 i‡(
p
 =
NULL
)

79 
Àn
 = 
	`°æí
(
s
);

80 i‡(
p
->
pos
 + (Ë+ 
Àn
 >Ö->À¿||Ö->
d©a
 =
NULL
)

84 
	`push_öt16
(
p
, 
Àn
);

85 
	`mem˝y
(
p
->
d©a
 +Ö->
pos
, 
s
, 
Àn
);

86 
p
->
pos
 +
Àn
;

88 
	}
}

94 
	$push_øw
(
m_buf„r_t
 *
p
, *
s
, 
Àn
)

96 i‡(
p
 =
NULL
 ||Ö->
pos
 + 
Àn
 >Ö->À¿||Ö->
d©a
 == NULL)

100 
	`mem˝y
(
p
->
d©a
 +Ö->
pos
, 
s
, 
Àn
);

101 
p
->
pos
 +
Àn
;

103 
	}
}

109 
	$s_push_öt32
(
m_buf„r_t
 *
p
, 
s
)

111 i‡(
p
 =
NULL
)

115 i‡(
	`push_öt32
(
p
, 
s
) == - 1)

117 *
tmp
;

118 
size_t
 
éí
 = 
p
->
Àn
;

120 
p
->
pos
 + (Ë> 
éí
)

122 
éí
 += 256;

124 
tmp
 = (*)
	`poﬁ_ªÆloc
(
p
->
d©a
, 
éí
);

125 i‡(
tmp
 =
NULL
)

129 
p
->
d©a
 = 
tmp
;

130 
p
->
Àn
 = 
éí
;

131  
	`push_öt32
(
p
, 
s
);

134 
	}
}

140 
	$s_push_øw
(
m_buf„r_t
 *
p
, *
s
, 
Àn
)

142 i‡(
p
 =
NULL
)

144 
	`¥ötf
("%†%d\n", 
__FILE__
, 
__LINE__
);

148 i‡(
	`push_øw
(
p
, 
s
, 
Àn
) == - 1)

150 *
tmp
;

151 
size_t
 
éí
 = 
p
->
Àn
;

153 
p
->
pos
 + 
Àn
 > 
éí
)

155 
éí
 += 256;

157 
tmp
 = (*)
	`poﬁ_ªÆloc
(
p
->
d©a
, 
éí
);

158 i‡(
tmp
 =
NULL
)

160 
	`¥ötf
("%†%d\n", 
__FILE__
, 
__LINE__
);

163 
p
->
d©a
 = 
tmp
;

164 
p
->
Àn
 = 
éí
;

165  
	`push_øw
(
p
, 
s
, 
Àn
);

168 
	}
}

174 
	$s_push_°r
(
m_buf„r_t
 *
p
, *
s
)

176  
	`s_push_øw
(
p
, 
s
, 
	`°æí
(s) );

177 
	}
}

183 
	$m_size
(
m_buf„r_t
 *
buf
)

185  
buf
->
pos
;

186 
	}
}

192 *
	$m_d©a
(
m_buf„r_t
 *
buf
)

194  
buf
->
d©a
;

195 
	}
}

201 
	$m_©èch
(
m_buf„r_t
 *
buf
, *
d©a
, 
Àn
)

203 
buf
->
Àn
 =Üen;

204 
buf
->
pos
 = 0;

205 
buf
->
d©a
 = data;

206 
	}
}

212 
	#DECLARE_POP_INT
(
bô
, 
ty≥
)\

213 
p›_öt
##
	`bô
(
m_buf„r_t
 *
up
, 
ty≥
 *
d
)\

215 i‡(
up
 =
NULL
 || up->
d©a
 =NULL || up->
pos
 + (
ty≥
Ë> up->
Àn
 ) {\

218 
	`mem˝y
(
d
, 
up
->
d©a
 + up->
pos
, (
ty≥
));\

219 
up
->
pos
 +(
ty≥
);\

221 }

	)

223 
	$DECLARE_POP_INT
(8, )
	$DECLARE_POP_INT
(16, )
	$DECLARE_POP_INT
(32, )

225 
	$p›_v¨°r
(
m_buf„r_t
 *
up
, *
d©a
, 
d©a_Àn
)

227 
Àn
;

228 
tmp
;

230 i‡(
up
 =
NULL
 || up->
d©a
 =NULL || up->
pos
 + (Ë> up->
Àn
)

234 
	`p›_öt16
(
up
, &
Àn
);

235 i‡(
up
->
pos
 + 
Àn
 > up->len)

239 
tmp
 = 
Àn
;

240 i‡(
d©a_Àn
 < 
tmp
)

242 
tmp
 = 
d©a_Àn
;

244 
	`mem˝y
(
d©a
, 
up
->d©®+ up->
pos
, 
tmp
);

245 i‡(
tmp
 >
d©a_Àn
)

247 
d©a
[
d©a_Àn
 - 1] = '\0';

251 
d©a
[
tmp
] = '\0';

253 
up
->
pos
 +
Àn
;

255 
	}
}

261 
	$p›_øw
(
m_buf„r_t
 *
up
, *
d©a
, 
Àn
)

263 i‡(
up
 =
NULL
 || up->
d©a
 =NULL || up->
pos
 + 
Àn
 > up->len)

267 
	`mem˝y
(
d©a
, 
up
->d©®+ up->
pos
, 
Àn
);

269 
	}
}

275 
	$m_buf„r_˛ón
(
m_buf„r_t
 *
buf
)

277 
buf
->
pos
 = 0;

278 
	}
}

284 #ifde‡
TEST


285 
	~<°dio.h
>

286 
	$maö
(
¨g
, *
¨gv
[])

288 
m_buf„r_t
 
mb
;

289 
buf
[256];

290 *
§c
 = "abcdefghijklmnABASDFASDFS";

291 
i
 = 0;

292 
	`m_buf„r_Æloˇã
(&
mb
, 1);

293 
i
 = 0; i < 200; ++i)

295 
	`s_push_øw
(&
mb
, 
§c
, 
	`°æí
(src) );

296 
	`s_push_øw
(&
mb
, " ", 1);

297 
	`s_push_øw
(&
mb
, 
§c
, 
	`°æí
(src) );

298 
	`s_push_øw
(&
mb
, "\n", 1);

300 
	`¥ötf
("RES:%†%d %d\n", 
	`m_°r
(&
mb
), 
	`m_size
(&mb), mb.
Àn
);

301 
	`m_buf„r_‰ì
(&
mb
);

302 
	}
}

	@src/object.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"fûe_ö˛.h
"

4 
	~"ŸabÀ.h
"

5 
	~"backíd.h
"

6 
	~"debug.h
"

7 
	~"comm.h
"

8 
	~"sw≠.h
"

9 
	~"p‹t.h
"

10 
	~"fûe.h
"

11 
	~"hash.h
"

12 
	~"obje˘.h
"

13 
	~"m¨sh.h
"

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<limôs.h
>

18 
	~<√tdb.h
>

19 
	~<sys/sockë.h
>

20 
	~<time.h
>

21 
	~<°dio.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/timeb.h
>

25 
	#too_dìp_ßve_îr‹
() \

26 
	`îr‹
("Too deep (%d) for save_object\n",\

27 
MAX_SAVE_SVALUE_DEPTH
);

	)

29 
obje˘_t
 *
	g¥evious_ob
;

30 
	gtŸ_Æloc_obje˘
, 
	gtŸ_Æloc_obje˘_size
;

32 *
ßve_m≠pög
(
m≠pög_t
 *
m
);

33 
INLINE_STATIC
 
ª°‹e_¨øy
(**
°r
, 
svÆue_t
*);

34 
INLINE_STATIC
 
ª°‹e_˛ass
(**
°r
, 
svÆue_t
*);

35 
ª°‹e_hash_°rög
(**
°r
, 
svÆue_t
*);

37 
INLINE
 
	$vÆid_hide
(
obje˘_t
 *
obj
)

51 
	}
}

58 
	gßve_svÆue_dïth
 = 0, 
	gmax_dïth
;

59 *
	gsizes
 = 0;

61 
INLINE
 
	$svÆue_ßve_size
(
svÆue_t
 *
v
)

63 
v
->
ty≥
)

65 
T_STRING
:

67 *
˝
 = 
v
->
u
.
°rög
;

68 
c
;

69 
size
 = 0;

71  (
c
 = *
˝
++) )

73 i‡(
c
 == '\\' || c == '"')

75 
size
++;

77 
size
++;

79  3+
size
;

82 
T_ARRAY
:

84 
svÆue_t
 *
sv
 = 
v
->
u
.
¨r
->
ôem
;

85 
i
 = 
v
->
u
.
¨r
->
size
, size = 0;

87 i‡(++
ßve_svÆue_dïth
 > 
MAX_SAVE_SVALUE_DEPTH
)

89 
	`too_dìp_ßve_îr‹
();

91 
i
--)

93 
size
 +
	`svÆue_ßve_size
(
sv
++);

95 
ßve_svÆue_dïth
--;

96  
size
 + 5;

99 
T_CLASS
:

101 
svÆue_t
 *
sv
 = 
v
->
u
.
¨r
->
ôem
;

102 
i
 = 
v
->
u
.
¨r
->
size
, size = 0;

104 i‡(++
ßve_svÆue_dïth
 > 
MAX_SAVE_SVALUE_DEPTH
)

106 
	`too_dìp_ßve_îr‹
();

108 
i
--)

110 
size
 +
	`svÆue_ßve_size
(
sv
++);

112 
ßve_svÆue_dïth
--;

113  
size
 + 5;

116 
T_MAPPING
:

118 
m≠pög_node_t
 **
a
 = 
v
->
u
.
m≠
->
èbÀ
, *
ñt
;

119 
j
 = 
v
->
u
.
m≠
->
èbÀ_size
, 
size
 = 0;

121 i‡(++
ßve_svÆue_dïth
 > 
MAX_SAVE_SVALUE_DEPTH
)

123 
	`too_dìp_ßve_îr‹
();

127 
ñt
 = 
a
[
j
];É…;É… =É…->
√xt
)

129 
size
 +
	`svÆue_ßve_size
(
ñt
->
vÆues
) + svalue_save_size(elt->values + 1);

132 
j
--);

133 
ßve_svÆue_dïth
--;

134  
size
 + 5;

137 
T_NUMBER
:

139 
ªs
 = 
v
->
u
.
numbî
, 
Àn
;

140 
Àn
 = 
ªs
 < 0 ? (res = ( -Ñes) &0x7fffffff, 3): 2;

141 
ªs
 > 9)

143 
ªs
 /= 10;

144 
Àn
++;

146  
Àn
;

149 
T_REAL
:

151 
buf
[256];

152 
	`•rötf
(
buf
, "%#g", 
v
->
u
.
ªÆ
);

153  (Ë(
	`°æí
(
buf
) + 1);

161 
	}
}

167 
INLINE
 
	$ßve_svÆue
(
svÆue_t
 *
v
, **
buf
)

169 
v
->
ty≥
)

171 
T_STRING
:

173 *
˝
 = *
buf
, *
°r
 = 
v
->
u
.
°rög
;

174 
c
;

176 *
˝
++ = '"';

177  (
c
 = *
°r
++) )

179 i‡(
c
 == '"' || c == '\\')

181 *
˝
++ = '\\';

182 *
˝
++ = 
c
;

186 *
˝
++ = (
c
 == '\n') ? '\r' : c;

190 *
˝
++ = '"';

191 *(*
buf
 = 
˝
) = '\0';

195 
T_ARRAY
:

197 
i
 = 
v
->
u
.
¨r
->
size
;

198 
svÆue_t
 *
sv
 = 
v
->
u
.
¨r
->
ôem
;

200 *(*
buf
)++ = '(';

201 *(*
buf
)++ = '{';

202 
i
--)

204 
	`ßve_svÆue
(
sv
++, 
buf
);

205 *(*
buf
)++ = ',';

207 *(*
buf
)++ = '}';

208 *(*
buf
)++ = ')';

209 *(*
buf
) = '\0';

213 
T_CLASS
:

215 
i
 = 
v
->
u
.
¨r
->
size
;

216 
svÆue_t
 *
sv
 = 
v
->
u
.
¨r
->
ôem
;

218 *(*
buf
)++ = '(';

219 *(*
buf
)++ = '/';

220 
i
--)

222 
	`ßve_svÆue
(
sv
++, 
buf
);

223 *(*
buf
)++ = ',';

225 *(*
buf
)++ = '/';

226 *(*
buf
)++ = ')';

227 *(*
buf
) = '\0';

231 
T_NUMBER
:

233 
ªs
 = 
v
->
u
.
numbî
, 
Á˘
, 
Àn
 = 1, 
√g
 = 0;

234 *
˝
;

236 i‡(
ªs
 < 0)

238 
Àn
++, 
√g
 = 1, 
ªs
 = ( -Ñes) &0x7fffffff;

240 
Á˘
 = 
ªs
;

241 
Á˘
 > 9)

243 
Á˘
 /= 10;

244 
Àn
++;

246 *(
˝
 = (*
buf
 +
Àn
) ) = '\0';

249 *--
˝
 = 
ªs
 % 10+'0';

250 
ªs
 /= 10;

252 
ªs
);

253 i‡(
√g
)

255 *(
˝
 - 1) = '-';

260 
T_REAL
:

262 
	`•rötf
(*
buf
, "%#g", 
v
->
u
.
ªÆ
);

263 (*
buf
Ë+
	`°æí
(*buf);

267 
T_MAPPING
:

269 
j
 = 
v
->
u
.
m≠
->
èbÀ_size
;

270 
m≠pög_node_t
 **
a
 = 
v
->
u
.
m≠
->
èbÀ
, *
ñt
;

272 *(*
buf
)++ = '(';

273 *(*
buf
)++ = '[';

276 
ñt
 = 
a
[
j
];É…;É… =É…->
√xt
)

278 
	`ßve_svÆue
(
ñt
->
vÆues
, 
buf
);

279 *(*
buf
)++ = ':';

280 
	`ßve_svÆue
(
ñt
->
vÆues
 + 1, 
buf
);

281 *(*
buf
)++ = ',';

284 
j
--);

286 *(*
buf
)++ = ']';

287 *(*
buf
)++ = ')';

288 *(*
buf
) = '\0';

292 
	}
}

298 
INLINE_STATIC
 
	$ª°‹e_öã∫Æ_size
(**
°r
, 
is_m≠pög
, 
dïth
)

300 *
˝
 = *
°r
;

301 
size
 = 0;

302 
c
, 
dñim
, 
ödex
 = 0;

304 
dñim
 = 
is_m≠pög
 ? ':' : ',';

305  (
c
 = *
˝
++) )

307 
c
)

311  (
c
 = *
˝
++) != '"')

312 i‡–(
c
 ='\0'Ë|| (¯='\\' && ! *
˝
++) )

316 i‡(*
˝
++ !
dñim
)

320 
size
++;

326 i‡(*
˝
 == '{')

328 *
°r
 = ++
˝
;

329 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 0, 
ßve_svÆue_dïth
++) )

334 i‡(*
˝
 == '[')

336 *
°r
 = ++
˝
;

337 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 1, 
ßve_svÆue_dïth
++) )

342 i‡(*
˝
 == '/')

344 *
°r
 = ++
˝
;

345 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 0, 
ßve_svÆue_dïth
++) )

355 i‡(*(
˝
 = *
°r
Ë!
dñim
)

359 
˝
++;

360 
size
++;

366 i‡(*
˝
++ =')' && 
is_m≠pög
)

368 *
°r
 = 
˝
;

369 i‡(!
sizes
)

371 
max_dïth
 = 128;

372 
max_dïth
 <
dïth
)

374 
max_dïth
 <<= 1;

376 
sizes
 = 
	`CALLOCATE
(
max_dïth
, , 
TAG_TEMPORARY
, "restore_internal_size");

378 i‡(
dïth
 >
max_dïth
)

380  (
max_dïth
 <<1Ë<
dïth
)

382 
sizes
 = 
	`RESIZE
(sizes, 
max_dïth
, , 
TAG_TEMPORARY
, "restore_internal_size");

384 
sizes
[
dïth
] = 
size
;

396 i‡(*
˝
++ =')' && !
is_m≠pög
)

398 *
°r
 = 
˝
;

399 i‡(!
sizes
)

401 
max_dïth
 = 128;

402 
max_dïth
 <
dïth
)

404 
max_dïth
 <<= 1;

406 
sizes
 = 
	`CALLOCATE
(
max_dïth
, , 
TAG_TEMPORARY
, "restore_internal_size");

408 i‡(
dïth
 >
max_dïth
)

410  (
max_dïth
 <<1Ë<
dïth
)

412 
sizes
 = 
	`RESIZE
(sizes, 
max_dïth
, , 
TAG_TEMPORARY
, "restore_internal_size");

414 
sizes
[
dïth
] = 
size
;

426 i‡(
c
 !
dñim
)

430 
size
++;

436 i‡(!(
˝
 = 
	`°rchr
(˝, 
dñim
) ) )

440 
˝
++;

441 
size
++;

444 i‡(
is_m≠pög
)

446 
dñim
 = (
ödex
 ^= 1) ? ',' : ':';

450 
	}
}

458 
INLINE_STATIC
 
	$ª°‹e_size
(**
°r
, 
is_m≠pög
)

460 *
˝
 = *
°r
;

461 
size
 = 0;

462 
c
, 
dñim
, 
ödex
 = 0;

464 
dñim
 = 
is_m≠pög
 ? ':' : ',';

466  (
c
 = *
˝
++) )

468 
c
)

472  (
c
 = *
˝
++) != '"')

473 i‡–(
c
 ='\0'Ë|| (¯='\\' && ! *
˝
++) )

478 i‡(*
˝
++ !
dñim
)

482 
size
++;

488 i‡(*
˝
 == '{')

490 *
°r
 = ++
˝
;

491 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 0, 
ßve_svÆue_dïth
++) )

496 i‡(*
˝
 == '[')

498 *
°r
 = ++
˝
;

499 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 1, 
ßve_svÆue_dïth
++) )

504 i‡(*
˝
 == '/')

506 *
°r
 = ++
˝
;

507 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 0, 
ßve_svÆue_dïth
++) )

517 i‡(*(
˝
 = *
°r
Ë!
dñim
)

521 
˝
++;

522 
size
++;

528 
ßve_svÆue_dïth
 = 0;

529 i‡(*
˝
++ =')' && 
is_m≠pög
)

531 *
°r
 = 
˝
;

532  
size
;

543 
ßve_svÆue_dïth
 = 0;

544 i‡(*
˝
++ =')' && !
is_m≠pög
)

546 *
°r
 = 
˝
;

547  
size
;

558 i‡(
c
 !
dñim
)

562 
size
++;

568 i‡(!(
˝
 = 
	`°rchr
(˝, 
dñim
) ) )

572 
˝
++;

573 
size
++;

576 i‡(
is_m≠pög
)

578 
dñim
 = (
ödex
 ^= 1) ? ',' : ':';

582 
	}
}

588 
INLINE_STATIC
 
	$ª°‹e_öãri‹_°rög
(**
vÆ
, 
svÆue_t
 *
sv
)

590 *
˝
 = *
vÆ
;

591 *
°¨t
 = 
˝
;

592 
c
;

593 
Àn
;

595  (
c
 = *
˝
++) != '"')

597 
c
)

601 *(
˝
 - 1) = '\n';

607 *
√w
 = 
˝
 - 1;

609 i‡–(*
√w
++ = *
˝
++) )

611  (
c
 = *
˝
++) != '"')

613 i‡(
c
 == '\\')

615 i‡(!(*
√w
++ = *
˝
++) )

617  
ROB_STRING_ERROR
;

622 i‡(
c
 == '\r')

624 *
√w
++ = '\n';

628 *
√w
++ = 
c
;

632 i‡(
c
 == '\0')

634  
ROB_STRING_ERROR
;

636 *
√w
 = '\0';

637 *
vÆ
 = 
˝
;

638 
sv
->
u
.
°rög
 = 
	`√w_°rög
(
Àn
 = (
√w
 - 
°¨t
), "restore_string");

639 
	`°r˝y
(
sv
->
u
.
°rög
, 
°¨t
);

640 
sv
->
ty≥
 = 
T_STRING
;

641 
sv
->
subty≥
 = 
STRING_MALLOC
;

646  
ROB_STRING_ERROR
;

652  
ROB_STRING_ERROR
;

658 *
vÆ
 = 
˝
;

659 *--
˝
 = '\0';

660 
Àn
 = 
˝
 - 
°¨t
;

661 
sv
->
u
.
°rög
 = 
	`√w_°rög
(
Àn
, "restore_string");

662 
	`°r˝y
(
sv
->
u
.
°rög
, 
°¨t
);

663 
sv
->
ty≥
 = 
T_STRING
;

664 
sv
->
subty≥
 = 
STRING_MALLOC
;

666 
	}
}

672 
	$∑r£_numîic
(**
˝p
, 
c
, 
svÆue_t
 *
de°
)

674 *
˝
 = *
˝p
;

675 
ªs
, 
√g
;

677 i‡(
c
 == '-')

679 
√g
 = 1;

680 
ªs
 = 0;

681 
c
 = *
˝
++;

682 i‡(!
	`isdigô
(
c
) )

689 
√g
 = 0;

691 
ªs
 = 
c
 - '0';

693  (
c
 = *
˝
++Ë&& 
	`isdigô
(c) )

695 
ªs
 *= 10;

696 
ªs
 +
c
 - '0';

698 i‡(
c
 == '.')

700 
f1
 = 0.0, 
f2
 = 10.0;

702 
c
 = *
˝
++;

703 i‡(!
	`isdigô
(
c
) )

705 
f1
 +
ªs
;

706 
de°
->
ty≥
 = 
T_REAL
;

707 
de°
->
u
.
ªÆ
 = (
√g
 ? - 
f1
: f1);

708 *
˝p
 = 
˝
;

714 
f1
 +(
c
 - '0'Ë/ 
f2
;

715 
f2
 *= 10;

718  (
c
 = *
˝
++Ë&& 
	`isdigô
(c) );

720 
f1
 +
ªs
;

721 i‡(
c
 == 'e')

723 
expo
 = 0;

725 i‡–(
c
 = *
˝
++) == '+')

727  (
c
 = *
˝
++Ë&& 
	`isdigô
(c) )

729 
expo
 *= 10;

730 
expo
 +(
c
 - '0');

732 
f1
 *
	`pow
(10.0, 
expo
);

734 i‡(
c
 == '-')

736  (
c
 = *
˝
++Ë&& 
	`isdigô
(c) )

738 
expo
 *= 10;

739 
expo
 +(
c
 - '0');

741 
f1
 *
	`pow
(10.0, - 
expo
);

749 
de°
->
ty≥
 = 
T_REAL
;

750 
de°
->
u
.
ªÆ
 = (
√g
 ? - 
f1
: f1);

751 *
˝p
 = 
˝
;

754 i‡(
c
 == 'e')

756 
expo
 = 0;

757 
f1
;

759 i‡–(
c
 = *
˝
++) == '+')

761  (
c
 = *
˝
++Ë&& 
	`isdigô
(c) )

763 
expo
 *= 10;

764 
expo
 +(
c
 - '0');

766 
f1
 = 
ªs
 * 
	`pow
(10.0, 
expo
);

768 i‡(
c
 == '-')

770  (
c
 = *
˝
++Ë&& 
	`isdigô
(c) )

772 
expo
 *= 10;

773 
expo
 +(
c
 - '0');

775 
f1
 = 
ªs
 * 
	`pow
(10.0, - 
expo
);

782 
de°
->
ty≥
 = 
T_REAL
;

783 
de°
->
u
.
ªÆ
 = (
√g
 ? - 
f1
: f1);

784 *
˝p
 = 
˝
;

789 
de°
->
ty≥
 = 
T_NUMBER
;

790 
de°
->
u
.
numbî
 = (
√g
 ? - 
ªs
:Ñes);

791 *
˝p
 = 
˝
;

794 
	}
}

800 
INLINE_STATIC
 
	$add_m≠_°©s
(
m≠pög_t
 *
m
, 
cou¡
)

802 
tŸÆ_m≠pög_nodes
 +
cou¡
;

803 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

804 
m
->
cou¡
 = count;

805 
	}
}

811 
growM≠
(
m≠pög_t
*);

813 
	$ª°‹e_m≠pög
(**
°r
, 
svÆue_t
 *
sv
)

815 
size
, 
i
, 
mask
, 
oi
, 
cou¡
 = 0;

816 
c
;

817 
m≠pög_t
 *
m
;

818 
svÆue_t
 
key
, 
vÆue
;

819 
m≠pög_node_t
 **
a
, *
ñt
, *
ñt2
;

820 *
˝
 = *
°r
;

821 
îr
;

823 i‡(
ßve_svÆue_dïth
)

825 
size
 = 
sizes
[
ßve_svÆue_dïth
 - 1];

827 i‡–(
size
 = 
	`ª°‹e_size
(
°r
, 1) ) < 0)

832 i‡(!
size
)

834 *
°r
 += 2;

835 
sv
->
u
.
m≠
 = 
	`Æloˇã_m≠pög
(0);

836 
sv
->
ty≥
 = 
T_MAPPING
;

839 
m
 = 
	`Æloˇã_m≠pög
(
size
 >> 1);

840 
a
 = 
m
->
èbÀ
;

841 
mask
 = 
m
->
èbÀ_size
;

845 
c
 = *
˝
++)

849 *
°r
 = 
˝
;

850 i‡–(
îr
 = 
	`ª°‹e_hash_°rög
(
°r
, &
key
) ) )

852 
key_îr‹
;

854 
˝
 = *
°r
;

855 
˝
++;

861 
ßve_svÆue_dïth
++;

862 i‡(*
˝
 == '[')

864 *
°r
 = ++
˝
;

865 i‡–(
îr
 = 
	`ª°‹e_m≠pög
(
°r
, &
key
) ) )

867 
key_îr‹
;

870 i‡(*
˝
 == '{')

872 *
°r
 = ++
˝
;

873 i‡–(
îr
 = 
	`ª°‹e_¨øy
(
°r
, &
key
) ) )

875 
key_îr‹
;

878 i‡(*
˝
 == '/')

880 *
°r
 = ++
˝
;

881 i‡–(
îr
 = 
	`ª°‹e_˛ass
(
°r
, &
key
) ) )

883 
key_îr‹
;

888 
gíîic_key_îr‹
;

890 
˝
 = *
°r
;

891 
˝
++;

897 
key
.
u
.
numbî
 = 0;

898 
key
.
ty≥
 = 
T_NUMBER
;

903 *
°r
 = ++
˝
;

904 
	`add_m≠_°©s
(
m
, 
cou¡
);

905 
sv
->
ty≥
 = 
T_MAPPING
;

906 
sv
->
u
.
m≠
 = 
m
;

920 i‡(!
	`∑r£_numîic
(&
˝
, 
c
, &
key
) )

922 
key_numîÆ_îr‹
;

927 
gíîic_key_îr‹
;

933 
c
 = *
˝
++)

937 *
°r
 = 
˝
;

938 i‡–(
îr
 = 
	`ª°‹e_öãri‹_°rög
(
°r
, &
vÆue
) ) )

940 
vÆue_îr‹
;

942 
˝
 = *
°r
;

943 
˝
++;

949 
ßve_svÆue_dïth
++;

950 i‡(*
˝
 == '[')

952 *
°r
 = ++
˝
;

953 i‡–(
îr
 = 
	`ª°‹e_m≠pög
(
°r
, &
vÆue
) ) )

955 
vÆue_îr‹
;

958 i‡(*
˝
 == '{')

960 *
°r
 = ++
˝
;

961 i‡–(
îr
 = 
	`ª°‹e_¨øy
(
°r
, &
vÆue
) ) )

963 
vÆue_îr‹
;

966 i‡(*
˝
 == '/')

968 *
°r
 = ++
˝
;

969 i‡–(
îr
 = 
	`ª°‹e_˛ass
(
°r
, &
vÆue
) ) )

971 
vÆue_îr‹
;

976 
gíîic_vÆue_îr‹
;

978 
˝
 = *
°r
;

979 
˝
++;

994 i‡(!
	`∑r£_numîic
(&
˝
, 
c
, &
vÆue
) )

996 
vÆue_numîÆ_îr‹
;

1002 
vÆue
.
u
.
numbî
 = 0;

1003 
vÆue
.
ty≥
 = 
T_NUMBER
;

1008 
gíîic_vÆue_îr‹
;

1013 
oi
 = 
	`MAP_POINTER_HASH
(
key
.
u
.
numbî
);

1014 
i
 = 
oi
 &
mask
;

1015 i‡–(
ñt2
 = 
ñt
 = 
a
[
i
]) )

1020 i‡(
	`mßmevÆ
(&
key
, 
ñt
->
vÆues
) )

1022 
	`‰ì_svÆue
(&
key
, "restore_mapping: duplicate key");

1023 
	`‰ì_svÆue
(
ñt
->
vÆues
 + 1, "restore_mapping:Ñeplaced value");

1024 *(
ñt
->
vÆues
 + 1Ë
vÆue
;

1029  (
ñt
 =É…->
√xt
) );

1030 i‡(
ñt
)

1035 i‡(!(--
m
->
unfûÀd
) )

1037 i‡(
	`growM≠
(
m
) )

1039 
a
 = 
m
->
èbÀ
;

1040 i‡(
oi
 &++
mask
)

1042 
ñt2
 = 
a
[
i
 |
mask
];

1044 
mask
 <<= 1;

1045 
mask
--;

1049 
	`add_m≠_°©s
(
m
, 
cou¡
);

1050 
	`‰ì_m≠pög
(
m
);

1051 
	`‰ì_svÆue
(&
key
, "restore_mapping: out of memory");

1052 
	`‰ì_svÆue
(&
vÆue
, "restore_mapping: out of memory");

1053 
	`îr‹
("Out of memory\n");

1057 i‡(++
cou¡
 > 
MAX_MAPPING_SIZE
)

1059 
	`add_m≠_°©s
(
m
, 
cou¡
 - 1);

1060 
	`‰ì_m≠pög
(
m
);

1061 
	`‰ì_svÆue
(&
key
, "restore_mapping: mappingÅooÜarge");

1062 
	`‰ì_svÆue
(&
vÆue
, "restore_mapping: mappingÅooÜarge");

1063 
	`m≠pög_too_œrge
();

1066 
ñt
 = 
	`√w_m≠_node
();

1067 *
ñt
->
vÆues
 = 
key
;

1068 *(
ñt
->
vÆues
 + 1Ë
vÆue
;

1069 (
a
[
i
] = 
ñt
)->
√xt
 = 
ñt2
;

1073 
vÆue_numîÆ_îr‹
: 
	`‰ì_svÆue
(&
key
, "restore_mapping:Çumeral valueÉrror");

1074 
key_numîÆ_îr‹
: 
	`add_m≠_°©s
(
m
, 
cou¡
);

1075 
	`‰ì_m≠pög
(
m
);

1076  
ROB_NUMERAL_ERROR
;

1077 
gíîic_vÆue_îr‹
: 
	`‰ì_svÆue
(&
key
, "restore_mapping: generic valueÉrror");

1078 
gíîic_key_îr‹
: 
	`add_m≠_°©s
(
m
, 
cou¡
);

1079 
	`‰ì_m≠pög
(
m
);

1080  
ROB_MAPPING_ERROR
;

1081 
vÆue_îr‹
: 
	`‰ì_svÆue
(&
key
, "restore_mapping: valueÉrror");

1082 
key_îr‹
: 
	`add_m≠_°©s
(
m
, 
cou¡
);

1083 
	`‰ì_m≠pög
(
m
);

1084  
îr
;

1085 
	}
}

1092 
INLINE_STATIC
 
	$ª°‹e_˛ass
(**
°r
, 
svÆue_t
 *
ªt
)

1094 
size
;

1095 
c
;

1096 
¨øy_t
 *
v
;

1097 
svÆue_t
 *
sv
;

1098 *
˝
 = *
°r
;

1099 
îr
;

1101 i‡(
ßve_svÆue_dïth
)

1103 
size
 = 
sizes
[
ßve_svÆue_dïth
 - 1];

1105 i‡–(
size
 = 
	`ª°‹e_size
(
°r
, 0) ) < 0)

1107  
ROB_CLASS_ERROR
;

1110 
v
 = 
	`Æloˇã_˛ass_by_size
(
size
);

1112 
sv
 = 
v
->
ôem
;

1114 
size
--)

1116 
c
 = *
˝
++)

1119 *
°r
 = 
˝
;

1120 i‡–(
îr
 = 
	`ª°‹e_öãri‹_°rög
(
°r
, 
sv
) ) )

1122 
gíîic_îr‹
;

1124 
˝
 = *
°r
;

1125 
˝
++;

1126 
sv
++;

1130 
sv
++;

1135 
ßve_svÆue_dïth
++;

1136 i‡(*
˝
 == '[')

1138 *
°r
 = ++
˝
;

1139 i‡–(
îr
 = 
	`ª°‹e_m≠pög
(
°r
, 
sv
) ) )

1141 
îr‹
;

1144 i‡(*
˝
 == '{')

1146 *
°r
 = ++
˝
;

1147 i‡–(
îr
 = 
	`ª°‹e_¨øy
(
°r
, 
sv
) ) )

1149 
îr‹
;

1152 i‡(*
˝
 == '/')

1154 *
°r
 = ++
˝
;

1155 i‡–(
îr
 = 
	`ª°‹e_˛ass
(
°r
, 
sv
) ) )

1157 
îr‹
;

1162 
gíîic_îr‹
;

1164 
sv
++;

1165 
˝
 = *
°r
;

1166 
˝
++;

1181 i‡(
	`∑r£_numîic
(&
˝
, 
c
, 
sv
) )

1183 
sv
++;

1187 
numîÆ_îr‹
;

1192 
gíîic_îr‹
;

1196 
˝
 += 2;

1197 *
°r
 = 
˝
;

1198 
ªt
->
u
.
¨r
 = 
v
;

1199 
ªt
->
ty≥
 = 
T_CLASS
;

1202 
numîÆ_îr‹
: 
îr
 = 
ROB_NUMERAL_ERROR
;

1203 
îr‹
;

1204 
gíîic_îr‹
: 
îr
 = 
ROB_CLASS_ERROR
;

1205 
îr‹
: 
	`‰ì_˛ass
(
v
);

1206  
îr
;

1207 
	}
}

1213 
INLINE_STATIC
 
	$ª°‹e_¨øy
(**
°r
, 
svÆue_t
 *
ªt
)

1215 
size
;

1216 
c
;

1217 
¨øy_t
 *
v
;

1218 
svÆue_t
 *
sv
;

1219 *
˝
 = *
°r
;

1220 
îr
;

1222 i‡(
ßve_svÆue_dïth
)

1224 
size
 = 
sizes
[
ßve_svÆue_dïth
 - 1];

1226 i‡–(
size
 = 
	`ª°‹e_size
(
°r
, 0) ) < 0)

1228  
ROB_ARRAY_ERROR
;

1231 
v
 = 
	`Æloˇã_¨øy
(
size
);

1233 
sv
 = 
v
->
ôem
;

1235 
size
--)

1237 
c
 = *
˝
++)

1240 *
°r
 = 
˝
;

1241 i‡–(
îr
 = 
	`ª°‹e_öãri‹_°rög
(
°r
, 
sv
) ) )

1243 
gíîic_îr‹
;

1245 
˝
 = *
°r
;

1246 
˝
++;

1247 
sv
++;

1251 
sv
++;

1256 
ßve_svÆue_dïth
++;

1257 i‡(*
˝
 == '[')

1259 *
°r
 = ++
˝
;

1260 i‡–(
îr
 = 
	`ª°‹e_m≠pög
(
°r
, 
sv
) ) )

1262 
îr‹
;

1265 i‡(*
˝
 == '{')

1267 *
°r
 = ++
˝
;

1268 i‡–(
îr
 = 
	`ª°‹e_¨øy
(
°r
, 
sv
) ) )

1270 
îr‹
;

1273 i‡(*
˝
 == '/')

1275 *
°r
 = ++
˝
;

1276 i‡–(
îr
 = 
	`ª°‹e_˛ass
(
°r
, 
sv
) ) )

1278 
îr‹
;

1283 
gíîic_îr‹
;

1285 
sv
++;

1286 
˝
 = *
°r
;

1287 
˝
++;

1302 i‡(
	`∑r£_numîic
(&
˝
, 
c
, 
sv
) )

1304 
sv
++;

1308 
numîÆ_îr‹
;

1313 
gíîic_îr‹
;

1317 
˝
 += 2;

1318 *
°r
 = 
˝
;

1319 
ªt
->
u
.
¨r
 = 
v
;

1320 
ªt
->
ty≥
 = 
T_ARRAY
;

1323 
numîÆ_îr‹
: 
îr
 = 
ROB_NUMERAL_ERROR
;

1324 
îr‹
;

1325 
gíîic_îr‹
: 
îr
 = 
ROB_ARRAY_ERROR
;

1326 
îr‹
: 
	`‰ì_¨øy
(
v
);

1327  
îr
;

1328 
	}
}

1334 
INLINE
 
	$ª°‹e_°rög
(*
vÆ
, 
svÆue_t
 *
sv
)

1336 *
˝
 = 
vÆ
;

1337 *
°¨t
 = 
˝
;

1338 
c
;

1339 
Àn
;

1341  (
c
 = *
˝
++) != '"')

1343 
c
)

1347 *(
˝
 - 1) = '\n';

1353 *
√w
 = 
˝
 - 1;

1355 i‡–(*
√w
++ = *
˝
++) )

1357  (
c
 = *
˝
++) != '"')

1359 i‡(
c
 == '\\')

1361 i‡(!(*
√w
++ = *
˝
++) )

1363  
ROB_STRING_ERROR
;

1368 i‡(
c
 == '\r')

1370 *
√w
++ = '\n';

1374 *
√w
++ = 
c
;

1378 i‡–(
c
 ='\0'Ë|| (*
˝
 != '\0') )

1380  
ROB_STRING_ERROR
;

1382 *
√w
 = '\0';

1383 
sv
->
u
.
°rög
 = 
	`√w_°rög
(
√w
 - 
°¨t
, "restore_string");

1384 
	`°r˝y
(
sv
->
u
.
°rög
, 
°¨t
);

1385 
sv
->
ty≥
 = 
T_STRING
;

1386 
sv
->
subty≥
 = 
STRING_MALLOC
;

1391  
ROB_STRING_ERROR
;

1397  
ROB_STRING_ERROR
;

1403 i‡(*
˝
--)

1405  
ROB_STRING_ERROR
;

1407 *
˝
 = '\0';

1408 
Àn
 = 
˝
 - 
°¨t
;

1409 
sv
->
u
.
°rög
 = 
	`√w_°rög
(
Àn
, "restore_string");

1410 
	`°r˝y
(
sv
->
u
.
°rög
, 
°¨t
);

1411 
sv
->
ty≥
 = 
T_STRING
;

1412 
sv
->
subty≥
 = 
STRING_MALLOC
;

1414 
	}
}

1418 
INLINE
 
	$ª°‹e_svÆue
(*
˝
, 
svÆue_t
 *
v
)

1420 
ªt
;

1421 
c
;

1423 
c
 = *
˝
++)

1426  
	`ª°‹e_°rög
(
˝
, 
v
);

1428 i‡(*
˝
 == '{')

1430 
˝
++;

1431 
ªt
 = 
	`ª°‹e_¨øy
(&
˝
, 
v
);

1433 i‡(*
˝
 == '[')

1435 
˝
++;

1436 
ªt
 = 
	`ª°‹e_m≠pög
(&
˝
, 
v
);

1438 i‡(*
˝
++ == '/')

1440 
ªt
 = 
	`ª°‹e_˛ass
(&
˝
, 
v
);

1444 
ªt
 = 
ROB_GENERAL_ERROR
;

1447 i‡(
ßve_svÆue_dïth
)

1449 
ßve_svÆue_dïth
 = 
max_dïth
 = 0;

1450 i‡(
sizes
)

1452 
	`FREE
–(*)
sizes
);

1454 
sizes
 = (*)0;

1456  
ªt
;

1469 i‡(!
	`∑r£_numîic
(&
˝
, 
c
, 
v
) )

1471  
ROB_NUMERAL_ERROR
;

1476 
v
->
ty≥
 = 
T_NUMBER
;

1477 
v
->
u
.
numbî
 = 0;

1481 
	}
}

1485 
INLINE
 
	$ß„_ª°‹e_svÆue
(*
˝
, 
svÆue_t
 *
v
)

1487 
ªt
;

1488 
svÆue_t
 
vÆ
;

1489 
c
;

1491 
vÆ
.
ty≥
 = 
T_NUMBER
;

1492 
c
 = *
˝
++)

1495 i‡–(
ªt
 = 
	`ª°‹e_°rög
(
˝
, &
vÆ
) ) )

1497  
ªt
;

1502 i‡(*
˝
 == '{')

1504 
˝
++;

1505 
ªt
 = 
	`ª°‹e_¨øy
(&
˝
, &
vÆ
);

1507 i‡(*
˝
 == '[')

1509 
˝
++;

1510 
ªt
 = 
	`ª°‹e_m≠pög
(&
˝
, &
vÆ
);

1512 i‡(*
˝
++ == '/')

1514 
ªt
 = 
	`ª°‹e_˛ass
(&
˝
, &
vÆ
);

1518  
ROB_GENERAL_ERROR
;

1521 i‡(
ßve_svÆue_dïth
)

1523 
ßve_svÆue_dïth
 = 
max_dïth
 = 0;

1524 i‡(
sizes
)

1526 
	`FREE
–(*)
sizes
);

1528 
sizes
 = (*)0;

1530 i‡(
ªt
)

1532  
ªt
;

1548 i‡(!
	`∑r£_numîic
(&
˝
, 
c
, &
vÆ
) )

1550  
ROB_NUMERAL_ERROR
;

1555 
vÆ
.
ty≥
 = 
T_NUMBER
;

1556 
vÆ
.
u
.
numbî
 = 0;

1558 
	`‰ì_svÆue
(
v
, "safe_restore_svalue");

1559 *
v
 = 
vÆ
;

1561 
	}
}

1567 
	$fgv_ªcur£
(
¥ogøm_t
 *
¥og
, *
idx
, *
«me
, *
ty≥
)

1569 
i
;

1570 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++)

1572 i‡(
	`fgv_ªcur£
(
¥og
->
öhîô
[
i
].¥og, 
idx
, 
«me
, 
ty≥
) )

1574 *
ty≥
 |
¥og
->
öhîô
[
i
].
ty≥_mod
;

1578 
i
 = 0; i < 
¥og
->
num_v¨übÀs_deföed
; i++)

1580 i‡(
¥og
->
v¨übÀ_èbÀ
[
i
] =
«me
)

1582 *
idx
 +
i
;

1583 *
ty≥
 = 
¥og
->
v¨übÀ_ty≥s
[
i
];

1587 *
idx
 +
¥og
->
num_v¨übÀs_deföed
;

1589 
	}
}

1595 
	$föd_globÆ_v¨übÀ
(
¥ogøm_t
 *
¥og
, *
«me
, *
ty≥
)

1597 
idx
 = 0;

1598 *
°r
 = 
	`föd°rög
(
«me
);

1600 i‡(
°r
 && 
	`fgv_ªcur£
(
¥og
, &
idx
, så, 
ty≥
) )

1602 i‡(*
ty≥
 &
NAME_PUBLIC
)

1604 *
ty≥
 &~
NAME_PRIVATE
;

1606  
idx
;

1609 
	}
}

1615 
	$ª°‹e_obje˘_‰om_buff
(
obje˘_t
 *
ob
, *
theBuff
, 
no˛ór
)

1617 *
buff
, *
√xtBuff
, *
tmp
, *
•a˚
;

1618 
v¨
[100];

1619 
idx
;

1620 
svÆue_t
 *
sv
 = 
ob
->
v¨übÀs
;

1621 
rc
;

1622 
t
;

1624 
√xtBuff
 = 
theBuff
;

1625  (
buff
 = 
√xtBuff
) && *buff)

1627 
svÆue_t
 *
v
;

1629 i‡–(
tmp
 = 
	`°rchr
(
buff
, '\n') ) )

1631 *
tmp
 = '\0';

1632 
√xtBuff
 = 
tmp
 + 1;

1636 
√xtBuff
 = 0;

1638 i‡(
buff
[0] == '#')

1643 
•a˚
 = 
	`°rchr
(
buff
, ' ');

1644 i‡(!
•a˚
 || ( (Ë(•a˚ - 
buff
Ë>(
v¨
) ) )

1646 
	`FREE
(
theBuff
);

1647 
	`îr‹
("restore_object(): Illegal file format.\n");

1649 ()
	`°∫˝y
(
v¨
, 
buff
, 
•a˚
 - buff);

1650 
v¨
[
•a˚
 - 
buff
] = '\0';

1651 
idx
 = 
	`föd_globÆ_v¨übÀ
(
cuºít_obje˘
->
¥og
, 
v¨
, &
t
);

1652 i‡(
idx
 =- 1 || 
t
 &
NAME_STATIC
)

1657 
v
 = &
sv
[
idx
];

1658 i‡(
no˛ór
)

1660 
rc
 = 
	`ß„_ª°‹e_svÆue
(
•a˚
 + 1, 
v
);

1664 
rc
 = 
	`ª°‹e_svÆue
(
•a˚
 + 1, 
v
);

1666 i‡(
rc
 &
ROB_ERROR
)

1668 
	`FREE
(
theBuff
);

1670 i‡(
rc
 &
ROB_GENERAL_ERROR
)

1673 
	`îr‹
("QTZ_SîvîEngöe:Bad f‹m© whûêª°‹ög %s.\n", 
v¨
);

1675 i‡(
rc
 &
ROB_NUMERAL_ERROR
)

1678 
	`îr‹
("QTZ_SîvîEngöe:Bad f‹m© whûêª°‹ög %s.\n", 
v¨
);

1680 i‡(
rc
 &
ROB_ARRAY_ERROR
)

1683 
	`îr‹
("QTZ_SîvîEngöe:Bad f‹m© whûêª°‹ög %s.\n", 
v¨
);

1685 i‡(
rc
 &
ROB_MAPPING_ERROR
)

1688 
	`îr‹
("QTZ_SîvîEngöe:Bad f‹m© whûêª°‹ög %s.\n", 
v¨
);

1690 i‡(
rc
 &
ROB_STRING_ERROR
)

1693 
	`îr‹
("QTZ_SîvîEngöe: Bad f‹m© whûêª°‹ög %s.\n", 
v¨
);

1695 i‡(
rc
 &
ROB_CLASS_ERROR
)

1698 
	`îr‹
("QTZ_SîvîEngöe: Bad f‹m© whûêª°‹ög %s.\n", 
v¨
);

1702 
	}
}

1710 
	$ßve_obje˘_ªcur£
(
¥ogøm_t
 *
¥og
, 
svÆue_t
 **
svp
, 
ty≥
, 
ßve_zîos
, 
FILE
 *
f
)

1712 
i
;

1713 
theSize
;

1714 *
√w_°r
, *
p
;

1716 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++)

1718 i‡(!
	`ßve_obje˘_ªcur£
(
¥og
->
öhîô
[
i
].¥og, 
svp
,Örog->öhîô[i].
ty≥_mod
 | 
ty≥
, 
ßve_zîos
, 
f
) )

1723 i‡(
ty≥
 &
NAME_STATIC
)

1725 (*
svp
Ë+
¥og
->
num_v¨übÀs_deföed
;

1728 
i
 = 0; i < 
¥og
->
num_v¨übÀs_deföed
; i++)

1730 i‡(
¥og
->
v¨übÀ_ty≥s
[
i
] &
NAME_STATIC
)

1732 (*
svp
)++;

1735 
ßve_svÆue_dïth
 = 0;

1736 
theSize
 = 
	`svÆue_ßve_size
(*
svp
);

1737 
√w_°r
 = (*)
	`DXALLOC
(
theSize
, 
TAG_TEMPORARY
, "save_object: 2");

1738 *
√w_°r
 = '\0';

1739 
p
 = 
√w_°r
;

1740 
	`ßve_svÆue
–(*
svp
)++, &
p
);

1742 i‡(
ßve_zîos
 || 
√w_°r
[0] != '0' ||Çew_str[1] != 0)

1744 i‡(
	`Ârötf
(
f
, "%†%s\n", 
¥og
->
v¨übÀ_èbÀ
[
i
], 
√w_°r
) < 0)

1746 
	`debug_≥º‹
("save_object: fprintf", 0);

1749 
	`FREE
(
√w_°r
);

1752 
	}
}

1758 
	g£l
 = - 1;

1760 
	$ßve_obje˘
(
obje˘_t
 *
ob
, *
fûe
, 
ßve_zîos
)

1762 *
«me
;

1763 
tmp_«me
[256], 
bak_«me
[256];

1764 
Àn
;

1765 
FILE
 *
f
;

1766 
suc˚ss
;

1767 
svÆue_t
 *
v
;

1770 i‡(
ob
->
Êags
 &
O_DESTRUCTED
)

1775 
Àn
 = 
	`°æí
(
fûe
);

1776 i‡(
fûe
[
Àn
 - 2] == '.' && file[len - 1] == 'c')

1778 
Àn
 -= 2;

1781 i‡(
£l
 == - 1)

1783 
£l
 = 
	`°æí
(
SAVE_EXTENSION
);

1785 i‡(
	`°rcmp
(
fûe
 + 
Àn
 - 
£l
, 
SAVE_EXTENSION
) == 0)

1787 
Àn
 -
£l
;

1790 
«me
 = 
	`√w_°rög
(
Àn
 + 
	`°æí
(
SAVE_EXTENSION
), "save_object");

1791 
	`°r˝y
(
«me
, 
fûe
);

1792 
	`°r˝y
(
«me
 + 
Àn
, 
SAVE_EXTENSION
);

1794 
	`push_mÆlo˚d_°rög
(
«me
);

1796 
fûe
 = 
	`check_vÆid_∑th
(
«me
, 
ob
, "save_object", 1);

1797 
	`‰ì_°rög_svÆue
(
•
--);

1798 i‡(!
fûe
)

1801 
	`îr‹
("QTZ_ServerEngine:Denied writeÖermission in function.\n");

1809 
	`•rötf
(
tmp_«me
, "%.250s.tmp", 
fûe
);

1811 i‡(!(
f
 = 
	`f›í
(
tmp_«me
, "w"ËË|| 
	`Ârötf
(f, "#/%s\n", 
ob
->
¥og
->
«me
) < 0)

1814 
	`îr‹
("QTZ_SîvîEngöe:CouldÇŸ o≥¿/%†f‹á save.\n", 
tmp_«me
);

1817 
v
 = 
ob
->
v¨übÀs
;

1818 
suc˚ss
 = 
	`ßve_obje˘_ªcur£
(
ob
->
¥og
, &
v
, 0, 
ßve_zîos
, 
f
);

1820 i‡(
	`f˛o£
(
f
) < 0)

1823 
	`debug_≥º‹
("QTZ_SîvîEngöe:ßve_obje˘", 
fûe
);

1824 
suc˚ss
 = 0;

1827 i‡(!
suc˚ss
)

1830 
	`debug_mesßge
("FailedÅo save file. Disk may be full.\n");

1831 
	`u∆ök
(
tmp_«me
);

1835 
	`•rötf
(
bak_«me
, "%.250s.bak", 
fûe
);

1836 
	`u∆ök
(
bak_«me
);

1837 
	`lök
(
fûe
, 
bak_«me
);

1838 #ifde‡
WIN32


1840 
	`u∆ök
(
fûe
);

1842 i‡(
	`ª«me
(
tmp_«me
, 
fûe
) < 0)

1844 #ifde‡
LATTICE


1846 i‡(
î∫o
 =
EEXIST
)

1848 
	`u∆ök
(
fûe
);

1849 i‡(
	`ª«me
(
tmp_«me
, 
fûe
) >= 0)

1856 
	`debug_≥º‹
("QTZ_SîvîEngöe:ßvêobje˘", 
fûe
);

1858 
	`debug_mesßge
("QTZ_SîvîEngöe:FaûedÅÿª«mê/%†tÿ/%s\n", 
tmp_«me
, 
fûe
);

1860 
	`debug_mesßge
("QTZ_ServerEngine:FailedÅo save object!\n");

1861 
	`u∆ök
(
tmp_«me
);

1867 
	}
}

1869 
	$ßve_log
(*
fûíame
, *
öfo
)

1872 
FILE
 *
fs
;

1873 
logfûe
[100];

1874 
	`•rötf
(
logfûe
, "%s.log", 
fûíame
);

1875 
fs
 = 
	`f›í
(
logfûe
, "a");

1876 
	`Ârötf
(
fs
, "\n");

1877 
	`Ârötf
(
fs
, 
öfo
);

1878 
	`f˛o£
(
fs
);

1882 
	}
}

1884 
	$GëIP
(*
ù
)

1887 
ho°ít
 *
ho°
;

1888 
ö_addr
 
dŸù
;

1889 
	`gëho°«me
(
ù
, 127);

1890 
ho°
 = 
	`gëho°by«me
(
ù
);

1891 
dŸù
.
s_addr
 = *–(*)
ho°
->
h_addr
);

1892 
	`•rötf
(
ù
, "%s", 
	`öë_¡ﬂ
(
dŸù
) );

1893 
	}
}

1896 *
	$GëMidSå
(*
°r1
, c⁄° *
°r2
, c⁄° *
°r3
)

1898 *
ªs
;

1900 
ãmp
[1500];

1901 i‡(
	`°æí
(
°r1
) > 1400)

1904 } 
	`°r˝y
(
ãmp
, 
°r1
);

1905 
ªs
 = 
	`°r°r
(
ãmp
, 
°r2
);

1906 i‡(
ªs
)

1908 
ªs
 =Ñe†+ 
	`°æí
(
°r2
);

1909 
	`°r˝y
(
ãmp
, 
ªs
);

1910 
ªs
 = 
	`°r°r
(
ãmp
, 
°r3
);

1911 i‡(
ªs
)

1913 
ãmp
[
ªs
 -Åemp] = '\0';

1914 
	`°r˝y
(
°r1
, 
ãmp
);

1915  
°r1
;

1926 
	}
}

1933 *
	$ßve_v¨übÀ
(
svÆue_t
 *
v¨
)

1935 
theSize
;

1936 *
√w_°r
, *
p
;

1938 
ßve_svÆue_dïth
 = 0;

1939 
theSize
 = 
	`svÆue_ßve_size
(
v¨
);

1940 
√w_°r
 = 
	`√w_°rög
(
theSize
 - 1, "save_variable");

1941 *
√w_°r
 = '\0';

1942 
p
 = 
√w_°r
;

1943 
	`ßve_svÆue
(
v¨
, &
p
);

1944  
√w_°r
;

1945 
	}
}

1951 *
	$ßve_v¨übÀ_2
(
svÆue_t
 *
v¨
, *
ªt
)

1953 
ßve_svÆue_dïth
 = 0;

1954 *
ªt
 = '\0';

1955 
	`ßve_svÆue
(
v¨
, &
ªt
);

1956  
ªt
;

1957 
	}
}

1963 
	$˙s_ju°_cou¡
(*
idx
, 
¥ogøm_t
 *
¥og
)

1965 
i
;

1967 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++)

1969 
	`˙s_ju°_cou¡
(
idx
, 
¥og
->
öhîô
[
i
].prog);

1971 *
idx
 +
¥og
->
num_v¨übÀs_deföed
;

1972 
	}
}

1978 
	$˙s_ªcur£
(
obje˘_t
 *
ob
, *
idx
, 
¥ogøm_t
 *
¥og
)

1980 
i
;

1982 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++)

1984 i‡(
¥og
->
öhîô
[
i
].
ty≥_mod
 &
NAME_STATIC
)

1986 
	`˙s_ju°_cou¡
(
idx
, 
¥og
->
öhîô
[
i
].prog);

1990 
	`˙s_ªcur£
(
ob
, 
idx
, 
¥og
->
öhîô
[
i
].prog);

1993 
i
 = 0; i < 
¥og
->
num_v¨übÀs_deföed
; i++)

1995 i‡(!(
¥og
->
v¨übÀ_ty≥s
[
i
] &
NAME_STATIC
) )

1997 
	`‰ì_svÆue
(&
ob
->
v¨übÀs
[ *
idx
 + 
i
], "cns_recurse");

1998 
ob
->
v¨übÀs
[ *
idx
 + 
i
] = 
c⁄°0u
;

2001 *
idx
 +
¥og
->
num_v¨übÀs_deföed
;

2002 
	}
}

2008 
	$˛ór_n⁄_°©ics
(
obje˘_t
 *
ob
)

2010 
idx
 = 0;

2011 
	`˙s_ªcur£
(
ob
, &
idx
, ob->
¥og
);

2012 
	}
}

2018 
	$ª°‹e_obje˘
(
obje˘_t
 *
ob
, *
fûe
, 
no˛ór
)

2020 *
«me
, *
theBuff
;

2021 
Àn
, 
i
;

2022 
FILE
 *
f
;

2023 
obje˘_t
 *
ßve
 = 
cuºít_obje˘
;

2024 
°©
 
°
;

2026 i‡(
ob
->
Êags
 &
O_DESTRUCTED
)

2031 
Àn
 = 
	`°æí
(
fûe
);

2032 i‡(
fûe
[
Àn
 - 2] == '.' && file[len - 1] == 'c')

2034 
Àn
 -= 2;

2037 i‡(
£l
 == - 1)

2039 
£l
 = 
	`°æí
(
SAVE_EXTENSION
);

2041 i‡(
	`°rcmp
(
fûe
 + 
Àn
 - 
£l
, 
SAVE_EXTENSION
) == 0)

2043 
Àn
 -
£l
;

2046 
«me
 = 
	`√w_°rög
(
Àn
 + 
	`°æí
(
SAVE_EXTENSION
), "restore_object");

2047 
	`°∫˝y
(
«me
, 
fûe
, 
Àn
);

2048 
	`°r˝y
(
«me
 + 
Àn
, 
SAVE_EXTENSION
);

2050 
	`push_mÆlo˚d_°rög
(
«me
);

2052 
fûe
 = 
	`check_vÆid_∑th
(
«me
, 
ob
, "restore_object", 0);

2053 
	`‰ì_°rög_svÆue
(
•
--);

2054 i‡(!
fûe
)

2056 
	`îr‹
("DeniedÑeadÖermission inÑestore_object().\n");

2059 #ifde‡
LATTICE


2060 
f
 = 
NULL
;

2061 i‡–(
	`°©
(
fûe
, &
°
Ë=- 1Ë|| !(
f
 = 
	`f›í
(file, "r") ) )

2064 
f
 = 
	`f›í
(
fûe
, "r");

2065 i‡(!
f
 || 
	`f°©
(
	`fûío
(f), &
°
) == - 1)

2068 i‡(
f
)

2070 ()
	`f˛o£
(
f
);

2075 i‡(!(
i
 = 
°
.
°_size
) )

2077 ()
	`f˛o£
(
f
);

2081 
theBuff
 = 
	`DXALLOC
(
i
 + 1, 
TAG_TEMPORARY
, "restore_object: 4");

2083 
	`‰ód
(
theBuff
, 1, 
i
, 
f
);

2085 
	`f˛o£
(
f
);

2086 
theBuff
[
i
] = '\0';

2088 
cuºít_obje˘
 = 
ob
;

2094 i‡(!
no˛ór
)

2096 
	`˛ór_n⁄_°©ics
(
ob
);

2099 
	`ª°‹e_obje˘_‰om_buff
(
ob
, 
theBuff
, 
no˛ór
);

2100 
cuºít_obje˘
 = 
ßve
;

2101 #ifde‡
DEBUG


2102 i‡(
d_Êag
 > 1)

2105 
	`debug_mesßge
("QTZ_SîvîEngöe:Obje˘ /%†ª°‹ed from /%s.\n", 
ob
->
«me
, 
fûe
);

2108 
	`FREE
(
theBuff
);

2110 
	}
}

2112 
	$ª°‹e_v¨übÀ
(
svÆue_t
 *
v¨
, *
°r
)

2114 
rc
;

2116 
rc
 = 
	`ª°‹e_svÆue
(
°r
, 
v¨
);

2117 i‡(
rc
 &
ROB_ERROR
)

2119 *
v¨
 = 
c⁄°0
;

2120 i‡(
rc
 &
ROB_GENERAL_ERROR
)

2123 
	`îr‹
("QTZ_ServerEngine:Wrong general formatÅoÑestore object.\n");

2125 i‡(
rc
 &
ROB_NUMERAL_ERROR
)

2128 
	`îr‹
("QTZ_ServerEngine:Wrong formatÅoÑestore object.\n");

2130 i‡(
rc
 &
ROB_ARRAY_ERROR
)

2133 
	`îr‹
("QTZ_ServerEngine: Wrong formatÅoÑestore object.\n");

2135 i‡(
rc
 &
ROB_MAPPING_ERROR
)

2138 
	`îr‹
("QTZ_ServerEngine: Wrong formatÅoÑestore object.\n");

2140 i‡(
rc
 &
ROB_STRING_ERROR
)

2143 
	`îr‹
("QTZ_ServerEngine:Wrong formatÅoÑestore object.\n");

2146 
	}
}

2148 
	$ãŒ_≈c
(
obje˘_t
 *
ob
, *
°r
)

2150 
	`c›y_™d_push_°rög
(
°r
);

2151 
	`≠∂y
(
APPLY_CATCH_TELL
, 
ob
, 1, 
ORIGIN_DRIVER
);

2152 
	}
}

2154 
	$dóŒoc_obje˘
(
obje˘_t
 *
ob
, *
‰om
)

2157 #ifde‡
DEBUG


2158 i‡(
d_Êag
)

2161 
	`debug_mesßge
("QTZ_SîvîEngöe:‰ì obje˘: /%s.\n", 
ob
->
«me
);

2164 i‡(!(
ob
->
Êags
 &
O_DESTRUCTED
) )

2168 
	`Áèl
("QTZ_SîvîEngöe: \¿FATAL: Obje˘ 0x%x /%†ª‡cou¡ 0, buànŸ de°ru˘ed (‰om %s).\n", 
ob
, ob->
«me
, 
‰om
);

2171 
	`DEBUG_CHECK
(
ob
->
öãø˘ive
, "Can't freeán interactive object.\n");

2176 i‡(
ob
->
sw≠_num
 != - 1)

2178 
	`ªmove_sw≠_fûe
(
ob
);

2181 i‡(
ob
->
¥og
)

2183 
tŸ_Æloc_obje˘_size
 -(
ob
->
¥og
->
num_v¨übÀs_tŸÆ
 - 1Ë*(
svÆue_t
Ë+ (
obje˘_t
);

2184 
	`‰ì_¥og
(
ob
->
¥og
, 1);

2185 
ob
->
¥og
 = 0;

2187 #ifde‡
PRIVS


2188 i‡(
ob
->
¥ivs
)

2190 
	`‰ì_°rög
(
ob
->
¥ivs
);

2193 i‡(
ob
->
«me
)

2195 #ifde‡
DEBUG


2196 i‡(
d_Êag
 > 1)

2199 
	`debug_mesßge
("QTZ_SîvîEngöe:Fªêobje˘ /%s\n", 
ob
->
«me
);

2203 
	`DEBUG_CHECK1
(
	`lookup_obje˘_hash
(
ob
->
«me
) == ob, "QTZ_ServerEngine:That object is free /%s butÇame still inÇameÅable", ob->name);

2204 
	`FREE
(
ob
->
«me
);

2205 
ob
->
«me
 = 0;

2207 
tŸ_Æloc_obje˘
--;

2208 
	`FREE
–(*)
ob
);

2209 
	}
}

2211 
	$‰ì_obje˘
(
obje˘_t
 *
ob
, *
‰om
)

2213 
ob
->
ªf
--;

2215 i‡(
ob
->
ªf
 > 0)

2219 
	`dóŒoc_obje˘
(
ob
, 
‰om
);

2220 
	}
}

2222 
	$ß„_lﬂd_obje˘
(
obje˘_t
 **
obj
, *
fûe
)

2224 i‡(
obj
 =
NULL
)

2229 i‡(*
obj
 =
NULL
 || ( (*obj)->
Êags
 &
O_DESTRUCTED
) )

2231 i‡(*
obj
 !
NULL
)

2233 
	`‰ì_obje˘
(*
obj
, "reload_object");

2234 *
obj
 = 
NULL
;

2237 *
obj
 = 
	`föd_obje˘
(
fûe
);

2238 i‡(*
obj
 !
NULL
)

2240 
	`add_ªf
–(*
obj
), "reload_object");

2243 
	}
}

2251 
obje˘_t
 *
	$gë_em±y_obje˘
(
num_v¨
)

2253 
obje˘_t
 
NULL_obje˘
;

2254 
obje˘_t
 *
ob
;

2255 
size
 = (
obje˘_t
Ë+ (
num_v¨
 - !!num_v¨Ë*(
svÆue_t
);

2256 
i
;

2258 
tŸ_Æloc_obje˘
++;

2259 
tŸ_Æloc_obje˘_size
 +
size
;

2260 
ob
 = (
obje˘_t
*)
	`DXALLOC
(
size
, 
TAG_OBJECT
, "get_empty_object");

2266 *
ob
 = 
NULL_obje˘
;

2267 
ob
->
ªf
 = 1;

2268 
ob
->
sw≠_num
 = - 1;

2269 
i
 = 0; i < 
num_v¨
; i++)

2271 
ob
->
v¨übÀs
[
i
] = 
c⁄°0u
;

2273  
ob
;

2274 
	}
}

2277 
	$ª£t_obje˘
(
obje˘_t
 *
ob
)

2279 
obje˘_t
 *
ßve_comm™d_givî
;

2282 
ob
->
√xt_ª£t
 = 
cuºít_time
 + 
TIME_TO_RESET
 / 2+
	`øndom_numbî
(TIME_TO_RESET / 2);

2284 
ßve_comm™d_givî
 = 
comm™d_givî
;

2285 
comm™d_givî
 = (
obje˘_t
*)0;

2286 i‡(!
	`≠∂y
(
APPLY_RESET
, 
ob
, 0, 
ORIGIN_DRIVER
) )

2289 
ob
->
Êags
 &~
O_WILL_RESET
;

2291 
comm™d_givî
 = 
ßve_comm™d_givî
;

2292 
ob
->
Êags
 |
O_RESET_STATE
;

2293 
	}
}

2295 
	$ˇŒ_¸óã
(
obje˘_t
 *
ob
, 
num_¨g
)

2298 
ob
->
√xt_ª£t
 = 
cuºít_time
 + 
TIME_TO_RESET
 / 2+
	`øndom_numbî
(TIME_TO_RESET / 2);

2300 
	`ˇŒ___INIT
(
ob
);

2302 i‡(
ob
->
Êags
 &
O_DESTRUCTED
)

2304 
	`p›_n_ñems
(
num_¨g
);

2308 
	`≠∂y
(
APPLY_CREATE
, 
ob
, 
num_¨g
, 
ORIGIN_DRIVER
);

2310 
ob
->
Êags
 |
O_RESET_STATE
;

2311 
	}
}

2313 
INLINE
 
	$obje˘_visibÀ
(
obje˘_t
 *
ob
)

2330 
	}
}

2333 
	$£t_obje˘_ty≥
(
obje˘_t
 *
obj
, 
iTy≥
)

2335  
obj
->
iTy≥
 = iType;

2337 
	}
}

2339 
	$gë_obje˘_ty≥
(
obje˘_t
 *
obj
)

2341  
obj
->
iTy≥
;

2342 
	}
}

2348 
svÆue_t
 *
	$ˇŒ_s¸ùt_func
(*
obje˘Name
, *
funcName
, *
∑ømFmt
, ...)

2350 
va_li°
 
¨gs
;

2351 
¨gc
 = 0;

2352 
obje˘_t
 *
obje˘
 = 
NULL
;

2353 *
cTmpArg
;

2354 
iTmpArg
;

2355 
buf„r_t
 *
bTmpArg
;

2356 
svÆue_t
 *
mTmpArg
;

2357 
svÆue_t
 *
ªt
;

2359 
obje˘
 = 
	`föd_obje˘2
(
obje˘Name
);

2361 i‡(
obje˘
 =
NULL
)

2363 
obje˘
 = 
	`lﬂd_obje˘
(
obje˘Name
, 
NULL
);

2366 i‡(
obje˘
 =
NULL
)

2368  &
c⁄°0u
;

2373 
	`V_START
(
¨gs
, 
∑ømFmt
);

2376 *
∑ømFmt
)

2378 *
∑ømFmt
)

2381 
iTmpArg
 = 
	`va_¨g
(
¨gs
, );

2382 
	`push_numbî
(
iTmpArg
);

2383 
¨gc
++;

2386 
cTmpArg
 = 
	`va_¨g
(
¨gs
, *);

2387 
	`c›y_™d_push_°rög
(
cTmpArg
);

2388 
¨gc
++;

2391 
bTmpArg
 = 
	`va_¨g
(
¨gs
, 
buf„r_t
*);

2392 
	`push_buf„r
(
bTmpArg
);

2393 
¨gc
++;

2396 
mTmpArg
 = 
	`va_¨g
(
¨gs
, 
svÆue_t
 *);

2397 
	`push_svÆue
(
mTmpArg
);

2398 
¨gc
++;

2402 
obje˘_t
* 
oTmpArg
 = 
	`va_¨g
(
¨gs
, object_t *);

2403 
	`push_obje˘
(
oTmpArg
);

2404 
¨gc
++;

2408 
	`debug_mesßge
("Error Script Function Param\n");

2412 
∑ømFmt
++;

2415 
ªt
 = 
	`ß„_≠∂y
(
funcName
, 
obje˘
, 
¨gc
, 
ORIGIN_DRIVER
);

2417 
	`va_íd
(
¨gs
);

2419  
ªt
;

2420 
	}
}

2422 
svÆue_t
 *
	$ˇŒ_obje˘_func
(
obje˘_t
 *
obje˘
, *
funcName
, *
∑ømFmt
, ...)

2424 
va_li°
 
¨gs
;

2425 
¨gc
 = 0;

2426 *
cTmpArg
;

2427 
iTmpArg
;

2428 
buf„r_t
 *
bTmpArg
;

2429 
svÆue_t
 *
mTmpArg
;

2430 
svÆue_t
 *
ªt
;

2432 i‡(
obje˘
 =
NULL
)

2434  &
c⁄°0u
;

2439 
	`V_START
(
¨gs
, 
∑ømFmt
);

2442 *
∑ømFmt
)

2444 *
∑ømFmt
)

2447 
iTmpArg
 = 
	`va_¨g
(
¨gs
, );

2448 
	`push_numbî
(
iTmpArg
);

2449 
¨gc
++;

2452 
cTmpArg
 = 
	`va_¨g
(
¨gs
, *);

2453 
	`c›y_™d_push_°rög
(
cTmpArg
);

2454 
¨gc
++;

2457 
bTmpArg
 = 
	`va_¨g
(
¨gs
, 
buf„r_t
*);

2458 
	`push_buf„r
(
bTmpArg
);

2459 
¨gc
++;

2462 
mTmpArg
 = 
	`va_¨g
(
¨gs
, 
svÆue_t
 *);

2463 
	`push_svÆue
(
mTmpArg
);

2464 
¨gc
++;

2468 
obje˘_t
* 
oTmpArg
 = 
	`va_¨g
(
¨gs
, object_t *);

2469 
	`push_obje˘
(
oTmpArg
);

2470 
¨gc
++;

2474 
	`debug_mesßge
("Error Script Function Param\n");

2478 
∑ømFmt
++;

2481 
ªt
 = 
	`ß„_≠∂y
(
funcName
, 
obje˘
, 
¨gc
, 
ORIGIN_DRIVER
);

2483 
	`va_íd
(
¨gs
);

2485  
ªt
;

2486 
	}
}

2488 
svÆue_t
 *
	$föd_obje˘_v¨übÀ
(
obje˘_t
 *
obje˘
, *
«me
)

2490 
ty≥
;

2491 
ödex
 = 
	`föd_globÆ_v¨übÀ
(
obje˘
->
¥og
, 
«me
, &
ty≥
);

2492  
ödex
 =-1 ? &
c⁄°0u
 : &
obje˘
->
v¨übÀs
[index];

2493 
	}
}

	@src/op_spec.c

6 
›î©‹
 
	gp›_vÆue
, 
	gpush
, 
	gefun0
, 
	gefun1
, 
	gefun2
, 
	gefun3
, 
	gefunv
;

8 
›î©‹
 
	gnumbî
, 
	gªÆ
, 
	gbyã
, 
	gnbyã
, 
	g°rög
, 
	gsh‹t_°rög
, 
	gc⁄°0
, 
	gc⁄°1
;

10 
›î©‹
 
	gaggªg©e
, 
	gaggªg©e_assoc
;

11 #ifde‡
DEBUG


12 
›î©‹
 
	gbªak_poöt
;

18 
›î©‹
 
	gbønch_whí_zîo
, 
	gbønch_whí_n⁄_zîo
, 
	gbønch
;

19 
›î©‹
 
	gbbønch_whí_zîo
, 
	gbbønch_whí_n⁄_zîo
, 
	gbbønch
;

21 
›î©‹
 
	gbønch_√
, 
	gbønch_ge
, 
	gbønch_À
, 
	gbønch_eq
, 
	gbbønch_…
;

23 
›î©‹
 
	gf‹óch
, 
	g√xt_f‹óch
, 
	gexô_f‹óch
;

24 
›î©‹
 
	glo›_c⁄d_loˇl
, 
	glo›_c⁄d_numbî
;

25 
›î©‹
 
	glo›_ö¸
;

26 
›î©‹
 
	gwhûe_dec
;

28 
›î©‹
 
	gl‹
, 
	gœnd
;

30 
	gˇtch
 , 
	gíd_ˇtch
;

31 
›î©‹
 
	gtime_ex¥essi⁄
, 
	gíd_time_ex¥essi⁄
;

33 
›î©‹
 ;

35 
›î©‹
 
	gˇŒ_fun˘i⁄_by_addªss
, 
	gˇŒ_öhîôed
,  , 
	gªtu∫_zîo
;

38 
›î©‹
 
	geq
, 
	g√
, 
	gÀ
, 
	g…
, 
	gge
, 
	ggt
;

40 
›î©‹
 
	göc
, 
	gdec
, 
	g¥e_öc
, 
	gpo°_öc
, 
	g¥e_dec
, 
	gpo°_dec
;

42 
›î©‹
 
	gå™s„r_loˇl
;

45 
›î©‹
 
	gloˇl
, 
	gloˇl_lvÆue
;

46 
›î©‹
 
	gglobÆ
, 
	gglobÆ_lvÆue
;

47 
›î©‹
 
	gmembî
, 
	gmembî_lvÆue
;

48 
›î©‹
 
	gödex
, 
	gödex_lvÆue
;

49 
›î©‹
 
	grödex
, 
	grödex_lvÆue
;

50 
›î©‹
 
	g¬_ønge
, 
	g¬_ønge_lvÆue
, 
	g∫_ønge
, 
	g∫_ønge_lvÆue
;

51 
›î©‹
 
	gº_ønge
, 
	gº_ønge_lvÆue
, 
	gƒ_ønge
, 
	gƒ_ønge_lvÆue
;

52 
›î©‹
 
	g√_ønge
, 
	gª_ønge
;

55 
›î©‹
 
	gadd_eq
, 
	gsub_eq
, 
	g™d_eq
, 
	g‹_eq
, 
	gx‹_eq
, 
	glsh_eq
, 
	grsh_eq
, 
	gmu…_eq
;

56 
›î©‹
 
	gdiv_eq
, 
	gmod_eq
, 
	gassign
;

58 
›î©‹
 
	gvoid_add_eq
, 
	gvoid_assign
, 
	gvoid_assign_loˇl
;

60 
›î©‹
 
	gadd
, 
	gsubåa˘
, 
	gmu…ùly
, 
	gdivide
, 
	gmod
, 
	g™d
, 
	g‹
, 
	gx‹
, 
	glsh
, 
	grsh
;

61 
›î©‹
 
	gnŸ
, 
	g√g©e
, 
	gcom∂
;

63 
›î©‹
 
	gfun˘i⁄_c⁄°ru˘‹
;

64 
›î©‹
 
	gsimul_efun
;

66 
›î©‹
 
	gssˇnf
;

67 
›î©‹
 
	g∑r£_comm™d
;

69 
›î©‹
 
	g√w_˛ass
, 
	g√w_em±y_˛ass
;

70 
›î©‹
 
	gex∑nd_v¨¨gs
;

	@src/otable.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"ŸabÀ.h
"

4 
	~"comm.h
"

5 
	~"hash.h
"

6 
	~"simul_efun.h
"

16 
	gŸabÀ_size
;

17 
	gŸabÀ_size_möus_⁄e
;

19 
obje˘_t
 *
föd_obj_n
(*);

24 
	#ObjHash
(
s
Ë
	`whash°r
(s, 40Ë& 
ŸabÀ_size_möus_⁄e


	)

30 
obje˘_t
 **
	gobj_èbÀ
 = 0;

32 
	$öô_ŸabÀ
()

34 
x
, 
y
;

37 
y
 = 
OTABLE_SIZE
;

38 
ŸabÀ_size
 = 1; oèbÀ_sizê< 
y
; otable_size *= 2)

40 
ŸabÀ_size_möus_⁄e
 = 
ŸabÀ_size
 - 1;

41 
obj_èbÀ
 = 
	`CALLOCATE
(
ŸabÀ_size
, 
obje˘_t
 *, 
TAG_OBJ_TBL
, "init_otable");

43 
x
 = 0; x < 
ŸabÀ_size
; x++)

45 
obj_èbÀ
[
x
] = 0;

47 
	}
}

52 
	gobj_£¨ches
 = 0, 
	gobj_¥obes
 = 0, 
	gobjs_found
 = 0;

55 
	gh
;

58 
obje˘_t
 *
	$föd_obj_n
(*
s
)

60 
obje˘_t
 *
cuº
, *
¥ev
;

62 
h
 = 
	`ObjHash
(
s
);

63 
cuº
 = 
obj_èbÀ
[
h
];

64 
¥ev
 = 0;

66 
obj_£¨ches
++;

69 
cuº
)

71 
obj_¥obes
++;

72 i‡(!
	`°rcmp
(
cuº
->
«me
, 
s
) )

75 i‡(
¥ev
)

78 
¥ev
->
√xt_hash
 = 
cuº
->next_hash;

79 
cuº
->
√xt_hash
 = 
obj_èbÀ
[
h
];

80 
obj_èbÀ
[
h
] = 
cuº
;

82 
objs_found
++;

84  (
cuº
);

86 
¥ev
 = 
cuº
;

87 
cuº
 = cuº->
√xt_hash
;

91 
	}
}

99 
	gobjs_ö_èbÀ
 = 0;

101 
	$íãr_obje˘_hash
(
obje˘_t
 *
ob
)

103 
obje˘_t
 *
s
;

105 
s
 = 
	`föd_obj_n
(
ob
->
«me
);

107 #ifde‡
DEBUG


109 i‡(
s
 !
ma°î_ob
 && s !
simul_efun_ob
)

111 
	`DEBUG_CHECK1
(
s
 && s !
ob
, "OS debug: Du∂iˇã obje˘ \"/%s\" i¿obje˘ hashÅabÀ", ob->
«me
);

115 
ob
->
√xt_hash
 = 
obj_èbÀ
[
h
];

116 
obj_èbÀ
[
h
] = 
ob
;

117 
objs_ö_èbÀ
++;

119 
	}
}

124 
	$íãr_obje˘_hash_©_íd
(
obje˘_t
 *
ob
)

126 
obje˘_t
 *
s
;

127 
obje˘_t
 **
›
;

129 
s
 = 
	`föd_obj_n
(
ob
->
«me
);

131 
ob
->
√xt_hash
 = 0;

133 
›
 = &
obj_èbÀ
[
h
];

134 *
›
)

136 
›
 = &–(*›)->
√xt_hash
);

138 *
›
 = 
ob
;

139 
objs_ö_èbÀ
++;

141 
	}
}

147 
	$ªmove_obje˘_hash
(
obje˘_t
 *
ob
)

149 
obje˘_t
 *
s
;

151 
s
 = 
	`föd_obj_n
(
ob
->
«me
);

153 
	`DEBUG_CHECK1
(
s
 !
ob
, "OS debug: Removêobje˘ \"/%s\": foundá dif„ª¡ obje˘!", ob->
«me
);

155 
obj_èbÀ
[
h
] = 
ob
->
√xt_hash
;

156 
ob
->
√xt_hash
 = 0;

157 
objs_ö_èbÀ
--;

159 
	}
}

166 
	gu£r_obj_lookups
 = 0, 
	gu£r_obj_found
 = 0;

168 
obje˘_t
 *
	$lookup_obje˘_hash
(*
s
)

170 
obje˘_t
 *
ob
 = 
	`föd_obj_n
(
s
);

172 
u£r_obj_lookups
++;

173 i‡(
ob
)

175 
u£r_obj_found
++;

177  (
ob
);

178 
	}
}

184 
	gsbuf
[1024];

186 
	$show_ŸabÀ_°©us
(
outbuf„r_t
 *
out
, 
vîbo£
)

188 
°¨ts
;

190 i‡(
vîbo£
 == 1)

192 
	`outbuf_add
(
out
, "MudOS status: ObjectÇame hashÅable status:\n");

193 
	`outbuf_add
(
out
, "------------------------------\n");

194 
	`•rötf
(
sbuf
, "%10.2f", 
objs_ö_èbÀ
 / ()
OTABLE_SIZE
);

195 
	`outbuf_addv
(
out
, "Avîagêhash chaöÜígth: %s\n", 
sbuf
);

196 
	`•rötf
(
sbuf
, "%10.2f", ()
obj_¥obes
 / 
obj_£¨ches
);

197 
	`outbuf_addv
(
out
, "Avîagê£¨chÜígth: %s\n", 
sbuf
);

198 
	`outbuf_addv
(
out
, "I¡î«»lookup†(suc˚eded): %lu (%lu)\n", 
obj_£¨ches
 - 
u£r_obj_lookups
, 
objs_found
 - 
u£r_obj_found
);

199 
	`outbuf_addv
(
out
, "Exã∫ÆÜookup†(suc˚eded): %lu (%lu)\n", 
u£r_obj_lookups
, 
u£r_obj_found
);

201 
°¨ts
 = ()
OTABLE_SIZE
 *(
obje˘_t
*Ë+ 
objs_ö_èbÀ
 *(object_t);

203 i‡(!
vîbo£
)

205 
	`outbuf_addv
(
out
, "MudOS Eº‹: ObjÅabÀ ovîhód:\t\t%8d %8d\n", 
OTABLE_SIZE
 *(
obje˘_t
*), 
°¨ts
);

207  
°¨ts
;

208 
	}
}

	@src/port.c

1 
	~"°d.h
"

2 
	~"p‹t.h
"

3 
	~"löt.h
"

4 
	~"fûe_ö˛.h
"

6 #i‡
deföed
(
WIN32
Ë|| deföed(
LATTICE
)

7 
	$dos_°yÀ_lök
(*
x
, *
y
)

9 
lök_cmd
[100];

10 
	`•rötf
(
lök_cmd
, "c›y %†%s", 
x
, 
y
);

11  
	`sy°em
(
lök_cmd
);

12 
	}
}

16 #ifde‡
GET_PROCESS_STATS


17 
	~<sys/¥oc°©s.h
>

19 #ifde‡
RUSAGE


20 
	~<sys/ªsour˚.h
>

23 #ifde‡
sun


24 
time_t
 
time
(time_t*);

31 
	$øndom_numbî
(
n
)

33 #ifde‡
RAND


34 
ˇŒed
 = 0;

35 
rs
[4];

36 
r
;

38 i‡(!
ˇŒed
)

40 
time_t
 
tim
;

42 
	`time
(&
tim
);

43 
	`§™d
(
tim
);

44 
ˇŒed
 = 1;

47 
rs
[0] = 
	`ønd
() % 256;

48 
rs
[1] = 
	`ønd
() % 256;

49 
rs
[2] = 
	`ønd
() % 256;

50 
rs
[3] = 
	`ønd
() % 256;

51 
r
 = *(*)
rs
;

52 i‡(
r
 < 0)

54 
r
 = -Ñ;

56  
r
 % 
n
;

59 #ifde‡
RANDOM


60  
	`øndom
(Ë% 
n
;

62 #ifde‡
DRAND48


63  (Ë(
	`dønd48
(Ë*
n
);

65  
cuºít_time
 % 
n
;

69 
	}
}

107 
	$gë_cuºít_time
()

109  ()
	`time
(
NULL
);

110 
	}
}

116 *
	$time_°rög
(c⁄° 
time_t
 *
t
)

118  
	`˘ime
(
t
);

119 
	}
}

125 
	$öô_u£c_˛ock
()

127 #ifde‡
_SEQUENT_


128 
	`us˛k_öô
();

130 
	}
}

136 
	$gë_u£c_˛ock
(*
£c
, *
u£c
)

138 #ifde‡
HAS_GETTIMEOFDAY


139 
timevÆ
 
tv
;

141 
	`gëtimeofday
(&
tv
, 
NULL
);

142 *
£c
 = 
tv
.
tv_£c
;

143 *
u£c
 = 
tv
.
tv_u£c
;

145 #ifde‡
_SEQUENT_


146 *
£c
 = 0;

147 *
u£c
 = 
	`GETUSCLK
();

149 #ifde‡
LATTICE


150 
˛ock
[2];

152 i‡(
	`timî
(
˛ock
) )

154 *
£c
 = 
	`time
(0);

155 *
u£c
 = 0;

159 *
£c
 = 
˛ock
[0];

160 *
u£c
 = 
˛ock
[1];

163 *
£c
 = 
	`time
(0);

164 *
u£c
 = 0;

168 
	}
}

174 #ifde‡
USE_POSIX_SIGNALS


175 
	$p‹t_sigblock
(
sig£t_t
 
mask
)

177 
sig£t_t
 
omask
;

179 
	`sig¥ocmask
(
SIG_BLOCK
, &
mask
, &
omask
);

180  (
omask
);

181 
	}
}

183 
	$p‹t_sigmask
(
sig
)

185 
sig£t_t
 
£t
;

187 
	`sigem±y£t
(&
£t
);

188 
	`sigadd£t
(&
£t
, 
sig
);

189  (
£t
);

190 
	}
}

192 (*
	$p‹t_sig«l
(
sig
, 
func
) ) ()sig;

193 (*
func
) ();

195 
siga˘i⁄
 
a˘
, 
ﬂ˘
;

197 
a˘
.
ß_h™dÀr
 = 
func
;

198 
a˘
.
ß_mask
 = 0;

199 
a˘
.
ß_Êags
 = 0;

200 i‡(
	`siga˘i⁄
(
sig
, &
a˘
, &
ﬂ˘
) == - 1)

204  (
ﬂ˘
.
ß_h™dÀr
);

205 
	}
}

207 
	$p‹t_sig£tmask
(
sig£t_t
 
mask
)

209 
sig£t_t
 
omask
;

211 
	`sig¥ocmask
(
SIG_SETMASK
, &
mask
, &
omask
);

212  (
omask
);

213 
	}
}

216 
	$gë_˝u_times
(*
£cs
, *
u£cs
)

218 #ifde‡
RUSAGE


219 
rußge
 
rus
;

221 #i‡
	`deföed
(
TIMES
Ë&& !deföed(
RUSAGE
)

222 
tms
 
t
;

223 
tŸÆ
;

225 #ifde‡
GET_PROCESS_STATS


226 
¥o˚ss_°©s
 
ps
;

229 #ifde‡
RUSAGE


230 i‡(
	`gërußge
(
RUSAGE_SELF
, &
rus
) < 0)

233 } *
£cs
 = 
rus
.
ru_utime
.
tv_£c
 +Ñus.
ru_°ime
.tv_sec;

234 *
u£cs
 = 
rus
.
ru_utime
.
tv_u£c
 +Ñus.
ru_°ime
.tv_usec;

235 i‡(*
u£cs
 > 1000000)

237 ++(*
£cs
);

238 *
u£cs
 -= 1000000;

243 #ifde‡
GET_PROCESS_STATS


244 i‡(
	`gë_¥o˚ss_°©s
(
NULL
, 
PS_SELF
, &
ps
, NULL) == - 1)

248 *
£cs
 = 
ps
.
ps_utime
.
tv_£c
 +Ös.
ps_°ime
.tv_sec;

249 *
u£cs
 = 
ps
.
ps_utime
.
tv_u£c
 +Ös.
ps_°ime
.tv_usec;

253 #ifde‡
TIMES


254 
	`times
(&
t
);

255 *
£cs
 = (
tŸÆ
 = 
t
.
tms_utime
 +Å.
tms_°ime
Ë/ 
CLK_TCK
;

256 *
u£cs
 = ( (
tŸÆ
 - (*
£cs
 * 
CLK_TCK
) ) *1000000) / CLK_TCK;

260 #ifde‡
LATTICE


261 
˛ock
[2];

263 i‡(
	`timî
(
˛ock
) )

268 *
£cs
 = 
˛ock
[0];

269 *
u£cs
 = 
˛ock
[1];

277 
	}
}

280 *
	$gë_cuºít_dú
(*
buf
, 
limô
)

282 #ifde‡
HAS_GETCWD


283  
	`gëcwd
(
buf
, 
limô
);

285  
	`gëwd
(
buf
);

287 
	}
}

293 #i‚de‡
HAS_STRERROR


297 *
sys_îæi°
[];

298 
sys_√º
;

300 *
	$p‹t_°ªº‹
(
which
)

302 i‡–(
which
 < 0Ë|| (which >
sys_√º
) )

308  
sys_îæi°
[
which
];

310 
	}
}

313 #ifde‡
MEMMOVE_MISSING


315 
INLINE
 *
	$memmove
(*
b
, *
a
, 
s
)

317 *
r
 = 
b
;

319 i‡(
b
 < 
a
)

321 
s
--)

323 *(
b
++Ë*(
a
++);

326 i‡(
b
 > 
a
)

328 
b
 +
s
;

329 
a
 +
s
;

330 
s
--)

332 *(--
b
Ë*(--
a
);

335  
r
;

336 
	}
}

340 #ifde‡
WIN32


341 *
	$¸y±
(*
°r
, *
ß…
)

343 
buf
[50];

345 
	`°∫˝y
(
buf
, 
°r
, 50);

346 
buf
[50] = 0;

347  
buf
;

348 
	}
}

352 #ifde‡
WIN32


353 *
	$WöSåEº‹
(
îr
)

355 
buf
[30];

356 i‡(
î∫o
 < 10000)

358  
	`°ªº‹
(
îr
);

360 
	`•rötf
(
buf
, "îr‹ #%d", 
îr
);

361  
buf
;

362 
	}
}

	@src/preprocess.c

3 
c⁄d_gë_exp
();

4 
h™dÀ_c⁄d
();

6 #i‚de‡
LEXER


7 #unde‡
DXALLOC


8 
	#DXALLOC
(
x
, 
y
, 
z
Ë
	`mÆloc
(x)

	)

9 #unde‡
FREE


10 
	#FREE
(
x
Ë
	`‰ì
(x)

	)

11 #unde‡
ALLOCATE


12 
	#ALLOCATE
(
x
, 
y
, 
z
Ë(x *)
	`mÆloc
((x))

	)

13 #unde‡
DREALLOC


14 
	#DREALLOC
(
w
, 
x
, 
y
, 
z
Ë
	`ªÆloc
(w, x)

	)

17 
de‚_t
 *
	gde‚s
[
DEFHASH
];

18 
if°©e_t
 *
	gi·›
 = 0;

20 
de‚_t
 *
	$lookup_deföôi⁄
(*
s
)

22 
de‚_t
 *
p
;

23 
h
;

25 
h
 = 
	`defhash
(
s
);

26 
p
 = 
de‚s
[
h
];Ö;Ö =Ö->
√xt
)

27 i‡(
	`°rcmp
(
s
, 
p
->
«me
) == 0)

29  
p
;

32 
	}
}

38 
de‚_t
 *
	$lookup_deföe
(*
s
)

40 
de‚_t
 *
p
 = 
	`lookup_deföôi⁄
(
s
);

42 i‡(
p
 && (p->
Êags
 &
DEF_IS_UNDEFINED
) )

48  
p
;

50 
	}
}

56 
	$add_deföe
(*
«me
, 
«rgs
, *
exps
)

58 
de‚_t
 *
p
 = 
	`lookup_deföôi⁄
(
«me
);

59 
h
;

61 i‡(
p
)

63 i‡(
p
->
Êags
 &
DEF_IS_UNDEFINED
)

65 
p
->
exps
 = (*)
	`DREALLOC
’->exps, 
	`°æí
”xpsË+ 1, 
TAG_COMPILER
, "add_define:Ñedef");

66 
	`°r˝y
(
p
->
exps
,Éxps);

67 
p
->
Êags
 = 0;

68 
p
->
«rgs
 =Çargs;

72 i‡(
p
->
Êags
 &
DEF_IS_PREDEF
)

74 
	`yyîr‹
("OSÉrror:IllegalÅoÑedefineÖredefined value.");

77 i‡(
«rgs
 !
p
->«rg†|| 
	`°rcmp
(
exps
,Ö->exps) )

79 
buf
[200+
NSIZE
];

81 
	`•rötf
(
buf
, "OS:Ñedeföôi⁄ o‡#deföê%s\n", 
«me
);

82 
	`yyw¨n
(
buf
);

84 
p
->
exps
 = (*)
	`DREALLOC
’->exps, 
	`°æí
”xpsË+ 1, 
TAG_COMPILER
, "add_define:Ñedef");

85 
	`°r˝y
(
p
->
exps
,Éxps);

86 
p
->
«rgs
 =Çargs;

88 #i‚de‡
LEXER


89 
p
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

95 
p
 = 
	`ALLOCATE
(
de‚_t
, 
TAG_COMPILER
, "add_define: def");

96 
p
->
«me
 = (*)
	`DXALLOC
(
	`°æí
“ameË+ 1, 
TAG_COMPILER
, "add_define: defÇame");

97 
	`°r˝y
(
p
->
«me
,Çame);

98 
p
->
exps
 = (*)
	`DXALLOC
(
	`°æí
”xpsË+ 1, 
TAG_COMPILER
, "add_define: defÉxps");

99 
	`°r˝y
(
p
->
exps
,Éxps);

100 
p
->
Êags
 = 0;

101 
p
->
«rgs
 =Çargs;

102 
h
 = 
	`defhash
(
«me
);

103 
p
->
√xt
 = 
de‚s
[
h
];

104 
de‚s
[
h
] = 
p
;

106 
	}
}

112 #ifde‡
LEXER


113 
	$h™dÀ_ñif
(*
•
)

115 
	$h™dÀ_ñif
()

118 i‡(
i·›
)

120 i‡(
i·›
->
°©e
 =
EXPECT_ELSE
)

123 
c⁄d
;

124 
if°©e_t
 *
p
 = 
i·›
;

127 
i·›
 = 
p
->
√xt
;

128 
	`FREE
–(*)
p
);

130 #ifde‡
LEXER


131 *--
ouç
 = '\0';

132 
	`add_öput
(
•
);

134 
c⁄d
 = 
	`c⁄d_gë_exp
(0);

135 #ifde‡
LEXER


136 i‡(*
ouç
++)

138 
	`yyîr‹
("OSÉrror : ConditionÅoo complex in #elif");

139 *
ouç
++)

142 i‡(*
ouç
 != '\n')

144 
	`yyîr‹
("OSÉrror: ConditionÅoo complex in #elif");

149 
	`h™dÀ_c⁄d
(
c⁄d
);

159 
	`skù_to
("endif", (*)0);

164 
	`yyîr‹p
("OSÉrror: Unexpected %celif");

166 
	}
}

168 
	$h™dÀ_ñ£
()

170 i‡(
i·›
)

172 i‡(
i·›
->
°©e
 =
EXPECT_ELSE
)

174 
i·›
->
°©e
 = 
EXPECT_ENDIF
;

178 
	`skù_to
("endif", (*)0);

183 
	`yyîr‹p
("OSÉrror: Unexpected %cendif");

185 
	}
}

187 
	$h™dÀ_ídif
()

189 i‡(
i·›
 && (i·›->
°©e
 =
EXPECT_ENDIF
 || i·›->°©ê=
EXPECT_ELSE
) )

191 
if°©e_t
 *
p
 = 
i·›
;

193 
i·›
 = 
p
->
√xt
;

194 
	`FREE
–(*)
p
);

198 
	`yyîr‹p
("OSÉrror: Unexpected %cendif");

200 
	}
}

202 
	#BNOT
 1

	)

203 
	#LNOT
 2

	)

204 
	#UMINUS
 3

	)

205 
	#UPLUS
 4

	)

207 
	#MULT
 1

	)

208 
	#DIV
 2

	)

209 
	#MOD
 3

	)

210 
	#BPLUS
 4

	)

211 
	#BMINUS
 5

	)

212 
	#LSHIFT
 6

	)

213 
	#RSHIFT
 7

	)

214 
	#LESS
 8

	)

215 
	#LEQ
 9

	)

216 
	#GREAT
 10

	)

217 
	#GEQ
 11

	)

218 
	#EQ
 12

	)

219 
	#NEQ
 13

	)

220 
	#BAND
 14

	)

221 
	#XOR
 15

	)

222 
	#BOR
 16

	)

223 
	#LAND
 17

	)

224 
	#LOR
 18

	)

225 
	#QMARK
 19

	)

227 
	g_›èb
[] =

232 
	g›èb2
[] =

234 
BNOT
, 0, 0, 
LNOT
, '=', 
NEQ
, 7, 0, 0, 
UMINUS
, 0, 
BMINUS
, 10, 
UPLUS
, 0, 
BPLUS
, 10, 0, 0, 
MULT
, 11, 0, 0, 
DIV
, 11, 0, 0, 
MOD
, 11, 0, '<', 
LSHIFT
, 9, '=', 
LEQ
, 8, 0, 
LESS
, 8, 0, '>', 
RSHIFT
, 9, '=',

235 
GEQ
, 8, 0, 
GREAT
, 8, 0, '=', 
EQ
, 7, 0, 0, 0, '&', 
LAND
, 3, 0, 
BAND
, 6, 0, '|', 
LOR
, 2, 0, 
BOR
, 4, 0, 0, 
XOR
, 5, 0, 0, 
QMARK
, 1

238 
	#›èb1
 (
_›èb
-' ')

	)

240 
	$c⁄d_gë_exp
(
¥i‹ôy
)

242 
c
;

243 
vÆue
, 
vÆue2
, 
x
;

245 #ifde‡
LEXER


248 
c
 = 
	`exgëc
();

250 
	`is_w•a˚
(
c
) );

251 i‡(
c
 == '(')

254 i‡–(
c
 = 
	`exgëc
() ) == '(')

257 
vÆue
 = 
	`c⁄d_gë_exp
(0);

258 #ifde‡
LEXER


261 
c
 = 
	`exgëc
();

263 
	`is_w•a˚
(
c
) );

264 i‡(
c
 != ')')

266 
	`yyîr‹
("OSÉrror: bracketÇotÖaired in #if");

267 i‡(!
c
)

269 *--
ouç
 = '\0';

273 i‡–(
c
 = 
	`exgëc
() ) != ')')

275 
	`yyîr‹p
("OSÉrror: bracketÇotÖaired in %cif");

279 i‡(
	`i•un˘
(
c
) )

281 i‡(!(
x
 = 
›èb1
[
c
]) )

283 
	`yyîr‹p
("OSÉrror: illegal character in %cif");

286 
vÆue
 = 
	`c⁄d_gë_exp
(12);

287 
›èb2
[
x
 - 1])

289 
BNOT
:

290 
vÆue
 = ~value;

292 
LNOT
:

293 
vÆue
 = !value;

295 
UMINUS
:

296 
vÆue
 = - value;

298 
UPLUS
:

299 
vÆue
 = value;

302 
	`yyîr‹p
("OSÉrror: illegal unary operator in %cif");

307 
ba£
;

309 i‡(!
	`isdigô
(
c
) )

311 #ifde‡
LEXER


312 i‡(!
c
)

315 i‡(
c
 == '\n')

318 
	`yyîr‹p
("OSÉrror:missingÉxpression in %cif");

322 
	`yyîr‹p
("OSÉrror: illegal character in %cif");

326 
vÆue
 = 0;

327 i‡(
c
 != '0')

329 
ba£
 = 10;

333 
c
 = *
ouç
++;

334 i‡(
c
 == 'x' || c == 'X')

336 
ba£
 = 16;

337 
c
 = *
ouç
++;

341 
ba£
 = 8;

346 i‡(
	`isdigô
(
c
) )

348 
x
 = - '0';

350 i‡(
	`isuµî
(
c
) )

352 
x
 = - 'A' + 10;

354 i‡(
	`i¶owî
(
c
) )

356 
x
 = - 'a' + 10;

362 
x
 +
c
;

363 i‡(
x
 > 
ba£
)

367 
vÆue
 = vÆuê* 
ba£
 + 
x
;

368 
c
 = *
ouç
++;

370 
ouç
--;

374 #ifde‡
LEXER


377 
c
 = 
	`exgëc
();

379 
	`is_w•a˚
(
c
) );

380 i‡(!
	`i•un˘
(
c
) )

385 i‡(!
	`i•un˘
(
c
 = 
	`exgëc
() ) )

390 i‡(!(
x
 = 
›èb1
[
c
]) )

394 
vÆue2
 = *
ouç
++;

395 ;; 
x
 += 3)

397 i‡(!
›èb2
[
x
])

399 
ouç
--;

400 i‡(!
›èb2
[
x
 + 1])

402 
	`yyîr‹p
("OSÉrror: illegal operator use in %cif");

407 i‡(
vÆue2
 =
›èb2
[
x
])

412 i‡(
¥i‹ôy
 >
›èb2
[
x
 + 2])

414 i‡(
›èb2
[
x
])

416 *--
ouç
 = 
vÆue2
;

420 
vÆue2
 = 
	`c⁄d_gë_exp
(
›èb2
[
x
 + 2]);

421 
›èb2
[
x
 + 1])

423 
MULT
:

424 
vÆue
 *
vÆue2
;

426 
DIV
:

427 i‡(
vÆue2
)

429 
vÆue
 /
vÆue2
;

433 
	`yyîr‹p
("OSÉrror: division by 0 in %cif");

436 
MOD
:

437 i‡(
vÆue2
)

439 
vÆue
 %
vÆue2
;

443 
	`yyîr‹p
("OSÉrror: modulo by 0 in %cif");

446 
BPLUS
:

447 
vÆue
 +
vÆue2
;

449 
BMINUS
:

450 
vÆue
 -
vÆue2
;

452 
LSHIFT
:

453 
vÆue
 <<
vÆue2
;

455 
RSHIFT
:

456 
vÆue
 >>
vÆue2
;

458 
LESS
:

459 
vÆue
 = vÆuê< 
vÆue2
;

461 
LEQ
:

462 
vÆue
 = vÆuê<
vÆue2
;

464 
GREAT
:

465 
vÆue
 = vÆuê> 
vÆue2
;

467 
GEQ
:

468 
vÆue
 = vÆuê>
vÆue2
;

470 
EQ
:

471 
vÆue
 = vÆuê=
vÆue2
;

473 
NEQ
:

474 
vÆue
 = vÆuê!
vÆue2
;

476 
BAND
:

477 
vÆue
 &
vÆue2
;

479 
XOR
:

480 
vÆue
 ^
vÆue2
;

482 
BOR
:

483 
vÆue
 |
vÆue2
;

485 
LAND
:

486 
vÆue
 = vÆuê&& 
vÆue2
;

488 
LOR
:

489 
vÆue
 = vÆuê|| 
vÆue2
;

491 
QMARK
:

492 #ifde‡
LEXER


495 
c
 = 
	`exgëc
();

497 
	`is•a˚
(
c
) );

498 i‡(
c
 != ':')

500 
	`yyîr‹
("'?' without ':' in #if");

501 
ouç
--;

505 i‡–(
c
 = 
	`exgëc
() ) != ':')

507 
	`yyîr‹p
("OSÉrror: '?' without ':' in %cif");

510 i‡(
vÆue
)

512 
	`c⁄d_gë_exp
(1);

513 
vÆue
 = 
vÆue2
;

517 
vÆue
 = 
	`c⁄d_gë_exp
(1);

522 
ouç
--;

523  
vÆue
;

524 
	}
}

526 
	$h™dÀ_c⁄d
(
c
)

528 
if°©e_t
 *
p
;

530 i‡(!
c
)

532 
	`skù_to
("else", "endif");

534 
p
 = 
	`ALLOCATE
(
if°©e_t
, 
TAG_COMPILER
, "handle_cond");

535 
p
->
√xt
 = 
i·›
;

536 
i·›
 = 
p
;

537 
p
->
°©e
 = 
c
 ? 
EXPECT_ENDIF
 : 
EXPECT_ELSE
;

538 
	}
}

	@src/program.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"¥ogøm.h
"

4 
	~"sw≠.h
"

6 
	gtŸÆ_num_¥og_blocks
, 
	gtŸÆ_¥og_block_size
;

8 
	$ª„ªn˚_¥og
(
¥ogøm_t
 *
¥ogp
, *
‰om
)

10 
¥ogp
->
ªf
++;

11 #ifde‡
DEBUG


12 i‡(
d_Êag
)

14 
	`debug_mesßge
("OS debug:Ñe„ªn˚_¥og: /%†ª‡%d (%s)\n", 
¥ogp
->
«me
,Örogp->
ªf
, 
‰om
);

17 ()
‰om
;

19 
	}
}

25 
	$dóŒoˇã_¥ogøm
(
¥ogøm_t
 *
¥ogp
)

27 
i
;

29 #ifde‡
DEBUG


30 i‡(
d_Êag
)

32 
	`debug_mesßge
("OS debug: fªe_¥og: /%s\n", 
¥ogp
->
«me
);

36 
tŸÆ_¥og_block_size
 -
¥ogp
->
tŸÆ_size
;

37 
tŸÆ_num_¥og_blocks
 -= 1;

40 
i
 = 0; i < ()
¥ogp
->
num_fun˘i⁄s_deföed
; i++)

41 i‡(
¥ogp
->
fun˘i⁄_èbÀ
[
i
].
«me
)

43 
	`‰ì_°rög
(
¥ogp
->
fun˘i⁄_èbÀ
[
i
].
«me
);

46 
i
 = 0; i < ()
¥ogp
->
num_°rögs
; i++)

48 
	`‰ì_°rög
(
¥ogp
->
°rögs
[
i
]);

51 
i
 = 0; i < ()
¥ogp
->
num_v¨übÀs_deföed
; i++)

53 
	`‰ì_°rög
(
¥ogp
->
v¨übÀ_èbÀ
[
i
]);

56 
i
 = 0; i < ()
¥ogp
->
num_öhîôed
; i++)

58 
	`‰ì_¥og
(
¥ogp
->
öhîô
[
i
].
¥og
, 1);

60 
	`‰ì_°rög
(
¥ogp
->
«me
);

66 i‡(
¥ogp
->
löe_sw≠_ödex
 != - 1)

68 
	`ªmove_löe_sw≠
(
¥ogp
);

70 i‡(
¥ogp
->
fûe_öfo
)

72 
	`FREE
(
¥ogp
->
fûe_öfo
);

75 
	`FREE
–(*)
¥ogp
);

76 
	}
}

85 
	$‰ì_¥og
(
¥ogøm_t
 *
¥ogp
, 
‰ì_sub_°rögs
)

87 
¥ogp
->
ªf
--;

88 i‡(
¥ogp
->
ªf
 > 0)

92 i‡(
¥ogp
->
func_ªf
 > 0)

97 i‡(
‰ì_sub_°rögs
)

99 
	`dóŒoˇã_¥ogøm
(
¥ogp
);

103 
tŸÆ_¥og_block_size
 -
¥ogp
->
tŸÆ_size
;

104 
tŸÆ_num_¥og_blocks
 -= 1;

105 
	`FREE
–(*)
¥ogp
);

107 
	}
}

113 *
	$v¨übÀ_«me
(
¥ogøm_t
 *
¥og
, 
idx
)

115 
i
 = 
¥og
->
num_öhîôed
 - 1;

116 
fú°
;

118 i‡(
i
 > - 1)

120 
fú°
 = 
¥og
->
öhîô
[
i
].
v¨übÀ_ödex_off£t
 +Örog->öhîô[i].¥og->
num_v¨übÀs_tŸÆ
;

124  
¥og
->
v¨übÀ_èbÀ
[
idx
];

126 i‡(
idx
 >
fú°
)

128  
¥og
->
v¨übÀ_èbÀ
[
idx
 - 
fú°
];

130 
idx
 < 
¥og
->
öhîô
[
i
].
v¨übÀ_ödex_off£t
)

132 
i
--;

134  
	`v¨übÀ_«me
(
¥og
->
öhîô
[
i
].¥og, 
idx
 -Örog->öhîô[i].
v¨übÀ_ödex_off£t
);

135 
	}
}

141 #ifde‡
COMPRESS_FUNCTION_TABLES


145 
ru¡ime_fun˘i⁄_u
 *
	$föd_func_íåy
(
¥ogøm_t
 *
¥og
, 
ödex
)

147 
ru¡ime_fun˘i⁄_u
 
ªt
;

149 
f_ov
 = 
¥og
->
fun˘i⁄_com¥es£d
->
fú°_ovîlﬂd
;

150 
n_ov
 = 
¥og
->
fun˘i⁄_com¥es£d
->
fú°_deföed
 -Örog->fun˘i⁄_com¥es£d->
num_com¥es£d
;

151 
idx
;

152 
fidx
;

154 i‡–(
ödex
 < 
f_ov
Ë|| (
idx
 = index - f_ovË>
n_ov
 || (
fidx
 = 
¥og
->
fun˘i⁄_com¥es£d
->index[idx]) == 255)

156 
fú°
 = 0, 
œ°
 = 
¥og
->
num_öhîôed
 - 1;

158 
œ°
 > 
fú°
)

160 
mid
 = (
œ°
 + 
fú°
 + 1) / 2;

161 i‡(
¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
 > 
ödex
)

163 
œ°
 = 
mid
 - 1;

167 
fú°
 = 
mid
;

170 
ªt
.
öh
.
off£t
 = 
fú°
;

171 
ªt
.
öh
.
fun˘i⁄_ödex_off£t
 = 
ödex
 - 
¥og
->
öhîô
[
fú°
].function_index_offset;

172  &
ªt
;

176  
¥og
->
fun˘i⁄_off£ts
 + 
fidx
;

178 
	}
}

	@src/qsort.c

10 
	~"°d.h
"

11 
	~"qs‹t.h
"

13 
	#LEN
 (
svÆue_t
)

	)

14 
	#MAX_LEN
 1000

	)

16 
INLINE_STATIC
 
doSw≠
(*, *, );

17 
qS‹t
(*, , , , , (*) () );

19 
INLINE_STATIC
 
	$doSw≠
(*
⁄e
, *
two
, 
size
)

21 
t
;

23 
size
--)

25 
t
 = *
⁄e
;

26 *(
⁄e
++Ë*
two
;

27 *(
two
++Ë
t
;

29 
	}
}

33 
	$qS‹t
(
v
, 
À·
, 
right
, 
size
, 
rightmo°
, 
com∑r
)*v;

34 
À·
, 
right
, 
size
, 
rightmo°
;

35 (*
com∑r
) (*, *);

37 
i
, 
œ°
, 
szÀ·
;

39 i‡–(
À·
 >
right
Ë|| (À· < 0Ë|| (righà> 
rightmo°
) || (right < 0) )

43 
szÀ·
 = 
size
 * 
À·
;

44 
	`doSw≠
–(*)
v
 + 
szÀ·
, (*)v + (
size
 *–(
À·
 + 
right
) / 2) ), size);

45 
œ°
 = 
À·
;

46 
i
 = 
À·
 + 1; i <
right
; i++)

48 i‡–(*
com∑r
Ë–(*)
v
 + (
size
 *
i
), (*)v + 
szÀ·
) < 0)

50 
	`doSw≠
–(*)
v
 + (
size
 *++
œ°
), (*)v + (sizê*
i
), size);

53 
	`doSw≠
–(*)
v
 + 
szÀ·
, (*)v + (
size
 *
œ°
), size);

54 
	`qS‹t
(
v
, 
À·
, 
œ°
 - 1, 
size
, 
rightmo°
, 
com∑r
);

55 
	`qS‹t
(
v
, 
œ°
 + 1, 
right
, 
size
, 
rightmo°
, 
com∑r
);

56 
	}
}

62 
	$quickS‹t
(
a
, 
nmemb
, 
size
, 
com∑r
)*a;

63 
nmemb
, 
size
;

64 (*
com∑r
) (*, *);

66 i‡(
nmemb
 < 2)

70 
	`qS‹t
(
a
, 0, 
nmemb
 - 1, 
size
,Çmemb - 1, 
com∑r
);

71 
	}
}

	@src/rc.c

1 
	~"°d.h
"

2 
	~"c⁄fig.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"maö.h
"

7 
	#MAX_LINE_LENGTH
 120

	)

9 *
	gc⁄fig_°r
[
NUM_CONFIG_STRS
];

10 
	gc⁄fig_öt
[
NUM_CONFIG_INTS
];

12 
c⁄fig_öô
();

13 
	$c⁄fig_öô
()

15 
i
;

17 
i
 = 0; i < 
NUM_CONFIG_INTS
; i++)

19 
c⁄fig_öt
[
i
] = 0;

21 
i
 = 0; i < 
NUM_CONFIG_STRS
; i++)

23 
c⁄fig_°r
[
i
] = 0;

26 
	}
}

32 *
	$¥o˚ss_c⁄fig_°rög
(*
°r
)

34 *
p
 = 
°r
;

35 *
q
;

36 
n
;

38 *
p
 && 
	`is•a˚
(*p) )

40 
p
++;

42 
n
 = 
	`°æí
(
p
);

43 i‡(!
n
)

45  
	`Æloc_c°rög
("", "config_file: blank string");

48 
q
 = 
p
 + 
n
 - 1;

49 
q
 > 
p
 && 
	`is•a˚
(*q) )

51 
q
--;

53 
q
[1] = 0;

54  
	`Æloc_c°rög
(
p
, "process_config_string()");

55 
	}
}

61 
	$£t_deÁu…s
(*
fûíame
)

64 
	`c⁄fig_öô
();

65 
	}
}

	@src/reclaim.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"ª˛aim.h
"

5 
	#MAX_RECURSION
 25

	)

7 
gc_m≠pög
(
m≠pög_t
*);

8 
check_svÆue
(
svÆue_t
*);

10 
	g˛ó√d
, 
	g√°ed
;

12 
	$check_svÆue
(
svÆue_t
 *
v
)

14 
idx
;

16 
√°ed
++;

17 i‡(
√°ed
 > 
MAX_RECURSION
)

21 
v
->
ty≥
)

23 
T_OBJECT
:

24 i‡(
v
->
u
.
ob
->
Êags
 &
O_DESTRUCTED
)

26 
	`‰ì_svÆue
(
v
, "reclaim_objects");

27 *
v
 = 
c⁄°0u
;

28 
˛ó√d
++;

31 
T_MAPPING
:

32 
	`gc_m≠pög
(
v
->
u
.
m≠
);

34 
T_ARRAY
:

35 
T_CLASS
:

36 
idx
 = 0; idx < 
v
->
u
.
¨r
->
size
; idx++)

38 
	`check_svÆue
(&
v
->
u
.
¨r
->
ôem
[
idx
]);

41 
T_FUNCTION
:

43 
svÆue_t
 
tmp
;

44 
tmp
.
ty≥
 = 
T_ARRAY
;

45 i‡–(
tmp
.
u
.
¨r
 = 
v
->u.
Â
->
hdr
.
¨gs
) )

47 
	`check_svÆue
(&
tmp
);

52 
√°ed
--;

54 
	}
}

60 
	$gc_m≠pög
(
m≠pög_t
 *
m
)

66 
m≠pög_node_t
 **
¥ev
, *
ñt
;

67 
j
 = ()
m
->
èbÀ_size
;

71 
¥ev
 = 
m
->
èbÀ
 + 
j
;

72  (
ñt
 = *
¥ev
) )

74 i‡(
ñt
->
vÆues
[0].
ty≥
 =
T_OBJECT
)

76 i‡(
ñt
->
vÆues
[0].
u
.
ob
->
Êags
 &
O_DESTRUCTED
)

78 
	`‰ì_obje˘
(
ñt
->
vÆues
[0].
u
.
ob
, "gc_mapping");

81 i‡(!(*
¥ev
 = 
ñt
->
√xt
Ë&& !
m
->
èbÀ
[
j
])

83 
m
->
unfûÀd
++;

85 
˛ó√d
++;

86 
m
->
cou¡
--;

87 
tŸÆ_m≠pög_nodes
--;

88 
tŸÆ_m≠pög_size
 -(
m≠pög_node_t
);

89 
	`‰ì_svÆue
(
ñt
->
vÆues
 + 1, "gc_mapping");

90 
	`‰ì_node
(
ñt
);

97 
	`check_svÆue
(
ñt
->
vÆues
);

99 
	`check_svÆue
(
ñt
->
vÆues
 + 1);

100 
¥ev
 = &(
ñt
->
√xt
);

104 
j
--)

106 
	}
}

112 
	$ª˛aim_obje˘s
()

114 
i
;

115 
obje˘_t
 *
ob
;

117 
˛ó√d
 = 
√°ed
 = 0;

118 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
)

119 i‡(
ob
->
¥og
)

120 
i
 = 0; i < ()
ob
->
¥og
->
num_v¨übÀs_tŸÆ
; i++)

122 
	`check_svÆue
(&
ob
->
v¨übÀs
[
i
]);

124  
˛ó√d
;

125 
	}
}

	@src/regexp.c

58 
	~"°d.h
"

59 
	~"ªgexp.h
"

60 
	~"Õc_ö˛.h
"

61 
	~"comm.h
"

87 
	#MAGIC
 0234

	)

106 
	#END
 0

	)

107 
	#BOL
 1

	)

108 
	#EOL
 2

	)

109 
	#ANY
 3

	)

110 
	#ANYOF
 4

	)

111 
	#ANYBUT
 5

	)

113 
	#BRANCH
 6

	)

114 
	#BACK
 7

	)

115 
	#EXACTLY
 8

	)

116 
	#NOTHING
 9

	)

117 
	#STAR
 10

	)

119 
	#PLUS
 11

	)

121 
	#WORDSTART
 12

	)

122 
	#WORDEND
 13

	)

123 
	#OPEN
 20

	)

126 
	#CLOSE
 30

	)

160 
	#OP
(
p
Ë(*’))

	)

162 #unde‡
NEXT


163 
	#NEXT
(
p
Ë(((*(’)+1)&0377)<<8Ë+ (*(’)+2)&0377))

	)

164 
	#OPERAND
(
p
Ë(’Ë+ 3)

	)

170 
	#SPECIAL
 0x100

	)

171 
	#LBRAC
 ('('|
SPECIAL
)

	)

172 
	#RBRAC
 (')'|
SPECIAL
)

	)

173 
	#ASTERIX
 ('*'|
SPECIAL
)

	)

174 
	#PLUSS
 ('+'|
SPECIAL
)

	)

175 
	#QMARK
 ('?'|
SPECIAL
)

	)

176 
	#OR_OP
 ('|'|
SPECIAL
)

	)

177 
	#DOLLAR
 ('$'|
SPECIAL
)

	)

178 
	#DOT
 ('.'|
SPECIAL
)

	)

179 
	#CARET
 ('^'|
SPECIAL
)

	)

180 
	#LSQBRAC
 ('['|
SPECIAL
)

	)

181 
	#RSQBRAC
 (']'|
SPECIAL
)

	)

182 
	#LSHBRAC
 ('<'|
SPECIAL
)

	)

183 
	#RSHBRAC
 ('>'|
SPECIAL
)

	)

185 
	#FAIL
(
m
Ë{ 
	`ªgîr‹
(m); (
NULL
); }

	)

186 
	#ISMULT
(
c
Ë((cË=
ASTERIX
 || (cË=
PLUSS
 || (cË=
QMARK
)

	)

187 
	#META
 "^$.[()|?+*\\"

	)

194 #i‡
deföed
(
löux
)

195 #i‚de‡
CHARBITS


196 
	#CHARBITS
 0xff

	)

198 
	#UCHARAT
(
p
Ë(()*(*)’))

	)

200 #i‚de‡
CHARBITS


201 
	#CHARBITS
 0xff

	)

202 
	#UCHARAT
(
p
Ë(()*(*)’))

	)

204 
	#UCHARAT
(
p
Ë(()*’)&
CHARBITS
)

	)

208 #unde‡
CHARBITS


209 
	#CHARBITS
 0xff

	)

210 
	#UCHARAT
(
p
Ë((Ë*(*)’))

	)

213 
	#ISWORDPART
(
c
Ë–
	`iß um
(cË|| (cË='_' )

	)

218 
	#HASWIDTH
 01

	)

219 
	#SIMPLE
 02

	)

220 
	#SPSTART
 04

	)

221 
	#WORST
 0

	)

226 *
	gªgexp_îr‹
;

228 *
	gªg∑r£
;

229 
	gªg≈¨
;

230 
	gªgdummy
;

231 *
	gªgcode
;

232 
	gªgsize
;

237 #i‚de‡
STATIC


238 
	#STATIC
 

	)

240 
STATIC
 *
ªg
(, *);

241 
STATIC
 *
ªgbønch
(*);

242 
STATIC
 *
ªgpõ˚
(*);

243 
STATIC
 *
ªg©om
(*);

244 
STATIC
 *
ªgnode
();

245 
STATIC
 *
ªg√xt
(*);

246 
STATIC
 
ªgc
();

247 
STATIC
 
ªgö£π
(, *);

248 
STATIC
 
ªgèû
(*, *);

249 
STATIC
 
ªg›èû
(*, *);

251 #ifde‡
STRCSPN


252 
STATIC
 
°rc•n
();

255 
	$ªgîr‹
(*
s
)

257 
ªgexp_îr‹
 = 
s
;

258 
	}
}

275 
ªgexp
 *
	$_ªgcomp
(*
exp
, 
excom∑t
)

277 
ªgexp
 *
r
;

278 *
sˇn
;

279 *
l⁄ge°
;

280 
Àn
;

281 
Êags
;

282 *
exp2
, *
de°
, 
c
;

284 i‡(!
exp
)

286 
	`FAIL
("NULLárgument\n");

289 
exp2
 = (*)
	`DXALLOC
–(
	`°æí
–(*)
exp
Ë+ 1)*(([8]Ë/ ([8]Ë), 
TAG_TEMPORARY
, "regcomp: 1");

290 
sˇn
 = 
exp
, 
de°
 = 
exp2
; (
c
 = *scan++);)

292 
c
)

296 *
de°
++ = 
excom∑t
 ? 
c
 : c | 
SPECIAL
;

307 *
de°
++ = 
c
 | 
SPECIAL
;

310 
c
 = *
sˇn
++)

313 
	`FREE
(
exp2
);

314 
	`FAIL
("OSÉrror: RegularÉxpression cannotÉnd with '\\'. Use \"\\\\\".\n");

318 *
de°
++ = 
excom∑t
 ? 
c
 | 
SPECIAL
: c;

322 *
de°
++ = 
c
 | 
SPECIAL
;

326 
	`FREE
(
exp2
);

327 
	`FAIL
("OSÉrror: sorry, unimplemented operator\n");

329 *
de°
++ = '\b';

332 *
de°
++ = '\t';

335 *
de°
++ = '\r';

338 *
de°
++ = 
c
;

342 *
de°
++ = 
c
;

345 *
de°
 = 0;

347 
ªg∑r£
 = 
exp2
;

348 
ªg≈¨
 = 1;

349 
ªgsize
 = 0L;

350 
ªgcode
 = &
ªgdummy
;

351 
	`ªgc
–()
MAGIC
);

352 i‡(
	`ªg
(0, &
Êags
Ë=(*)
NULL
)

354 
	`FREE
(
exp2
);

355  ( (
ªgexp
*)
NULL
);

359 i‡(
ªgsize
 >= 32767L)

362 
	`FREE
(
exp2
);

363 
	`FAIL
("OSÉrror:ÑegexpÅoo big\n");

367 
r
 = (
ªgexp
*)
	`DXALLOC
(‘egexpË+ ()
ªgsize
, 
TAG_TEMPORARY
, "regcomp: 2");

368 i‡(
r
 =(
ªgexp
*)
NULL
)

370 
	`FREE
(
exp2
);

371 
	`FAIL
("OSÉrror: out of space\n");

375 
ªg∑r£
 = 
exp2
;

376 
ªg≈¨
 = 1;

377 
ªgcode
 = (*Ë(
r
->
¥ogøm
);

378 
	`ªgc
–()
MAGIC
);

379 i‡(
	`ªg
(0, &
Êags
Ë=
NULL
)

381 
	`FREE
(
exp2
);

382 
	`FREE
(
r
);

383  ( (
ªgexp
*)
NULL
);

387 
r
->
ªg°¨t
 = '\0';

388 
r
->
ªg™ch
 = 0;

389 
r
->
ªgmu°
 = 
NULL
;

390 
r
->
ªgmÀn
 = 0;

391 
sˇn
 = (*Ë(
r
->
¥ogøm
 + 1);

392 i‡(
	`OP
(
	`ªg√xt
–(*)
sˇn
ËË=
END
)

395 
sˇn
 = 
	`OPERAND
(scan);

398 i‡(
	`OP
(
sˇn
Ë=
EXACTLY
)

400 
r
->
ªg°¨t
 = *
	`OPERAND
(
sˇn
);

402 i‡(
	`OP
(
sˇn
Ë=
BOL
)

404 
r
->
ªg™ch
++;

415 i‡(
Êags
 &
SPSTART
)

417 
l⁄ge°
 = 
NULL
;

418 
Àn
 = 0;

419 ; 
sˇn
 !
NULL
; sˇ¿(*)
	`ªg√xt
( (*)scan) )

421 *
tmp
 = (*)
	`OPERAND
(
sˇn
);

422 
éí
;

423 i‡(
	`OP
(
sˇn
Ë=
EXACTLY
 && (
éí
 = 
	`°æí
(
tmp
ËË>
Àn
)

425 
l⁄ge°
 = 
tmp
;

426 
Àn
 = 
éí
;

429 
r
->
ªgmu°
 = 
l⁄ge°
;

430 
r
->
ªgmÀn
 = 
Àn
;

433 
	`FREE
–(*)
exp2
);

434  (
r
);

435 
	}
}

446 *
	$ªg
(
∑ªn
,

447 *
Êagp
)

449 *
ªt
;

450 *
br
;

451 *
ídî
;

452 
∑∫o
 = 0;

453 
Êags
;

455 *
Êagp
 = 
HASWIDTH
;

458 i‡(
∑ªn
)

460 i‡(
ªg≈¨
 >
NSUBEXP
)

462 
	`FAIL
("too many ()\n");

464 
∑∫o
 = 
ªg≈¨
;

465 
ªg≈¨
++;

466 
ªt
 = 
	`ªgnode
(
OPEN
 + 
∑∫o
);

470 
ªt
 = (*)
NULL
;

474 
br
 = 
	`ªgbønch
(&
Êags
);

475 i‡(
br
 =(*)
NULL
)

477  ( (*)
NULL
);

479 i‡(
ªt
 !(*)
NULL
)

481 
	`ªgèû
(
ªt
, 
br
);

486 
ªt
 = 
br
;

488 i‡(!(
Êags
 &
HASWIDTH
) )

490 *
Êagp
 &~
HASWIDTH
;

492 *
Êagp
 |
Êags
 &
SPSTART
;

493 *
ªg∑r£
 =
OR_OP
)

495 
ªg∑r£
++;

496 
br
 = 
	`ªgbønch
(&
Êags
);

497 i‡(
br
 =(*)
NULL
)

499  ( (*)
NULL
);

501 
	`ªgèû
(
ªt
, 
br
);

502 i‡(!(
Êags
 &
HASWIDTH
) )

504 *
Êagp
 &~
HASWIDTH
;

506 *
Êagp
 |
Êags
 &
SPSTART
;

510 
ídî
 = 
	`ªgnode
–(
∑ªn
Ë? 
CLOSE
 + 
∑∫o
: 
END
);

511 
	`ªgèû
(
ªt
, 
ídî
);

514 
br
 = 
ªt
; b∏!(*)
NULL
; b∏
	`ªg√xt
(br) )

516 
	`ªg›èû
(
br
, 
ídî
);

520 i‡(
∑ªn
 && *
ªg∑r£
++ !
RBRAC
)

522 
	`FAIL
("OSÉrror: unmatched ()\n");

524 i‡(!
∑ªn
 && *
ªg∑r£
 != '\0')

526 i‡(*
ªg∑r£
 =
RBRAC
)

528 
	`FAIL
("OSÉrror: unmatched ()\n");

532 
	`FAIL
("OSÉrror: junk onÉnd\n");

537  (
ªt
);

538 
	}
}

545 *
	$ªgbønch
(*
Êagp
)

547 *
ªt
;

548 *
chaö
;

549 *
œã°
;

550 
Êags
;

552 *
Êagp
 = 
WORST
;

554 
ªt
 = 
	`ªgnode
(
BRANCH
);

555 
chaö
 = (*)
NULL
;

556 *
ªg∑r£
 !'\0' && *ªg∑r£ !
OR_OP
 && *ªg∑r£ !
RBRAC
)

558 
œã°
 = 
	`ªgpõ˚
(&
Êags
);

559 i‡(
œã°
 =(*)
NULL
)

561  ( (*)
NULL
);

563 *
Êagp
 |
Êags
 &
HASWIDTH
;

564 i‡(
chaö
 =(*)
NULL
)

567 *
Êagp
 |
Êags
 &
SPSTART
;

571 
	`ªgèû
(
chaö
, 
œã°
);

573 
chaö
 = 
œã°
;

575 i‡(
chaö
 =(*)
NULL
)

578 
	`ªgnode
(
NOTHING
);

581  (
ªt
);

582 
	}
}

593 *
	$ªgpõ˚
(*
Êagp
)

595 *
ªt
;

596 
›
;

597 *
nxt
;

598 
Êags
;

600 
ªt
 = 
	`ªg©om
(&
Êags
);

601 i‡(
ªt
 =(*)
NULL
)

603  ( (*)
NULL
);

606 
›
 = *
ªg∑r£
;

607 i‡(!
	`ISMULT
(
›
) )

609 *
Êagp
 = 
Êags
;

610  (
ªt
);

612 i‡(!(
Êags
 &
HASWIDTH
Ë&& 
›
 !
QMARK
)

614 
	`FAIL
("OSÉrror: *+ operand could beÉmpty\n");

616 *
Êagp
 = (
›
 !
PLUSS
Ë? (
WORST
 | 
SPSTART
): (WORST | 
HASWIDTH
);

618 i‡(
›
 =
ASTERIX
 && (
Êags
 &
SIMPLE
) )

620 
	`ªgö£π
(
STAR
, 
ªt
);

622 i‡(
›
 =
ASTERIX
)

625 
	`ªgö£π
(
BRANCH
, 
ªt
);

626 
	`ªg›èû
(
ªt
, 
	`ªgnode
(
BACK
) );

627 
	`ªg›èû
(
ªt
,Ñet);

628 
	`ªgèû
(
ªt
, 
	`ªgnode
(
BRANCH
) );

629 
	`ªgèû
(
ªt
, 
	`ªgnode
(
NOTHING
) );

631 i‡(
›
 =
PLUSS
 && (
Êags
 &
SIMPLE
) )

633 
	`ªgö£π
(
PLUS
, 
ªt
);

635 i‡(
›
 =
PLUSS
)

638 
nxt
 = 
	`ªgnode
(
BRANCH
);

639 
	`ªgèû
(
ªt
, 
nxt
);

640 
	`ªgèû
(
	`ªgnode
(
BACK
), 
ªt
);

641 
	`ªgèû
(
nxt
, 
	`ªgnode
(
BRANCH
) );

642 
	`ªgèû
(
ªt
, 
	`ªgnode
(
NOTHING
) );

644 i‡(
›
 =
QMARK
)

647 
	`ªgö£π
(
BRANCH
, 
ªt
);

648 
	`ªgèû
(
ªt
, 
	`ªgnode
(
BRANCH
) );

649 
nxt
 = 
	`ªgnode
(
NOTHING
);

650 
	`ªgèû
(
ªt
, 
nxt
);

651 
	`ªg›èû
(
ªt
, 
nxt
);

653 
ªg∑r£
++;

654 i‡(
	`ISMULT
(*
ªg∑r£
) )

656 
	`FAIL
("OSÉrror:Çested *?+\n");

659  (
ªt
);

660 
	}
}

669 *
	$ªg©om
(*
Êagp
)

671 *
ªt
;

672 
Êags
;

674 *
Êagp
 = 
WORST
;

676 *
ªg∑r£
++)

678 
CARET
:

679 
ªt
 = 
	`ªgnode
(
BOL
);

681 
DOLLAR
:

682 
ªt
 = 
	`ªgnode
(
EOL
);

684 
DOT
:

685 
ªt
 = 
	`ªgnode
(
ANY
);

686 *
Êagp
 |
HASWIDTH
 | 
SIMPLE
;

688 
LSHBRAC
:

689 
ªt
 = 
	`ªgnode
(
WORDSTART
);

691 
RSHBRAC
:

692 
ªt
 = 
	`ªgnode
(
WORDEND
);

694 
LSQBRAC
:

696 
˛ass
 ;

697 
˛as£nd
;

699 i‡(*
ªg∑r£
 =
CARET
)

702 
ªt
 = 
	`ªgnode
(
ANYBUT
);

703 
ªg∑r£
++;

707 
ªt
 = 
	`ªgnode
(
ANYOF
);

709 i‡(*
ªg∑r£
 =
RSQBRAC
 || *regparse == '-')

711 
	`ªgc
(*
ªg∑r£
++);

713 *
ªg∑r£
 !'\0' && *ªg∑r£ !
RSQBRAC
)

715 i‡(*
ªg∑r£
 == '-')

717 
ªg∑r£
++;

718 i‡(*
ªg∑r£
 =
RSQBRAC
 || *regparse == '\0')

720 
	`ªgc
('-');

724 
˛ass
 = (
CHARBITS
 &*(
ªg∑r£
 - 2) ) + 1;

725 
˛as£nd
 = (
CHARBITS
 &*(
ªg∑r£
) );

726 i‡(
˛ass
 > 
˛as£nd
 + 1)

728 
	`FAIL
("invalid []Ñange\n");

730 ; 
˛ass
 <
˛as£nd
; class ++)

732 
	`ªgc
(
˛ass
 );

734 
ªg∑r£
++;

739 
	`ªgc
(*
ªg∑r£
++);

742 
	`ªgc
('\0');

743 i‡(*
ªg∑r£
 !
RSQBRAC
)

745 
	`FAIL
("OSÉrror: unmatched []\n");

747 
ªg∑r£
++;

748 *
Êagp
 |
HASWIDTH
 | 
SIMPLE
;

751 
LBRAC
:

752 
ªt
 = 
	`ªg
(1, &
Êags
);

753 i‡(
ªt
 =(*)
NULL
)

755  ( (*)
NULL
);

757 *
Êagp
 |
Êags
 &(
HASWIDTH
 | 
SPSTART
);

760 
OR_OP
:

761 
RBRAC
:

762 
	`FAIL
("OSÉrror: internal urp\n");

764 
ASTERIX
:

765 
	`FAIL
("OSÉrror: * followsÇothing\n");

767 
PLUSS
:

768 
	`FAIL
("OSÉrror: + followsÇothing\n");

770 
QMARK
:

771 
	`FAIL
("OSÉrror: ? followsÇothing\n");

775 
Àn
;

776 
ídî
;

778 
ªg∑r£
--;

779 
Àn
 = 0; 
ªg∑r£
[Àn] && !‘eg∑r£[Àn] &
SPECIAL
Ë&&Ñeg∑r£[Àn] !
RSQBRAC
;Üen++)

781 i‡(
Àn
 <= 0)

783 
	`FAIL
("OSÉrror: unexpected ]\n");

785 
ídî
 = *(
ªg∑r£
 + 
Àn
);

786 i‡(
Àn
 > 1 && 
	`ISMULT
(
ídî
) )

788 
Àn
--;

791 *
Êagp
 |
HASWIDTH
;

792 i‡(
Àn
 == 1)

794 *
Êagp
 |
SIMPLE
;

796 
ªt
 = 
	`ªgnode
(
EXACTLY
);

797 
Àn
 > 0)

799 
	`ªgc
(*
ªg∑r£
++);

800 
Àn
--;

802 
	`ªgc
('\0');

811  (
ªt
);

812 
	}
}

817 *
	$ªgnode
(
›
)

819 *
ªt
;

820 *
±r
;

822 
ªt
 = 
ªgcode
;

823 i‡(
ªt
 =&
ªgdummy
)

825 
ªgsize
 += 3;

826  (
ªt
);

828 
±r
 = 
ªt
;

829 *
±r
++ = 
›
;

830 *
±r
++ = '\0';

831 *
±r
++ = '\0';

832 
ªgcode
 = 
±r
;

834  (
ªt
);

835 
	}
}

840 
	$ªgc
(
b
)

842 i‡(
ªgcode
 !&
ªgdummy
)

844 *
ªgcode
++ = 
b
;

848 
ªgsize
++;

850 
	}
}

857 
	$ªgö£π
(
›
, *
›nd
)

859 *
§c
;

860 *
d°
;

861 *
∂a˚
;

863 i‡(
ªgcode
 =&
ªgdummy
)

865 
ªgsize
 += 3;

868 
§c
 = 
ªgcode
;

869 
ªgcode
 += 3;

870 
d°
 = 
ªgcode
;

871 
§c
 > 
›nd
)

873 *--
d°
 = *--
§c
;

876 
∂a˚
 = 
›nd
;

877 *
∂a˚
++ = 
›
;

878 *
∂a˚
++ = '\0';

879 *
∂a˚
++ = '\0';

880 
	}
}

885 
	$ªgèû
(*
p
, *
vÆ
)

887 *
sˇn
;

888 *
ãmp
;

889 
off£t
;

891 i‡(
p
 =&
ªgdummy
)

897 
sˇn
 = 
p
;

900 
ãmp
 = 
	`ªg√xt
(
sˇn
);

901 i‡(
ãmp
 =(*)
NULL
)

905 
sˇn
 = 
ãmp
;

908 i‡(
	`OP
(
sˇn
Ë=
BACK
)

910 
off£t
 = 
sˇn
 - 
vÆ
;

914 
off£t
 = 
vÆ
 - 
sˇn
;

916 *(
sˇn
 + 1Ë(
off£t
 >> 8) &0377;

917 *(
sˇn
 + 2Ë
off£t
 &0377;

918 
	}
}

923 
	$ªg›èû
(*
p
, *
vÆ
)

926 i‡(
p
 =(*)
NULL
 ||Ö =&
ªgdummy
 || 
	`OP
’Ë!
BRANCH
)

930 
	`ªgèû
(
	`OPERAND
(
p
), 
vÆ
);

931 
	}
}

940 *
	gªgöput
;

941 *
	gªgbﬁ
;

942 **
	gªg°¨ç
;

943 **
	gªgídp
;

948 
STATIC
 
ªgåy
(
ªgexp
 *, *);

949 
STATIC
 
ªgm©ch
(*);

950 
STATIC
 
ªgª≥©
(*);

952 #ifde‡
DEBUG


953 
	gªg«º©e
 = 0;

954 
ªgdump
(
ªgexp
*);

955 
STATIC
 *
ªg¥›
(*);

962 
	$_ªgexec
(
ªgexp
 *
¥og
, *
°rög
)

964 *
s
;

967 i‡(
¥og
 =(
ªgexp
*)
NULL
 || 
°rög
 == (*)NULL)

969 
	`ªgîr‹
("OSÉrror: NULLÖarameter\n");

973 i‡(
	`UCHARAT
(
¥og
->
¥ogøm
Ë!
MAGIC
)

975 
	`ªgîr‹
("OSÉrror: corruptedÖrogram\n");

979 i‡(
¥og
->
ªgmu°
 !(*)
NULL
)

981 
s
 = 
°rög
;

982  (
s
 = 
	`°rchr
(s, 
¥og
->
ªgmu°
[0]ËË!(*)
NULL
)

984 i‡(
	`°∫cmp
(
s
, 
¥og
->
ªgmu°
,Örog->
ªgmÀn
) == 0)

989 
s
++;

991 i‡(
s
 =(*)
NULL
)

998 
ªgbﬁ
 = 
°rög
;

1001 i‡(
¥og
->
ªg™ch
)

1003  (
	`ªgåy
(
¥og
, 
°rög
) );

1007 
s
 = 
°rög
;

1008 i‡(
¥og
->
ªg°¨t
 != '\0')

1010  (
s
 = 
	`°rchr
(s, 
¥og
->
ªg°¨t
ËË!(*)
NULL
)

1012 i‡(
	`ªgåy
(
¥og
, 
s
) )

1016 
s
++;

1022 i‡(
	`ªgåy
(
¥og
, 
s
) )

1028 *
s
++ != '\0');

1032 
	}
}

1037 
	$ªgåy
(
ªgexp
 *
¥og
, *
°rög
)

1039 
i
;

1040 **
•
;

1041 **
ï
;

1043 
ªgöput
 = 
°rög
;

1044 
ªg°¨ç
 = 
¥og
->
°¨ç
;

1045 
ªgídp
 = 
¥og
->
ídp
;

1047 
•
 = 
¥og
->
°¨ç
;

1048 
ï
 = 
¥og
->
ídp
;

1049 
i
 = 
NSUBEXP
; i > 0; i--)

1051 *
•
++ = (*)
NULL
;

1052 *
ï
++ = (*)
NULL
;

1054 i‡(
	`ªgm©ch
(
¥og
->
¥ogøm
 + 1) )

1056 
¥og
->
°¨ç
[0] = 
°rög
;

1057 
¥og
->
ídp
[0] = 
ªgöput
;

1064 
	}
}

1076 
	$ªgm©ch
(*
¥og
)

1078 *
sˇn
;

1079 *
nxt
;

1081 
sˇn
 = 
¥og
;

1082 #ifde‡
DEBUG


1083 i‡(
sˇn
 !(*)
NULL
 && 
ªg«º©e
)

1085 
	`debug_mesßge
("%s(\n", 
	`ªg¥›
(
sˇn
) );

1088 
sˇn
 !(*)
NULL
)

1090 #ifde‡
DEBUG


1091 i‡(
ªg«º©e
)

1093 
	`debug_mesßge
("%s...\n", 
	`ªg¥›
(
sˇn
) );

1096 
nxt
 = 
	`ªg√xt
(
sˇn
);

1098 
	`OP
(
sˇn
) )

1100 
BOL
:

1101 i‡(
ªgöput
 !
ªgbﬁ
)

1106 
EOL
:

1107 i‡(*
ªgöput
 != '\0')

1112 
ANY
:

1113 i‡(*
ªgöput
 == '\0')

1117 
ªgöput
++;

1119 
WORDSTART
:

1120 i‡(
ªgöput
 =
ªgbﬁ
)

1124 i‡(*
ªgöput
 ='\0' || 
	`ISWORDPART
(*(reginput - 1) ) || !ISWORDPART(*reginput) )

1129 
WORDEND
:

1130 i‡(*
ªgöput
 == '\0')

1134 i‡(
ªgöput
 =
ªgbﬁ
 || !
	`ISWORDPART
(*(reginput - 1) ) || ISWORDPART(*reginput) )

1139 
EXACTLY
:

1141 
Àn
;

1142 *
›nd
;

1144 
›nd
 = 
	`OPERAND
(
sˇn
);

1146 i‡(*
›nd
 !*
ªgöput
)

1150 
Àn
 = 
	`°æí
(
›nd
);

1151 i‡(
Àn
 > 1 && 
	`°∫cmp
(
›nd
, 
ªgöput
,Üen) != 0)

1155 
ªgöput
 +
Àn
;

1158 
ANYOF
:

1159 i‡(*
ªgöput
 ='\0' || 
	`°rchr
(
	`OPERAND
(
sˇn
), *ªgöputË=(*)
NULL
)

1163 
ªgöput
++;

1165 
ANYBUT
:

1166 i‡(*
ªgöput
 ='\0' || 
	`°rchr
(
	`OPERAND
(
sˇn
), *ªgöputË!(*)
NULL
)

1170 
ªgöput
++;

1172 
NOTHING
:

1174 
BACK
:

1176 
OPEN
 + 1: OPEN + 2: OPEN + 3: OPEN + 4: OPEN + 5: OPEN + 6: OPEN + 7: OPEN + 8: OPEN + 9:

1178 
no
;

1179 *
ßve
;

1181 
no
 = 
	`OP
(
sˇn
Ë- 
OPEN
;

1182 
ßve
 = 
ªgöput
;

1184 i‡(
	`ªgm©ch
(
nxt
) )

1190 i‡(
ªg°¨ç
[
no
] =(*)
NULL
)

1192 
ªg°¨ç
[
no
] = 
ßve
;

1202 
CLOSE
 + 1: CLOSE + 2: CLOSE + 3: CLOSE + 4: CLOSE + 5: CLOSE + 6: CLOSE + 7: CLOSE + 8: CLOSE + 9:

1204 
no
;

1205 *
ßve
;

1207 
no
 = 
	`OP
(
sˇn
Ë- 
CLOSE
;

1208 
ßve
 = 
ªgöput
;

1210 i‡(
	`ªgm©ch
(
nxt
) )

1216 i‡(
ªgídp
[
no
] =(*)
NULL
)

1218 
ªgídp
[
no
] = 
ßve
;

1228 
BRANCH
:

1230 *
ßve
;

1232 i‡(
	`OP
(
nxt
Ë!
BRANCH
)

1235 
nxt
 = 
	`OPERAND
(
sˇn
);

1242 
ßve
 = 
ªgöput
;

1243 i‡(
	`ªgm©ch
(
	`OPERAND
(
sˇn
) ) )

1247 
ªgöput
 = 
ßve
;

1248 
sˇn
 = 
	`ªg√xt
(scan);

1250 
sˇn
 !(*)
NULL
 && 
	`OP
(sˇnË=
BRANCH
);

1256 
STAR
:

1257 
PLUS
:

1259 
√xtch
;

1260 
no
;

1261 *
ßve
;

1262 
möimum
;

1268 
√xtch
 = '\0';

1269 i‡(
	`OP
(
nxt
Ë=
EXACTLY
)

1271 
√xtch
 = *
	`OPERAND
(
nxt
);

1273 
möimum
 = (
	`OP
(
sˇn
Ë=
STAR
) ? 0 : 1;

1274 
ßve
 = 
ªgöput
;

1275 
no
 = 
	`ªgª≥©
(
	`OPERAND
(
sˇn
) );

1276 
no
 >
möimum
)

1279 i‡(
√xtch
 ='\0' || *
ªgöput
 ==Çextch)

1280 i‡(
	`ªgm©ch
(
nxt
) )

1285 
no
--;

1286 
ªgöput
 = 
ßve
 + 
no
;

1291 
END
:

1295 
	`ªgîr‹
("OSÉrror: memory corruption\n");

1300 
sˇn
 = 
nxt
;

1307 
	`ªgîr‹
("OSÉrror: corruptedÖointers\n");

1309 
	}
}

1314 
	$ªgª≥©
(*
p
)

1316 
cou¡
 = 0;

1317 *
sˇn
;

1318 *
›nd
;

1320 
sˇn
 = 
ªgöput
;

1321 
›nd
 = 
	`OPERAND
(
p
);

1322 
	`OP
(
p
) )

1324 
ANY
:

1325 
cou¡
 = 
	`°æí
(
sˇn
);

1326 
sˇn
 +
cou¡
;

1328 
EXACTLY
:

1329 *
›nd
 =*
sˇn
)

1331 
cou¡
++;

1332 
sˇn
++;

1335 
ANYOF
:

1336 *
sˇn
 !'\0' && 
	`°rchr
(
›nd
, *sˇnË!(*)
NULL
)

1338 
cou¡
++;

1339 
sˇn
++;

1342 
ANYBUT
:

1343 *
sˇn
 !'\0' && 
	`°rchr
(
›nd
, *sˇnË=(*)
NULL
)

1345 
cou¡
++;

1346 
sˇn
++;

1351 
	`ªgîr‹
("OSÉrror: internal foulup\n");

1352 
cou¡
 = 0;

1355 
ªgöput
 = 
sˇn
;

1357  (
cou¡
);

1358 
	}
}

1364 *
	$ªg√xt
(*
p
)

1366 
off£t
;

1368 i‡(
p
 =&
ªgdummy
)

1370  ( (*)
NULL
);

1373 
off£t
 = 
	`NEXT
(
p
);

1374 i‡(
off£t
 == 0)

1376  ( (*)
NULL
);

1379 i‡(
	`OP
(
p
Ë=
BACK
)

1381  (
p
 - 
off£t
);

1385  (
p
 + 
off£t
);

1387 
	}
}

1393 #ifde‡
DEBUG


1395 
STATIC
 *
ªg¥›
(*);

1400 
	$ªgdump
(
ªgexp
 *
r
)

1402 *
s
;

1403 
›
 = 
EXACTLY
;

1404 *
nxt
;

1406 #i‚de‡
_AIX


1407 *
	`°rchr
();

1411 
s
 = 
r
->
¥ogøm
 + 1;

1412 
›
 !
END
)

1415 
›
 = 
	`OP
(
s
);

1416 
	`¥ötf
("%2d%s", (Ë(
s
 - 
r
->
¥ogøm
), 
	`ªg¥›
(s) );

1417 
nxt
 = 
	`ªg√xt
(
s
);

1418 i‡(
nxt
 =(*)
NULL
)

1421 
	`¥ötf
("(0)");

1425 
	`¥ötf
("(%d)", (Ë–(
s
 - 
r
->
¥ogøm
Ë+ (
nxt
 - s) ) );

1427 
s
 += 3;

1428 i‡(
›
 =
ANYOF
 || o∞=
ANYBUT
 || o∞=
EXACTLY
)

1431 *
s
 != '\0')

1433 
	`putch¨
(*
s
);

1434 
s
++;

1436 
s
++;

1438 
	`putch¨
('\n');

1442 i‡(
r
->
ªg°¨t
 != '\0')

1444 
	`¥ötf
("°¨à`%c' ", 
r
->
ªg°¨t
);

1446 i‡(
r
->
ªg™ch
)

1448 
	`¥ötf
("anchored ");

1450 i‡(
r
->
ªgmu°
 !(*)
NULL
)

1452 
	`¥ötf
("mu° havê\"%s\"", 
r
->
ªgmu°
);

1454 
	`¥ötf
("\n");

1455 
	}
}

1460 *
	$ªg¥›
(*
›
)

1462 *
p
 = 
NULL
;

1463 
buf
[50];

1465 
	`°r˝y
(
buf
, ":");

1467 
	`OP
(
›
) )

1469 
BOL
:

1470 
p
 = "BOL";

1472 
EOL
:

1473 
p
 = "EOL";

1475 
ANY
:

1476 
p
 = "ANY";

1478 
ANYOF
:

1479 
p
 = "ANYOF";

1481 
ANYBUT
:

1482 
p
 = "ANYBUT";

1484 
BRANCH
:

1485 
p
 = "BRANCH";

1487 
EXACTLY
:

1488 
p
 = "EXACTLY";

1490 
NOTHING
:

1491 
p
 = "NOTHING";

1493 
BACK
:

1494 
p
 = "BACK";

1496 
END
:

1497 
p
 = "END";

1499 
WORDSTART
:

1500 
p
 = "WORDSTART";

1502 
WORDEND
:

1503 
p
 = "WORDEND";

1505 
OPEN
 + 1: OPEN + 2: OPEN + 3: OPEN + 4: OPEN + 5: OPEN + 6: OPEN + 7: OPEN + 8: OPEN + 9: 
	`•rötf
(
buf
 + 
	`°æí
(buf), "OPEN%d", 
	`OP
(
›
) - OPEN);

1506 
p
 = (*)
NULL
;

1508 
CLOSE
 + 1: CLOSE + 2: CLOSE + 3: CLOSE + 4: CLOSE + 5: CLOSE + 6: CLOSE + 7: CLOSE + 8: CLOSE + 9: 
	`•rötf
(
buf
 + 
	`°æí
(buf), "CLOSE%d", 
	`OP
(
›
) -

1509 
CLOSE
);

1510 
p
 = (*)
NULL
;

1512 
STAR
:

1513 
p
 = "STAR";

1515 
PLUS
:

1516 
p
 = "PLUS";

1519 
	`ªgîr‹
("corrupted opcode\n");

1522 i‡(
p
 !(*)
NULL
)

1524 
	`°rˇt
(
buf
, 
p
);

1526  (
buf
);

1527 
	}
}

1536 #ifde‡
STRCSPN


1541 
	$°rc•n
(*
s1
, *
s2
)

1543 *
sˇn1
;

1544 *
sˇn2
;

1545 
cou¡
;

1547 
cou¡
 = 0;

1548 
sˇn1
 = 
s1
; *scan1 != '\0'; scan1++)

1550 
sˇn2
 = 
s2
; *scan2 != '\0';)

1552 i‡(*
sˇn1
 =*
sˇn2
++)

1554  (
cou¡
);

1556 
cou¡
++;

1558  (
cou¡
);

1559 
	}
}

1566 *
	$ªgsub
(
ªgexp
 *
¥og
, *
sour˚
, *
de°
, 
n
)

1568 *
§c
;

1569 *
d°
;

1570 
c
;

1571 
no
;

1572 
Àn
;

1574 i‡(
¥og
 =(
ªgexp
*)
NULL
 || 
sour˚
 =(*)NULL || 
de°
 == (*)NULL)

1576 
	`ªgîr‹
("NULLÖarmÅoÑegsub\n");

1577  
NULL
;

1579 i‡(
	`UCHARAT
(
¥og
->
¥ogøm
Ë!
MAGIC
)

1581 
	`ªgîr‹
("damagedÑegexp fedÅoÑegsub\n");

1582  
NULL
;

1584 
§c
 = 
sour˚
;

1585 
d°
 = 
de°
;

1586  (
c
 = *
§c
++) != '\0')

1588 i‡(
c
 == '&')

1590 
no
 = 0;

1592 i‡(
c
 ='\\' && '0' <*
§c
 && *src <= '9')

1594 
no
 = *
§c
++ - '0';

1598 
no
 = - 1;

1601 i‡(
no
 < 0)

1604 i‡(
c
 ='\\' && (*
§c
 == '\\' || *src == '&') )

1606 
c
 = *
§c
++;

1608 i‡(--
n
 < 0)

1611 
	`ªgîr‹
("lineÅooÜong\n");

1612  
NULL
;

1614 *
d°
++ = 
c
;

1616 i‡(
¥og
->
°¨ç
[
no
] !(*)
NULL
 &&Örog->
ídp
[no] != (*)NULL)

1618 
Àn
 = 
¥og
->
ídp
[
no
] -Örog->
°¨ç
[no];

1619 i‡–(
n
 -
Àn
) < 0)

1622 
	`ªgîr‹
("OSÉrror:ÜineÅooÜong\n");

1623  
NULL
;

1625 
	`°∫˝y
(
d°
, 
¥og
->
°¨ç
[
no
], 
Àn
);

1626 
d°
 +
Àn
;

1627 i‡(
Àn
 !0 && *(
d°
 - 1) == '\0')

1630 
	`ªgîr‹
("OSÉrror: damaged match string\n");

1631  
NULL
;

1635 i‡(--
n
 < 0)

1638 
	`ªgîr‹
("OSÉrror:ÜineÅooÜong\n");

1639  
NULL
;

1641 *
d°
 = '\0';

1642  
d°
;

1643 
	}
}

	@src/replace_program.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"ª∂a˚_¥ogøm.h
"

4 
	~"simul_efun.h
"

5 
	~"sw≠.h
"

14 
ª∂a˚_ob_t
 *
	gobj_li°_ª∂a˚
 = 0;

16 
¥ogøm_t
 *
£¨ch_öhîôed
(*,Örogram_t *, *);

17 
ª∂a˚_ob_t
 *
ªåõve_ª∂a˚_¥ogøm_íåy
();

19 
	$ª∂a˚_¥ogøms
()

21 
ª∂a˚_ob_t
 *
r_ob
, *
r_√xt
;

22 
i
, 
num_„wî
, 
off£t
;

23 
svÆue_t
 *
svp
;

25 #ifde‡
DEBUG


26 i‡(
d_Êag
)

28 
	`debug_mesßge
("start ofÑeplace_programs\n");

31 
r_ob
 = 
obj_li°_ª∂a˚
;Ñ_ob;Ñ_ob = 
r_√xt
)

33 
¥ogøm_t
 *
ﬁd_¥og
;

35 #ifde‡
_USE_SWAP_H_


36 i‡(
r_ob
->
ob
->
Êags
 &
O_SWAPPED
)

38 
	`lﬂd_ob_‰om_sw≠
(
r_ob
->
ob
);

41 
num_„wî
 = 
r_ob
->
ob
->
¥og
->
num_v¨übÀs_tŸÆ
 -Ñ_ob->
√w_¥og
->num_variables_total;

42 #ifde‡
DEBUG


43 i‡(
d_Êag
)

45 
	`debug_mesßge
("%dÜes†v¨übÀs\n", 
num_„wî
);

48 
tŸ_Æloc_obje˘_size
 -
num_„wî
 * (
svÆue_t
[1]);

49 i‡–(
off£t
 = 
r_ob
->
v¨_off£t
) )

51 
svp
 = 
r_ob
->
ob
->
v¨übÀs
;

53 
i
 = 0; i < 
r_ob
->
√w_¥og
->
num_v¨übÀs_tŸÆ
; i++)

55 
	`‰ì_svÆue
(
svp
, "replace_programs");

56 *
svp
 = *(sv∞+ 
off£t
);

57 *(
svp
 + 
off£t
Ë
c⁄°0u
;

58 
svp
++;

61 
i
 = 0; i < 
num_„wî
; i++)

63 
	`‰ì_svÆue
(
svp
, "replace_programs");

64 *
svp
++ = 
c⁄°0u
;

70 
svp
 = &
r_ob
->
ob
->
v¨übÀs
[r_ob->
√w_¥og
->
num_v¨übÀs_tŸÆ
];

71 
i
 = 0; i < 
num_„wî
; i++)

73 
	`‰ì_svÆue
(
svp
, "replace_programs");

74 *
svp
++ = 
c⁄°0u
;

78 
r_ob
->
√w_¥og
->
ªf
++;

79 
ﬁd_¥og
 = 
r_ob
->
ob
->
¥og
;

80 
r_ob
->
ob
->
¥og
 =Ñ_ob->
√w_¥og
;

81 
r_√xt
 = 
r_ob
->
√xt
;

82 
	`‰ì_¥og
(
ﬁd_¥og
, 1);

83 #ifde‡
DEBUG


84 i‡(
d_Êag
)

86 
	`debug_mesßge
("program freed.\n");

89 
	`FREE
–(*)
r_ob
);

91 
obj_li°_ª∂a˚
 = (
ª∂a˚_ob_t
*)0;

92 #ifde‡
DEBUG


93 i‡(
d_Êag
)

95 
	`debug_mesßge
("OS debug:Énd ofÑeplace_programs\n");

98 
	}
}

104 #ifde‡
F_REPLACE_PROGRAM


105 
¥ogøm_t
 *
	$£¨ch_öhîôed
(*
°r
, 
¥ogøm_t
 *
¥g
, *
ofÂ¡
)

107 
¥ogøm_t
 *
tmp
;

108 
i
;

110 #ifde‡
DEBUG


111 i‡(
d_Êag
)

113 
	`debug_mesßge
("OS debug: search_inherited started\n");

114 
	`debug_mesßge
("OS debug: sórchög f‹ PRG(/%sËö PRG(/%s)\n", 
°r
, 
¥g
->
«me
);

115 
	`debug_mesßge
("OS debug:num_öhîôed=%d\n", 
¥g
->
num_öhîôed
);

118 
i
 = 0; i < ()
¥g
->
num_öhîôed
; i++)

120 #ifde‡
DEBUG


121 i‡(
d_Êag
)

123 
	`debug_mesßge
("OS debug: index %d:\n", 
i
);

124 
	`debug_mesßge
("OS debug: checkög PRG(/%s)\n", 
¥g
->
öhîô
[
i
].
¥og
->
«me
);

127 i‡(
	`°rcmp
(
°r
, 
¥g
->
öhîô
[
i
].
¥og
->
«me
) == 0)

129 #ifde‡
DEBUG


130 i‡(
d_Êag
)

132 
	`debug_mesßge
("OS debug: match found\n");

135 *
ofÂ¡
 = 
¥g
->
öhîô
[
i
].
v¨übÀ_ödex_off£t
;

136  
¥g
->
öhîô
[
i
].
¥og
;

138 i‡–(
tmp
 = 
	`£¨ch_öhîôed
(
°r
, 
¥g
->
öhîô
[
i
].
¥og
, 
ofÂ¡
) ) )

140 #ifde‡
DEBUG


141 i‡(
d_Êag
)

143 
	`debug_mesßge
("OS debug: deferred match found\n");

146 *
ofÂ¡
 +
¥g
->
öhîô
[
i
].
v¨übÀ_ödex_off£t
;

147  
tmp
;

150 #ifde‡
DEBUG


151 i‡(
d_Êag
)

153 
	`debug_mesßge
("OS debug: search_inherited failed\n");

156  (
¥ogøm_t
*)0;

157 
	}
}

159 
ª∂a˚_ob_t
 *
	$ªåõve_ª∂a˚_¥ogøm_íåy
()

161 
ª∂a˚_ob_t
 *
r_ob
;

163 
r_ob
 = 
obj_li°_ª∂a˚
;Ñ_ob;Ñ_ob =Ñ_ob->
√xt
)

165 i‡(
r_ob
->
ob
 =
cuºít_obje˘
)

167  
r_ob
;

171 
	}
}

173 
	$f_ª∂a˚_¥ogøm
(
num_¨g
, 
ö°ru˘i⁄
)

175 
ª∂a˚_ob_t
 *
tmp
;

176 
«me_Àn
;

177 *
«me
, *
x«me
;

178 
¥ogøm_t
 *
√w_¥og
;

179 
v¨_off£t
;

181 ()
num_¨g
;

182 i‡(
•
->
ty≥
 !
T_STRING
)

184 
	`bad_¨g
(1, 
ö°ru˘i⁄
);

186 #ifde‡
DEBUG


187 i‡(
d_Êag
)

189 
	`debug_mesßge
("OS debug:Ñeplace_program called\n");

192 i‡(!
cuºít_obje˘
)

194 
	`îr‹
("OSÉrror:Ñeplace_program called withÇo current object\n");

196 i‡(
cuºít_obje˘
 =
simul_efun_ob
)

198 
	`îr‹
("OSÉrror:Ñeplace_program on simul_efun object\n");

201 i‡(
cuºít_obje˘
->
¥og
->
func_ªf
)

203 
	`îr‹
("OSÉrror: cannotÑeplaceáÖrogram with functionÑeferences.\n");

206 
«me_Àn
 = 
	`°æí
(
•
->
u
.
°rög
);

207 
«me
 = (*)
	`DMALLOC
(
«me_Àn
 + 3, 
TAG_TEMPORARY
, "replace_program");

208 
x«me
 = 
«me
;

209 
	`°r˝y
(
«me
, 
•
->
u
.
°rög
);

210 i‡(
«me
[
«me_Àn
 - 2] != '.' ||Çame[name_len - 1] != 'c')

212 
	`°rˇt
(
«me
, ".c");

214 i‡(*
«me
 == '/')

216 
«me
++;

218 
√w_¥og
 = 
	`£¨ch_öhîôed
(
«me
, 
cuºít_obje˘
->
¥og
, &
v¨_off£t
);

219 
	`FREE
(
x«me
);

220 i‡(!
√w_¥og
)

222 
	`îr‹
("OSÉrror:ÖrogramÅoÑeplaceÅhe current with hasÅo be inherited\n");

224 i‡(!(
tmp
 = 
	`ªåõve_ª∂a˚_¥ogøm_íåy
() ) )

226 
tmp
 = 
	`ALLOCATE
(
ª∂a˚_ob_t
, 
TAG_TEMPORARY
, "replace_program");

227 
tmp
->
ob
 = 
cuºít_obje˘
;

228 
tmp
->
√xt
 = 
obj_li°_ª∂a˚
;

229 
obj_li°_ª∂a˚
 = 
tmp
;

231 
tmp
->
√w_¥og
 =Çew_prog;

232 
tmp
->
v¨_off£t
 = var_offset;

233 #ifde‡
DEBUG


234 i‡(
d_Êag
)

236 
	`debug_mesßge
("OS debug:Ñeplace_program finished\n");

239 
	`‰ì_°rög_svÆue
(
•
--);

240 
	}
}

	@src/scratchpad.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"s¸©ch∑d.h
"

5 
	~"compûî.h
"

46 
	#Så
 ((*)
°r
)

	)

47 
	#På
 ((*)
±r
)

	)

48 
	#Res
 ((*)
ªs
)

	)

49 
	#S1
 ((*)
s1
)

	)

50 
	#S2
 ((*)
s2
)

	)

51 
	#S¸©ch_œrge_Æloc
(
x
Ë((*)
	`s¸©ch_œrge_Æloc
(x))

	)

52 
	#SåÀn
(
x
Ë(
	`°æí
((*)x))

	)

53 
	#Så˝y
(
x
, 
y
Ë(
	`°r˝y
((*)x, (*)y))

	)

54 
	#Sån˝y
(
x
, 
y
, 
z
Ë(
	`°∫˝y
((*)x, (*)y, z))

	)

57 
	#HDR_SIZE
 ((*)&
s¸©ch_hód
.
block
[2] - (*)&s¸©ch_hód)

	)

58 
	#FIND_HDR
(
x
Ë((
•_block_t
 *)(x - 
HDR_SIZE
))

	)

59 
	#SIZE_WITH_HDR
(
x
Ë(x + 
HDR_SIZE
)

	)

61 
	gs¸©chblock
[
SCRATCHPAD_SIZE
];

62 
•_block_t
 
	gs¸©ch_hód
 =

69 *
	gs¸_œ°
 = &
s¸©chblock
[2], *
	gs¸_èû
 = &scratchblock[2];

70 *
	gs¸©ch_íd
 = 
s¸©chblock
 + 
SCRATCHPAD_SIZE
;

73 
s¸©ch_summ¨y
();

75 
	$s¸©ch_summ¨y
()

77 *
p
 = 
s¸©chblock
;

78 
i
;

80 
p
 <
s¸_èû
)

82 i‡(*
p
 == 0)

84 
	`¥ötf
("0");

86 i‡(*
p
 < 32 || *p > 127)

88 
	`¥ötf
("*");

92 
	`¥ötf
("%c", *
p
);

94 
p
++;

96 
	`¥ötf
("\n");

97 
i
 = 
s¸_œ°
 - 
s¸©chblock
;

98 
i
--)

100 
	`¥ötf
(" ");

102 
	`¥ötf
("l\n");

103 
i
 = 
s¸_èû
 - 
s¸©chblock
;

104 
i
--)

106 
	`¥ötf
(" ");

108 
	`¥ötf
("t\n");

109 
	}
}

112 
	$s¸©ch_de°roy
()

114 
•_block_t
 *
√xt
, *
this
 = 
s¸©ch_hód
.next;

116 
	`SDEBUG
(
	`¥ötf
("OS debug: scratch_destroy\n") );

118 
this
)

120 
√xt
 = 
this
->next;

121 
	`FREE
(
this
);

122 
this
 = 
√xt
;

124 
s¸©ch_hód
.
√xt
 = 0;

125 
s¸_œ°
 = &
s¸©chblock
[2];

126 
s¸_èû
 = &
s¸©chblock
[2];

127 
	}
}

134 *
	$s¸©ch_c›y
(*
°r
)

136 *
‰om
, *
to
, *
íd
;

138 
	`SDEBUG2
(
	`¥ötf
("OS debug: s¸©ch_c›y(%s):", 
°r
) );

141 
‰om
 = 
Så
;

142 
to
 = 
s¸_èû
 + 1;

143 
íd
 = 
s¸©ch_íd
 - 2;

144 i‡(
íd
 > 
to
 + 255)

146 
íd
 = 
to
 + 255;

148 *
‰om
 && 
to
 < 
íd
)

150 *
to
++ = *
‰om
++;

152 i‡(!(*
‰om
) )

154 
	`SDEBUG2
(
	`¥ötf
(" on scratchpad\n") );

156 
s¸_œ°
 = 
s¸_èû
 + 1;

157 *
to
++ = 0;

158 
s¸_èû
 = 
to
;

159 *
to
 =Åÿ- 
s¸_œ°
;

160  (*)
s¸_œ°
;

162 
	`SDEBUG
(
	`¥ötf
("OS mallocing ... ") );

165 
to
 = 
	`S¸©ch_œrge_Æloc
–(
‰om
 - 
Så
Ë+ 
	`SåÀn
(from) + 1);

166 
	`Så˝y
(
to
, 
°r
);

167  (*)
to
;

168 
	}
}

174 
	$s¸©ch_‰ì
(*
±r
)

181 
	`SDEBUG2
(
	`¥ötf
("OS debug: s¸©ch_‰ì(%s): ", 
±r
) );

183 i‡(
På
 =
s¸_œ°
)

185 
	`SDEBUG2
(
	`¥ötf
("OS debug:Üast freed\n") );

186 
	`s¸©ch_‰ì_œ°
();

188 i‡(*(
På
 - 2) )

190 
•_block_t
 *
sbt
;

192 
	`DEBUG_CHECK
(*(
På
 - 2Ë!
SCRATCH_MAGIC
, "scratch_free called onÇon-scratchpad string.\n");

193 
	`SDEBUG
(
	`¥ötf
("QtzOS debug:block freed\n") );

194 
sbt
 = 
	`FIND_HDR
(
±r
);

195 i‡(
sbt
->
¥ev
)

197 
sbt
->
¥ev
->
√xt
 = sbt->next;

199 i‡(
sbt
->
√xt
)

201 
sbt
->
√xt
->
¥ev
 = sbt->prev;

203 
	`FREE
(
sbt
);

207 
	`SDEBUG
(
	`¥ötf
("QtzOS debug: interior free\n") );

208 *
±r
 = 0;

210 
	}
}

216 *
	$s¸©ch_œrge_Æloc
(
size
)

218 
•_block_t
 *
•t
;

219 
	`SDEBUG
(
	`¥ötf
("OS debug: s¸©ch_œrge_Æloc(%i)\n", 
size
) );

221 
•t
 = (
•_block_t
*)
	`DMALLOC
(
	`SIZE_WITH_HDR
(
size
), 
TAG_COMPILER
, "scratch_alloc");

222 i‡–(
•t
->
√xt
 = 
s¸©ch_hód
.next) )

224 
•t
->
√xt
->
¥ev
 = spt;

226 
•t
->
¥ev
 = (
•_block_t
*Ë&
s¸©ch_hód
;

227 
•t
->
block
[0] = 
SCRATCH_MAGIC
;

228 
s¸©ch_hód
.
√xt
 = 
•t
;

229  (*Ë&
•t
->
block
[2];

230 
	}
}

233 *
	$s¸©ch_ªÆloc
(*
±r
, 
size
)

235 
	`SDEBUG
(
	`¥ötf
("s¸©ch_ªÆloc(%s): ", 
±r
) );

237 i‡(
På
 =
s¸_œ°
)

239 i‡(
size
 < 256 && (
s¸_œ°
 + sizeË< 
s¸©ch_íd
)

241 
	`SDEBUG
(
	`¥ötf
("on scratchpad\n") );

242 
s¸_èû
 = 
s¸_œ°
 + 
size
;

243 *
s¸_èû
 = 
size
;

244  
±r
;

248 *
ªs
;

249 
	`SDEBUG
(
	`¥ötf
("copy off ... ") );

250 
ªs
 = 
	`s¸©ch_œrge_Æloc
(
size
);

251 
	`°r˝y
(
ªs
, 
±r
);

252 
	`s¸©ch_‰ì_œ°
();

253  
ªs
;

256 i‡(*(
På
 - 2) )

258 
•_block_t
 *
sbt
, *
√wsbt
;

260 
	`DEBUG_CHECK
(*(
På
 - 2Ë!
SCRATCH_MAGIC
, "scratch_realloc onÇon-scratchpad string.\n");

261 
	`SDEBUG
(
	`¥ötf
("block\n") );

262 
sbt
 = 
	`FIND_HDR
(
±r
);

263 
√wsbt
 = (
•_block_t
*)
	`DREALLOC
(
sbt
, 
	`SIZE_WITH_HDR
(
size
), 
TAG_COMPILER
, "scratch_realloc");

264 
√wsbt
->
¥ev
->
√xt
 =Çewsbt;

265 i‡(
√wsbt
->
√xt
)

267 
√wsbt
->
√xt
->
¥ev
 =Çewsbt;

269  (*Ë&
√wsbt
->
block
[2];

273 *
ªs
;

275 
	`SDEBUG
(
	`¥ötf
("interior ... ") );

277 i‡(
size
 < 256 && (
s¸_èû
 + sizê+ 1Ë< 
s¸©ch_íd
)

279 
	`SDEBUG
(
	`¥ötf
("moveÅoÉnd\n") );

280 
s¸_œ°
 = 
s¸_èû
 + 1;

281 
	`Så˝y
(
s¸_œ°
, 
±r
);

282 
s¸_èû
 = 
s¸_œ°
 + 
size
;

283 *
s¸_èû
 = 
size
;

284 
ªs
 = (*)
s¸_œ°
;

288 
	`SDEBUG
(
	`¥ötf
("copy off ... ") );

289 
ªs
 = 
	`s¸©ch_œrge_Æloc
(
size
);

290 
	`°r˝y
(
ªs
, 
±r
);

292 *
±r
 = 0;

293  
ªs
;

295 
	}
}

298 *
	$s¸©ch_Æloc
(
size
)

300 
	`SDEBUG
(
	`¥ötf
("s¸©ch_Æloc(%i)\n", 
size
) );

301 i‡(
size
 < 256 && (
s¸_èû
 + sizê+ 1Ë< 
s¸©ch_íd
)

303 
s¸_œ°
 = 
s¸_èû
 + 1;

304 
s¸_èû
 = 
s¸_œ°
 + 
size
;

305 *
s¸_èû
 = 
size
;

306  (*)
s¸_œ°
;

310  
	`s¸©ch_œrge_Æloc
(
size
);

312 
	}
}

318 *
	$s¸©ch_joö
(*
s1
, *
s2
)

320 *
ªs
;

321 
tmp
;

323 
	`SDEBUG
(
	`¥ötf
("scratch_join\n") );

324 i‡(*(
s1
 - 2Ë|| *(
s2
 - 2) )

326 
l
 = 
	`°æí
(
s1
);

328 
	`DEBUG_CHECK
(*(
S1
 - 2Ë&& *(S1 - 2Ë!
SCRATCH_MAGIC
, "argument 1Åo scratch_join wasÇotá scratchpad string.\n");

329 
	`DEBUG_CHECK
(*(
S2
 - 2Ë&& *(S2 - 2Ë!
SCRATCH_MAGIC
, "argument 2Åo scratch_join wasÇotá scratchpad string.\n");

331 
ªs
 = 
	`s¸©ch_ªÆloc
(
s1
, 
l
 + 
	`°æí
(
s2
) + 1);

332 
	`°r˝y
(
ªs
 + 
l
, 
s2
);

333 
	`s¸©ch_‰ì
(
s2
);

334  
ªs
;

340 
	`DEBUG_CHECK
(
S2
 !
s¸_œ°
, "Argument 2Åo scratch_join wasÇotÅheÜastállocated string.\n");

341 
	`DEBUG_CHECK
(
S1
 !(
s¸_œ°
 - 1-(*(scr_last - 1) ) ), "Argument 1Åo scratch_join wasÇotÅhe secondÅoÜastállocated string.\n");

343 i‡–(
tmp
 = ( (
s¸_èû
 - 
S1
) - 2) ) < 256)

345 
s¸_èû
 = 
s¸_œ°
 - 2;

348 *
s¸_èû
 = *(scr_tail + 2);

351 *
s¸_èû
++);

352 *
s¸_èû
 = 
tmp
;

353 
s¸_œ°
 = 
S1
;

354  
s1
;

358 *
ªt
 = 
	`s¸©ch_œrge_Æloc
(
tmp
);

359 
	`°r˝y
(
ªt
, 
s1
);

360 
	`°r˝y
(
ªt
 + (
s¸_œ°
 - 
S1
Ë- 2, 
s2
);

361 
	`s¸©ch_‰ì
(
s1
);

362 
	`s¸©ch_‰ì
(
s2
);

363  
ªt
;

366 
	}
}

372 *
	$s¸©ch_c›y_°rög
(*
s
)

374 
l
;

375 *
to
 = 
s¸_èû
 + 1;

376 *
ªs
;

378 
	`SDEBUG2
(
	`¥ötf
("scratch_copy_string\n") );

379 
l
 = 
s¸©ch_íd
 - 1-
to
;

380 i‡(
l
 > 255)

382 
l
 = 255;

384 
s
++;

385 
l
--)

387 i‡(*
s
 == '\\')

389 *++
s
)

392 *
to
++ = '\n';

395 *
to
++ = '\t';

398 *
to
++ = '\r';

401 *
to
++ = '\b';

405 *
to
++ = *
s
;

408 *
to
++ = *
s
;

409 
	`yyw¨n
("Unknown \\x char.");

411 
s
++;

413 i‡(*
s
 == '"')

415 
s¸_œ°
 = 
s¸_èû
 + 1;

416 *
to
++ = 0;

417 
s¸_èû
 = 
to
;

418 *
to
 =Åÿ- 
s¸_œ°
;

419  (*)
s¸_œ°
;

423 *
to
++ = *
s
++;

428 
l
 = 
to
 - 
s¸_èû
 + 
	`°æí
(
s
) - 1;

429 
ªs
 = 
	`s¸©ch_œrge_Æloc
(
l
);

430 
	`Sån˝y
(
ªs
, (
s¸_èû
 + 1), (
to
 - scr_tail) - 1);

431 
to
 = 
Res
 + (tÿ- 
s¸_èû
) - 1;

434 i‡(*
s
 == '\\')

436 *++
s
)

439 *
to
++ = '\n';

442 *
to
++ = '\t';

445 *
to
++ = '\r';

448 *
to
++ = '\b';

452 *
to
++ = *
s
;

455 *
to
++ = *
s
;

456 
	`yyw¨n
("Unknown \\x char.");

458 
s
++;

460 i‡(*
s
 == '"')

462 *
to
++ = 0;

463  
ªs
;

467 *
to
++ = *
s
++;

470 
	}
}

	@src/simul_efun.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"Àx.h
"

4 
	~"simul_efun.h
"

5 
	~"ŸabÀ.h
"

24 *
	m«me
;

25 
	mödex
;

26 } 
	tsimul_íåy
;

28 
simul_íåy
 *
	gsimul_«mes
 = 0;

29 
simul_öfo_t
 *
	gsimuls
 = 0;

30 
	gnum_simul_efun
 = 0;

31 
obje˘_t
 *
	gsimul_efun_ob
;

33 
föd_‹_add_simul_efun
(
¥ogøm_t
 *, , );

34 
ªmove_simuls
();

36 #ifde‡
DEBUGMALLOC_EXTENSIONS


37 
	$m¨k_simuls
()

39 
i
;

41 
i
 = 0; i < 
num_simul_efun
; i++)

43 
	`EXTRA_REF
(
	`BLOCK
(
simul_«mes
[
i
].
«me
) )++;

45 
	}
}

52 
	$öô_simul_efun
(*
fûe
)

54 
buf
[512];

55 
obje˘_t
 *
√w_ob
;

57 i‡(!
fûe
 || !file[0])

59 
	`Ârötf
(
°dîr
, "efunÉrror: No simul_efun\n");

62 i‡(!
	`°rù_«me
(
fûe
, 
buf
,  buf) )

64 
	`îr‹
("OSÉº‹: IÀgÆ simul_efu¿fûê«mê'%s'\n", 
fûe
);

68 i‡(
fûe
[
	`°æí
(file) - 2] != '.')

70 
	`°rˇt
(
buf
, ".c");

73 
√w_ob
 = 
	`lﬂd_obje˘
(
buf
, 
compûed_vîsi⁄
);

74 i‡(
√w_ob
 == 0)

76 
	`Ârötf
(
°dîr
, "OSÉº‹: Thêsimul_efu¿fûê%†wa†nŸÜﬂded.\n", 
buf
);

77 
	`exô
( - 1);

79 
	`£t_simul_efun
(
√w_ob
);

80 
	}
}

86 
	$ªmove_simuls
()

88 
i
;

89 
idít_hash_ñem_t
 *
ihe
;

91 
i
 = 0; i < 
num_simul_efun
; i++)

93 
simuls
[
i
].
ödex
 = 0;

94 
simuls
[
i
].
func
 = 0;

96 
i
 = 0; i < 
num_simul_efun
; i++)

98 i‡–(
ihe
 = 
	`lookup_idít
(
simul_«mes
[
i
].
«me
) ) )

100 i‡(
ihe
->
dn
.
simul_num
 != - 1)

102 
ihe
->
£m_vÆue
--;

104 
ihe
->
dn
.
simul_num
 = - 1;

105 
ihe
->
tokí
 &~
IHE_SIMUL
;

108 
	}
}

111 
	$gë_simul_efuns
(
¥ogøm_t
 *
¥og
)

113 
i
;

114 
num_√w
 = 
¥og
->
num_fun˘i⁄s_tŸÆ
;

116 i‡(
num_simul_efun
)

118 
	`ªmove_simuls
();

119 i‡(!
num_√w
)

121 
	`FREE
(
simul_«mes
);

122 
	`FREE
(
simuls
);

127 
simul_«mes
 = 
	`RESIZE
(simul_«mes, 
num_simul_efun
 + 
num_√w
, 
simul_íåy
, 
TAG_SIMULS
, "get_simul_efuns");

128 
simuls
 = 
	`RESIZE
(simuls, 
num_simul_efun
 + 
num_√w
, 
simul_öfo_t
, 
TAG_SIMULS
, "get_simul_efuns: 2");

133 i‡(
num_√w
)

135 
simul_«mes
 = 
	`CALLOCATE
(
num_√w
, 
simul_íåy
, 
TAG_SIMULS
, "get_simul_efuns");

136 
simuls
 = 
	`CALLOCATE
(
num_√w
, 
simul_öfo_t
, 
TAG_SIMULS
, "get_simul_efuns: 2");

139 
i
 = 0; i < 
num_√w
; i++)

141 
¥ogøm_t
 *
≈rog
;

142 
ödex
;

143 
ru¡ime_fun˘i⁄_u
 *
func_íåy
;

145 i‡(
¥og
->
fun˘i⁄_Êags
[
i
] &(
NAME_NO_CODE
 | 
NAME_STATIC
 | 
NAME_PRIVATE
) )

149 
≈rog
 = 
¥og
;

150 
ödex
 = 
i
;

151 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
≈rog
, 
ödex
);

153 
≈rog
->
fun˘i⁄_Êags
[
ödex
] &
NAME_INHERITED
)

155 
≈rog
 =Ç¥og->
öhîô
[
func_íåy
->
öh
.
off£t
].
¥og
;

156 
ödex
 = 
func_íåy
->
öh
.
fun˘i⁄_ödex_off£t
;

157 
func_íåy
 = 
	`FIND_FUNC_ENTRY
(
≈rog
, 
ödex
);

160 
	`föd_‹_add_simul_efun
(
≈rog
, 
func_íåy
->
def
.
f_ödex
, 
i
);

163 i‡(
num_simul_efun
)

166 
simul_«mes
 = 
	`RESIZE
(simul_«mes, 
num_simul_efun
, 
simul_íåy
, 
TAG_SIMULS
, "get_simul_efuns");

167 
simuls
 = 
	`RESIZE
(simuls, 
num_simul_efun
, 
simul_öfo_t
, 
TAG_SIMULS
, "get_simul_efuns");

169 
	}
}

175 
	#com∑ª_addrs
(
x
,
y
Ë(x < y ? -1 : (x > y ? 1 : 0))

	)

181 
	$föd_simul_efun
(*
«me
)

183 
fú°
 = 0;

184 
œ°
 = 
num_simul_efun
 - 1;

185 
i
, 
j
;

187 
fú°
 <
œ°
)

189 
j
 = (
fú°
 + 
œ°
) / 2;

190 
i
 = 
	`com∑ª_addrs
(
«me
, 
simul_«mes
[
j
].name);

191 i‡(
i
 == - 1)

193 
œ°
 = 
j
 - 1;

195 i‡(
i
 == 1)

197 
fú°
 = 
j
 + 1;

201  
simul_«mes
[
j
].
ödex
;

205 
	}
}

210 
	$föd_‹_add_simul_efun
(
¥ogøm_t
 *
¥og
, 
ödex
, 
ru¡ime_ödex
)

212 
idít_hash_ñem_t
 *
ihe
;

213 
fú°
 = 0;

214 
œ°
 = 
num_simul_efun
 - 1;

215 
i
, 
j
;

216 
compûî_fun˘i⁄_t
 *
fu≈
 = &
¥og
->
fun˘i⁄_èbÀ
[
ödex
];

218 
fú°
 <
œ°
)

220 
j
 = (
fú°
 + 
œ°
) / 2;

221 
i
 = 
	`com∑ª_addrs
(
fu≈
->
«me
, 
simul_«mes
[
j
].name);

222 i‡(
i
 == - 1)

224 
œ°
 = 
j
 - 1;

226 i‡(
i
 == 1)

228 
fú°
 = 
j
 + 1;

232 
ihe
 = 
	`föd_‹_add_≥rm_idít
(
simul_«mes
[
j
].
«me
);

233 
ihe
->
tokí
 |
IHE_SIMUL
;

234 
ihe
->
£m_vÆue
++;

235 
ihe
->
dn
.
simul_num
 = 
simul_«mes
[
j
].
ödex
;

236 
simuls
[
simul_«mes
[
j
].
ödex
].ödex = 
ru¡ime_ödex
;

237 
simuls
[
simul_«mes
[
j
].
ödex
].
func
 = 
fu≈
;

241 
i
 = 
num_simul_efun
 - 1; i > 
œ°
; i--)

243 
simul_«mes
[
i
 + 1] = simul_names[i];

245 
simuls
[
num_simul_efun
].
ödex
 = 
ru¡ime_ödex
;

246 
simuls
[
num_simul_efun
].
func
 = 
fu≈
;

247 
simul_«mes
[
fú°
].
«me
 = 
fu≈
->name;

248 
simul_«mes
[
fú°
].
ödex
 = 
num_simul_efun
;

249 
ihe
 = 
	`föd_‹_add_≥rm_idít
(
fu≈
->
«me
);

250 
ihe
->
tokí
 |
IHE_SIMUL
;

251 
ihe
->
£m_vÆue
++;

252 
ihe
->
dn
.
simul_num
 = 
num_simul_efun
++;

253 
	`ªf_°rög
(
fu≈
->
«me
);

254 
	}
}

257 
	$£t_simul_efun
(
obje˘_t
 *
ob
)

259 
	`gë_simul_efuns
(
ob
->
¥og
);

261 
simul_efun_ob
 = 
ob
;

262 
	`add_ªf
(
simul_efun_ob
, "set_simul_efun");

263 
	}
}

	@src/simulate.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"fûe_ö˛.h
"

5 
	~"backíd.h
"

6 
	~"simul_efun.h
"

7 
	~"compûî.h
"

8 
	~"ŸabÀ.h
"

9 
	~"comm.h
"

10 
	~"Àx.h
"

11 
	~"bö¨õs.h
"

12 
	~"sw≠.h
"

13 
	~"md.h
"

14 
	~"e›î©‹s.h
"

15 
	~"fûe.h
"

16 
	~"obje˘.h
"

24 *
	göhîô_fûe
;

28 
	gnum_obje˘s_this_thªad
 = 0;

30 
obje˘_t
 *
	gª°ri˘_de°ru˘
;

32 *
	gœ°_vîb
 = 0;

34 
	gûÀgÆ_£¡í˚_a˘i⁄
;

35 
obje˘_t
 *
	gobj_li°
, *
	gobj_li°_de°ru˘
 = 
NULL
;

36 
obje˘_t
 *
	gcuºít_obje˘
;

37 
obje˘_t
 *
	gcomm™d_givî
;

38 
obje˘_t
 *
	gcuºít_öãø˘ive
;

40 #ifde‡
PRIVS


41 
öô_¥ivs_f‹_obje˘
(
obje˘_t
*);

43 
svÆue_t
 *
lﬂd_vútuÆ_obje˘
(*);

44 *
make_√w_«me
(*);

46 
INLINE
 
	$check_ÀgÆ_°rög
(*
s
)

48 i‡(
	`°æí
(
s
Ë> 
LARGEST_PRINTABLE_STRING
)

50 
	`îr‹
("PröèbÀ såög†limôedÅÿÀngth o‡%d.\n", 
LARGEST_PRINTABLE_STRING
);

52 
	}
}

70 *
	$°Ωut
(*
x
, *
limô
, *
y
)

72  (*
x
++ = *
y
++) )

74 i‡(
x
 =
limô
)

76 *(
x
 - 1) = 0;

80  
x
 - 1;

81 
	}
}

87 *
	$°Ωut_öt
(*
x
, *
limô
, 
num
)

89 
buf
[20];

90 
	`•rötf
(
buf
, "%d", 
num
);

91  
	`°Ωut
(
x
, 
limô
, 
buf
);

92 
	}
}

98 #ifde‡
PRIVS


99 *
	g¥ivs_fûe_‚ame
 = (*)0;

101 
	$öô_¥ivs_f‹_obje˘
(
obje˘_t
 *
ob
)

103 
obje˘_t
 *
tmp_ob
;

104 
svÆue_t
 *
vÆue
;

106 i‡(!
ma°î_ob
)

108 
tmp_ob
 = 
ob
;

112 
tmp_ob
 = 
ma°î_ob
;

115 i‡(!
cuºít_obje˘
)

117 
ob
->
¥ivs
 = 
NULL
;

120 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
ob
->
«me
) );

121 i‡(!
¥ivs_fûe_‚ame
)

123 
¥ivs_fûe_‚ame
 = 
	`make_sh¨ed_°rög
(
APPLY_PRIVS_FILE
);

125 
vÆue
 = 
	`≠∂y
(
¥ivs_fûe_‚ame
, 
tmp_ob
, 1, 
ORIGIN_DRIVER
);

126 i‡(
vÆue
 =
NULL
 || vÆue->
ty≥
 !
T_STRING
)

128 
ob
->
¥ivs
 = 
NULL
;

132 
ob
->
¥ivs
 = 
	`make_sh¨ed_°rög
(
vÆue
->
u
.
°rög
);

134 
	}
}

138 
svÆue_t
 *
	$lﬂd_vútuÆ_obje˘
(*
«me
)

140 
svÆue_t
 *
v
;

142 i‡(!
ma°î_ob
)

146 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
«me
) );

147 
v
 = 
	`≠∂y_ma°î_ob
(
APPLY_COMPILE_OBJECT
, 1);

148 i‡(!
v
 || (v->
ty≥
 !
T_OBJECT
) )

152  
v
;

153 
	}
}

159 
	$£t_ma°î
(
obje˘_t
 *
ob
)

162 
ma°î_ob
 = 
ob
;

164 
	`add_ªf
(
ma°î_ob
, "set_master");

165 
	}
}

171 *
	$check_«me
(*
§c
)

173 *
p
;

174 *
§c
 == '/')

176 
§c
++;

178 
p
 = 
§c
;

179 *
p
)

181 i‡(*
p
 == '/' && *(p + 1) == '/')

185 
p
++;

187  
§c
;

188 
	}
}

194 
	$°rù_«me
(*
§c
, *
de°
, 
size
)

196 
œ°_c
 = 0;

197 *
p
 = 
de°
;

198 *
íd
 = 
de°
 + 
size
 - 1;

200 *
§c
 == '/')

202 
§c
++;

205 *
§c
 && 
p
 < 
íd
)

207 i‡(
œ°_c
 ='/' && *
§c
 == '/')

211 
œ°_c
 = (*
p
++ = *
§c
++);

227 
p
 - 
de°
 > 2 &&Ö[ - 1] == 'c' &&Ö[ - 2] == '.')

229 
p
 -= 2;

232 *
p
 = 0;

234 
	}
}

255 
obje˘_t
 *
	$öt_lﬂd_obje˘
(*
 ame
)

257 
f
;

258 
¥ogøm_t
 *
¥og
;

259 
obje˘_t
 *
ob
, *
ßve_comm™d_givî
 = 
comm™d_givî
;

260 
°©
 
c_°
;

261 
ªÆ_«me
[200], 
«me
[200];

264 i‡(++
num_obje˘s_this_thªad
 > 
INHERIT_CHAIN_SIZE
)

266 
	`îr‹
("OSÉº‹: Inhîô chaöÅoÿdìp: > %d whíÅryögÅÿlﬂd '%s'.\n", 
INHERIT_CHAIN_SIZE
, 
 ame
);

268 i‡(!
	`°rù_«me
(
 ame
, 
«me
, Çame) )

270 
	`îr‹
("OSÉº‹: Fûíame†wôh c⁄£cutivê/'†öÅhemáªn'àÆlowed (%s).\n", 
 ame
);

276 ()
	`°r˝y
(
ªÆ_«me
, 
«me
);

277 ()
	`°rˇt
(
ªÆ_«me
, ".c");

281 
b«me
[256];

282 *
pb«me
 = 
b«me
;

283 
	`•rötf
(
b«me
, "%s/%s.b", 
SAVE_BINARIES
, 
«me
);

284 i‡(
b«me
[0] == '/')

286 
pb«me
++;

289 i‡(
	`°©
(
pb«me
, &
c_°
Ë=- 1 && sèt(
ªÆ_«me
, &c_st) == - 1)

291 
	`debug_mesßge
("checkög fûê%s\n", 
pb«me
);

292 
num_obje˘s_this_thªad
--;

300 i‡(!
	`ÀgÆ_∑th
(
ªÆ_«me
) )

302 
	`debug_mesßge
("OS debug: IŒegÆÖ©h«me: /%s\n", 
ªÆ_«me
);

303 
	`îr‹
("OSÉº‹: IŒegÆÖ©hÇamê'/%s'.\n", 
ªÆ_«me
);

306 #ifde‡
BINARIES


307 i‡(!(
¥og
 = 
	`lﬂd_bö¨y
(
ªÆ_«me
, 
Õc_obj
ËË&& !
öhîô_fûe
)

311 i‡(
comp_Êag
)

313 
	`debug_mesßge
("OS debug: compûög /%†...", 
ªÆ_«me
);

314 #ifde‡
LATTICE


315 
	`fÊush
(
°dîr
);

318 
f
 = 
	`›í
(
ªÆ_«me
, 
O_RDONLY
);

319 i‡(
f
 == - 1)

321 
	`debug_≥º‹
("OS debug: compûe_fûe", 
ªÆ_«me
);

322 
	`îr‹
("OSÉº‹: CouldÇŸÑódÅhêfûê'/%s'.\n", 
ªÆ_«me
);

325 
¥og
 = 
	`compûe_fûe
(
f
, 
ªÆ_«me
);

327 i‡(
comp_Êag
)

329 
	`debug_mesßge
(" done\n");

331 
	`upd©e_compûe_av
(
tŸÆ_löes
);

332 
tŸÆ_löes
 = 0;

333 
	`˛o£
(
f
);

334 #ifde‡
BINARIES


339 i‡(
öhîô_fûe
 =0 && (
num_∑r£_îr‹
 > 0 || 
¥og
 == 0) )

341 i‡(
¥og
)

343 
	`‰ì_¥og
(
¥og
, 1);

345 i‡(
num_∑r£_îr‹
 =0 && 
¥og
 == 0)

347 
	`îr‹
("OSÉº‹: Nÿ¥ogøm i¿obje˘ '/%s'!\n", 
«me
);

349 
	`îr‹
("OSÉº‹: %d Eº‹ i¿lﬂdög obje˘ '/%s',\n", 
num_∑r£_îr‹
, 
«me
);

360 i‡(
öhîô_fûe
)

362 
obje˘_t
 *
öh_obj
;

363 
öhbuf
[
MAX_OBJECT_NAME_SIZE
];

366 i‡(!
	`°rù_«me
(
öhîô_fûe
, 
öhbuf
,  inhbuf) )

368 
	`°r˝y
(
öhbuf
, 
öhîô_fûe
);

370 
	`FREE
(
öhîô_fûe
);

371 
öhîô_fûe
 = 0;

374 i‡(
¥og
)

376 
	`‰ì_¥og
(
¥og
, 1);

377 
¥og
 = 0;

379 i‡(
	`°rcmp
(
öhbuf
, 
«me
) == 0)

381 
	`îr‹
("OSÉrror: IllegalÅo inherit self.\n");

384 i‡–(
öh_obj
 = 
	`lookup_obje˘_hash
(
öhbuf
) ) )

386 
	`IF_DEBUG
(
	`Áèl
("OS debug:Inherited object isálreadyÜoaded!") );

390 
öh_obj
 = 
	`lﬂd_obje˘
(
öhbuf
, 0);

392 i‡(!
öh_obj
)

394 
	`îr‹
("OSÉº‹: Inhîôed fûê'/%s' d€†nŸÉxi°!\n", 
öhbuf
);

403 i‡(!(
ob
 = 
	`lookup_obje˘_hash
(
«me
) ) )

405 
ob
 = 
	`lﬂd_obje˘
(
«me
, 0);

407 i‡(!
ob
)

409 
num_obje˘s_this_thªad
--;

412 
ob
->
lﬂd_time
 = 
cuºít_time
;

414 
num_obje˘s_this_thªad
--;

415  
ob
;

420 
ob
 = 
	`gë_em±y_obje˘
(
¥og
->
num_v¨übÀs_tŸÆ
);

422 
ob
->
«me
 = 
	`Æloc_c°rög
(name, "load_object");

423 
	`SET_TAG
(
ob
->
«me
, 
TAG_OBJ_NAME
);

424 
ob
->
¥og
 =Örog;

425 
ob
->
Êags
 |
O_WILL_RESET
;

426 
ob
->
√xt_Æl
 = 
obj_li°
;

427 
obj_li°
 = 
ob
;

428 
	`íãr_obje˘_hash
(
ob
);

430 
	`ˇŒ_¸óã
(
ob
, 0);

432 
comm™d_givî
 = 
ßve_comm™d_givî
;

433 #ifde‡
DEBUG


434 i‡(
d_Êag
 > 1 && 
ob
)

436 
	`debug_mesßge
("--/%†lﬂded\n", 
ob
->
«me
);

439 
ob
->
lﬂd_time
 = 
cuºít_time
;

440 
num_obje˘s_this_thªad
--;

441  
ob
;

442 
	}
}

448 *
	$make_√w_«me
(*
°r
)

450 
i
;

451 *
p
 = 
	`DXALLOC
(
	`°æí
(
°r
Ë+ 10, 
TAG_OBJ_NAME
, "make_new_name");

453 ()
	`•rötf
(
p
, "%s#%d", 
°r
, 
i
);

454 
i
++;

455  
p
;

456 
	}
}

463 
obje˘_t
 *
	$˛⁄e_obje˘
(*
°r1
, 
num_¨g
)

465 
obje˘_t
 *
ob
, *
√w_ob
;

466 
obje˘_t
 *
ßve_comm™d_givî
 = 
comm™d_givî
;

468 
num_obje˘s_this_thªad
 = 0;

469 
ob
 = 
	`föd_obje˘
(
°r1
);

470 i‡(
ob
 && !
	`obje˘_visibÀ
(ob) )

472 
ob
 = 0;

477 i‡(
ob
 == 0)

480 
	`p›_n_ñems
(
num_¨g
);

483 i‡(
ob
->
Êags
 &
O_CLONE
)

485 i‡(!(
ob
->
Êags
 &
O_VIRTUAL
Ë|| 
	`°ºchr
(
°r1
, '#') )

487 
	`îr‹
("OSÉrror: Cannot clone fromá clone\n");

495 
svÆue_t
 *
v
;

497 
	`p›_n_ñems
(
num_¨g
);

505 i‡(!(
°r1
 = 
	`check_«me
(str1) ) )

507 
	`îr‹
("OSÉº‹: Fûíame†wôh c⁄£cutivê/'†öÅhemáªn'àÆlowed (%s).\n", 
°r1
);

510 i‡(
ob
->
ªf
 == 1)

516 
√w_ob
 = 
ob
;

521 i‡(!(
v
 = 
	`lﬂd_vútuÆ_obje˘
(
°r1
) ) )

525 
√w_ob
 = 
v
->
u
.
ob
;

527 
	`ªmove_obje˘_hash
(
√w_ob
);

528 i‡(
√w_ob
->
«me
)

530 
	`FREE
(
√w_ob
->
«me
);

533 
√w_ob
->
«me
 = 
	`make_√w_«me
(
°r1
);

534 
	`íãr_obje˘_hash
(
√w_ob
);

535 
√w_ob
->
Êags
 |
O_VIRTUAL
;

536 
√w_ob
->
lﬂd_time
 = 
cuºít_time
;

537 
comm™d_givî
 = 
ßve_comm™d_givî
;

538  (
√w_ob
);

546 i‡(
ob
->
Êags
 &
O_HEART_BEAT
)

548 ()
	`£t_hóπ_bót
(
ob
, 0);

550 
√w_ob
 = 
	`gë_em±y_obje˘
(
ob
->
¥og
->
num_v¨übÀs_tŸÆ
);

551 
√w_ob
->
«me
 = 
	`make_√w_«me
(
ob
->name);

552 
√w_ob
->
Êags
 |(
O_CLONE
 | (
ob
->Êag†&(
O_WILL_CLEAN_UP
 | 
O_WILL_RESET
) ) );

553 
√w_ob
->
lﬂd_time
 = 
ob
->load_time;

554 
√w_ob
->
¥og
 = 
ob
->prog;

555 
	`ª„ªn˚_¥og
(
ob
->
¥og
, "clone_object");

558 
√w_ob
->
√xt_Æl
 = 
obj_li°
;

559 
obj_li°
 = 
√w_ob
;

560 
	`íãr_obje˘_hash
(
√w_ob
);

561 
	`ˇŒ_¸óã
(
√w_ob
, 
num_¨g
);

562 
comm™d_givî
 = 
ßve_comm™d_givî
;

564 i‡(
√w_ob
->
Êags
 &
O_DESTRUCTED
)

568  (
√w_ob
);

569 
	}
}

575 
	$öô_ma°î
(*
fûe
)

577 
buf
[512];

578 
obje˘_t
 *
√w_ob
;

580 i‡(!
fûe
 || !file[0])

582 
	`Ârötf
(
°dîr
, "OSÉrror: No master object specified in config file\n");

583 
	`exô
( - 1);

586 i‡(!
	`°rù_«me
(
fûe
, 
buf
,  buf) )

588 
	`îr‹
("OSÉº‹: IŒegÆ ma°î fûê«mê'%s'\n", 
fûe
);

592 i‡(
fûe
[
	`°æí
(file) - 2] != '.')

594 
	`°rˇt
(
buf
, ".c");

597 
√w_ob
 = 
	`lﬂd_obje˘
(
fûe
, 
compûed_vîsi⁄
);

598 i‡(
√w_ob
 == 0)

600 
	`Ârötf
(
°dîr
, "OSÉº‹: Thêma°î fûê%†wa†nŸÜﬂded.\n", 
fûe
);

601 
	`exô
( - 1);

603 
	`£t_ma°î
(
√w_ob
);

604 
	}
}

610 *
	gßved_ma°î_«me
;

611 *
	gßved_simul_«me
;

613 
	$fix_obje˘_«mes
()

615 
ma°î_ob
->
«me
 = 
ßved_ma°î_«me
;

616 
simul_efun_ob
->
«me
 = 
ßved_simul_«me
;

617 
	}
}

623 
	$de°ru˘_obje˘
(
obje˘_t
 *
ob
)

625 
obje˘_t
 **
µ
;

626 
ªmoved
;

628 i‡(
ª°ri˘_de°ru˘
 &&Ñe°ri˘_de°ru˘ !
ob
)

630 
	`îr‹
("OSÉrror: OnlyÅhis_object() can be destructed from move_or_destruct.\n");

633 #ifde‡
PACKAGE_PARSER


634 i‡(
ob
->
pöfo
)

636 
	`∑r£_‰ì
(
ob
->
pöfo
);

637 
ob
->
pöfo
 = 0;

641 i‡(
ob
->
Êags
 &
O_DESTRUCTED
)

645 #ifde‡
_USE_SWAP_H_


646 i‡(
ob
->
Êags
 &
O_SWAPPED
)

648 
	`lﬂd_ob_‰om_sw≠
(
ob
);

651 
	`ªmove_obje˘_‰om_°ack
(
ob
);

653 #ifde‡
DEBUG


654 i‡(
d_Êag
 > 1)

656 
	`debug_mesßge
("OS debug:Deobje˘_à/%†‘e‡%d)\n", 
ob
->
«me
, ob->
ªf
);

665 i‡(
ob
 =
ma°î_ob
 || ob =
simul_efun_ob
)

667 
obje˘_t
 *
√w_ob
;

668 *
tmp
 = 
ob
->
«me
;

670 (++
•
)->
ty≥
 = 
T_ERROR_HANDLER
;

671 
•
->
u
.
îr‹_h™dÀr
 = 
fix_obje˘_«mes
;

672 
ßved_ma°î_«me
 = 
ma°î_ob
->
«me
;

673 
ßved_simul_«me
 = 
simul_efun_ob
->
«me
;

677 
ob
->
«me
 = "";

680 
√w_ob
 = 
	`lﬂd_obje˘
(
tmp
, 
compûed_vîsi⁄
);

681 i‡(!
√w_ob
)

683 
ob
->
«me
 = 
tmp
;

684 
•
--;

685 
	`îr‹
("OSÉrror: Destruct on vital object failed:Çew copy failedÅoÑeload.");

688 
	`‰ì_obje˘
(
ob
, "vital objectÑeference");

689 i‡(
ob
 =
ma°î_ob
)

691 
	`£t_ma°î
(
√w_ob
);

693 i‡(
ob
 =
simul_efun_ob
)

695 
	`£t_simul_efun
(
√w_ob
);

701 
•
--;

702 
ob
->
«me
 = 
tmp
;

703 
tmp
 = 
√w_ob
->
«me
;

704 
√w_ob
->
«me
 = "";

705 
	`ªmove_obje˘_hash
(
ob
);

706 
√w_ob
->
«me
 = 
tmp
;

710 
	`ªmove_obje˘_hash
(
ob
);

717 
ªmoved
 = 0;

718 
µ
 = &
obj_li°
; *µ;Ö∞&(*µ)->
√xt_Æl
)

720 i‡(*
µ
 !
ob
)

724 *
µ
 = (*µ)->
√xt_Æl
;

725 
ªmoved
 = 1;

728 
	`DEBUG_CHECK
(!
ªmoved
, "FailedÅo delete object.\n");

731 
ob
->
√xt_Æl
 = 
obj_li°_de°ru˘
;

732 
obj_li°_de°ru˘
 = 
ob
;

734 
	`£t_hóπ_bót
(
ob
, 0);

735 
ob
->
Êags
 |
O_DESTRUCTED
;

736 
	}
}

741 
	$de°ru˘2
(
obje˘_t
 *
ob
)

743 
	`d©a_size
(
obje˘_t
 *
ob
);

745 #ifde‡
DEBUG


746 i‡(
d_Êag
 > 1)

748 
	`debug_mesßge
("OS debug:De°ru˘-2 obje˘ /%†‘e‡%d)\n", 
ob
->
«me
, ob->
ªf
);

760 i‡(
ob
->
¥og
->
num_v¨übÀs_tŸÆ
 > 0)

767 
i
;

769 
i
 = 0; i < ()
ob
->
¥og
->
num_v¨übÀs_tŸÆ
; i++)

773 
svÆue_t
 *
v
 = &
ob
->
v¨übÀs
[
i
];

774 i‡(
v
->
ty≥
 &
T_REFED
) {

775 
	`debug_mesßge
("OS debug:De°ru˘-2 obje˘ vÆuê/%†(ödex %d,Ñe‡%d)\n", 
ob
->
«me
, 
i
, 
v
->
u
.
ª„d
->
ªf
);

776 i‡(
v
->
u
.
ª„d
->
ªf
 > 1) {

777 
size
;

778 
buf
[10240 * 4];

779 
size
 = 
	`svÆue_ßve_size
(
v
) + 1;

780 *
	`ßve_v¨übÀ_2
(
svÆue_t
 *
v¨
, *
ªt
);

781 
	`ßve_v¨übÀ_2
(
v
, 
buf
);

782 
	`debug_mesßge
("OS debug:De°ru˘-2 obje˘ vÆuê/%s: %s", 
ob
->
«me
, 
buf
);

786 
	`‰ì_svÆue
(&
ob
->
v¨übÀs
[
i
], "destruct2");

787 
ob
->
v¨übÀs
[
i
] = 
c⁄°0u
;

790 
	`‰ì_obje˘
(
ob
, "destruct_object");

791 
	}
}

800 
obje˘_t
 *
	$föd_obje˘
(*
°r
)

802 
obje˘_t
 *
ob
;

803 
tmpbuf
[
MAX_OBJECT_NAME_SIZE
];

806 i‡(!
	`°rù_«me
(
°r
, 
tmpbuf
, Åmpbuf) )

808 
	`¥ötf
("strip_name faint.\n");

812 i‡–(
ob
 = 
	`lookup_obje˘_hash
(
tmpbuf
) ) )

815 #ifde‡
_USE_SWAP_H_


816 i‡(
ob
->
Êags
 &
O_SWAPPED
)

818 
	`lﬂd_ob_‰om_sw≠
(
ob
);

821  
ob
;

824 
ob
 = 
	`lﬂd_obje˘
(
tmpbuf
, 0);

825 i‡(!
ob
 || (ob->
Êags
 &
O_DESTRUCTED
) )

827 
	`¥ötf
("%†O_DESTRUCTED 2 faöt.\n", 
tmpbuf
);

831 #ifde‡
_USE_SWAP_H_


832 i‡(
ob
 && ob->
Êags
 &
O_SWAPPED
)

834 
	`lﬂd_ob_‰om_sw≠
(
ob
);

837  
ob
;

838 
	}
}

841 
obje˘_t
 *
	$föd_obje˘2
(*
°r
)

843 
obje˘_t
 *
ob
;

844 
p
[
MAX_OBJECT_NAME_SIZE
];

846 i‡(!
	`°rù_«me
(
°r
, 
p
, Ö) )

851 i‡–(
ob
 = 
	`lookup_obje˘_hash
(
p
) ) )

854 #ifde‡
_USE_SWAP_H_


855 i‡(
ob
->
Êags
 &
O_SWAPPED
)

857 
	`lﬂd_ob_‰om_sw≠
(
ob
);

860  
ob
;

863 
	}
}

869 
£¡í˚_t
 *
	g£¡_‰ì
 = 0;

870 
	gtŸ_Æloc_£¡í˚
;

876 #ifde‡
DEBUGMALLOC_EXTENSIONS


877 
	$m¨k_‰ì_£¡í˚s
()

879 
£¡í˚_t
 *
£¡
 = 
£¡_‰ì
;

881 #ifde‡
PRIVS


882 i‡(
¥ivs_fûe_‚ame
)

884 
	`EXTRA_REF
(
	`BLOCK
(
¥ivs_fûe_‚ame
) )++;

888 
£¡
)

890 
	`DO_MARK
(
£¡
, 
TAG_SENTENCE
);

897 
£¡
 = sít->
√xt
;

899 
	}
}

902 
	$‰ì_£¡í˚
(
£¡í˚_t
 *
p
)

904 i‡(
p
->
Êags
 &
V_FUNCTION
)

906 i‡(
p
->
fun˘i⁄
.
f
)

908 
	`‰ì_fu≈
(
p
->
fun˘i⁄
.
f
);

912 
p
->
fun˘i⁄
.
f
 = 0;

917 i‡(
p
->
fun˘i⁄
.
s
)

919 
	`‰ì_°rög
(
p
->
fun˘i⁄
.
s
);

923 
p
->
fun˘i⁄
.
s
 = 0;

926 
p
->
√xt
 = 
£¡_‰ì
;

927 
£¡_‰ì
 = 
p
;

928 
	}
}

934 
	$Áèl
(*
fmt
, ...)

936 
ö_Áèl
 = 0;

937 
msg_buf
[2049];

938 
va_li°
 
¨gs
;

939 
	`V_DCL
(*
fmt
);

941 i‡(
ö_Áèl
)

943 
	`debug_mesßge
("OS debug:FatalÉrror while shutting down. Aborting.\n");

947 
ö_Áèl
 = 1;

948 
	`V_START
(
¨gs
, 
fmt
);

949 
	`V_VAR
(*, 
fmt
, 
¨gs
);

950 
	`v•rötf
(
msg_buf
, 
fmt
, 
¨gs
);

951 
	`va_íd
(
¨gs
);

952 
	`debug_mesßge
("OS debug:******** FATAL ERROR: %s\nQTZ_SîvîEngöêdrivîáâem±ögÅÿexô gø˚fuŒy.\n", 
msg_buf
);

953 i‡(
cuºít_fûe
)

955 
	`debug_mesßge
("OS debug:(occuªd durög compû©i⁄ o‡%†©Üöê%d)\n", 
cuºít_fûe
, 
cuºít_löe
);

957 i‡(
cuºít_obje˘
)

959 
	`debug_mesßge
("OS debug:(cuºíàobje˘ wa†/%s)\n", 
cuºít_obje˘
->
«me
);

962 
	`dump_åa˚
(1);

964 
	`c›y_™d_push_°rög
(
msg_buf
);

965 i‡(
comm™d_givî
)

967 
	`push_obje˘
(
comm™d_givî
);

971 
	`push_undeföed
();

973 i‡(
cuºít_obje˘
)

975 
	`push_obje˘
(
cuºít_obje˘
);

979 
	`push_undeföed
();

981 
	`≠∂y_ma°î_ob
(
APPLY_CRASH
, 3);

982 
	`debug_mesßge
("OS debug:crash() in master called successfully. Aborting.\n");

985 #ifde‡
SIGABRT


986 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

988 #ifde‡
SIGILL


989 
	`sig«l
(
SIGILL
, 
SIG_DFL
);

991 #ifde‡
SIGIOT


992 
	`sig«l
(
SIGIOT
, 
SIG_DFL
);

995 #i‡!
	`deföed
(
DEBUG_NON_FATAL
Ë|| !deföed(
DEBUG
)

996 
	`ab‹t
();

998 
ö_Áèl
 = 0;

999 
	}
}

1005 
	gnum_îr‹
 = 0;

1007 #ifde‡
QTZ_SîvîEngöeLIB_ERROR_HANDLER


1008 
	gnum_QTZ_SîvîEngöñib_îr‹
 = 0;

1025 
	$throw_îr‹
()

1027 i‡––(
cuºít_îr‹_c⁄ãxt
->
ßve_c•
 + 1)->
‰ameköd
 &
FRAME_MASK
Ë=
FRAME_CATCH
)

1029 
	`LONGJMP
(
cuºít_îr‹_c⁄ãxt
->
c⁄ãxt
, 1);

1030 
	`Áèl
("OSÉrror: Throw_error failed!");

1032 
	`îr‹
("OSÉrror: Throw withÇo catch.\n");

1033 
	}
}

1039 
	$debug_mesßge_wôh_loˇti⁄
(*
îr
)

1041 i‡(
cuºít_obje˘
 && 
cuºít_¥og
)

1043 
	`debug_mesßge
("OS debug:%•rogøm: /%s, obje˘: /%s, fûe: %s\n", 
îr
, 
cuºít_¥og
->
«me
, 
cuºít_obje˘
->«me, 
	`gë_löe_numbî
(
pc
, current_prog) );

1045 i‡(
cuºít_obje˘
)

1047 
	`debug_mesßge
("OS debug:%•rogøm: (n⁄e), obje˘: /%s, fûe: (n⁄e)\n", 
îr
, 
cuºít_obje˘
->
«me
);

1051 
	`debug_mesßge
("OS debug:%•rogøm: (n⁄e), obje˘: (n⁄e), fûe: (n⁄e)\n", 
îr
);

1053 
	}
}

1060 #ifde‡
QTZ_SîvîEngöeLIB_ERROR_HANDLER


1061 
	gˇtch
 )

1063 
m≠pög_t
 *
	gm
;

1064 *
	gfûe
;

1065 
	glöe
;

1066 
svÆue_t
 *
	gmªt
;

1068 
	gm
 = 
Æloˇã_m≠pög
(6);

1069 
add_m≠pög_°rög
(
m
, "îr‹", 
îr
);

1070 i‡(
	gcuºít_¥og
)

1072 
add_m≠pög_°rög
(
m
, "¥ogøm", 
cuºít_¥og
->
«me
);

1074 i‡(
	gcuºít_obje˘
)

1076 
add_m≠pög_obje˘
(
m
, "obje˘", 
cuºít_obje˘
);

1078 
add_m≠pög_¨øy
(
m
, "åa˚", 
gë_svÆue_åa˚
() );

1079 
gë_löe_numbî_öfo
(&
fûe
, &
löe
);

1080 
add_m≠pög_°rög
(
m
, "fûe", 
fûe
);

1081 
add_m≠pög_∑ú
(
m
, "löe", 
löe
);

1083 
push_ª„d_m≠pög
(
m
);

1084 
	gˇtch
 )

1086 *(++
	g•
Ë
c⁄°1
;

1087 
	gmªt
 = 
≠∂y_ma°î_ob
(
APPLY_ERROR_HANDLER
, 2);

1091 
	gmªt
 = 
≠∂y_ma°î_ob
(
APPLY_ERROR_HANDLER
, 1);

1093 i‡–(
	gmªt
 =(
svÆue_t
*Ë- 1Ë|| !
mªt
)

1095 
debug_mesßge
("OS debug:NoÉrror handler forÉrror: ");

1096 
debug_mesßge_wôh_loˇti⁄
(
îr
);

1097 
dump_åa˚
(0);

1099 i‡(
	gmªt
->
	gty≥
 =
T_STRING
)

1101 
debug_mesßge
("%s", 
mªt
->
u
.
°rög
);

1106 
	$îr‹_h™dÀr
(*
îr
)

1108 #i‚de‡
QTZ_SîvîEngöeLIB_ERROR_HANDLER


1109 *
obje˘_«me
;

1113 
ª°ri˘_de°ru˘
 = 0;

1114 
num_obje˘s_this_thªad
 = 0;

1115 i‡(!
cuºít_îr‹_c⁄ãxt
)

1117 
	`debug_mesßge
("OS debug:current_error_context isÇull\n");

1118 i‡(
cuºít_obje˘
)

1120 
	`debug_mesßge
("cuºít_obje˘:%s\n", 
cuºít_obje˘
->
«me
);

1122 
	`shutdownOS
(163);

1125 i‡––(
cuºít_îr‹_c⁄ãxt
->
ßve_c•
 + 1)->
‰ameköd
 &
FRAME_MASK
Ë=
FRAME_CATCH
)

1128 #ifde‡
LOG_CATCHES


1130 #ifde‡
QTZ_SîvîEngöeLIB_ERROR_HANDLER


1131 i‡(
num_QTZ_SîvîEngöñib_îr‹
)

1133 
	`debug_mesßge
("OS debug:Error inÉrror handler: ");

1135 
	`debug_mesßge_wôh_loˇti⁄
(
îr
);

1136 ()
	`dump_åa˚
(0);

1137 #ifde‡
QTZ_SîvîEngöeLIB_ERROR_HANDLER


1138 
num_QTZ_SîvîEngöñib_îr‹
 = 0;

1142 
num_QTZ_SîvîEngöñib_îr‹
++;

1143 
	`QTZ_SîvîEngöñib_îr‹_h™dÀr
(
îr
, 1);

1144 
num_QTZ_SîvîEngöñib_îr‹
--;

1148 
	`‰ì_svÆue
(&
ˇtch_vÆue
, "caughtÉrror");

1149 
ˇtch_vÆue
.
ty≥
 = 
T_STRING
;

1150 
ˇtch_vÆue
.
subty≥
 = 
STRING_MALLOC
;

1151 
ˇtch_vÆue
.
u
.
°rög
 = 
	`°rög_c›y
(
îr
, "caughtÉrror");

1152 
	`LONGJMP
(
cuºít_îr‹_c⁄ãxt
->
c⁄ãxt
, 1);

1153 
	`Áèl
("Catch()Üongjump failed");

1155 
too_dìp_îr‹
 = 
max_evÆ_îr‹
 = 0;

1156 i‡(
num_îr‹
 > 0)

1159 
	`debug_mesßge
("OS debug:Eº‹ '%s' whûêåyögÅÿ¥öàîr‹Åø˚ --Åø˚ suµªs£d.\n", 
îr
);

1160 i‡(
cuºít_îr‹_c⁄ãxt
)

1162 
	`LONGJMP
(
cuºít_îr‹_c⁄ãxt
->
c⁄ãxt
, 1);

1164 
	`Áèl
("OSÉrror: LONGJMP failed orÇoÉrror context forÉrror.\n");

1166 
num_îr‹
++;

1167 #ifde‡
QTZ_SîvîEngöeLIB_ERROR_HANDLER


1168 i‡(
num_QTZ_SîvîEngöñib_îr‹
)

1170 
	`debug_mesßge
("Error inÉrror handler: ");

1171 
	`debug_mesßge_wôh_loˇti⁄
(
îr
);

1172 ()
	`dump_åa˚
(0);

1173 
num_QTZ_SîvîEngöñib_îr‹
 = 0;

1177 
num_QTZ_SîvîEngöñib_îr‹
++;

1178 
num_îr‹
--;

1179 
	`QTZ_SîvîEngöñib_îr‹_h™dÀr
(
îr
, 0);

1180 
num_QTZ_SîvîEngöñib_îr‹
--;

1181 
num_îr‹
++;

1183 i‡(
cuºít_hóπ_bót
)

1185 
	`£t_hóπ_bót
(
cuºít_hóπ_bót
, 0);

1186 
	`debug_mesßge
("OS debug:Hóπ bóàö %†tu∫ed off.\n", 
cuºít_hóπ_bót
->
«me
);

1188 
cuºít_hóπ_bót
 = 0;

1191 
	`debug_mesßge_wôh_loˇti⁄
(
îr
 + 1);

1192 #i‡
	`deföed
(
DEBUG
Ë&& deföed(
TRACE_CODE
)

1193 
obje˘_«me
 = 
	`dump_åa˚
(1);

1195 
obje˘_«me
 = 
	`dump_åa˚
(0);

1197 i‡(
obje˘_«me
)

1199 
obje˘_t
 *
ob
;

1201 
ob
 = 
	`föd_obje˘2
(
obje˘_«me
);

1202 i‡(!
ob
)

1204 
	`debug_mesßge
("mìàîr‹ whí OSÉxecutögÖrogøm i¿de°royed obje˘ /%s\n", 
obje˘_«me
);

1207 i‡(
cuºít_hóπ_bót
)

1209 
	`£t_hóπ_bót
(
cuºít_hóπ_bót
, 0);

1210 
	`debug_mesßge
("OS debug:Hóπ bóàö /%†tu∫ed off.\n", 
cuºít_hóπ_bót
->
«me
);

1212 
cuºít_hóπ_bót
 = 0;

1215 
num_îr‹
--;

1216 i‡(
cuºít_îr‹_c⁄ãxt
)

1218 
	`LONGJMP
(
cuºít_îr‹_c⁄ãxt
->
c⁄ãxt
, 1);

1220 
	`Áèl
("LONGJMP failed orÇoÉrror context forÉrror.\n");

1221 
	}
}

1227 
	$îr‹_√eds_‰ì
(*
s
)

1229 
îr_buf
[2048];

1230 
	`°∫˝y
(
îr_buf
 + 1, 
s
, 2047);

1231 
îr_buf
[0] = '*';

1232 
îr_buf
[2047] = '\0';

1233 
	`FREE_MSTR
(
s
);

1235 
	`îr‹_h™dÀr
(
îr_buf
);

1236 
	}
}

1242 
	$îr‹
(*
fmt
, ...)

1244 
îr_buf
[20480];

1245 
va_li°
 
¨gs
;

1246 
	`V_DCL
(*
fmt
);

1248 
	`V_START
(
¨gs
, 
fmt
);

1249 
	`V_VAR
(*, 
fmt
, 
¨gs
);

1250 
	`v•rötf
(
îr_buf
 + 1, 
fmt
, 
¨gs
);

1251 
	`va_íd
(
¨gs
);

1252 
îr_buf
[0] = '*';

1254 
	`îr‹_h™dÀr
(
îr_buf
);

1255 
	}
}

1260 
	gOS_is_beög_shut_down
;

1262 #ifde‡
SIGNAL_FUNC_TAKES_INT


1263 
	$°¨tshutdownOS
(
sig
)

1265 
	$°¨tshutdownOS
()

1268 #ifde‡
SIGNAL_FUNC_TAKES_INT


1269 ()
sig
;

1271 
OS_is_beög_shut_down
 = 1;

1272 
	}
}

1275 
	$¥e_shutdown
()

1278 
	}
}

1286 
	gShutDownTryTimes
 = 0;

1287 
	$shutdownOS
(
exô_code
)

1289 i‡(
ShutDownTryTimes
 > 0)

1291 
	`exô
(
exô_code
);

1293 
ShutDownTryTimes
++;

1295 
	`¥e_shutdown
();

1297 #ifde‡
LATTICE


1298 
	`sig«l
(
SIGUSR1
, 
SIG_IGN
);

1299 
	`sig«l
(
SIGTERM
, 
SIG_IGN
);

1300 
	`sig«l
(
SIGINT
, 
SIG_IGN
);

1301 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

1302 
	`sig«l
(
SIGALRM
, 
SIG_IGN
);

1304 
	`u∆ök_sw≠_fûe
();

1305 #ifde‡
PROFILING


1306 
	`m⁄ô‹
(0, 0, 0, 0, 0);

1309 
	`exô
(
exô_code
);

1310 
	}
}

1316 
	$¶ow_shut_down
(
möuãs
)

1321 
svÆue_t
 *
amo
;

1323 
	`push_numbî
(
möuãs
);

1324 
amo
 = 
	`≠∂y_ma°î_ob
(
APPLY_SLOW_SHUTDOWN
, 1);

1326 i‡(!
	`MASTER_APPROVED
(
amo
) )

1328 
obje˘_t
 *
ßve_cuºít
 = 
cuºít_obje˘
, *
ßve_comm™d
 = 
comm™d_givî
;

1330 
comm™d_givî
 = 0;

1331 
cuºít_obje˘
 = 0;

1332 
comm™d_givî
 = 
ßve_comm™d
;

1333 
cuºít_obje˘
 = 
ßve_cuºít
;

1334 #ifde‡
SIGNAL_FUNC_TAKES_INT


1335 
	`°¨tshutdownOS
(1);

1337 
	`°¨tshutdownOS
();

1341 
	}
}

1347 
	$do_mesßge
(
svÆue_t
 *
˛ass
 , svÆue_à*
msg
, 
¨øy_t
 *
sc›e
,áºay_à*
ex˛ude
, 
ªcur£
)

1393 
	}
}

	@src/smalloc.c

11 
	#IN_MALLOC_WRAPPER


	)

12 
	#NO_OPCODES


	)

13 
	~"°d.h
"

14 
	~"fûe_ö˛.h
"

15 
	~"Õc_ö˛.h
"

16 
	~"simuœã.h
"

17 
	~"comm.h
"

19 #i‡
deföed
(
•¨c
)

20 
	#MALLOC_ALIGN
 8

	)

22 
	#MALLOC_ALIGN
 4

	)

25 
	#POINTER
 *

	)

26 
	#FREE_RETURN_TYPE
 

	)

27 
	#FREE_RETURN
 ;

	)

28 
	#SFREE_RETURN_TYPE
 
FREE_RETURN_TYPE


	)

29 
	#SFREE_RETURN
 
FREE_RETURN


	)

31 
	#FIT_STYLE_FAST_FIT


	)

33 #unde‡
LARGE_TRACE


35 
	#Áke
(
s
)

	)

37 
	#SMALL_BLOCK_MAX_BYTES
 32

	)

38 
	#SMALL_CHUNK_SIZE
 0x4000

	)

39 
	#CHUNK_SIZE
 0x40000

	)

41 
	#SMALL_BLOCK_MAX
 (
SMALL_BLOCK_MAX_BYTES
/
SIZEOF_INT
)

	)

43 
	#PREV_BLOCK
 0x80000000

	)

44 
	#THIS_BLOCK
 0x40000000

	)

45 
	#NO_REF
 0x20000000

	)

46 
	#MASK
 0x0FFFFFFF

	)

48 
	#MAGIC
 0x17952932

	)

52 
	tu
;

54 
u
 *
	gœ°_smÆl_chunk
 = 0;

55 
u
 *
	gsÊèbÀ
[
SMALL_BLOCK_MAX
] =

59 
u
 *
	g√xt_unu£d
 = 0;

60 
u
 
	gunu£d_size
 = 0;

64 #i‚de‡
FIT_STYLE_FAST_FIT


65 
u
 *
	g‰ì_li°
 = 0;

67 
u
 *
	g°¨t_√xt_block
 = 0;

71 
	gsmÆl_cou¡
[
SMALL_BLOCK_MAX
] =

75 
	gsmÆl_tŸÆ
[
SMALL_BLOCK_MAX
] =

79 
	gsmÆl_max
[
SMALL_BLOCK_MAX
] =

83 
	gsmÆl_‰ì
[
SMALL_BLOCK_MAX
] =

90 
	mcou¡î
, 
	msize
;

91 } 
	tt_°©
;

93 
	#cou¡
(
a
,
b
Ë{á.
size
+=(b); i‡((b)<0Ë--a.
cou¡î
; ++a.cou¡î; }

	)

94 
	#cou¡_up
(
a
,
b
Ë{á.
size
+=(b); ++a.
cou¡î
; }

	)

95 
	#cou¡_back
(
a
,
b
Ë{á.
size
-=(b); --a.
cou¡î
; }

	)

98 
	gdebugmÆloc
 = 0;

105 *
œrge_mÆloc
(
u
, );

106 
œrge_‰ì
(*);

107 
mÆloc_size_mask
();

108 
mÆlo˚d_size
(
POINTER
);

109 
show_block
(
u
*);

110 
ªmove_‰om_‰ì_li°
(
u
*);

111 
add_to_‰ì_li°
(
u
*);

112 
buûd_block
(
u
 *, u);

113 
m¨k_block
(
u
*);

114 *
esbrk
(
u
);

115 
ªs‹t_‰ì_li°
();

116 #ifde‡
DEBUG


117 
wÆk_√w_smÆl_mÆlo˚d
((*) () );

120 
	#s_size_±r
(
p
Ë’)

	)

121 
	#s_√xt_±r
(
p
Ë((
u
 **Ë’+1))

	)

123 
t_°©
 
	gsmÆl_Æloc_°©
 =

127 
t_°©
 
	gsmÆl_‰ì_°©
 =

131 
t_°©
 
	gsmÆl_chunk_°©
 =

136 
POINTER
 
	$smÆloc_mÆloc
(
size_t
 
size
)

139 
u
 *
ãmp
;

141 
	`DEBUG_CHECK
(
size
 == 0, "Malloc size 0.\n");

142 i‡(
size
 > 
SMALL_BLOCK_MAX_BYTES
)

144  
	`œrge_mÆloc
(
size
, 0);

147 #i‡
SIZEOF_PTR
 > 
SIZEOF_INT


148 i‡(
size
 < 
SIZEOF_PTR
)

150 
size
 = 
SIZEOF_PTR
;

154 
size
 = (size + 7) &~3;

155 
	#SIZE_INDEX
(
u_¨øy
, 
size
Ë(*(
u
*Ë((*)u_¨øy-8+size))

	)

156 
	#SIZE_PNT_INDEX
(
u_¨øy
, 
size
Ë(*(
u
**)((*)u_¨øy-8+size))

	)

158 
	`cou¡_up
(
smÆl_Æloc_°©
, 
size
);

160 
	`SIZE_INDEX
(
smÆl_cou¡
, 
size
) += 1;

161 
	`SIZE_INDEX
(
smÆl_tŸÆ
, 
size
) += 1;

162 i‡(
	`SIZE_INDEX
(
smÆl_cou¡
, 
size
Ë> SIZE_INDEX(
smÆl_max
, size) )

164 
	`SIZE_INDEX
(
smÆl_max
, 
size
ËSIZE_INDEX(
smÆl_cou¡
, size);

167 i‡(
ãmp
 = 
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
size
) )

171 
	`cou¡_back
(
smÆl_‰ì_°©
, 
size
);

172 
ãmp
++;

173 
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
size
Ë*(
u
 **)
ãmp
;

174 
	`Áke
("From freeÜist.");

175  (*)
ãmp
;

177 i‡(
unu£d_size
 < 
size
)

183 i‡(
unu£d_size
)

185 
	`cou¡_up
(
smÆl_‰ì_°©
, 
unu£d_size
);

186 *
	`s_size_±r
(
√xt_unu£d
Ë
unu£d_size
 >> 2;

187 *
	`s_√xt_±r
(
√xt_unu£d
Ë
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
unu£d_size
);

188 
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
unu£d_size
Ë
√xt_unu£d
;

191 
	`Áke
("AllocatingÇew small chunk.");

192 
√xt_unu£d
 = (
u
*)
	`œrge_mÆloc
(
SMALL_CHUNK_SIZE
 + 
SIZEOF_PTR
, 1);

193 i‡(
√xt_unu£d
 == 0)

198 *
√xt_unu£d
 = (
u
)
œ°_smÆl_chunk
;

199 
œ°_smÆl_chunk
 = 
√xt_unu£d
++;

200 
	`cou¡_up
(
smÆl_chunk_°©
, 
SMALL_CHUNK_SIZE
 + 
SIZEOF_PTR
);

201 
	`cou¡_up
(
smÆl_Æloc_°©
, 
SIZEOF_PTR
);

202 
unu£d_size
 = 
SMALL_CHUNK_SIZE
;

206 
	`Áke
("Allocated from chunk.");

209 
ãmp
 = (
u
*)
	`s_√xt_±r
(
√xt_unu£d
);

210 *
	`s_size_±r
(
√xt_unu£d
Ë
size
 >> 2;

211 
unu£d_size
 -
size
;

212 i‡(
unu£d_size
 < (
SIZEOF_INT
 + 
SIZEOF_PTR
) )

214 
	`cou¡_up
(
smÆl_Æloc_°©
, 
unu£d_size
);

215 i‡–(
size
 + 
unu£d_size
Ë< (
SMALL_BLOCK_MAX_BYTES
 + 
SIZEOF_INT
) )

220 
size
 +
unu£d_size
;

221 *
	`s_size_±r
(
√xt_unu£d
Ë
size
 >> 2;

223 
unu£d_size
 = 0;

225 
√xt_unu£d
 +
size
 >> 2;

227 
	`Áke
("allocation from chunk successful\n");

228  (*)
ãmp
;

229 
	}
}

235 #ifde‡
DEBUG


236 *
	gdebug_‰ì_±r
;

239 
	$mÆloc_size_mask
()

241  
MASK
;

242 
	}
}

248 
	$mÆlo˚d_size
(
POINTER
 
±r
)

250  (Ë––(
u
*)
±r
)[ - 1] &
MASK
);

251 
	}
}

257 
SFREE_RETURN_TYPE
 
	$smÆloc_‰ì
(
POINTER
 
±r
)

259 
u
 *
block
;

260 
u
 
i
;

262 i‡(!
±r
)

264 
SFREE_RETURN
;

267 #ifde‡
DEBUG


268 
debug_‰ì_±r
 = 
±r
;

270 
block
 = (
u
*)
±r
;

271 
block
 -= 1;

272 
i
 = (*
	`s_size_±r
(
block
Ë&
MASK
);

273 i‡–(*
	`s_size_±r
(
block
Ë&
MASK
Ë> 
SMALL_BLOCK_MAX
 + 1)

275 
	`Áke
("sfree callsÜarge_free");

276 
	`œrge_‰ì
(
±r
);

277 
SFREE_RETURN


279 
	`cou¡_back
(
smÆl_Æloc_°©
, 
i
 << 2);

280 
	`cou¡_up
(
smÆl_‰ì_°©
, 
i
 << 2);

281 
i
 -= 2;

282 *
	`s_√xt_±r
(
block
Ë
sÊèbÀ
[
i
];

283 
sÊèbÀ
[
i
] = 
block
;

284 
smÆl_‰ì
[
i
] += 1;

285 
	`Áke
("Freed");

286 
SFREE_RETURN


287 
	}
}

293 
	#BEST_FIT
 0

	)

294 
	#FIRST_FIT
 1

	)

295 
	#HYBRID
 2

	)

297 
	#fô_°yÀ
 
BEST_FIT


	)

299 #i‚de‡
fô_°yÀ


300 
	gfô_°yÀ
 = 
BEST_FIT
;

303 
	#l_size_±r
(
p
Ë’)

	)

304 
	#l_√xt_±r
(
p
Ë(*((
u
 **Ë’+1)))

	)

305 
	#l_¥ev_±r
(
p
Ë(*((
u
 **Ë((u **)’+1)+1)))

	)

306 
	#l_√xt_block
(
p
Ë’ + (
MASK
 & (*’))Ë)

	)

307 
	#l_¥ev_block
(
p
Ë’ - (
MASK
 & (*’-1))Ë)

	)

308 
	#l_¥ev_‰ì
(
p
Ë(!(*∞& 
PREV_BLOCK
))

	)

309 
	#l_√xt_‰ì
(
p
Ë(!(*
	`l_√xt_block
’Ë& 
THIS_BLOCK
))

	)

311 
	$show_block
(
u
 *
±r
)

313 
	`¥ötf
("[%c%d: %d] ", (*
±r
 &
THIS_BLOCK
 ? '+' : '-'), (Ìå, (Ë(*±∏&
MASK
) );

314 
	}
}

320 #ifde‡
FIT_STYLE_FAST_FIT


322 #i‡
deföed
(
©¨i°
Ë|| deföed (
sun
Ë|| deföed(
AMIGA
)

324 
SIGNED
 
	tbÆ™˚_t
;

326 
	#BALANCE_T_BITS
 8

	)

328 
	tbÆ™˚_t
;

330 
	#BALANCE_T_BITS
 16

	)

332 #i‡(
deföed
(
©¨i°
Ë&& !deföed(
ATARI_TT
)Ë|| deföed(
•¨c
Ë|| deföed(
AMIGA
)

334 
	#NO_BARREL_SHIFT


	)

337 
	s‰ì_block_s


339 
u
 
	msize
;

340 
‰ì_block_s
 *
	m∑ª¡
, *
	mÀ·
, *
	mright
;

341 
bÆ™˚_t
 
	mbÆ™˚
;

342 
	mÆign_dummy
;

343 } 
	t‰ì_block_t
;

348 
‰ì_block_t
 
dummy2
;

350 
‰ì_block_t
 
	gdummy
 =

352  0, &
dummy2
, 0, 0, 0

355 
‰ì_block_t
 
	gdummy2
 =

357  0, 0, &
dummy
, 0, - 1

360 
‰ì_block_t
 *
	g‰ì_åì
 = &
dummy2
;

362 #ifde‡
DEBUG_AVL


363 
	göc⁄si°ícy
 = 0;

365 
	$check_avl
(
‰ì_block_t
 *
∑ª¡
, fªe_block_à*
p
)

367 
À·
, 
right
;

369 i‡(!
p
)

373 
À·
 = 
	`check_avl
(
p
,Ö->left);

374 
right
 = 
	`check_avl
(
p
,Ö->right);

375 i‡(
p
->
bÆ™˚
 !
right
 - 
À·
 ||Ö->balance < - 1 ||Ö->balance > 1)

377 
	`¥ötf
("Inconsistency inávlÇode!\n");

378 
	`¥ötf
("node:%x\n", 
p
);

379 
	`¥ötf
("size: %d\n", 
p
->
size
);

380 
	`¥ötf
("À·Çode:%x\n", 
p
->
À·
);

381 
	`¥ötf
("À· height: %d\n", 
À·
);

382 
	`¥ötf
("righànode:%x\n", 
p
->
right
);

383 
	`¥ötf
("righàheight: %d\n", 
right
);

384 
	`¥ötf
("ÆÀged bÆ™˚: %d\n", 
p
->
bÆ™˚
);

385 
öc⁄si°ícy
 = 1;

387 i‡(
p
->
∑ª¡
 !=Öarent)

389 
	`¥ötf
("Inconsistency inávlÇode!\n");

390 
	`¥ötf
("node:%x\n", 
p
);

391 
	`¥ötf
("size: %d\n", 
p
->
size
);

392 
	`¥ötf
("∑ª¡: %x\n", 
∑ª¡
);

393 
	`¥ötf
("∑ª¡ size: %d\n", 
∑ª¡
->
size
);

394 
	`¥ötf
("ÆÀgedÖ¨ít: %x\n", 
p
->
∑ª¡
);

395 
	`¥ötf
("ÆÀgedÖ¨íàsize: %d\n", 
p
->
∑ª¡
->
size
);

396 
	`¥ötf
("À· height: %d\n", 
À·
);

397 
	`¥ötf
("righàheight: %d\n", 
right
);

398 
	`¥ötf
("ÆÀged bÆ™˚: %d\n", 
p
->
bÆ™˚
);

399 
öc⁄si°ícy
 = 1;

401  
À·
 > 
right
 ?Üeft + 1:Ñight + 1;

402 
	}
}

405 
	$do_check_avl
()

407 
	`check_avl
(0, 
‰ì_åì
);

408 i‡(
öc⁄si°ícy
)

410 
	`fÊush
(
°dîr
);

411 
	`fÊush
(
°dout
);

412 
	`Áèl
("Inconsistency could crashÅhe OS\n");

415 
	}
}

418 
t_°©
 
	gœrge_‰ì_°©
;

419 
	$ªmove_‰om_‰ì_li°
(
u
 *
±r
)

421 
‰ì_block_t
 *
p
, *
q
, *
r
, *
s
, *
t
;

423 
	`Áke
–(
	`do_check_avl
(), "remove_from_free_list called") );

424 
p
 = (
‰ì_block_t
*Ë(
±r
 + 1);

425 
	`cou¡_back
(
œrge_‰ì_°©
, 
p
->
size
 << 2);

426 #ifde‡
DEBUG_AVL


427 
	`¥ötf
("node:%x\n", 
p
);

428 
	`¥ötf
("size:%d\n", 
p
->
size
);

430 i‡(
p
->
À·
)

432 i‡(
q
 = 
p
->
right
)

434 
	`Áke
("two childs");

435 
s
 = 
q
;

436 ; 
r
 = 
q
, q =Ñ->
À·
;)

438 i‡(
r
 =
s
)

440 
r
->
À·
 = 
s
 = 
p
->left;

441 
s
->
∑ª¡
 = 
r
;

442 i‡(
r
->
∑ª¡
 = 
s
 = 
p
->parent)

444 i‡(
p
 =
s
->
À·
)

446 
s
->
À·
 = 
r
;

450 
s
->
right
 = 
r
;

455 
‰ì_åì
 = 
r
;

457 
r
->
bÆ™˚
 = 
p
->balance;

458 
p
 = 
r
;

459 
bÆ™˚_right
;

463 
t
 = 
r
->
∑ª¡
;

464 i‡(
t
->
À·
 = 
s
 = 
r
->
right
)

466 
s
->
∑ª¡
 = 
t
;

468 
r
->
bÆ™˚
 = 
p
->balance;

469 
r
->
À·
 = 
s
 = 
p
->left;

470 
s
->
∑ª¡
 = 
r
;

471 
r
->
right
 = 
s
 = 
p
->right;

472 
s
->
∑ª¡
 = 
r
;

473 i‡(
r
->
∑ª¡
 = 
s
 = 
p
->parent)

475 i‡(
p
 =
s
->
À·
)

477 
s
->
À·
 = 
r
;

481 
s
->
right
 = 
r
;

486 
‰ì_åì
 = 
r
;

488 
p
 = 
t
;

489 
bÆ™˚_À·
;

500 
	`Áke
("noÑight child, butÜeft child");

501 
s
 = 
p
;

502 
p
 = 
s
->
∑ª¡
;

503 
r
 = 
s
->
À·
;

504 
r
->
∑ª¡
 = 
p
;

505 i‡(
s
 =
p
->
À·
)

507 
p
->
À·
 = 
r
;

508 
bÆ™˚_À·
;

512 
p
->
right
 = 
r
;

513 
bÆ™˚_right
;

524 
	`Áke
("noÜeft child");

525 
s
 = 
p
;

526 
p
 = 
s
->
∑ª¡
;

527 i‡(
q
 = 
r
 = 
s
->
right
)

529 
r
->
∑ª¡
 = 
p
;

531 i‡(
s
 =
p
->
À·
)

533 
p
->
À·
 = 
r
;

534 
bÆ™˚_À·
;

538 
p
->
right
 = 
r
;

539 
bÆ™˚_right
;

542 
bÆ™˚_q
: 
r
 = 
p
;

543 
p
 = 
q
;

544 i‡(
r
 =
p
->
right
)

546 
bÆ™˚_t
 
b
;

548 
bÆ™˚_right
: 
b
 = 
p
->
bÆ™˚
;

549 i‡(
b
 > 0)

551 
p
->
bÆ™˚
 = 0;

552 i‡(
q
 = 
p
->
∑ª¡
)

554 
bÆ™˚_q
;

558 i‡(
b
 < 0)

560 
r
 = 
p
->
À·
;

561 
b
 = 
r
->
bÆ™˚
;

562 i‡(
b
 <= 0)

565 #ifde‡
DEBUG_AVL


566 
	`Áke
("R-Rotation.");

567 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

569 i‡(
p
->
À·
 = 
s
 = 
r
->
right
)

571 
s
->
∑ª¡
 = 
p
;

573 
r
->
right
 = 
p
;

574 
s
 = 
p
->
∑ª¡
;

575 
p
->
∑ª¡
 = 
r
;

576 
b
 += 1;

577 
r
->
bÆ™˚
 = 
b
;

578 
b
 = - b;

579 #ifde‡
DEBUG_AVL


580 
	`¥ötf
("nodêr: %x\n", 
r
);

581 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

582 
	`¥ötf
("nodêp: %x\n", 
p
);

583 
p
->
bÆ™˚
 = 
b
;

584 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

585 
	`¥ötf
("r-height: %d\n", 
	`check_avl
(
r
->
∑ª¡
,Ñ) );

587 i‡(
r
->
∑ª¡
 = 
s
)

589 i‡(
p
->
bÆ™˚
 = 
b
)

591 i‡(
p
 =
s
->
À·
)

593 
s
->
À·
 = 
r
;

598 
s
->
right
 = 
r
;

602 i‡(
p
 =
s
->
À·
)

604 
	`Áke
("left fromÖarent");

605 
bÆ™˚_À·_s
;

609 
	`Áke
("right fromÖarent");

610 
p
 = 
s
;

611 
p
->
right
 = 
r
;

612 
bÆ™˚_right
;

615 
p
->
bÆ™˚
 = 
b
;

616 
‰ì_åì
 = 
r
;

623 
bÆ™˚_t
 
b2
;

625 
	`Áke
("LR-Rotation.");

626 
t
 = 
r
->
right
;

627 
b
 = 
t
->
bÆ™˚
;

628 i‡(
p
->
À·
 = 
s
 = 
t
->
right
)

630 
s
->
∑ª¡
 = 
p
;

632 i‡(
r
->
right
 = 
s
 = 
t
->
À·
)

634 
s
->
∑ª¡
 = 
r
;

636 
t
->
À·
 = 
r
;

637 
t
->
right
 = 
p
;

638 
r
->
∑ª¡
 = 
t
;

639 
s
 = 
p
->
∑ª¡
;

640 
p
->
∑ª¡
 = 
t
;

641 #ifde‡
NO_BARREL_SHIFT


642 
b
 = - b;

643 
b2
 = 
b
 >> 1;

644 
r
->
bÆ™˚
 = 
b2
;

645 
b
 -
b2
;

646 
p
->
bÆ™˚
 = 
b
;

648 
b2
 = ()
b
 >> 7;

649 
p
->
bÆ™˚
 = 
b2
;

650 
b2
 = - b2 - 
b
;

651 
r
->
bÆ™˚
 = 
b2
;

653 
t
->
bÆ™˚
 = 0;

654 #ifde‡
DEBUG_AVL


655 
	`¥ötf
("t-height: %d\n", 
	`check_avl
(
t
->
∑ª¡
,Å) );

657 i‡(
t
->
∑ª¡
 = 
s
)

659 i‡(
p
 =
s
->
À·
)

661 
p
 = 
s
;

662 
s
->
À·
 = 
t
;

663 
bÆ™˚_À·
;

667 
p
 = 
s
;

668 
s
->
right
 = 
t
;

669 
bÆ™˚_right
;

672 
‰ì_åì
 = 
t
;

679 
p
->
bÆ™˚
 = - 1;

686 
bÆ™˚_t
 
b
;

688 
bÆ™˚_À·
;

689 
bÆ™˚_À·_s
: 
p
 = 
s
;

690 
s
->
À·
 = 
r
;

691 
bÆ™˚_À·
: 
b
 = 
p
->
bÆ™˚
;

692 i‡(
b
 < 0)

694 
p
->
bÆ™˚
 = 0;

695 i‡(
q
 = 
p
->
∑ª¡
)

697 
bÆ™˚_q
;

701 i‡(
b
 > 0)

703 
r
 = 
p
->
right
;

704 
b
 = 
r
->
bÆ™˚
;

705 i‡(
b
 >= 0)

708 #ifde‡
DEBUG_AVL


709 
	`Áke
("L-Rotation.");

710 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

712 i‡(
p
->
right
 = 
s
 = 
r
->
À·
)

714 
s
->
∑ª¡
 = 
p
;

716 
	`Áke
("subtreeÑelocated");

717 
r
->
À·
 = 
p
;

718 
s
 = 
p
->
∑ª¡
;

719 
p
->
∑ª¡
 = 
r
;

720 
b
 -= 1;

721 
r
->
bÆ™˚
 = 
b
;

722 
b
 = - b;

723 #ifde‡
DEBUG_AVL


724 
	`Áke
("balances calculated");

725 
	`¥ötf
("nodêr: %x\n", 
r
);

726 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

727 
	`¥ötf
("nodêp: %x\n", 
p
);

728 
p
->
bÆ™˚
 = 
b
;

729 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

730 
	`¥ötf
("r-height: %d\n", 
	`check_avl
(
r
->
∑ª¡
,Ñ) );

732 i‡(
r
->
∑ª¡
 = 
s
)

734 i‡(
p
->
bÆ™˚
 = 
b
)

736 i‡(
p
 =
s
->
À·
)

738 
s
->
À·
 = 
r
;

743 
s
->
right
 = 
r
;

747 i‡(
p
 =
s
->
À·
)

749 
	`Áke
("left fromÖarent");

750 
bÆ™˚_À·_s
;

754 
	`Áke
("right fromÖarent");

755 
p
 = 
s
;

756 
p
->
right
 = 
r
;

757 
bÆ™˚_right
;

760 
p
->
bÆ™˚
 = 
b
;

761 
‰ì_åì
 = 
r
;

768 
bÆ™˚_t
 
b2
;

770 
	`Áke
("RL-Rotation.");

771 
t
 = 
r
->
À·
;

772 
b
 = 
t
->
bÆ™˚
;

773 i‡(
p
->
right
 = 
s
 = 
t
->
À·
)

775 
s
->
∑ª¡
 = 
p
;

777 i‡(
r
->
À·
 = 
s
 = 
t
->
right
)

779 
s
->
∑ª¡
 = 
r
;

781 
t
->
right
 = 
r
;

782 
t
->
À·
 = 
p
;

783 
r
->
∑ª¡
 = 
t
;

784 
s
 = 
p
->
∑ª¡
;

785 
p
->
∑ª¡
 = 
t
;

786 #ifde‡
NO_BARREL_SHIFT


787 
b
 = - b;

788 
b2
 = 
b
 >> 1;

789 
p
->
bÆ™˚
 = 
b2
;

790 
b
 -
b2
;

791 
r
->
bÆ™˚
 = 
b
;

793 
b2
 = ()
b
 >> 7;

794 
r
->
bÆ™˚
 = 
b2
;

795 
b2
 = - b2 - 
b
;

796 
p
->
bÆ™˚
 = 
b2
;

798 
t
->
bÆ™˚
 = 0;

799 i‡(
t
->
∑ª¡
 = 
s
)

801 i‡(
p
 =
s
->
À·
)

803 
p
 = 
s
;

804 
s
->
À·
 = 
t
;

805 
bÆ™˚_À·
;

809 
s
->
right
 = 
t
;

810 
p
 = 
s
;

811 
bÆ™˚_right
;

814 
‰ì_åì
 = 
t
;

821 
p
->
bÆ™˚
++;

825 
	}
}

827 
	$add_to_‰ì_li°
(
u
 *
±r
)

829 
u
 
size
;

830 
‰ì_block_t
 *
p
, *
q
, *
r
;

838 
	`Áke
–(
	`do_check_avl
(), "add_to_free_list called") );

839 
size
 = *
±r
 &
MASK
;

840 #ifde‡
DEBUG_AVL


841 
	`¥ötf
("size:%d\n", 
size
);

843 
q
 = (
‰ì_block_t
*)
size
;

845 
r
 = (
‰ì_block_t
*Ë(
±r
 + 1);

846 
	`cou¡_up
(
œrge_‰ì_°©
, 
size
 << 2);

847 
q
 = 
‰ì_åì
;

850 
p
 = (
‰ì_block_t
*)
q
;

851 #ifde‡
DEBUG_AVL


852 
	`¥ötf
("checkedÇodêsizê%d\n", 
p
->
size
);

854 i‡(
size
 < 
p
->size)

856 i‡(
q
 = 
p
->
À·
)

860 
	`Áke
("addÜeft");

861 
p
->
À·
 = 
r
;

867 i‡(
q
 = 
p
->
right
)

871 
	`Áke
("addÑight");

872 
p
->
right
 = 
r
;

876 
r
->
size
 = size;

877 
r
->
∑ª¡
 = 
p
;

878 
r
->
À·
 = 0;

879 
r
->
right
 = 0;

880 
r
->
bÆ™˚
 = 0;

881 #ifde‡
DEBUG_AVL


882 
	`Áke
("builtÇewÜeaf.");

883 
	`¥ötf
("p->bÆ™˚:%d\n", 
p
->
bÆ™˚
);

887 
‰ì_block_t
 *
s
;

889 i‡(
r
 =
p
->
À·
)

891 
bÆ™˚_t
 
b
;

893 i‡(!(
b
 = 
p
->
bÆ™˚
) )

895 #ifde‡
DEBUG_AVL


896 
	`¥ötf
("p->size: %d\n", 
p
->
size
);

897 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

898 
	`¥ötf
("p->right-h: %d\n", 
	`check_avl
(
p
,Ö->
right
) );

899 
	`¥ötf
("p->À· -h: %d\n", 
	`check_avl
(
p
,Ö->
À·
) );

900 
	`Áke
("growthÖropagation fromÜeft side");

902 
p
->
bÆ™˚
 = - 1;

904 i‡(
b
 < 0)

906 #ifde‡
DEBUG_AVL


907 
	`¥ötf
("p->bÆ™˚:%d\n", 
p
->
bÆ™˚
);

909 i‡(
r
->
bÆ™˚
 < 0)

912 
	`Áke
("R-Rotation");

913 i‡(
p
->
À·
 = 
s
 = 
r
->
right
)

915 
s
->
∑ª¡
 = 
p
;

917 
r
->
right
 = 
p
;

918 
p
->
bÆ™˚
 = 0;

919 
r
->
bÆ™˚
 = 0;

920 
s
 = 
p
->
∑ª¡
;

921 
p
->
∑ª¡
 = 
r
;

922 i‡(
r
->
∑ª¡
 = 
s
)

924 i‡(
s
->
À·
 =
p
)

926 
s
->
À·
 = 
r
;

930 
s
->
right
 = 
r
;

935 
‰ì_åì
 = 
r
;

942 
bÆ™˚_t
 
b2
;

943 
‰ì_block_t
 *
t
 = 
r
->
right
;

945 #ifde‡
DEBUG_AVL


946 
	`Áke
("LR-Rotation");

947 
	`¥ötf
("à%x\n", 
t
);

948 
	`¥ötf
("r->bÆ™˚:%d\n", 
r
->
bÆ™˚
);

950 i‡(
p
->
À·
 = 
s
 = 
t
->
right
)

952 
s
->
∑ª¡
 = 
p
;

954 
	`Áke
("relocatedÑight subtree");

955 
t
->
right
 = 
p
;

956 i‡(
r
->
right
 = 
s
 = 
t
->
À·
)

958 
s
->
∑ª¡
 = 
r
;

960 
	`Áke
("relocatedÜeft subtree");

961 
t
->
À·
 = 
r
;

962 
b
 = 
t
->
bÆ™˚
;

963 #ifde‡
NO_BARREL_SHIFT


964 
b
 = - b;

965 
b2
 = 
b
 >> 1;

966 
r
->
bÆ™˚
 = 
b2
;

967 
b
 -
b2
;

968 
p
->
bÆ™˚
 = 
b
;

970 
b2
 = ()
b
 >> 7;

971 
p
->
bÆ™˚
 = 
b2
;

972 
b2
 = - b2 - 
b
;

973 
r
->
bÆ™˚
 = 
b2
;

975 
t
->
bÆ™˚
 = 0;

976 
	`Áke
("balances calculated");

977 
s
 = 
p
->
∑ª¡
;

978 
p
->
∑ª¡
 = 
t
;

979 
r
->
∑ª¡
 = 
t
;

980 i‡(
t
->
∑ª¡
 = 
s
)

982 i‡(
s
->
À·
 =
p
)

984 
s
->
À·
 = 
t
;

988 
s
->
right
 = 
t
;

993 
‰ì_åì
 = 
t
;

995 #ifde‡
DEBUG_AVL


996 
	`¥ötf
("p->bÆ™˚:%d\n", 
p
->
bÆ™˚
);

997 
	`¥ötf
("r->bÆ™˚:%d\n", 
r
->
bÆ™˚
);

998 
	`¥ötf
("t->bÆ™˚:%d\n", 
t
->
bÆ™˚
);

999 
	`Áke
–(
	`do_check_avl
(), "LR-Rotation completed.") );

1007 
p
->
bÆ™˚
 = 0;

1008 
	`Áke
("growth ofÜeft side balancedÅheÇode");

1015 
bÆ™˚_t
 
b
;

1017 i‡(!(
b
 = 
p
->
bÆ™˚
) )

1019 
	`Áke
("growthÖropagation fromÑight side");

1020 
p
->
bÆ™˚
++;

1022 i‡(
b
 > 0)

1024 i‡(
r
->
bÆ™˚
 > 0)

1027 
	`Áke
("L-Rotation");

1028 i‡(
p
->
right
 = 
s
 = 
r
->
À·
)

1030 
s
->
∑ª¡
 = 
p
;

1032 
r
->
À·
 = 
p
;

1033 
p
->
bÆ™˚
 = 0;

1034 
r
->
bÆ™˚
 = 0;

1035 
s
 = 
p
->
∑ª¡
;

1036 
p
->
∑ª¡
 = 
r
;

1037 i‡(
r
->
∑ª¡
 = 
s
)

1039 i‡(
s
->
À·
 =
p
)

1041 
s
->
À·
 = 
r
;

1045 
s
->
right
 = 
r
;

1050 
‰ì_åì
 = 
r
;

1057 
bÆ™˚_t
 
b2
;

1058 
‰ì_block_t
 *
t
 = 
r
->
À·
;

1060 #ifde‡
DEBUG_AVL


1061 
	`Áke
("RL-Rotation");

1062 
	`¥ötf
("à%x\n", 
t
);

1063 
	`¥ötf
("r->bÆ™˚:%d\n", 
r
->
bÆ™˚
);

1065 i‡(
p
->
right
 = 
s
 = 
t
->
À·
)

1067 
s
->
∑ª¡
 = 
p
;

1069 
	`Áke
("relocatedÜeft subtree");

1070 
t
->
À·
 = 
p
;

1071 i‡(
r
->
À·
 = 
s
 = 
t
->
right
)

1073 
s
->
∑ª¡
 = 
r
;

1075 
	`Áke
("relocatedÑight subtree");

1076 
t
->
right
 = 
r
;

1077 
b
 = 
t
->
bÆ™˚
;

1078 #ifde‡
NO_BARREL_SHIFT


1079 
b
 = - b;

1080 
b2
 = 
b
 >> 1;

1081 
p
->
bÆ™˚
 = 
b2
;

1082 
b
 -
b2
;

1083 
r
->
bÆ™˚
 = 
b
;

1085 
b2
 = ()
b
 >> 7;

1086 
r
->
bÆ™˚
 = 
b2
;

1087 
b2
 = - b2 - 
b
;

1088 
p
->
bÆ™˚
 = 
b2
;

1090 
t
->
bÆ™˚
 = 0;

1091 
s
 = 
p
->
∑ª¡
;

1092 
p
->
∑ª¡
 = 
t
;

1093 
r
->
∑ª¡
 = 
t
;

1094 i‡(
t
->
∑ª¡
 = 
s
)

1096 i‡(
s
->
À·
 =
p
)

1098 
s
->
À·
 = 
t
;

1102 
s
->
right
 = 
t
;

1107 
‰ì_åì
 = 
t
;

1109 
	`Áke
("RL-Rotation completed.");

1116 #ifde‡
DEBUG_AVL


1117 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

1118 
	`¥ötf
("p->right-h: %d\n", 
	`check_avl
(
p
,Ö->
right
) );

1119 
	`¥ötf
("p->À· -h: %d\n", 
	`check_avl
(
p
,Ö->
À·
) );

1121 
p
->
bÆ™˚
 = 0;

1122 
	`Áke
("growth ofÑight side balancedÅheÇode");

1126 
r
 = 
p
;

1127 
p
 =Ö->
∑ª¡
;

1130 
q
 = 
p
);

1131 
	`Áke
–(
	`do_check_avl
(), "add_to_free_list successful") );

1132 
	}
}

1136 
	$show_‰ì_li°
()

1138 
u
 *
p
;

1140 
p
 = 
‰ì_li°
;

1141 
p
)

1143 
	`show_block
(
p
);

1144 
p
 = 
	`l_√xt_±r
(p);

1146 
	`¥ötf
("\n");

1147 
	}
}

1149 
t_°©
 
	gœrge_‰ì_°©
;

1150 
	$ªmove_‰om_‰ì_li°
(
u
 *
±r
)

1152 
	`cou¡_back
(
œrge_‰ì_°©
, (*
±r
 &
MASK
) << 2);

1154 i‡(
	`l_¥ev_±r
(
±r
) )

1156 
	`l_√xt_±r
(
	`l_¥ev_±r
(
±r
) ) =Ü_next_ptr(ptr);

1160 
‰ì_li°
 = 
	`l_√xt_±r
(
±r
);

1163 i‡(
	`l_√xt_±r
(
±r
) )

1165 
	`l_¥ev_±r
(
	`l_√xt_±r
(
±r
) ) =Ü_prev_ptr(ptr);

1167 
	}
}

1169 
	$add_to_‰ì_li°
(
u
 *
±r
)

1171 
	`puts
();

1173 
	`cou¡_up
(
œrge_‰ì_°©
, (*
±r
 &
MASK
) << 2);

1175 #ifde‡
DEBUG


1176 i‡(
‰ì_li°
 && 
	`l_¥ev_±r
(free_list) )

1178 
	`puts
("FreeÜist consistencyÉrror.");

1182 
	`l_√xt_±r
(
±r
Ë
‰ì_li°
;

1183 i‡(
‰ì_li°
)

1185 
	`l_¥ev_±r
(
‰ì_li°
Ë
±r
;

1187 
	`l_¥ev_±r
(
±r
) = 0;

1188 
‰ì_li°
 = 
±r
;

1189 
	}
}

1192 
buûd_block
 
	$P2
(

1193 
u
 *, 
±r
, u, 
size
)

1195 
u
 
tmp
;

1197 
tmp
 = (*
±r
 &
PREV_BLOCK
Ë| 
size
;

1198 *(
±r
 + 
size
 - 1) = size;

1199 *(
±r
Ë
tmp
;

1200 *(
±r
 + 
size
Ë&~
PREV_BLOCK
;

1201 
	}
}

1207 
m¨k_block
 
	$P1
(

1208 
u
 *, 
±r
)

1210 *
	`l_√xt_block
(
±r
Ë|
PREV_BLOCK
;

1211 *
±r
 |
THIS_BLOCK
;

1212 
	}
}

1218 
t_°©
 
	gsbrk_°©
;

1219 *
	$esbrk
(
u
 
size
)

1221 #ifde‡
SBRK_OK


1222 #ifde‡
NeXT


1224 *
addr
 = 
NULL
;

1225 *
cuºít_bªak
 = 
NULL
;

1226 
™ywhîe
 = 
FALSE
;

1227 
kîn_ªtu∫_t
 
ªt
;

1232 
addr
 = 
cuºít_bªak
;

1233 
ªt
 = 
	`vm_Æloˇã
(
	`èsk_£lf
(), (
vm_addªss_t
*Ë&
addr
, 
size
, 
™ywhîe
);

1234 i‡(
ªt
 !
KERN_SUCCESS
 && (
™ywhîe
 =
FALSE
) )

1239 
™ywhîe
 = 
TRUE
;

1240 
ªt
 = 
	`vm_Æloˇã
(
	`èsk_£lf
(), (
vm_addªss_t
*Ë&
addr
, 
size
, 
TRUE
);

1241 i‡(
ªt
 !
KERN_SUCCESS
)

1243  (
NULL
);

1246 
	`cou¡_up
(
sbrk_°©
, 
size
);

1247 
cuºít_bªak
 = (*Ë–(*)
addr
 + 
size
);

1248  (
addr
);

1251 #ifde‡
LATTICE


1253 *
	`sbrk
();

1254 *
addr
 = 
NULL
;

1256 
addr
 = (*)
	`sbrk
(
size
);

1257 i‡–(*)
addr
 == (*) ( - 1) )

1259  
NULL
;

1262 
	`cou¡_up
(
sbrk_°©
, 
size
);

1263  
addr
;

1267 #i‚de‡
löux


1268 *
	`sbrk
();

1271 *
cuºít_bªak
 = 0;

1273 i‡(
cuºít_bªak
 == 0)

1275 
cuºít_bªak
 = 
	`sbrk
(0);

1277 i‡(
	`brk
(
cuºít_bªak
 + 
size
) == - 1)

1282 
	`cou¡_up
(
sbrk_°©
, 
size
);

1283 
cuºít_bªak
 +
size
;

1284  
cuºít_bªak
 - 
size
;

1290 
	`cou¡_up
(
sbrk_°©
, 
size
);

1291  (*)
	`mÆloc
(
size
);

1294 
	}
}

1300 
t_°©
 
	gœrge_Æloc_°©
;

1301 *
	$œrge_mÆloc
(
u
 
size
, 
f‹˚_m‹e
)

1303 
u
 
ªÆ_size
;

1304 
u
 *
±r
;

1306 
	`Áke
("large_malloc called");

1307 #ifde‡
LARGE_TRACE


1308 
	`¥ötf
("ªque°:%d.", 
size
);

1310 
size
 = (size + 7) >> 2;

1311 
	`cou¡_up
(
œrge_Æloc_°©
, 
size
 << 2);

1313 
ªåy
: 
±r
 = 0;

1314 i‡(!
f‹˚_m‹e
)

1316 #ifde‡
FIT_STYLE_FAST_FIT


1318 
‰ì_block_t
 *
p
, *
q
, *
r
;

1319 
u
 
mö•lô
;

1320 
u
 
ãmpsize
;

1322 
±r
++;

1323 
mö•lô
 = 
size
 + 
SMALL_BLOCK_MAX
 + 1;

1324 
q
 = 
‰ì_åì
;

1327 
p
 = 
q
;

1328 #ifde‡
DEBUG_AVL


1329 
	`¥ötf
("checkedÇodêsizê%d\n", 
p
->
size
);

1331 
ãmpsize
 = 
p
->
size
;

1332 i‡(
mö•lô
 < 
ãmpsize
)

1334 
±r
 = (
u
*)
p
;

1335 i‡(
q
 = 
p
->
À·
)

1342 i‡(
size
 > 
ãmpsize
)

1344 i‡(
q
 = 
p
->
right
)

1353 i‡(
size
 =
ãmpsize
)

1355 
±r
 = (
u
*)
p
;

1359 i‡(
q
 = 
p
->
À·
)

1361 
r
 = 
p
;

1369 
p
 = 
q
;

1370 
ãmpsize
 = 
p
->
size
;

1371 i‡(
size
 < 
ãmpsize
)

1373 i‡(
q
 = 
p
->
À·
)

1379 i‡(
size
 > 
ãmpsize
)

1381 i‡(
q
 = 
p
->
right
)

1389 
±r
 = (
u
*)
p
;

1390 
found_fô
;

1393 
p
 = 
r
;

1395 
ãmpsize
 = 
p
->
size
;

1396 i‡(
mö•lô
 > 
ãmpsize
)

1398 i‡(
q
 = 
p
->
right
)

1402 
p
 = 
q
;

1403 
ãmpsize
 = 
p
->
size
;

1404 i‡(
mö•lô
 <
ãmpsize
)

1406 
±r
 = (
u
*)
p
;

1407 i‡(
q
 = 
p
->
À·
)

1416 i‡(
q
 = 
p
->
right
)

1428 
±r
 = (
u
*)
p
;

1432 
found_fô
: 
±r
--;

1434 
u
 
be°_size
;

1435 
u
 *
fú°
, *
be°
;

1437 #ifde‡
LARGE_TRACE


1438 
u
 
£¨ch_Àngth
 = 0;

1442 
fú°
 = 
be°
 = 0;

1443 
be°_size
 = 
MASK
;

1444 
±r
 = 
‰ì_li°
;

1446 
±r
)

1448 
u
 
ãmpsize
;

1450 #ifde‡
LARGE_TRACE


1451 
£¨ch_Àngth
++;

1454 
ãmpsize
 = *
±r
 &
MASK
;

1455 i‡(
ãmpsize
 =
size
)

1457 
be°
 = 
fú°
 = 
±r
;

1462 i‡(
ãmpsize
 >
size
 + 
SMALL_BLOCK_MAX
 + 1)

1465 i‡(!
fú°
)

1467 
fú°
 = 
±r
;

1468 i‡(
fô_°yÀ
 =
FIRST_FIT
)

1475 
ãmpsize
 -
size
;

1476 i‡(
ãmpsize
 > 0 &&Åempsizê<
be°_size
)

1478 
be°
 = 
±r
;

1479 
be°_size
 = 
ãmpsize
;

1482 
±r
 = 
	`l_√xt_±r
(ptr);

1485 #ifde‡
LARGE_TRACE


1486 
	`¥ötf
("£¨chÜígth %d\n", 
£¨ch_Àngth
);

1488 i‡(
fô_°yÀ
 =
BEST_FIT
)

1490 
±r
 = 
be°
;

1494 
±r
 = 
fú°
;

1500 i‡(!
±r
)

1503 
u
 
chunk_size
, 
block_size
;

1505 
block_size
 = 
size
 * 
SIZEOF_INT
;

1506 i‡(
f‹˚_m‹e
 || (
block_size
 > 
CHUNK_SIZE
) )

1508 
chunk_size
 = 
block_size
;

1512 
chunk_size
 = 
CHUNK_SIZE
;

1515 #ifde‡
SBRK_OK


1516 i‡(!
°¨t_√xt_block
)

1518 
	`cou¡_up
(
œrge_Æloc_°©
, 
SIZEOF_INT
);

1519 
°¨t_√xt_block
 = (
u
*)
	`esbrk
(
SIZEOF_INT
);

1520 i‡(!
°¨t_√xt_block
)

1522 
	`Áèl
("Couldn't mallocánything");

1524 *(
°¨t_√xt_block
Ë
PREV_BLOCK
;

1525 
	`Áke
("AllocatedÜittle fake block");

1527 
±r
 = (
u
*)
	`esbrk
(
chunk_size
);

1529 
±r
 = (
u
*)
	`esbrk
(
chunk_size
 + 
SIZEOF_INT
);

1531 i‡(
±r
 == 0)

1533 *
ª£rved_¨ó
;

1534 
¶ow_shut_down_to_do
;

1535 
goög_to_exô
 = 0;

1536 
mess1
[] = "Temporary out of MEMORY. FreeingÑeserve.\n";

1537 
mess2
[] = "Totally out of MEMORY.\n";

1539 i‡(
goög_to_exô
)

1541 
	`exô
(3);

1543 i‡(
ª£rved_¨ó
)

1545 
	`smÆloc_‰ì
(
ª£rved_¨ó
);

1546 
ª£rved_¨ó
 = 0;

1547 
	`wrôe
(1, 
mess1
, (mess1) - 1);

1548 
¶ow_shut_down_to_do
 = 6;

1549 
f‹˚_m‹e
 = 0;

1550 
ªåy
;

1552 i‡(
f‹˚_m‹e
)

1554 
f‹˚_m‹e
 = 0;

1555 
ªåy
;

1557 
goög_to_exô
 = 1;

1558 
	`wrôe
(1, 
mess2
, (mess2) - 1);

1559 ()
	`dump_åa˚
(0);

1560 
	`exô
(2);

1562 #ifde‡
SBRK_OK


1563 
±r
 -= 1;

1565 i‡(
°¨t_√xt_block
 =
±r
)

1567 
±r
 -= 1;

1568 
chunk_size
 +
SIZEOF_INT
;

1572 *
±r
 = 
PREV_BLOCK
;

1574 
°¨t_√xt_block
 = (
u
*Ë–(*)
±r
 + 
chunk_size
);

1576 
block_size
 = 
chunk_size
 / 
SIZEOF_INT
;

1580 
	`buûd_block
(
±r
, 
block_size
);

1581 i‡(
f‹˚_m‹e
)

1583 
	`Áke
("BuildÜittle block");

1587 
	`Áke
("Built memory block description.");

1589 *
	`l_√xt_block
(
±r
Ë
THIS_BLOCK
;

1590 
	`add_to_‰ì_li°
(
±r
);

1592 
	`ªmove_‰om_‰ì_li°
(
±r
);

1593 
ªÆ_size
 = *
±r
 &
MASK
;

1595 i‡(
ªÆ_size
 - 
size
)

1598 
	`buûd_block
(
±r
 + 
size
, 
ªÆ_size
 - size);

1599 
	`Áke
("BuiltÉmpty block");

1604 i‡(
ªÆ_size
 - 
size
 >
SMALL_BLOCK_MAX
 + 1)

1606 
	`add_to_‰ì_li°
(
±r
 + 
size
);

1610 
	`m¨k_block
(
±r
 + 
size
);

1612 
	`buûd_block
(
±r
, 
size
);

1614 
	`m¨k_block
(
±r
);

1615 
	`Áke
("builtállocated block");

1616  (*Ë(
±r
 + 1);

1617 
	}
}

1623 
	$œrge_‰ì
(*
±r
)

1625 
u
 
size
, *
p
;

1627 
p
 = (
u
*)
±r
;

1628 
p
 -= 1;

1629 
size
 = *
p
 &
MASK
;

1630 
	`cou¡_back
(
œrge_Æloc_°©
, (
size
 << 2) );

1632 i‡(!(*(
p
 + 
size
Ë&
THIS_BLOCK
) )

1634 
	`ªmove_‰om_‰ì_li°
(
p
 + 
size
);

1635 
size
 +(*(
p
 + sizeË&
MASK
);

1636 *
p
 = (*∞&
PREV_BLOCK
Ë| 
size
;

1638 i‡(
	`l_¥ev_‰ì
(
p
) )

1640 
	`ªmove_‰om_‰ì_li°
(
	`l_¥ev_block
(
p
) );

1641 
size
 +(*
	`l_¥ev_block
(
p
Ë&
MASK
);

1642 
p
 = 
	`l_¥ev_block
(p);

1644 
	`buûd_block
(
p
, 
size
);

1646 
	`add_to_‰ì_li°
(
p
);

1647 
	}
}

1653 
POINTER
 
	$smÆloc_ªÆloc
(
POINTER
 
p
, 
size_t
 
size
)

1655 *
q
, 
ﬁd_size
;

1656 *
t
;

1658 
q
 = (*)
p
;

1660 #i‡
MALLOC_ALIGN
 > 4

1661 !(
ﬁd_size
 = *--
q
) )

1663 
ﬁd_size
 = ( (ﬁd_sizê&
MASK
Ë- 1Ë*
SIZEOF_INT
;

1665 --
q
;

1666 
ﬁd_size
 = ( (*
q
 &
MASK
Ë- 1Ë*
SIZEOF_INT
;

1668 i‡(
ﬁd_size
 >
size
)

1670  
p
;

1673 
t
 = 
	`smÆloc_mÆloc
(
size
);

1674 i‡(
t
 == 0)

1679 
	`mem˝y
(
t
, 
p
, 
ﬁd_size
);

1680 
	`smÆloc_‰ì
(
p
);

1681  
t
;

1682 
	}
}

1688 
	$ªs‹t_‰ì_li°
()

1691 
	}
}

1697 #ifde‡
DO_MSTATS


1698 
	#dump_°©
(
°r
,
°©
Ë
	`outbuf_addv
(
ob
, så,°©.
cou¡î
,°©.
size
)

	)

1699 
	$show_m°©s
(
outbuf„r_t
 *
ob
, *
s
)

1701 
	`outbuf_addv
(
ob
, "Mem‹yáŒoˇti⁄ sèti°ic†%s\n", 
s
);

1702 
	`outbuf_add
(
ob
, "Type Count Space (bytes)\n");

1703 
	`dump_°©
("sbrkÑeque°s: %8d %10d (a)\n", 
sbrk_°©
);

1704 
	`dump_°©
("œrgêblocks: %8d %10d (b)\n", 
œrge_Æloc_°©
);

1705 
	`dump_°©
("œrgê‰ì blocks: %8d %10d (c)\n\n", 
œrge_‰ì_°©
);

1706 
	`dump_°©
("smÆ»chunks: %8d %10d (d)\n", 
smÆl_chunk_°©
);

1707 
	`dump_°©
("smÆ»blocks: %8d %10d (e)\n", 
smÆl_Æloc_°©
);

1708 
	`dump_°©
("smÆ»‰ì blocks: %8d %10d (f)\n", 
smÆl_‰ì_°©
);

1709 
	`outbuf_addv
(
ob
, "unu£d from cuºíàchunk %10d (g)\n\n", 
unu£d_size
);

1710 
	`outbuf_addv
(
ob
, " Small blocksáre stored in small chunks, whicháreállocatedás\n");

1711 
	`outbuf_addv
(
ob
, "large blocks. Therefore,ÅheÅotalÜarge blocksállocated (b)Ölus\n");

1712 
	`outbuf_addv
(
ob
, "theÜarge free blocks (c) shouldÉqualÅotal storage from sbrk (a).\n");

1713 
	`outbuf_addv
(
ob
, "Similarly, (e) + (f) + (g)Équals (d). TheÅotalámount of storage\n");

1714 
	`outbuf_addv
(
ob
, "wasted is (c) + (f) + (g);Åheámountállocated is (b) - (f) - (g).\n");

1715 
	}
}

1721 
POINTER
 
	$smÆloc_ˇŒoc
(
size_t
 
√Àm
, size_à
sizñ
)

1723 *
p
;

1725 i‡(
√Àm
 =0 || 
sizñ
 == 0)

1729 
p
 = 
	`smÆloc_mÆloc
(
√Àm
 *
sizñ
);

1730 i‡(
p
 == 0)

1734 ()
	`mem£t
(
p
, '\0', 
√Àm
 *
sizñ
);

1735  
p
;

1736 
	}
}

1742 #ifde‡
DEBUG


1747 
	$wÆk_√w_smÆl_mÆlo˚d
(
func
)(*funcË(
POINTER
, );

1749 
i
;

1750 
u
 *
p
, *
q
;

1752 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++)

1754 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1) )

1756 *
	`s_size_±r
(
p
Ë|
NO_REF
;

1759 i‡(
unu£d_size
)

1761 *
√xt_unu£d
 = 0;

1763 
p
 = 
œ°_smÆl_chunk
;Ö;Ö = *(
u
 **)p)

1765 
u
 *
íd
 = 
p
 - 1+’[ - 1] &
MASK
);

1767 
	`debug_mesßge
("sˇ¬ög chunk %x,Énd %x\n", (
u
Ë(
p
 - 1), (u)
íd
);

1768 
q
 = 
p
 + 1; q < 
íd
;)

1770 
u
 
size
 = *
	`s_size_±r
(
q
);

1772 i‡(!
size
)

1776 i‡(!(
size
 &
NO_REF
) )

1778 (*
func
Ë–(*)
	`s_√xt_±r
(
q
), (
size
 &
MASK
) << 2);

1779 *
	`s_size_±r
(
q
Ë|
NO_REF
;

1781 
q
 +
size
 &
MASK
;

1784 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++)

1786 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1) )

1788 *
	`s_size_±r
(
p
Ë&~
NO_REF
;

1791 
	}
}

1796 
	gdebug_smÆloc
 = 0;

1802 
	$vîify_sÊèbÀ
()

1804 
u
 *
p
;

1805 
i
, 
j
;

1806 
íd
;

1808 i‡(!
debug_smÆloc
)

1812 i‡(
unu£d_size
 > 
SMALL_CHUNK_SIZE
)

1814 
	`≠a
();

1816 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++)

1818 
j
 = 0, 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1), j++)

1820 i‡(
p
 < (
u
*Ë&
íd
 ||Ö > (u*)0xfffff)

1822 
	`≠a
();

1824 i‡(*
p
 - 2 !
i
)

1826 
	`≠a
();

1829 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2) )

1831 
	`≠a
();

1834 
p
 = 
‰ì_li°
;

1835 
p
)

1837 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2) )

1839 
	`≠a
();

1841 
p
 = 
	`l_√xt_±r
(p);

1843 
	}
}

1845 
	$vîify_‰ì
(
u
 *
±r
)

1847 
u
 *
p
;

1848 
i
, 
j
;

1850 i‡(!
debug_smÆloc
)

1854 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++)

1856 
j
 = 0, 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1), j++)

1858 i‡(*
p
 - 2 !
i
)

1860 
	`≠a
();

1862 i‡(
±r
 >
p
 &&Ötr <Ö + *p)

1864 
	`≠a
();

1866 i‡(
p
 >
±r
 &&Ö <Ötr + *ptr)

1868 
	`≠a
();

1870 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2) )

1872 
	`≠a
();

1877 
p
 = 
‰ì_li°
;

1878 
p
)

1880 i‡(
±r
 >
p
 &&Öå <Ö + (*∞&
MASK
) )

1882 
	`≠a
();

1884 i‡(
p
 >
±r
 &&Ö <Öå + (*±∏&
MASK
) )

1886 
	`≠a
();

1888 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2) )

1890 
	`≠a
();

1892 
p
 = 
	`l_√xt_±r
(p);

1894 i‡(
±r
 >
√xt_unu£d
 &&Öå <Çext_unu£d + (
unu£d_size
 >> 2) )

1896 
	`≠a
();

1898 
	}
}

1900 
	$≠a
()

1902 
i
;

1904 
i
 / 0;

1905 
	}
}

1907 *
	gªf
;

1908 
	$ã°_mÆloc
(*
p
)

1910 i‡(
p
 =
ªf
)

1912 
	`¥ötf
("Found 0x%x\n", 
p
);

1914 
	}
}

	@src/sprintf.c

49 
	~"°d.h
"

50 
	~"Õc_ö˛.h
"

51 
	~"efuns_ö˛.h
"

52 
	~"simul_efun.h
"

53 
	~"Àx.h
"

54 
	~"°øŒoc.h
"

56 #i‡
deföed
(
F_SPRINTF
Ë|| deföed(
F_PRINTF
)

58 
	tf‹m©_öfo
;

87 
	#INFO_T
 0xF

	)

88 
	#INFO_T_ERROR
 0x1

	)

89 
	#INFO_T_NULL
 0x2

	)

90 
	#INFO_T_LPC
 0x3

	)

91 
	#INFO_T_STRING
 0x4

	)

92 
	#INFO_T_INT
 0x8

	)

93 
	#INFO_T_CHAR
 0x9

	)

94 
	#INFO_T_OCT
 0xA

	)

95 
	#INFO_T_HEX
 0xB

	)

96 
	#INFO_T_C_HEX
 0xC

	)

97 
	#INFO_T_FLOAT
 0xD

	)

99 
	#INFO_J
 0x30

	)

100 
	#INFO_J_CENTRE
 0x10

	)

101 
	#INFO_J_LEFT
 0x20

	)

103 
	#INFO_PP
 0xC0

	)

104 
	#INFO_PP_SPACE
 0x40

	)

105 
	#INFO_PP_PLUS
 0x80

	)

107 
	#INFO_ARRAY
 0x100

	)

108 
	#INFO_COLS
 0x200

	)

109 
	#INFO_TABLE
 0x400

	)

111 
	#ERR_BUFF_OVERFLOW
 0x1

	)

112 
	#ERR_TO_FEW_ARGS
 0x2

	)

113 
	#ERR_INVALID_STAR
 0x3

	)

114 
	#ERR_PRES_EXPECTED
 0x4

	)

115 
	#ERR_INVALID_FORMAT_STR
 0x5

	)

116 
	#ERR_INCORRECT_ARG_S
 0x6

	)

117 
	#ERR_CST_REQUIRES_FS
 0x7

	)

118 
	#ERR_BAD_INT_TYPE
 0x8

	)

119 
	#ERR_UNDEFINED_TYPE
 0x9

	)

120 
	#ERR_QUOTE_EXPECTED
 0xA

	)

121 
	#ERR_UNEXPECTED_EOS
 0xB

	)

122 
	#ERR_NULL_PS
 0xC

	)

123 
	#ERR_ARRAY_EXPECTED
 0xD

	)

124 
	#ERR_RECOVERY_ONLY
 0xE

	)

127 
	#ADD_CHAR
(
x
) {\

128 
	`outbuf_addch¨
(&
obuff
, 
x
);\

129 i‡(
obuff
.
ªÆ_size
 =
USHRT_MAX
Ë
	`ERROR
(
ERR_BUFF_OVERFLOW
); \

130 }

	)

132 
	#GET_NEXT_ARG
 {\

133 i‡(++
cur_¨g
 >
¨gc
Ë
	`ERROR
(
ERR_TO_FEW_ARGS
); \

134 
ˇrg
 = (
¨gv
+
cur_¨g
);\

135 }

	)

139 *
	mwh©
;

140 
	mÀn
;

141 } 
	t∑d_öfo_t
;

145 *
	m°¨t
;

146 *
	mcur
;

147 } 
	tèb_d©a_t
;

150 
	sCﬁumnSœshTabÀ


152 
	uCSTD©a


154 *
	mcﬁ
;

155 
èb_d©a_t
 *
	mèb
;

156 } 
	md
;

157 
	mnocﬁs
;

158 
∑d_öfo_t
 *
	m∑d
;

159 
	m°¨t
;

160 
	msize
;

161 
	mªmaödî
;

162 
	m¥es
;

163 
f‹m©_öfo
 
	möfo
;

164 
CﬁumnSœshTabÀ
 *
	m√xt
;

167 
	tc°
;

169 
outbuf„r_t
 
	gobuff
;

170 
	ggu¨d
 = 0;

171 
c°
 *
	gc°s
 = 0;

172 
SIGNED
 
	gcur_¨g
;

173 
svÆue_t
 
	g˛ón
 =

175 
T_NUMBER
, 0,

181 
numadd
(
outbuf„r_t
 *, 
num
);

182 
add_•a˚
(
outbuf„r_t
 *, 
ödít
);

183 
add_ju°ifõd
(*
°r
, 
¶í
, 
∑d_öfo_t
 *
∑d
, 
fs
, 
f‹m©_öfo
 
föfo
, 
åaûög
);

184 
add_cﬁumn
(
c°
 **
cﬁumn
, 
åaûög
);

185 
add_èbÀ
(
c°
 **
èbÀ
);

187 
	#ERROR
(
x
Ë
	`•rötf_îr‹
(x, 0)

	)

193 
	$•rötf_îr‹
(
which
, *
¥emade
)

195 
lbuf
[2048];

196 *
îr
;

198 
which
)

200 
ERR_BUFF_OVERFLOW
:

201 
îr
 = "QTZ_ServerEngine:BUFF_SIZE overflowed...";

203 
ERR_TO_FEW_ARGS
:

204 
îr
 = "QTZ_ServerEngine:Moreárguments specifiedÅhanÖassed.";

206 
ERR_INVALID_STAR
:

207 
îr
 = "QTZ_ServerEngine:IncorrectárgumentÅypeÅo *.";

209 
ERR_PRES_EXPECTED
:

210 
îr
 = "QTZ_ServerEngine:ExpectedÖresisionÇot found.";

212 
ERR_INVALID_FORMAT_STR
:

213 
îr
 = "QTZ_ServerEngine:Error in format string.";

215 
ERR_INCORRECT_ARG_S
:

216 
îr
 = "QTZ_ServerEngine:IncorrectárgumentÅoÅype %%s.";

218 
ERR_CST_REQUIRES_FS
:

219 
îr
 = "QTZ_ServerEngine:Column/table modeÑequiresá field size.";

221 
ERR_BAD_INT_TYPE
:

222 
îr
 = "QTZ_ServerEngine:!feature - bad integerÅype!";

224 
ERR_UNDEFINED_TYPE
:

225 
îr
 = "QTZ_ServerEngine:!feature - undefinedÅype!";

227 
ERR_QUOTE_EXPECTED
:

228 
îr
 = "QTZ_ServerEngine:QuoteÉxpected in format string.";

230 
ERR_UNEXPECTED_EOS
:

231 
îr
 = "QTZ_ServerEngine:UnexpectedÉnd of format string.";

233 
ERR_NULL_PS
:

234 
îr
 = "QTZ_ServerEngine:NullÖad string specified.";

236 
ERR_ARRAY_EXPECTED
:

237 
îr
 = "QTZ_ServerEngine:ArrayÉxpected.";

239 
ERR_RECOVERY_ONLY
:

240 
îr
 = 
¥emade
;

243 
îr
 = "QTZ_ServerEngine:undefinedÉrror in (s)printf!\n";

246 
	`•rötf
(
lbuf
, "(sÌrötf(): %†◊rg: %d)\n", 
îr
, 
cur_¨g
);

247 
	`îr‹
(
lbuf
);

248 
	}
}

250 
	$numadd
(
outbuf„r_t
 *
outbuf
, 
num
)

252 
i
, 
num_l
,

253 
nve
;

254 
•a˚
;

255 
ch›
;

256 *
p
;

258 i‡(
num
 < 0)

262 
num
 = (num * - 1) &0x7fffffff;

263 
nve
 = 1;

267 
nve
 = 0;

269 
i
 = 
num
 / 10, 
num_l
 = 
nve
 + 1; i; i /= 10,Çum_l++)

271 i‡–(
•a˚
 = 
	`outbuf_exãnd
(
outbuf
, 
num_l
) ) )

273 
ch›
 = 
num_l
 - 
•a˚
;

274 
ch›
--)

276 
num
 /= 10;

279 
p
 = 
outbuf
->
buf„r
 + outbuf->
ªÆ_size
;

280 
outbuf
->
ªÆ_size
 +
•a˚
;

281 
p
[
•a˚
] = 0;

282 i‡(
nve
)

284 *
p
++ = '-';

285 
•a˚
--;

287 
•a˚
--)

289 
p
[
•a˚
] = (
num
 % 10) + '0';

290 
num
 /= 10;

293 
	}
}

295 
	$add_•a˚
(
outbuf„r_t
 *
outbuf
, 
ödít
)

297 
l
;

299 i‡–(
l
 = 
	`outbuf_exãnd
(
outbuf
, 
ödít
) ) )

301 
	`mem£t
(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
, ' ', 
l
);

302 *(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
 + 
l
) = 0;

303 
outbuf
->
ªÆ_size
 +
l
;

305 
	}
}

312 
	$svÆue_to_°rög
(
svÆue_t
 *
obj
, 
outbuf„r_t
 *
outbuf
, 
ödít
, 
åaûög
, 
ödít2
)

314 
i
;

317 i‡(
ödít
 > 20)

319 
	`outbuf_add
(
outbuf
, "...");

322 i‡(!
ödít2
)

324 
	`add_•a˚
(
outbuf
, 
ödít
);

326 
obj
->
ty≥
)

328 
T_INVALID
:

329 
	`outbuf_add
(
outbuf
, "T_INVALID");

331 
T_LVALUE
:

332 
	`outbuf_add
(
outbuf
, "lvalue: ");

333 
	`svÆue_to_°rög
(
obj
->
u
.
lvÆue
, 
outbuf
, 
ödít
 + 2, 
åaûög
, 0);

335 
T_NUMBER
:

336 
	`numadd
(
outbuf
, 
obj
->
u
.
numbî
);

338 
T_REAL
:

339 
	`outbuf_addv
(
outbuf
, "%g", 
obj
->
u
.
ªÆ
);

341 
T_STRING
:

342 
	`outbuf_add
(
outbuf
, "\"");

343 
	`outbuf_add
(
outbuf
, 
obj
->
u
.
°rög
);

344 
	`outbuf_add
(
outbuf
, "\"");

346 
T_CLASS
:

348 
n
 = 
obj
->
u
.
¨r
->
size
;

349 
	`outbuf_add
(
outbuf
, "CLASS( ");

350 
	`numadd
(
outbuf
, 
n
);

351 
	`outbuf_add
(
outbuf
, 
n
 == 1 ? "Élement\n" : "Élements\n");

352 
i
 = 0; i < (
obj
->
u
.
¨r
->
size
) - 1; i++)

354 
	`svÆue_to_°rög
(&(
obj
->
u
.
¨r
->
ôem
[
i
]), 
outbuf
, 
ödít
 + 2, 1, 0);

356 
	`svÆue_to_°rög
(&(
obj
->
u
.
¨r
->
ôem
[
i
]), 
outbuf
, 
ödít
 + 2, 0, 0);

357 
	`outbuf_add
(
outbuf
, "\n");

358 
	`add_•a˚
(
outbuf
, 
ödít
);

359 
	`outbuf_add
(
outbuf
, " )");

362 
T_ARRAY
:

363 i‡(!(
obj
->
u
.
¨r
->
size
) )

365 
	`outbuf_add
(
outbuf
, "({ })");

369 
	`outbuf_add
(
outbuf
, "({ /* sizeof() == ");

370 
	`numadd
(
outbuf
, 
obj
->
u
.
¨r
->
size
);

371 
	`outbuf_add
(
outbuf
, " */\n");

372 
i
 = 0; i < (
obj
->
u
.
¨r
->
size
) - 1; i++)

374 
	`svÆue_to_°rög
(&(
obj
->
u
.
¨r
->
ôem
[
i
]), 
outbuf
, 
ödít
 + 2, 1, 0);

376 
	`svÆue_to_°rög
(&(
obj
->
u
.
¨r
->
ôem
[
i
]), 
outbuf
, 
ödít
 + 2, 0, 0);

377 
	`outbuf_add
(
outbuf
, "\n");

378 
	`add_•a˚
(
outbuf
, 
ödít
);

379 
	`outbuf_add
(
outbuf
, "})");

382 
T_BUFFER
:

383 
	`outbuf_add
(
outbuf
, "<buffer>");

385 
T_FUNCTION
:

387 
svÆue_t
 
tmp
;

388 
tmp
.
ty≥
 = 
T_ARRAY
;

390 
	`outbuf_add
(
outbuf
, "(: ");

391 
obj
->
u
.
Â
->
hdr
.
ty≥
)

393 
FP_LOCAL
 | 
FP_NOT_BINDABLE
: 
	`outbuf_add
(
outbuf
, 
	`fun˘i⁄_«me
(
obj
->
u
.
Â
->
hdr
.
ow√r
->
¥og
, obj->u.Â->
f
.
loˇl
.
ödex
) );

395 
FP_SIMUL
:

396 
	`outbuf_add
(
outbuf
, 
simuls
[
obj
->
u
.
Â
->
f
.
simul
.
ödex
].
func
->
«me
);

398 
FP_FUNCTIONAL
:

399 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

401 
buf
[10];

402 
n
 = 
obj
->
u
.
Â
->
f
.
fun˘i⁄Æ
.
num_¨g
;

404 
	`outbuf_add
(
outbuf
, "<code>(");

405 
i
 = 1; i < 
n
; i++)

407 
	`•rötf
(
buf
, "$%i, ", 
i
);

408 
	`outbuf_add
(
outbuf
, 
buf
);

410 i‡(
n
)

412 
	`•rötf
(
buf
, "$%i", 
n
);

413 
	`outbuf_add
(
outbuf
, 
buf
);

415 
	`outbuf_add
(
outbuf
, ")");

418 
FP_EFUN
:

420 
i
;

421 
i
 = 
obj
->
u
.
Â
->
f
.
efun
.
ödex
;

422 
	`outbuf_add
(
outbuf
, 
ö°rs
[
i
].
«me
);

426 i‡(
obj
->
u
.
Â
->
hdr
.
¨gs
)

428 
i
 = 0; i < 
obj
->
u
.
Â
->
hdr
.
¨gs
->
size
; i++)

430 
	`outbuf_add
(
outbuf
, ", ");

431 
	`svÆue_to_°rög
(&(
obj
->
u
.
Â
->
hdr
.
¨gs
->
ôem
[
i
]), 
outbuf
, 
ödít
, 0, 0);

435 
	`outbuf_add
(
outbuf
, " :)");

437 
T_MAPPING
:

438 i‡(!(
obj
->
u
.
m≠
->
cou¡
) )

440 
	`outbuf_add
(
outbuf
, "([ ])");

444 
	`outbuf_add
(
outbuf
, "([ /* sizeof() == ");

445 
	`numadd
(
outbuf
, 
obj
->
u
.
m≠
->
cou¡
);

446 
	`outbuf_add
(
outbuf
, " */\n");

447 
i
 = 0; i <(Ë(
obj
->
u
.
m≠
->
èbÀ_size
); i++)

449 
m≠pög_node_t
 *
ñm
;

451 
ñm
 = 
obj
->
u
.
m≠
->
èbÀ
[
i
];Élm;Élm =Élm->
√xt
)

453 
	`svÆue_to_°rög
(&(
ñm
->
vÆues
[0]), 
outbuf
, 
ödít
 + 2, 0, 0);

454 
	`outbuf_add
(
outbuf
, " : ");

455 
	`svÆue_to_°rög
(&(
ñm
->
vÆues
[1]), 
outbuf
, 
ödít
 + 4, 1, 1);

458 
	`add_•a˚
(
outbuf
, 
ödít
);

459 
	`outbuf_add
(
outbuf
, "])");

462 
T_OBJECT
:

464 
svÆue_t
 *
ãmp
;

466 i‡(
obj
->
u
.
ob
->
Êags
 &
O_DESTRUCTED
)

468 
	`numadd
(
outbuf
, 0);

472 
	`outbuf_add
(
outbuf
, 
obj
->
u
.
ob
->
«me
);

474 i‡(!
max_evÆ_îr‹
 && !
too_dìp_îr‹
)

476 
ãmp
 = 
	`≠∂y
(
APPLY_OBJECT_NAME
, 
obj
->
u
.
ob
, 0, 
ORIGIN_DRIVER
);

477 i‡(
ãmp
 &&Åem∞!(
svÆue_t
*Ë- 1 && (ãmp->
ty≥
 =
T_STRING
) )

479 
	`outbuf_addv
(
outbuf
, "['%s']", 
ãmp
->
u
.
°rög
);

485 
	`outbuf_add
(
outbuf
, "QTZ_ServerEngine:ERROR SVALUE!");

487 i‡(
åaûög
)

489 
	`outbuf_add
(
outbuf
, ",\n");

491 
	}
}

493 
	$add_∑d
(
∑d_öfo_t
 *
∑d
, 
Àn
)

495 *
p
;

496 
∑dÀn
;

498 i‡(
	`outbuf_exãnd
(&
obuff
, 
Àn
) !=Üen)

500 
	`ERROR
(
ERR_BUFF_OVERFLOW
);

502 
p
 = 
obuff
.
buf„r
 + obuff.
ªÆ_size
;

503 
obuff
.
ªÆ_size
 +
Àn
;

504 
p
[
Àn
] = 0;

506 i‡(
∑d
 && (
∑dÀn
 =Öad->
Àn
) )

508 *
íd
;

509 *
p°r
 = 
∑d
->
wh©
;

510 
i
;

511 
c
;

513 
i
 = 0, 
íd
 = 
p
 + 
Àn
;Ö <Énd; i++)

515 i‡(
i
 =
∑dÀn
)

517 
i
 = 0;

520 i‡–(
c
 = 
p°r
[
i
]) == '\\')

523 *
p
++ = 
p°r
[++
i
];

527 *
p
++ = 
c
;

533 
	`mem£t
(
p
, ' ', 
Àn
);

535 
	}
}

537 
INLINE_STATIC
 
	$add_n°r
(*
°r
, 
Àn
)

539 i‡(
	`outbuf_exãnd
(&
obuff
, 
Àn
) !=Üen)

541 
	`ERROR
(
ERR_BUFF_OVERFLOW
);

543 
	`mem˝y
(
obuff
.
buf„r
 + obuff.
ªÆ_size
, 
°r
, 
Àn
);

544 
obuff
.
ªÆ_size
 +
Àn
;

545 
obuff
.
buf„r
[obuff.
ªÆ_size
] = 0;

546 
	}
}

554 
	$add_ju°ifõd
(*
°r
, 
¶í
, 
∑d_öfo_t
 *
∑d
, 
fs
, 
f‹m©_öfo
 
föfo
, 
åaûög
)

556 
fs
 -
¶í
;

558 i‡(
fs
 <= 0)

560 
	`add_n°r
(
°r
, 
¶í
);

564 
i
;

565 
föfo
 &
INFO_J
)

567 
INFO_J_LEFT
:

568 
	`add_n°r
(
°r
, 
¶í
);

569 i‡(
åaûög
)

571 
	`add_∑d
(
∑d
, 
fs
);

574 
INFO_J_CENTRE
:

575 
i
 = 
fs
 / 2+fs % 2;

576 
	`add_∑d
(
∑d
, 
i
);

577 
	`add_n°r
(
°r
, 
¶í
);

578 i‡(
åaûög
)

580 
	`add_∑d
(
∑d
, 
fs
 - 
i
);

586 
	`add_∑d
(
∑d
, 
fs
);

587 
	`add_n°r
(
°r
, 
¶í
);

590 
	}
}

598 
	$add_cﬁumn
(
c°
 **
cﬁumn
, 
åaûög
)

600 
d⁄e
;

601 
c
;

602 
•a˚
 = - 1;

603 
ªt
;

604 
c°
 *
cﬁ
 = *
cﬁumn
;

605 *
cﬁ_d
 = 
cﬁ
->
d
.col;

607 
d⁄e
 = 0;

609  (
c
 = 
cﬁ_d
[
d⁄e
]) && c != '\n')

611 i‡(
c
 == ' ')

613 
•a˚
 = 
d⁄e
;

615 i‡(++
d⁄e
 =
cﬁ
->
¥es
)

617 i‡(
•a˚
 != - 1)

619 
c
 = 
cﬁ_d
[
d⁄e
];

620 i‡(
c
 != '\n' && c != ' ' && c)

622 
d⁄e
 = 
•a˚
;

628 
	`add_ju°ifõd
(
cﬁ_d
, 
d⁄e
, 
cﬁ
->
∑d
, cﬁ->
size
, cﬁ->
öfo
, 
åaûög
 || cﬁ->
√xt
);

629 
cﬁ_d
 +
d⁄e
;

630 
ªt
 = 1;

631 i‡(*
cﬁ_d
 == '\n')

633 
cﬁ_d
++;

634 
ªt
 = 2;

636 
cﬁ
->
d
.cﬁ = 
cﬁ_d
;

641 i‡(!(*
cﬁ_d
) )

643 
c°
 *
ãmp
;

645 
ãmp
 = 
cﬁ
->
√xt
;

646 i‡(
cﬁ
->
∑d
)

648 
	`FREE
(
cﬁ
->
∑d
);

650 
	`FREE
(
cﬁ
);

651 *
cﬁumn
 = 
ãmp
;

652  
ªt
;

655 
	}
}

662 
	$add_èbÀ
(
c°
 **
èbÀ
)

664 
d⁄e
;

665 
i
;

666 
c°
 *
èb
 = *
èbÀ
;

667 
èb_d©a_t
 *
èb_d
 = 
èb
->
d
.tab;

668 *
èb_di
;

669 
íd
;

671 
i
 = 0; i < 
èb
->
nocﬁs
 && (
èb_di
 = 
èb_d
[i].
cur
); i++)

673 
íd
 = 
èb_d
[
i
 + 1].
°¨t
 - 
èb_di
 - 1;

675 
d⁄e
 = 0; d⁄ê!
íd
 && 
èb_di
[done] != '\n'; done++)

677 
	`add_ju°ifõd
(
èb_di
, (
d⁄e
 > 
èb
->
size
 ?Åab->size: d⁄e),Åab->
∑d
,Åab->size,Åab->
öfo
,Åab->∑d || (
i
 <Åab->
nocﬁs
 - 1Ë||Åab->
√xt
);

678 i‡(
d⁄e
 >
íd
 - 1)

680 
èb_di
 = 0;

684 
èb_di
 +
d⁄e
 + 1;

686 
èb_d
[
i
].
cur
 = 
èb_di
;

688 i‡(
èb
->
∑d
)

690 
i
++ < 
èb
->
nocﬁs
)

692 
	`add_∑d
(
èb
->
∑d
,Åab->
size
);

694 
	`add_∑d
(
èb
->
∑d
,Åab->
ªmaödî
);

696 i‡(!
èb_d
[0].
cur
)

698 
c°
 *
ãmp
;

700 
ãmp
 = 
èb
->
√xt
;

701 i‡(
èb
->
∑d
)

703 
	`FREE
(
èb
->
∑d
);

705 i‡(
èb_d
)

707 
	`FREE
(
èb_d
);

709 
	`FREE
(
èb
);

710 *
èbÀ
 = 
ãmp
;

714 
	}
}

716 
	$gë_cuΩos
()

718 *
p1
, *
p2
;

720 i‡(!
obuff
.
buf„r
)

724 
p1
 = 
obuff
.
buf„r
 + obuff.
ªÆ_size
 - 1;

725 
p2
 = 
p1
;

726 
p2
 > 
obuff
.
buf„r
 && *p2 != '\n')

728 
p2
--;

730 i‡(*
p2
 != '\n')

732  
p1
 - 
p2
 + 1;

736  
p1
 - 
p2
;

738 
	}
}

743 
∑d_öfo_t
 *
	$make_∑d
(
∑d_öfo_t
 *
p
)

745 
∑d_öfo_t
 *
x
;

746 i‡(
p
->
Àn
 == 0)

750 
x
 = 
	`ALLOCATE
(
∑d_öfo_t
, 
TAG_TEMPORARY
, "make_pad");

751 
x
->
wh©
 = 
p
->what;

752 
x
->
Àn
 = 
p
->len;

753  
x
;

754 
	}
}

763 *
	$°rög_¥öt_f‹m©ãd
(*
f‹m©_°r
, 
¨gc
, 
svÆue_t
 *
¨gv
)

765 
f‹m©_öfo
 
föfo
;

766 
svÆue_t
 *
ˇrg
;

767 
√Àmno
 = 0;

768 
Âos
;

769 
fs
;

770 
¥es
;

771 
∑d_öfo_t
 
∑d
;

772 
i
;

773 *
ªtvÆue
;

774 
œ°
;

777 i‡(
gu¨d
)

779 
gu¨d
 = 0;

780 
	`îr‹
("QTZ_ServerEngine:IllegalÅo use sprintf() withinÅhe object_name() master call.\n");

784 i‡(
˛ón
.
ty≥
 !
T_NUMBER
)

786 
	`‰ì_svÆue
(&
˛ón
, "sprintfÉrror");

787 
˛ón
.
ty≥
 = 
T_NUMBER
;

791 i‡(
obuff
.
buf„r
)

793 
	`FREE_MSTR
(
obuff
.
buf„r
);

795 
	`outbuf_zîo
(&
obuff
);

798 
c°s
)

800 
c°
 *
√xt
 = 
c°s
->next;

801 i‡(!(
c°s
->
öfo
 &
INFO_COLS
Ë&& c°s->
d
.
èb
)

803 
	`FREE
(
c°s
->
d
.
èb
);

805 
	`FREE
(
c°s
);

806 
c°s
 = 
√xt
;

809 
cur_¨g
 = - 1;

810 
œ°
 = 0;

811 
∑d
.
wh©
 = 0;

812 
Âos
 = 0; 1; fpos++)

814 
c
 = 
f‹m©_°r
[
Âos
];

816 i‡(
c
 == '\n' || !c)

818 
cﬁumn_°©
 = 0;

820 i‡(
œ°
 !
Âos
)

822 
	`add_n°r
(
f‹m©_°r
 + 
œ°
, 
Âos
 -Üast);

823 
œ°
 = 
Âos
 + 1;

827 
œ°
++;

830 i‡(!
c°s
)

832 i‡(!
c
)

836 
	`ADD_CHAR
('\n');

839 
	`ADD_CHAR
('\n');

840 
c°s
)

842 
c°
 **
ãmp
;

844 
ãmp
 = &
c°s
;

845 *
ãmp
)

847 i‡–(*
ãmp
)->
öfo
 &
INFO_COLS
)

849 i‡(*–(*
ãmp
)->
d
.
cﬁ
 - 1) != '\n')

850 *–(*
ãmp
)->
d
.
cﬁ
) == ' ')

852 (*
ãmp
)->
d
.
cﬁ
++;

854 
	`add_∑d
(0, (*
ãmp
)->
°¨t
 - 
	`gë_cuΩos
() );

855 
cﬁumn_°©
 = 
	`add_cﬁumn
(
ãmp
, 0);

856 i‡(!
cﬁumn_°©
)

858 
ãmp
 = &–(*ãmp)->
√xt
);

863 
	`add_∑d
(0, (*
ãmp
)->
°¨t
 - 
	`gë_cuΩos
() );

864 i‡(!
	`add_èbÀ
(
ãmp
) )

866 
ãmp
 = &–(*ãmp)->
√xt
);

870 i‡(
c°s
 || 
c
 == '\n')

872 
	`ADD_CHAR
('\n');

875 i‡(
cﬁumn_°©
 == 2)

877 
	`ADD_CHAR
('\n');

879 i‡(!
c
)

885 i‡(
c
 == '%')

887 i‡(
œ°
 !
Âos
)

889 
	`add_n°r
(
f‹m©_°r
 + 
œ°
, 
Âos
 -Üast);

890 
œ°
 = 
Âos
 + 1;

894 
œ°
++;

896 i‡(
f‹m©_°r
[
Âos
 + 1] == '%')

898 
	`ADD_CHAR
('%');

899 
Âos
++;

900 
œ°
++;

903 
GET_NEXT_ARG
;

904 
fs
 = 0;

905 
¥es
 = 0;

906 
∑d
.
Àn
 = 0;

907 
föfo
 = 0;

908 
Âos
++; !(
föfo
 &
INFO_T
); fpos++)

910 i‡(!
f‹m©_°r
[
Âos
])

912 
föfo
 |
INFO_T_ERROR
;

915 i‡––(
f‹m©_°r
[
Âos
] >= '0') && (format_str[fpos] <= '9') ) || (format_str[fpos] == '*') )

917 i‡(
¥es
 == - 1)

920 i‡(
f‹m©_°r
[
Âos
] == '*')

922 i‡(
ˇrg
->
ty≥
 !
T_NUMBER
)

924 
	`ERROR
(
ERR_INVALID_STAR
);

926 
¥es
 = 
ˇrg
->
u
.
numbî
;

927 
GET_NEXT_ARG
;

930 
¥es
 = 
f‹m©_°r
[
Âos
] - '0';

931 
Âos
++; (
f‹m©_°r
[fpos] >= '0') && (format_str[fpos] <= '9'); fpos++)

933 
¥es
 =Öª†* 10+
f‹m©_°r
[
Âos
] - '0';

935 i‡(
¥es
 < 0)

937 
¥es
 = 0;

943 i‡–(
f‹m©_°r
[
Âos
] == '0') && ( ( (format_str[fpos + 1] >= '1') && (format_str[fpos + 1] <= '9') ) || (format_str[fpos + 1] == '*') ) )

945 
∑d
.
wh©
 = "0";

946 
∑d
.
Àn
 = 1;

950 i‡(
f‹m©_°r
[
Âos
] == '*')

952 i‡(
ˇrg
->
ty≥
 !
T_NUMBER
)

954 
	`ERROR
(
ERR_INVALID_STAR
);

956 
fs
 = 
ˇrg
->
u
.
numbî
;

957 i‡(
fs
 < 0)

959 
fs
 = 0;

961 i‡(
¥es
 == - 2)

963 
¥es
 = 
fs
;

966 
GET_NEXT_ARG
;

969 
fs
 = 
f‹m©_°r
[
Âos
] - '0';

971 
Âos
++; (
f‹m©_°r
[fpos] >= '0') && (format_str[fpos] <= '9'); fpos++)

973 
fs
 = f†* 10+
f‹m©_°r
[
Âos
] - '0';

975 i‡(
fs
 < 0)

977 
fs
 = 0;

979 i‡(
¥es
 == - 2)

982 
¥es
 = 
fs
;

985 
Âos
--;

988 
f‹m©_°r
[
Âos
])

991 
föfo
 |
INFO_PP_SPACE
;

994 
föfo
 |
INFO_PP_PLUS
;

997 
föfo
 |
INFO_J_LEFT
;

1000 
föfo
 |
INFO_J_CENTRE
;

1003 
föfo
 |
INFO_ARRAY
;

1006 
föfo
 |
INFO_COLS
;

1009 
föfo
 |
INFO_TABLE
;

1012 
¥es
 = - 1;

1015 
¥es
 = - 2;

1017 #ifde‡
DEBUG


1019 
föfo
 |
INFO_T_NULL
;

1023 
föfo
 |
INFO_T_LPC
;

1026 
föfo
 |
INFO_T_STRING
;

1030 
föfo
 |
INFO_T_INT
;

1033 
föfo
 |
INFO_T_FLOAT
;

1036 
föfo
 |
INFO_T_CHAR
;

1039 
föfo
 |
INFO_T_OCT
;

1042 
föfo
 |
INFO_T_HEX
;

1045 
föfo
 |
INFO_T_C_HEX
;

1048 
Âos
++;

1049 
∑d
.
wh©
 = 
f‹m©_°r
 + 
Âos
;

1052 i‡(!
f‹m©_°r
[
Âos
])

1054 
	`ERROR
(
ERR_UNEXPECTED_EOS
);

1056 i‡(
f‹m©_°r
[
Âos
] == '\\')

1058 i‡(!
f‹m©_°r
[++
Âos
])

1060 
	`ERROR
(
ERR_UNEXPECTED_EOS
);

1064 i‡(
f‹m©_°r
[
Âos
] == '\'')

1066 
∑d
.
Àn
 = 
f‹m©_°r
 + 
Âos
 -Öad.
wh©
;

1067 i‡(!
∑d
.
Àn
)

1069 
	`ERROR
(
ERR_NULL_PS
);

1073 
Âos
++;

1077 
föfo
 |
INFO_T_ERROR
;

1080 i‡(
¥es
 < 0)

1082 
	`ERROR
(
ERR_PRES_EXPECTED
);

1087 i‡(
föfo
 &
INFO_ARRAY
)

1089 i‡(
ˇrg
->
ty≥
 !
T_ARRAY
)

1091 
	`ERROR
(
ERR_ARRAY_EXPECTED
);

1093 i‡(
ˇrg
->
u
.
¨r
->
size
 == 0)

1095 
œ°
 = 
Âos
;

1096 
Âos
--;

1099 
ˇrg
 = (
¨gv
 + 
cur_¨g
)->
u
.
¨r
->
ôem
;

1100 
√Àmno
 = 1;

1104 i‡–(
föfo
 &
INFO_T
Ë=
INFO_T_LPC
)

1106 
outbuf„r_t
 
outbuf
;

1108 
	`outbuf_zîo
(&
outbuf
);

1109 
	`svÆue_to_°rög
(
ˇrg
, &
outbuf
, 0, 0, 0);

1110 
	`outbuf_fix
(&
outbuf
);

1112 
˛ón
.
ty≥
 = 
T_STRING
;

1113 
˛ón
.
subty≥
 = 
STRING_MALLOC
;

1114 
˛ón
.
u
.
°rög
 = 
outbuf
.
buf„r
;

1115 
ˇrg
 = &
˛ón
;

1116 
föfo
 ^
INFO_T_LPC
;

1117 
föfo
 |
INFO_T_STRING
;

1119 i‡–(
föfo
 &
INFO_T
Ë=
INFO_T_ERROR
)

1121 
	`ERROR
(
ERR_INVALID_FORMAT_STR
);

1122 #ifde‡
DEBUG


1124 i‡–(
föfo
 &
INFO_T
Ë=
INFO_T_NULL
)

1127 
	`Ârötf
(
°dîr
, "/%s: (sÌrötf: INFO_T_NULL.... found.\n", 
cuºít_obje˘
->
«me
);

1128 
	`ADD_CHAR
('%');

1131 i‡–(
föfo
 &
INFO_T
Ë=
INFO_T_STRING
)

1133 
¶í
;

1139 i‡(
ˇrg
->
ty≥
 =
T_NUMBER
 && c¨g->
u
.
numbî
 == 0)

1141 
˛ón
.
ty≥
 = 
T_STRING
;

1142 
˛ón
.
subty≥
 = 
STRING_MALLOC
;

1143 
˛ón
.
u
.
°rög
 = 
	`°rög_c›y
(
NULL_MSG
, "sprintf NULL");

1144 
ˇrg
 = &
˛ón
;

1147 i‡(
ˇrg
->
ty≥
 !
T_STRING
)

1149 
	`ERROR
(
ERR_INCORRECT_ARG_S
);

1151 
¶í
 = 
	`SVALUE_STRLEN
(
ˇrg
);

1152 i‡–(
föfo
 &
INFO_COLS
Ë|| (föfÿ&
INFO_TABLE
) )

1154 
c°
 **
ãmp
;

1156 i‡(!
fs
)

1158 
	`ERROR
(
ERR_CST_REQUIRES_FS
);

1161 
ãmp
 = &
c°s
;

1162 *
ãmp
)

1164 
ãmp
 = &–(*ãmp)->
√xt
);

1166 i‡(
föfo
 &
INFO_COLS
)

1168 
tmp
;

1169 i‡(
¥es
 > 
fs
)

1171 
¥es
 = 
fs
;

1173 *
ãmp
 = 
	`ALLOCATE
(
c°
, 
TAG_TEMPORARY
, "string_print: 3");

1174 (*
ãmp
)->
√xt
 = 0;

1175 (*
ãmp
)->
d
.
cﬁ
 = 
ˇrg
->
u
.
°rög
;

1176 (*
ãmp
)->
∑d
 = 
	`make_∑d
(&pad);

1177 (*
ãmp
)->
size
 = 
fs
;

1178 (*
ãmp
)->
¥es
 = (¥esË?Öª†: 
fs
;

1179 (*
ãmp
)->
öfo
 = 
föfo
;

1180 (*
ãmp
)->
°¨t
 = 
	`gë_cuΩos
();

1181 
tmp
 = ( (
f‹m©_°r
[
Âos
] !'\n'Ë&& (f‹m©_°r[Âos] !'\0'ËË|| ( (
föfo
 &
INFO_ARRAY
Ë&& (
√Àmno
 < (
¨gv
 + 
cur_¨g
)->
u
.
¨r
->
size
) );

1182 
tmp
 = 
	`add_cﬁumn
(
ãmp
,Åmp);

1183 i‡(
tmp
 =2 && !
f‹m©_°r
[
Âos
])

1185 
	`ADD_CHAR
('\n');

1191 
Àn
, 
max_Àn
;

1192 
n
;

1193 *
p1
, *
p2
;

1195 
	#TABLE
 
ˇrg
->
u
.
°rög


	)

1196 (*
ãmp
Ë
	`ALLOCATE
(
c°
, 
TAG_TEMPORARY
, "string_print: 4");

1197 (*
ãmp
)->
d
.
èb
 = 0;

1198 (*
ãmp
)->
∑d
 = 
	`make_∑d
(&pad);

1199 (*
ãmp
)->
öfo
 = 
föfo
;

1200 (*
ãmp
)->
°¨t
 = 
	`gë_cuΩos
();

1201 (*
ãmp
)->
√xt
 = 0;

1202 
max_Àn
 = 0;

1203 
n
 = 1;

1205 
p2
 = 
p1
 = 
TABLE
;

1206 *
p1
)

1208 i‡(*
p1
 == '\n')

1210 i‡(
p1
 - 
p2
 > ()
max_Àn
)

1212 
max_Àn
 = 
p1
 - 
p2
;

1214 
p1
++;

1215 i‡(*(
p2
 = 
p1
) )

1217 
n
++;

1222 
p1
++;

1225 i‡(!
¥es
)

1228 i‡(
p1
 - 
p2
 > ()
max_Àn
)

1230 
max_Àn
 = 
p1
 - 
p2
;

1232 
¥es
 = 
fs
 / (
max_Àn
 + 2);

1234 i‡(!
¥es
)

1236 
¥es
 = 1;

1249 
Àn
 = (
n
 - 1Ë/ 
¥es
 + 1;

1250 i‡(
n
 > 
¥es
 &&Ç %Öres)

1252 
¥es
 -’ª†- 
n
 %ÖªsË/ 
Àn
;

1257 
Àn
 = (
n
 - 1Ë/ 
¥es
 + 1;

1259 (*
ãmp
)->
size
 = 
fs
 / 
¥es
;

1260 (*
ãmp
)->
ªmaödî
 = 
fs
 % 
¥es
;

1261 i‡(
n
 < 
¥es
)

1267 (*
ãmp
)->
ªmaödî
 +(
¥es
 - 
n
)*–(*ãmp)->
size
);

1268 
¥es
 = 
n
;

1271 (*
ãmp
)->
d
.
èb
 = 
	`CALLOCATE
(
¥es
 + 1, 
èb_d©a_t
, 
TAG_TEMPORARY
, "string_print: 5");

1272 (*
ãmp
)->
nocﬁs
 = 
¥es
;

1273 (*
ãmp
)->
d
.
èb
[0].
°¨t
 = 
TABLE
;

1274 i‡(
¥es
 == 1)

1276 (*
ãmp
)->
d
.
èb
[1].
°¨t
 = 
TABLE
 + 
	`SVALUE_STRLEN
(
ˇrg
) + 1;

1280 
i
 = 1;

1281 
n
 = 0;

1284 
p1
 = 
TABLE
;

1285 *
p1
)

1287 i‡(*
p1
++ ='\n' && ++
n
 >()
Àn
)

1289 (*
ãmp
)->
d
.
èb
[
i
++].
°¨t
 = 
p1
;

1290 
n
 = 0;

1293 ; 
i
 <()
¥es
; i++)

1295 (*
ãmp
)->
d
.
èb
[
i
].
°¨t
 = ++
p1
;

1298 
i
 = 0; i < ()
¥es
; i++)

1300 (*
ãmp
)->
d
.
èb
[
i
].
cur
 = (*ãmp)->d.èb[i].
°¨t
;

1303 
	`add_èbÀ
(
ãmp
);

1309 i‡(
¥es
 &&Öª†< 
¶í
)

1311 
¶í
 = 
¥es
;

1313 
	`add_ju°ifõd
(
ˇrg
->
u
.
°rög
, 
¶í
, &
∑d
, 
fs
, 
föfo
, ( ( (
f‹m©_°r
[
Âos
] !'\n'Ë&& (f‹m©_°r[Âos] !'\0'ËË|| ( (föfÿ&
INFO_ARRAY
Ë&& (
√Àmno
 < (
¨gv
 + 
cur_¨g
)->u.
¨r
->
size
) ) ) ||

1314 
ˇrg
->
u
.
°rög
[
¶í
 - 1] != '\n');

1317 i‡(
föfo
 &
INFO_T_INT
)

1321 
chót
[8];

1322 
ãmp
[100];

1324 *
chót
 = '%';

1325 
i
 = 1;

1326 
föfo
 &
INFO_PP
)

1328 
INFO_PP_SPACE
:

1329 
chót
[
i
++] = ' ';

1331 
INFO_PP_PLUS
:

1332 
chót
[
i
++] = '+';

1335 i‡(
¥es
)

1337 
chót
[
i
++] = '.';

1338 
	`•rötf
(
chót
 + 
i
, "%d", 
¥es
);

1339 
i
 +
	`°æí
(
chót
 + i);

1341 
föfo
 &
INFO_T
)

1343 
INFO_T_INT
:

1344 
chót
[
i
++] = 'd';

1346 
INFO_T_FLOAT
:

1347 
chót
[
i
++] = 'f';

1349 
INFO_T_CHAR
:

1350 
chót
[
i
++] = 'c';

1352 
INFO_T_OCT
:

1353 
chót
[
i
++] = 'o';

1355 
INFO_T_HEX
:

1356 
chót
[
i
++] = 'x';

1358 
INFO_T_C_HEX
:

1359 
chót
[
i
++] = 'X';

1362 
	`ERROR
(
ERR_BAD_INT_TYPE
);

1364 i‡–(
chót
[
i
 - 1] ='f' && 
ˇrg
->
ty≥
 !
T_REAL
Ë|| (chót[ò- 1] !'f' && c¨g->ty≥ !
T_NUMBER
) )

1366 #ifde‡
RETURN_ERROR_MESSAGES


1367 
	`•rötf
(
buff
, "QTZ_SîvîEngöe:Inc‹ª˘árgumíàty≥Åÿ%%%c. (¨g: %u)\n", 
chót
[
i
 - 1], 
cur_¨g
);

1368 
	`Ârötf
(
°dîr
, "Progøm /%†Fûe: %s: %s", 
cuºít_¥og
->
«me
, 
	`gë_löe_numbî_if_™y
(), 
buff
);

1369 
	`debug_mesßge
("%s", 
buff
);

1370 i‡(
cuºít_obje˘
)

1372 
	`debug_mesßge
("QTZ_SîvîEngöe: /%s, obje˘: %s, fûe: %s\n", 
cuºít_¥og
 ? cuºít_¥og->
«me
: "", 
cuºít_obje˘
->«me, 
	`gë_löe_numbî_if_™y
() );

1374 
	`ERROR
(
ERR_RECOVERY_ONLY
);

1376 
	`îr‹
("QTZ_SîvîEngöe:Inc‹ª˘árgumíàty≥Åÿ%%%c.\n", 
chót
[
i
 - 1]);

1379 
chót
[
i
] = '\0';

1381 i‡(
ˇrg
->
ty≥
 =
T_REAL
)

1383 
	`•rötf
(
ãmp
, 
chót
, 
ˇrg
->
u
.
ªÆ
);

1387 
	`•rötf
(
ãmp
, 
chót
, 
ˇrg
->
u
.
numbî
);

1390 
tm∂
 = 
	`°æí
(
ãmp
);

1392 
	`add_ju°ifõd
(
ãmp
, 
tm∂
, &
∑d
, 
fs
, 
föfo
, ( ( (
f‹m©_°r
[
Âos
] !'\n'Ë&& (f‹m©_°r[Âos] !'\0'ËË|| ( (föfÿ&
INFO_ARRAY
Ë&& (
√Àmno
 < (
¨gv
 + 
cur_¨g
)->
u
.
¨r
->
size
) ) ) );

1398 
	`ERROR
(
ERR_UNDEFINED_TYPE
);

1400 i‡(
˛ón
.
ty≥
 !
T_NUMBER
)

1402 
	`‰ì_svÆue
(&
˛ón
, "string_print_formatted");

1403 
˛ón
.
ty≥
 = 
T_NUMBER
;

1406 i‡(!(
föfo
 &
INFO_ARRAY
) )

1410 i‡(
√Àmno
 >(
¨gv
 + 
cur_¨g
)->
u
.
¨r
->
size
)

1414 
ˇrg
 = (
¨gv
 + 
cur_¨g
)->
u
.
¨r
->
ôem
 + 
√Àmno
++;

1416 
œ°
 = 
Âos
;

1417 
Âos
--;

1421 
	`outbuf_fix
(&
obuff
);

1422 
ªtvÆue
 = 
obuff
.
buf„r
;

1423 
obuff
.
buf„r
 = 0;

1424  
ªtvÆue
;

1425 
	}
}

1428 
	$b_v¢¥ötf
(*
de°_°r
, 
de°_size
, *
fmt_°r
, 
¨gc
, 
svÆue_t
 *
¨gv
)

1430 *
buf
 = 
de°_°r
;

1431 *
fmt
 = 
fmt_°r
;

1432 
Àn
 = 
de°_size
;

1433 
is_¨øy_¨g
 = 0;

1434 
svÆue_t
 *
ˇrg
;

1435 
¨øy_t
 *
vec
 = 
NULL
;

1437 
i
, 
fûl
 = 0;

1439 
	`bzîo
(
de°_°r
, 
de°_size
);

1440 i‡(!
¨gv
)

1445 i‡(
¨gv
->
ty≥
 =
T_ARRAY
)

1447 
is_¨øy_¨g
 = 1;

1448 
vec
 = 
¨gv
->
u
.
¨r
;

1449 
¨gc
 = 
vec
->
size
;

1453 
is_¨øy_¨g
 = 0;

1456 
i
 = 0; i < 
¨gc
; i++)

1458 
fûl_Àn
 = 0;

1459 
ˇrg
 = 
is_¨øy_¨g
 ? 
vec
->
ôem
 + 
i
: 
¨gv
 + i;

1461 i‡(*(
fmt
++) != '%')

1463 
	`ERROR
(
ERR_INVALID_FORMAT_STR
);

1466 *
fmt
 >= '0' && *fmt <= '9')

1468 
fûl_Àn
 = fûl_À¿* 10+ *
fmt
 - '0';

1469 
fmt
++;

1472 i‡(!
fûl_Àn
)

1474 i‡(
i
 !
¨gc
 - 1 || *
fmt
 !'s' || 
ˇrg
->
ty≥
 !
T_STRING
)

1476 
	`ERROR
(
ERR_INVALID_FORMAT_STR
);

1479 
fûl_Àn
 = 
	`SVALUE_STRLEN
(
ˇrg
);

1480 i‡(
fûl
 + 
fûl_Àn
 > 
Àn
)

1482 
fûl_Àn
 = 
Àn
 - 
fûl
;

1486 i‡(
fûl
 + 
fûl_Àn
 >
Àn
)

1488 
	`ERROR
(
ERR_BUFF_OVERFLOW
);

1492 *
fmt
++)

1497 i‡(
ˇrg
->
ty≥
 !
T_NUMBER
)

1499 
	`ERROR
(
ERR_BAD_INT_TYPE
);

1502 
	#FILL_BUF
(
t
Ë*(— *)(
buf
+
fûl
)Ë—Ë
ˇrg
->
u
.
numbî
;

	)

1504 i‡(
fûl_Àn
 == 1)

1507 
	`FILL_BUF
()

1509 i‡(
fûl_Àn
 == 2)

1512 
	`FILL_BUF
()

1514 i‡(
fûl_Àn
 == 4)

1517 
	`FILL_BUF
()

1521 
	`ERROR
(
ERR_BAD_INT_TYPE
);

1527 i‡(
ˇrg
->
ty≥
 !
T_STRING
)

1529 
	`ERROR
(
ERR_INCORRECT_ARG_S
);

1531 
	`°∫˝y
(
buf
 + 
fûl
, 
ˇrg
->
u
.
°rög
, 
fûl_Àn
);

1536 i‡(
ˇrg
->
ty≥
 !
T_STRING
)

1538 
	`ERROR
(
ERR_INCORRECT_ARG_S
);

1540 
sLí
 = 
	`SVALUE_STRLEN
(
ˇrg
);

1541 i‡(
sLí
 > 
fûl_Àn
)

1543 
sLí
 = 
fûl_Àn
;

1545 
	`mem˝y
(
buf
 + 
fûl
, 
ˇrg
->
u
.
°rög
, 
sLí
);

1546 
buf
[
fûl
 + 
fûl_Àn
] = '\0';

1550 
	`ERROR
(
ERR_INVALID_FORMAT_STR
);

1554 
fûl
 +
fûl_Àn
;

1558  
fûl
;

1559 
	}
}

	@src/stack.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~"°ack.h
"

7 
	$__push_°rög
(
ST_S
 *
°ackp
, *
vÆue
)

9 *
°‹e_«me
 = 
NULL
;

10 
Àn
, 
ödex
;

12 i‡(
°ackp
->
ödex
 + 1 >
MAX_STACK
 - 1)

17 
Àn
 = 
	`°æí
(
vÆue
);

18 
°‹e_«me
 = 
	`mÆloc
(
Àn
 + 1);

19 i‡(!
°‹e_«me
)

24 
°ackp
->
ödex
++;

25 
ödex
 = 
°ackp
->index;

26 
	`°æ˝y
(
°‹e_«me
, 
vÆue
, 
Àn
 + 1);

27 
°ackp
->
°‹e
[
ödex
] = 
°‹e_«me
;

29 
	}
}

35 
	$__p›_°rög
(
ST_S
 *
°ackp
, **
vÆue
)

37 
p›_°rög
[
POP_STR_LEN
 + 1];

38 
ödex
;

40 
ödex
 = 
°ackp
->index;

41 i‡(
ödex
 < 0)

46 
	`°æ˝y
(
p›_°rög
, 
°ackp
->
°‹e
[
ödex
], 
POP_STR_LEN
);

47 
	`‰ì
(
°ackp
->
°‹e
[
ödex
]);

48 
°ackp
->
°‹e
[
ödex
] = 
NULL
;

49 
°ackp
->
ödex
--;

50 *
vÆue
 = 
p›_°rög
;

52 
	}
}

58 
	$öô_°ack_°rög
(
ST_S
 **
°ackµ
)

60 
ST_S
 *
°ackp
 = 
NULL
;

62 
°ackp
 = 
	`mÆloc
((
ST_S
) );

63 i‡(!
°ackp
)

67 
	`bzîo
(
°ackp
, (
ST_S
) );

69 
°ackp
->
push
 = 
__push_°rög
;

70 
°ackp
->
p›
 = 
__p›_°rög
;

71 
°ackp
->
ödex
 = - 1;

73 *
°ackµ
 = 
°ackp
;

75 
	}
}

81 
	$‰ì_°ack_°rög
(
ST_S
 *
°ackp
)

83 
i
;

85 
i
 = 0; i <
°ackp
->
ödex
; i++)

87 
	`‰ì
(
°ackp
->
°‹e
[
i
]);

89 
	`‰ì
(
°ackp
);

90 
	}
}

96 
	$__push_öt
(
ST_I
 *
°ackp
, 
num
)

98 
ödex
;

100 i‡(
°ackp
->
ödex
 + 1 >
MAX_STACK
 - 1)

105 
°ackp
->
ödex
++;

106 
ödex
 = 
°ackp
->index;

107 
°ackp
->
°‹e
[
ödex
] = 
num
;

109 
	}
}

115 
	$__p›_öt
(
ST_I
 *
°ackp
, *
num
)

117 
ödex
, 
ªt
;

119 
ödex
 = 
°ackp
->index;

120 i‡(
ödex
 < 0)

125 
ªt
 = 
°ackp
->
°‹e
[
ödex
];

126 
°ackp
->
ödex
--;

127 *
num
 = 
ªt
;

129 
	}
}

135 
	$öô_°ack_öt
(
ST_I
 **
°ackµ
)

137 
ST_I
 *
°ackp
 = 
NULL
;

139 
°ackp
 = 
	`mÆloc
((
ST_I
) );

140 i‡(!
°ackp
)

144 
	`bzîo
(
°ackp
, (
ST_I
) );

146 
°ackp
->
push
 = 
__push_öt
;

147 
°ackp
->
p›
 = 
__p›_öt
;

148 
°ackp
->
ödex
 = - 1;

150 *
°ackµ
 = 
°ackp
;

152 
	}
}

158 
	$‰ì_°ack_öt
(
ST_I
 *
°ackp
)

160 
	`‰ì
(
°ackp
);

161 
	}
}

	@src/stralloc.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"°øŒoc.h
"

4 
	~"hash.h
"

5 
	~"comm.h
"

8 
	gsvÆue_°æí_size
;

10 #ifde‡
NOISY_DEBUG


11 
	$bp
(){
	}
}

53 #ifde‡
STRING_STATS


54 
	gnum_di°ö˘_°rögs
 = 0;

55 
	gbyãs_di°ö˘_°rögs
 = 0;

56 
	govîhód_byãs
 = 0;

57 
	gÆlocd_°rögs
 = 0;

58 
	gÆlocd_byãs
 = 0;

59 
	g£¨ch_Àn
 = 0;

60 
	gnum_°r_£¨ches
 = 0;

63 
	#SåHash
(
s
Ë(
	`whash°r
((s), 20Ë& (
hèbÀ_size_möus_⁄e
))

	)

65 
	#hfödblock
(
s
, 
h
Ë
	`sfödblock
(s, h = 
	`SåHash
(s))

	)

66 
	#födblock
(
s
Ë
	`sfödblock
(s, 
	`SåHash
(s))

	)

68 
INLINE_STATIC
 
block_t
 *
sfödblock
(*, );

78 
block_t
 **
	gba£_èbÀ
 = (block_t **)0;

79 
	ghèbÀ_size
;

80 
	ghèbÀ_size_möus_⁄e
;

82 
INLINE_STATIC
 
block_t
 *
Æloc_√w_°rög
(*, );

83 #ifde‡
DEBUG


84 
checked
(*, *);

87 
	$öô_°rögs
()

89 
x
, 
y
;

92 
y
 = 
HTABLE_SIZE
;

93 
hèbÀ_size
 = 1; hèbÀ_sizê< 
y
; htable_size *= 2)

95 
hèbÀ_size_möus_⁄e
 = 
hèbÀ_size
 - 1;

96 
ba£_èbÀ
 = 
	`CALLOCATE
(
hèbÀ_size
, 
block_t
 *, 
TAG_STR_TBL
, "init_strings");

97 #ifde‡
STRING_STATS


98 
ovîhód_byãs
 +((
block_t
*Ë* 
hèbÀ_size
);

101 
x
 = 0; x < 
hèbÀ_size
; x++)

103 
ba£_èbÀ
[
x
] = 0;

105 
	}
}

114 
INLINE_STATIC
 
block_t
 *
	$sfödblock
(*
s
, 
h
)

116 
block_t
 *
cuº
, *
¥ev
;

118 
cuº
 = 
ba£_èbÀ
[
h
];

119 
¥ev
 = 
NULL
;

120 #ifde‡
STRING_STATS


121 
num_°r_£¨ches
++;

124 
cuº
)

126 #ifde‡
STRING_STATS


127 
£¨ch_Àn
++;

129 i‡(*(
	`STRING
(
cuº
ËË=*
s
 && !
	`°rcmp
(STRING(curr), s) )

132 i‡(
¥ev
)

135 
	`NEXT
(
¥ev
ËNEXT(
cuº
);

136 
	`NEXT
(
cuº
Ë
ba£_èbÀ
[
h
];

137 
ba£_èbÀ
[
h
] = 
cuº
;

139  (
cuº
);

141 
¥ev
 = 
cuº
;

142 
cuº
 = 
	`NEXT
(curr);

144  ( (
block_t
*)0);

145 
	}
}

151 *
	$föd°rög
(*
s
)

153 
block_t
 *
b
;

155 i‡–(
b
 = 
	`födblock
(
s
) ) )

157  
	`STRING
(
b
);

161  (
NULL
);

163 
	}
}

167 
INLINE_STATIC
 
block_t
 *
	$Æloc_√w_°rög
(*
°rög
, 
h
)

169 
block_t
 *
b
;

170 
Àn
 = 
	`°æí
(
°rög
);

171 
size
;

173 i‡(
Àn
 > 
max_°rög_Àngth
)

175 
Àn
 = 
max_°rög_Àngth
;

177 
size
 = (
block_t
Ë+ 
Àn
 + 1;

178 
b
 = (
block_t
*)
	`DXALLOC
(
size
, 
TAG_SHARED_STRING
, "alloc_new_string");

179 
	`°∫˝y
(
	`STRING
(
b
), 
°rög
, 
Àn
);

180 
	`STRING
(
b
)[
Àn
] = '\0';

182 
	`SIZE
(
b
Ë(
Àn
 > 
USHRT_MAX
 ? USHRT_MAX :Üen);

183 
	`REFS
(
b
) = 1;

184 
	`NEXT
(
b
Ë
ba£_èbÀ
[
h
];

185 
ba£_èbÀ
[
h
] = 
b
;

186 
	`ADD_NEW_STRING
(
	`SIZE
(
b
), (
block_t
) );

187 
	`ADD_STRING
(
	`SIZE
(
b
) );

188  (
b
);

189 
	}
}

195 *
	$make_sh¨ed_°rög
(*
°r
)

197 
block_t
 *
b
;

198 
h
;

200 
b
 = 
	`hfödblock
(
°r
, 
h
);

201 i‡(!
b
)

203 
b
 = 
	`Æloc_√w_°rög
(
°r
, 
h
);

207 i‡(
	`REFS
(
b
) )

209 
	`REFS
(
b
)++;

211 
	`ADD_STRING
(
	`SIZE
(
b
) );

213 
	`NDBG
(
b
);

214  (
	`STRING
(
b
) );

215 
	}
}

221 *
	$ªf_°rög
(*
°r
)

223 
block_t
 *
b
;

225 
b
 = 
	`BLOCK
(
°r
);

226 #ifde‡
DEBUG


227 i‡(
b
 !
	`födblock
(
°r
) )

229 
	`Áèl
("QTZ_SîvîEngöêö såÆloc.c: cÆÀdÑef_°rög o¿n⁄-sh¨ed såög: %s.\n", 
°r
);

232 i‡(
	`REFS
(
b
) )

234 
	`REFS
(
b
)++;

236 
	`NDBG
(
b
);

237 
	`ADD_STRING
(
	`SIZE
(
b
) );

238  
°r
;

239 
	}
}

244 #ifde‡
DEBUG


245 
	$checked
(*
s
, *
°r
)

247 
	`debug_mesßge
("%†(\"%s\")\n", 
s
, 
°r
);

248 
	`Áèl
(
s
);

249 
	}
}

257 
	$‰ì_°rög
(*
°r
)

259 
block_t
 **
¥ev
, *
b
;

260 
h
;

262 
b
 = 
	`BLOCK
(
°r
);

263 
	`DEBUG_CHECK1
(
b
 !
	`födblock
(
°r
), "QTZ_ServerEngine in stralloc.c: free_string called onÇon-shared string: %s.\n", str);

269 i‡(!
	`REFS
(
b
) )

274 
	`REFS
(
b
)--;

275 
	`SUB_STRING
(
	`SIZE
(
b
) );

277 
	`NDBG
(
b
);

278 i‡(
	`REFS
(
b
) > 0)

283 
h
 = 
	`SåHash
(
°r
);

284 
¥ev
 = 
ba£_èbÀ
 + 
h
;

285  (
b
 = *
¥ev
) )

287 i‡(
	`STRING
(
b
Ë=
°r
)

289 *
¥ev
 = 
	`NEXT
(
b
);

292 
¥ev
 = &(
	`NEXT
(
b
) );

295 #ifde‡
DEBUG


296 i‡(!
b
)

298 
	`checked
("QTZ_SîvîEngöêö såÆloc.¯‰ì_°rög:ÇŸ found i¿°rögÅabÀ!", 
°r
);

302 
	`SUB_NEW_STRING
(
	`SIZE
(
b
), (
block_t
) );

303 
	`FREE
(
b
);

304 
CHECK_STRING_STATS
;

305 
	}
}

311 
	$dóŒoˇã_°rög
(*
°r
)

313 
h
;

314 
block_t
 *
b
, **
¥ev
;

316 
h
 = 
	`SåHash
(
°r
);

317 
¥ev
 = 
ba£_èbÀ
 + 
h
;

318  (
b
 = *
¥ev
) )

320 i‡(
	`STRING
(
b
Ë=
°r
)

322 *
¥ev
 = 
	`NEXT
(
b
);

325 
¥ev
 = &(
	`NEXT
(
b
) );

327 
	`DEBUG_CHECK1
(!
b
, "QTZ_SîvîEngöêö såÆloc.c: dóŒoˇã_°rög cÆÀd o¿n⁄-sh¨ed såög: %s.\n", 
°r
);

329 
	`FREE
(
b
);

330 
	}
}

336 
	$add_°rög_°©us
(
outbuf„r_t
 *
out
, 
vîbo£
)

338 #ifde‡
STRING_STATS


339 i‡(
vîbo£
 == 1)

341 
	`outbuf_add
(
out
, "All strings:\n");

342 
	`outbuf_add
(
out
, "-------------------------\t Strings Bytes\n");

344 i‡(
vîbo£
 != - 1)

346 
	`outbuf_addv
(
out
, "AŒ såögs:\t\t\t%7d %8d + %d ovîhód\n", 
num_di°ö˘_°rögs
, 
byãs_di°ö˘_°rögs
, 
ovîhód_byãs
);

348 i‡(
vîbo£
 == 1)

350 
	`outbuf_addv
(
out
, "TŸÆásked f‹\t\t\t%8d %8d\n", 
Ælocd_°rögs
, 
Ælocd_byãs
);

351 
	`outbuf_addv
(
out
, "S∑˚á˘uÆlyÑequúed/tŸÆ såög byã†%d%%\n", (
byãs_di°ö˘_°rögs
 + 
ovîhód_byãs
Ë*100 / 
Ælocd_byãs
);

352 
	`outbuf_addv
(
out
, "Sórches: %d Avîagê£¨chÜígth: %6.3f\n", 
num_°r_£¨ches
, ()
£¨ch_Àn
 /Çum_str_searches);

354  (
byãs_di°ö˘_°rögs
 + 
ovîhód_byãs
);

356 i‡(
vîbo£
)

358 
	`outbuf_add
(
out
, "<String statistics disabled,Ço informationávailable>\n");

362 
	}
}

368 #ifde‡
DEBUGMALLOC_EXTENSIONS


369 
	#DME
 0,

	)

371 
	#DME


	)

380 #ifde‡
DEBUGMALLOC


381 *
	$öt_√w_°rög
(
size
, *
èg
)

383 *
	$öt_√w_°rög
(
size
)

386 
mÆloc_block_t
 *
mbt
;

389 i‡(!
size
)

391 
the_nuŒ_°rög_blocks
[0].
ªf
++;

392 
	`ADD_NEW_STRING
(0, (
mÆloc_block_t
) );

393  
the_nuŒ_°rög
;

397 
mbt
 = (
mÆloc_block_t
*)
	`DXALLOC
(
size
 + (mÆloc_block_tË+ 1, 
TAG_MALLOC_STRING
, 
èg
);

398 i‡(
size
 < 
USHRT_MAX
)

400 
mbt
->
size
 = size;

401 
	`ADD_NEW_STRING
(
size
, (
mÆloc_block_t
) );

405 
mbt
->
size
 = 
USHRT_MAX
;

406 
	`ADD_NEW_STRING
(
USHRT_MAX
, (
mÆloc_block_t
) );

408 
mbt
->
ªf
 = 1;

409 
	`ADD_STRING
(
mbt
->
size
);

410 
CHECK_STRING_STATS
;

411  (*Ë(
mbt
 + 1);

412 
	}
}

418 *
	$exãnd_°rög
(*
°r
, 
Àn
)

420 
mÆloc_block_t
 *
mbt
;

421 #ifde‡
STRING_STATS


422 
ﬁdsize
 = 
	`MSTR_SIZE
(
°r
);

425 
mbt
 = (
mÆloc_block_t
*)
	`DREALLOC
(
	`MSTR_BLOCK
(
°r
), 
Àn
 + (mÆloc_block_tË+ 1, 
TAG_MALLOC_STRING
, "extend_string");

426 i‡(
Àn
 < 
USHRT_MAX
)

428 
mbt
->
size
 = 
Àn
;

432 
mbt
->
size
 = 
USHRT_MAX
;

434 
	`ADD_STRING_SIZE
(
mbt
->
size
 - 
ﬁdsize
);

435 
CHECK_STRING_STATS
;

437  (*Ë(
mbt
 + 1);

438 
	}
}

444 #ifde‡
DEBUGMALLOC


445 *
	$öt_Æloc_c°rög
(*
°r
, *
èg
)

447 *
	$öt_Æloc_c°rög
(*
°r
)

450 *
ªt
;

452 
ªt
 = (*)
	`DXALLOC
(
	`°æí
(
°r
Ë+ 1, 
TAG_STRING
, 
èg
);

453 
	`°r˝y
(
ªt
, 
°r
);

454  
ªt
;

455 
	}
}

	@src/strfuncs.c

6 
	~"°d.h
"

8 
	#DIGIT
(
x
Ë(
	`isdigô
(x) ? (x) - '0' : \

9 
	`i¶owî
(
x
Ë? (xË+ 10 - 'a' : (xË+ 10 - 'A')

	)

10 
	#MBASE
 ('z' - 'a' + 1 + 10)

	)

12 
	$°πﬁ
(*
°r
, **
±r
, 
ba£
)

14 
vÆ
;

15 
c
;

16 
xx
, 
√g
 = 0;

18 i‡(
±r
 != (**)0)

20 *
±r
 = 
°r
;

23 i‡(
ba£
 < 0 || ba£ > 
MBASE
)

28 i‡(!
	`iß um
(
c
 = *
°r
) )

30 
	`is•a˚
(
c
) )

32 
c
 = *++
°r
;

34 
c
)

37 
√g
++;

40 
c
 = *++
°r
;

43 i‡(
ba£
 == 0)

44 i‡(
c
 != '0')

46 
ba£
 = 10;

48 i‡(
°r
[1] == 'x' || str[1] == 'X')

50 
ba£
 = 16;

54 
ba£
 = 8;

60 i‡(!
	`iß um
(
c
Ë|| (
xx
 = 
	`DIGIT
(cËË>
ba£
)

65 i‡(
ba£
 =16 && 
c
 ='0' && 
	`isxdigô
(
°r
[2]) && (str[1] == 'x' || str[1] == 'X') )

67 
c
 = *(
°r
 += 2);

70 
vÆ
 = - 
	`DIGIT
(
c
); 
	`iß um
(¯*++
°r
Ë&& (
xx
 = DIGIT(cËË< 
ba£
;)

73 
vÆ
 = 
ba£
 * vÆ - 
xx
;

75 i‡(
±r
 != (**)0)

77 *
±r
 = 
°r
;

79  (
√g
 ? 
vÆ
 : - val);

80 
	}
}

86 
	$°rc•n
(*
s
, *
£t
)

88 *
t
;

89 
cou¡
 = 0;

91 *
s
)

93 
t
 = 
£t
;

94 *
t
 && (*
s
 != *t) )

96 
t
++;

98 i‡(! *
t
)

100 
s
++;

101 
cou¡
++;

109  (
cou¡
);

110 
	}
}

	@src/strstr.c

37 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

38 
	gsccsid
[] = "@(#)strstr.c 5.2 (Berkeley) 1/26/91";

42 
	~"°d.h
"

47 *
	$_°r°r
(*
s
, *
föd
)

49 
c
, 
sc
;

50 
Àn
;

52 i‡–(
c
 = *
föd
++) != 0)

54 
Àn
 = 
	`°æí
(
föd
);

59 i‡–(
sc
 = *
s
++) == 0)

61  (
NULL
);

65 
sc
 !
c
);

68 
	`°∫cmp
(
s
, 
föd
, 
Àn
) != 0)

70 
s
--;

72  ( (*)
s
);

73 
	}
}

	@src/swap.c

1 
	~"°d.h
"

2 
	~"c⁄fig.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"fûe_ö˛.h
"

5 
	~"sw≠.h
"

6 
	~"simul_efun.h
"

7 
	~"comm.h
"

8 
	~"md.h
"

9 
	~"fûe.h
"

10 
	~"p‹t.h
"

21 
	gnum_sw≠≥d
;

22 
	gtŸÆ_byãs_sw≠≥d
;

23 
	glöe_num_byãs_sw≠≥d
;

24 
	gfûe_«me_buf
[100];

25 *
	gfûe_«me
 = 
fûe_«me_buf
;

28 #ifde‡
SWAP_USE_FD


29 
	gsw≠_fûe
;

31 
FILE
 *
	gsw≠_fûe
;

34 
	#DIFF
(
x
, 
y
Ë((*)(xË- (*)(y))

	)

35 
	#ADD
(
x
, 
y
Ë(&(((*)(y))[(
POINTER_INT
)x]))

	)

37 
	ssw_block_s


39 
	m°¨t
;

40 
	mÀngth
;

41 
sw_block_s
 *
	m√xt
;

42 } 
	tsw_block_t
;

44 
sw_block_t
 *
	gsw≠_‰ì
;

46 
	gœ°_d©a
;

48 
as£π_sw≠_fûe
();

49 
Æloc_sw≠
();

50 
‰ì_sw≠
(
°¨t
, 
Àngth
);

51 
sw≠_ö
(**, );

52 
sw≠_out
(*, , *);

61 
	$as£π_sw≠_fûe
()

63 i‡(
sw≠_fûe
 =
NULL
)

65 #ifde‡
SWAP_USE_FD


66 
ho°
[50];

68 
	`gëho°«me
(
ho°
,  host);

69 
	`•rötf
(
fûe_«me_buf
, "%s.%s.%d", 
SWAP_FILE
, 
ho°
, 
exã∫Æ_p‹t
[0].
p‹t
);

70 
fûe_«me
 = 
fûe_«me_buf
;

71 i‡(
fûe_«me
[0] == '/')

73 
fûe_«me
++;

75 
sw≠_fûe
 = 
	`›í
(
fûe_«me
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

77 
ho°
[50];

79 
	`gëho°«me
(
ho°
,  host);

80 
	`•rötf
(
fûe_«me_buf
, "%s.%s.%d", 
SWAP_FILE
, 
ho°
, 
exã∫Æ_p‹t
[0].
p‹t
);

81 
fûe_«me
 = 
fûe_«me_buf
;

82 i‡(
fûe_«me
[0] == '/')

84 
fûe_«me
++;

86 
sw≠_fûe
 = 
	`f›í
(
fûe_«me
, "w+b");

88 
sw≠_‰ì
 = 0;

89 
œ°_d©a
 = 0;

91 i‡(
sw≠_fûe
 == 0)

97 
	}
}

102 
	$sw≠_£ek
(
off£t
, 
Êag
)

104 
ªt
;

108 #ifde‡
SWAP_USE_FD


109 
ªt
 = 
	`l£ek
(
sw≠_fûe
, 
off£t
, 
Êag
);

111 
ªt
 = 
	`f£ek
(
sw≠_fûe
, 
off£t
, 
Êag
);

115 
ªt
 =- 1 && 
î∫o
 =
EINTR
);

116 i‡(
ªt
 == - 1)

118 
	`Áèl
("QTZ_SîvîEngöe:Couldn'à£ekÅhêsw≠ fûe,Éº‹ %s, off£à%d.\n", 
	`p‹t_°ªº‹
(
î∫o
), 
off£t
);

120 
	}
}

128 
	$Æloc_sw≠
(
Àngth
)

130 
sw_block_t
 *
±r
, *
¥ev
;

131 
ªt
;

137 
±r
 = 
sw≠_‰ì
, 
¥ev
 = 0;Öå;Öªv =Öå,Öå =Öå->
√xt
)

139 i‡(
±r
->
Àngth
 <Üength)

146 
ªt
 = 
±r
->
°¨t
;

147 
±r
->
°¨t
 +
Àngth
;

148 
±r
->
Àngth
 -=Üength;

149 i‡(
±r
->
Àngth
 == 0)

154 i‡(!
¥ev
)

156 
sw≠_‰ì
 = 
±r
->
√xt
;

160 
¥ev
->
√xt
 = 
±r
->next;

162 
	`FREE
(
±r
);

164  
ªt
;

170  
œ°_d©a
;

171 
	}
}

179 
	$‰ì_sw≠
(
°¨t
, 
Àngth
)

181 
sw_block_t
 *
m
, *
±r
, *
¥ev
;

183 
Àngth
 += ();

188 
m
 = (
sw_block_t
*)
	`DXALLOC
((sw_block_t), 
TAG_SWAP
, "free_swap");

189 
m
->
°¨t
 = start;

190 
m
->
Àngth
 =Üength;

192 
±r
 = 
sw≠_‰ì
, 
¥ev
 = 0;Öå;Öªv =Öå,Öå =Öå->
√xt
)

194 i‡(
°¨t
 < 
±r
->start)

199 i‡(!
¥ev
)

201 
sw≠_‰ì
 = 
m
;

205 
¥ev
->
√xt
 = 
m
;

207 
m
->
√xt
 = 
±r
;

212 i‡(
±r
 && 
m
->
°¨t
 + m->
Àngth
 ==Ötr->start)

214 
m
->
Àngth
 +
±r
->length;

215 
m
->
√xt
 = 
±r
->next;

216 
	`FREE
(
±r
);

218 i‡(
¥ev
 &&Öªv->
°¨t
 +Öªv->
Àngth
 =
m
->start)

220 
¥ev
->
Àngth
 +
m
->length;

221 
¥ev
->
√xt
 = 
m
->next;

222 
	`FREE
(
m
);

223 
m
 = 
¥ev
;

230 i‡(
m
->
°¨t
 + m->
Àngth
 =
œ°_d©a
)

232 
	`DEBUG_CHECK
(
m
->
√xt
, "QTZ_ServerEngine:extraneous free swap blocks!\n");

234 
±r
 = 
sw≠_‰ì
, 
¥ev
 = 0;Öå !
m
;Öªv =Öå,Öå =Öå->
√xt
)

236 
œ°_d©a
 = 
m
->
°¨t
;

237 
	`FREE
(
m
);

238 i‡(!
¥ev
)

240 
sw≠_‰ì
 = 0;

244 
¥ev
->
√xt
 = 0;

247 
	}
}

255 
	$sw≠_out
(*
block
, 
size
, *
lo˝
)

265 i‡(!
	`as£π_sw≠_fûe
() )

270 i‡(*
lo˝
 == - 1)

273 *
lo˝
 = 
	`Æloc_sw≠
(
size
 +  size);

274 
	`sw≠_£ek
(*
lo˝
, 0);

275 #ifde‡
SWAP_USE_FD


276 i‡–(
	`wrôe
(
sw≠_fûe
, &
size
,  sizeË! sizeË|| wrôe(sw≠_fûe, 
block
, size) != size)

278 
	`debug_≥º‹
("sw≠_out", 
sw≠_fûe
);

279 *
lo˝
 = - 1;

283 i‡(
	`fwrôe
–(*Ë&
size
,  size, 1, 
sw≠_fûe
Ë!1 || fwrôe(
block
, size, 1, swap_file) != 1)

285 
	`debug_≥º‹
("swap_out:swap file", 0);

286 *
lo˝
 = - 1;

290 i‡(*
lo˝
 >
œ°_d©a
)

292 
œ°_d©a
 = *
lo˝
 +  
size
 + size;

295 
tŸÆ_byãs_sw≠≥d
 +
size
;

297 
	}
}

304 
	$sw≠_ö
(**
blockp
, 
loc
)

306 
size
;

308 i‡(
loc
 == - 1)

312 
	`sw≠_£ek
(
loc
, 0);

313 #ifde‡
SWAP_USE_FD


315 i‡(
	`ªad
(
sw≠_fûe
, &
size
,  size) == - 1)

317 
	`Áèl
("QTZ_ServerEngine:Couldn'tÑeadÅhe swap file.\n");

319 *
blockp
 = 
	`DXALLOC
(
size
, 
TAG_SWAP
, "swap_in");

320 i‡(
	`ªad
(
sw≠_fûe
, *
blockp
, 
size
) == - 1)

322 
	`Áèl
("QTZ_ServerEngine:Couldn'tÑeadÅhe swap file.\n");

326 i‡(
	`‰ód
–(*Ë&
size
,  size, 1, 
sw≠_fûe
) == 0)

328 
	`Áèl
("QTZ_ServerEngine:Couldn'tÑeadÅhe swap file.\n");

330 *
blockp
 = 
	`DXALLOC
(
size
, 
TAG_SWAP
, "swap_in");

331 i‡(
	`‰ód
(*
blockp
, 
size
, 1, 
sw≠_fûe
) == 0)

333 
	`Áèl
("QTZ_ServerEngine:Couldn'tÑeadÅhe swap file.\n");

336 
tŸÆ_byãs_sw≠≥d
 -
size
;

337  
size
;

338 
	}
}

354 
	$loˇã_out
(
¥ogøm_t
 *
¥og
)

356 i‡(!
¥og
)

360 #ifde‡
DEBUG


361 i‡(
d_Êag
 > 1)

363 
	`debug_mesßge
("QTZ_SîvîEngöe:loˇã_out: %lX %lX %lX %lX %lX %lX %lX\n", 
¥og
->
¥ogøm
,Örog->
fun˘i⁄_èbÀ
,Örog->
°rögs
,Örog->
v¨übÀ_èbÀ
,Örog->
öhîô
,Örog->
¨gumít_ty≥s
,Örog

364 ->
ty≥_°¨t
);

367 
¥og
->
¥ogøm
 = (*)
	`DIFF
(prog->program,Örog);

368 
¥og
->
fun˘i⁄_èbÀ
 = (
compûî_fun˘i⁄_t
*)
	`DIFF
(prog->function_table,Örog);

369 
¥og
->
fun˘i⁄_Êags
 = (*)
	`DIFF
(prog->function_flags,Örog);

370 
¥og
->
fun˘i⁄_off£ts
 = (
ru¡ime_fun˘i⁄_u
*)
	`DIFF
(prog->function_offsets,Örog);

371 #ifde‡
COMPRESS_FUNCTION_TABLES


372 
¥og
->
fun˘i⁄_com¥es£d
 = (
com¥es£d_off£t_èbÀ_t
*)
	`DIFF
(prog->function_compressed,Örog);

374 
¥og
->
°rögs
 = (**)
	`DIFF
(prog->strings,Örog);

375 
¥og
->
v¨übÀ_èbÀ
 = (**)
	`DIFF
(prog->variable_table,Örog);

376 
¥og
->
v¨übÀ_ty≥s
 = (*)
	`DIFF
(prog->variable_types,Örog);

377 
¥og
->
öhîô
 = (
öhîô_t
*)
	`DIFF
(prog->inherit,Örog);

378 
¥og
->
˛as£s
 = (
˛ass_def_t
*)
	`DIFF
(prog->classes,Örog);

379 
¥og
->
˛ass_membîs
 = (
˛ass_membî_íåy_t
*)
	`DIFF
(prog->class_members,Örog);

380 i‡(
¥og
->
ty≥_°¨t
)

382 
¥og
->
¨gumít_ty≥s
 = (*)
	`DIFF
(prog->argument_types,Örog);

383 
¥og
->
ty≥_°¨t
 = (*)
	`DIFF
(prog->type_start,Örog);

386 
	}
}

399 
	$loˇã_ö
(
¥ogøm_t
 *
¥og
)

401 i‡(!
¥og
)

405 
¥og
->
¥ogøm
 = 
	`ADD
(prog->program,Örog);

406 
¥og
->
fun˘i⁄_èbÀ
 = (
compûî_fun˘i⁄_t
*)
	`ADD
(prog->function_table,Örog);

407 
¥og
->
fun˘i⁄_Êags
 = (*)
	`ADD
(prog->function_flags,Örog);

408 
¥og
->
fun˘i⁄_off£ts
 = (
ru¡ime_fun˘i⁄_u
*)
	`ADD
(prog->function_offsets,Örog);

409 #ifde‡
COMPRESS_FUNCTION_TABLES


410 
¥og
->
fun˘i⁄_com¥es£d
 = (
com¥es£d_off£t_èbÀ_t
*)
	`ADD
(prog->function_compressed,Örog);

412 
¥og
->
°rögs
 = (**)
	`ADD
(prog->strings,Örog);

413 
¥og
->
v¨übÀ_èbÀ
 = (**)
	`ADD
(prog->variable_table,Örog);

414 
¥og
->
v¨übÀ_ty≥s
 = (*)
	`ADD
(prog->variable_types,Örog);

415 
¥og
->
öhîô
 = (
öhîô_t
*)
	`ADD
(prog->inherit,Örog);

416 
¥og
->
˛as£s
 = (
˛ass_def_t
*)
	`ADD
(prog->classes,Örog);

417 
¥og
->
˛ass_membîs
 = (
˛ass_membî_íåy_t
*)
	`ADD
(prog->class_members,Örog);

418 i‡(
¥og
->
ty≥_°¨t
)

420 
¥og
->
¨gumít_ty≥s
 = (*)
	`ADD
(prog->argument_types,Örog);

421 
¥og
->
ty≥_°¨t
 = (*)
	`ADD
(prog->type_start,Örog);

423 #ifde‡
DEBUG


424 i‡(
d_Êag
 > 1)

426 
	`debug_mesßge
("QTZ_SîvîEngöe:loˇã_ö: %lX %lX %lX %lX %lX %lX\n", 
¥og
->
¥ogøm
,Örog->
fun˘i⁄_èbÀ
,Örog->
°rögs
,Örog->
v¨übÀ_èbÀ
,Örog->
öhîô
,Örog->
¨gumít_ty≥s
,Örog

427 ->
ty≥_°¨t
);

431 
	}
}

438 
	$sw≠
(
obje˘_t
 *
ob
)

445 i‡(
ob
 =
simul_efun_ob
)

449 i‡(
ob
->
Êags
 &
O_DESTRUCTED
)

453 #ifde‡
DEBUG


454 i‡(
d_Êag
 > 1)

457 
	`debug_mesßge
("QTZ_SîvîEngöe:Sw≠ obje˘ /%†‘e‡%d)\n", 
ob
->
«me
, ob->
ªf
);

460 i‡(
ob
->
¥og
->
löe_öfo
)

462 
	`sw≠_löe_numbîs
(
ob
->
¥og
);

465 i‡–(
ob
->
Êags
 &
O_HEART_BEAT
Ë|| (ob->Êag†&
O_CLONE
) )

467 #ifde‡
DEBUG


468 i‡(
d_Êag
 > 1)

470 
	`debug_mesßge
("QTZ_ServerEngine: objectÇot swapped - heart beat or cloned.\n");

475 i‡(
ob
->
¥og
->
ªf
 > 1 || ob->
öãø˘ive
)

477 #ifde‡
DEBUG


478 i‡(
d_Êag
 > 1)

480 
	`debug_mesßge
("QTZ_ServerEngine: objectÇot swapped - inherited or interactive.\n");

485 i‡(
ob
->
¥og
->
func_ªf
 > 0)

487 #ifde‡
DEBUG


488 i‡(
d_Êag
 > 1)

490 
	`debug_mesßge
("QTZ_ServerEngine: objectÇot swapped -Ñeferenced by functions.\n");

495 
	`loˇã_out
(
ob
->
¥og
);

496 i‡(
	`sw≠_out
–(*)
ob
->
¥og
, ob->¥og->
tŸÆ_size
, &ob->
sw≠_num
) )

498 
num_sw≠≥d
++;

499 
	`‰ì_¥og
(
ob
->
¥og
, 0);

500 
ob
->
¥og
 = 0;

501 
ob
->
Êags
 |
O_SWAPPED
;

506 
	`loˇã_ö
(
ob
->
¥og
);

509 
	}
}

515 
	$lﬂd_ob_‰om_sw≠
(
obje˘_t
 *
ob
)

517 i‡(
ob
->
sw≠_num
 == - 1)

519 
	`Áèl
("QTZ_ServerEngine:LoadingÇot swapped object.\n");

521 #ifde‡
DEBUG


522 i‡(
d_Êag
 > 1)

525 
	`debug_mesßge
("QTZ_SîvîEngöe:Unsw≠ obje˘ /%†‘e‡%d)\n", 
ob
->
«me
, ob->
ªf
);

528 
	`sw≠_ö
(&
ob
->
¥og
->
«me
, ob->
sw≠_num
);

529 
	`SET_TAG
(
ob
->
¥og
, 
TAG_PROGRAM
);

534 
	`loˇã_ö
(
ob
->
¥og
);

537 
ob
->
Êags
 &~
O_SWAPPED
;

538 
num_sw≠≥d
--;

539 
tŸÆ_¥og_block_size
 +
ob
->
¥og
->
tŸÆ_size
;

540 
tŸÆ_num_¥og_blocks
 += 1;

541 
	}
}

546 
	$sw≠_löe_numbîs
(
¥ogøm_t
 *
¥og
)

548 
size
;

550 i‡(!
¥og
 || !¥og->
löe_öfo
)

554 #ifde‡
DEBUG


555 i‡(
d_Êag
 > 1)

557 
	`debug_mesßge
("QTZ_SîvîEngöe:Sw≠Üöênumbî†f‹ /%s\n", 
¥og
->
«me
);

560 
size
 = 
¥og
->
fûe_öfo
[0];

561 i‡(
	`sw≠_out
–(*)
¥og
->
fûe_öfo
, 
size
, (*Ë(*Ë&¥og->
löe_sw≠_ödex
) )

563 
löe_num_byãs_sw≠≥d
 +
size
;

564 
	`FREE
(
¥og
->
fûe_öfo
);

565 
¥og
->
fûe_öfo
 = 0;

566 
¥og
->
löe_öfo
 = 0;

570 
	}
}

575 
	$lﬂd_löe_numbîs
(
¥ogøm_t
 *
¥og
)

577 
size
;

579 i‡(
¥og
->
löe_öfo
)

583 #ifde‡
DEBUG


584 i‡(
d_Êag
 > 1)

586 
	`debug_mesßge
("QTZ_SîvîEngöe:Unsw≠Üöênumbî†f‹ /%s\n", 
¥og
->
«me
);

589 
size
 = 
	`sw≠_ö
–(**Ë(*Ë&
¥og
->
fûe_öfo
,Örog->
löe_sw≠_ödex
);

590 
	`SET_TAG
(
¥og
->
fûe_öfo
, 
TAG_LINENUMBERS
);

591 
¥og
->
löe_öfo
 = (*Ë&¥og->
fûe_öfo
[prog->file_info[1]];

592 
löe_num_byãs_sw≠≥d
 -
size
;

593 
	}
}

602 
	$ªmove_sw≠_fûe
(
obje˘_t
 *
ob
)

604 i‡(!
ob
)

610 i‡(
ob
->
Êags
 &
O_SWAPPED
)

612 
	`lﬂd_ob_‰om_sw≠
(
ob
);

614 i‡(
ob
->
¥og
)

616 
	`‰ì_sw≠
(
ob
->
sw≠_num
, ob->
¥og
->
tŸÆ_size
);

618 
ob
->
sw≠_num
 = - 1;

619 
	}
}

624 
	$ªmove_löe_sw≠
(
¥ogøm_t
 *
¥og
)

626 i‡(!
¥og
->
löe_öfo
)

628 
	`lﬂd_löe_numbîs
(
¥og
);

630 i‡(
¥og
->
löe_sw≠_ödex
 !- 1 &&Örog->
löe_öfo
)

632 
	`‰ì_sw≠
(
¥og
->
löe_sw≠_ödex
,Örog->
fûe_öfo
[0]);

634 
¥og
->
löe_sw≠_ödex
 = - 1;

635 
	}
}

641 
	$¥öt_sw≠_°©s
(
outbuf„r_t
 *
out
)

643 
size
, 
˙t
, 
íd
;

644 
sw_block_t
 *
m
;

646 
	`outbuf_add
(
out
, "Swap information:\n");

647 
	`outbuf_add
(
out
, "-------------------------\n");

648 
	`outbuf_addv
(
out
, "Prog†sw≠≥d: %10lu\n", 
num_sw≠≥d
);

649 
	`outbuf_addv
(
out
, "Löíum byãs: %10lu\n", 
löe_num_byãs_sw≠≥d
);

650 
	`outbuf_addv
(
out
, "TŸÆ byã†sw≠≥d: %10lu\n", 
tŸÆ_byãs_sw≠≥d
);

651 i‡(!
sw≠_fûe
)

653 
	`outbuf_add
(
out
, "No swap file\n");

656 
size
 = 
˙t
 = 0;

657 
m
 = 
sw≠_‰ì
; m; 
size
 +m->
Àngth
, 
˙t
++, m = m->
√xt
)

659 
	`sw≠_£ek
(0, 2);

660 #ifde‡
SWAP_USE_FD


661 
íd
 = 
	`ãŒ
(
sw≠_fûe
Ë- 
œ°_d©a
;

663 
íd
 = 
	`·ñl
(
sw≠_fûe
Ë- 
œ°_d©a
;

665 i‡(
íd
)

667 
size
 +
íd
;

668 
˙t
++;

670 
	`outbuf_addv
(
out
, "Fªed byãs: %10lu (%d chunks)\n", 
size
, 
˙t
);

671 
	}
}

676 
	$u∆ök_sw≠_fûe
()

678 i‡(
sw≠_fûe
 == 0)

682 #ifde‡
SWAP_USE_FD


683 
	`˛o£
(
sw≠_fûe
);

684 
	`u∆ök
(
fûe_«me
);

686 
	`u∆ök
(
fûe_«me
);

687 
	`f˛o£
(
sw≠_fûe
);

689 
	}
}

	@src/sysmalloc.c

1 
	#IN_MALLOC_WRAPPER


	)

2 
	#NO_OPCODES


	)

3 
	~"°d.h
"

4 
	~"Õc_ö˛.h
"

5 
	~"simuœã.h
"

6 
	~"comm.h
"

8 #ifde‡
DO_MSTATS


9 
	$show_m°©s
(
outbuf„r_t
 *
ob
, *
s
)

11 
	`outbuf_add
(
ob
, "QTZ_ServerEngine:No malloc statisticsávailable with SYSMALLOC\n");

12 
	}
}

	@src/trees.c

10 
	#SUPPRESS_COMPILER_INLINES


	)

11 
	~"°d.h
"

12 
	~"Õc_ö˛.h
"

13 
	~"åìs.h
"

14 
	~"compûî.h
"

15 
	~"›codes.h
"

16 
	~"Àx.h
"

19 
∑r£_node_block_t
 *
	g∑r£_block_li°
 = 0;

20 
∑r£_node_block_t
 *
	g‰ì_block_li°
 = 0;

22 
∑r£_node_t
 *
	g√xt_node
 = 0;

23 
∑r£_node_t
 *
	gœ°_node
 = 0;

25 
	gœ°_¥og_size
 = 1;

28 
	$‰ì_åì
()

30 
∑r£_node_block_t
 *
cur_block
;

32 i‡(!(
cur_block
 = 
∑r£_block_li°
) )

37 
cur_block
->
√xt
)

39 
cur_block
 = cur_block->
√xt
;

43 
cur_block
->
√xt
 = 
‰ì_block_li°
;

44 
‰ì_block_li°
 = 
∑r£_block_li°
;

45 
∑r£_block_li°
 = 0;

46 
√xt_node
 = 0;

47 
œ°_node
 = 0;

48 
	}
}

51 
	$ªÀa£_åì
()

53 
∑r£_node_block_t
 *
cur_block
;

54 
∑r£_node_block_t
 *
√xt_block
;

56 
	`‰ì_åì
();

57 
√xt_block
 = 
‰ì_block_li°
;

58  (
cur_block
 = 
√xt_block
) )

60 
√xt_block
 = 
cur_block
->
√xt
;

61 
	`FREE
(
cur_block
);

63 
‰ì_block_li°
 = 0;

64 
œ°_¥og_size
 = 1;

65 
	}
}

69 
∑r£_node_t
 *
	$√w_node
()

71 
∑r£_node_block_t
 *
cur_block
;

74 i‡(
√xt_node
 < 
œ°_node
)

76 
√xt_node
->
löe
 = 
cuºít_löe_ba£
 + 
cuºít_löe
;

77 
	`DBVAR_NODE_CLEAR
(
√xt_node
);

78  
√xt_node
++;

82 i‡–(
cur_block
 = 
‰ì_block_li°
) )

84 
‰ì_block_li°
 = 
cur_block
->
√xt
;

88 
cur_block
 = 
	`ALLOCATE
(
∑r£_node_block_t
, 
TAG_COMPILER
, "new_node");

91 
cur_block
->
√xt
 = 
∑r£_block_li°
;

92 
∑r£_block_li°
 = 
cur_block
;

94 
√xt_node
 = &
cur_block
->
nodes
[0];

95 
œ°_node
 = &
cur_block
->
nodes
[
NODES_PER_BLOCK
];

96 
√xt_node
->
löe
 = 
cuºít_löe_ba£
 + 
cuºít_löe
;

97 
	`DBVAR_NODE_CLEAR
(
√xt_node
);

98  
√xt_node
++;

99 
	}
}

105 
∑r£_node_t
 *
	$√w_node_no_löe
()

107 
∑r£_node_block_t
 *
cur_block
;

110 i‡(
√xt_node
 < 
œ°_node
)

112 
√xt_node
->
löe
 = 0;

113 
	`DBVAR_NODE_CLEAR
(
√xt_node
);

114  
√xt_node
++;

117 i‡–(
cur_block
 = 
‰ì_block_li°
) )

119 
‰ì_block_li°
 = 
cur_block
->
√xt
;

123 
cur_block
 = 
	`ALLOCATE
(
∑r£_node_block_t
, 
TAG_COMPILER
, "new_node");

126 
cur_block
->
√xt
 = 
∑r£_block_li°
;

127 
∑r£_block_li°
 = 
cur_block
;

129 
√xt_node
 = &
cur_block
->
nodes
[0];

130 
œ°_node
 = &
cur_block
->
nodes
[
NODES_PER_BLOCK
];

131 
√xt_node
->
löe
 = 0;

132 
	`DBVAR_NODE_CLEAR
(
√xt_node
);

133  
√xt_node
++;

134 
	}
}

137 
∑r£_node_t
 *
	$make_bønched_node
(
köd
, 
ty≥
, 
∑r£_node_t
 *
l
,Ö¨£_node_à*
r
)

139 
∑r£_node_t
 *
ªt
;

141 
ªt
 = 
	`√w_node
();

142 
ªt
->
köd
 = kind;

143 
ªt
->
ty≥
 =Åype;

144 
ªt
->
l
.
ex¥
 =Ü;

145 
ªt
->
r
.
ex¥
 =Ñ;

146  
ªt
;

147 
	}
}

150 
∑r£_node_t
 *
	$bö¨y_öt_›
(
∑r£_node_t
 *
l
,Ö¨£_node_à*
r
, 
›
, *
«me
)

152 
∑r£_node_t
 *
ªt
;

154 i‡(
exa˘_ty≥s
)

156 i‡(!
	`IS_TYPE
(
l
->
ty≥
, 
TYPE_NUMBER
) )

158 
buf
[256];

159 *
íd
 = 
	`EndOf
(
buf
);

160 *
p
;

162 
p
 = 
	`°Ωut
(
buf
, 
íd
, "QTZ_ServerEngine:BadÜeftárgumentÅo '");

163 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

164 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

165 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
l
->
ty≥
);

166 
p
 = 
	`°Ωut
’, 
íd
, "\"");

167 
	`yyîr‹
(
buf
);

169 i‡(!
	`IS_TYPE
(
r
->
ty≥
, 
TYPE_NUMBER
) )

171 
buf
[256];

172 *
íd
 = 
	`EndOf
(
buf
);

173 *
p
;

175 
p
 = 
	`°Ωut
(
buf
, 
íd
, "QTZ_ServerEngine:BadÑightárgumentÅo '");

176 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

177 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

178 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
r
->
ty≥
);

179 
p
 = 
	`°Ωut
’, 
íd
, "\"");

180 
	`yyîr‹
(
buf
);

183 i‡(
l
->
köd
 =
NODE_NUMBER
)

185 i‡(
r
->
köd
 =
NODE_NUMBER
)

187 
›
)

189 
F_OR
:

190 
l
->
v
.
numbî
 |
r
->v.number;

192 
F_XOR
:

193 
l
->
v
.
numbî
 ^
r
->v.number;

195 
F_AND
:

196 
l
->
v
.
numbî
 &
r
->v.number;

198 
F_LSH
:

199 
l
->
v
.
numbî
 <<
r
->v.number;

201 
F_RSH
:

202 
l
->
v
.
numbî
 >>
r
->v.number;

204 
F_MOD
:

205 i‡(
r
->
v
.
numbî
 == 0)

207 
	`yyîr‹
("QTZ_ServerEngine:Modulo by zero constant");

210 
l
->
v
.
numbî
 %
r
->v.number;

213 
	`Áèl
("QTZ_ServerEngine:Unknown opcode in binary_int_op()\n");

215  
l
;

217 
›
)

219 
F_OR
:

220 
F_XOR
:

221 
F_AND
:

222 
	`CREATE_BINARY_OP
(
ªt
, 
›
, 
TYPE_NUMBER
, 
r
, 
l
);

223  
ªt
;

226 
	`CREATE_BINARY_OP
(
ªt
, 
›
, 
TYPE_NUMBER
, 
l
, 
r
);

227  
ªt
;

228 
	}
}

234 
∑r£_node_t
 *
	$make_ønge_node
(
code
, 
∑r£_node_t
 *
ex¥
,Ö¨£_node_à*
l
,Ö¨£_node_à*
r
)

236 
∑r£_node_t
 *
√wnode
;

238 i‡(
r
)

240 
	`CREATE_TERNARY_OP
(
√wnode
, 
code
, 0, 
l
, 
r
, 
ex¥
);

244 
	`CREATE_BINARY_OP
(
√wnode
, 
code
, 0, 
l
, 
ex¥
);

247 i‡(
exa˘_ty≥s
)

249 
ex¥
->
ty≥
)

251 
TYPE_ANY
:

252 
TYPE_STRING
:

253 
TYPE_BUFFER
:

254 
√wnode
->
ty≥
 = 
ex¥
->type;

258 i‡(
ex¥
->
ty≥
 &
TYPE_MOD_ARRAY
)

260 
√wnode
->
ty≥
 = 
ex¥
->type;

264 
	`ty≥_îr‹
("QTZ_SîvîEngöe:BadÅy≥ o‡¨gumíàu£d f‹Ñ™ge: ", 
ex¥
->
ty≥
);

265 
√wnode
->
ty≥
 = 
TYPE_ANY
;

269 i‡(!
	`IS_TYPE
(
l
->
ty≥
, 
TYPE_NUMBER
) )

271 
	`ty≥_îr‹
("QTZ_SîvîEngöe:BadÅy≥ o‡À· indexÅÿøngê›î©‹", 
l
->
ty≥
);

273 i‡(
r
 && !
	`IS_TYPE
‘->
ty≥
, 
TYPE_NUMBER
) )

275 
	`ty≥_îr‹
("QTZ_SîvîEngöe:BadÅy≥ o‡righàödexÅÿøngê›î©‹", 
r
->
ty≥
);

280 
√wnode
->
ty≥
 = 
TYPE_ANY
;

282  
√wnode
;

283 
	}
}

289 
∑r£_node_t
 *
	$ö£π_p›_vÆue
(
∑r£_node_t
 *
ex¥
)

291 
∑r£_node_t
 *
ª∂a˚mít
;

293 i‡(!
ex¥
)

297 i‡(
ex¥
->
ty≥
 =
TYPE_NOVALUE
)

299 
ex¥
->
ty≥
 = 
TYPE_VOID
;

300  
ex¥
;

302 
ex¥
->
köd
)

304 
NODE_EFUN
:

305 i‡(
ex¥
->
v
.
numbî
 &
NOVALUE_USED_FLAG
)

307 
ex¥
->
v
.
numbî
 &~
NOVALUE_USED_FLAG
;

308  
ex¥
;

311 
NODE_TWO_VALUES
:

326 i‡–(
ex¥
->
r
.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr) ) )

328  
ex¥
;

330  
ex¥
->
l
.expr;

331 
NODE_IF
:

336 
ex¥
->
l
.ex¥ = 
	`ö£π_p›_vÆue
(expr->l.expr);

337 
ex¥
->
r
.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr);

339 i‡(!
ex¥
->
l
.ex¥ && !ex¥->
r
.expr)

342  
	`ö£π_p›_vÆue
(
ex¥
->
v
.expr);

344  
ex¥
;

345 
NODE_TERNARY_OP
:

346 
ex¥
->
r
.ex¥->
v
.
numbî
)

348 
F_NN_RANGE
:

349 
F_RN_RANGE
:

350 
F_RR_RANGE
:

351 
F_NR_RANGE
:

352 
ex¥
->
köd
 = 
NODE_TWO_VALUES
;

353 
ex¥
->
l
.ex¥ = 
	`ö£π_p›_vÆue
(expr->l.expr);

354 
ex¥
->
r
.ex¥->
köd
 = 
NODE_TWO_VALUES
;

355 
ex¥
->
r
.ex¥->
l
.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr->l.expr);

356 
ex¥
->
r
.ex¥->r.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr->r.expr);

358 i‡(!
ex¥
->
l
.expr)

360 
ex¥
 =Éx¥->
r
.expr;

361 i‡(!
ex¥
->
l
.expr)

363  
ex¥
->
r
.expr;

365 i‡(!
ex¥
->
r
.expr)

367  
ex¥
->
l
.expr;

372 i‡(!
ex¥
->
r
.ex¥->
l
.expr)

374 
ex¥
->
r
.expr =Éxpr->r.expr->r.expr;

375 i‡(!
ex¥
->
r
.expr)

377  
ex¥
->
l
.expr;

382 i‡(!
ex¥
->
r
.expr->r.expr)

384 
ex¥
->
r
.ex¥ =Éx¥->r.ex¥->
l
.expr;

388  
ex¥
;

392 
NODE_CALL
:

393 
NODE_BINARY_OP
:

394 
NODE_UNARY_OP_1
:

395 
NODE_UNARY_OP
:

396 
NODE_OPCODE_1
:

397 
ex¥
->
v
.
numbî
)

399 
F_AGGREGATE_ASSOC
:

402  
	`throw_away_m≠pög
(
ex¥
);

403 
F_AGGREGATE
:

404  
	`throw_away_ˇŒ
(
ex¥
);

405 
F_PRE_INC
:

406 
F_POST_INC
:

407 
ex¥
->
v
.
numbî
 = 
F_INC
;

408  
ex¥
;

409 
F_PRE_DEC
:

410 
F_POST_DEC
:

411 
ex¥
->
v
.
numbî
 = 
F_DEC
;

412  
ex¥
;

413 
F_NOT
:

414 
F_COMPL
:

415 
F_NEGATE
:

416 
ex¥
 = 
	`ö£π_p›_vÆue
”x¥->
r
.expr);

417  
ex¥
;

418 
F_MEMBER
:

419 
ex¥
 = 
	`ö£π_p›_vÆue
”x¥->
r
.expr);

420  
ex¥
;

421 
F_LOCAL
:

422 
F_GLOBAL
:

424 
F_EQ
:

425 
F_NE
:

426 
F_GT
:

427 
F_GE
:

428 
F_LT
:

429 
F_LE
:

430 
	`yyw¨n
("QTZ_ServerEngine:Value of conditionalÉxpression is unused");

432 
F_OR
:

433 
F_XOR
:

434 
F_AND
:

435 
F_LSH
:

436 
F_RSH
:

437 
F_ADD
:

438 
F_SUBTRACT
:

439 
F_MULTIPLY
:

440 
F_DIVIDE
:

441 
F_MOD
:

442 
F_RE_RANGE
:

443 
F_NE_RANGE
:

444 
F_RINDEX
:

445 
F_INDEX
:

446 
ex¥
->
köd
 = 
NODE_TWO_VALUES
;

447 i‡–(
ex¥
->
l
.ex¥ = 
	`ö£π_p›_vÆue
(expr->l.expr) ) )

449 i‡–(
ex¥
->
r
.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr) ) )

451  
ex¥
;

455  
ex¥
->
l
.expr;

460  
	`ö£π_p›_vÆue
(
ex¥
->
r
.expr);

463 
F_ASSIGN
:

464 i‡(
	`IS_NODE
(
ex¥
->
r
.ex¥, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
) )

466 
tmp
 = 
ex¥
->
r
.ex¥->
l
.
numbî
;

467 
ex¥
->
köd
 = 
NODE_UNARY_OP_1
;

468 
ex¥
->
r
.ex¥ =Éx¥->
l
.expr;

469 
ex¥
->
v
.
numbî
 = 
F_VOID_ASSIGN_LOCAL
;

470 
ex¥
->
l
.
numbî
 = 
tmp
;

474 
ex¥
->
v
.
numbî
 = 
F_VOID_ASSIGN
;

476  
ex¥
;

477 
F_ADD_EQ
:

478 
ex¥
->
v
.
numbî
 = 
F_VOID_ADD_EQ
;

479  
ex¥
;

482 
NODE_PARAMETER
:

483 
NODE_ANON_FUNC
:

485 
NODE_FUNCTION_CONSTRUCTOR
:

487 
NODE_NUMBER
:

488 
NODE_STRING
:

489 
NODE_REAL
:

492 
	`CREATE_UNARY_OP
(
ª∂a˚mít
, 
F_POP_VALUE
, 0, 
ex¥
);

493  
ª∂a˚mít
;

494 
	}
}

500 
	$is_boﬁón
(
∑r£_node_t
 *
≤
)

502 
≤
->
köd
)

504 
NODE_UNARY_OP
:

505 i‡(
≤
->
v
.
numbî
 =
F_NOT
)

510 
NODE_BINARY_OP
:

511 i‡(
≤
->
v
.
numbî
 >
F_EQ
 &&Ön->v.numbî <
F_GT
)

516 
NODE_LAND_LOR
:

517 
NODE_BRANCH_LINK
:

521 
	}
}

527 
∑r£_node_t
 *
	$›timize_lo›_ã°
(
∑r£_node_t
 *
≤
)

529 
∑r£_node_t
 *
ªt
;

531 i‡(
	`IS_NODE
(
≤
, 
NODE_BINARY_OP
, 
F_LT
Ë&& IS_NODE’n->
l
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL
) )

533 i‡(
	`IS_NODE
(
≤
->
r
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL
) )

535 
	`CREATE_OPCODE_2
(
ªt
, 
F_LOOP_COND_LOCAL
, 0, 
≤
->
l
.
ex¥
->l.
numbî
,Ön->
r
.expr->l.number);

537 i‡(
≤
->
r
.
ex¥
->
köd
 =
NODE_NUMBER
)

539 
	`CREATE_OPCODE_2
(
ªt
, 
F_LOOP_COND_NUMBER
, 0, 
≤
->
l
.
ex¥
->l.
numbî
,Ön->
r
.ex¥->
v
.number);

543 
ªt
 = 
≤
;

546 i‡(
	`IS_NODE
(
≤
, 
NODE_UNARY_OP
, 
F_POST_DEC
Ë&& IS_NODE’n->
r
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
) )

548 
lv¨
 = 
≤
->
r
.
ex¥
->
l
.
numbî
;

549 
	`CREATE_OPCODE_1
(
ªt
, 
F_WHILE_DEC
, 0, 
lv¨
);

553 
ªt
 = 
≤
;

556  
ªt
;

557 
	}
}

	@src/ualarm.c

1 #i‚de‡
HAS_UALARM


35 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

36 
	gsccsid
[] = "@(#)ualarm.c 5.5 (Berkeley) 2/23/91";

39 
	~"°d.h
"

41 
	#USPS
 1000000

	)

48 
	$uÆ¨m
(
u£cs
, 
ªlﬂd
)

50 
ôimîvÆ
 
√w
, 
ﬁd
;

52 
√w
.
ô_öãrvÆ
.
tv_u£c
 = 
ªlﬂd
 % 
USPS
;

53 
√w
.
ô_öãrvÆ
.
tv_£c
 = 
ªlﬂd
 / 
USPS
;

55 
√w
.
ô_vÆue
.
tv_u£c
 = 
u£cs
 % 
USPS
;

56 
√w
.
ô_vÆue
.
tv_£c
 = 
u£cs
 / 
USPS
;

58 i‡(
	`£tôimî
(
ITIMER_REAL
, &
√w
, &
ﬁd
) == 0)

60  (
ﬁd
.
ô_vÆue
.
tv_£c
 *
USPS
 + old.ô_vÆue.
tv_u£c
);

64 
	}
}

	@src/wrappedmalloc.c

6 
	#IN_MALLOC_WRAPPER


	)

7 
	#NO_OPCODES


	)

8 
	~"°d.h
"

9 
	~"mÆloc.h
"

10 
	~"Õc_ö˛.h
"

11 
	~"comm.h
"

13 
	s°©s_s


15 
	m‰ì_ˇŒs
, 
	mÆloc_ˇŒs
, 
	mªÆloc_ˇŒs
;

16 } 
	t°©s_t
;

18 
°©s_t
 
	g°©s
;

20 
	$wøµedmÆloc_öô
()

22 
°©s
.
‰ì_ˇŒs
 = 0;

23 
°©s
.
Æloc_ˇŒs
 = 0;

24 
°©s
.
ªÆloc_ˇŒs
 = 0;

25 
	}
}

31 
INLINE
 *
	$wøµedªÆloc
(*
±r
, 
size
)

33 
°©s
.
ªÆloc_ˇŒs
++;

34  (*)
	`REALLOC
(
±r
, 
size
);

35 
	}
}

41 
INLINE
 *
	$wøµedmÆloc
(
size
)

43 
°©s
.
Æloc_ˇŒs
++;

44  (*)
	`MALLOC
(
size
);

45 
	}
}

51 
INLINE
 *
	$wøµedˇŒoc
(
nôems
, 
size
)

53 
°©s
.
Æloc_ˇŒs
++;

54  (*)
	`CALLOC
(
nôems
, 
size
);

55 
	}
}

61 
INLINE
 
	$wøµed‰ì
(*
±r
)

63 
°©s
.
‰ì_ˇŒs
++;

64 
	`FREE
(
±r
);

65 
	}
}

71 
	$dump_mÆloc_d©a
(
outbuf„r_t
 *
ob
)

73 
	`outbuf_add
(
ob
, "using wrapped malloc:\n\n");

74 
	`outbuf_addv
(
ob
, "#Ælo¯ˇŒs: %10lu\n", 
°©s
.
Æloc_ˇŒs
);

75 
	`outbuf_addv
(
ob
, "#‰ì cÆls: %10lu\n", 
°©s
.
‰ì_ˇŒs
);

76 
	`outbuf_addv
(
ob
, "#Ælo¯- #‰ì: %10lu\n", 
°©s
.
Æloc_ˇŒs
 - sèts.
‰ì_ˇŒs
);

77 
	`outbuf_addv
(
ob
, "#ªÆlo¯ˇŒs: %10lu\n", 
°©s
.
ªÆloc_ˇŒs
);

78 
	}
}

	@
1
.
0
271
5098
configure.h
grammar/bsdmalloc.c
grammar/cc.h
grammar/configure.h
grammar/debugmalloc.c
grammar/edit_source.c
grammar/efun_defs.c
grammar/efun_protos.h
grammar/efunctions.h
grammar/func_spec.c
grammar/make_func.tab.c
grammar/op_spec.c
grammar/opc.h
grammar/opcodes.h
grammar/option_defs.c
grammar/options.h
grammar/options_incl.h
grammar/preprocess.c
grammar/smalloc.c
grammar/spec.h
grammar/std.h
grammar/sysmalloc.c
grammar/wrappedmalloc.c
include/applies.h
include/arch.h
include/array.h
include/avltree.h
include/backend.h
include/binaries.h
include/bsdmalloc.h
include/buffer.h
include/c_ext_fc.h
include/c_fct.h
include/cc.h
include/ccode.h
include/class.h
include/comm.h
include/command.h
include/compile_file.h
include/compiler.h
include/condvar_md.h
include/config.h
include/contrib.h
include/crypt.h
include/debug.h
include/debugmalloc.h
include/dirty.h
include/dumpstat.h
include/edit_source.h
include/efun_protos.h
include/efunctions.h
include/efuns_incl.h
include/efuns_main.h
include/eoperators.h
include/file.h
include/file_incl.h
include/function.h
include/generate.h
include/grammar.tab.h
include/hash.h
include/icode.h
include/interpret.h
include/lex.h
include/lint.h
include/list.h
include/localtime.h
include/lpc.h
include/lpc_args_op.h
include/lpc_incl.h
include/lpc_socket.h
include/lpc_to_c.h
include/macros.h
include/main.h
include/make_func.h
include/malloc.h
include/malloc_incl.h
include/mapping.h
include/marsh.h
include/md.h
include/mutex_md.h
include/object.h
include/opc.h
include/opcodes.h
include/origin.h
include/otable.h
include/port.h
include/portability.h
include/preprocess.h
include/program.h
include/qsort.h
include/queue.h
include/rc.h
include/reclaim.h
include/regexp.h
include/replace_program.h
include/scratchpad.h
include/simul_efun.h
include/simulate.h
include/smalloc.h
include/socket_err.h
include/sprintf.h
include/stack.h
include/std.h
include/std_incl.h
include/stralloc.h
include/strstr.h
include/swap.h
include/trees.h
include/wrappedmalloc.h
lib/lstack.c
lib/lstack.h
packages/cksum.c
packages/comm.c
packages/contrib.c
packages/contrib_spec.h
packages/db/db_format.c
packages/db/db_main.c
packages/db/fs_db_format.h
packages/dbi.c
packages/develop.c
packages/develop_spec.h
packages/escape.c
packages/escape.h
packages/fs.h
packages/fs_cksum.h
packages/fs_comm.h
packages/fs_config.c
packages/fs_config.h
packages/fs_curl.c
packages/fs_curl.h
packages/fs_data_save.c
packages/fs_data_save.h
packages/fs_dbd_spec.h
packages/fs_dbi.h
packages/fs_dns.c
packages/fs_dns.h
packages/fs_enigma.c
packages/fs_http_lpc_spec.h
packages/fs_iconv.c
packages/fs_ipc.h
packages/fs_log.c
packages/fs_log.h
packages/fs_lpc_ext.c
packages/fs_lpc_ext.h
packages/fs_lpc_op.h
packages/fs_main_spec.h
packages/fs_marshal.h
packages/fs_mbuf.c
packages/fs_mbuf.h
packages/fs_mysql.c
packages/fs_mysql.h
packages/fs_mysql_spec.h
packages/fs_netd_spec.h
packages/fs_rpc.h
packages/fs_rpc_c.h
packages/fs_rpc_id.h
packages/fs_rpc_lpc.h
packages/fs_rpc_lpc_spec.h
packages/game/fs_atom.c
packages/game/fs_atom.h
packages/game/fs_callout.c
packages/game/fs_callout.h
packages/game/fs_char_ob.c
packages/game/fs_char_ob.h
packages/game/fs_common.h
packages/game/fs_data_map.c
packages/game/fs_data_map.h
packages/game/fs_db.c
packages/game/fs_db.h
packages/game/fs_hlist.c
packages/game/fs_hlist.h
packages/game/fs_int_array.h
packages/game/fs_item.c
packages/game/fs_item.h
packages/game/fs_lpcob_table.c
packages/game/fs_lpcob_table.h
packages/game/fs_main.c
packages/game/fs_main.h
packages/game/fs_mem_pool.c
packages/game/fs_mem_pool.h
packages/game/fs_npc.c
packages/game/fs_npc.h
packages/game/fs_prop_key.h
packages/game/fs_summon.c
packages/game/fs_summon.h
packages/game/fs_team.c
packages/game/fs_team.h
packages/game/fs_user.h
packages/game/fs_user_manage.c
packages/game/team_macros.h
packages/game/uthash.h
packages/gettext.c
packages/http_lpc.c
packages/http_lpc.h
packages/kern_timeout.c
packages/local_options.h
packages/marshal.c
packages/math.c
packages/math_spec.h
packages/mkdir.c
packages/mkdir.h
packages/netd/netd_main.c
packages/rpc.c
packages/rpc_c.c
packages/rpc_lpc.c
packages/socket_err.c
packages/sockets.c
packages/sockets_spec.h
packages/timeout.h
packages/yauthLib.h
packages/z.c
packages/z.h
packages/zopen.c
packages/zopen.h
src/array.c
src/avltree.c
src/backend.c
src/binaries.c
src/bsdmalloc.c
src/buffer.c
src/class.c
src/comm.c
src/compiler.c
src/crypt.c
src/debugmalloc.c
src/dirty.c
src/disassembler.c
src/dumpstat.c
src/efuns_main.c
src/efuns_port.c
src/eoperators.c
src/file.c
src/generate.c
src/grammar.tab.c
src/hash.c
src/icode.c
src/interpret.c
src/lex.c
src/list.c
src/main.c
src/make_func.c
src/make_malloc.c
src/malloc.c
src/mallocwrapper.c
src/mapping.c
src/marsh.c
src/object.c
src/op_spec.c
src/otable.c
src/port.c
src/preprocess.c
src/program.c
src/qsort.c
src/rc.c
src/reclaim.c
src/regexp.c
src/replace_program.c
src/scratchpad.c
src/simul_efun.c
src/simulate.c
src/smalloc.c
src/sprintf.c
src/stack.c
src/stralloc.c
src/strfuncs.c
src/strstr.c
src/swap.c
src/sysmalloc.c
src/trees.c
src/ualarm.c
src/wrappedmalloc.c

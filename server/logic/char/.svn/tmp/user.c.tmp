// 用户数据文件
// ------------------------------------------------------
// 本文件将只存放一个用户的数据
// 对数据测操作，请参照char/user_op.c
// 引擎中会存贮用户数据，脚本管理char/user_op实例
// 在char/user_op中会缓存用户数据的实例
// ------------------------------------------------------

static object logger;
#include <macros.h>
// 数据include from user_data
#include <user_data.h>
#include <user_key.h>
#include <debug.h>
#include "/char/item_op.h"
#include "/rc/rpc/user_cmd.h"
//////////////////////////////////////////////////////////
//返回值声明区
static int GRADE_UP=1;
static int GRADE_STAY=0;
//////////////////////////////////////////////////////////


static int checkUpGrade();
int upGrades();
int calNextExp();
int getGrade();
int getExp();
int addExp(int expAdded);
int getHP();
void upOneGradeAction();
void upAllGradeAction();
int getBaseProp(int grade);
int getBuzhengNaili(int grade);
int getNaili(int grade);
int getFujiaNaili();
int restoreMaxHP();
void restoreAllTempAttr();

void RestoreAllItem();
int RestoreItem(mapping mpSave);
void MoveItem(int itemId, int badId, int pos);


varargs mixed getProp(mixed key, mixed defValue)
{
	mixed v = prop[key];

	if (undefinedp(v) && !undefinedp(defValue)) {
		prop[key] = defValue;
		return defValue;
	} else {
		return v;
	}
}

void setProp(mixed key, mixed value)
{
	prop[key] = value;
}

void delProp(mixed key)
{
	map_delete(prop, key);	
}

void setTemp(mixed key, mixed val)
{
	temp_var[key] = val;
}

void delTemp(mixed key)
{
	map_delete(temp_var, key);
}

varargs mixed getTemp(mixed key, mixed defValue)
{
	mixed v = temp_var[key];

	if (undefinedp(v) && !undefinedp(defValue)) {
		temp_var[key] = defValue;
		return defValue;
	} else {
		return v;
	}
}

int RestoreItem(mapping mpSave)
{
	string cType = mpSave[C_ITEM_TYPE];
	string path;
	int item;

	if (undefinedp(cType) || !sizeof(cType)) {
		return 0;
	}

	path = ITEM_DIR + cType + ".c";

	if (catch(call_other(path, "???" )) != 0) {
		debug_message(sprintf("can't create item[Type:%s]", cType));
		return 0;
	}

	item = restore_item(path, mpSave);

	return item;
}


void TestGiveItem()
{
	debug_message("enter TestGiveItem");
	int nItem = Import("ITEM_UTIL")->CreateItem("YP01003",1);
	int iBagId = ITEM_BAG_NORMAL;
	int emptyPos = GetEmptyPos(iBagId);
	int add_item_res = AddSaveItem(iBagId,emptyPos,nItem);	
	debug_message(sprintf("Test Give Item itemid=%d iBagId=%d emptyPos=%d res=%d", nItem, iBagId, emptyPos, add_item_res));
}

void RestoreAllItem()
{
	foreach(int iBagId, mapping mpItems in item) 
	{
		foreach( int iPos, mapping mpSave in mpItems) 
		{
			int ItemId;
			
			if (catch(ItemId = RestoreItem(mpSave)) != 0) {
				debug_message(sprintf("[%d] pos[%d] load item error: %O", usernum, iPos, mpSave));
				continue;
			}

			assert(ItemId > 0);
/*

			if (ItemIsTimeOut( ItemId ))
			{
				//DestroyItem( ItemId );
				continue;
			}
*/

			// debug_message(sprintf("RestoreItem %d (%d,%d)", ItemId, iBagId, iPos));
			AddRestoreItem(ItemId, iBagId, iPos);
		}
	}
}

string getName()
{
	return prop[C_USER_NAME];
}

void setName(string name)
{
	prop[C_USER_NAME] = name;
}


int getGrade()
{
	return prop[I_USER_GRADE];
}

int getId()
{
	return usernum;
}


int getBaseProp(int grade)
{
	return pow(grade , 1.6) / 10 * 6;
}

int getBuzhengNaili(int grade)
{
	return 20;
}

int getFujiaNaili()
{
	return 0;
}

int getNaili(int grade)
{
	return to_int(getBaseProp(grade) + getBuzhengNaili(grade) + getFujiaNaili());
}

int getFujiaHP()
{
	return 100;
}

int getGemHPBeishu()
{
	return 2;
}

int getFormulaHP(int naili)
{
	return naili * (5 + 1.0/2) / 100 * 75;
}

int calMaxHP(int naili)
{
	return to_int((getFormulaHP(naili) + getFujiaHP()) * getGemHPBeishu());
}


int getMaxHP()
{
	int maxHP = getTemp(T_USER_MAX_HP);
	debug_message(sprintf("getMaxHP:%d", maxHP));
	return maxHP;
}

int restoreMaxHP()
{
	int grade = getGrade();
	int naili = getNaili(grade);
	int maxHP = calMaxHP(naili);
	setTemp(T_USER_MAX_HP, maxHP);
	debug_message(sprintf("restoreMaxHP:%d", maxHP));
	return maxHP;
}

int getFujiaStrength()
{
	return 0;
}

int getBaseAttack()
{
	int grade = getGrade();
	int strength = getBaseProp(grade);
	int strengthBuzheng = 20;
	strength += strengthBuzheng;
	return strength;
}

int getFujiaAttack()
{
	return 0;
}

int getGemAttackBeishu()
{
	return 1;
}

int restoreAttack()
{
	int grade = getGrade();
	int baseAttack = getBaseAttack(); 
 	int fujiaAttack = getFujiaAttack();
	float gemBeishu = getGemAttackBeishu();
	int attack = to_int((baseAttack + fujiaAttack) * gemBeishu);
	setTemp(T_USER_ATTACK, attack);
	//logger->Log("restore attack uid=%d baseattack=%d fujiaattack=%d gembeishu=%d attack=%d", usernum, baseAttack, fujiaAttack, gemBeishu, attack);
	return attack;
}

int restoreDefence()
{
	int defence = 250;
	setTemp(T_USER_DEFENCE, defence);
	return defence;
}

int getDefence()
{
	int defence = getTemp(T_USER_DEFENCE);
	return defence;
}


int restoreQiangfa()
{
	int qiangfa = 250;
	setTemp(T_USER_QIANGFA, qiangfa);
	return qiangfa;
}

int getQiangfa()
{
	int qiangfa = getTemp(T_USER_QIANGFA);
	return qiangfa;
}


int restoreKangfa()
{
	int kangfa = 250;
	setTemp(T_USER_KANGFA, kangfa);
	return kangfa;
}

int getKangfa()
{
	int kangfa = getTemp(T_USER_QIANGFA);
	return kangfa;
}


int restoreSpeed()
{
	int speed = 250;
	setTemp(T_USER_SPEED, speed);
	return speed;
}

int getSpeed()
{
	int speed = getTemp(T_USER_SPEED);
	return speed;
}


void restoreAllTempAttr()
{
	restoreMaxHP();
	restoreAttack();
	restoreDefence();
	restoreQiangfa();
	restoreKangfa();
	restoreSpeed();
}

int getAttack()
{
	int attack = getTemp(T_USER_ATTACK);	
	return attack;
}


static void setup(int uid)
{
	restoreAllTempAttr();
	//todo remove me!!
	//prop[I_USER_ICON] = 10001;
	//prop[I_USER_LAYOUT] = 10001;
	//prop[I_USER_Z] = 1001;
	///

	"char/user_cmd"->new_hero(this_object());
	InitItemFrames();
	RestoreAllItem();
	/*
	InitSummonFrames();

	catch(RestoreItem());
	catch(RestoreSummon());
	// 计算人物属性
	*/
	
	int x = prop[I_USER_X];
	int y = prop[I_USER_Y];
	int z = prop[I_USER_Z];
	player_enter_scene(uid, z, x, y);
	debug_message("uid:%d enter scene z:%d, x:%d, y:%d\n", uid, z, x, y);
}

static void commonLoginCheck(object user)
{
	Import("MISSION_MAIN")->loginCheck(user);
}

static void firstLoginCheck(object user)
{
	commonLoginCheck(user);
}

static void loginCheck(object user)
{
	commonLoginCheck(user);
}

void onUserLoad(int uid)
{
	usernum = uid;
	setup(uid);
	//"char/user_cmd"->send_hero_profile(this_object());
	loginCheck(this_object());
}

static void init(int uid, int icon, string name)
{
	usernum = uid;
	prop[C_USER_NAME] = name;
	prop[I_USER_ICON] = icon;
	prop[I_USER_GRADE] = 1;
	prop[I_USER_CASH] = 0;
	prop[I_USER_X] = 600;
	prop[I_USER_Y] = 500;
	prop[I_USER_Z] = 1001;

	prop[I_USER_HP_KEY] = restoreMaxHP();
	prop[I_USER_CREATED_TIME] = time();
}

void born(int uid, int icon, string name)
{
        debug_message("new user born, uid:%d, icon:%d, name:%s", uid, icon, name);
	init(uid, icon, name);
	setup(uid);
	Import("DB")->new_user(this_object());
        firstLoginCheck(this_object());
}

string getUMS()
{
        return "jun37213721";
}

mapping getMission()
{
        return mission;
}

// ------------------------------------------------------------------------------


int getExp()
{
	return prop[I_USER_EXP];
}

int getHP()
{
	return to_int(prop[I_USER_HP_KEY]);
}

int getGradeUpExp(int iGrade)
{
	mapping gradeExpDict =  "data/user/exp"->get_data();
        return gradeExpDict[iGrade]["expr"];
}

int getMaxExp(int grade)
{
	return getGradeUpExp(grade);
}

int checkUpGrade()
{
	int grade = getGrade();
        int exp = getExp();
        int gradeUpExp = getGradeUpExp(grade);
	if (exp > gradeUpExp)
		return GRADE_UP;
	return GRADE_STAY;
}

void addExp(int expAdded)
{
	if (expAdded <= 0)
		return;
	prop[I_USER_EXP] += expAdded;	
	upGrades();
}

void upOneGradeAction()
{
	int oldGrade = prop[I_USER_GRADE];
	int newGrade = prop[I_USER_GRADE] = oldGrade + 1;
	int exp = getExp();
	int oldGradeMaxExp = getMaxExp(oldGrade);
	int newExp = exp - oldGradeMaxExp;
	if (newExp < 0)
		return;
	prop[I_USER_EXP] = newExp;
	restoreAllTempAttr();
	prop[I_USER_HP_KEY] = getMaxHP();
	class HeroGradeUpInfo gradeUpInfo = new(class HeroGradeUpInfo);
	gradeUpInfo->hp = gradeUpInfo->maxHP = getMaxHP();
	gradeUpInfo->grade = newGrade;
	
	rpc_client_hero_gradeup(usernum, gradeUpInfo);
}

void upAllGradeAction()
{

}

int upGrades()
{
	int upGradeFlag = 0;
	while(1)
	{
		if (checkUpGrade() == GRADE_UP)
		{
			upGradeFlag = 1;
			upOneGradeAction();
		}
		else
			break;
	}
	if (upGradeFlag)
		upAllGradeAction();
		return GRADE_UP;
	return GRADE_STAY;
}

// 提示频道
void tellTips(string format, mixed *args...)
{
	// TODO: 暂时用系统频道
	
	string cMsg = "";
	if (sizeof(args)) {
		cMsg = sprintf(format, args...);	
	} else {
		cMsg = format;
	}
	"module/chat"->tips(usernum, "", cMsg);
}

int getFightId()
{
	return getTemp(T_FIGHT_ID);
}

void SyncPos()
{
        int *pos = get_user_pos(usernum);
        if (!sizeof(pos)) return;
        prop[I_USER_X] = pos[1];
        prop[I_USER_Y] = pos[2];
        prop[I_USER_Z] = pos[0];
}

static void ReleaseResource()
{
        Import("DB")->unload_user(this_object());

	/*
        DestSummonFrames();
        DestItemFrames();
        RemoveFollowNpcs();
	*/
}

//call back by engine
void Logout()
{
        SyncPos();
        ReleaseResource();
}


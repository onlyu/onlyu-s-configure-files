#include <npc_key.h>
#include <macros.h>
#include <menu.h>
#include <debug.h>
#include <user_key.h>


int createNpc(mapping layout)
{
	string npcPath;

        if(layout["path"]) {
                npcPath = layout["path"];
                assert(file_size(npcPath) >= 0);
        } else {
		npcPath = NPC_BASE;
	}

        int npcId = new_npc(npcPath);
        SetNpc(npcId, K_NPC_BIRTH, time());
        if(layout["name"]) SetNpc(npcId, K_NPC_NAME, layout["name"]);
        if(layout["title"]) SetNpc(npcId, K_NPC_TITLE, layout["title"]);
        if(layout["icon"]) SetNpc(npcId, K_NPC_ICON, layout["icon"]);

        return npcId; 
}

static void loadNpc(int sysId, mapping layout)
{
        int npcId;

	npcId = Import("UNIQ_NPC")->systemId2NpcId(sysId);
	assert(sysId < SYS_NPC_NUM);
	//debug_message("load npcid:%d,sysid:%d", npcId, sysId);
	assert(npcId == 0);
	assert(!is_npc_online(npcId));

	npcId = createNpc(layout);
	assert(npcId > 0);
        Import("UNIQ_NPC")->registSystemNpc(npcId, sysId);
	Import("SCENE")->npcEnter(npcId, layout["scene"], layout["x"], layout["y"]);
}

void clickNpc(int uid, int npcId)
{
        object user = get_user(uid);
	if (!objectp(user)) {
		return;
	}

	int sysId = Import("UNIQ_NPC")->npcId2SystemId(npcId);
	if( !sysId ) return;

	mapping list = Import("MISSION_DATA")->getHideNpcList(user);
	if( !undefinedp(list[sysId]) ) return;

        object npcObj = get_npc_object(npcId);
        xassert( npcObj, npcId );

        npcObj->doClick(user, npcId);
}

// 加载所有的NPC
void loadAllNpc()
{
		return;
        mapping npcLayout = "module/scene/data/npc_layout"->get_data();
        foreach(int sysId, mapping layout in npcLayout) {
		//debug_message("load all npc sysid:%d", sysId);
                loadNpc(sysId, layout);
        }
}
	

void create()
{
}

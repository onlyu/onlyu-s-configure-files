
#include <var_prop.h>
//#include <npc_key.h>
#include "scene_macros.h"
//#include <event.h>
#include <macros.h>
#include <debug.h>


#include "/rc/rpc/user_cmd.h"

// 加载地图的信息
static mapping static_map_desc = ([]);
static mapping static_name_map_desc = ([]);


//引擎回调
void userMove(int uid, int sceneId, int x, int y)
{
	object user = get_user(uid);
//	debug_message("user move sceneId=%d,x=%d,y=%d", sceneId, x, y);
	Import("FUBEN")->walkFuben(user);
}

// 加载所有的场景 
int load_all_scene()
{
	int fx, fy, tscene, tx, ty;
	int ret;
	string file;

	debug_message(sprintf("load all scene:%O\n", static_map_desc));
	foreach (int mapid in keys(static_map_desc)) {

		/*
		file = sprintf("etc/map/%d.fss.fssg", mapid);
		if (!file_exist(file)) {
			debug_message(sprintf("无法创建地图[%d], 地图没有相应的地图文件[fss]", mapid));
			continue;
		}
		*/
		if (!(ret = create_scene(mapid))) {
			debug_message(sprintf("无法创建地图[%d]", mapid));
			continue ;
		}
		debug_message(sprintf("创建地图[%d]成功!!!!!!!!!", mapid));

	}

	//load_all_jump();
<<<<<<< .mine
	// load_all_transport();
=======
>>>>>>> .r81379
	return 1;
}

int IsRealScene(int sceneid)
{
	return !undefinedp(static_map_desc[sceneid]);
}

string GetSceneName(int sceneid)
{
	int mapid = get_real_scene(sceneid);

	if (!undefinedp(static_map_desc[mapid])) {
		return static_map_desc[mapid]["SceneName"];
	}
	return "";
}

int GetSceneIdByName(string cSceneName)
{
	return static_name_map_desc[cSceneName];
}


int CanFly(int sceneid)
{
	int real_scene = get_real_scene(sceneid);
	if (undefinedp(static_map_desc[real_scene])) {
		return 0;
	}
	return static_map_desc[real_scene]["CanFly"];
}

int CanQieCuo( int scene )
{
	int real_scene = get_real_scene(scene);
	if (undefinedp(static_map_desc[real_scene])) {
		return 0;
	}
	return static_map_desc[real_scene]["CanQieCuo"];
}

int CanPK( int scene )
{
	int real_scene = get_real_scene(scene);
	if (undefinedp(static_map_desc[real_scene])) {
		return 0;
	}
	return static_map_desc[real_scene]["CanPK"];
}

// 生成副本场景
mapping CreateCopyScene(mapping copy_desc)
{
	mapping copy_info = ([]);
	mixed *jmp_from, *jmp_to;
	int mapnum;

	foreach ( int mapid in copy_desc[K_SC_COPY_MAP] ) {
		if (undefinedp(static_map_desc[mapid])) continue;
		copy_info[mapid] = clone_scene(mapid);
	}

	if (sizeof(copy_desc[K_SC_JMP])) {
		foreach (mixed jp in copy_desc[K_SC_JMP]) {
			int from = copy_info[jp[0]];
			if (from) {
				int to = copy_info[jp[2]];
				to = to ? to : jp[2];
				set_jump_point(from, jp[1], ({to, jp[3], jp[4]}));
			}
		}
	}
	return copy_info;
}


// =====================================================
// 引擎回调

// 玩家进场回调
void PlayerEnterScene(int uid, int from_scene, int scene)
{
	object user;
	// 每次玩家进场

	user = get_user(uid);
	// 每次重进场都刷新一下坐标，存盘
	if (objectp(user)) {
		user->syncPos();
	}

	"module/fuben/main"->onPlayerEnterScene(user, from_scene, scene);

	/*
	class player_enter_scene_event_t event = new(class player_enter_scene_event_t);
	event->type = EVENT_PLAYER_ENTER_SCENE;
	event->id = scene;
	event->user = oUser;
	event->from_scene = from_scene;
	event->dest_scene = scene;
	"module/event"->FireEvent(event);
	*/
}

#define SHEYAO_STATUS "sheyao"
#define SHENYOU_STATUS "shenyou"

// 暗雷触发
// uid : 触发玩家
// mapid : 地图ID
void AnleiHappen(int uid, int mapid)
{
	/*
	// TODO: 暗雷数值
	int fightid, last_anlei_time, iTime;
	object oUser;
	mapping mpSheYao;
	mapping mpShenYou;

	oUser = get_user(uid);

	if (get_user_fightid(uid)) {
		return;
	}

	//last_anlei_time = oUser->GetTemp("last_anlei");
	iTime = time();
	*/

}

void FightHandler(int fightid, int winside, int mapid, int index)
{
}


void create()
{
	static_map_desc = "module/scene/scene_info.c"->get_data();

	foreach (int mapid, mapping map_desc in static_map_desc) {
		static_name_map_desc[map_desc["name"]] = mapid;
	}
}


// enter_npcid 进入 oUser 的区域
void SceneAddNpc(int enter_npcid, object oUser)
{
	/*
	int uid = oUser->GetId();
	mapping mpHook;
	object uniq_ob = Import("UNIQ_NPC");

	int uniqid = uniq_ob->npcId2SystemId(enter_npcid);

	// 系统NPC才刷新
	// if (uniq_ob->is_system_npc(uniqid)) {
	Import("MISSION_MAIN")->RefreshNpcAddon(oUser, enter_npcid);
	//}

	// 发送NPC的属性
	Import("CMD_CHAR")->RsyncNpcExtProp(uid, enter_npcid);

	// enter_npcid 进入玩家的HOOK
	mpHook = GetNpc(enter_npcid, M_NPC_ENTER_USER_HOOK);

	if (sizeof(mpHook)) {
		foreach (string file in keys(mpHook)) {
			if (!call_other(file, ({"NpcEnterUserField", enter_npcid, oUser}))) {
				map_delete(mpHook, file);
			}
		}
	}
	mpHook = oUser->GetTemp(M_T_ADD_USER_HOOK);
	if (sizeof(mpHook)) {
		foreach (string file in keys(mpHook)) {
			if (!call_other(file, ({"NpcEnterUserField", enter_npcid, oUser}))) {
				// 这里不做删除，如果需要删除在添加玩家时删除
				// map_delete(mpHook, file);
			}
		}
	}
	*/
}

// oEnterUser 进入 oUser 的区域
void SceneAddUser(object oEnterUser, object oUser)
{
	int *follownpcs = oEnterUser->GetFollowNpcs();
	int uid = oUser->GetId();
	int enter_uid = oEnterUser->GetId();
	int has_follow = 0;

	/*
	if (sizeof(follownpcs)) {
		foreach (int npcid in follownpcs) {
			if (is_npc_online(npcid)) {
				has_follow = 1;
				Import("CMD_SCENE")->ShowFollowNpc(uid, npcid, enter_uid);
			} else {
				oEnterUser->DelFollowNpc(npcid);
			}
		}
	}
	mapping mpHook = oEnterUser->GetTemp(M_T_ADD_USER_HOOK);
	if (sizeof(mpHook)) {
		foreach (string file in keys(mpHook)) {
			if (!call_other(file, ({"UserEnterUserField", oEnterUser, oUser}))) {
				map_delete(mpHook, file);
			}
		}
	}
	if (!sizeof(mpHook) && !has_follow) {
		// 注销引擎回调
		set_add_user_hook(enter_uid, 0);
	}
	*/
}


// 注册添加NPC回调接口
void HookNpcEnterUserField(int npcid, string file)
{
	/*
	mapping mpHook = GetNpc(npcid, M_NPC_ENTER_USER_HOOK);

	if (!mapp(mpHook)) {
		mpHook = ([]);
		mpHook[file] = 1;
		SetNpc(npcid, M_NPC_ENTER_USER_HOOK, mpHook);
	}
	else {
		mpHook[file] = 1;
	}
	*/
}

// 注销添加NPC回调
void UnHookNpcEnterUserField(int npcid, string file)
{
	/*
	mapping mpHook = GetNpc(npcid, M_NPC_ENTER_USER_HOOK);
	if (!mapp(mpHook) || undefinedp(mpHook[file])) {
		return;
	}
	map_delete(mpHook, file);
	*/
}

// 注册添加玩家回调接口
void HookUserEnterUserField(object oUser, string file)
{
	/*
	mapping mpHook = oUser->GetTemp(M_T_ADD_USER_HOOK);

	if (!mapp(mpHook)) {
		oUser->SetTemp(M_T_ADD_USER_HOOK, ([]));
		mpHook = oUser->GetTemp(M_T_ADD_USER_HOOK);
	}

	mpHook[file] = 1;
	// 引擎HOOK注册
	set_add_user_hook(oUser->GetId(), 1);
	*/
}

// 注销添加玩家回调
void UnHookUserEnterUserField(object oUser, string file)
{
	/*
	mapping mpHook = oUser->GetTemp(M_T_ADD_USER_HOOK);
	if (!mapp(mpHook) || undefinedp(mpHook[file])) {
		return;
	}
	map_delete(mpHook, file);
	if (!sizeof(mpHook)) {
		// 注销引擎回调
		set_add_user_hook(oUser->GetId(), 0);
	}
	*/
}

void HookEnterUserField(int charid, string file)
{
	/*
	if (is_online(charid)) {
		HookUserEnterUserField(get_user(charid), file);
		return;
	}
	if (is_npc_online(charid)) {
		HookNpcEnterUserField(charid, file);
		return;
	}
	*/
}

void UnHookEnterUserField(int charid, string file)
{
	/*
	if (is_online(charid)) {
		UnHookUserEnterUserField(get_user(charid), file);
		return;
	}
	if (is_npc_online(charid)) {
		UnHookNpcEnterUserField(charid, file);
		return;
	}
	*/
}
